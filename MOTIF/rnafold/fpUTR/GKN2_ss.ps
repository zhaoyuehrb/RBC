%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:59:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAGUGAUCAUUUGAAAAAGAGAUAUCCACAUCUUCAAGCCCAUAUAAAGGAUAGAAGCUGCACAGGGCAGCUUUACUUACUCCAGCACCUUCCUCUCCCAGGCAAA\
) } def
/len { sequence length } bind def

/coor [
[101.91145325 138.50735474]
[87.93412018 136.61808777]
[80.55812073 149.67927551]
[73.18212891 162.74046326]
[65.80613708 175.80166626]
[71.46321106 190.38012695]
[66.37700653 205.16743469]
[52.94908524 213.18148804]
[37.51969528 210.63827515]
[27.37412262 198.73863220]
[27.30279541 183.10121155]
[37.33939743 171.10952759]
[52.74494553 168.42567444]
[60.12093735 155.36447144]
[67.49693298 142.30328369]
[74.87292480 129.24209595]
[71.29673767 125.74087524]
[68.20420837 121.80590057]
[65.64745331 117.50349426]
[63.66955566 112.90615082]
[62.30384064 108.09132385]
[61.57332611 103.14015961]
[46.67110062 101.43029022]
[31.76887321 99.72041321]
[16.86664772 98.01054382]
[1.96442139 96.30067444]
[-10.25452232 106.32429504]
[-25.97396469 104.68884277]
[-35.86783981 92.36460876]
[-34.06628418 76.66333771]
[-21.63813400 66.90031433]
[-5.95678616 68.86776733]
[3.67429256 81.39844513]
[18.57651901 83.10831451]
[33.47874451 84.81819153]
[48.38097000 86.52806091]
[63.28319550 88.23793030]
[74.27895355 71.27896881]
[92.34339142 62.21314621]
[112.51202393 63.53194427]
[129.24209595 74.87292480]
[142.30328369 67.49693298]
[155.36447144 60.12093735]
[153.22642517 45.96207428]
[156.06809998 31.95809746]
[163.52464294 19.80367470]
[174.67399597 10.96244431]
[188.15089417 6.49077034]
[202.31402588 6.91156101]
[215.44593811 12.15320396]
[225.96130371 21.56074715]
[239.22779846 14.56073666]
[252.49429321 7.56072712]
[265.76080322 0.56071734]
[268.60375977 -5.28112459]
[273.30123901 -8.89737320]
[278.56686401 -9.91075611]
[288.06204224 -21.52288055]
[297.55722046 -33.13500214]
[307.05242920 -44.74712753]
[316.54760742 -56.35925293]
[326.04278564 -67.97137451]
[335.53799438 -79.58350372]
[345.03317261 -91.19562531]
[344.86932373 -107.23783875]
[357.39993286 -117.25596619]
[373.01263428 -113.56495667]
[379.73065186 -98.99623108]
[372.40054321 -84.72567749]
[356.64529419 -81.70043945]
[347.15011597 -70.08831024]
[337.65490723 -58.47618866]
[328.15972900 -46.86406708]
[318.66455078 -35.25194168]
[309.16937256 -23.63981628]
[299.67416382 -12.02769279]
[290.17898560 -0.41556889]
[304.67660522 -4.26515627]
[319.62872314 -3.06770134]
[333.32888794 3.04013038]
[344.21347046 13.36125278]
[351.04025269 26.71771812]
[353.03005981 41.58515167]
[349.95581055 56.26674271]
[342.16839600 69.08687592]
[330.55651855 78.58238983]
[316.44552612 83.66957092]
[301.44583130 83.76781464]
[287.26940918 78.86590576]
[275.53417969 69.52330780]
[267.57946777 56.80627823]
[264.31317139 42.16622162]
[266.10806274 27.27399635]
[272.76080322 13.82721138]
[259.49429321 20.82722092]
[246.22781372 27.82723045]
[232.96131897 34.82723999]
[234.68203735 50.51118469]
[230.27082825 65.69997406]
[220.36851501 78.08207703]
[206.45390320 85.76146698]
[190.62298584 87.54792786]
[175.27322388 83.14145660]
[162.74046326 73.18212891]
[149.67927551 80.55812073]
[136.61808777 87.93412018]
[138.50735474 101.91145325]
[135.24314880 115.63298035]
[127.26233673 127.26233673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[41 106]
[42 105]
[43 104]
[51 97]
[52 96]
[53 95]
[54 94]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
