%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCGGGUGUGGCCAGGGGUGUGGGUCUGUGAGGGACCGGUCGGAAGGGCGUCGCGCGGCCUCGGGUGAC\
) } def
/len { sequence length } bind def

/coor [
[106.11027527 178.42712402]
[116.45967102 167.15110779]
[111.32936859 153.05572510]
[99.70570374 143.74230957]
[102.25644684 128.12808228]
[97.12614441 114.03269196]
[86.53989410 104.89907837]
[88.77846527 91.09761047]
[83.64816284 77.00222015]
[78.51786041 62.90683365]
[64.47257233 56.17127609]
[59.47051239 41.80346298]
[65.97839355 28.45494080]
[60.84809113 14.35955143]
[55.71778870 0.26416185]
[40.65008926 1.18304908]
[25.94881058 -2.17770910]
[12.80347729 -9.53741550]
[2.27524543 -20.29216385]
[-4.78876019 -33.56438446]
[-7.82360029 -48.27444077]
[-6.59169531 -63.22847748]
[-1.20140076 -77.21527100]
[7.90246487 -89.10438538]
[19.97531509 -97.93748474]
[14.84501362 -112.03286743]
[9.71471119 -126.12825775]
[4.58440876 -140.22364807]
[-0.54589325 -154.31903076]
[-14.41965103 -162.37500000]
[-16.62877274 -178.26521301]
[-5.47860956 -189.80009460]
[10.47738743 -188.13105774]
[18.99914360 -174.53843689]
[13.54949570 -159.44934082]
[18.67979813 -145.35395813]
[23.81010056 -131.25856018]
[28.94040298 -117.16316986]
[34.07070541 -103.06777954]
[48.99684906 -104.06151581]
[63.61298752 -100.80578613]
[76.73273468 -93.55609131]
[87.28869629 -82.89248657]
[94.41931915 -69.67317200]
[97.53919220 -54.96540451]
[96.38711548 -39.95937347]
[91.04793549 -25.87185287]
[81.94635773 -13.84756374]
[69.81317902 -4.86614037]
[74.94348145 9.22924900]
[80.07378387 23.32463837]
[93.63937378 29.36701393]
[99.04302979 43.58866119]
[92.61325073 57.77653122]
[97.74355316 71.87191772]
[102.87385559 85.96730804]
[113.46010590 95.10092163]
[111.22153473 108.90238953]
[116.35183716 122.99777985]
[128.34245300 133.31938171]
[125.42475891 147.92541504]
[130.55506897 162.02081299]
[145.73124695 164.00627136]
[158.23971558 172.82652283]
[165.20611572 186.45471191]
[165.02963257 201.75921631]
[157.75079346 215.22312927]
[145.04225159 223.75257874]
[129.82432556 225.38754272]
[115.59397125 219.75231934]
[105.62123871 208.14184570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[5 59]
[6 58]
[8 56]
[9 55]
[10 54]
[13 51]
[14 50]
[15 49]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
