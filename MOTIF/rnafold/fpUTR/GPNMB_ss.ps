%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCGCUUAAUACCAUCACAUGAUCCUCCCCGAGGCCCUGUAUUUAAUUAAAAUAGAGAGGGAGGCACCACAGAUGCCAGAAGAACACUGUUGCUCUUGGUGGACGGGCCCAGAGGAAUUCAGAGUUAAACCUUGAGUGCCUGCGUCCGUGAGAAUUCAGC\
) } def
/len { sequence length } bind def

/coor [
[86.08058167 257.10177612]
[71.15663147 262.98864746]
[57.32155228 254.86645508]
[55.18843460 238.96583557]
[66.39362335 227.48440552]
[67.55600739 212.52951050]
[68.71839142 197.57461548]
[61.99062729 184.28604126]
[70.77407074 171.12693787]
[71.93645477 156.17204285]
[73.09883881 141.21714783]
[66.24134827 138.17991638]
[54.12339783 147.02046204]
[52.52635956 132.10545349]
[45.66886520 129.06822205]
[35.37524033 139.97883606]
[25.08161736 150.88943481]
[21.82827377 166.96263123]
[6.19780350 171.92453003]
[-5.73050451 160.67076111]
[-1.68582964 144.77822876]
[14.17101288 140.59580994]
[24.46463776 129.68521118]
[34.75826263 118.77460480]
[30.04009056 104.53596497]
[15.26797390 101.93123627]
[0.49585798 99.32651520]
[-14.27625847 96.72179413]
[-29.04837418 94.11707306]
[-43.82049179 91.51235199]
[-48.33607864 96.85140228]
[-54.25135803 100.48237610]
[-60.95534897 102.06825256]
[-67.76734161 101.48126221]
[-74.00599670 98.81262970]
[-79.05751038 94.36014557]
[-82.43596649 88.59526062]
[-83.82998657 82.11334229]
[-98.19982910 77.81129456]
[-113.63933563 81.26560974]
[-123.61284637 70.20313263]
[-137.98268127 65.90108490]
[-152.35252380 61.59903717]
[-166.72236633 57.29698944]
[-181.09220886 52.99494171]
[-195.83891296 59.31272125]
[-209.90403748 51.59572220]
[-212.49801636 35.76376724]
[-201.63096619 23.96177483]
[-185.63917542 25.24322510]
[-176.79016113 38.62509918]
[-162.42031860 42.92714691]
[-148.05047607 47.22919464]
[-133.68063354 51.53124237]
[-119.31079865 55.83329391]
[-104.89911652 52.07126236]
[-93.89778137 63.44144821]
[-79.52793884 67.74349976]
[-57.85178757 59.64424515]
[-41.21576691 76.74023438]
[-26.44365120 79.34495544]
[-11.67153549 81.94967651]
[3.10058069 84.55439758]
[17.87269783 87.15912628]
[32.64481354 89.76384735]
[44.67666245 80.80646515]
[46.41805649 65.90789032]
[48.15944672 51.00931549]
[49.90084076 36.11074066]
[51.64223480 21.21216583]
[49.52366257 12.27501965]
[53.56457520 6.04259872]
[55.59454346 -8.81940746]
[57.62451553 -23.68141365]
[55.67964172 -32.65795898]
[59.84065247 -38.81084824]
[62.15843201 -53.63069916]
[64.18840027 -68.49270630]
[65.92979431 -83.39128113]
[67.67118835 -98.28985596]
[56.80914307 -109.53929901]
[55.77090836 -125.14237976]
[65.04671478 -137.73179626]
[80.25679779 -141.36322021]
[94.21943665 -134.32199097]
[100.34188843 -119.93277740]
[95.73332214 -104.98971558]
[82.56976318 -96.54846191]
[80.82836914 -81.64988708]
[79.08697510 -66.75131226]
[81.32563019 -62.48192978]
[80.87147522 -56.75480270]
[76.97827911 -51.31291580]
[74.66049957 -36.49306870]
[72.48651886 -21.65144348]
[70.45655060 -6.78943777]
[68.42658234 8.07256889]
[66.54080963 22.95355797]
[64.79941559 37.85213470]
[63.05802536 52.75070953]
[61.31663132 67.64928436]
[59.57523727 82.54785919]
[106.52439880 64.07182312]
[128.96664429 98.60063171]
[143.62666321 101.77619171]
[158.28666687 104.95175171]
[172.94667053 108.12730408]
[187.60667419 111.30286407]
[202.26669312 114.47842407]
[210.86456299 106.18322754]
[222.28852844 103.12224579]
[233.64880371 105.94927979]
[242.12977600 113.84369659]
[245.68771362 124.74411011]
[260.21356201 128.48573303]
[274.73941040 132.22734070]
[290.03335571 128.17695618]
[300.42831421 138.84439087]
[314.95416260 142.58599854]
[329.48004150 146.32762146]
[344.00588989 150.06922913]
[358.53173828 153.81085205]
[373.05758667 157.55247498]
[388.35153198 153.50207520]
[398.74649048 164.16950989]
[413.27233887 167.91111755]
[430.11898804 166.00683594]
[436.61248779 181.66796875]
[423.36096191 192.24311829]
[409.53073120 182.43696594]
[395.00488281 178.69535828]
[380.74990845 183.01336670]
[369.31594849 172.07832336]
[354.79010010 168.33670044]
[340.26425171 164.59507751]
[325.73840332 160.85346985]
[311.21255493 157.11184692]
[296.68670654 153.37023926]
[282.43173218 157.68824768]
[270.99780273 146.75320435]
[256.47195435 143.01158142]
[241.94610596 139.26995850]
[226.81900024 149.51599121]
[208.68511963 145.42997742]
[199.09112549 129.13842773]
[184.43112183 125.96287537]
[169.77111816 122.78731537]
[155.11109924 119.61175537]
[140.45109558 116.43620300]
[125.79109192 113.26064301]
[123.43984222 121.79436493]
[118.22988892 129.89248657]
[110.26902008 136.60572815]
[99.97419739 141.02496338]
[88.05373383 142.37954712]
[86.89134979 157.33444214]
[85.72896576 172.28932190]
[92.37358856 186.64758301]
[83.67328644 198.73699951]
[82.51090240 213.69189453]
[81.34851837 228.64678955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 161]
[6 160]
[7 159]
[9 157]
[10 156]
[11 155]
[15 24]
[16 23]
[17 22]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[38 58]
[39 57]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
[72 97]
[73 96]
[74 95]
[76 94]
[77 93]
[78 90]
[79 89]
[80 88]
[104 150]
[105 149]
[106 148]
[107 147]
[108 146]
[109 145]
[114 142]
[115 141]
[116 140]
[118 138]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
