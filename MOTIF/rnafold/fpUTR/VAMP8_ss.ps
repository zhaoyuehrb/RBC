%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCUGAGUUAGGUGUGGCUGGAGCGACUCGAGAUGCGAGGUGGGCGGGGGCAGGCUGAAAGUUGGAGCAAGCAGGAAGUGAACUGAGGGCCACCCUGGGAGGAAGCCGACUAGGCGAAUUCACUUACUGACCGGCCUGGGCUGCUCUGAGAC\
) } def
/len { sequence length } bind def

/coor [
[123.50084686 144.54444885]
[113.58304596 148.90208435]
[102.88253784 151.06195068]
[91.88415527 150.88995361]
[81.09399414 148.35848999]
[74.70187378 161.92834473]
[68.30975342 175.49818420]
[61.91762924 189.06803894]
[55.52550888 202.63787842]
[54.24566269 219.54345703]
[37.64646912 222.99354553]
[29.73609161 207.99813843]
[41.95566177 196.24575806]
[48.34778214 182.67591858]
[54.73990250 169.10606384]
[61.13202286 155.53622437]
[67.52414703 141.96636963]
[57.07791138 131.20178223]
[43.32234192 137.18379211]
[37.45759201 151.61439514]
[23.42227364 157.48504639]
[9.70103645 151.80497742]
[-4.05453253 157.78697205]
[-13.62417793 170.38587952]
[-28.38120461 168.36611938]
[-42.13677216 174.34811401]
[-55.89234161 180.33012390]
[-68.00614929 192.19148254]
[-82.75740051 183.83465576]
[-78.81070709 167.34646606]
[-61.87434387 166.57455444]
[-48.11877441 160.59254456]
[-34.36320496 154.61054993]
[-25.77745056 142.43951416]
[-10.03653336 144.03140259]
[3.71903563 138.04940796]
[8.92120838 124.13994598]
[22.78609467 117.87739563]
[37.34033966 123.42822266]
[51.09590912 117.44622040]
[49.01925659 95.92630768]
[55.85360718 75.75967407]
[70.14081573 60.41454697]
[89.16667175 52.41307449]
[109.47367859 52.91880798]
[127.48866272 61.57486725]
[138.04206848 50.91533661]
[148.59547424 40.25580978]
[159.14889526 29.59628105]
[169.70230103 18.93675232]
[180.25570679 8.27722359]
[178.64073181 -5.12834692]
[184.96524048 -16.83697128]
[196.71260071 -22.66281509]
[209.47586060 -20.67135429]
[220.24043274 -31.11758804]
[231.00502014 -41.56381989]
[241.76960754 -52.01005554]
[252.53417969 -62.45628738]
[263.29876709 -72.90251923]
[274.06335449 -83.34875488]
[259.28582764 -80.77493286]
[244.60939026 -83.87372589]
[232.13369751 -92.20181274]
[223.64352417 -104.56777191]
[220.35348511 -119.20251465]
[222.73425293 -134.01237488]
[230.44523621 -146.87863159]
[242.38330078 -155.96063232]
[256.84054565 -159.95909119]
[271.74874878 -158.30198669]
[284.97506714 -151.22636414]
[294.62738037 -139.74450684]
[299.32476807 -125.49900055]
[298.39523315 -110.52783203]
[291.97073364 -96.97135162]
[304.91079712 -104.55783081]
[317.85086060 -112.14431000]
[321.94500732 -127.17347717]
[335.17614746 -134.68290710]
[349.47894287 -130.68714905]
[362.41900635 -138.27363586]
[375.35906982 -145.86010742]
[388.29913330 -153.44659424]
[401.23919678 -161.03306580]
[414.17926025 -168.61955261]
[425.45272827 -178.51443481]
[434.65347290 -190.36123657]
[437.00741577 -206.00634766]
[450.92489624 -211.31227112]
[460.12561035 -223.15907288]
[469.32632446 -235.00587463]
[478.52706909 -246.85267639]
[483.46716309 -263.07092285]
[500.41915894 -262.81353760]
[504.86459351 -246.45278931]
[490.37387085 -237.65196228]
[481.17312622 -225.80516052]
[471.97241211 -213.95835876]
[462.77169800 -202.11155701]
[461.07586670 -187.31379700]
[446.50027466 -181.16052246]
[437.29956055 -169.31372070]
[441.09277344 -162.84368896]
[451.05517578 -174.05754089]
[464.79873657 -168.04797363]
[463.33029175 -153.12002563]
[448.67926025 -149.90361023]
[452.47250366 -143.43357849]
[467.30389404 -145.67628479]
[482.13528442 -147.91899109]
[492.77484131 -159.92646790]
[508.78817749 -158.95083618]
[517.89129639 -145.74049377]
[513.10101318 -130.42929077]
[498.09207153 -124.76268005]
[484.37799072 -133.08758545]
[469.54660034 -130.84489441]
[454.71520996 -128.60218811]
[440.76312256 -131.16036987]
[430.11236572 -137.63383484]
[423.68368530 -146.40130615]
[421.76574707 -155.67948914]
[408.82568359 -148.09300232]
[395.88562012 -140.50653076]
[382.94555664 -132.92004395]
[370.00549316 -125.33356476]
[357.06539917 -117.74708557]
[353.56665039 -103.31468201]
[340.55166626 -95.43657684]
[325.43734741 -99.20424652]
[312.49728394 -91.61776733]
[299.55722046 -84.03128815]
[297.50668335 -78.18232727]
[292.14144897 -73.75286865]
[284.50958252 -72.58417511]
[273.74499512 -62.13793945]
[262.98040771 -51.69170761]
[252.21583557 -41.24547577]
[241.45124817 -30.79924011]
[230.68667603 -20.35300636]
[219.92208862 -9.90677357]
[220.40441895 6.87885666]
[208.38009644 19.07880211]
[190.91523743 18.83063316]
[180.36183167 29.49016190]
[169.80841064 40.14968872]
[159.25500488 50.80921936]
[148.70159912 61.46874619]
[138.14819336 72.12827301]
[143.56390381 80.73118591]
[147.04933167 90.36936188]
[148.41081238 100.61170959]
[147.55053711 110.99196625]
[144.47265625 121.02994537]
[139.28472900 130.25373840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[18 40]
[19 39]
[22 36]
[23 35]
[25 33]
[26 32]
[27 31]
[46 150]
[47 149]
[48 148]
[49 147]
[50 146]
[51 145]
[55 142]
[56 141]
[57 140]
[58 139]
[59 138]
[60 137]
[61 136]
[76 133]
[77 132]
[78 131]
[81 128]
[82 127]
[83 126]
[84 125]
[85 124]
[86 123]
[87 103]
[88 102]
[90 100]
[91 99]
[92 98]
[93 97]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
