%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCUCUCUUUGUUGUCCUCGUAUUUUCUUUUCCUCCUGAGAUUUAACUUGAAGACAACGUCACUAGCAGUUUCUGGAGCUACUUGCCAAGGCUGAGUGUGAGCUGAGCCUGCCCCACCACCAAG\
) } def
/len { sequence length } bind def

/coor [
[102.10792542 196.41572571]
[88.89258575 195.79698181]
[75.88627625 193.37539673]
[63.33377457 189.19654846]
[51.47130966 183.33908081]
[40.52211761 175.91322327]
[30.69226265 167.05873108]
[22.16673279 156.94224548]
[15.10597324 145.75413513]
[9.64286327 133.70497131]
[5.88021564 121.02149200]
[3.88884020 107.94240570]
[3.70621300 94.71384430]
[5.33577156 81.58477020]
[-9.12086964 77.58407593]
[-23.57751083 73.58338928]
[-38.03415298 69.58269501]
[-52.49079132 65.58200836]
[-66.94743347 61.58131409]
[-82.31134796 65.35765839]
[-92.51394653 54.50610733]
[-106.97058868 50.50541306]
[-121.42723083 46.50472260]
[-132.40728760 59.58845520]
[-147.93002319 66.58256531]
[-164.89508057 66.14241791]
[-179.93663025 58.40303802]
[-190.09120178 44.94285583]
[-193.38148499 28.46203995]
[-208.01701355 25.17551994]
[-222.65254211 21.88900185]
[-237.28807068 18.60248375]
[-248.84828186 28.95339203]
[-264.28817749 30.49904060]
[-277.67083740 22.64509583]
[-283.85031128 8.41155910]
[-280.45050049 -6.72848415]
[-268.77868652 -16.95337868]
[-253.32292175 -18.33144188]
[-240.02627563 -10.33278370]
[-234.00155640 3.96695137]
[-219.36602783 7.25346994]
[-204.73049927 10.53998852]
[-190.09495544 13.82650757]
[-182.81622314 2.93245625]
[-172.22335815 -4.83245802]
[-159.58213806 -8.51311493]
[-146.41252136 -7.64407730]
[-134.30580139 -2.30832982]
[-124.73239136 6.87009621]
[-118.86322021 18.79902649]
[-117.42653656 32.04808044]
[-102.96990204 36.04877472]
[-88.51325989 40.04946518]
[-74.18338013 35.98696518]
[-62.94674301 47.12467194]
[-48.49010086 51.12536240]
[-34.03345871 55.12605667]
[-19.57681847 59.12674713]
[-5.12017822 63.12743759]
[9.33646297 67.12812805]
[16.48690987 51.77137375]
[26.21409798 37.90267944]
[38.21790314 25.94995499]
[52.12795258 16.28199768]
[67.51506042 9.19710541]
[83.90447235 4.91387653]
[100.79050446 3.56446743]
[117.65214539 5.19051361]
[133.96913147 9.74184418]
[149.23803711 17.07803154]
[162.98771667 26.97272110]
[174.79397583 39.12062073]
[184.29249573 53.14691162]
[191.19023132 68.61882782]
[195.27435303 85.05898285]
[196.41885376 101.96013641]
[211.34661865 103.43039703]
[226.27439880 104.90065002]
[240.76649475 98.55326080]
[252.67410278 107.50079346]
[267.60186768 108.97105408]
[257.50265503 97.88026428]
[254.83091736 83.12011719]
[260.40164185 69.19290924]
[272.51559448 60.34687042]
[287.47760010 59.28029633]
[300.72387695 66.31853485]
[308.21383667 79.31470490]
[307.66284180 94.30458069]
[299.23895264 106.71579742]
[285.51159668 112.76257324]
[299.75451660 117.46779633]
[313.99743652 122.17302704]
[328.24035645 126.87825012]
[342.48327637 131.58348083]
[358.01400757 128.56555176]
[367.67184448 139.90464783]
[381.91476440 144.60987854]
[396.15768433 149.31510925]
[412.09637451 145.45631409]
[423.21008301 157.51524353]
[418.06597900 173.08670044]
[401.95587158 176.15209961]
[391.45245361 163.55802917]
[377.20953369 158.85279846]
[362.96661377 154.14756775]
[348.45468140 157.50204468]
[337.77807617 145.82640076]
[323.53515625 141.12117004]
[309.29220581 136.41595459]
[295.04928589 131.71072388]
[280.80636597 127.00549316]
[266.13162231 123.89882660]
[251.20384216 122.42856598]
[237.77946472 128.88111877]
[224.80413818 119.82842255]
[209.87635803 118.35816956]
[194.94859314 116.88790894]
[191.74386597 129.72370911]
[186.81259155 142.00013733]
[180.24755859 153.48614502]
[172.17230225 163.96557617]
[162.73883057 173.24122620]
[152.12464905 181.13850403]
[140.52951050 187.50883484]
[128.17164612 192.23228455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[21 54]
[22 53]
[23 52]
[29 44]
[30 43]
[31 42]
[32 41]
[77 119]
[78 118]
[79 117]
[81 115]
[82 114]
[92 113]
[93 112]
[94 111]
[95 110]
[96 109]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
