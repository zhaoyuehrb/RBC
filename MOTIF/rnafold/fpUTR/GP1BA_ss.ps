%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGUCCUCCAUGGGGCUAGAAGAGAGAAGGACGGAGUCGAGUGGCACCCUAGAAGACGCUCUGUGCCUUCGGAGGUCUUUCUGCCUGCCUGUCCUC\
) } def
/len { sequence length } bind def

/coor [
[-38.18871307 232.28344727]
[-47.54106140 244.01091003]
[-56.89340591 255.73838806]
[-66.24575043 267.46585083]
[-75.59809875 279.19332886]
[-84.95044708 290.92080688]
[-94.30279541 302.64828491]
[-103.65514374 314.37576294]
[-105.56293488 330.66354370]
[-120.72753906 336.90588379]
[-133.54890442 326.68118286]
[-130.83752441 310.50775146]
[-115.38261414 305.02340698]
[-106.03026581 293.29592896]
[-96.67791748 281.56845093]
[-87.32556915 269.84097290]
[-77.97322845 258.11352539]
[-68.62088013 246.38604736]
[-59.26853180 234.65856934]
[-49.91618347 222.93109131]
[-53.88958740 215.31616211]
[-55.35082626 206.81733704]
[-54.13936234 198.24472046]
[-50.35042572 190.42192078]
[-44.32789612 184.10700989]
[-36.63317490 179.91896057]
[-27.99289322 178.27714539]
[-19.23030281 179.35931396]
[-11.18684292 183.08264160]
[0.23484640 173.35922241]
[11.65653610 163.63578796]
[23.07822609 153.91236877]
[34.49991608 144.18894958]
[45.92160416 134.46551514]
[57.34329224 124.74208832]
[60.45373535 117.88131714]
[69.29044342 114.89719391]
[81.01791382 105.54485321]
[80.39434052 97.41481781]
[83.10398865 89.72430420]
[88.68618774 83.78079224]
[96.19187927 80.59476471]
[104.34500122 80.70787811]
[111.75941467 84.10090637]
[124.58655548 76.32501984]
[137.41369629 68.54913330]
[150.24084473 60.77324295]
[150.70483398 52.01838303]
[154.65493774 44.29856110]
[161.33529663 38.92026901]
[169.53588867 36.75784302]
[177.81132507 38.11200714]
[184.73554993 42.67060852]
[198.45173645 36.59886169]
[212.16792297 30.52710915]
[225.88410950 24.45536041]
[239.60031128 18.38360977]
[253.31649780 12.31186008]
[260.04953003 5.85751438]
[267.57098389 6.27316856]
[281.47473145 0.64416331]
[295.37847900 -4.98484182]
[309.28222656 -10.61384678]
[323.18597412 -16.24285126]
[329.11929321 -30.89110756]
[343.70504761 -36.97648621]
[358.28973389 -30.88863754]
[364.22058105 -16.23937798]
[357.97885132 -1.71985066]
[343.26773071 4.05576515]
[328.81500244 -2.33910060]
[314.91125488 3.28990459]
[301.00747681 8.91891003]
[287.10372925 14.54791451]
[273.19998169 20.17691994]
[259.38824463 26.02804947]
[245.67205811 32.09980011]
[231.95587158 38.17155075]
[218.23966980 44.24329758]
[204.52348328 50.31504822]
[190.80729675 56.38679886]
[180.26310730 75.20132446]
[158.01672363 73.60037994]
[145.18959045 81.37627411]
[132.36244202 89.15216064]
[119.53530121 96.92804718]
[111.31381226 116.21920776]
[90.37026215 117.27232361]
[78.64278412 126.62467194]
[67.06671906 136.16378784]
[55.64503098 145.88720703]
[44.22333908 155.61062622]
[32.80165100 165.33406067]
[21.37996101 175.05747986]
[9.95827198 184.78091431]
[-1.46341705 194.50433350]
[-0.89651841 216.82000732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 91]
[35 90]
[37 89]
[38 88]
[44 86]
[45 85]
[46 84]
[47 83]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
