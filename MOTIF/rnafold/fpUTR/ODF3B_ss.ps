%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGGGAAAGGGCCACAAUGGGGUCUGGGAGGUGGGCGGGGCGGAGCGGGGAUGUCCAGCCACGUCGCUUUGUUUUCCCACGCUAGGAGCUACCACAACAGGUGCUGCGAGCCGUAAGCGCCCCCCACCCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[80.71639252 315.76538086]
[72.96485138 302.18423462]
[75.80747223 286.80718994]
[87.90205383 276.89480591]
[87.90205383 261.89480591]
[87.90205383 246.89482117]
[87.90205383 231.89482117]
[87.90205383 216.89482117]
[79.98481750 210.27001953]
[77.00328064 200.15638733]
[80.19107056 189.87460327]
[88.71319580 182.94279480]
[89.39591217 167.95834351]
[90.07863617 152.97389221]
[76.92330933 148.70454407]
[65.28772736 141.22772217]
[55.93815994 131.03579712]
[49.49032593 118.79998016]
[46.36885834 105.32607269]
[46.77932358 91.50141144]
[50.69469070 78.23643494]
[57.85710907 66.40471649]
[67.79489136 56.78545380]
[60.59253311 43.62771606]
[47.17926025 35.23756027]
[47.85519791 20.35830116]
[40.65284348 7.20056248]
[33.45048904 -5.95717621]
[20.03721619 -14.34732914]
[20.71315384 -29.22658920]
[13.51079845 -42.38432693]
[1.32417977 -46.77772522]
[-4.38700104 -57.95558929]
[-1.02734947 -69.63228607]
[-7.92832518 -82.95056915]
[-14.82930088 -96.26884460]
[-21.73027611 -109.58712006]
[-28.63125229 -122.90540314]
[-35.41668701 -129.15155029]
[-35.53382492 -136.60632324]
[-42.12984467 -150.07823181]
[-48.72586441 -163.55015564]
[-55.32188797 -177.02206421]
[-61.91790771 -190.49398804]
[-68.51393127 -203.96589661]
[-75.10994720 -217.43782043]
[-81.70597076 -230.90972900]
[-88.30199432 -244.38163757]
[-94.89801025 -257.85354614]
[-101.49403381 -271.32546997]
[-108.09004974 -284.79739380]
[-115.14217377 -298.03625488]
[-122.64217377 -311.02664185]
[-138.08773804 -312.51461792]
[-149.68650818 -322.82229614]
[-152.97853088 -337.98614502]
[-146.69793701 -352.17535400]
[-133.25975037 -359.93389893]
[-117.83123779 -358.27844238]
[-106.34496307 -347.84555054]
[-103.21764374 -332.64688110]
[-109.65179443 -318.52664185]
[-102.15179443 -305.53625488]
[-98.76938629 -304.28179932]
[-95.85231781 -301.27764893]
[-94.23900604 -296.77328491]
[-94.61814117 -291.39340210]
[-88.02211761 -277.92150879]
[-81.42609406 -264.44958496]
[-74.83007812 -250.97766113]
[-68.23405457 -237.50575256]
[-61.63803482 -224.03382874]
[-55.04201126 -210.56192017]
[-48.44599152 -197.08999634]
[-41.84997177 -183.61808777]
[-35.25395203 -170.14617920]
[-28.65793037 -156.67425537]
[-22.06190872 -143.20234680]
[-15.31297398 -129.80638123]
[-8.41199780 -116.48809814]
[-1.51102233 -103.16982269]
[5.38995314 -89.85153961]
[12.29092884 -76.53326416]
[27.54971886 -67.93980408]
[26.66853714 -49.58668137]
[33.87089157 -36.42894363]
[46.76900482 -28.97991943]
[46.60822678 -13.15953064]
[53.81058121 -0.00179136]
[61.01293564 13.15594769]
[73.91104889 20.60497093]
[73.75027466 36.42536163]
[80.95262909 49.58309937]
[92.66882324 46.60599136]
[104.75385284 46.31511307]
[116.59971619 48.72509384]
[127.61045074 53.71469879]
[137.23211670 61.03289032]
[144.98065186 70.31150818]
[150.46623230 81.08373260]
[153.41288757 92.80763245]
[153.67234802 104.89337158]
[151.23158264 116.73292542]
[164.70350647 123.32894897]
[178.17541504 129.92497253]
[191.64733887 136.52099609]
[205.11924744 143.11701965]
[218.59117126 149.71302795]
[232.13728333 156.15528870]
[245.75585938 162.44293213]
[259.37442017 168.73057556]
[276.28933716 169.88047791]
[279.86688232 186.45266724]
[264.93270874 194.47804260]
[253.08677673 182.34915161]
[239.46821594 176.06150818]
[225.84963989 169.77384949]
[218.39413452 169.82644653]
[211.99514771 163.18495178]
[198.52322388 156.58892822]
[185.05131531 149.99290466]
[171.57939148 143.39688110]
[158.10748291 136.80087280]
[144.63555908 130.20484924]
[127.47699738 146.36465454]
[105.06308746 153.65660095]
[104.38037109 168.64106750]
[103.69764709 183.62551880]
[113.81636047 200.99458313]
[102.90205383 216.89482117]
[102.90205383 231.89482117]
[102.90205383 246.89482117]
[102.90205383 261.89480591]
[102.90205383 276.89480591]
[114.99663544 286.80718994]
[117.83925629 302.18423462]
[110.08771515 315.76538086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 134]
[5 133]
[6 132]
[7 131]
[8 130]
[12 128]
[13 127]
[14 126]
[23 93]
[24 92]
[26 90]
[27 89]
[28 88]
[30 86]
[31 85]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 63]
[53 62]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
