%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGGCGCGGAUUCCCGGAAGAACCCGCAGCAGCUCCCAGGAUGAACUGGUUGCAGUGGCUGCUGCUGCUGCGGGGGCGCUGAGAGGACACGAGCUCU\
) } def
/len { sequence length } bind def

/coor [
[131.37753296 209.61737061]
[125.68802643 204.42648315]
[122.21607208 197.47439575]
[121.47108459 189.66987610]
[123.60234070 182.05328369]
[128.37236023 175.65794373]
[122.90258026 161.69078064]
[117.43280792 147.72361755]
[111.96303558 133.75645447]
[106.49326324 119.78929901]
[92.01448822 115.86946869]
[80.24557495 125.16960907]
[74.69261932 140.59999084]
[58.50727844 143.23948669]
[48.33965302 130.37281799]
[54.64931488 115.23609924]
[70.94542694 113.40069580]
[82.71434784 104.10055542]
[68.19084167 107.85127258]
[54.41034317 101.92693329]
[47.13975906 88.80677032]
[49.42171860 73.98136139]
[60.30125046 63.65490341]
[75.22544861 62.14884949]
[87.94878387 70.09345245]
[93.14677429 84.16529846]
[94.07931519 69.19431305]
[95.01186371 54.22333145]
[95.94440460 39.25234604]
[96.87695312 24.28136253]
[97.80949402 9.31037903]
[98.74204254 -5.66060495]
[99.67458344 -20.63158798]
[100.60713196 -35.60257339]
[101.53967285 -50.57355499]
[102.47222137 -65.54454041]
[88.04779816 -72.86588287]
[80.42905426 -90.13115692]
[85.99015045 -110.98947144]
[81.39929199 -125.26966858]
[76.80843353 -139.54986572]
[72.21757507 -153.83006287]
[58.04552460 -160.82495117]
[53.04970169 -175.81886292]
[60.19404221 -189.91616821]
[75.23992920 -194.75318909]
[89.26091003 -187.46020508]
[93.93858337 -172.36401367]
[86.49777222 -158.42091370]
[91.08863068 -144.14071655]
[95.67948914 -129.86051941]
[100.27034760 -115.58032990]
[107.69699860 -114.53396606]
[122.55029297 -112.44123077]
[129.97694397 -111.39486694]
[138.33473206 -123.85068512]
[146.69250488 -136.30650330]
[155.05029297 -148.76232910]
[158.85482788 -165.28388977]
[175.78392029 -166.20166016]
[181.35226440 -150.18823242]
[167.50611877 -140.40454102]
[159.14833069 -127.94872284]
[150.79054260 -115.49290466]
[142.43276978 -103.03708649]
[137.93852234 -74.94339752]
[117.44320679 -64.61199951]
[116.51065826 -49.64101028]
[115.57811737 -34.67002869]
[114.64556885 -19.69904327]
[113.71302795 -4.72806025]
[112.78047943 10.24292374]
[111.84793854 25.21390724]
[110.91539001 40.18489075]
[109.98284912 55.15587616]
[109.05030060 70.12686157]
[108.11775970 85.09784698]
[120.41610718 95.20497131]
[120.46042633 114.31952667]
[125.93019867 128.28668213]
[131.39996338 142.25384521]
[136.86973572 156.22100830]
[142.33950806 170.18817139]
[161.86715698 182.60212708]
[159.00379944 204.84837341]
[166.57104492 217.79969788]
[174.13827515 230.75102234]
[181.70552063 243.70234680]
[197.15859985 245.11024475]
[208.81065369 255.35765076]
[212.18122864 270.50424194]
[205.97427368 284.72579956]
[192.57650757 292.55392456]
[177.13961792 290.97845459]
[165.59941101 280.60525513]
[162.39334106 265.42300415]
[168.75419617 251.26959229]
[161.18695068 238.31826782]
[153.61972046 225.36694336]
[146.05247498 212.41561890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 18]
[12 17]
[26 77]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[39 52]
[40 51]
[41 50]
[42 49]
[55 65]
[56 64]
[57 63]
[58 62]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
