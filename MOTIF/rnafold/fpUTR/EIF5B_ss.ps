%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCGCACUGAGAACUCACACCAUAUGUGUCCUGUUCCAGUGCGCGGGUCUGUGGAGAGCCGGGUGCGAGCGGCGGCAGCACGAGGGGAAAAGAGCUGAGCGGAGACCAAAGUCAGCCGGGAGACAGUGGGUCUGUGAGAGACCGAAUAGAGGGGCUGGGGCCACGAGCGCCAUUGACAAGCA\
) } def
/len { sequence length } bind def

/coor [
[91.91569519 157.96867371]
[87.45507812 143.64726257]
[88.30792999 128.67152405]
[94.36429596 114.95108795]
[83.10420990 124.86120605]
[71.84413147 134.77133179]
[60.58404541 144.68144226]
[49.32395935 154.59156799]
[38.06387329 164.50169373]
[26.80379105 174.41180420]
[15.54370594 184.32192993]
[11.15590191 192.36015320]
[4.00724983 194.30274963]
[-7.41949272 204.02023315]
[-18.84623528 213.73771667]
[-30.27297783 223.45521545]
[-31.35589027 240.90411377]
[-44.45803452 251.96235657]
[-61.16972733 250.17025757]
[-72.42980957 260.08038330]
[-83.68989563 269.99050903]
[-94.94998169 279.90060425]
[-97.40177917 295.75521851]
[-111.39707184 303.59811401]
[-126.19987488 297.41293335]
[-130.45474243 281.94439697]
[-120.89770508 269.05865479]
[-104.86009979 268.64053345]
[-93.60002136 258.73040771]
[-82.33993530 248.82029724]
[-71.07984924 238.91017151]
[-72.06495667 226.04933167]
[-65.35659790 214.80519104]
[-53.21545792 209.40490723]
[-39.99046326 212.02847290]
[-28.56372261 202.31097412]
[-17.13698006 192.59349060]
[-5.71023750 182.87600708]
[5.63358498 173.06184387]
[16.89366913 163.15173340]
[28.15375519 153.24160767]
[39.41383743 143.33148193]
[50.67392349 133.42135620]
[61.93400955 123.51124573]
[73.19409180 113.60112000]
[84.45417786 103.69100189]
[81.16960144 89.05503082]
[66.75458527 84.90686798]
[51.35289383 88.52606964]
[41.26167679 77.57086182]
[26.84665680 73.42269897]
[12.43163872 69.27453613]
[-3.34504914 73.74982452]
[-14.91898632 62.13190460]
[-10.38389874 46.37230301]
[5.59490442 42.68314743]
[16.57979965 54.85951996]
[30.99481773 59.00768280]
[45.40983582 63.15584564]
[59.78046417 59.23994064]
[70.90274048 70.49185181]
[85.31776428 74.64001465]
[96.45903015 79.96417999]
[101.98236084 88.78475189]
[113.57246399 79.26269531]
[125.16257477 69.74064636]
[136.75267029 60.21859741]
[148.34278870 50.69654465]
[145.94458008 35.59038925]
[151.39363098 21.40572548]
[163.13304138 11.91611004]
[177.94706726 9.59222794]
[191.84169006 14.95926666]
[203.43179321 5.43721533]
[215.02189636 -4.08483601]
[216.70826721 -19.57011604]
[228.59793091 -29.06172371]
[243.35038757 -27.35859489]
[254.94049072 -36.88064575]
[266.53060913 -46.40269852]
[278.12069702 -55.92474747]
[272.03356934 -67.35052490]
[268.11361694 -79.68387604]
[266.48840332 -92.51790619]
[267.20968628 -105.42951965]
[270.25204468 -117.99337769]
[275.51351929 -129.79589844]
[282.81915283 -140.44891357]
[291.92681885 -149.60237122]
[302.53518677 -156.95588684]
[314.29376221 -162.26858521]
[326.81433105 -165.36700439]
[339.68395996 -166.15071106]
[352.47848511 -164.59562683]
[364.77655029 -160.75468445]
[376.17340088 -154.75611877]
[385.59671021 -166.42666626]
[395.02001953 -178.09719849]
[404.44332886 -189.76773071]
[401.23751831 -209.58059692]
[413.41937256 -225.14677429]
[432.81533813 -226.74696350]
[441.63211060 -238.88221741]
[450.44888306 -251.01747131]
[451.93756104 -269.36077881]
[468.21694946 -275.88818359]
[476.82638550 -288.17138672]
[485.43582153 -300.45462036]
[486.33303833 -316.82919312]
[501.08270264 -323.99710083]
[514.51165771 -314.58459473]
[512.80535889 -298.27447510]
[497.71905518 -291.84518433]
[489.10961914 -279.56195068]
[480.50015259 -267.27871704]
[482.28369141 -255.29991150]
[475.19201660 -244.99177551]
[462.58413696 -242.20069885]
[453.76736450 -230.06544495]
[444.95059204 -217.93019104]
[449.24166870 -208.56192017]
[449.24490356 -198.17677307]
[444.89245605 -188.65869141]
[436.91262817 -181.76231384]
[426.70904541 -178.78959656]
[416.11386108 -180.34443665]
[406.69055176 -168.67388916]
[397.26724243 -157.00335693]
[387.84396362 -145.33282471]
[401.30505371 -126.55905914]
[408.02032471 -104.45564270]
[423.01547241 -104.83769226]
[438.01058960 -105.21973419]
[453.00573730 -105.60177612]
[468.00085449 -105.98382568]
[480.05023193 -116.57592010]
[495.81817627 -113.61768341]
[503.20889282 -99.37841797]
[496.55285645 -84.78126526]
[480.95599365 -81.02391815]
[468.38290405 -90.98868561]
[453.38775635 -90.60664368]
[438.39263916 -90.22460175]
[423.39749146 -89.84255219]
[408.40237427 -89.46051025]
[405.77200317 -75.09500885]
[400.25350952 -61.56545639]
[392.07788086 -49.44614792]
[381.58889771 -39.25218582]
[369.22885132 -31.41759300]
[355.51971436 -26.27682304]
[341.04116821 -24.05049133]
[326.40609741 -24.83590508]
[312.23471069 -28.60281754]
[299.12805176 -35.19457626]
[287.64276123 -44.33464432]
[276.05264282 -34.81259155]
[264.46255493 -25.29054070]
[252.87243652 -15.76848984]
[251.68049622 -0.96596110]
[240.06211853 8.85585785]
[224.54394531 7.50526953]
[212.95384216 17.02732086]
[201.36373901 26.54937172]
[203.93252563 41.22135162]
[198.77815247 55.30284500]
[187.19090271 64.97765350]
[172.21847534 67.57059479]
[157.86483765 62.28665161]
[146.27473450 71.80870056]
[134.68461609 81.33074951]
[123.09452057 90.85280609]
[111.50440979 100.37485504]
[126.02187347 96.60081482]
[140.94004822 98.16536713]
[154.35864258 104.86921692]
[164.56832886 115.85840607]
[170.26856995 129.73309326]
[170.73327637 144.72590637]
[165.90322876 158.92697144]
[156.39369202 170.52735901]
[143.41603088 178.04934692]
[128.62338257 180.53479004]
[113.90006256 177.66705322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[13 38]
[14 37]
[15 36]
[16 35]
[19 31]
[20 30]
[21 29]
[22 28]
[47 62]
[48 61]
[50 59]
[51 58]
[52 57]
[64 173]
[65 172]
[66 171]
[67 170]
[68 169]
[73 164]
[74 163]
[75 162]
[78 159]
[79 158]
[80 157]
[81 156]
[96 129]
[97 128]
[98 127]
[99 126]
[102 120]
[103 119]
[104 118]
[106 115]
[107 114]
[108 113]
[131 145]
[132 144]
[133 143]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
