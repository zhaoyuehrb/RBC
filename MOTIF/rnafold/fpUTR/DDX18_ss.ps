%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGAGCUGCGCACGUGCGGCCGGAAGGGAAGUAACGUCAGCCUGAGAACUGAGUAGCUGUACUGUGUGGCGCCUUAUUCUAGGCACUUGUUGGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[102.24418640 203.43641663]
[100.83256531 188.50299072]
[99.42093658 173.56954956]
[90.52023315 161.62690735]
[96.92448425 147.15983582]
[95.51285553 132.22640991]
[94.10123444 117.29298401]
[87.21807098 114.31437683]
[73.45175171 108.35715485]
[66.56859589 105.37854767]
[54.71627045 114.57215118]
[42.86394501 123.76575470]
[37.17202759 139.14541626]
[20.96354103 141.63880920]
[10.91238785 128.68095398]
[17.35833168 113.60176086]
[33.67033768 111.91342926]
[45.52266312 102.71982574]
[57.37498856 93.52622223]
[62.01024628 79.26037598]
[57.82537842 64.85596466]
[53.64051056 50.45156097]
[49.45564651 36.04715729]
[35.00667572 30.70548820]
[26.57217979 18.02823639]
[27.21224594 2.99313354]
[36.47201538 -8.64278698]
[32.28715134 -23.04719162]
[16.85934448 -31.10749054]
[12.04175663 -47.48475266]
[20.31645012 -62.03180695]
[15.68119621 -76.29765320]
[11.04594135 -90.56349945]
[-0.57715666 -101.29728699]
[2.84850979 -115.79260254]
[-1.78674507 -130.05844116]
[-7.51383591 -137.41087341]
[-6.33590746 -144.84573364]
[-10.52077389 -159.25013733]
[-14.70564079 -173.65454102]
[-18.89050674 -188.05894470]
[-33.53528976 -193.18826294]
[-42.34053040 -205.96510315]
[-41.92043304 -221.47648621]
[-32.43653107 -233.75798035]
[-17.53558350 -238.08711243]
[-2.94730401 -232.79922485]
[5.71881390 -219.92762756]
[5.13047123 -204.42170715]
[-4.48610210 -192.24382019]
[-0.30123535 -177.83940125]
[3.88363123 -163.43499756]
[8.06849766 -149.03059387]
[12.47910309 -134.69369507]
[17.11435699 -120.42785645]
[28.40591049 -110.71445465]
[25.31178856 -95.19875336]
[29.94704437 -80.93290710]
[34.58229828 -66.66706085]
[46.85929108 -62.42343903]
[54.51866913 -51.69081879]
[54.54109573 -38.30971909]
[46.69155502 -27.23205948]
[50.87642288 -12.82765293]
[64.92954254 -7.96475410]
[73.52617645 4.38683891]
[73.19750977 19.61002350]
[63.86005020 31.86229134]
[68.04491425 46.26669693]
[72.22978210 60.67110062]
[76.41464996 75.07550812]
[134.81015015 81.40325165]
[149.44889832 84.67539978]
[164.08764648 87.94754791]
[178.72639465 91.21969604]
[191.93443298 82.54078674]
[207.39369202 85.82511902]
[215.93246460 99.12416840]
[212.48487854 114.54784393]
[199.09628296 122.94554138]
[183.70993042 119.33506775]
[175.45425415 105.85844421]
[160.81550598 102.58629608]
[146.17674255 99.31414795]
[131.53799438 96.04199982]
[125.91216278 101.00183868]
[135.83166504 112.25366211]
[124.57969666 122.17298889]
[114.66049957 110.92151642]
[109.03466034 115.88135529]
[110.44628906 130.81478882]
[111.85791016 145.74821472]
[120.85958862 158.75900269]
[114.35437012 172.15792847]
[115.76599121 187.09135437]
[117.17761230 202.02479553]
[127.11321259 215.07147217]
[120.53351593 230.09277344]
[104.20714569 231.63607788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[5 92]
[6 91]
[7 90]
[10 19]
[11 18]
[12 17]
[20 71]
[21 70]
[22 69]
[23 68]
[27 64]
[28 63]
[31 59]
[32 58]
[33 57]
[35 55]
[36 54]
[38 53]
[39 52]
[40 51]
[41 50]
[72 85]
[73 84]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
