%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAGGGGGACCGGCCCUGUGACCCCUCACCGGGGGCCGUGGGCCCGAGCCCCCGGACUUCCCUAAGCCGGCA\
) } def
/len { sequence length } bind def

/coor [
[98.95466614 211.73483276]
[94.65809631 197.36335754]
[97.85679626 182.70838928]
[107.75096130 171.43428040]
[121.86663055 166.36003113]
[136.67654419 168.75543213]
[128.37567139 156.26161194]
[120.07479858 143.76779175]
[111.77392578 131.27397156]
[103.47305298 118.78015137]
[89.29051208 115.81338501]
[81.27213287 103.74475098]
[84.03312683 89.52072144]
[75.73225403 77.02690125]
[67.43138123 64.53308105]
[58.87068176 52.21584320]
[50.05390167 40.08058929]
[41.23712158 27.94533348]
[28.46448898 25.07938766]
[21.39945412 14.54351521]
[23.46201706 2.43736410]
[15.16114426 -10.05645466]
[1.07968402 -17.26915550]
[0.48108110 -32.15172577]
[-7.81979227 -44.64554596]
[-16.12066460 -57.13936234]
[-24.42153931 -69.63317871]
[-32.72241211 -82.12699890]
[-47.64390945 -88.93001556]
[-48.94352341 -105.27758026]
[-35.28432846 -114.35272980]
[-20.71772575 -106.81972504]
[-20.22859383 -90.42787170]
[-11.92772007 -77.93405914]
[-3.62684679 -65.44023895]
[4.67402649 -52.94641876]
[12.97489929 -40.45259857]
[26.46262550 -34.13354111]
[27.65496254 -18.35732841]
[35.95583725 -5.86350918]
[52.00911331 0.90371621]
[53.37237549 19.12855530]
[62.18915558 31.26381111]
[71.00593567 43.39906693]
[77.68065643 47.06525803]
[79.92520142 56.23220825]
[88.22607422 68.72602844]
[96.52694702 81.21984863]
[110.70948792 84.18661499]
[118.72786713 96.25524902]
[115.96687317 110.47927856]
[124.26774597 122.97309875]
[132.56861877 135.46691895]
[140.86949158 147.96073914]
[149.17036438 160.45455933]
[159.88745117 170.94950867]
[172.55236816 178.98690796]
[181.76431274 181.03898621]
[185.56948853 187.63546753]
[197.88673401 196.19616699]
[210.20396423 204.75686646]
[226.58198547 205.58917236]
[233.80827332 220.31034851]
[224.44906616 233.77648926]
[208.13229370 232.13479614]
[201.64326477 217.07411194]
[189.32603455 208.51339722]
[177.00878906 199.95269775]
[164.51496887 191.65182495]
[151.85005188 183.61442566]
[154.55525208 198.36846924]
[149.77890015 212.58770752]
[138.71531677 222.71670532]
[124.13082886 226.22282410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[13 48]
[14 47]
[15 46]
[16 44]
[17 43]
[18 42]
[21 40]
[22 39]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[56 70]
[57 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
