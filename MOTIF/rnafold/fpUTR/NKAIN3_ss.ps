%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGCGAGCGGCGGCCGCGGGGCCGAGGAGCCUGGGCCGGGCCGGGCGGGGACUACUCCGGAGUCAGGAGGCAGCAGCGGCGGAGGACGAGGAUCUCUGGCAGUCAGCGCCGCUCGGACGCCGCCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[114.52539062 112.58286285]
[113.01774597 121.40644836]
[107.21681976 130.03535461]
[99.16148376 142.68887329]
[91.10614014 155.34237671]
[83.05079651 167.99589539]
[74.99545288 180.64941406]
[72.99582672 189.66246033]
[66.59744263 193.50352478]
[58.24548340 205.96325684]
[57.68923950 222.35296631]
[43.09191895 229.82626343]
[29.46999359 220.69526672]
[30.83653069 204.35314941]
[45.78575516 197.61129761]
[54.13771439 185.15156555]
[62.34193420 172.59407043]
[70.39727783 159.94055176]
[78.45262146 147.28703308]
[86.50796509 134.63352966]
[94.56330872 121.98001099]
[86.50796509 109.32649231]
[71.63436890 111.26974487]
[56.76078033 113.21300507]
[41.88718796 115.15625763]
[29.20568085 124.61617279]
[15.58329391 118.59289551]
[0.70970094 120.53615570]
[-11.97437859 130.93067932]
[-27.22076225 124.89082336]
[-29.34527779 108.62987518]
[-16.16240501 98.87570190]
[-1.23355424 105.66255951]
[13.64003849 103.71930695]
[25.25768661 94.39838409]
[39.94393158 100.28266907]
[54.81752396 98.33940887]
[69.69111633 96.39615631]
[84.56471252 94.45290375]
[98.43978882 88.75359344]
[110.38488007 79.68083954]
[122.22199249 70.46765137]
[133.94946289 61.11530685]
[145.67694092 51.76295853]
[157.40440369 42.41061020]
[169.13188171 33.05826569]
[173.94969177 25.18283844]
[181.24858093 23.62745476]
[193.19367981 14.55470467]
[205.13876343 5.48195553]
[204.94274902 -9.92154312]
[213.75141907 -22.34171677]
[228.01576233 -27.13675690]
[242.19863892 -22.66642380]
[254.14373779 -31.73917198]
[250.97256470 -51.35872269]
[266.31353760 -69.98893738]
[264.54608154 -84.88444519]
[262.77862549 -99.77995300]
[261.01116943 -114.67545319]
[247.83283997 -123.09365845]
[243.19815063 -138.02864075]
[249.29541016 -152.42854309]
[263.24569702 -159.49418640]
[278.46212769 -155.88938904]
[287.75994873 -143.31622314]
[286.74902344 -127.71134186]
[275.90664673 -116.44291687]
[277.67413330 -101.54740906]
[279.44158936 -86.65190125]
[281.20904541 -71.75640106]
[287.23474121 -67.29087830]
[292.00476074 -81.51222992]
[307.00408936 -81.37013245]
[311.50381470 -67.06095886]
[299.28616333 -58.35983658]
[305.31185913 -53.89431381]
[320.07708740 -56.53779602]
[334.84231567 -59.18128204]
[349.60754395 -61.82476425]
[364.37277222 -64.46824646]
[379.13800049 -67.11173248]
[393.90322876 -69.75521851]
[400.31295776 -81.66613007]
[412.25213623 -87.59639740]
[425.23016357 -85.56724548]
[434.50936890 -76.54761505]
[449.33291626 -78.84162140]
[464.15646362 -81.13562775]
[474.66125488 -96.81135559]
[492.95944214 -99.87732697]
[507.49508667 -88.86432648]
[522.19372559 -91.85581207]
[534.11004639 -103.12232971]
[549.74578857 -98.17713165]
[553.01629639 -82.10742188]
[540.55712891 -71.44432831]
[525.18524170 -77.15713501]
[510.48657227 -74.16564941]
[506.34786987 -63.41460419]
[497.41314697 -55.95306396]
[485.85983276 -53.75202179]
[474.57870483 -57.48136902]
[466.45046997 -66.31208801]
[451.62692261 -64.01807404]
[436.80337524 -61.72406769]
[427.50650024 -47.76136017]
[410.66458130 -44.73781586]
[396.54672241 -54.98998642]
[381.78149414 -52.34650421]
[367.01626587 -49.70301819]
[352.25103760 -47.05953598]
[337.48580933 -44.41605377]
[322.72058105 -41.77256775]
[307.95535278 -39.12908554]
[288.46963501 -14.30192280]
[263.21649170 -19.79408073]
[251.27139282 -10.72133160]
[251.77235413 4.14093781]
[243.32583618 16.59566498]
[228.99760437 21.74884033]
[214.21151733 17.42704773]
[202.26643372 26.49979591]
[190.32133484 35.57254410]
[178.48422241 44.78573608]
[166.75675964 54.13808441]
[155.02928162 63.49042892]
[143.30180359 72.84278107]
[131.57434082 82.19512177]
[128.27478027 88.88884735]
[119.45763397 91.62593842]
[107.51254272 100.69868469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[9 16]
[10 15]
[22 39]
[23 38]
[24 37]
[25 36]
[27 34]
[28 33]
[40 132]
[41 131]
[42 129]
[43 128]
[44 127]
[45 126]
[46 125]
[48 124]
[49 123]
[50 122]
[54 118]
[55 117]
[57 71]
[58 70]
[59 69]
[60 68]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[87 106]
[88 105]
[89 104]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
