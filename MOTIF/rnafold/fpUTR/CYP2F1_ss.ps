%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACACCCAGAGCUGCAGGCUCUAGCGCAUCCCAGCCAGUGUCUCCUGCAGCUCAGCAGCUGCCUUCACC\
) } def
/len { sequence length } bind def

/coor [
[132.89073181 384.32028198]
[137.61412048 369.70571899]
[149.02272034 359.42276001]
[145.81990051 344.76867676]
[142.61709595 330.11459351]
[127.90670776 327.55847168]
[115.26142120 319.54333496]
[106.62484741 307.26431274]
[103.33853149 292.57461548]
[105.93366241 277.70587158]
[114.04544067 264.92926025]
[126.46405792 256.20840454]
[123.26124573 241.55430603]
[120.05843353 226.90023804]
[116.85562134 212.24615479]
[113.65280151 197.59208679]
[110.44998932 182.93800354]
[107.24717712 168.28392029]
[104.04436493 153.62985229]
[100.84155273 138.97576904]
[97.63873291 124.32169342]
[80.96582794 115.32386017]
[75.73492432 97.11440277]
[85.09047699 80.63956451]
[80.02763367 66.51980591]
[68.08650208 56.14097595]
[71.07401276 41.54906082]
[66.01116943 27.42930031]
[51.07864761 23.21037292]
[41.50427628 10.99927044]
[40.96959686 -4.50859070]
[49.68021011 -17.35012054]
[64.28669739 -22.58748817]
[79.17257690 -18.20681953]
[88.61392212 -5.89257193]
[88.98033905 9.62017632]
[80.13092804 22.36645699]
[85.19377136 36.48621750]
[96.77277374 45.85510254]
[94.14739227 61.45695877]
[99.21023560 75.57672119]
[109.71364594 77.57756805]
[118.35727692 83.87142944]
[123.48621368 93.25328064]
[124.11846161 103.92686462]
[120.13297272 113.84860229]
[112.29281616 121.11888123]
[115.49562836 135.77296448]
[118.69844055 150.42703247]
[121.90125275 165.08111572]
[125.10406494 179.73518372]
[128.30688477 194.38926697]
[131.50968933 209.04335022]
[134.71250916 223.69741821]
[137.91532898 238.35150146]
[141.11813354 253.00556946]
[156.04269409 255.75028992]
[168.74514771 263.97772217]
[177.30677795 276.40802002]
[180.44857788 291.12930298]
[177.72222900 305.89184570]
[169.57382202 318.45162964]
[157.27116394 326.91177368]
[160.47398376 341.56585693]
[163.67680359 356.21994019]
[178.33512878 360.80569458]
[188.72491455 372.11709595]
[192.05137634 387.11141968]
[187.41970825 401.75531006]
[176.07579041 412.10958862]
[161.07110596 415.38903809]
[146.44181824 410.71148682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[24 41]
[25 40]
[27 38]
[28 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
