%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGACUGCGCAUGUGCAGGACCCAGCAGGUCUAGAGCUUUUCUGUGUUUCUCCGGACUUCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[151.50445557 284.31225586]
[157.02362061 270.14865112]
[167.54644775 259.17877197]
[161.48762512 245.45686340]
[155.42881775 231.73495483]
[149.36999512 218.01304626]
[133.55882263 212.75924683]
[126.14551544 197.46705627]
[132.04118347 181.17338562]
[125.35511017 167.74594116]
[118.66903687 154.31849670]
[111.98296356 140.89103699]
[105.29688263 127.46359253]
[88.18704987 125.35271454]
[75.56501007 113.61019897]
[72.22596741 96.69709015]
[79.43843079 81.03878021]
[71.54194641 68.28552246]
[53.43847275 59.96826553]
[52.84220505 40.85177612]
[43.80268478 28.88151741]
[34.76316452 16.91125870]
[25.72364616 4.94100094]
[16.68412590 -7.02925777]
[1.05751538 -10.66086960]
[-5.71586561 -25.20393944]
[1.55994058 -39.50226593]
[17.30355835 -42.58740234]
[29.43783188 -32.09268951]
[28.65438461 -16.06877708]
[37.69390488 -4.09851885]
[46.73342133 7.87173986]
[55.77294159 19.84199715]
[64.81246185 31.81225586]
[75.43180084 32.38885498]
[84.04375458 39.00315857]
[87.47924042 49.53998566]
[84.29520416 60.38903809]
[92.19168854 73.14229584]
[104.61007690 72.41280365]
[116.11654663 77.14036560]
[124.43498993 86.38980103]
[127.91992188 98.33148193]
[125.88199615 110.60321808]
[118.72433472 120.77751923]
[125.41040802 134.20497131]
[132.09648132 147.63241577]
[138.78256226 161.05986023]
[145.46864319 174.48731995]
[158.83807373 177.35076904]
[167.90263367 187.32249451]
[169.43623352 200.51290894]
[163.09190369 211.95422363]
[169.15072632 225.67613220]
[175.20953369 239.39804077]
[181.26835632 253.11994934]
[196.46438599 252.73385620]
[210.64964294 258.19708252]
[221.66098022 268.67654419]
[227.81924438 282.57418823]
[228.18534851 297.77069092]
[222.70346069 311.94876099]
[212.20953369 322.94628906]
[198.30380249 329.08627319]
[183.10681152 329.43240356]
[168.93597412 323.93185425]
[157.95225525 313.42346191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 56]
[4 55]
[5 54]
[6 53]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[17 39]
[18 38]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
