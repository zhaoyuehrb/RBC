%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGUGGCGCCGGGGAUUGGGAGGGCUUCUUGCAGGCUGCUGGGCUGGGGCUAAGGGCUGCUCAGUUUCCUUCAGCGGGGCACUGGGAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[112.67369843 132.54379272]
[104.55168152 119.93294525]
[97.06053162 120.29716492]
[89.63076019 133.32783508]
[82.20098877 146.35852051]
[74.77121735 159.38919067]
[72.17833710 176.14369202]
[55.36082840 178.29025269]
[48.64261246 162.72419739]
[61.74054337 151.95942688]
[69.17031860 138.92874146]
[76.60008240 125.89807129]
[84.02985382 112.86739349]
[85.24306488 97.91653442]
[80.01144409 83.85843658]
[74.77983093 69.80033875]
[69.54821014 55.74223709]
[64.31659698 41.68413544]
[59.08498001 27.62603569]
[53.85336304 13.56793499]
[48.62174988 -0.49016583]
[43.39013290 -14.54826641]
[38.15851593 -28.60636711]
[26.67836952 -34.75457382]
[22.67054939 -46.72065353]
[27.79434395 -57.81019974]
[23.02070045 -72.03033447]
[18.24705505 -86.25047302]
[13.47341061 -100.47061157]
[7.66923857 -107.77631378]
[8.78353691 -115.22916412]
[4.47287035 -129.59642029]
[0.16220422 -143.96368408]
[-4.38054705 -158.25926208]
[-9.15419197 -172.47940063]
[-24.87067986 -184.89663696]
[-20.70049286 -203.66067505]
[-26.38459396 -217.54200745]
[-32.06869507 -231.42332458]
[-37.75279617 -245.30464172]
[-51.04665375 -254.90699768]
[-49.10875320 -271.19125366]
[-33.93263245 -277.40551758]
[-21.13018799 -267.15713501]
[-23.87147713 -250.98873901]
[-18.18737602 -237.10742188]
[-12.50327587 -223.22610474]
[-6.81917477 -209.34478760]
[3.13454366 -206.15789795]
[9.74661827 -197.77920532]
[10.56598663 -186.91464233]
[5.06594610 -177.25303650]
[9.83959103 -163.03289795]
[15.05168533 -157.59040833]
[14.52946377 -148.27435303]
[18.84012985 -133.90708923]
[23.15079689 -119.53983307]
[27.69354820 -105.24425507]
[32.46719360 -91.02411652]
[37.24083710 -76.80397797]
[42.01448059 -62.58384323]
[55.76715088 -51.81571198]
[52.21661758 -33.83798218]
[57.44823074 -19.77988243]
[62.67984772 -5.72178221]
[67.91146851 8.33631897]
[73.14308167 22.39441872]
[78.37469482 36.45251846]
[83.60631561 50.51062012]
[88.83792877 64.56871796]
[94.06954956 78.62682343]
[99.30116272 92.68492126]
[102.15336609 88.09864044]
[107.37428284 84.85956573]
[114.35521698 83.87773895]
[122.18319702 85.81039429]
[129.73846436 90.96914673]
[135.81806946 99.26266479]
[139.27359009 110.18146515]
[147.93241882 122.42992401]
[162.21664429 129.23223877]
[163.24552917 144.09126282]
[171.90435791 156.33972168]
[187.42129517 156.40608215]
[199.91581726 165.60751343]
[204.58354187 180.40589905]
[199.62960815 195.11094666]
[186.95893860 204.06825256]
[171.44363403 203.83357239]
[159.04966736 194.49713135]
[154.54275513 179.64898682]
[159.65591431 164.99855042]
[150.99707031 152.75010681]
[137.33219910 146.82386780]
[135.68395996 131.08876038]
[127.02513885 118.84030151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[6 10]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[22 64]
[23 63]
[26 61]
[27 60]
[28 59]
[29 58]
[31 57]
[32 56]
[33 55]
[34 53]
[35 52]
[37 48]
[38 47]
[39 46]
[40 45]
[79 96]
[80 95]
[82 93]
[83 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
