%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUGCGGAACGCGAGGGGCGAGCGCGAGGGAGCCCCCCUCCGGAACCCCUGCCCACCCCCGGAGCGCCGGCAGCGGCGGCCCCGCGAGGAUCGGCUCCAGGAG\
) } def
/len { sequence length } bind def

/coor [
[-23.86745071 265.67575073]
[-30.07598114 265.80572510]
[-36.05920792 264.27056885]
[-41.38129044 261.20037842]
[-53.82237625 269.58007812]
[-66.26345825 277.95977783]
[-78.70454407 286.33947754]
[-91.14562988 294.71917725]
[-92.21160889 308.24246216]
[-100.78710175 318.49960327]
[-113.52928925 321.84524536]
[-125.67158508 317.26196289]
[-138.35552979 325.26931763]
[-151.03945923 333.27667236]
[-155.96452332 348.54504395]
[-171.02285767 354.07913208]
[-184.66299438 345.63366699]
[-186.42140198 329.68725586]
[-174.94917297 318.47265625]
[-159.04681396 320.59271240]
[-146.36286926 312.58538818]
[-133.67893982 304.57803345]
[-130.73576355 288.09402466]
[-116.54566193 278.58728027]
[-99.52532959 282.27807617]
[-87.08424377 273.89837646]
[-74.64316559 265.51867676]
[-62.20207596 257.13897705]
[-49.76099014 248.75927734]
[-42.88189316 225.36331177]
[-18.17588615 221.33926392]
[-8.05114079 210.27177429]
[2.07360411 199.20426941]
[12.19834900 188.13676453]
[22.32309341 177.06927490]
[32.44783783 166.00177002]
[30.94195747 149.32492065]
[42.12437439 136.41406250]
[59.51564026 135.48800659]
[69.30797577 124.12533569]
[79.10030365 112.76267242]
[88.89263916 101.40000153]
[98.51551819 89.89347839]
[107.96683502 78.24562073]
[117.41815186 66.59776306]
[115.97312164 51.08809662]
[125.72402954 39.41014862]
[140.51902771 38.12811279]
[149.97033691 26.48025513]
[152.65747070 10.88891220]
[166.68496704 5.88106060]
[176.13627625 -5.76679707]
[185.58760071 -17.41465569]
[195.03890991 -29.06251335]
[191.14906311 -38.34524536]
[191.00361633 -48.35035324]
[194.57983398 -57.63281631]
[201.32063293 -64.86829376]
[210.22087097 -69.04203033]
[219.97709656 -69.59107208]
[229.17834473 -66.47982025]
[239.94094849 -76.92808533]
[250.70355225 -87.37635040]
[261.46615601 -97.82461548]
[265.42187500 -113.73952484]
[281.25509644 -118.01056671]
[292.67791748 -106.24405670]
[287.93957520 -90.54438019]
[271.91442871 -87.06201172]
[261.15182495 -76.61373901]
[250.38920593 -66.16547394]
[239.62660217 -55.71721268]
[241.28594971 -35.48944092]
[227.54443359 -20.16874313]
[206.68676758 -19.61119461]
[197.23545837 -7.96333742]
[187.78413391 3.68452048]
[178.33282471 15.33237839]
[176.32171631 30.09058762]
[161.61819458 35.93157196]
[152.16688538 47.57942963]
[153.95979309 62.32124329]
[144.54074097 74.26846313]
[129.06600952 76.04907990]
[119.61469269 87.69693756]
[110.16337585 99.34479523]
[107.88109589 107.22228241]
[100.25530243 111.19233704]
[90.46297455 122.55500031]
[80.67063904 133.91766357]
[70.87831116 145.28033447]
[73.41460419 158.60636902]
[67.84602356 170.76116943]
[56.43632126 177.34716797]
[43.51533890 176.12651062]
[33.39059448 187.19401550]
[23.26584816 198.26152039]
[13.14110374 209.32901001]
[3.01635838 220.39651489]
[-7.10838652 231.46400452]
[-4.87161064 237.50302124]
[-4.34273005 243.88822937]
[-5.54305983 250.14839172]
[-8.36694527 255.82627869]
[-12.59081459 260.51199341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[12 22]
[13 21]
[14 20]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[36 95]
[39 91]
[40 90]
[41 89]
[42 88]
[43 86]
[44 85]
[45 84]
[48 81]
[49 80]
[51 78]
[52 77]
[53 76]
[54 75]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
