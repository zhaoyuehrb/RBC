%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAAGGGGAGCGCCCGCCCCUUCCCUGCCGCCGCGAGCGCCCCGGGAGGGGACCGGGGCUGCCGUCCCUCCGCCUCUUCCCCCGCGGGGCGUAGCG\
) } def
/len { sequence length } bind def

/coor [
[-79.87635803 210.36766052]
[-91.81278992 219.45179749]
[-103.74921417 228.53594971]
[-115.68564606 237.62010193]
[-127.62207031 246.70423889]
[-139.55850220 255.78839111]
[-151.49491882 264.87252808]
[-163.43135071 273.95666504]
[-175.36778259 283.04083252]
[-187.30421448 292.12496948]
[-186.82493591 307.63464355]
[-195.58135986 320.44497681]
[-210.20646667 325.63012695]
[-225.07659912 321.19631958]
[-234.47389221 308.84841919]
[-234.78489685 293.33444214]
[-225.89001465 280.61987305]
[-211.20951843 275.59365845]
[-196.38835144 280.18853760]
[-184.45191956 271.10440063]
[-172.51550293 262.02023315]
[-160.57907104 252.93609619]
[-148.64263916 243.85195923]
[-136.70622253 234.76780701]
[-124.76979065 225.68367004]
[-112.83335876 216.59951782]
[-100.89693451 207.51538086]
[-88.96050262 198.43122864]
[-89.61188507 190.17462158]
[-86.80981445 182.27946472]
[-80.96760559 176.14260864]
[-73.04335785 172.88314819]
[-64.38333130 173.13885498]
[-56.49333572 176.94297791]
[-43.50295639 169.44297791]
[-30.51257515 161.94297791]
[-27.01598930 150.24270630]
[-16.09768677 143.92402649]
[-3.42547417 146.90533447]
[9.79632664 139.82125854]
[23.01812744 132.73719788]
[36.23992538 125.65312958]
[49.46172714 118.56906128]
[62.68352890 111.48500061]
[75.90532684 104.40093231]
[89.12712860 97.31686401]
[102.23487091 90.02391815]
[115.22525024 82.52391815]
[121.22886658 75.39082336]
[128.74893188 74.99954224]
[141.97071838 67.91548157]
[155.19252014 60.83141327]
[168.41432190 53.74734497]
[181.63612366 46.66328049]
[185.61242676 41.00954056]
[191.06196594 38.70372009]
[195.92887878 39.57960129]
[209.57334900 33.34837723]
[223.21783447 27.11715126]
[236.86231995 20.88592529]
[250.50679016 14.65470028]
[250.76663208 -0.60620511]
[257.62985229 -14.23920918]
[269.73379517 -23.53746796]
[284.67517090 -26.65480614]
[299.48739624 -22.97227478]
[311.22946167 -13.22104073]
[317.56997681 0.66277921]
[317.25006104 15.92254353]
[310.33319092 29.52841377]
[298.19274902 38.77893448]
[283.23919678 41.83740997]
[268.44158936 38.09657669]
[256.73800659 28.29918098]
[243.09353638 34.53040695]
[229.44906616 40.76163101]
[215.80458069 46.99285507]
[202.16009521 53.22408295]
[188.72019958 59.88508224]
[175.49839783 66.96914673]
[162.27659607 74.05321503]
[149.05479431 81.13727570]
[135.83299255 88.22134399]
[122.72525024 95.51429749]
[109.73487091 103.01429749]
[104.77383423 109.57039642]
[96.21119690 110.53866577]
[82.98939514 117.62273407]
[69.76759338 124.70680237]
[56.54579544 131.79086304]
[43.32399368 138.87492371]
[30.10219383 145.95899963]
[16.88039207 153.04306030]
[3.65859199 160.12713623]
[-5.57292414 175.96087646]
[-23.01257515 174.93334961]
[-36.00295639 182.43334961]
[-48.99333572 189.93334961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[34 98]
[35 97]
[36 96]
[39 94]
[40 93]
[41 92]
[42 91]
[43 90]
[44 89]
[45 88]
[46 87]
[47 85]
[48 84]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
