%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:41 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (HEG1)
} def

/sequence { (\
CCGCUGCCCGCUGCCCGCUGCCCUCGCCCCGCGCGCCGGGCAUGUGAGCGCGGGCGGGCGCCGUCACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 53 0.004977652 ubox
1 57 0.013385360 ubox
1 58 0.020597904 ubox
2 52 0.006129792 ubox
2 56 0.013382023 ubox
2 57 0.018940207 ubox
2 60 0.938161871 ubox
2 63 0.107201554 ubox
3 11 0.003334844 ubox
3 51 0.006151371 ubox
3 55 0.007461362 ubox
3 59 0.971538744 ubox
3 61 0.066652532 ubox
3 62 0.106960912 ubox
3 64 0.010725417 ubox
4 10 0.003336788 ubox
4 50 0.006012802 ubox
4 54 0.005587560 ubox
4 57 0.591911481 ubox
4 58 0.796188096 ubox
4 60 0.067129544 ubox
4 63 0.011078405 ubox
5 56 0.812935786 ubox
5 57 0.558851196 ubox
5 60 0.091528083 ubox
5 66 0.005284275 ubox
6 49 0.006160485 ubox
6 55 0.991830506 ubox
6 59 0.114476496 ubox
6 65 0.005929303 ubox
7 48 0.006158592 ubox
7 54 0.993286785 ubox
7 58 0.114500465 ubox
7 63 0.003593857 ubox
8 53 0.993302927 ubox
8 57 0.114486205 ubox
9 46 0.006151936 ubox
9 52 0.993287625 ubox
9 56 0.114436434 ubox
9 63 0.009868126 ubox
10 45 0.006174077 ubox
10 51 0.993257861 ubox
10 55 0.112215903 ubox
10 61 0.007767945 ubox
10 62 0.009884996 ubox
11 44 0.006177107 ubox
11 50 0.970870435 ubox
11 53 0.041197034 ubox
11 54 0.103942759 ubox
11 60 0.007829072 ubox
12 42 0.008478717 ubox
12 50 0.211733851 ubox
12 52 0.057956752 ubox
12 53 0.083261185 ubox
12 56 0.004236224 ubox
12 60 0.010079146 ubox
13 41 0.008644067 ubox
13 49 0.995958985 ubox
13 51 0.070971513 ubox
13 55 0.022610871 ubox
13 59 0.013402924 ubox
14 40 0.008644446 ubox
14 48 0.995654050 ubox
14 50 0.070976703 ubox
14 53 0.014609170 ubox
14 54 0.024676682 ubox
14 58 0.013406442 ubox
15 39 0.008644734 ubox
15 52 0.015117135 ubox
15 53 0.026890589 ubox
15 57 0.013406569 ubox
16 38 0.008643695 ubox
16 44 0.014769464 ubox
16 46 0.995273716 ubox
16 50 0.018041473 ubox
16 52 0.027033702 ubox
16 56 0.013406309 ubox
17 37 0.008289480 ubox
17 43 0.014623507 ubox
17 45 0.998631345 ubox
17 49 0.018728505 ubox
17 51 0.026985475 ubox
17 55 0.013390270 ubox
18 44 0.998738835 ubox
18 48 0.018726597 ubox
18 50 0.026685216 ubox
18 53 0.008585748 ubox
18 54 0.010980915 ubox
19 35 0.005873738 ubox
19 42 0.977375577 ubox
19 47 0.013452188 ubox
19 50 0.003797440 ubox
19 52 0.011627886 ubox
19 53 0.007723291 ubox
20 34 0.006273182 ubox
20 36 0.005226211 ubox
20 41 0.999595858 ubox
20 49 0.018004862 ubox
20 51 0.014120846 ubox
21 33 0.006119914 ubox
21 35 0.005241930 ubox
21 39 0.006197162 ubox
21 40 0.999571679 ubox
21 48 0.016211604 ubox
21 50 0.014146118 ubox
22 38 0.008599978 ubox
22 39 0.999512792 ubox
22 40 0.008821460 ubox
23 38 0.998226411 ubox
23 39 0.012179841 ubox
23 48 0.019263955 ubox
24 38 0.013806919 ubox
24 47 0.024378436 ubox
25 31 0.005317820 ubox
25 33 0.140770479 ubox
25 35 0.978760892 ubox
25 46 0.024845067 ubox
26 30 0.005004697 ubox
26 32 0.142191244 ubox
26 34 0.983891868 ubox
26 36 0.101091406 ubox
26 37 0.004242675 ubox
26 41 0.006359932 ubox
26 45 0.024665311 ubox
27 31 0.141203663 ubox
27 33 0.982708929 ubox
27 35 0.101167290 ubox
27 40 0.006276361 ubox
27 44 0.024645861 ubox
28 39 0.006169345 ubox
28 40 0.024561735 ubox
29 38 0.006050067 ubox
29 39 0.024616854 ubox
30 38 0.024649353 ubox
31 37 0.024148756 ubox
53 65 0.003478119 ubox
54 64 0.005903853 ubox
55 63 0.006287815 ubox
56 62 0.009770241 ubox
56 65 0.004501752 ubox
56 68 0.009448685 ubox
57 61 0.009630004 ubox
57 64 0.004243214 ubox
57 65 0.020471743 ubox
57 67 0.009626961 ubox
57 68 0.008430288 ubox
58 64 0.029488750 ubox
58 67 0.014635431 ubox
59 63 0.029893059 ubox
2 60 0.9500000 lbox
3 59 0.9500000 lbox
4 58 0.9500000 lbox
5 57 0.9500000 lbox
6 55 0.9500000 lbox
7 54 0.9500000 lbox
8 53 0.9500000 lbox
9 52 0.9500000 lbox
10 51 0.9500000 lbox
11 50 0.9500000 lbox
13 49 0.9500000 lbox
14 48 0.9500000 lbox
16 46 0.9500000 lbox
17 45 0.9500000 lbox
18 44 0.9500000 lbox
19 42 0.9500000 lbox
20 41 0.9500000 lbox
21 40 0.9500000 lbox
22 39 0.9500000 lbox
23 38 0.9500000 lbox
25 35 0.9500000 lbox
26 34 0.9500000 lbox
27 33 0.9500000 lbox
showpage
end
%%EOF
