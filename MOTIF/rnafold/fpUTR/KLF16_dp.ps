%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:59 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (KLF16)
} def

/sequence { (\
CGCCGGCCGGACGGACGCCGCUCCCGCCGCCUCCGCUCCGCCCGCCGCGCCGCGCGCCCUUGCUCGGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 44 0.016770434 ubox
1 47 0.497960521 ubox
1 49 0.215588691 ubox
1 52 0.004607320 ubox
1 54 0.003792735 ubox
1 56 0.003826765 ubox
2 43 0.017371442 ubox
2 45 0.464908916 ubox
2 46 0.518922406 ubox
2 48 0.656243165 ubox
2 50 0.043782799 ubox
2 51 0.003600427 ubox
2 53 0.004049173 ubox
2 55 0.006224119 ubox
2 68 0.024430114 ubox
3 44 0.453724727 ubox
3 47 0.560733644 ubox
3 49 0.050983051 ubox
3 52 0.003908515 ubox
3 54 0.006226917 ubox
3 67 0.024600248 ubox
4 44 0.698148815 ubox
4 47 0.413778153 ubox
4 52 0.006256642 ubox
4 66 0.024560295 ubox
5 42 0.440299596 ubox
5 43 0.717410373 ubox
5 46 0.539052576 ubox
5 51 0.006350707 ubox
5 65 0.018806141 ubox
6 41 0.443415903 ubox
6 42 0.714813065 ubox
6 45 0.539185303 ubox
6 50 0.006350781 ubox
6 63 0.016979827 ubox
6 64 0.004946403 ubox
7 40 0.316624966 ubox
7 44 0.538676220 ubox
7 49 0.006344974 ubox
7 62 0.017018803 ubox
8 40 0.945791486 ubox
8 44 0.010308993 ubox
9 37 0.012424176 ubox
9 38 0.033982933 ubox
9 39 0.998846133 ubox
9 42 0.024034564 ubox
9 43 0.014097695 ubox
10 36 0.017310435 ubox
10 37 0.030076489 ubox
10 38 0.998911951 ubox
10 41 0.023780435 ubox
10 42 0.013953298 ubox
11 37 0.995651745 ubox
12 35 0.998601203 ubox
12 40 0.024675980 ubox
13 34 0.999665741 ubox
13 39 0.024641792 ubox
14 33 0.999670720 ubox
14 38 0.024628034 ubox
15 32 0.991103835 ubox
15 37 0.024470982 ubox
16 29 0.026602845 ubox
16 35 0.018890153 ubox
17 27 0.005633849 ubox
17 28 0.026558780 ubox
17 30 0.998232143 ubox
17 34 0.014651069 ubox
17 36 0.013474787 ubox
18 26 0.006409459 ubox
18 29 0.998013431 ubox
18 35 0.013367157 ubox
19 26 0.046827113 ubox
19 29 0.035249969 ubox
20 25 0.045413648 ubox
20 27 0.996814691 ubox
20 28 0.036607694 ubox
20 30 0.017060229 ubox
21 26 0.996172255 ubox
21 29 0.017084606 ubox
40 57 0.005367637 ubox
41 56 0.005501385 ubox
43 54 0.005956416 ubox
43 56 0.005555708 ubox
44 53 0.006223947 ubox
44 55 0.006201963 ubox
44 57 0.011841778 ubox
44 63 0.008414033 ubox
44 68 0.010360668 ubox
45 52 0.006155116 ubox
45 54 0.005126116 ubox
45 56 0.010803306 ubox
45 62 0.008403875 ubox
45 67 0.010904449 ubox
46 52 0.003554256 ubox
46 54 0.010931771 ubox
46 56 0.010687024 ubox
46 66 0.010952763 ubox
47 51 0.003426793 ubox
47 53 0.011596656 ubox
47 55 0.014528477 ubox
47 57 0.028558724 ubox
47 65 0.010007838 ubox
47 68 0.005595912 ubox
48 52 0.011513761 ubox
48 54 0.014539425 ubox
48 56 0.028729893 ubox
48 67 0.004544184 ubox
49 53 0.013602848 ubox
49 55 0.028803215 ubox
49 63 0.009375519 ubox
49 68 0.967247968 ubox
50 54 0.028594751 ubox
50 62 0.009124637 ubox
50 67 0.997975535 ubox
51 66 0.998979942 ubox
52 63 0.017102440 ubox
52 65 0.998238025 ubox
52 68 0.008357198 ubox
53 62 0.018472484 ubox
53 66 0.016045431 ubox
53 67 0.007160702 ubox
54 61 0.014162306 ubox
54 63 0.996953974 ubox
54 65 0.017602383 ubox
55 62 0.996853438 ubox
55 66 0.003763717 ubox
56 61 0.675771967 ubox
56 63 0.057999488 ubox
56 65 0.003630302 ubox
56 68 0.015971168 ubox
57 62 0.057816468 ubox
57 67 0.016427878 ubox
58 66 0.016369200 ubox
58 67 0.016040840 ubox
59 66 0.016238548 ubox
62 68 0.003216057 ubox
63 67 0.003229752 ubox
1 47 0.9500000 lbox
2 46 0.9500000 lbox
4 44 0.9500000 lbox
5 43 0.9500000 lbox
6 42 0.9500000 lbox
8 40 0.9500000 lbox
9 39 0.9500000 lbox
10 38 0.9500000 lbox
11 37 0.9500000 lbox
12 35 0.9500000 lbox
13 34 0.9500000 lbox
14 33 0.9500000 lbox
15 32 0.9500000 lbox
17 30 0.9500000 lbox
18 29 0.9500000 lbox
20 27 0.9500000 lbox
21 26 0.9500000 lbox
49 68 0.9500000 lbox
50 67 0.9500000 lbox
51 66 0.9500000 lbox
52 65 0.9500000 lbox
54 63 0.9500000 lbox
55 62 0.9500000 lbox
showpage
end
%%EOF
