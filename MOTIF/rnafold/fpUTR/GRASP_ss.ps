%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCAUCCCCCAGCCGCCGCCAGCCCCGCCGAGGGGAGCCAGCGCCGUCUCUGAGGGGCGUCCGGCGCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[75.04895020 251.38923645]
[78.03373718 232.23875427]
[78.65361786 217.25157166]
[79.27349091 202.26438904]
[76.31785583 195.25108337]
[80.24138641 186.67439270]
[81.48007965 171.72563171]
[82.71877289 156.77685547]
[75.59283447 150.67343140]
[72.18689728 141.78038025]
[73.44929504 132.19975281]
[79.20750427 124.26502228]
[88.17790222 119.97280884]
[91.25613403 105.29206085]
[89.67291260 97.12995911]
[94.77686310 90.07400513]
[98.45914459 75.53300476]
[102.14142609 60.99199677]
[105.82370758 46.45099258]
[96.06652832 34.53026962]
[95.20957184 19.32767296]
[103.37223053 6.68508434]
[117.24806213 1.33724988]
[120.93034363 -13.20375443]
[124.61262512 -27.74475861]
[128.29490662 -42.28576279]
[131.97718811 -56.82676697]
[122.22000885 -68.74748993]
[121.36305237 -83.95008850]
[129.52571106 -96.59267426]
[143.40153503 -101.94051361]
[147.08381653 -116.48151398]
[150.76609802 -131.02252197]
[154.44837952 -145.56352234]
[157.82936096 -160.17752075]
[160.90759277 -174.85827637]
[150.39347839 -186.27023315]
[148.62858582 -201.68661499]
[156.29159546 -215.17950439]
[170.43588257 -221.56060791]
[185.62271118 -218.37626648]
[196.01242065 -206.85092163]
[197.60995483 -191.41630554]
[189.80104065 -178.00733948]
[175.58834839 -171.78004456]
[172.51011658 -157.09928894]
[174.27108765 -149.69515991]
[168.98939514 -141.88124084]
[165.30711365 -127.34023285]
[161.62483215 -112.79923248]
[157.94255066 -98.25822449]
[167.60067749 -86.95078278]
[168.76231384 -71.94696045]
[160.77301025 -58.98454285]
[146.51818848 -53.14448547]
[142.83590698 -38.60348129]
[139.15362549 -24.06247520]
[135.47134399 -9.52147198]
[131.78906250 5.01953220]
[141.44720459 16.32697678]
[142.60884094 31.33079720]
[134.61953735 44.29321671]
[120.36471558 50.13327408]
[116.68242645 64.67427826]
[113.00014496 79.21528625]
[109.31786346 93.75628662]
[105.93688965 108.37028503]
[102.85865784 123.05104065]
[111.12747192 142.59796143]
[97.66753387 158.01554871]
[96.42884827 172.96432495]
[95.19015503 187.91308594]
[94.26067352 202.88426208]
[93.64080048 217.87144470]
[93.02092743 232.85862732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[6 72]
[7 71]
[8 70]
[13 68]
[14 67]
[16 66]
[17 65]
[18 64]
[19 63]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[31 51]
[32 50]
[33 49]
[34 48]
[35 46]
[36 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
