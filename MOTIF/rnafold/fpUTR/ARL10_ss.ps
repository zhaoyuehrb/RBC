%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGCGCGGCCGCAGCAGUCGCAGCGGGGCCAUCUUCGGCGGGCGAGUGGGCUCGGCCUGUGCAACCCGCACCUGCGUCCCUCGCCCGGCCCG\
) } def
/len { sequence length } bind def

/coor [
[97.31871796 217.05996704]
[81.58897400 215.52679443]
[71.61515045 203.26716614]
[73.31453705 187.55450439]
[85.67892456 177.71086121]
[87.13407135 162.78160095]
[88.58921814 147.85235596]
[90.04436493 132.92309570]
[84.53076935 127.83879089]
[74.36197662 138.86582947]
[63.33509445 128.69685364]
[73.50357819 117.67016602]
[67.98997498 112.58585358]
[53.22732925 115.24371338]
[38.46468353 117.90158081]
[23.70203400 120.55944824]
[11.49120998 130.61958313]
[-2.40565205 125.25987244]
[-17.16829872 127.91773224]
[-29.33664894 138.91151428]
[-44.85641861 133.61352539]
[-47.76219940 117.47386169]
[-35.06477356 107.09564972]
[-19.82616425 113.15508270]
[-5.06351662 110.49722290]
[6.09138489 100.62719727]
[21.04417038 105.79679871]
[35.80681610 103.13893127]
[50.56946564 100.48106384]
[65.33211517 97.82320404]
[74.79560089 81.99182129]
[89.58337402 74.85497284]
[79.77716064 63.50428009]
[69.97095490 52.15358734]
[54.19234085 51.25302887]
[43.73446274 39.40362549]
[44.80179214 23.63541794]
[56.76110077 13.30340385]
[72.51714325 14.53738403]
[82.72213745 26.60526085]
[81.32164764 42.34737396]
[91.12785339 53.69806671]
[100.93406677 65.04875946]
[115.49371338 68.65663147]
[129.46525574 63.19805908]
[143.43679810 57.73948669]
[157.40834045 52.28091049]
[171.37988281 46.82233810]
[185.35142517 41.36376190]
[199.32296753 35.90518951]
[206.33818054 29.75308418]
[213.83634949 30.50414085]
[227.97732544 25.50085449]
[242.11830139 20.49756813]
[256.25927734 15.49428177]
[266.68832397 3.59700322]
[281.26751709 6.64598799]
[295.40850830 1.64270139]
[309.54946899 -3.36058497]
[313.17602539 -7.64111662]
[317.66653442 -9.75246716]
[321.99270630 -9.74441528]
[325.31213379 -8.08992195]
[339.87179565 -11.69779682]
[354.43142700 -15.30567074]
[368.99108887 -18.91354561]
[378.47174072 -31.85559082]
[394.50659180 -32.36854935]
[404.79507446 -20.05892181]
[401.44473267 -4.36960268]
[387.02566528 2.66390657]
[372.59893799 -4.35390091]
[358.03930664 -0.74602681]
[343.47967529 2.86184764]
[328.92001343 6.46972179]
[314.55276489 10.78038788]
[300.41177368 15.78367424]
[286.27081299 20.78696060]
[276.85321045 32.32637024]
[261.26254272 29.63525391]
[247.12158203 34.63854218]
[232.98060608 39.64182663]
[218.83963013 44.64511490]
[204.78153992 49.87673187]
[190.80999756 55.33530426]
[176.83845520 60.79387665]
[162.86691284 66.25244904]
[148.89537048 71.71102905]
[134.92382812 77.16960144]
[120.95228577 82.62817383]
[128.90902710 111.12763977]
[104.97361755 134.37825012]
[103.51847076 149.30749512]
[102.06332397 164.23675537]
[100.60817719 179.16600037]
[110.83898926 191.21200562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 95]
[6 94]
[7 93]
[8 92]
[13 30]
[14 29]
[15 28]
[16 27]
[18 25]
[19 24]
[32 43]
[33 42]
[34 41]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[52 83]
[53 82]
[54 81]
[55 80]
[57 78]
[58 77]
[59 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
