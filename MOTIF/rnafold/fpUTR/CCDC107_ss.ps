%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUCGCGUGCGCGUGCGCGUUGGGGCGGCCGGCCAAUGCCGGACCGCUUCGGCACCGCCCGCCCGAUCCCUCCACCCGUGGGCCGGCA\
) } def
/len { sequence length } bind def

/coor [
[96.44081879 129.18879700]
[86.75963593 126.25540161]
[76.81279755 137.48306274]
[66.86595917 148.71072388]
[63.50620270 164.17108154]
[49.27500916 168.56680298]
[39.32817078 179.79446411]
[29.38133049 191.02212524]
[26.63301468 207.18934631]
[11.16562748 212.63836670]
[-1.10931098 201.76373291]
[2.43560457 185.75230408]
[18.15366745 181.07528687]
[28.10050774 169.84762573]
[38.04734802 158.61996460]
[40.69563675 143.96267700]
[55.63829803 138.76388550]
[65.58513641 127.53622437]
[75.53197479 116.30856323]
[70.75257874 96.95999908]
[79.40903473 79.00796509]
[71.98390198 65.97464752]
[64.55876923 52.94132614]
[57.13364029 39.90800476]
[49.70850754 26.87468719]
[42.28337479 13.84136677]
[34.85824585 0.80804765]
[27.43311310 -12.22527218]
[20.00798035 -25.25859070]
[12.58284855 -38.29191208]
[4.93385983 -51.19512558]
[-2.93670750 -63.96439362]
[-10.80727482 -76.73365784]
[-18.67784309 -89.50292969]
[-26.54841042 -102.27219391]
[-41.22956848 -109.57942963]
[-41.97169495 -125.96176910]
[-28.01135635 -134.56648254]
[-13.70974922 -126.54176331]
[-13.77914333 -110.14276123]
[-5.90857553 -97.37349701]
[1.96199179 -84.60422516]
[9.83255863 -71.83496094]
[17.70312691 -59.06569290]
[24.02774429 -54.93591690]
[25.61616898 -45.71704102]
[33.04130173 -32.68372345]
[40.46643066 -19.65040398]
[47.89156342 -6.61708403]
[55.31669617 6.41623545]
[62.74182892 19.44955444]
[70.16696167 32.48287582]
[77.59209442 45.51619339]
[85.01721954 58.54951477]
[92.44235229 71.58283234]
[106.77589417 71.38635254]
[119.49911499 77.99005127]
[127.58827209 89.82451630]
[129.12094116 104.07723236]
[142.95423889 109.87723541]
[156.78753662 115.67723083]
[172.50607300 113.87781525]
[181.25166321 125.93451691]
[195.08494568 131.73451233]
[208.91824341 137.53451538]
[222.75154114 143.33451843]
[236.58482361 149.13452148]
[247.64767456 138.66870117]
[262.01306152 133.61347961]
[277.19213867 134.84471130]
[290.55499268 142.14907837]
[299.78646851 154.26104736]
[303.28713989 169.08216858]
[300.45046997 184.04455566]
[291.76797485 196.55592346]
[278.74392700 204.44856262]
[263.63482666 206.35505676]
[249.05839539 201.94509888]
[237.54011536 191.98271179]
[231.07559204 178.19395447]
[230.78483582 162.96780396]
[216.95153809 157.16781616]
[203.11824036 151.36781311]
[189.28495789 145.56781006]
[175.45166016 139.76780701]
[160.72256470 141.98208618]
[150.98753357 129.51052856]
[137.15423584 123.71052551]
[123.32094574 117.91052246]
[115.87125397 124.75392151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[6 15]
[7 14]
[8 13]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[59 89]
[60 88]
[61 87]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
