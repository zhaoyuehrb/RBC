%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCCCCCGUCCCCGUCCCCUCCCGGCCGCGGCGCCGCCUGCGCCCCGCCGCCCCCGCCGCCCCCGCGCGGCCCGGCCCCCGGCCCGGCCCGGACCGACCCGGGCAGCGCAGCGGCGGGGCCGAGCGGCGGCGCGGCGCGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[12.51159573 326.03610229]
[7.18280840 340.05764771]
[-3.53622627 350.55059814]
[-17.66816902 355.57934570]
[-32.60610199 354.21621704]
[-45.59442520 346.71264648]
[-54.23718643 334.45285034]
[-56.94005203 319.69836426]
[-53.20580673 305.17370605]
[-65.07373047 314.34716797]
[-76.94165039 323.52062988]
[-88.80957031 332.69409180]
[-90.95531464 348.12243652]
[-103.12175751 357.25656128]
[-117.81709290 355.11584473]
[-129.68501282 364.28930664]
[-141.55293274 373.46276855]
[-140.95727539 388.96841431]
[-149.61732483 401.84408569]
[-164.20310974 407.13885498]
[-179.10609436 402.81677246]
[-188.59579468 390.53973389]
[-189.02319336 375.02853394]
[-180.22398376 362.24755859]
[-165.58161926 357.11132812]
[-150.72639465 361.59484863]
[-138.85847473 352.42138672]
[-126.99055481 343.24792480]
[-125.35929871 328.48736572]
[-113.45422363 319.01507568]
[-97.98303223 320.82617188]
[-86.11511230 311.65270996]
[-74.24719238 302.47924805]
[-62.37927246 293.30578613]
[-58.94580841 284.19207764]
[-48.79848099 280.01025391]
[-39.37517929 268.33972168]
[-29.95187950 256.66918945]
[-20.52857971 244.99864197]
[-11.10527992 233.32810974]
[-1.80637395 221.55821228]
[7.36709166 209.69029236]
[16.54055786 197.82237244]
[25.71402168 185.95445251]
[34.88748932 174.08653259]
[44.06095505 162.21861267]
[53.23441696 150.35069275]
[62.28141022 138.38607788]
[71.20090485 126.32612610]
[80.12040710 114.26616669]
[89.03990173 102.20621490]
[97.83090210 90.05226898]
[106.49241638 77.80570984]
[108.14408112 62.07095337]
[121.81026459 56.14771271]
[130.47177124 43.90115356]
[139.13328552 31.65459442]
[147.79479980 19.40803337]
[156.45631409 7.16147423]
[165.11781311 -5.08508539]
[173.77932739 -17.33164597]
[182.44084167 -29.57820511]
[191.10235596 -41.82476425]
[188.25115967 -50.94163132]
[189.93190002 -60.20441437]
[195.63446045 -67.52017975]
[203.95506287 -71.29659271]
[212.93988037 -70.78771210]
[222.36317444 -82.45825195]
[231.78646851 -94.12878418]
[241.20977783 -105.79932404]
[243.85942078 -121.39707947]
[257.87484741 -126.43862152]
[267.29815674 -138.10916138]
[276.72143555 -149.77969360]
[286.14474487 -161.45022583]
[295.56805420 -173.12077332]
[304.99133301 -184.79130554]
[301.43841553 -196.22286987]
[303.85253906 -207.82502747]
[311.51336670 -216.70832825]
[322.40887451 -220.71842957]
[333.76290894 -218.95788574]
[343.67300415 -230.21797180]
[353.58312988 -241.47804260]
[356.89239502 -256.94931030]
[371.10916138 -261.39147949]
[381.01928711 -272.65155029]
[390.92938232 -283.91165161]
[396.85510254 -299.79629517]
[413.75936890 -298.49948120]
[417.19281006 -281.89685059]
[402.18948364 -274.00152588]
[392.27935791 -262.74142456]
[382.36923218 -251.48135376]
[379.76882935 -236.81549072]
[364.84323120 -231.56793213]
[354.93310547 -220.30784607]
[345.02297974 -209.04776001]
[347.32574463 -190.93778992]
[335.51205444 -176.60586548]
[316.66189575 -175.36801147]
[307.23858643 -163.69746399]
[297.81527710 -152.02693176]
[288.39199829 -140.35639954]
[278.96868896 -128.68585205]
[269.54537964 -117.01531982]
[267.56976318 -102.25231934]
[252.88031006 -96.37602234]
[243.45701599 -84.70548248]
[234.03370667 -73.03495026]
[224.61041260 -61.36441422]
[223.32124329 -40.80340195]
[203.34890747 -33.16325378]
[194.68739319 -20.91669464]
[186.02589417 -8.67013454]
[177.36437988 3.57642555]
[168.70286560 15.82298565]
[160.04135132 28.06954575]
[151.37985229 40.31610489]
[142.71833801 52.56266403]
[134.05682373 64.80922699]
[133.02468872 79.66802216]
[118.73897552 86.46721649]
[110.07746124 98.71378326]
[108.34542084 106.64785004]
[101.09986115 111.12570953]
[92.18035889 123.18566895]
[83.26086426 135.24562073]
[74.34136963 147.30558777]
[71.72735596 156.13200378]
[65.10234070 159.52415466]
[55.92887497 171.39207458]
[46.75540924 183.25999451]
[37.58194351 195.12791443]
[28.40847778 206.99583435]
[19.23501205 218.86376953]
[10.06154633 230.73168945]
[7.26077938 239.50064087]
[0.56525594 242.75140381]
[-8.85804367 254.42195129]
[-18.28134346 266.09246826]
[-27.70464325 277.76303101]
[-37.12794495 289.43356323]
[-22.52423477 286.00839233]
[-7.83071804 289.02511597]
[4.24209499 297.92721558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 34]
[10 33]
[11 32]
[12 31]
[15 28]
[16 27]
[17 26]
[36 144]
[37 143]
[38 142]
[39 141]
[40 140]
[41 138]
[42 137]
[43 136]
[44 135]
[45 134]
[46 133]
[47 132]
[48 130]
[49 129]
[50 128]
[51 127]
[52 125]
[53 124]
[55 122]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[68 112]
[69 111]
[70 110]
[71 109]
[73 107]
[74 106]
[75 105]
[76 104]
[77 103]
[78 102]
[83 99]
[84 98]
[85 97]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
