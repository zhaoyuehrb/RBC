%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUGCGGGGUCGGCCGGGUGCUGGGCCGAGGCCGAGGCCGGGGCGGGAUCCAGAGCGGGAGCCGGCGCGGGAUCUGGGACUCGGAGCGGGAUCCGGAGCGGGACCCAGGAGCCGGCGCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[105.77703857 117.82425690]
[96.92227936 118.48258972]
[88.75866699 114.99036407]
[83.11947632 108.13181305]
[68.12979889 108.68826294]
[59.43484497 121.40454865]
[45.08707809 126.50306702]
[30.65893936 122.22605896]
[21.62404823 110.41467285]
[6.63437271 110.97113037]
[-8.35530186 111.52758026]
[-23.34497643 112.08403778]
[-38.33465195 112.64048767]
[-53.63074875 122.80285645]
[-68.83269501 114.12790680]
[-83.80401611 115.05494690]
[-98.77534485 115.98199463]
[-113.81539917 126.51959229]
[-129.22726440 118.22330475]
[-144.17108154 119.52037811]
[-159.11489868 120.81744385]
[-167.49858093 124.71343994]
[-174.44363403 121.95709229]
[-189.41496277 122.88414001]
[-202.71055603 131.45953369]
[-215.89169312 124.52361298]
[-230.86302185 125.45066071]
[-245.83435059 126.37770081]
[-259.19607544 135.88537598]
[-273.99633789 128.82244873]
[-275.00982666 112.45464325]
[-261.19403076 103.61976624]
[-246.76138306 111.40637970]
[-231.79006958 110.47933197]
[-216.81874084 109.55229187]
[-204.59397888 101.04319763]
[-190.34201050 107.91281128]
[-175.37068176 106.98577118]
[-160.41195679 105.87362671]
[-145.46815491 104.57656097]
[-130.52433777 103.27949524]
[-122.44615173 94.18537903]
[-109.93231201 93.04019165]
[-99.70239258 101.01066589]
[-84.73106384 100.08362579]
[-69.75973511 99.15657806]
[-61.45909119 90.26506042]
[-48.92074966 89.42974091]
[-38.89110565 97.65081024]
[-23.90143013 97.09436035]
[-8.91175556 96.53791046]
[6.07791901 95.98145294]
[21.06759453 95.42500305]
[29.20189095 82.97625732]
[43.27320480 77.64127350]
[57.95950317 81.66197205]
[67.57334900 93.69859314]
[82.56302643 93.14213562]
[98.61077881 81.31448364]
[116.23114777 90.63899994]
[131.13830566 88.97270203]
[139.84197998 79.35886383]
[152.36598206 78.33085632]
[161.89022827 85.89714050]
[176.83404541 84.60007477]
[189.91346741 75.69844055]
[203.26213074 82.30621338]
[218.20594788 81.00914764]
[233.14974976 79.71207428]
[248.09356689 78.41500854]
[261.17300415 69.51337433]
[274.52166748 76.12114716]
[289.46545410 74.82408142]
[304.24029541 63.91770172]
[319.85263062 71.83024597]
[334.75979614 70.16394806]
[349.66696167 68.49765015]
[364.57412720 66.83135223]
[379.48129272 65.16505432]
[394.38842773 63.49875641]
[407.24368286 54.27632904]
[420.75170898 60.55191422]
[435.65887451 58.88561630]
[450.56600952 57.21931839]
[465.47317505 55.55302048]
[473.20138550 42.22706604]
[487.13165283 36.07879639]
[501.83718872 39.27429962]
[511.72293091 50.38329697]
[526.63012695 48.71699905]
[541.53723145 47.05070114]
[556.60668945 39.28227234]
[568.24316406 51.61227036]
[559.61633301 66.20726776]
[543.20355225 61.95786285]
[528.29638672 63.62416077]
[513.38922119 65.29045868]
[506.20031738 78.30803680]
[492.56326294 84.67162323]
[477.61929321 81.75086975]
[467.13946533 70.46018219]
[452.23233032 72.12648010]
[437.32516479 73.79277802]
[422.41799927 75.45907593]
[410.62899780 84.56231689]
[396.05474854 78.40591431]
[381.14758301 80.07221222]
[366.24041748 81.73851013]
[351.33325195 83.40480804]
[336.42608643 85.07110596]
[321.51892090 86.73740387]
[313.66815186 96.02854156]
[301.18646240 97.48290253]
[290.76254272 89.76789856]
[275.81872559 91.06496429]
[263.80816650 99.87382507]
[249.39064026 93.35882568]
[234.44682312 94.65589142]
[219.50300598 95.95296478]
[204.55918884 97.25003052]
[192.54864502 106.05889130]
[178.13111877 99.54389191]
[163.18730164 100.84095764]
[149.43531799 111.66855621]
[132.80461121 103.87986755]
[117.89744568 105.54616547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[15 46]
[16 45]
[17 44]
[19 41]
[20 40]
[21 39]
[23 38]
[24 37]
[26 35]
[27 34]
[28 33]
[60 126]
[61 125]
[64 123]
[65 122]
[67 120]
[68 119]
[69 118]
[70 117]
[72 115]
[73 114]
[75 111]
[76 110]
[77 109]
[78 108]
[79 107]
[80 106]
[82 104]
[83 103]
[84 102]
[85 101]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
