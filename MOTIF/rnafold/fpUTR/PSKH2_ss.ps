%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUAAAGGGCGGAGGAACGGGGCUGGCUGCUUCCCGAGUCCCCAGGUCCCGCGAGCGGCGGGCGUGUUGCGGGU\
) } def
/len { sequence length } bind def

/coor [
[163.59550476 186.17430115]
[153.88796997 188.53575134]
[143.88778687 188.65512085]
[134.10661316 186.52169800]
[125.04589844 182.24014282]
[117.17123413 176.02536011]
[110.88838959 168.19175720]
[106.52246094 159.13723755]
[104.30097198 149.32312012]
[104.34209442 139.25056458]
[106.64833069 129.43495178]
[111.10617065 120.37960052]
[100.07030487 110.22037506]
[92.24819946 107.40239716]
[88.79938507 99.40599060]
[78.19278717 88.79938507]
[67.58618164 78.19278717]
[49.79677582 73.99217224]
[45.63011169 57.07371140]
[34.59425354 46.91448975]
[23.55839539 36.75526428]
[12.52253628 26.59604073]
[1.07627571 16.90155220]
[-10.76083183 7.68836212]
[-26.79446793 8.23795509]
[-37.11103821 -4.04813385]
[-33.79655075 -19.74506760]
[-19.39359665 -26.81150246]
[-4.95089102 -19.82667351]
[-1.54764128 -4.14874554]
[10.28946590 5.06444502]
[15.32694912 5.31288433]
[20.18132210 8.92946911]
[22.68176079 15.56018257]
[33.71762085 25.71940613]
[44.75347900 35.87863159]
[55.78933716 46.03785324]
[68.06542206 45.90023422]
[77.36128998 54.52631378]
[78.19278717 67.58618164]
[88.79938507 78.19278717]
[99.40599060 88.79938507]
[110.22953033 99.18451691]
[121.26538849 109.34374237]
[140.94332886 100.80882263]
[162.26858521 102.44715881]
[180.30859375 113.82260132]
[190.91740417 132.25341797]
[191.68841553 153.44433594]
[205.66227722 158.89695740]
[219.63615417 164.34956360]
[233.61001587 169.80218506]
[247.58387756 175.25480652]
[261.55773926 180.70742798]
[275.53161621 186.16004944]
[289.61517334 191.32270813]
[303.80242920 196.19319153]
[317.98971558 201.06369019]
[332.97613525 195.33776855]
[346.72302246 203.60836792]
[348.68490601 219.53102112]
[337.35681152 230.89120483]
[321.42868042 228.97436523]
[313.11920166 215.25094604]
[298.93194580 210.38046265]
[284.74468994 205.50996399]
[277.17959595 206.34156799]
[270.07897949 200.13391113]
[256.10513306 194.68128967]
[242.13125610 189.22866821]
[228.15739441 183.77606201]
[214.18353271 178.32344055]
[200.20965576 172.87081909]
[186.23579407 167.41819763]
[180.19151306 175.33436584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 44]
[13 43]
[15 42]
[16 41]
[17 40]
[19 37]
[20 36]
[21 35]
[22 34]
[23 31]
[24 30]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
