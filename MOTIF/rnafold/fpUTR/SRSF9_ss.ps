%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGACCCCUUCGCUUCCGCUCCGCGUUCCCACAAUGCAGUGCGGCUGAGCGCCUCGGAGCCCGCGGGGACGCUGCGGGGGGACCCGUGCUGAGGCGGCGGCGGCGACGUGGGCUGCGGCGGGCCCGCGGCGUCGGGCGGUGCGG\
) } def
/len { sequence length } bind def

/coor [
[98.25930023 200.98336792]
[97.29824066 186.01419067]
[96.33718872 171.04501343]
[95.37613678 156.07583618]
[94.41508484 141.10664368]
[90.82228088 134.58689880]
[93.59691620 125.80794525]
[92.95597076 110.82164764]
[87.03113556 97.04135895]
[76.59589386 86.26612091]
[61.43727112 81.73548126]
[58.14121628 67.21014404]
[47.70597839 56.43490601]
[37.27073669 45.65966797]
[26.83550072 34.88442612]
[16.40026093 24.10918617]
[5.96502352 13.33394623]
[-4.47021484 2.55870557]
[-19.62883759 -1.97193444]
[-22.92489433 -16.49726677]
[-33.36013412 -27.27250671]
[-47.08115387 -15.99880695]
[-63.91191101 -16.52044296]
[-75.55783844 -27.37413406]
[-77.06816864 -42.29837799]
[-89.89530945 -50.07426453]
[-102.72245026 -57.85015488]
[-115.54959106 -65.62604523]
[-128.37672424 -73.40193176]
[-141.20387268 -81.17781830]
[-154.03102112 -88.95370483]
[-166.85815430 -96.72959900]
[-161.73913574 -82.63010406]
[-164.21635437 -67.83607483]
[-173.64920044 -56.17325974]
[-187.59834290 -50.65768051]
[-202.45649719 -52.71567535]
[-214.38131714 -61.81504440]
[-220.28904724 -75.60267639]
[-218.65193176 -90.51306915]
[-209.89332581 -102.69037628]
[-196.27821350 -108.98552704]
[-181.32641602 -107.77020264]
[-192.21255493 -118.08970642]
[-203.09867859 -128.40921021]
[-213.98481750 -138.72871399]
[-225.19610596 -148.69400024]
[-236.72103882 -158.29483032]
[-248.24598694 -167.89564514]
[-259.77090454 -177.49647522]
[-271.29586792 -187.09730530]
[-287.33551025 -192.58963013]
[-286.49804688 -209.52288818]
[-269.99472046 -213.40573120]
[-261.69503784 -198.62223816]
[-250.17008972 -189.02140808]
[-238.64515686 -179.42059326]
[-227.12022400 -169.81976318]
[-215.59527588 -160.21893311]
[-212.00230408 -160.20310974]
[-208.24443054 -158.40116882]
[-205.18202209 -154.75814819]
[-203.66531372 -149.61485291]
[-192.77917480 -139.29534912]
[-181.89305115 -128.97584534]
[-171.00691223 -118.65633392]
[-159.08226013 -109.55673981]
[-146.25512695 -101.78085327]
[-133.42797852 -94.00495911]
[-120.60084534 -86.22907257]
[-107.77370453 -78.45318604]
[-94.94655609 -70.67729187]
[-82.11941528 -62.90140533]
[-69.29227448 -55.12551880]
[-55.80376816 -62.02989960]
[-39.35602188 -58.06013870]
[-33.72702026 -71.96389008]
[-28.09801292 -85.86763763]
[-22.46900749 -99.77139282]
[-16.84000397 -113.67514038]
[-19.64538956 -129.83255005]
[-6.88369036 -140.13163757]
[8.31695461 -133.97756958]
[10.31942272 -117.70114136]
[-2.93625188 -108.04613495]
[-8.56525707 -94.14238739]
[-14.19426155 -80.23863220]
[-19.82326698 -66.33488464]
[-25.45227242 -52.43113327]
[-22.58489227 -37.70774460]
[-12.14965439 -26.93250465]
[2.26257110 -23.17258263]
[6.30502558 -7.87653255]
[16.74026299 2.89870763]
[27.17550278 13.67394733]
[37.61074066 24.44918823]
[48.04597855 35.22443008]
[58.48121643 45.99966812]
[68.91645813 56.77490997]
[83.32868195 60.53483200]
[87.37113190 75.83087921]
[97.80637360 86.60612488]
[126.02210999 87.75614166]
[139.86491394 93.53339386]
[153.70773315 99.31064606]
[167.55053711 105.08789825]
[181.39334106 110.86515045]
[197.10891724 109.03988647]
[205.87429810 121.08219910]
[219.71710205 126.85945129]
[233.55992126 132.63670349]
[247.40272522 138.41395569]
[261.24554443 144.19120789]
[275.08834839 149.96846008]
[288.93115234 155.74571228]
[302.77395630 161.52296448]
[317.29418945 155.28289795]
[331.94277954 161.21537781]
[338.02899170 175.80076599]
[331.94195557 190.38581848]
[317.29302979 196.31747437]
[302.77316284 190.07658386]
[296.99670410 175.36576843]
[283.15390015 169.58851624]
[269.31109619 163.81126404]
[255.46827698 158.03401184]
[241.62547302 152.25675964]
[227.78266907 146.47950745]
[213.93984985 140.70225525]
[200.09704590 134.92500305]
[185.37161255 137.16349792]
[175.61608887 124.70795441]
[161.77328491 118.93070221]
[147.93048096 113.15345001]
[134.08766174 107.37619781]
[120.24485779 101.59895325]
[107.94227600 110.18070221]
[108.58322144 125.16699982]
[109.38426208 140.14559937]
[110.34531403 155.11477661]
[111.30637360 170.08395386]
[112.26742554 185.05313110]
[113.22847748 200.02232361]
[122.76647949 213.36242676]
[115.73719025 228.17868042]
[99.37173462 229.22937012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 140]
[5 139]
[7 138]
[8 137]
[9 102]
[10 101]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[20 91]
[21 90]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
[103 136]
[104 135]
[105 134]
[106 133]
[107 132]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
