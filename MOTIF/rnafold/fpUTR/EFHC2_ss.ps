%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGUGGGGGCCAAACAACACGGCCGGGAGGCGCCGCUGCCUGCCGGGCCCUCUCUUCUGGGACCCUGGAUUUUCGGACACUGAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[85.66552734 189.82287598]
[71.76786041 181.80824280]
[69.51145935 165.92465210]
[80.62725067 154.35665894]
[81.67359924 139.39318848]
[82.71994781 124.42973328]
[83.73770142 120.72863007]
[85.07454681 117.19548035]
[86.71600342 113.85255432]
[72.80825043 119.47164917]
[58.90048981 125.09075165]
[44.99273300 130.70985413]
[42.22226334 145.88641357]
[31.66984940 157.14030457]
[16.70272446 160.88044739]
[2.09684277 155.91337585]
[-7.48711061 143.82406616]
[-8.99093151 128.47018433]
[-1.93475497 114.75106812]
[11.42981720 107.04446411]
[26.83819962 107.80951691]
[39.37363434 116.80209351]
[53.28139114 111.18299103]
[67.18914795 105.56389618]
[81.09690857 99.94479370]
[84.97919464 85.45590973]
[75.74427032 73.63574982]
[61.15095901 67.52462006]
[59.41234589 52.73183441]
[50.17742157 40.91167450]
[40.94250107 29.09151268]
[31.70757866 17.27135086]
[15.99252033 15.59430027]
[6.13130188 3.24391866]
[7.97440863 -12.45252991]
[20.42835808 -22.18262100]
[36.10444260 -20.17366600]
[45.70232010 -7.61753988]
[43.52774048 8.03642941]
[52.76266098 19.85659027]
[61.99758530 31.67675209]
[71.23250580 43.49691391]
[85.16527557 48.76258087]
[87.56443024 64.40082550]
[96.79935455 76.22098541]
[111.77879333 77.00602722]
[122.19866943 66.21592712]
[132.61854553 55.42583084]
[142.84852600 44.45552444]
[152.88548279 33.30835342]
[162.92243958 22.16118050]
[159.56465149 7.01176071]
[165.78361511 -7.20457268]
[179.18800354 -15.02134991]
[194.62356567 -13.43285942]
[206.15499878 -3.04990983]
[209.34823608 12.13504410]
[202.97541809 26.28307724]
[189.48703003 33.95398331]
[174.06961060 32.19813919]
[164.03265381 43.34531403]
[153.99569702 54.49248505]
[151.81269836 61.72704697]
[143.40864563 65.84570312]
[132.98876953 76.63580322]
[122.56889343 87.42590332]
[134.65232849 78.53824615]
[149.57618713 80.04770660]
[159.63523865 91.17494202]
[159.63598633 106.17494202]
[149.57801819 117.30316925]
[134.65431213 118.81409454]
[122.56889343 109.92590332]
[132.98876953 120.71599579]
[143.40864563 131.50608826]
[153.82852173 142.29618835]
[164.24839783 153.08628845]
[179.60055542 160.27986145]
[176.93800354 177.02343750]
[160.11170959 179.10002136]
[153.45829773 163.50616455]
[143.03842163 152.71606445]
[132.61854553 141.92596436]
[122.19866943 131.13587952]
[111.77879333 120.34577942]
[97.68341064 125.47608185]
[96.63706207 140.43954468]
[95.59071350 155.40299988]
[104.98837280 168.40544128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 88]
[5 87]
[6 86]
[9 25]
[10 24]
[11 23]
[12 22]
[26 45]
[27 44]
[29 42]
[30 41]
[31 40]
[32 39]
[46 66]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
