%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGCAGGCGCGGCCGGAUUCCGGGCAGUGACGCGACGGCGGGCCGCGCGGCGCAUUUCCGCCUCUGGCGAAUGGCUCGUCUGUAGUGCACGCCGCGGGCCCAGCUGCGACCCCGGCCCCGCCCCCGGGACCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[45.56181335 328.29556274]
[41.65933609 331.17468262]
[36.73896027 345.34469604]
[31.81858826 359.51473999]
[26.89821625 373.68478394]
[30.51519394 389.68008423]
[18.28934860 400.60989380]
[2.79758120 395.23056030]
[-0.02350643 379.07589722]
[12.72817898 368.76440430]
[17.64855194 354.59436035]
[22.56892586 340.42434692]
[27.48929787 326.25430298]
[32.09275436 311.97814941]
[36.37701416 297.60299683]
[40.66127014 283.22784424]
[44.94552994 268.85269165]
[49.22978592 254.47753906]
[53.51404572 240.10237122]
[48.50524902 223.31935120]
[61.89176559 210.72946167]
[65.85469818 196.26243591]
[69.81762695 181.79539490]
[73.78056335 167.32835388]
[77.74349213 152.86131287]
[81.70642090 138.39427185]
[85.66934967 123.92723846]
[74.18566132 110.55936432]
[73.00856018 92.97557068]
[82.60803223 78.19634247]
[76.75218964 64.38658905]
[70.89635468 50.57684326]
[64.61489105 43.83150101]
[65.06768799 36.39359665]
[59.52096558 22.45681381]
[53.97424698 8.52003098]
[41.68233109 -1.44086087]
[44.16489410 -16.12711716]
[38.61817551 -30.06389999]
[33.07145691 -44.00068283]
[27.52473831 -57.93746567]
[21.82310486 -71.81159210]
[15.96726608 -85.62133789]
[10.11142731 -99.43109131]
[4.25558805 -113.24083710]
[-1.60025120 -127.05058289]
[-7.45609045 -140.86033630]
[-13.31192970 -154.67007446]
[-19.47398186 -168.34594727]
[-25.93918800 -181.88111877]
[-32.40439606 -195.41630554]
[-39.46613312 -208.65003967]
[-47.11038208 -221.55606079]
[-54.75463486 -234.46208191]
[-62.39888382 -247.36811829]
[-77.76951599 -251.04495239]
[-85.96696472 -264.55706787]
[-82.12782288 -279.88796997]
[-68.52978516 -287.94210815]
[-53.24032974 -283.94110107]
[-45.33041763 -270.25866699]
[-49.49285889 -255.01235962]
[-41.84860992 -242.10633850]
[-34.20436096 -229.20031738]
[-26.56011009 -216.29429626]
[-23.79379272 -215.49195862]
[-21.19299126 -213.50074768]
[-19.22931671 -210.38337708]
[-18.34067917 -206.37821960]
[-18.86921501 -201.88150024]
[-12.40400887 -188.34632874]
[-5.93880177 -174.81114197]
[-1.74043107 -172.38372803]
[0.93461883 -167.25422668]
[0.49781886 -160.52592468]
[6.35365820 -146.71617126]
[12.20949745 -132.90641785]
[18.06533623 -119.09667969]
[23.92117500 -105.28692627]
[29.77701378 -91.47718048]
[35.63285446 -77.66743469]
[41.18482208 -72.69721222]
[41.46152115 -63.48418427]
[47.00823975 -49.54740143]
[52.55495834 -35.61061859]
[58.10167694 -21.67383575]
[69.99685669 -12.70979691]
[67.91102600 2.97331166]
[73.45774841 16.91009521]
[79.00447083 30.84687614]
[84.70610046 44.72100449]
[90.56193542 58.53075027]
[96.41777802 72.34049988]
[107.73329926 73.20305634]
[117.76850128 78.50207520]
[124.86196899 87.36027527]
[127.83932495 98.31108856]
[142.50454712 101.46244049]
[157.16978455 104.61380005]
[171.83500671 107.76515961]
[186.50024414 110.91651917]
[190.75193787 109.35995483]
[194.85398865 109.29590607]
[198.34164429 110.48342133]
[200.88153076 112.55176544]
[202.30329895 115.05673218]
[216.62983704 119.50086212]
[230.95637512 123.94499969]
[245.28291321 128.38912964]
[259.14895630 120.80567932]
[274.29232788 125.32825470]
[281.72875977 139.27368164]
[277.04632568 154.36840820]
[263.02304077 161.65696716]
[247.97868347 156.81521606]
[240.83877563 142.71566772]
[226.51223755 138.27153015]
[212.18569946 133.82740784]
[197.85916138 129.38327026]
[183.34887695 125.58174896]
[168.68365479 122.43038940]
[154.01841736 119.27902985]
[139.35319519 116.12767029]
[124.68796539 112.97631073]
[114.47991180 123.83720398]
[100.13639069 127.89017487]
[96.17346191 142.35720825]
[92.21052551 156.82424927]
[88.24759674 171.29129028]
[84.28466797 185.75831604]
[80.32173920 200.22535706]
[76.35880280 214.69239807]
[82.06933594 226.31634521]
[78.41347504 238.32101440]
[67.88919830 244.38662720]
[63.60494232 258.76177979]
[59.32068634 273.13693237]
[55.03642654 287.51211548]
[50.75217056 301.88726807]
[46.46791077 316.26242065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[30 93]
[31 92]
[32 91]
[34 90]
[35 89]
[36 88]
[38 86]
[39 85]
[40 84]
[41 83]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[49 72]
[50 71]
[51 70]
[52 65]
[53 64]
[54 63]
[55 62]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
