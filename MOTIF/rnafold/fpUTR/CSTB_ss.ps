%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGUUCCGCCCGCGCGUCACGUGACCCCAGCGCCUACUUGGGCUGAGGAGCCGCCGCGUCCCCUCGCCGAGUCCCCUCGCCAGAUUCCCUCCGUCGCCGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[80.39006805 144.38365173]
[75.53540039 130.19096375]
[79.73406982 115.79058075]
[91.45690918 106.43058777]
[76.58763885 104.45450592]
[61.71837616 102.47841644]
[46.84910965 100.50233459]
[31.97984123 98.52624512]
[17.11057472 96.55016327]
[2.16872597 95.23064423]
[-12.81672955 94.57023621]
[-27.80218506 93.90983582]
[-42.78763962 93.24943542]
[-57.77309418 93.90983582]
[-72.64236450 95.88592529]
[-87.51162720 97.86200714]
[-102.38089752 99.83808899]
[-117.10855865 102.68341064]
[-131.64385986 106.38816071]
[-146.17915344 110.09291077]
[-157.53179932 121.92715454]
[-173.39013672 117.75036621]
[-177.44044495 101.85926819]
[-165.51612854 90.60125732]
[-149.88389587 95.55760956]
[-135.34860229 91.85286713]
[-120.81330872 88.14811707]
[-119.26605225 85.63024139]
[-116.54888153 83.62637329]
[-112.87312317 82.61691284]
[-108.63155365 82.98831177]
[-104.35697937 84.96882629]
[-89.48771667 82.99273682]
[-74.61844635 81.01665497]
[-59.74917984 79.04057312]
[-70.24861145 68.32787323]
[-70.36841583 53.32835007]
[-60.04143524 42.44931030]
[-45.05599594 41.78850555]
[-33.81151199 51.71632004]
[-32.61056519 66.66816711]
[-42.12723923 78.26397705]
[-27.14178276 78.92438507]
[-12.15632725 79.58478546]
[2.82912755 80.24518585]
[5.74042225 77.99947357]
[9.93603325 77.14274597]
[14.70656872 78.28658295]
[19.08666039 81.68090057]
[33.95592499 83.65698242]
[48.82519150 85.63306427]
[63.69445801 87.60915375]
[78.56372833 89.58523560]
[93.43299103 91.56132507]
[108.43137360 91.78151703]
[123.35224915 90.24279785]
[136.28590393 81.13066864]
[149.73974609 87.52156830]
[164.66061401 85.98284149]
[179.58148193 84.44411469]
[186.59332275 64.86975861]
[202.25772095 51.30376816]
[222.49548340 47.18781662]
[242.08091736 53.51444244]
[255.99125671 68.58878326]
[270.28408813 64.03737640]
[281.08593750 52.47750854]
[295.56088257 55.98823547]
[309.85369873 51.43683243]
[317.21987915 45.76521301]
[324.63333130 46.96828079]
[339.05361938 42.83842468]
[353.47387695 38.70856857]
[364.47424316 26.54615021]
[380.44833374 30.25559235]
[384.96340942 46.02093887]
[373.37472534 57.62415314]
[357.60372925 53.12884140]
[343.18347168 57.25869751]
[328.76318359 61.38855362]
[314.40509033 65.72965240]
[300.11227417 70.28105927]
[290.33273315 81.51537323]
[274.83547974 78.33020020]
[260.54266357 82.88159943]
[260.57296753 92.87146759]
[258.14633179 102.57686615]
[253.40449524 111.40203094]
[246.63154602 118.80347443]
[238.23689270 124.32344055]
[228.73051453 127.61820221]
[218.69198608 128.47949219]
[208.73518372 126.84761047]
[199.47067261 122.81555176]
[191.46832275 116.62368774]
[185.22222900 108.64549255]
[181.12020874 99.36499023]
[166.19934082 100.90370941]
[151.27847290 102.44243622]
[139.41204834 111.44450378]
[124.89096832 105.16366577]
[109.97010040 106.70238495]
[121.41246796 116.40146637]
[125.18729401 130.91873169]
[119.91874695 144.96302795]
[107.52707672 153.41563416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[10 45]
[11 44]
[12 43]
[13 42]
[14 35]
[15 34]
[16 33]
[17 32]
[18 27]
[19 26]
[20 25]
[55 102]
[56 101]
[58 99]
[59 98]
[60 97]
[65 85]
[66 84]
[68 82]
[69 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
