%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUUUUUUUUUUUGGGGUCCGGAAUAGGCGGAGCUUCCGGUUCCGGUGGGGGCCGUCCCUGGCGGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[133.39477539 150.79747009]
[132.33563232 165.76004028]
[127.41729736 179.93077087]
[118.97901154 192.33219910]
[107.60286713 202.10887146]
[94.07357025 208.58639526]
[79.32437897 211.31793213]
[64.37268829 210.11509705]
[50.24985504 205.06082153]
[37.93007278 196.50378418]
[28.26315498 185.03422546]
[21.91592598 171.44332886]
[19.32621574 156.66856384]
[20.67265892 141.72912598]
[25.86238098 127.65550232]
[34.53739548 115.41850281]
[46.09930038 105.86222839]
[59.75056076 99.64587402]
[74.54951477 97.19823456]
[89.47485352 98.68804169]
[80.26165771 86.85093689]
[65.67960358 80.71300507]
[63.96816635 65.91705322]
[54.75497437 54.07994461]
[45.54178619 42.24283600]
[36.32859421 30.40572929]
[20.69596481 30.01212311]
[9.00796223 19.62344742]
[6.78330231 4.14491606]
[15.07240200 -9.11497974]
[29.96140289 -13.89532375]
[44.42017365 -7.93898296]
[51.62172318 5.94163942]
[48.16570282 21.19253922]
[57.37889099 33.02964783]
[66.59208679 44.86675262]
[75.80527496 56.70386124]
[89.72834015 61.99512100]
[92.09877014 77.63774109]
[101.31195831 89.47485352]
[114.64878845 96.33989716]
[129.63597107 96.95977020]
[144.62316895 97.57964325]
[159.61035156 98.19952393]
[164.74690247 95.46881104]
[169.87261963 95.22818756]
[173.96464539 96.99794006]
[176.37936401 99.93865967]
[191.17478943 102.40757751]
[205.97021484 104.87649536]
[220.85568237 99.51615906]
[232.13584900 109.24276733]
[246.93127441 111.71168518]
[261.72668457 114.18061066]
[276.52212524 116.64952850]
[291.31753540 119.11844635]
[305.15710449 111.00392151]
[320.07778931 116.89907074]
[324.63369751 132.28163147]
[315.32995605 145.35142517]
[299.30355835 146.08242798]
[288.84860229 133.91386414]
[274.05319214 131.44494629]
[259.25778198 128.97602844]
[244.46235657 126.50711060]
[229.66693115 124.03818512]
[215.83972168 129.57511902]
[203.50129700 119.67191315]
[188.70587158 117.20299530]
[173.91044617 114.73407745]
[158.99047852 113.18670654]
[144.00329590 112.56683350]
[129.01609802 111.94696045]
[114.02891541 111.32707977]
[123.91443634 122.60877228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 40]
[21 39]
[23 37]
[24 36]
[25 35]
[26 34]
[41 74]
[42 73]
[43 72]
[44 71]
[48 70]
[49 69]
[50 68]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
