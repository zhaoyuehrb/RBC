%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCAGACCAGGCCCGGUGGAGAAUUAGGUGCUGCUGGGAGCUCCUGCCUCCCACAGGAUUCCAGCUGCAGGGAGCCUCAGGGACUCUGGGCCGCACGGAGUUGGGGGCAUUCCCCAGAGAGCGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[163.62750244 260.78112793]
[152.94787598 271.31420898]
[139.23042297 277.38311768]
[124.25276184 278.20138550]
[109.95581055 273.66296387]
[98.19226837 264.35604858]
[90.48655701 251.48661804]
[87.83724213 236.72242737]
[90.58763885 221.97674561]
[98.38132477 209.16041565]
[110.20834351 199.93426514]
[124.53605652 195.49392700]
[139.50776672 196.41477966]
[153.18643188 202.57965088]
[145.43220520 189.73941040]
[137.67796326 176.89916992]
[129.92373657 164.05892944]
[122.16949463 151.21868896]
[114.41526031 138.37843323]
[106.66102600 125.53819275]
[85.96735382 122.35293579]
[74.10489655 105.10021973]
[78.53908539 84.63777161]
[69.32589722 72.80066681]
[60.11270523 60.96355820]
[44.67726517 58.86952972]
[35.50240707 46.73377609]
[37.59386444 32.03134918]
[28.38067245 20.19424057]
[14.85521793 20.06628418]
[4.04870844 12.26040268]
[-0.19705045 -0.17021695]
[3.46590471 -12.58150578]
[-5.46513748 -24.63291550]
[-14.39618015 -36.68432617]
[-28.82920074 -43.16495132]
[-30.19069481 -57.99720001]
[-39.12173843 -70.04860687]
[-48.05278015 -82.10002136]
[-56.98382187 -94.15142822]
[-65.91486359 -106.20284271]
[-74.84590912 -118.25424957]
[-83.77694702 -130.30566406]
[-89.81839752 -133.35275269]
[-92.88368988 -138.28097534]
[-92.82917786 -143.14373779]
[-101.18113708 -155.60345459]
[-109.53308868 -168.06318665]
[-117.88504791 -180.52291870]
[-126.23700714 -192.98265076]
[-141.80253601 -194.48211670]
[-152.72564697 -205.67227173]
[-153.84878540 -221.26947021]
[-144.64163208 -233.90917969]
[-129.45153809 -237.62333679]
[-115.45079041 -230.65820312]
[-109.25010681 -216.30252075]
[-113.77727509 -201.33459473]
[-105.42532349 -188.87487793]
[-97.07336426 -176.41514587]
[-88.72140503 -163.95541382]
[-80.36944580 -151.49569702]
[-71.72554016 -139.23670959]
[-62.79449463 -127.18529510]
[-53.86345291 -115.13388062]
[-44.93241119 -103.08247375]
[-36.00136948 -91.03105927]
[-27.07032776 -78.97965240]
[-18.13928413 -66.92824554]
[-4.34507275 -61.30961609]
[-2.34476972 -45.61536789]
[6.58627272 -33.56395721]
[15.51731491 -21.51254845]
[32.20273972 -19.78450584]
[42.71904755 -6.28639126]
[40.21778107 10.98104954]
[49.43096924 22.81815720]
[64.19692993 24.39992905]
[73.70903778 36.27319336]
[71.94981384 51.75036621]
[81.16300201 63.58747482]
[90.37619781 75.42458344]
[99.00207520 73.62628174]
[107.73918915 74.76760864]
[115.61368561 78.72133636]
[121.74787903 85.04679108]
[125.45805359 93.03893280]
[126.33065796 101.80696106]
[124.26844788 110.37358093]
[119.50126648 117.78395844]
[127.25550079 130.62420654]
[135.00973511 143.46444702]
[142.76397705 156.30468750]
[150.51820374 169.14492798]
[158.27244568 181.98516846]
[166.02668762 194.82542419]
[175.92240906 206.09814453]
[187.64988708 215.45050049]
[199.48699951 224.66368103]
[211.43208313 233.73643494]
[223.37718201 242.80918884]
[239.45382690 237.70080566]
[255.26220703 243.09431458]
[264.67547607 256.69140625]
[264.16925049 273.05554199]
[276.32531738 281.84362793]
[288.48135376 290.63171387]
[300.63739014 299.41979980]
[312.79345703 308.20791626]
[324.94949341 316.99600220]
[340.95358276 315.87875366]
[351.69891357 327.79168701]
[348.94256592 343.59619141]
[334.79895020 351.16839600]
[320.11788940 344.69958496]
[316.16140747 329.15203857]
[304.00537109 320.36395264]
[291.84930420 311.57586670]
[279.69326782 302.78778076]
[267.53720093 293.99969482]
[255.38116455 285.21157837]
[243.08135986 290.53744507]
[229.65109253 289.05426025]
[218.63420105 281.04516602]
[212.99128723 268.52941895]
[214.30442810 254.75427246]
[202.35934448 245.68151855]
[190.41424561 236.60877991]
[183.11535645 235.05339050]
[178.29754639 227.17796326]
[166.57006836 217.82562256]
[170.91049194 232.18391418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 96]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[23 82]
[24 81]
[25 80]
[28 77]
[29 76]
[33 73]
[34 72]
[35 71]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[97 131]
[98 130]
[99 128]
[100 127]
[101 126]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
