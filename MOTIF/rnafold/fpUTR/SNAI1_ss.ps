%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAUUGCGCCGCGGCACGGCCUAGCGAGUGGUUCUUCUGCGCUACUGCUGCGCGAAUCGGCGACCCCAGUGCCUCGACCACU\
) } def
/len { sequence length } bind def

/coor [
[153.68650818 329.24710083]
[156.22045898 314.28237915]
[163.99255371 301.24554443]
[175.95166016 291.89971924]
[171.58081055 277.55065918]
[167.20996094 263.20159912]
[162.83912659 248.85253906]
[158.46827698 234.50346375]
[153.04965210 220.51638794]
[146.61283875 206.96768188]
[140.17602539 193.41896057]
[133.73922729 179.87025452]
[127.30241394 166.32154846]
[109.84580994 161.43879700]
[101.13845825 145.18482971]
[106.93820190 127.35218048]
[99.51836395 114.31584167]
[87.55121613 107.08542633]
[87.44529724 93.10398865]
[80.02545929 80.06765747]
[72.60562897 67.03132629]
[65.18579102 53.99499130]
[49.13316727 45.20560455]
[49.64914322 27.76825333]
[41.75266266 15.01499653]
[33.85617828 2.26173973]
[25.95969582 -10.49151707]
[18.06321335 -23.24477386]
[9.93241405 -35.84993362]
[1.57007229 -48.30269623]
[-13.94079781 -48.74148178]
[-26.21086502 -58.24016953]
[-30.52203751 -73.14632416]
[-25.21658134 -87.72821808]
[-12.33455276 -96.37882996]
[3.17064500 -95.77180481]
[15.33694744 -86.14057159]
[19.48616219 -71.18852234]
[14.02283287 -56.66503906]
[22.38517380 -44.21227646]
[28.88376617 -40.32219696]
[30.81647110 -31.14125633]
[38.71295547 -18.38800049]
[46.60943604 -5.63474274]
[54.50592041 7.11851406]
[62.40240097 19.87177086]
[74.23654938 23.02535439]
[80.87826538 33.79291916]
[78.22212219 46.57515335]
[85.64196014 59.61148453]
[93.06179810 72.64781952]
[100.48163605 85.68415833]
[112.44878387 92.91457367]
[112.55470276 106.89601135]
[119.97454071 119.93234253]
[132.11552429 120.83883667]
[142.14566040 127.52312469]
[147.54577637 138.16313171]
[147.03027344 149.96238708]
[140.85112000 159.88473511]
[147.28793335 173.43345642]
[153.72474670 186.98216248]
[160.16154480 200.53086853]
[166.59835815 214.07957458]
[170.76853943 216.67965698]
[173.46508789 220.19389343]
[174.58218384 223.98545837]
[174.25434875 227.45686340]
[172.81733704 230.13261414]
[177.18818665 244.48168945]
[181.55903625 258.83074951]
[185.92988586 273.17980957]
[190.30072021 287.52890015]
[205.43917847 288.62054443]
[219.15933228 295.11065674]
[229.60566711 306.12149048]
[235.36538696 320.16394043]
[235.65954590 335.33883667]
[230.44834900 349.59396362]
[220.43658447 361.00137329]
[206.97825623 368.01831055]
[191.89347839 369.69583130]
[177.22236633 365.80703735]
[164.94903564 356.87786865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[16 55]
[17 54]
[19 52]
[20 51]
[21 50]
[22 49]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
