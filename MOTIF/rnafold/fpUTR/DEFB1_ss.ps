%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUUCAGUUCCGUCGACGAGGUUGUGCAAUCCACCAGUCUUAUAAAUACAGUGACGCUCCAGCCUCUGGAAGCCUCUGUCAGCUCAGCCUCCAAAGGAGCCAGCGUCUCCCCAGUUCCUGAAAUCCUGGGUGUUGCCUGCCAGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[25.24429131 495.84942627]
[21.21213150 510.43014526]
[12.86994362 523.05010986]
[1.03500962 532.47290039]
[-13.13320351 537.77545166]
[-28.24663925 538.43823242]
[-42.82463455 534.39630127]
[-55.43899155 526.04565430]
[-64.85388184 514.20440674]
[-70.14692688 500.03262329]
[-70.79956818 484.91876221]
[-66.74787140 470.34347534]
[-58.38877869 457.73471069]
[-46.54122543 448.32775879]
[-32.36592102 443.04421997]
[-17.25161171 442.40170288]
[-13.24387074 427.94702148]
[-9.23613071 413.49234009]
[-5.22839022 399.03762817]
[-10.91967487 388.31771851]
[-7.65098286 376.21258545]
[3.34472537 369.38995361]
[7.65230989 355.02175903]
[11.95989418 340.65356445]
[4.30684519 330.24072266]
[4.06509495 317.12524414]
[11.54830551 306.11480713]
[24.19721031 301.37530518]
[28.80277443 287.09985352]
[33.40834045 272.82440186]
[38.01390457 258.54891968]
[42.61946869 244.27346802]
[35.18470001 233.70364380]
[35.21585464 220.58596802]
[42.92650223 209.73361206]
[55.67127228 205.25828552]
[60.57282257 191.08172607]
[65.47437286 176.90516663]
[70.37592316 162.72860718]
[59.68589020 156.45561218]
[50.28279495 148.38040161]
[42.46681213 138.76075745]
[36.48744965 127.90375519]
[32.53557968 116.15599060]
[30.73736572 103.89248657]
[31.15020752 91.50471497]
[33.76092529 79.38813782]
[38.48617554 67.92955780]
[45.17512131 57.49474716]
[53.61423111 48.41682434]
[63.53409958 40.98557663]
[74.61806488 35.43823624]
[86.51229095 31.95188904]
[98.83708191 30.63782310]
[111.19898987 31.53799248]
[115.20673370 17.08330345]
[119.21446991 2.62861562]
[123.22221375 -11.82607269]
[127.22994995 -26.28076172]
[131.23768616 -40.73545074]
[120.58989716 -51.71596146]
[116.89231110 -66.45450592]
[121.04085541 -80.96849823]
[131.82508850 -91.38753510]
[146.27917480 -94.98544312]
[150.28691101 -109.44013214]
[154.29464722 -123.89482117]
[150.52580261 -139.26057434]
[161.38232422 -149.45788574]
[165.39006042 -163.91256714]
[169.39781189 -178.36726379]
[173.40554810 -192.82194519]
[169.63670349 -208.18769836]
[180.49322510 -218.38500977]
[184.50096130 -232.83970642]
[183.15277100 -238.01676941]
[183.89381409 -242.70751953]
[186.17500305 -246.18571472]
[189.23590088 -248.05610657]
[194.13745117 -262.23266602]
[187.00283813 -276.33489990]
[192.00900269 -291.32534790]
[206.18586731 -298.31048584]
[221.12257385 -293.14611816]
[227.95741272 -278.89617920]
[222.63540649 -264.01492310]
[208.31401062 -257.33111572]
[203.41246033 -243.15455627]
[198.95564270 -228.83195496]
[194.94790649 -214.37727356]
[199.00341797 -200.04541016]
[187.86022949 -188.81420898]
[183.85249329 -174.35952759]
[179.84475708 -159.90483093]
[175.83702087 -145.45014954]
[179.89253235 -131.11828613]
[168.74934387 -119.88707733]
[164.74160767 -105.43239594]
[160.73385620 -90.97770691]
[171.27159119 -80.45050812]
[175.15095520 -65.96580505]
[171.23336792 -51.38777924]
[160.47425842 -40.65753174]
[145.69238281 -36.72771072]
[141.68464661 -22.27302170]
[137.67689514 -7.81833267]
[133.66915894 6.63635588]
[129.66142273 21.09104347]
[125.65367889 35.54573441]
[141.15313721 44.15303802]
[153.96473694 56.40790558]
[163.25170898 71.50992584]
[168.40750122 88.47273254]
[169.09535217 106.18842316]
[183.80331421 109.13391113]
[198.51127625 112.07939148]
[215.22932434 109.26103210]
[222.56555176 124.54553223]
[209.90925598 135.82623291]
[195.56579590 126.78735352]
[180.85783386 123.84187317]
[166.14987183 120.89638519]
[158.98828125 136.50816345]
[148.21057129 149.88191223]
[134.47743225 160.19776917]
[118.63073730 166.82334900]
[101.64193726 169.35249329]
[84.55248260 167.63015747]
[79.65093231 181.80671692]
[74.74938202 195.98327637]
[69.84783173 210.15983582]
[77.78535461 225.71403503]
[72.15918732 241.88902283]
[56.89492798 248.87902832]
[52.28936386 263.15447998]
[47.68379974 277.42996216]
[43.07823563 291.70541382]
[38.47267151 305.98086548]
[46.73206329 321.36657715]
[41.44361877 337.65512085]
[26.32807922 344.96115112]
[22.02049446 359.32934570]
[17.71290970 373.69754028]
[22.38649368 391.47778320]
[9.22629833 403.04537964]
[5.21855831 417.50006104]
[1.21081781 431.95474243]
[-2.79692245 446.40945435]
[9.82861233 454.74316406]
[19.25936127 466.57177734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 148]
[17 147]
[18 146]
[19 145]
[22 143]
[23 142]
[24 141]
[28 138]
[29 137]
[30 136]
[31 135]
[32 134]
[36 131]
[37 130]
[38 129]
[39 128]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[65 99]
[66 98]
[67 97]
[69 95]
[70 94]
[71 93]
[72 92]
[74 90]
[75 89]
[79 88]
[80 87]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
