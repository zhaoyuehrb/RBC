%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGGGGAGGGCGGGACUUCCUGCGCGGGGGCCCGAGCCGCUCAGUCUCCCUGCUCUCCGUGGUCCCGGCUCGCGUGUAGCGGCGGCGGCGGCGUCUCCGUGAGGAGGCGCGCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[4.39542246 120.13185883]
[-10.48036385 118.20546722]
[-19.82393456 106.47100067]
[-18.36950874 91.54167938]
[-6.93781519 81.83161163]
[-21.62064934 78.76332855]
[-36.71170807 83.51417542]
[-47.58718872 73.33708191]
[-62.27002335 70.26880646]
[-76.95285797 67.20052338]
[-91.63569641 64.13224030]
[-106.31852722 61.06396103]
[-121.00136566 57.99567795]
[-135.68420410 54.92739868]
[-150.36703491 51.85911560]
[-165.04986572 48.79083633]
[-179.73271179 45.72255325]
[-188.55160522 56.66306305]
[-201.17498779 62.68435669]
[-215.09446716 62.65357590]
[-227.57148743 56.63421631]
[-236.17611694 45.86231995]
[-239.26025391 32.49314117]
[-253.85922241 29.04782486]
[-268.45819092 25.60250854]
[-283.66656494 29.96321678]
[-294.27639771 19.50947952]
[-308.87536621 16.06416321]
[-323.47433472 12.61884689]
[-338.07330322 9.17353058]
[-349.10025024 19.96286201]
[-364.21447754 23.05541420]
[-378.59307861 17.46436691]
[-387.64785767 4.97380257]
[-388.48953247 -10.43058586]
[-380.84945679 -23.83331299]
[-367.16561890 -30.95761681]
[-351.80441284 -29.53016090]
[-339.66760254 -20.00643730]
[-334.62799072 -5.42543459]
[-320.02902222 -1.98011863]
[-305.43005371 1.46519756]
[-290.83108521 4.91051388]
[-276.66693115 0.30337328]
[-265.01287842 11.00354290]
[-250.41390991 14.44885826]
[-235.81494141 17.89417458]
[-225.07937622 5.89027739]
[-209.67701721 0.87702096]
[-193.74977112 4.30132771]
[-181.63053894 15.32772160]
[-176.66442871 31.03972054]
[-161.98159790 34.10800171]
[-147.29875183 37.17628098]
[-132.61592102 40.24456406]
[-117.93308258 43.31284332]
[-103.25025177 46.38112640]
[-88.56741333 49.44940567]
[-73.88458252 52.51768494]
[-59.20174408 55.58596802]
[-44.51890945 58.65424728]
[-30.47806549 53.68393707]
[-18.55237007 64.08049011]
[-3.86953402 67.14877319]
[11.00630569 69.07474518]
[25.98641777 69.84693146]
[40.96652985 70.61911011]
[55.94664001 71.39128876]
[70.92675018 72.16347504]
[85.90686035 72.93565369]
[100.50582886 69.49034119]
[113.56010437 62.10211945]
[119.57574463 55.06737900]
[127.04699707 54.69668198]
[140.28718567 47.64702988]
[153.52735901 40.59737778]
[159.72213745 33.71986008]
[167.20045471 33.54165268]
[180.61776733 26.83524704]
[194.03506470 20.12884140]
[202.61624146 6.15402460]
[218.99981689 6.86855125]
[226.33177185 21.53737640]
[217.06962585 35.07047272]
[200.74147034 33.54614639]
[187.32417297 40.25255203]
[173.90686035 46.95896149]
[160.57701111 53.83755875]
[147.33683777 60.88721085]
[134.09664917 67.93685913]
[120.94832611 75.15639496]
[107.89405060 82.54461670]
[114.87604523 91.43314362]
[115.09806824 101.53140259]
[127.32349396 110.22272491]
[139.54891968 118.91403961]
[151.77433777 127.60535431]
[163.99977112 136.29667664]
[176.22518921 144.98799133]
[188.45062256 153.67930603]
[200.67604065 162.37062073]
[217.04426575 163.37719727]
[224.11346436 178.17445374]
[214.61146545 191.54022217]
[198.31309509 189.72496033]
[191.98472595 174.59605408]
[179.75930786 165.90472412]
[167.53387451 157.21340942]
[155.30845642 148.52209473]
[143.08302307 139.83078003]
[130.85760498 131.13946533]
[118.63217926 122.44815063]
[106.40675354 113.75682831]
[86.46009064 110.55266571]
[85.13468170 87.91576385]
[70.15457153 87.14358521]
[55.17445755 86.37140656]
[40.19434738 85.59922028]
[25.21423531 84.82704163]
[10.23412514 84.05486298]
[18.81626129 96.35717773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 64]
[6 63]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[16 53]
[17 52]
[23 47]
[24 46]
[25 45]
[27 43]
[28 42]
[29 41]
[30 40]
[65 120]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
[71 92]
[72 91]
[74 90]
[75 89]
[76 88]
[78 87]
[79 86]
[80 85]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
