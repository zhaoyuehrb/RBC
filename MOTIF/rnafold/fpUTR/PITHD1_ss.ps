%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUUUACGACGCGGCAGGCGCGGCGCGCUUAGUUGCCGGAGCUGAACGGCGCGGAGCUGGUCUGAGGCGAGCCGAGCCGAGCGAGCGCGGCGGUGGGGCCGAGAGGACGCGCAGGUGGCGGCGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[99.09454346 289.68936157]
[86.31079102 298.10565186]
[71.07894897 299.60549927]
[56.89917374 293.84417725]
[47.02988434 282.14566040]
[43.73896408 267.19812012]
[47.78264618 252.43644714]
[58.23171997 241.25273132]
[72.68506622 236.21691895]
[74.83597565 221.37193298]
[76.98687744 206.52694702]
[79.13778687 191.68196106]
[81.28868866 176.83697510]
[83.43959808 161.99198914]
[77.60726929 148.28677368]
[87.24346924 135.73869324]
[89.39437103 120.89370728]
[77.69819641 107.18721008]
[79.19026947 89.23052979]
[68.77614594 78.43488312]
[58.36201859 67.63923645]
[43.21229553 63.07892990]
[39.94467926 48.54717255]
[29.53055763 37.75152206]
[19.11643410 26.95587540]
[8.70230961 16.16022682]
[-6.44741535 11.59992027]
[-9.71502972 -2.93183732]
[-20.12915421 -13.72748566]
[-30.54327774 -24.52313423]
[-40.95740128 -35.31878281]
[-51.37152481 -46.11442947]
[-64.89903259 -43.19087601]
[-77.99305725 -47.32530975]
[-87.24149323 -57.32748795]
[-90.29044342 -70.49315643]
[-86.44269562 -83.33460999]
[-96.59495544 -94.37687683]
[-106.74720764 -105.41914368]
[-116.89946747 -116.46141052]
[-127.05172729 -127.50367737]
[-142.60685730 -128.32572937]
[-152.74537659 -139.66877747]
[-151.86582947 -154.49314880]
[-162.01808167 -165.53541565]
[-172.17034912 -176.57768250]
[-187.78265381 -175.68885803]
[-200.28269958 -185.08476257]
[-203.76834106 -200.32891846]
[-196.59378052 -214.22351074]
[-182.14660645 -220.20793152]
[-167.24835205 -215.45652771]
[-158.93350220 -202.21276855]
[-161.12808228 -186.72993469]
[-150.97581482 -175.68766785]
[-140.82356262 -164.64540100]
[-125.97763824 -164.27902222]
[-115.52450562 -153.22521973]
[-116.00945282 -137.65592957]
[-105.85720062 -126.61367035]
[-95.70494080 -115.57140350]
[-85.55268860 -104.52912903]
[-75.40042877 -93.48686218]
[-59.21032715 -95.90810394]
[-44.60422134 -88.15623474]
[-37.39249039 -73.09225464]
[-40.57587433 -56.52855682]
[-30.16175270 -45.73290634]
[-19.74762917 -34.93725967]
[-9.33350468 -24.14160919]
[1.08061886 -13.34596062]
[15.48545647 -9.55783081]
[19.49795723 5.74610329]
[29.91208267 16.54175186]
[40.32620621 27.33740044]
[50.74032974 38.13304901]
[65.14516449 41.92117691]
[69.15766907 57.22511292]
[79.57179260 68.02075958]
[89.98591614 78.81640625]
[103.65365601 76.85530090]
[116.05264282 82.93134308]
[122.87723541 94.93459320]
[137.78997803 96.55020905]
[150.03176880 86.91816711]
[165.13238525 88.76906586]
[174.23963928 100.49909973]
[189.15237427 102.11472321]
[204.06510925 103.73033905]
[218.97784424 105.34596252]
[233.89059448 106.96157837]
[254.07901001 95.59415436]
[272.16488647 108.88462830]
[287.16378784 108.70476532]
[302.16271973 108.52490997]
[317.16165161 108.34505463]
[332.92715454 102.10923004]
[343.28359985 115.53235626]
[333.25198364 129.19996643]
[317.34149170 123.34397125]
[302.34259033 123.52383423]
[287.34365845 123.70368958]
[272.34472656 123.88354492]
[268.68450928 130.26882935]
[262.94775391 134.98846436]
[255.84667969 137.39363098]
[248.28533936 137.12681580]
[241.24475098 134.17398071]
[235.65553284 128.87271118]
[232.27496338 121.87432098]
[217.36222839 120.25869751]
[202.44949341 118.64308167]
[187.53675842 117.02745819]
[172.62400818 115.41184235]
[161.21594238 124.91928101]
[146.06929016 123.49325562]
[136.17436218 111.46295166]
[121.26161957 109.84732819]
[114.35677338 118.51781464]
[104.23935699 123.04461670]
[102.08845520 137.88960266]
[107.76693726 152.65663147]
[98.28458405 164.14289856]
[96.13367462 178.98788452]
[93.98277283 193.83287048]
[91.83186340 208.67785645]
[89.68096161 223.52284241]
[87.53005219 238.36782837]
[99.95974731 247.29875183]
[106.80490875 260.98825073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
[16 121]
[17 120]
[19 80]
[20 79]
[21 78]
[23 76]
[24 75]
[25 74]
[26 73]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[44 56]
[45 55]
[46 54]
[83 118]
[84 117]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
