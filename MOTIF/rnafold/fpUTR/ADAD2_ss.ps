%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCACCACGCUUCGUCCGCGUGCUCCCCACGUGAAGGCACCCGCCCUGCGCGUGUGAAAGGGCGAGAGCAGCGCGAGAUAGGGCCUAGCGCCUCAGAUCUUCGUUGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[154.13539124 275.51531982]
[146.35017395 270.96188354]
[139.64791870 264.91375732]
[134.31138611 257.62142944]
[130.56674194 249.38786316]
[128.57388306 240.55613708]
[128.41961670 231.49499512]
[130.11393738 222.58348083]
[133.58943176 214.19515991]
[138.70394897 206.68232727]
[145.24639893 200.36131287]
[138.16415405 187.13853455]
[131.08192444 173.91575623]
[123.99967957 160.69297791]
[111.16992950 153.12681580]
[111.47475433 137.30854797]
[104.39251709 124.08576965]
[97.31027222 110.86299133]
[90.04808807 97.73818207]
[82.60730743 84.71379089]
[75.16653442 71.68939972]
[67.72575378 58.66500092]
[60.10777664 45.74345398]
[52.31401825 32.92716217]
[44.52025986 20.11087227]
[36.72650146 7.29458141]
[28.93274117 -5.52170944]
[20.62049484 -18.00796509]
[11.80371571 -30.14321899]
[2.98693728 -42.27847290]
[-6.79367590 -53.65122986]
[-17.47246742 -64.18515015]
[-28.15126038 -74.71906281]
[-38.83005142 -85.25298309]
[-49.50884247 -95.78689575]
[-66.93051147 -95.31081390]
[-79.11486053 -107.29771423]
[-78.93052673 -124.05297852]
[-89.89306641 -134.29127502]
[-100.85560608 -144.52957153]
[-116.94506073 -147.70155334]
[-121.98596954 -163.30673218]
[-110.79268646 -175.29180908]
[-94.87989044 -171.32759094]
[-90.61730957 -155.49211121]
[-79.65476990 -145.25381470]
[-68.69223022 -135.01551819]
[-55.92201614 -137.24795532]
[-44.03874969 -131.59504700]
[-37.52281570 -119.93781281]
[-38.97492599 -106.46569061]
[-28.29613495 -95.93177032]
[-17.61734390 -85.39785767]
[-6.93855143 -74.86393738]
[3.74024081 -64.33002472]
[5.61779118 -79.21205139]
[17.31245232 -88.60540009]
[32.24915695 -87.22885132]
[42.03006744 -75.85635376]
[41.15608215 -60.88183212]
[30.11857986 -50.72439575]
[15.12219238 -51.09525299]
[23.93897057 -38.95999908]
[32.75574875 -26.82474327]
[36.30254745 -25.94093513]
[39.56467819 -23.21261787]
[41.64089584 -18.80959320]
[41.74903107 -13.31546879]
[49.54279327 -0.49917775]
[57.33655167 12.31711292]
[65.13031006 25.13340378]
[72.92407227 37.94969559]
[79.17272949 42.08566666]
[80.75015259 51.22422409]
[88.19092560 64.24861908]
[95.63170624 77.27301025]
[103.07247925 90.29740906]
[109.57482147 95.25913239]
[110.53305054 103.78075409]
[117.61529541 117.00353241]
[124.69753265 130.22630310]
[138.03385925 138.73825073]
[137.22245789 153.61074829]
[144.30470276 166.83352661]
[151.38693237 180.05628967]
[158.46917725 193.27906799]
[180.64335632 191.85586548]
[200.67630005 201.32031250]
[213.58424377 219.24966431]
[216.18907166 241.12390137]
[207.90052795 261.46514893]
[218.28761292 272.28683472]
[228.67468262 283.10852051]
[239.06176758 293.93017578]
[254.34037781 291.96289062]
[267.69171143 299.28375244]
[274.09637451 312.90155029]
[271.28787231 327.50463867]
[281.67492676 338.32632446]
[297.00518799 345.56646729]
[294.29183960 362.30187988]
[277.45932007 364.32736206]
[270.85327148 348.71337891]
[260.46618652 337.89172363]
[245.76029968 340.09963989]
[232.41632080 333.14248657]
[225.64854431 319.50244141]
[228.24008179 304.31726074]
[217.85301208 293.49557495]
[207.46594238 282.67391968]
[197.07885742 271.85223389]
[189.18191528 276.11843872]
[180.57377625 278.69100952]
[171.61361694 279.45895386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 86]
[12 85]
[13 84]
[14 83]
[16 81]
[17 80]
[18 79]
[19 77]
[20 76]
[21 75]
[22 74]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 64]
[29 63]
[30 62]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[38 47]
[39 46]
[40 45]
[91 111]
[92 110]
[93 109]
[94 108]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
