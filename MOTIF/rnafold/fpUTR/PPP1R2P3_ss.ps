%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGCUGUGCCGACCCUUCUCUUCGCGGACCCCACGCCAAGCAGCGACCCUGAGGCGACAGCCGGAGCGCCCGGCA\
) } def
/len { sequence length } bind def

/coor [
[94.28736115 150.56417847]
[82.91738892 147.93281555]
[72.44596100 142.78019714]
[63.42386627 135.37734985]
[56.32566833 126.11365509]
[51.52473450 115.47639465]
[36.71897888 117.88256073]
[21.91322517 120.28873444]
[7.10747194 122.69490051]
[-7.69828224 125.10107422]
[-16.93962669 137.64042664]
[-31.98904419 139.86970520]
[-43.88644791 130.98222351]
[-58.69219971 133.38839722]
[-67.72563171 146.35652161]
[-83.29758453 149.05650330]
[-96.16949463 139.88645935]
[-98.70468140 124.28683472]
[-89.39906311 111.51260376]
[-73.77350616 109.14248657]
[-61.09836960 118.58263397]
[-46.29261398 116.17646790]
[-37.82187653 103.97883606]
[-22.84101486 101.32772827]
[-10.10445118 110.29531860]
[4.70130253 107.88914490]
[19.50705719 105.48297882]
[34.31280899 103.07681274]
[49.11856461 100.67063904]
[51.15296173 85.74037170]
[57.47056580 72.06047058]
[67.51741028 60.83047867]
[80.41252136 53.03511047]
[95.02518463 49.35790634]
[110.07407379 50.12131500]
[124.23960876 55.25838852]
[133.25073242 43.26674652]
[142.26187134 31.27510643]
[151.27301025 19.28346443]
[149.08575439 8.27305317]
[153.38229370 -1.85583723]
[162.44404602 -7.69367123]
[172.99707031 -7.42946911]
[182.94390869 -18.65713120]
[192.89074707 -29.88479233]
[193.36123657 -45.92094421]
[206.27813721 -55.43585205]
[221.73269653 -51.13048935]
[227.86950684 -36.30756378]
[219.98092651 -22.33795547]
[204.11840820 -19.93795204]
[194.17156982 -8.71029091]
[184.22473145 2.51737070]
[182.06507874 21.56293678]
[163.26464844 28.29459763]
[154.25350952 40.28623962]
[145.24238586 52.27788162]
[136.23124695 64.26952362]
[146.68148804 79.74638367]
[150.84458923 97.95103455]
[148.15985107 116.43164062]
[138.98886108 132.69920349]
[148.93571472 143.92686462]
[158.88255310 155.15452576]
[168.82939148 166.38218689]
[178.77622986 177.60984802]
[194.63874817 180.00985718]
[202.52732849 193.97946167]
[196.39050293 208.80239868]
[180.93594360 213.10775757]
[168.01905823 203.59284973]
[167.54856873 187.55670166]
[157.60173035 176.32904053]
[147.65489197 165.10137939]
[137.70805359 153.87371826]
[127.76120758 142.64605713]
[117.31488800 147.84939575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[13 22]
[14 21]
[36 58]
[37 57]
[38 56]
[39 55]
[43 53]
[44 52]
[45 51]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
