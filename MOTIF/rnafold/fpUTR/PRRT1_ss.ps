%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAUCUCUCCAUCUCUGCGCUGCUGCCGGCUGCGCCAUCCAGCACCCAGACUCCAGCACCGGCCGAGGACCCCCACUCCGGCUGCAGGGACCCUGUCCCAGCGAGACCGCAGGC\
) } def
/len { sequence length } bind def

/coor [
[90.62215424 238.39247131]
[88.70443726 253.41249084]
[82.01139069 266.99490356]
[71.26903534 277.66638184]
[57.64261627 284.26937866]
[42.61022949 286.08761597]
[27.80247116 282.92391968]
[14.82558155 275.12139893]
[5.08719301 263.52645874]
[-0.35634616 249.39683533]
[-0.91456127 234.26518250]
[3.47309852 219.77285767]
[12.33069229 207.49191284]
[24.69741631 198.75447083]
[39.23181915 194.50831604]
[54.35731506 195.21401978]
[59.86420059 181.26145935]
[65.37108612 167.30888367]
[70.87797546 153.35630798]
[76.38485718 139.40374756]
[81.89174652 125.45117188]
[69.88354492 108.28675079]
[71.42041016 87.39531708]
[59.55082321 78.22400665]
[47.68124008 69.05268860]
[35.81165314 59.88137817]
[23.94207001 50.71006775]
[3.47063732 54.90837479]
[-13.37656307 43.03453445]
[-16.22557831 22.91056252]
[-29.00991821 15.06449986]
[-44.81881332 14.44045067]
[-51.61897278 1.18876827]
[-64.40331268 -6.65729380]
[-77.18765259 -14.50335598]
[-91.47554779 -8.45062733]
[-106.58477783 -11.98487377]
[-116.70552063 -23.74710655]
[-117.94615936 -39.21450806]
[-109.82962799 -52.43954086]
[-95.47690582 -58.33691788]
[-80.40690613 -54.63897324]
[-70.41435242 -42.76764297]
[-69.34159088 -27.28769493]
[-56.55724716 -19.44163322]
[-43.77291107 -11.59557056]
[-28.87843704 -11.53272343]
[-21.16385460 2.28016162]
[-8.37951756 10.12622356]
[-0.13912344 5.11356401]
[9.43121052 3.51004529]
[18.96975327 5.58786583]
[27.10290718 11.09226131]
[32.64300156 19.27188110]
[34.76165009 28.98111725]
[33.11338043 38.84048080]
[44.98296738 48.01179504]
[56.85255051 57.18310547]
[68.72213745 66.35441589]
[80.59172058 75.52573395]
[94.29030609 67.27513123]
[111.24018097 66.63997650]
[127.25734711 74.70466614]
[138.35046387 64.60798645]
[149.44357300 54.51131439]
[160.53668213 44.41463470]
[171.62979126 34.31795883]
[182.58634949 24.07326317]
[193.40438843 13.68239880]
[191.15277100 -1.67044616]
[198.38516235 -15.39896584]
[212.32054138 -22.22426605]
[227.60047913 -19.52187729]
[238.34953308 -8.33092403]
[240.43447876 7.04544258]
[233.05358887 20.69469833]
[219.04498291 27.36842346]
[203.79525757 24.50043488]
[192.97721863 34.89130020]
[190.29812622 41.88532639]
[181.72647095 45.41106796]
[170.63336182 55.50774765]
[159.54025269 65.60442352]
[148.44712830 75.70110321]
[137.35401917 85.79777527]
[139.95874023 100.56989288]
[153.83613586 106.26360321]
[169.54040527 104.34364319]
[178.37821960 116.33289337]
[192.25561523 122.02660370]
[206.13299561 127.72030640]
[220.01037598 133.41401672]
[233.88775635 139.10771179]
[250.83653259 139.52612305]
[255.12637329 155.92835999]
[240.55268860 164.59115601]
[228.19404602 152.98510742]
[214.31666565 147.29139709]
[200.43928528 141.59768677]
[186.56190491 135.90397644]
[172.68452454 130.21028137]
[157.97283936 132.53749084]
[148.14242554 120.14098358]
[134.26504517 114.44727325]
[129.53025818 120.92857361]
[123.65106964 126.07411957]
[116.97415161 129.70303345]
[109.86882019 131.71946716]
[102.70707703 132.11358643]
[95.84431458 130.95805359]
[90.33742523 144.91062927]
[84.83054352 158.86320496]
[79.32365417 172.81576538]
[73.81677246 186.76834106]
[68.30988312 200.72091675]
[79.84010315 210.53584290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 115]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[30 49]
[31 48]
[33 46]
[34 45]
[35 44]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 79]
[69 78]
[86 104]
[87 103]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
