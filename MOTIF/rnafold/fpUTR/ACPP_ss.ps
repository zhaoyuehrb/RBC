%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUCCCUUAAUUAAAUAGCUUCCCCUCUACAGGCUUUUGAAGUGGUAGCAGUUCCUCCUAACUCCUGCCAGAAACAGCUCUCCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[11.10568237 327.57644653]
[-0.96737772 336.52001953]
[-14.16768360 343.69622803]
[-28.23828888 348.96542358]
[-42.90530396 352.22497559]
[-57.88323212 353.41149902]
[-72.88052368 352.50186157]
[-87.60524750 349.51379395]
[-101.77079010 344.50546265]
[-115.10140991 337.57431030]
[-127.33762360 328.85528564]
[-138.24124146 318.51812744]
[-147.60003662 306.76400757]
[-155.23184204 293.82177734]
[-160.98806763 279.94329834]
[-164.75671387 265.39877319]
[-166.46438599 250.47126770]
[-166.07785034 235.45140076]
[-163.60464478 220.63150024]
[-159.09291077 206.30004883]
[-152.63046265 192.73602295]
[-144.34307861 180.20344543]
[-134.39210510 168.94625854]
[-122.97122192 159.18359375]
[-110.30274200 151.10548401]
[-96.63327026 144.86918640]
[-82.22887421 140.59605408]
[-67.36994934 138.36930847]
[-52.34572220 138.23225403]
[-37.44864655 140.18759155]
[-22.96870232 144.19725037]
[-9.18774033 150.18316650]
[3.62598658 158.02883911]
[15.22305584 167.58152771]
[26.27735519 157.44238281]
[37.33165741 147.30322266]
[48.38595581 137.16407776]
[52.53538132 122.85912323]
[67.93544006 119.23301697]
[78.98974609 109.09385681]
[77.22082520 97.71124268]
[81.21887970 86.90806580]
[89.97172546 79.41935730]
[101.26341248 77.14102173]
[112.23524475 80.64985657]
[123.96271515 71.29750824]
[135.69018555 61.94516373]
[147.41766357 52.59281921]
[159.14512634 43.24047089]
[170.87260437 33.88812256]
[176.83789062 19.23459244]
[191.61259460 17.34853172]
[203.34007263 7.99618530]
[215.06753540 -1.35616159]
[226.79501343 -10.70850849]
[228.31524658 -26.43951035]
[240.56666565 -36.42341232]
[256.28073120 -34.73693848]
[266.13452148 -22.38064766]
[264.28201294 -6.68530703]
[251.82223511 3.03731704]
[236.14735413 1.01896358]
[224.41989136 10.37131023]
[212.69241333 19.72365761]
[200.96495056 29.07600403]
[195.83848572 43.06059265]
[180.22494507 45.61559677]
[168.49748230 54.96794128]
[156.77000427 64.32028961]
[145.04254150 73.67263794]
[133.31506348 83.02498627]
[121.58759308 92.37732697]
[120.49131775 110.20956421]
[106.91600037 121.82425690]
[89.12889862 120.14815521]
[78.07460022 130.28730774]
[73.13449097 145.31747437]
[58.52510834 148.21836853]
[47.47080994 158.35752869]
[36.41651154 168.49667358]
[25.36221123 178.63583374]
[33.87968445 191.01318359]
[40.59160233 204.45552063]
[45.36731720 218.70117188]
[48.11386490 233.47285461]
[48.77779007 248.48303223]
[47.34616089 263.43951416]
[43.84684753 278.05117798]
[38.34796906 292.03363037]
[30.95655632 305.11465454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 81]
[35 80]
[36 79]
[37 78]
[39 76]
[40 75]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
