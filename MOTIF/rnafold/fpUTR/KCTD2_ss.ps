%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCCUGCCGAGAAAUGGGCCGGCCCGGCUGCGCGCGGGCAGCAGCGGUGGCGGCGGCGGUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[3.19839644 237.16682434]
[-6.38430548 248.70683289]
[-15.96700764 260.24685669]
[-25.54970932 271.78686523]
[-23.84209442 287.49862671]
[-33.80949783 299.76345825]
[-49.53844070 301.30487061]
[-61.69721603 291.20834351]
[-63.07224274 275.46398926]
[-52.84773636 263.41265869]
[-37.08971786 262.20416260]
[-27.50701714 250.66415405]
[-17.92431450 239.12413025]
[-8.34161282 227.58412170]
[-10.68625641 211.08871460]
[-0.30164343 197.63629150]
[16.91177368 195.65116882]
[25.95129395 183.68090820]
[34.99081421 171.71064758]
[44.03033447 159.74038696]
[53.06985092 147.77012634]
[62.10937119 135.79986572]
[71.14888763 123.82961273]
[72.71751404 116.34048462]
[80.89273834 111.52816010]
[90.47544098 99.98815155]
[91.20298004 94.41266632]
[95.17577362 89.76135254]
[101.51428223 87.87911987]
[112.12088013 77.27251434]
[122.72748566 66.66591644]
[133.33409119 56.05931473]
[143.94068909 45.45271301]
[147.97816467 36.86833954]
[155.29061890 34.61539841]
[166.37574768 24.50996208]
[177.46087646 14.40452766]
[178.90579224 1.36359584]
[188.63493347 -6.82310057]
[200.92149353 -6.06654596]
[212.46150208 -15.64924812]
[217.63877869 -31.20970535]
[233.75537109 -34.24077606]
[244.23191833 -21.62435722]
[238.29104614 -6.33913469]
[222.04420471 -4.10923815]
[210.50419617 5.47346354]
[205.50990295 22.14185143]
[187.56631470 25.48966217]
[176.48118591 35.59509659]
[165.39605713 45.70053101]
[154.54728699 56.05931473]
[143.94068909 66.66591644]
[133.33409119 77.27251434]
[122.72748566 87.87911987]
[112.12088013 98.48571777]
[102.01544952 109.57085419]
[92.43274689 121.11086273]
[83.11914825 132.86914062]
[74.07962799 144.83938599]
[65.04010773 156.80964661]
[56.00059128 168.77990723]
[46.96107101 180.75016785]
[37.92155075 192.72042847]
[28.88203239 204.69068909]
[32.27804184 217.93487549]
[27.39214516 230.49391174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[17 65]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[25 58]
[26 57]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[35 51]
[36 50]
[37 49]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
