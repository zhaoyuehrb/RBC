%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGGCUGGGGCUGGGGGCGGCGGCGGCGGCGACGCGGGCGGCGGGCGGCGCGGGGCGGUCCGGCGGGUUCAAAGAGGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[91.26046753 108.40447235]
[76.32445526 109.78849792]
[61.38844681 111.17252350]
[46.45243454 112.55654907]
[31.51642036 113.94057465]
[16.64175034 115.87556458]
[1.84873867 118.35887146]
[-12.94427204 120.84217834]
[-27.73728371 123.32548523]
[-36.91314316 135.91282654]
[-51.95073700 138.22053528]
[-63.89430237 129.39517212]
[-78.68731689 131.87847900]
[-93.48032379 134.36180115]
[-108.27333832 136.84510803]
[-116.04661560 150.41381836]
[-130.74085999 155.76293945]
[-145.41790771 150.36677551]
[-153.14768982 136.77323914]
[-150.28044128 121.40075684]
[-138.16999817 111.50777435]
[-122.53453827 111.76543427]
[-110.75664520 122.05209351]
[-95.96363068 119.56877899]
[-81.17062378 117.08547211]
[-66.37760925 114.60216522]
[-57.97056580 102.36054993]
[-43.00372314 99.63139343]
[-30.22059250 108.53247070]
[-15.42758083 106.04916382]
[-0.63456947 103.56585693]
[14.15844154 101.08255005]
[17.72651672 97.58198547]
[23.60918236 96.44693756]
[30.13239479 99.00456238]
[45.06840897 97.62053680]
[60.00442123 96.23651123]
[74.94042969 94.85248566]
[89.87644196 93.46846008]
[95.18064880 89.01883698]
[102.02755737 88.23683929]
[113.29753876 78.33797455]
[118.56001282 63.41762161]
[133.22845459 60.83185959]
[144.49842834 50.93299484]
[155.76841736 41.03412628]
[167.03839111 31.13525772]
[178.30836487 21.23638916]
[183.57084656 6.31603670]
[198.23928833 3.73027802]
[209.50926208 -6.16859007]
[211.97688293 -22.02073097]
[225.98001099 -29.84965706]
[240.77662659 -23.64968681]
[245.01605225 -8.17690754]
[235.44613647 4.69928980]
[219.40812683 5.10138845]
[208.13815308 15.00025654]
[203.68177795 29.21257591]
[188.20722961 32.50636673]
[176.93725586 42.40523529]
[165.66728210 52.30410385]
[154.39729309 62.20297241]
[143.12731934 72.10183716]
[138.67094421 86.31415558]
[123.19640350 89.60794830]
[111.92642975 99.50682068]
[126.92265320 99.17040253]
[141.32197571 103.37271118]
[153.78326416 111.72234344]
[163.14587402 123.44161987]
[168.53779602 137.43902588]
[169.45681763 152.41084290]
[165.81733704 166.96261597]
[157.95834351 179.73901367]
[146.61181641 189.55004883]
[132.83456421 195.48191833]
[117.90977478 196.98214722]
[103.22753906 193.91101074]
[90.15534210 186.55453491]
[79.91072083 175.59790039]
[73.44784546 162.06161499]
[71.36866760 147.20640564]
[73.86683655 132.41589355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 32]
[7 31]
[8 30]
[9 29]
[12 26]
[13 25]
[14 24]
[15 23]
[41 67]
[42 66]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
