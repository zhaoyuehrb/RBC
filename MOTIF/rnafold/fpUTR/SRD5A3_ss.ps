%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGUCACCGACGUCCCGCUAGGCUGAGACCGGUGCGCCGCGCGCUAGUGGCCGCUCUUCCGCGGGCUAGCGGGCGGUGGGGGCGCCAGCAGCGCGGAAGGCGGGCACGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[117.06242371 383.84399414]
[115.85542297 368.89263916]
[114.64842224 353.94128418]
[113.44142151 338.98992920]
[112.23442841 324.03857422]
[111.02742767 309.08721924]
[99.55096436 299.66244507]
[98.11390686 284.51681519]
[108.07728577 272.54315186]
[106.87028503 257.59179688]
[105.66329193 242.64044189]
[92.87298584 235.05451965]
[86.93185425 221.22821045]
[90.31086731 206.38113403]
[101.91855621 196.25355530]
[100.71155548 181.30220032]
[99.50455475 166.35084534]
[98.09693909 151.41702271]
[96.48896790 136.50346375]
[94.88098907 121.58989716]
[93.27301025 106.67633820]
[89.94092560 102.44291687]
[89.29323578 96.62774658]
[92.00119781 90.92214966]
[91.19605255 75.94377136]
[90.39089966 60.96539688]
[89.58575439 45.98702240]
[76.72691345 37.50430679]
[71.39097595 23.24312973]
[75.42794800 8.74599648]
[87.08776093 -0.48367566]
[86.28260803 -15.46205139]
[75.93459320 -21.62450790]
[69.96106720 -31.94348907]
[69.77436066 -43.74457169]
[75.30422974 -54.03467941]
[85.04541016 -60.26119614]
[85.04541016 -75.26119232]
[85.04541016 -90.26119232]
[85.04541016 -105.26119232]
[85.04541016 -120.26119232]
[85.04541016 -135.26119995]
[77.30810547 -149.06137085]
[85.04541016 -161.78863525]
[85.04541016 -176.78863525]
[85.04541016 -191.78863525]
[85.04541016 -206.78863525]
[85.04541016 -221.78863525]
[85.04541016 -236.78863525]
[85.04541016 -251.78863525]
[81.97961426 -257.88537598]
[82.47858429 -263.71286011]
[85.46974945 -267.58837891]
[86.27490234 -282.56677246]
[87.08004761 -297.54513550]
[87.88520050 -312.52349854]
[77.14069366 -324.11364746]
[77.82211304 -339.90322876]
[89.52519226 -350.52459717]
[105.30669403 -349.67626953]
[115.80374146 -337.86157227]
[114.78861237 -322.08990479]
[102.86357880 -311.71835327]
[102.05842590 -296.73999023]
[101.25327301 -281.76159668]
[100.44812775 -266.78323364]
[100.04541016 -251.78863525]
[100.04541016 -236.78863525]
[100.04541016 -221.78863525]
[100.04541016 -206.78863525]
[100.04541016 -191.78863525]
[100.04541016 -176.78863525]
[100.04541016 -161.78863525]
[107.78270721 -149.06137085]
[100.04541016 -135.26119995]
[100.04541016 -120.26119232]
[100.04541016 -105.26119232]
[100.04541016 -90.26119232]
[100.04541016 -75.26119232]
[100.04541016 -60.26119614]
[113.73204803 -48.24908829]
[114.43656921 -29.73641396]
[101.26098633 -16.26720047]
[102.06613922 -1.28882515]
[114.64816284 6.63774824]
[120.21594238 20.61858559]
[116.43953705 35.36959076]
[104.56412506 45.18187332]
[105.36927795 60.16024780]
[106.17442322 75.13862610]
[106.97957611 90.11699677]
[108.18657684 105.06835938]
[109.79454803 119.98192596]
[111.40252686 134.89549255]
[113.01050568 149.80905151]
[117.08848572 158.13217163]
[114.45591736 165.14384460]
[115.66291809 180.09519958]
[116.86991119 195.04655457]
[129.95185852 203.18098450]
[135.66876221 217.29376221]
[132.02246094 231.89405823]
[120.61464691 241.43344116]
[121.82164764 256.38479614]
[123.02864838 271.33615112]
[134.78372192 281.55654907]
[135.79479980 296.73654175]
[125.97879028 307.88021851]
[127.18578339 322.83157349]
[128.39279175 337.78292847]
[129.59977722 352.73428345]
[130.80677795 367.68563843]
[132.01377869 382.63702393]
[141.76979065 395.81851196]
[134.98501587 410.74832153]
[118.63903809 412.06790161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[9 105]
[10 104]
[11 103]
[15 99]
[16 98]
[17 97]
[18 95]
[19 94]
[20 93]
[21 92]
[24 91]
[25 90]
[26 89]
[27 88]
[31 84]
[32 83]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
