%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCUCAGGCUCACAUUCCCACCACCCACCUCUGAGCCCAGCCCUCCCUAGCAUCACCACUUCCAUCCCAUUCCUCAGCCAAGAGCCAGGAAUCCUGAUUCCAGAUCCCACGCUUCCCUGCCUCCCUCAGGUCCCAGCUCUUGCUCCUGCCUGUUUGCCUGGAA\
) } def
/len { sequence length } bind def

/coor [
[158.70745850 126.66448212]
[150.60530090 139.95829773]
[139.55302429 150.92268372]
[126.19495392 158.91845703]
[111.30982208 163.47952271]
[95.76536560 164.33995056]
[80.46777344 161.44960022]
[66.30883026 154.97695923]
[54.11396790 145.29937744]
[42.28604126 154.52435303]
[30.45811844 163.74932861]
[18.63019371 172.97430420]
[6.80226851 182.19927979]
[-5.02565622 191.42425537]
[0.35910359 205.54855347]
[1.33976293 220.63264465]
[-2.17087793 235.33525085]
[-9.86065483 248.34904480]
[-21.04579926 258.51684570]
[-34.73173523 264.93450928]
[-49.70151520 267.03143311]
[-64.62404633 264.62109375]
[-78.17240906 257.91790771]
[-89.14191437 247.51782227]
[-96.55714417 234.34567261]
[-99.75875092 219.57267761]
[-98.46204376 204.51246643]
[-92.78233337 190.50418091]
[-83.22464752 178.79341125]
[-70.63884735 170.42147827]
[-56.14406204 166.13282776]
[-41.02915573 166.30877686]
[-26.63813210 170.93370056]
[-14.25063324 179.59632874]
[-2.42270803 170.37135315]
[9.40521622 161.14637756]
[21.23314095 151.92140198]
[33.06106567 142.69642639]
[44.88899231 133.47145081]
[38.93816757 120.71264648]
[35.89828491 106.96642303]
[35.91426086 92.88809967]
[21.29941940 89.51076508]
[9.67516136 99.78968811]
[-5.77404165 101.23942566]
[-19.10765648 93.30252838]
[-25.19863510 79.03089142]
[-21.70487404 63.91225433]
[-9.96979427 53.76003647]
[5.49422693 52.47797394]
[18.74095726 60.55904770]
[24.67675781 74.89591980]
[39.29159927 78.27326202]
[45.72123337 65.19515991]
[54.92354202 53.89496613]
[66.42845154 44.94991302]
[79.64826202 38.81693268]
[93.90767670 35.80931091]
[108.47830963 36.08068085]
[122.61584473 39.61718369]
[135.59811401 46.23816299]
[146.76196289 55.60541153]
[155.53712463 67.24042511]
[169.25564575 61.17397690]
[182.97418213 55.10752487]
[196.69271851 49.04107285]
[194.40388489 34.13481522]
[196.05032349 19.15567589]
[201.51383972 5.12407112]
[210.41639709 -7.00569057]
[222.14630127 -16.41031647]
[235.90020752 -22.45341301]
[250.73814392 -24.72854233]
[265.64773560 -23.08654785]
[279.61334229 -17.64533424]
[291.68511963 -8.78140545]
[301.04373169 2.89617419]
[314.76223755 -3.17027783]
[328.48077393 -9.23672962]
[339.57098389 -26.03565407]
[358.67877197 -23.24468231]
[372.15789795 -29.82592010]
[385.63705444 -36.40715790]
[399.11621094 -42.98839188]
[412.59533691 -49.56962967]
[426.07449341 -56.15086746]
[439.55361938 -62.73210144]
[444.77798462 -77.40670013]
[458.54150391 -83.88899231]
[472.49929810 -78.81793213]
[485.97845459 -85.39916992]
[499.45758057 -91.98040771]
[503.50588989 -97.29751587]
[508.83773804 -99.41963196]
[513.57366943 -98.54477692]
[527.29217529 -104.61122894]
[541.01074219 -110.67768097]
[554.72924805 -116.74413300]
[568.44775391 -122.81058502]
[571.63366699 -141.63580322]
[585.37707520 -154.67341614]
[604.04736328 -156.82907104]
[620.14245605 -147.41702271]
[633.49462891 -154.25215149]
[646.84686279 -161.08729553]
[645.97888184 -176.29145813]
[651.37615967 -190.53187561]
[662.10351562 -201.34130859]
[676.30236816 -206.84695435]
[691.51269531 -206.09492493]
[705.09924316 -199.21551514]
[714.70800781 -187.40063477]
[718.67425537 -172.69726562]
[716.31079102 -157.65287781]
[708.02703857 -144.87397766]
[695.25836182 -136.57460022]
[680.21685791 -134.19265747]
[665.50866699 -138.14085388]
[653.68194580 -147.73510742]
[640.32977295 -140.89996338]
[626.97760010 -134.06483459]
[627.36260986 -122.84171295]
[623.49444580 -112.24443054]
[615.90106201 -103.83196259]
[605.66143799 -98.85720062]
[594.25225830 -98.08049011]
[583.33508301 -101.65361023]
[574.51422119 -109.09204865]
[560.79571533 -103.02559662]
[547.07714844 -96.95914459]
[533.35864258 -90.89269257]
[519.64007568 -84.82624054]
[506.03881836 -78.50126648]
[492.55969238 -71.92002869]
[479.08053589 -65.33879089]
[474.49517822 -51.21398163]
[460.91915894 -44.34765625]
[446.13485718 -49.25296021]
[432.65573120 -42.67172241]
[419.17657471 -36.09048462]
[405.69744873 -29.50924873]
[392.21829224 -22.92801285]
[378.73913574 -16.34677505]
[365.26000977 -9.76553917]
[362.79980469 0.20761043]
[355.07843018 7.31163597]
[344.50057983 9.00400352]
[334.54724121 4.48180342]
[320.82870483 10.54825592]
[307.11016846 16.61470795]
[309.45159912 31.39534187]
[307.88601685 46.28982925]
[302.51412964 60.28223419]
[293.69656372 72.41658783]
[282.02947998 81.86220551]
[268.30441284 87.97054291]
[253.45452881 90.31972504]
[238.49114990 88.74368286]
[224.43489075 83.34387970]
[212.24610901 74.48279572]
[202.75917053 62.75960541]
[189.04063416 68.82605743]
[175.32209778 74.89250946]
[161.60357666 80.95896149]
[164.37170410 96.27914429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[42 53]
[43 52]
[63 164]
[64 163]
[65 162]
[66 161]
[77 150]
[78 149]
[79 148]
[81 144]
[82 143]
[83 142]
[84 141]
[85 140]
[86 139]
[87 138]
[90 135]
[91 134]
[92 133]
[95 132]
[96 131]
[97 130]
[98 129]
[99 128]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
