%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCCCUGAUUGGUGGACGGGCUGCUUUGGGCAGGGCCGCCCUCAGGCUAUAUAAGCGCACUCGCGGCGGCGUUGGUGUU\
) } def
/len { sequence length } bind def

/coor [
[96.58558655 118.56499481]
[89.92942810 114.46160889]
[85.92779541 108.36115265]
[84.97594452 101.65502930]
[70.04305267 100.23775482]
[55.11015701 98.82047272]
[40.17726135 97.40319824]
[25.24436760 95.98592377]
[10.31147385 94.56864166]
[-4.62142086 93.15136719]
[-15.98049259 107.01013947]
[-33.18806076 111.42591858]
[-49.53108597 104.86406708]
[-58.74463272 90.03628540]
[-73.74194336 89.75241852]
[-88.73925781 89.46855927]
[-103.73657227 89.18469238]
[-118.73388672 88.90083313]
[-131.24148560 98.94770813]
[-146.86259460 95.29255676]
[-153.61405945 80.73929596]
[-146.31672668 66.45194244]
[-130.56846619 63.39053726]
[-118.45002747 73.90351868]
[-103.45271301 74.18738556]
[-88.45539856 74.47124481]
[-73.45808411 74.75510406]
[-58.46076965 75.03897095]
[-52.49016190 64.14843750]
[-42.33747482 56.86854935]
[-29.96295547 54.68269730]
[-17.78974152 58.08314896]
[-8.22938633 66.46192932]
[-3.20414376 78.21847534]
[11.72875023 79.63574982]
[26.66164398 81.05302429]
[41.59453964 82.47030640]
[56.52743149 83.88758087]
[71.46032715 85.30485535]
[86.39321899 86.72213745]
[98.88494110 78.41810608]
[103.35791016 64.10054779]
[107.83087921 49.78298569]
[103.71339417 33.90916061]
[115.58998108 22.60081863]
[131.24304199 27.49100876]
[134.57003784 43.54912567]
[122.14844513 54.25595474]
[117.67547607 68.57351685]
[113.20250702 82.89107513]
[121.38574982 70.31990051]
[135.88629150 66.48139954]
[149.21748352 73.35740662]
[154.49639893 87.39781189]
[148.99749756 101.35353851]
[135.55990601 108.01920319]
[121.11982727 103.95208740]
[133.91683960 111.77745819]
[146.71385193 119.60282898]
[159.51086426 127.42819977]
[172.30787659 135.25357056]
[186.58433533 129.46658325]
[201.35818481 133.15257263]
[211.01451111 144.69465637]
[212.01086426 159.53193665]
[224.80787659 167.35731506]
[237.60488892 175.18269348]
[254.00354004 175.05531311]
[262.07876587 189.32846069]
[253.52346802 203.31913757]
[237.13861084 202.63493347]
[229.77951050 187.97970581]
[216.98249817 180.15432739]
[204.18548584 172.32894897]
[190.52412415 178.20306396]
[175.84983826 174.86695862]
[165.83668518 163.39569092]
[164.48251343 148.05058289]
[151.68550110 140.22521973]
[138.88848877 132.39984131]
[126.09146881 124.57447052]
[113.29445648 116.74909973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[41 50]
[42 49]
[43 48]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
