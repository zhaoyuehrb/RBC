%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCGCCCCCGCCUCCGGCCCGAGGCCGCACGGGUGUCCUCGCGCUGCUAGUCCGCGCGCAGCCUGGCAGUUUGCCGCUUCCUCGUCCUCCAUCCUGCGUCC\
) } def
/len { sequence length } bind def

/coor [
[-23.21240234 253.22973633]
[-31.14999199 250.99769592]
[-42.37765121 260.94451904]
[-53.60531235 270.89135742]
[-64.83297729 280.83819580]
[-76.06063843 290.78506470]
[-75.33486176 304.33459473]
[-82.48741150 315.63446045]
[-94.68238831 320.62796021]
[-107.32498169 317.67837524]
[-118.84794617 327.28158569]
[-130.37091064 336.88476562]
[-135.52052307 352.45440674]
[-151.63171387 355.51409912]
[-162.13066101 342.91632080]
[-156.21694946 327.62057495]
[-139.97410583 325.36181641]
[-128.45114136 315.75860596]
[-116.92817688 306.15542603]
[-116.17645264 289.43045044]
[-103.36268616 278.14135742]
[-86.00747681 279.55740356]
[-74.77981567 269.61053467]
[-63.55215454 259.66369629]
[-52.32449341 249.71687317]
[-41.09683228 239.77003479]
[-36.70754623 218.64385986]
[-14.98448753 213.53126526]
[-5.03764772 202.30360413]
[4.90919209 191.07594299]
[14.85603142 179.84828186]
[16.97072411 172.63433838]
[25.27685738 168.43756104]
[35.55826950 157.51544189]
[45.83967972 146.59333801]
[56.12109375 135.67121887]
[66.40250397 124.74909973]
[58.79016113 110.36572266]
[57.17765427 93.87598419]
[62.02854156 77.72552490]
[72.83098602 64.39487457]
[88.14259338 56.01879120]
[105.78038025 54.04604721]
[105.78038025 39.04604721]
[105.78038025 24.04604721]
[105.78038025 9.04604816]
[102.60893250 0.29695356]
[106.01377106 -6.40528679]
[106.46681976 -21.39844322]
[95.45299530 -32.73295593]
[95.76329041 -48.53419876]
[107.21360779 -59.42757416]
[123.01068878 -58.95023727]
[133.78239441 -47.38538361]
[133.13807678 -31.59423256]
[121.45997620 -20.94539833]
[121.00692749 -5.95224142]
[120.78038025 9.04604816]
[120.78038025 24.04604721]
[120.78038025 39.04604721]
[120.78038025 54.04604721]
[133.37686157 62.19028091]
[147.05535889 56.03409195]
[160.73385620 49.87789917]
[165.07304382 44.53302002]
[170.64451599 42.60440063]
[175.42916870 43.79090118]
[189.45442200 38.47182846]
[203.47966003 33.15275574]
[217.50489807 27.83368111]
[230.17068481 16.56362152]
[244.50654602 25.61455917]
[239.77789307 41.89571762]
[222.82397461 41.85892487]
[208.79873657 47.17799759]
[194.77349854 52.49707031]
[180.74824524 57.81614304]
[166.89006042 63.55639648]
[153.21156311 69.71258545]
[139.53306580 75.86878204]
[143.54980469 85.39417267]
[145.32783508 95.49091339]
[144.81523132 105.64453888]
[142.07582092 115.34619141]
[137.28404236 124.11817169]
[130.71438599 131.53744507]
[122.72589111 137.25598145]
[113.74265289 141.01702881]
[104.23136902 142.66645813]
[94.67715454 142.15881348]
[85.55875397 139.55766296]
[77.32461548 135.03051758]
[67.04320526 145.95262146]
[56.76179504 156.87474060]
[46.48038483 167.79685974]
[36.19897079 178.71896362]
[26.08369255 189.79512024]
[16.13685226 201.02278137]
[6.19001341 212.25044250]
[-3.75682664 223.47810364]
[-1.61765194 231.93341064]
[-3.08331871 240.43444824]
[-7.82455969 247.52685547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[10 19]
[11 18]
[12 17]
[28 100]
[29 99]
[30 98]
[31 97]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[43 61]
[44 60]
[45 59]
[46 58]
[48 57]
[49 56]
[62 80]
[63 79]
[64 78]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
