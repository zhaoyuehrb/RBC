%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUGCGGUUCUUGCCAACGCAGCAGCCCUCCUGCUAUAUAGCCCGCCGCGCCGCAGCCCCACCCGCUCAGCGCCGCCGCCCCACCAGCUCAGCACCGCCGUGCGCCCAGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[138.47647095 361.49465942]
[150.27369690 351.86422729]
[146.29423523 337.40170288]
[142.31477356 322.93920898]
[138.33531189 308.47671509]
[134.35585022 294.01422119]
[130.37640381 279.55172729]
[126.39694214 265.08920288]
[122.41748047 250.62672424]
[110.37110901 245.84439087]
[103.20610046 234.81027222]
[103.75386047 221.46980286]
[112.03821564 210.75096130]
[108.44848633 196.18682861]
[104.85874939 181.62269592]
[92.01523590 177.72206116]
[82.72596741 167.88288879]
[79.51849365 154.62524414]
[83.34328461 141.41915894]
[93.29552460 131.77641296]
[90.09810638 117.12116241]
[78.35271454 107.79132080]
[63.35406494 107.99269867]
[48.35541916 108.19407654]
[33.35676956 108.39545441]
[18.35812187 108.59683228]
[6.18204117 119.04301453]
[-9.54913235 115.89504242]
[-16.76778984 101.56777191]
[-9.93639278 87.05186462]
[5.70459366 83.48268127]
[18.15674400 93.59818268]
[33.15539169 93.39680481]
[48.15404129 93.19542694]
[63.15268707 92.99404907]
[78.15133667 92.79267120]
[63.15351105 92.53730011]
[50.46232605 84.54143524]
[43.75742340 71.12337494]
[44.98280334 56.17351151]
[53.78318024 44.02635574]
[67.60700226 38.20381546]
[82.44623566 40.39405823]
[93.99843597 49.96205521]
[98.91420746 64.13368988]
[95.76941681 78.79792023]
[99.35915375 64.23378754]
[95.14928436 48.98296738]
[105.70758820 38.47718430]
[109.29732513 23.91305733]
[112.88705444 9.34893036]
[108.67718506 -5.90189075]
[119.23548889 -16.40767479]
[122.82522583 -30.97180176]
[126.41496277 -45.53592682]
[129.61238098 -60.19118500]
[132.41519165 -74.92700195]
[135.21800232 -89.66281891]
[125.18859100 -101.66052246]
[125.26929474 -117.29789734]
[135.42199707 -129.19145203]
[150.85292053 -131.72540283]
[164.27603149 -123.70330811]
[169.35336304 -108.91294861]
[163.68754578 -94.33788300]
[149.95381165 -86.86000824]
[147.15100098 -72.12419128]
[144.34820557 -57.38837814]
[146.32498169 -52.90962219]
[145.41484070 -47.13207245]
[140.97908020 -41.94619370]
[137.38935852 -27.38206673]
[133.79962158 -12.81793880]
[138.26625061 1.39115846]
[127.45118713 12.93866539]
[123.86145020 27.50279236]
[120.27171326 42.06692123]
[124.73834991 56.27601624]
[113.92327881 67.82352448]
[110.33354950 82.38764954]
[114.35249329 86.49606323]
[116.93636322 91.40342712]
[117.96974182 96.64752197]
[117.47719574 101.76786041]
[115.61257935 106.34586334]
[112.63736725 110.03904724]
[108.89056396 112.60650635]
[104.75335693 113.92373657]
[107.95078278 128.57899475]
[123.48327637 135.11528015]
[132.01647949 149.45474243]
[130.38551331 165.89506531]
[119.42287445 178.03295898]
[123.01261139 192.59709167]
[126.60234833 207.16122437]
[141.70007324 215.87245178]
[145.80950928 232.46577454]
[136.87997437 246.64726257]
[140.85943604 261.10977173]
[144.83889771 275.57226562]
[148.81835938 290.03475952]
[152.79782104 304.49725342]
[156.77726746 318.95974731]
[160.75672913 333.42227173]
[164.73619080 347.88476562]
[179.79953003 350.12432861]
[192.64617920 358.30258179]
[201.05036926 371.00256348]
[203.55603027 386.02392578]
[199.72903442 400.76412964]
[190.23243713 412.66937256]
[176.71157837 419.67697144]
[161.50903320 420.57281494]
[147.25874329 415.20172119]
[136.42962646 404.49423218]
[130.89791870 390.30548096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[13 95]
[14 94]
[15 93]
[20 89]
[21 88]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[46 80]
[47 79]
[49 77]
[50 76]
[51 75]
[53 73]
[54 72]
[55 71]
[56 68]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
