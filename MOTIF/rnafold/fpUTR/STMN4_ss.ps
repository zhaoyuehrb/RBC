%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAGUGGUGCUGAUGUUGAGAGAAGCCCAGGGUACCACUAAUUGAGGGAGUGAGGAAGAGAGCAGCUCGCUUCUAACUGGACUGCACGUUGGUGACAGCGUCCCAAGCUGGUGACAGACCCACUCUGUAACUUUCAGCUAGAUUCAGCCACCAGAUCCCAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[109.47060394 141.94517517]
[99.79895020 143.00057983]
[90.13758850 141.85478210]
[80.98108673 138.56645203]
[72.79815674 133.30390930]
[61.42858124 143.08821106]
[50.05900574 152.87252808]
[38.68943024 162.65684509]
[27.31985283 172.44114685]
[15.95027733 182.22546387]
[4.58070183 192.00978088]
[-6.78887415 201.79408264]
[-18.15844917 211.57839966]
[-16.53250694 228.39447021]
[-25.15127945 242.73188782]
[-40.45827103 249.05776978]
[-56.36228943 245.06852722]
[-67.54692078 255.06373596]
[-78.73155212 265.05892944]
[-79.36735535 280.85043335]
[-91.03970337 291.50555420]
[-106.82359314 290.70285034]
[-117.35472107 278.91848755]
[-116.38516998 263.14398193]
[-104.49014282 252.73802185]
[-88.72675323 253.87429810]
[-77.54212189 243.87910461]
[-66.35748291 233.88389587]
[-68.92981720 220.75988770]
[-64.63694763 207.97949219]
[-54.50189590 198.92509460]
[-41.10840225 196.04873657]
[-27.94276047 200.20881653]
[-16.57318497 190.42451477]
[-5.20360947 180.64019775]
[6.16596651 170.85588074]
[17.53554153 161.07157898]
[28.90511894 151.28726196]
[40.27469254 141.50296021]
[51.64426804 131.71864319]
[63.01384735 121.93433380]
[60.01885605 115.83030701]
[58.02343369 109.33051300]
[57.07746887 102.59745026]
[57.20460510 95.79944611]
[58.40166855 89.10645294]
[60.63872910 82.68582153]
[63.85985947 76.69805145]
[52.86408234 66.49546051]
[41.86830521 56.29286957]
[30.87252617 46.09027863]
[19.87674904 35.88768768]
[8.88097000 25.68509483]
[-2.11480761 15.48250484]
[-13.11058617 5.27991343]
[-24.10636330 -4.92267752]
[-38.51700974 0.23404913]
[-53.67183685 -1.90834081]
[-66.08837128 -10.85754204]
[-72.91339111 -24.55709457]
[-72.57855225 -39.85894012]
[-65.16079712 -53.24682617]
[-52.36467743 -61.64431763]
[-37.13064194 -63.12172699]
[-22.95936203 -57.33956146]
[-13.10729504 -45.62651825]
[-9.83837414 -30.67417145]
[-13.90377235 -15.91845608]
[-2.90799475 -5.71586466]
[8.08778381 4.48672628]
[19.08356094 14.68931770]
[30.07933998 24.89190865]
[41.07511902 35.09449768]
[52.07089615 45.29709244]
[63.06667328 55.49968338]
[74.06245422 65.70227051]
[98.76047516 57.01681519]
[123.91796875 64.26456451]
[140.20944214 84.75888824]
[154.94793701 81.97021484]
[169.68643188 79.18154144]
[184.42492676 76.39286804]
[186.35623169 64.66354370]
[191.65994263 54.06491470]
[199.84095764 45.53923035]
[210.14938354 39.83741379]
[221.64936829 37.45296478]
[233.30398560 38.57929230]
[239.55839539 24.94542694]
[245.81280518 11.31155968]
[252.06723022 -2.32230759]
[258.32162476 -15.95617485]
[264.57604980 -29.59004211]
[262.50708008 -45.85815048]
[275.72317505 -55.56724930]
[290.62875366 -48.72944641]
[291.89025879 -32.37889099]
[278.20989990 -23.33563042]
[271.95550537 -9.70176315]
[265.70108032 3.93210411]
[259.44668579 17.56597137]
[253.19226074 31.19983864]
[246.93785095 44.83370590]
[251.27810669 48.46040726]
[255.04838562 52.67652512]
[258.16946411 57.39345932]
[260.57577515 62.51208878]
[262.21673584 67.92484283]
[263.05786133 73.51798248]
[263.08148193 79.17396545]
[277.57034302 83.05625153]
[292.05923462 86.93853760]
[306.54812622 90.82082367]
[321.03701782 94.70310974]
[335.52590942 98.58539581]
[361.43508911 64.75417328]
[376.34075928 63.07470703]
[391.24642944 61.39523697]
[406.15213013 59.71577072]
[421.05780029 58.03630447]
[432.14440918 46.44031525]
[448.10934448 48.02163696]
[456.70565796 61.56721115]
[451.33905029 76.68603516]
[436.12625122 81.78023529]
[422.73727417 72.94198608]
[407.83160400 74.62145233]
[392.92590332 76.30091858]
[378.02023315 77.98038483]
[363.11453247 79.65985870]
[360.97097778 86.84700775]
[375.34527588 91.13412476]
[389.71960449 95.42124176]
[404.09384155 99.70858002]
[399.80627441 114.08275604]
[385.43246460 109.79554749]
[371.05816650 105.50843048]
[356.68386841 101.22131348]
[354.54031372 108.40846252]
[366.09085083 117.97846985]
[377.64138794 127.54846954]
[393.35128784 125.82357025]
[405.62707520 135.77748108]
[407.18579102 151.50471497]
[397.10263062 163.67459106]
[381.35980225 165.06694031]
[369.29721069 154.85569763]
[368.07138062 139.09901428]
[356.52084351 129.52900696]
[344.97030640 119.95900726]
[331.64361572 113.07427979]
[317.15472412 109.19199371]
[302.66583252 105.30970764]
[288.17697144 101.42742157]
[273.68807983 97.54513550]
[259.19918823 93.66284943]
[244.24717712 110.16278076]
[222.61434937 115.85218811]
[201.28648376 108.77906799]
[187.21360779 91.13137054]
[172.47511292 93.92004395]
[157.73661804 96.70871735]
[142.99810791 99.49739075]
[142.01057434 109.17620850]
[138.87249756 118.38529205]
[133.74456787 126.65323639]
[126.88923645 133.55680847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[17 28]
[18 27]
[19 26]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[79 163]
[80 162]
[81 161]
[82 160]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
[110 156]
[111 155]
[112 154]
[113 153]
[114 152]
[115 151]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[139 150]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
