%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAACAGAGCUAGAAGGAUGCCAUGAAGGAAAUGACUGCUUUGUAAAGCGAGGGUAAACUUCUGAAAUGCUUUGAUUAAAAUAAGCUAUAUUAAAGACCCCAAAACCACUUCCCUCGCAGCUUUCCUCUGAAUGUCUUUCACAUGAA\
) } def
/len { sequence length } bind def

/coor [
[81.93733978 457.27459717]
[67.44300842 461.49560547]
[52.34733963 461.64840698]
[37.77053070 457.72167969]
[24.79428101 450.00677490]
[14.38151455 439.07623291]
[7.30492449 425.74114990]
[4.08964348 410.99108887]
[4.97426558 395.92059326]
[9.89314556 381.64797974]
[18.48127174 369.23239136]
[30.10134506 359.59515381]
[43.89108276 353.45138550]
[58.82719040 351.25704956]
[60.71974182 336.37692261]
[62.61228943 321.49676514]
[64.50483704 306.61663818]
[66.39738464 291.73651123]
[68.28993225 276.85638428]
[70.18248749 261.97625732]
[57.61181641 253.94856262]
[49.74083328 241.20663452]
[48.17626953 226.24958801]
[53.28171921 212.03851318]
[64.09495544 201.41020203]
[78.50878143 196.51092529]
[80.40132904 181.63079834]
[78.10969543 174.55064392]
[82.49385071 166.45814514]
[84.69969177 151.62121582]
[86.90554047 136.78430176]
[89.11138153 121.94738007]
[91.31723022 107.11045837]
[77.72599030 113.45697021]
[64.19541168 106.98213196]
[60.61127853 92.41662598]
[69.59224701 80.40237427]
[84.57659912 79.71730042]
[94.61621094 90.86135864]
[98.37105560 76.33892059]
[102.12590790 61.81649017]
[88.99436188 69.06649780]
[74.24170685 66.35372162]
[64.54827118 54.90657425]
[64.30345154 39.90857315]
[73.61811829 28.15114784]
[88.27436829 24.95832253]
[101.63554382 31.77588081]
[107.65132141 45.51562500]
[113.50096130 31.70325279]
[119.35060883 17.89087868]
[125.20024872 4.07850456]
[131.04989624 -9.73386955]
[136.89953613 -23.54624367]
[142.74917603 -37.35861588]
[130.22232056 -45.68411255]
[119.44149780 -56.16696930]
[110.77287292 -68.44911957]
[104.51045990 -82.11142731]
[100.86621094 -96.68798065]
[99.96281433 -111.68199921]
[101.82957458 -126.58274078]
[106.40146637 -140.88291931]
[113.52137756 -154.09594727]
[122.94554138 -165.77255249]
[134.35185242 -175.51596069]
[147.35092163 -182.99545288]
[161.49928284 -187.95759583]
[176.31460571 -190.23475647]
[191.29209900 -189.75083923]
[205.92173767 -186.52378845]
[211.77137756 -200.33615112]
[217.62103271 -214.14852905]
[223.47067261 -227.96090698]
[229.32031250 -241.77328491]
[235.16995239 -255.58564758]
[241.01960754 -269.39804077]
[230.59358215 -280.49838257]
[225.58998108 -294.88183594]
[226.87571716 -310.05639648]
[234.22802734 -323.39294434]
[246.37307739 -332.58084106]
[261.20666504 -336.02825928]
[276.15878296 -333.13787842]
[288.63888550 -324.41052246]
[296.48471069 -311.35818481]
[298.33691406 -296.24234009]
[293.87463379 -281.68185425]
[283.87094116 -270.19943237]
[270.05905151 -263.78445435]
[254.83197021 -263.54837036]
[248.98233032 -249.73600769]
[243.13269043 -235.92362976]
[237.28305054 -222.11126709]
[231.43339539 -208.29888916]
[225.58375549 -194.48651123]
[219.73411560 -180.67413330]
[232.23162842 -172.41264343]
[243.00108337 -161.99253845]
[251.67466736 -149.76763916]
[257.95581055 -136.15345764]
[261.62927246 -121.61302185]
[262.56851196 -106.64118195]
[260.74005127 -91.74774170]
[256.20477295 -77.44010162]
[249.11566162 -64.20598602]
[239.71292114 -52.49678802]
[228.31559753 -42.71221161]
[215.31092834 -35.18660355]
[201.14103699 -30.17752457]
[186.28805542 -27.85695457]
[171.25758362 -28.30537415]
[156.56155396 -31.50897408]
[150.71191406 -17.69659996]
[144.86227417 -3.88422608]
[139.01261902 9.92814827]
[133.16297913 23.74052238]
[127.31333923 37.55289459]
[121.46369171 51.36526871]
[116.64833832 65.57133484]
[112.89349365 80.09377289]
[109.13864136 94.61620331]
[106.15415192 109.31629944]
[103.94830322 124.15322113]
[101.74246216 138.99014282]
[99.53661346 153.82707214]
[97.33077240 168.66398621]
[95.28145599 183.52334595]
[93.38890839 198.40347290]
[106.11742401 206.75488281]
[113.92588043 219.75161743]
[115.31142426 234.78825378]
[110.05257416 248.87745667]
[99.24257660 259.24343872]
[85.06261444 263.86880493]
[83.17006683 278.74893188]
[81.27751923 293.62905884]
[79.38497162 308.50918579]
[77.49241638 323.38931274]
[75.59986877 338.26947021]
[73.70732117 353.14959717]
[87.61859894 359.01293945]
[99.43138123 368.41299438]
[108.26906586 380.65219116]
[113.47586060 394.82229614]
[114.66536713 409.87179565]
[111.74932861 424.68392944]
[104.94412994 438.15951538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[26 129]
[27 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[39 122]
[40 121]
[41 120]
[49 119]
[50 118]
[51 117]
[52 116]
[53 115]
[54 114]
[55 113]
[71 97]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
[77 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
