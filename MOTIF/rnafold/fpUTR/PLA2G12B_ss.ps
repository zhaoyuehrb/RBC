%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAGACAGAUUGAAUGUUCCAGAUAAUCCCUUUCCCAGUCCUGCCUGACAUCUGGGUAGGGGGUUUGUCCCUGGAAUUCUGGGACACUGGCUGGGGUUUGAGGAGAGAAGCCAGUACCUACCUGGCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[17.44058990 159.83906555]
[10.09224415 172.91583252]
[2.74389863 185.99259949]
[-4.60444736 199.06936646]
[-11.95279312 212.14613342]
[-7.90909481 227.18894958]
[-15.54764557 240.34596252]
[-29.91358948 244.10830688]
[-37.26193619 257.18508911]
[-39.75025940 273.95541382]
[-56.55405426 276.20684814]
[-63.36923599 260.68301392]
[-50.33870316 249.83673096]
[-42.99035645 236.75996399]
[-47.24724960 222.53273010]
[-39.98126602 209.16633606]
[-25.02956009 204.79779053]
[-17.68121338 191.72102356]
[-10.33286762 178.64425659]
[-2.98452187 165.56748962]
[4.36382389 152.49072266]
[-8.84026051 159.60775757]
[-23.34647560 163.42478943]
[-38.34340286 163.72830200]
[-52.99217987 160.50134277]
[-66.47341919 153.92439270]
[-78.03302765 144.36534119]
[-87.02441406 132.35888672]
[-92.94463348 118.57661438]
[-95.46253967 103.78945160]
[-94.43729401 88.82453156]
[-89.92623901 74.51892090]
[-82.18170166 61.67282867]
[-71.63687897 51.00479889]
[-58.88161469 43.11156464]
[-44.62937546 38.43463516]
[-29.67737198 37.23562241]
[-14.86196041 39.58158875]
[-1.01185071 45.34131622]
[11.09823990 54.19262695]
[20.79092407 65.64041901]
[27.52403259 79.04434204]
[30.92094421 93.65464783]
[30.79165077 108.65409088]
[27.14338303 123.20366669]
[20.18089867 136.48852539]
[33.17127991 128.98852539]
[46.16165924 121.48853302]
[59.15204239 113.98853302]
[63.41081238 107.86377716]
[72.53311157 106.46918488]
[85.69448853 99.27349091]
[93.12861633 87.43180847]
[107.10980988 87.56513214]
[120.27119446 80.36943054]
[133.43257141 73.17373657]
[146.59394836 65.97804260]
[159.75534058 58.78234482]
[172.91671753 51.58664703]
[186.07809448 44.39094925]
[199.23947144 37.19525528]
[212.40086365 29.99955750]
[222.24720764 11.03465557]
[242.81188965 12.03036213]
[255.43925476 3.93410230]
[268.06661987 -4.16215754]
[280.69400024 -12.25841713]
[293.32138062 -20.35467720]
[300.76251221 -34.31678009]
[315.65283203 -34.67288208]
[328.28021240 -42.76914215]
[340.81253052 -51.01177597]
[353.24810791 -59.39966965]
[365.68365479 -67.78756714]
[372.79788208 -81.91903687]
[387.67590332 -82.62152100]
[400.11148071 -91.00941467]
[412.54702759 -99.39730835]
[424.98260498 -107.78520203]
[437.41815186 -116.17309570]
[449.85372925 -124.56098938]
[462.28930664 -132.94888306]
[474.72485352 -141.33677673]
[487.16043091 -149.72467041]
[487.56735229 -165.23640442]
[497.04083252 -177.52595520]
[511.93811035 -181.86772156]
[526.53088379 -176.59222412]
[535.20788574 -163.72798157]
[534.63269043 -148.22157288]
[525.02648926 -136.03552246]
[510.08297729 -131.85560608]
[495.54830933 -137.28910828]
[483.11276245 -128.90121460]
[470.67718506 -120.51332092]
[458.24163818 -112.12542725]
[445.80606079 -103.73753357]
[433.37048340 -95.34963989]
[420.93493652 -86.96174622]
[408.49935913 -78.57385254]
[396.06381226 -70.18595886]
[389.83905029 -56.65444565]
[374.07156372 -55.35200119]
[361.63598633 -46.96410751]
[349.20043945 -38.57621384]
[345.37927246 -32.16930008]
[336.37646484 -30.14176941]
[323.74911499 -22.04550934]
[317.21118164 -8.66250324]
[301.41763306 -7.72730303]
[288.79025269 0.36895671]
[276.16290283 8.46521664]
[263.53552246 16.56147575]
[250.90814209 24.65773582]
[250.43083191 33.68321991]
[245.73712158 41.56857681]
[237.79486084 46.43596649]
[228.36169434 47.05717087]
[219.59655762 43.16093826]
[206.43518066 50.35663605]
[193.27378845 57.55233002]
[180.11241150 64.74803162]
[166.95103455 71.94372559]
[153.78965759 79.13941956]
[140.62826538 86.33512115]
[127.46688843 93.53081512]
[114.30551147 100.72650909]
[106.87138367 112.56819153]
[92.89019012 112.43486786]
[79.72880554 119.63056946]
[66.65203857 126.97891235]
[53.66165924 134.47891235]
[40.67127991 141.97891235]
[27.68089867 149.47891235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[8 14]
[9 13]
[46 134]
[47 133]
[48 132]
[49 131]
[51 130]
[52 129]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
[64 114]
[65 113]
[66 112]
[67 111]
[68 110]
[70 108]
[71 107]
[72 105]
[73 104]
[74 103]
[76 101]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
