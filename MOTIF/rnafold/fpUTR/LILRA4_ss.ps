%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUGUGUCUGUCUGUGUCUACGGGCACCGUGGCCACACCUGCCUGCACAGCCAGGGCCAGGAGGAGGAGAUGCC\
) } def
/len { sequence length } bind def

/coor [
[144.65751648 239.97723389]
[154.59147644 228.50201416]
[147.53739929 215.26419067]
[141.44122314 210.71553040]
[140.47810364 201.33940125]
[133.96984863 187.82485962]
[119.87004852 183.16320801]
[113.07723236 169.55026245]
[118.06240082 154.79269409]
[111.55414581 141.27816772]
[105.04589081 127.76363373]
[98.53763580 114.24909973]
[87.09457397 106.21492767]
[87.94783020 92.25915527]
[81.43957520 78.74462128]
[74.93132019 65.23008728]
[68.42306519 51.71555710]
[61.91481018 38.20102310]
[55.40655136 24.68648911]
[51.12794876 22.06156540]
[48.37386322 18.47940445]
[47.25746536 14.61182785]
[47.63391495 11.08794117]
[49.14365005 8.40417480]
[44.91766357 -5.98822021]
[40.69167328 -20.38061523]
[36.46568680 -34.77301025]
[32.23969650 -49.16540527]
[21.17859650 -56.15140152]
[18.06046295 -68.43981934]
[24.05793381 -79.14785767]
[20.42250824 -93.70064545]
[16.78708267 -108.25343323]
[5.00708294 -119.66236115]
[9.25940800 -135.50059509]
[25.16963005 -139.47512817]
[36.37067795 -127.49729156]
[31.33987236 -111.88886261]
[34.97529602 -97.33607483]
[38.61072540 -82.78328705]
[51.46920395 -71.02127075]
[46.63209152 -53.39139175]
[50.85808182 -38.99899673]
[55.08406830 -24.60660362]
[59.31005859 -10.21420860]
[63.53604507 4.17818594]
[68.92108917 18.17823410]
[75.42934418 31.69276619]
[81.93759918 45.20729828]
[88.44585419 58.72183228]
[94.95410919 72.23636627]
[101.46236420 85.75090027]
[112.90542603 93.78507233]
[112.05216980 107.74084473]
[118.56042480 121.25537872]
[125.06867981 134.76991272]
[131.57693481 148.28443909]
[146.22306824 153.58807373]
[152.63084412 167.38644409]
[147.48439026 181.31660461]
[153.99264526 194.83114624]
[160.77522278 208.21011353]
[167.82929993 221.44793701]
[182.89437866 219.60185242]
[197.60806274 223.32635498]
[209.98045349 232.11773682]
[218.33827209 244.78703308]
[221.55122375 259.62081909]
[219.18475342 274.61297607]
[211.55892944 287.73590088]
[199.70506287 297.21484375]
[185.22630310 301.76785278]
[170.08078003 300.77914429]
[156.31678772 294.38250732]
[145.79582214 283.44296265]
[139.94073486 269.44000244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[5 61]
[6 60]
[9 57]
[10 56]
[11 55]
[12 54]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
