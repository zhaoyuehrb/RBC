%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACACUGGCGCCGCGGGUCAGGCAGCUGCGUGCGCGUCUCCUCCAGGCAGCAAGGGGAACCCGAGGCCGCCGGCGCCCGGACC\
) } def
/len { sequence length } bind def

/coor [
[85.10454559 375.44131470]
[72.78982544 366.48211670]
[65.18942261 353.28536987]
[63.62017059 338.13751221]
[68.35394287 323.66302490]
[78.57057953 312.36965942]
[92.50000000 306.21405029]
[92.50000000 291.21405029]
[92.50000000 276.21405029]
[92.50000000 261.21405029]
[92.50000000 246.21406555]
[92.50000000 231.21406555]
[92.50000000 216.21406555]
[81.81912994 205.89637756]
[81.60544586 190.68424988]
[92.50000000 179.55111694]
[92.50000000 164.55111694]
[92.50000000 149.55111694]
[92.50000000 134.55111694]
[79.56555176 128.85244751]
[69.89685822 118.54268646]
[65.03913116 105.26950073]
[65.76870728 91.15417480]
[71.96899414 78.45254517]
[82.64907837 69.19454956]
[78.22775269 54.86095810]
[73.80642700 40.52736664]
[69.38510132 26.19377327]
[64.96376801 11.86018085]
[53.50254440 0.95372057]
[57.14466858 -13.48872375]
[52.72334290 -27.82231522]
[37.66499329 -30.56178284]
[25.61172295 -39.99456024]
[19.33328629 -53.95306396]
[20.27242279 -69.22973633]
[28.21332550 -82.31410217]
[41.33123398 -90.19947052]
[56.61174393 -91.07385254]
[70.54351044 -84.73631287]
[79.92511749 -72.64316559]
[82.60073853 -57.57334137]
[77.95552826 -42.98976898]
[67.05693054 -32.24364471]
[71.47826385 -17.91005135]
[82.62324524 -8.02882576]
[79.29736328 7.43885279]
[83.71868896 21.77244568]
[88.14001465 36.10603714]
[92.56134796 50.43962860]
[96.98267365 64.77322388]
[109.45493317 65.93191528]
[120.74044800 71.36672974]
[129.42268372 80.39550018]
[143.38578796 74.91539001]
[157.34889221 69.43527222]
[169.88414001 58.02021027]
[184.32321167 66.90557861]
[179.78221130 83.24007416]
[162.82901001 83.39837646]
[148.86590576 88.87849426]
[134.90278625 94.35861206]
[133.26625061 111.97441101]
[123.30019379 126.59194183]
[107.50000000 134.55111694]
[107.50000000 149.55111694]
[107.50000000 164.55111694]
[107.50000000 179.55111694]
[118.39455414 190.68424988]
[118.18087006 205.89637756]
[107.50000000 216.21406555]
[107.50000000 231.21406555]
[107.50000000 246.21406555]
[107.50000000 261.21405029]
[107.50000000 276.21405029]
[107.50000000 291.21405029]
[107.50000000 306.21405029]
[121.42942047 312.36965942]
[131.64605713 323.66302490]
[136.37983704 338.13751221]
[134.81057739 353.28536987]
[127.21017456 366.48211670]
[114.89545441 375.44131470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[16 68]
[17 67]
[18 66]
[19 65]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[31 45]
[32 44]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
