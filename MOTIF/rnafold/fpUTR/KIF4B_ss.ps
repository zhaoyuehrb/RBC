%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUUGAAACUUGGCGGUUAAAGCUCCGGCUGGGACAGGGCGGCGGGAGACCCCGGGUGAACGGGGAAGGGACAUUUAGUUUGAGACGGUGCUGAGAUAGGAUC\
) } def
/len { sequence length } bind def

/coor [
[79.89360809 404.26083374]
[82.65415192 385.07675171]
[83.09865570 370.08334351]
[83.54315186 355.08993530]
[83.98765564 340.09649658]
[84.43215179 325.10308838]
[73.09147644 317.89135742]
[66.78089142 305.90252686]
[67.26340485 292.25399780]
[74.51952362 280.55584717]
[86.72384644 273.95590210]
[87.61244965 258.98223877]
[88.50106049 244.00859070]
[89.38967133 229.03494263]
[90.27828217 214.06127930]
[91.16689301 199.08763123]
[92.05550385 184.11396790]
[92.50000000 169.12055969]
[92.50000000 154.12055969]
[92.50000000 139.12055969]
[78.90153503 133.78642273]
[68.14033508 123.90878296]
[61.66355133 110.81594086]
[60.34215546 96.26860046]
[64.35385132 82.22304535]
[52.43103409 73.12104797]
[40.50821686 64.01904297]
[28.58540154 54.91704178]
[12.92127705 52.69312286]
[7.49994373 38.82018661]
[-4.42287254 29.71818352]
[-16.34568977 20.61618042]
[-28.26850510 11.51417828]
[-43.09652710 16.08685684]
[-57.76948547 11.03868961]
[-66.64532471 -1.68919683]
[-66.31110382 -17.20267296]
[-56.89533997 -29.53648949]
[-42.01858521 -33.94804001]
[-27.40125656 -28.74099922]
[-18.66401291 -15.91757488]
[-19.16650391 -0.40863803]
[-7.24368715 8.69336414]
[4.67912960 17.79536629]
[16.60194588 26.89736938]
[31.41326904 28.47025108]
[37.68740463 42.99422455]
[49.61021805 52.09622955]
[61.53303528 61.19823074]
[73.45585632 70.30023193]
[89.50053406 61.57566833]
[107.75241089 60.92868042]
[113.38982391 47.02833557]
[119.02723694 33.12799072]
[124.66464996 19.22764778]
[130.30206299 5.32730341]
[123.91594696 -9.12928677]
[129.70045471 -23.83693695]
[144.22375488 -30.06985855]
[158.86943054 -24.13017082]
[164.94845581 -9.54178429]
[158.85424805 5.04026937]
[144.20240784 10.96471691]
[138.56500244 24.86506081]
[132.92758179 38.76540375]
[127.29016876 52.66574860]
[121.65275574 66.56609344]
[126.83912659 70.56652832]
[131.29978943 75.36281586]
[134.91413879 80.82526398]
[137.58445740 86.80618286]
[152.42005920 84.59148407]
[167.25566101 82.37678528]
[182.09126282 80.16208649]
[192.75344849 68.17470551]
[208.76493835 69.18057251]
[217.84307861 82.40806580]
[213.02391052 97.71019745]
[198.00428772 103.34847260]
[184.30595398 94.99768829]
[169.47035217 97.21238708]
[154.63475037 99.42708588]
[139.79914856 101.64178467]
[135.18440247 118.67419434]
[123.66438293 132.04161072]
[107.50000000 139.12055969]
[107.50000000 154.12055969]
[107.50000000 169.12055969]
[110.58848572 175.26191711]
[110.06552887 181.12646484]
[107.02915955 185.00257874]
[106.14054871 199.97624207]
[105.25193787 214.94989014]
[104.36332703 229.92355347]
[103.47471619 244.89720154]
[102.58610535 259.87084961]
[101.69750214 274.84451294]
[114.87342834 285.32696533]
[119.21990967 301.42230225]
[113.23155212 316.80450439]
[99.42556763 325.54760742]
[98.98106384 340.54101562]
[98.53656769 355.53442383]
[98.09206390 370.52783203]
[97.64756775 385.52124023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 88]
[19 87]
[20 86]
[25 50]
[26 49]
[27 48]
[28 47]
[30 45]
[31 44]
[32 43]
[33 42]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
