%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGGCGGCGACGGCGGCGGCGGCCUGAACAGUGUGCACCACCACCCCCUGCUCCCCCGUCACGAACUCAAC\
) } def
/len { sequence length } bind def

/coor [
[192.04525757 287.52941895]
[183.84103394 274.97192383]
[175.63681030 262.41442871]
[167.43258667 249.85691833]
[159.22836304 237.29942322]
[152.74766541 233.30909729]
[150.95710754 224.04910278]
[143.27883911 211.16329956]
[135.60055542 198.27748108]
[127.92228699 185.39167786]
[120.24401093 172.50587463]
[117.24294281 171.79032898]
[114.39620209 169.66603088]
[112.31669617 166.20729065]
[111.56803131 161.73852539]
[112.56800079 156.80435181]
[107.11538696 142.83049011]
[101.59147644 137.59515381]
[101.73933411 128.16477966]
[96.86884308 113.97752380]
[86.45216370 104.65097809]
[88.94390106 90.89296722]
[84.07341003 76.70570374]
[72.27442932 66.16556549]
[75.45996094 51.61559296]
[70.58946991 37.42833328]
[65.52165222 32.47497177]
[64.15966034 26.57670212]
[65.95568085 21.86371231]
[62.27339935 7.32270861]
[51.38511658 -4.15578747]
[55.76129532 -18.39300346]
[52.07901382 -32.93400574]
[42.32941437 -46.80417633]
[52.95857620 -60.01240540]
[68.59306335 -53.45503616]
[66.62001801 -36.61629105]
[70.30229950 -22.07528496]
[80.92720032 -11.63685894]
[76.81439972 3.64042616]
[80.49668884 18.18143082]
[84.77672577 32.55784225]
[89.64721680 46.74510193]
[101.09783173 56.27047729]
[98.26066589 71.83521271]
[103.13115692 86.02247620]
[113.54783630 95.34902191]
[111.05609894 109.10703278]
[115.92658997 123.29429626]
[121.08924866 137.37786865]
[126.54187012 151.35173035]
[133.12982178 164.82759094]
[140.80809021 177.71340942]
[148.48637390 190.59921265]
[156.16464233 203.48501587]
[163.84292603 216.37083435]
[171.78587341 229.09519958]
[179.99008179 241.65269470]
[188.19430542 254.21018982]
[196.39852905 266.76770020]
[204.60275269 279.32519531]
[219.44375610 276.14569092]
[234.43052673 278.54592896]
[247.53622437 286.20129395]
[256.98843384 298.07650757]
[261.50878906 312.56549072]
[260.48599243 327.70874023]
[254.05833435 341.45828247]
[243.09510803 351.95455933]
[229.07901001 357.77807617]
[213.90559387 358.14123535]
[199.62693787 352.99493408]
[188.17411804 343.03512573]
[181.09603882 329.60885620]
[179.34994507 314.53186035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[16 51]
[17 50]
[19 49]
[20 48]
[22 46]
[23 45]
[25 43]
[26 42]
[29 41]
[30 40]
[32 38]
[33 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
