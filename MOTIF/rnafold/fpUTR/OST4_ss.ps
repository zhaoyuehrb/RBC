%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUGUUCGGGCCUGAGCUGGCGCUACGAAGUUCCGGUCCAGGUCUCUGACUUCGGGCUUGUUCGCUGGUGGCGUCGGAGCCGAGCCGGACUGGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[37.93647385 155.52577209]
[31.74673462 169.18911743]
[20.03433609 178.56033325]
[5.34592772 181.60182190]
[-9.12476540 177.65225220]
[-20.23135376 167.57040405]
[-25.55891037 153.54838562]
[-23.94905853 138.63502502]
[-15.75182724 126.07295990]
[-2.75123572 118.59408569]
[-17.44569778 115.58197784]
[-32.14015961 112.56987000]
[-46.83462143 109.55776978]
[-61.52908325 106.54566193]
[-76.22354889 103.53355408]
[-90.91800690 100.52144623]
[-105.99078369 105.32997131]
[-116.90511322 95.19454956]
[-131.59957886 92.18244171]
[-146.29403687 89.17034149]
[-160.98849487 86.15823364]
[-175.68295288 83.14612579]
[-190.75573730 87.95465088]
[-201.67005920 77.81922913]
[-216.36451721 74.80712128]
[-231.05899048 71.79501343]
[-246.43890381 77.48624420]
[-258.88308716 66.80568695]
[-255.59001160 50.74057388]
[-239.94732666 45.81732559]
[-228.04687500 57.10055542]
[-213.35241699 60.11265945]
[-198.65795898 63.12476730]
[-184.63621521 58.10079575]
[-172.67085266 68.45166779]
[-157.97639465 71.46376801]
[-143.28192139 74.47587585]
[-128.58746338 77.48798370]
[-113.89300537 80.50009155]
[-99.87126923 75.47612000]
[-87.90589905 85.82698822]
[-73.21144104 88.83909607]
[-58.51697922 91.85119629]
[-43.82251740 94.86330414]
[-29.12805367 97.87541199]
[-14.43359184 100.88751984]
[0.26087025 103.89962006]
[15.25361443 104.36611938]
[30.10691261 102.27339172]
[44.96021271 100.18066406]
[59.81351089 98.08792877]
[74.66680908 95.99520111]
[89.52011108 93.90247345]
[104.30113983 91.34881592]
[118.99559784 88.33671570]
[130.96096802 77.98583984]
[144.98269653 83.00981140]
[159.67716980 79.99771118]
[174.37162781 76.98560333]
[189.06608582 73.97349548]
[203.76054382 70.96138763]
[218.45501709 67.94927979]
[233.04869080 64.48163605]
[247.52746582 60.56180954]
[262.00625610 56.64197922]
[276.48501587 52.72215271]
[287.78372192 41.64742279]
[302.09066772 45.78994751]
[316.56945801 41.87012100]
[327.74542236 29.86887169]
[343.66390991 33.81009674]
[347.94937134 49.63940048]
[336.19326782 61.07295609]
[320.48928833 56.34889603]
[306.01049805 60.26872635]
[295.74740601 71.06307983]
[280.40484619 67.20092773]
[265.92605591 71.12075806]
[251.44729614 75.04058838]
[236.96852112 78.96041107]
[233.78573608 82.73674011]
[228.12905884 84.44310760]
[221.46711731 82.64374542]
[206.77265930 85.65585327]
[192.07820129 88.66796112]
[177.38372803 91.68006134]
[162.68927002 94.69216919]
[147.99481201 97.70427704]
[137.08049011 107.83969879]
[122.00770569 103.03117371]
[107.31324768 106.04328156]
[103.38033295 109.79965210]
[97.59127045 110.98448944]
[91.61283875 108.75576782]
[76.75953674 110.84850311]
[61.90624237 112.94123077]
[47.05294037 115.03395844]
[32.19964218 117.12669373]
[17.34634399 119.21942139]
[29.85802269 127.49334717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[24 33]
[25 32]
[26 31]
[48 99]
[49 98]
[50 97]
[51 96]
[52 95]
[53 94]
[54 91]
[55 90]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 80]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
