%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACUGCUGGCUUUUUGCUGUAGCUCCACAUUCCUGUGCAUUGAGGGGUUAACAUUAGGCUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[76.97612762 323.55682373]
[61.85517120 321.47851562]
[49.13816071 313.03811646]
[41.35006332 299.91146851]
[40.03721619 284.70492554]
[45.46028519 270.43771362]
[56.54251480 259.94262695]
[71.08351898 255.30345154]
[73.12602234 240.44316101]
[75.16851807 225.58288574]
[77.21102142 210.72259521]
[79.25351715 195.86230469]
[81.29602051 181.00201416]
[83.33851624 166.14172363]
[74.16204834 154.46575928]
[76.02174377 139.36622620]
[88.33078766 129.82026672]
[90.37328339 114.95997620]
[83.67364502 107.06572723]
[82.50448608 96.77799225]
[87.26185608 87.58170319]
[96.33422852 82.59205627]
[99.71958160 67.97907257]
[103.10493469 53.36608124]
[106.49029541 38.75309753]
[109.87564850 24.14011002]
[113.26100159 9.52712440]
[116.64636230 -5.08586216]
[112.22325134 -20.27621078]
[122.63334656 -30.92887306]
[126.01870728 -45.54185867]
[114.37978363 -55.48138809]
[108.70393372 -69.69557953]
[110.29541779 -84.91812134]
[118.78852081 -97.65098572]
[132.23159790 -104.96824646]
[147.53552246 -105.18845367]
[161.18356323 -98.26100922]
[170.03950500 -85.77778625]
[172.06831360 -70.60733795]
[166.80378723 -56.23572540]
[155.45567322 -45.96543503]
[140.63168335 -42.15650558]
[137.24633789 -27.54351807]
[141.91157532 -13.39838696]
[131.25933838 -1.70050645]
[127.87399292 12.91247940]
[124.48863220 27.52546692]
[121.10327911 42.13845062]
[117.71792603 56.75143814]
[114.33256531 71.36442566]
[110.94721222 85.97740936]
[117.49551392 103.22200775]
[105.23357391 117.00247192]
[103.19107819 131.86276245]
[112.46819305 144.37567139]
[110.18511963 159.41702271]
[98.19880676 168.18421936]
[96.15630341 183.04450989]
[94.11380768 197.90480042]
[92.07130432 212.76509094]
[90.02880859 227.62538147]
[87.98630524 242.48567200]
[85.94380951 257.34594727]
[98.69396210 265.73620605]
[106.53368378 278.83206177]
[107.90641022 294.03332520]
[102.53956604 308.32177734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[17 55]
[18 54]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[30 44]
[31 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
