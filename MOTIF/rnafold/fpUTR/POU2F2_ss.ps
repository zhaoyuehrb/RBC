%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCCAGAGAGGGUGGGGAGAUGACACAGUUGUUCCCCCAGCCCUGGCGGGGCGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[120.73627472 236.77519226]
[130.75794983 225.04618835]
[126.33663177 210.71260071]
[121.91529846 196.37899780]
[117.49397278 182.04541016]
[113.07264709 167.71182251]
[98.94140625 163.08082581]
[90.14268494 150.87236023]
[90.22080994 135.64582825]
[99.35539246 123.24156952]
[94.93406677 108.90798187]
[89.54737854 102.46639252]
[90.66889191 93.74864960]
[86.96752930 79.21249390]
[76.06419373 67.74829102]
[80.42168427 53.50534821]
[76.72032166 38.96918869]
[73.01896667 24.43302917]
[69.31760406 9.89686966]
[65.61624146 -4.63928986]
[54.71290588 -16.10348701]
[59.07040024 -30.34643364]
[55.36903763 -44.88259125]
[51.66767883 -59.41875076]
[47.96631622 -73.95491028]
[44.26495361 -88.49107361]
[40.56359482 -103.02722931]
[30.79580116 -116.88459778]
[41.40761948 -130.10676575]
[57.05070114 -123.56991577]
[55.09975433 -106.72859192]
[58.80111313 -92.19242859]
[62.50247574 -77.65627289]
[66.20383453 -63.12011337]
[69.90519714 -48.58395386]
[73.60655975 -34.04779434]
[84.24514771 -23.62331963]
[80.15240479 -8.34065056]
[83.85375977 6.19550848]
[87.55512238 20.73166847]
[91.25648499 35.26782608]
[94.95784760 49.80398560]
[105.59643555 60.22846222]
[101.50368500 75.51113129]
[105.20504761 90.04728699]
[109.26765442 104.48665619]
[113.68898773 118.82024384]
[128.22389221 123.92343140]
[136.86585999 136.46017456]
[136.47328186 151.50376892]
[127.40623474 163.29049683]
[131.82756042 177.62408447]
[136.24888611 191.95767212]
[140.67022705 206.29125977]
[145.09155273 220.62486267]
[159.97903442 224.67039490]
[170.29901123 236.13780212]
[172.75843811 251.36787415]
[166.57250977 265.50073242]
[153.71511841 274.02664185]
[138.28903198 274.22503662]
[125.21665192 266.03256226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[10 47]
[11 46]
[13 45]
[14 44]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
