%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUGUUCCCAGGACGGGCGCGUCUUCAGGGUGGAAGCCUGGCGCACGUCCGGAGGUGCCGAGGACCCAACCAGCCCAAACUCUGGGGGAA\
) } def
/len { sequence length } bind def

/coor [
[173.22955322 170.55400085]
[162.01483154 160.59257507]
[150.80009460 150.63114929]
[132.79304504 152.93002319]
[118.44789886 141.30064392]
[116.92107391 122.58224487]
[105.05943298 113.40065002]
[91.23223114 111.32702637]
[85.75897217 98.46098328]
[73.89733887 89.27939606]
[56.69432449 91.84941101]
[43.15756989 81.46848297]
[41.25416565 64.85319519]
[29.08919716 56.07746124]
[16.92422867 47.30172729]
[4.75925875 38.52599335]
[-7.40571022 29.75025749]
[-23.12432098 27.95141411]
[-28.91941261 14.23040199]
[-41.08438110 5.45466757]
[-53.24935150 -3.32106757]
[-65.41432190 -12.09680271]
[-69.69224548 -12.21438408]
[-73.39588928 -13.48569202]
[-76.24785614 -15.61159897]
[-78.08807373 -18.23615646]
[-78.88195038 -20.98703384]
[-78.71575165 -23.51570892]
[-89.23240662 -34.21150589]
[-99.74905396 -44.90730286]
[-110.26570892 -55.60309982]
[-125.83944702 -54.19151306]
[-138.64738464 -63.16317368]
[-142.64201355 -78.28193665]
[-135.93716431 -92.40918732]
[-121.69869232 -98.87446594]
[-106.64955139 -94.62506866]
[-97.89549255 -81.66742706]
[-99.56990814 -66.11975098]
[-89.05326080 -55.42395401]
[-78.53660583 -44.72815704]
[-68.01995850 -34.03236008]
[-56.63858414 -24.26177216]
[-44.47361755 -15.48603630]
[-32.30864716 -6.71030188]
[-20.14367867 2.06543326]
[-5.29518700 3.23657632]
[1.37002468 17.58528709]
[13.53499413 26.36102295]
[25.69996262 35.13675690]
[37.86493301 43.91249466]
[50.02989960 52.68822861]
[62.45897675 48.86226273]
[74.98863220 53.01678467]
[82.90105438 63.82674026]
[83.07892609 77.41775513]
[94.94056702 86.59934998]
[108.76776886 88.67297363]
[114.24102783 101.53901672]
[126.10266113 110.72060394]
[137.61859131 106.89830017]
[149.41160583 109.18415070]
[158.48054504 116.87554169]
[162.57685852 127.90983582]
[160.76152039 139.41642761]
[171.97624207 149.37785339]
[183.19097900 159.33926392]
[194.89584351 168.71987915]
[207.06082153 177.49562073]
[220.03132629 176.22369385]
[230.01843262 183.95365906]
[231.91307068 196.03146362]
[243.77470398 205.21304321]
[255.63633728 214.39463806]
[267.49798584 223.57623291]
[282.35626221 219.10289001]
[296.99511719 224.24913025]
[305.78558350 237.03613281]
[305.34753418 252.54702759]
[295.84945679 264.81756592]
[280.94351196 269.12945557]
[266.36135864 263.82470703]
[257.71011353 250.94308472]
[258.31637573 235.43786621]
[246.45475769 226.25627136]
[234.59310913 217.07469177]
[222.73147583 207.89309692]
[205.32128906 206.57312012]
[198.28507996 189.66058350]
[186.12011719 180.88485718]
[182.40898132 181.19099426]
[178.37324524 179.57679749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[6 60]
[7 59]
[9 57]
[10 56]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[19 46]
[20 45]
[21 44]
[22 43]
[28 42]
[29 41]
[30 40]
[31 39]
[68 90]
[69 89]
[72 87]
[73 86]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
