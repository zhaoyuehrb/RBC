%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGGUGAUGCUGAAGAUGAUGACCUUCUUCCAAGGCCUCUAGAGCCAUCAGCCUGUGCCAGGCACCCUCGACUUGCCUAGAGGCCCCCAAAAGUUGCAGUCCACAUCAGAGGCAGAGUCAGAGGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[94.82093811 128.11050415]
[87.34693909 128.73452759]
[81.77200317 142.66004944]
[76.19706726 156.58557129]
[83.74123383 170.28300476]
[80.66516113 185.61505127]
[68.42127228 195.34239197]
[52.79076385 194.87208557]
[41.15388107 184.42617798]
[39.00520325 168.93692017]
[47.35926819 155.71786499]
[62.27154922 151.01063538]
[67.84648132 137.08511353]
[73.42142487 123.15959167]
[69.77724457 103.77887726]
[77.09638214 88.42362213]
[89.80496979 81.79206085]
[87.67024994 66.94474030]
[85.53552246 52.09741974]
[83.40080261 37.25009918]
[71.03273010 27.78075027]
[69.07932281 12.69304466]
[78.18312073 0.96033537]
[76.04840088 -13.88698673]
[73.91367340 -28.73430824]
[57.68499374 -36.63687515]
[49.45334625 -52.52567673]
[52.30801773 -70.03301239]
[64.93657684 -82.26681519]
[62.09781265 -96.99575043]
[59.25904083 -111.72467804]
[43.61788177 -116.94183350]
[32.78250885 -129.24560547]
[29.62070847 -145.23724365]
[34.89763260 -160.56179810]
[47.09330750 -171.09410095]
[43.90483093 -185.75129700]
[40.71635056 -200.40850830]
[37.52787018 -215.06570435]
[34.33938980 -229.72290039]
[31.15091324 -244.38011169]
[27.96243286 -259.03732300]
[24.77395439 -273.69451904]
[21.58547401 -288.35171509]
[16.65882301 -296.16189575]
[18.49991035 -303.39553833]
[15.66114044 -318.12448120]
[1.02116132 -327.61441040]
[-2.21046448 -344.41671753]
[7.47643900 -358.11062622]
[4.28795958 -372.76782227]
[0.92528999 -387.38604736]
[-2.61109400 -401.96322632]
[-12.31377506 -407.14465332]
[-17.40945625 -416.64279175]
[-16.40266228 -427.15255737]
[-9.87504864 -435.16790771]
[-12.71381760 -449.89682007]
[-15.55258656 -464.62576294]
[-18.39135551 -479.35470581]
[-27.32600403 -493.76330566]
[-15.95383549 -506.33749390]
[-0.72292548 -498.89062500]
[-3.66242433 -482.19345093]
[-0.82365566 -467.46453857]
[2.01511288 -452.73559570]
[4.85388184 -438.00668335]
[18.58371925 -424.47262573]
[11.96607971 -405.49960327]
[15.50246334 -390.92242432]
[20.18213844 -385.10729980]
[18.94516182 -375.95629883]
[22.13364220 -361.29910278]
[33.88707733 -355.88214111]
[40.44601822 -344.49984741]
[39.20277023 -331.22589111]
[30.39007187 -320.96322632]
[33.22883987 -306.23431396]
[36.24267578 -291.54019165]
[39.43115616 -276.88299561]
[42.61963654 -262.22579956]
[45.80811691 -247.56858826]
[48.99659348 -232.91139221]
[52.18507385 -218.25418091]
[55.37355423 -203.59698486]
[58.56203079 -188.93977356]
[61.75051117 -174.28257751]
[75.05300140 -170.96896362]
[85.66767883 -162.18894958]
[91.47257233 -149.62327576]
[91.27514648 -135.71661377]
[85.05684662 -123.20194244]
[73.98797607 -114.56344604]
[76.82674408 -99.83451843]
[79.66551208 -85.10558319]
[91.40194702 -81.59957886]
[100.56233215 -73.35908508]
[105.34218597 -61.92384720]
[104.76432037 -49.47068024]
[98.87792206 -38.39910889]
[88.76100159 -30.86903000]
[90.89572144 -16.02170944]
[93.03044128 -1.17438722]
[105.07096100 7.51822853]
[107.44738007 22.54511452]
[98.24812317 35.11537552]
[100.38284302 49.96269989]
[102.51757050 64.81002045]
[104.65229034 79.65734100]
[125.86834717 89.12702179]
[130.05113220 118.43141174]
[137.85815430 131.23962402]
[145.66517639 144.04785156]
[153.47218323 156.85606384]
[161.27920532 169.66429138]
[176.63162231 169.21856689]
[190.14245605 176.52290344]
[198.17732239 189.61245728]
[198.57492065 204.96620178]
[191.22827148 218.45405579]
[178.11360168 226.44786072]
[162.75868225 226.79733276]
[149.29393005 219.40844727]
[141.34126282 206.26878357]
[141.03993225 190.91284180]
[148.47099304 177.47129822]
[140.66397095 164.66308594]
[132.85694885 151.85485840]
[125.04993439 139.04664612]
[117.24291992 126.23842621]
[109.76892090 126.86244965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[17 109]
[18 108]
[19 107]
[20 106]
[23 103]
[24 102]
[25 101]
[29 95]
[30 94]
[31 93]
[36 87]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 81]
[43 80]
[44 79]
[46 78]
[47 77]
[50 73]
[51 72]
[52 70]
[53 69]
[57 67]
[58 66]
[59 65]
[60 64]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
