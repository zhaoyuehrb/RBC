%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGGGAGGAGGGACGGGAGGAGGGAGGGCGGGCAGGCGCCAGCCCAGAGCAGCCCCGGGCACCAGCACGGACUCUCUCUUCCAGCCCAGGUGCCCCCCACUCUCGCUCCAUUCGGCGGGAGCACCCAGUCCUGUACGCCAAGGAACUGGUCCUGGGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[333.22735596 210.26863098]
[330.63281250 225.04254150]
[321.69110107 237.08604431]
[308.29953003 243.84370422]
[293.29959106 243.88162231]
[279.87402344 237.19178772]
[270.87152100 225.19364929]
[268.20233154 210.43304443]
[272.43273926 196.04196167]
[282.66519165 185.07394409]
[296.72827148 179.85629272]
[282.51663208 175.05738831]
[268.30502319 170.25846863]
[257.64526367 177.54524231]
[244.53965759 177.34442139]
[233.79322815 169.50486755]
[229.47563171 156.71716309]
[215.35852051 151.64691162]
[201.24142456 146.57666016]
[187.12432861 141.50640869]
[173.00721741 136.43615723]
[158.89012146 131.36590576]
[144.77302551 126.29564667]
[130.65592957 121.22539520]
[116.53881836 116.15514374]
[102.42172241 111.08489227]
[87.47741699 109.79345703]
[72.69979095 112.36672974]
[57.92216492 114.94001007]
[43.14453888 117.51328278]
[30.87629700 127.50331879]
[17.01035881 122.06410980]
[2.23273230 124.63738251]
[-12.54489422 127.21066284]
[-24.77600670 138.13458252]
[-40.26517868 132.74778748]
[-43.07847977 116.59175110]
[-30.32182693 106.28642273]
[-15.11816978 112.43302917]
[-0.34054285 109.85975647]
[14.43708420 107.28648376]
[25.64832878 97.48049927]
[40.57126236 102.73565674]
[55.34888840 100.16237640]
[70.12651825 97.58910370]
[84.90414429 95.01583099]
[87.43927002 87.95728302]
[73.23698425 83.13076782]
[59.03470612 78.30426025]
[44.06221771 77.39620209]
[40.01000595 62.95391464]
[52.32474136 54.38961029]
[64.45404816 63.21519089]
[78.48178864 68.52768707]
[92.50952148 73.84017944]
[95.04464722 66.78163147]
[85.28109741 55.39422226]
[75.51754761 44.00681305]
[60.66110992 38.56650543]
[58.25073624 23.86822701]
[48.48718643 12.48081875]
[32.84699249 7.54965210]
[29.56206131 -8.51712227]
[42.01164627 -19.19138527]
[57.38868332 -13.49236870]
[59.87459183 2.71726680]
[69.63814545 14.10467434]
[83.79622650 18.73048019]
[86.90495300 34.24326324]
[96.66850281 45.63066864]
[106.43205261 57.01807785]
[115.02748108 72.12485504]
[114.80417633 86.73899841]
[107.49197388 96.96778870]
[121.60907745 102.03804016]
[135.72618103 107.10829163]
[149.84327698 112.17855072]
[163.96037292 117.24880219]
[178.07748413 122.31905365]
[192.19458008 127.38930511]
[206.31167603 132.45956421]
[220.42878723 137.52981567]
[234.54588318 142.60006714]
[250.20361328 134.84927368]
[266.31353760 140.68380737]
[273.10391235 156.04684448]
[287.31555176 160.84574890]
[301.52719116 165.64466858]
[312.77453613 163.73657227]
[320.64178467 170.11766052]
[335.50714111 172.12301636]
[350.37246704 174.12837219]
[365.23782349 176.13374329]
[380.10317993 178.13909912]
[394.96850586 180.14447021]
[409.83386230 182.14982605]
[424.69921875 184.15519714]
[439.56454468 186.16055298]
[453.74795532 170.48304749]
[474.46865845 167.49331665]
[492.15386963 178.30702209]
[505.72137451 171.90994263]
[519.28887939 165.51284790]
[532.85638428 159.11576843]
[546.42388916 152.71867371]
[559.99139404 146.32159424]
[573.55889893 139.92449951]
[587.12640381 133.52742004]
[592.23199463 118.57051849]
[606.45489502 111.67967224]
[621.35699463 116.94307709]
[628.09710693 131.23806763]
[622.67645264 146.08366394]
[608.31097412 152.67225647]
[593.52349854 147.09492493]
[579.95599365 153.49201965]
[566.38848877 159.88909912]
[552.82098389 166.28619385]
[539.25347900 172.68327332]
[525.68597412 179.08036804]
[512.11846924 185.47744751]
[498.55096436 191.87454224]
[499.04739380 195.76943970]
[499.03781128 199.69584656]
[498.52236938 203.58827209]
[497.50970459 207.38185120]
[510.10018921 215.53535461]
[522.69067383 223.68887329]
[535.28112793 231.84239197]
[547.87164307 239.99589539]
[560.53961182 248.02844238]
[573.28399658 255.93930054]
[586.02832031 263.85015869]
[600.34674072 257.87002563]
[615.43786621 261.48089600]
[625.49877930 273.29434204]
[626.66088867 288.76785278]
[618.47735596 301.95150757]
[604.09484863 307.77597046]
[589.04382324 304.00158691]
[579.11163330 292.07968140]
[578.11749268 276.59448242]
[565.37310791 268.68365479]
[552.62878418 260.77279663]
[545.25286865 259.91293335]
[539.71807861 252.58638000]
[527.12762451 244.43286133]
[514.53717041 236.27935791]
[501.94665527 228.12583923]
[489.35617065 219.97233582]
[477.88104248 226.83843994]
[464.49206543 228.14299011]
[451.75695801 223.56712341]
[442.14733887 213.92631531]
[437.55920410 201.02590942]
[422.69384766 199.02053833]
[407.82849121 197.01518250]
[392.96316528 195.00981140]
[378.09780884 193.00445557]
[363.23245239 190.99908447]
[348.36712646 188.99372864]
[333.50177002 186.98835754]
[318.63641357 184.98300171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 88]
[12 87]
[13 86]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[27 46]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
[34 39]
[56 71]
[57 70]
[58 69]
[60 67]
[61 66]
[90 163]
[91 162]
[92 161]
[93 160]
[94 159]
[95 158]
[96 157]
[97 156]
[98 155]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[126 150]
[127 149]
[128 148]
[129 147]
[130 146]
[131 144]
[132 143]
[133 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
