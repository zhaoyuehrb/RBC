%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUCGGAAGUGCGCAGGCAGUGCUCGCGGCGGCGGCGACGGCGGCGGGAGGUUCGGUUGUCGCCCGUUGGCCGCGCGGCGCCGCGCUCGGCGGCCGCCAUUGCAGCUUGUUUUCACUUGCUUUUUAAAGACAGAAAGCUC\
) } def
/len { sequence length } bind def

/coor [
[138.38342285 378.16857910]
[124.75488281 371.90255737]
[115.49237823 360.10400391]
[112.64071655 345.37756348]
[116.82944489 330.97427368]
[127.13383484 320.07385254]
[141.27908325 315.08267212]
[156.14245605 317.10260010]
[168.44348145 325.68862915]
[163.90235901 311.39254761]
[159.36122131 297.09643555]
[154.82008362 282.80035400]
[150.27896118 268.50427246]
[135.06475830 256.64395142]
[139.47428894 237.02603149]
[134.30960083 222.94320679]
[129.14489746 208.86038208]
[123.98020935 194.77755737]
[118.81551361 180.69473267]
[113.65081787 166.61190796]
[109.70217896 163.80180359]
[107.52138519 158.44813538]
[108.58347321 151.79545593]
[104.04233551 137.49937439]
[99.50120544 123.20328522]
[80.61464691 112.76124573]
[78.48970795 91.28514862]
[67.15346527 81.46223450]
[55.81721878 71.63932800]
[44.48097610 61.81641388]
[33.14473343 51.99350357]
[21.80848885 42.17059326]
[10.36503029 32.47279358]
[-1.18426144 22.90128326]
[-12.73355293 13.32977009]
[-24.28284454 3.75825715]
[-35.83213806 -5.81325579]
[-47.48587036 -15.25732899]
[-59.24263763 -24.57282448]
[-70.99940491 -33.88831711]
[-82.75617218 -43.20381546]
[-94.51293182 -52.51931000]
[-106.26969910 -61.83480453]
[-118.02646637 -71.15029907]
[-129.98503113 -80.20527649]
[-142.13963318 -88.99537659]
[-154.29421997 -97.78547668]
[-170.29850769 -96.67089081]
[-181.04187012 -108.58559418]
[-178.28289795 -124.38963318]
[-164.13804626 -131.95950317]
[-149.45805359 -125.48825836]
[-145.50413513 -109.94007111]
[-133.34953308 -101.14997101]
[-121.19493866 -92.35987854]
[-116.35001373 -92.23706818]
[-111.54910278 -89.01698303]
[-108.71097565 -82.90706635]
[-96.95420837 -73.59156799]
[-85.19744110 -64.27607727]
[-73.44067383 -54.96057892]
[-61.68390656 -45.64508438]
[-49.92713928 -36.32958984]
[-38.17037582 -27.01409531]
[-30.91828156 -25.31228065]
[-26.26062393 -17.36254692]
[-14.71133232 -7.79103470]
[-3.16204071 1.78047776]
[8.38725090 11.35199070]
[19.93654251 20.92350388]
[27.14950180 22.78421593]
[31.63139915 30.83434868]
[42.96764374 40.65726089]
[54.30388641 50.48017120]
[65.64012909 60.30308151]
[76.97637177 70.12599182]
[88.31261444 79.94890594]
[99.23532867 76.80395508]
[110.34144592 79.22270966]
[121.00614166 68.67452240]
[131.67083740 58.12633133]
[142.33554077 47.57814407]
[152.88372803 36.91344833]
[163.31413269 26.13353157]
[173.74453735 15.35361385]
[184.17494202 4.57369566]
[185.34934998 -11.42631340]
[198.67170715 -20.36467361]
[213.92224121 -15.38463783]
[219.40205383 -0.30646417]
[210.90748596 13.30316257]
[194.95486450 15.00410175]
[184.52444458 25.78401947]
[174.09403992 36.56393814]
[163.66363525 47.34385681]
[161.25434875 54.39256668]
[152.88372803 58.24283981]
[142.21902466 68.79103088]
[131.55433655 79.33921814]
[120.88963318 89.88740540]
[123.08181763 97.57699585]
[122.53424835 105.55419159]
[119.31191254 112.87212372]
[113.79729462 118.66215515]
[118.33842468 132.95823669]
[122.87955475 147.25433350]
[127.73364258 161.44720459]
[132.89833069 175.53002930]
[138.06303406 189.61285400]
[143.22772217 203.69567871]
[148.39242554 217.77850342]
[153.55711365 231.86132812]
[163.76159668 235.89923096]
[169.89703369 244.73101807]
[170.11070251 255.26210022]
[164.57504272 263.96313477]
[169.11618042 278.25921631]
[173.65730286 292.55532837]
[178.19844055 306.85140991]
[182.73957825 321.14749146]
[188.97079468 334.79196167]
[196.80125427 347.58587646]
[204.63169861 360.37979126]
[212.46215820 373.17367554]
[220.29261780 385.96759033]
[228.12306213 398.76150513]
[235.95352173 411.55538940]
[251.37580872 415.00912476]
[259.76818848 428.40106201]
[256.15158081 443.78598022]
[242.67167664 452.03628540]
[227.32586670 448.25723267]
[219.21852112 434.69085693]
[223.15960693 419.38586426]
[215.32916260 406.59194946]
[207.49870300 393.79803467]
[199.66825867 381.00415039]
[191.83779907 368.21023560]
[184.00735474 355.41632080]
[176.17689514 342.62243652]
[174.61071777 357.54043579]
[166.40431213 370.09649658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[23 106]
[24 105]
[25 104]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[32 72]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 55]
[46 54]
[47 53]
[79 100]
[80 99]
[81 98]
[82 97]
[83 95]
[84 94]
[85 93]
[86 92]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
