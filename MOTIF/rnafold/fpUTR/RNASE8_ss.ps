%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGACUCCCCCAUGAUGACCUAUUCAUCCACCUACCUCCUCACUCUGUUCCACUGUCUCCCUUAAGAGAG\
) } def
/len { sequence length } bind def

/coor [
[125.21002197 208.43107605]
[108.87477112 210.96884155]
[92.34381104 211.05957031]
[75.98168945 208.70126343]
[60.14920044 203.94593811]
[45.19548416 196.89845276]
[31.45028877 187.71420288]
[19.21671677 176.59573364]
[8.76453876 163.78820801]
[0.32423809 149.57405090]
[-5.91806269 134.26672363]
[-9.82471180 118.20375061]
[-11.30956173 101.73936462]
[-10.33986950 85.23662567]
[-6.93701792 69.05944061]
[-21.03240776 63.92913818]
[-35.12779617 58.79883575]
[-49.22318649 53.66853714]
[-63.31857681 48.53823471]
[-78.40767670 53.98788071]
[-92.00028992 45.46612549]
[-93.66933441 29.51012802]
[-82.13445282 18.35996437]
[-66.24422455 20.56908607]
[-58.18827438 34.44284439]
[-44.09288406 39.57314682]
[-29.99749374 44.70344925]
[-15.90210533 49.83375168]
[-1.80671597 54.96405411]
[4.57524204 42.66798782]
[12.43500233 31.25979996]
[21.65084267 20.91616058]
[32.08004379 11.79725933]
[43.56109238 4.04431486]
[55.91618347 -2.22260547]
[68.95397949 -6.90644884]
[82.47257996 -9.93467808]
[96.26261139 -11.26039696]
[110.11052704 -10.86307430]
[123.80186462 -8.74886322]
[137.12458801 -4.95050621]
[149.87239075 0.47317380]
[161.84782410 7.43818283]
[172.86546326 15.83665657]
[182.75465393 25.53853035]
[191.36227417 36.39355850]
[198.55499268 48.23363113]
[204.22143555 60.87538528]
[208.27384949 74.12304688]
[210.64947510 87.77145386]
[211.31152344 101.60923767]
[210.24972534 115.42210388]
[207.48054504 128.99612427]
[203.04685974 142.12110901]
[197.01733398 154.59378052]
[189.48535156 166.22096252]
[180.56753540 176.82263184]
[190.70138550 187.88179016]
[200.83523560 198.94094849]
[210.96908569 210.00010681]
[226.76728821 210.43899536]
[237.56710815 221.97761536]
[236.96121216 237.77027893]
[225.30906677 248.44750977]
[209.52368164 247.67466736]
[198.97024536 235.91029358]
[199.90992737 220.13395691]
[189.77607727 209.07479858]
[179.64222717 198.01564026]
[169.50837708 186.95648193]
[155.86482239 196.29104614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
