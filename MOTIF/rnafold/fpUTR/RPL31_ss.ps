%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCGACCCGGAAGUUGUACUUGCAACUGCGGCUUUCCUUCUCCCACAAUCCUUCGCGCUCUUCCUUUCCAACUUGGACGCUGCAGA\
) } def
/len { sequence length } bind def

/coor [
[62.33581543 103.49390411]
[47.42176056 101.89047241]
[32.50770569 100.28704834]
[23.40817833 102.51358795]
[17.09335136 98.35094452]
[2.24602914 96.21621704]
[-9.26733494 108.45755005]
[-25.63125610 111.47748566]
[-40.45907211 104.29569244]
[-48.08067703 89.87513733]
[-62.99473190 88.27171326]
[-77.90879059 86.66828918]
[-92.82283783 85.06485748]
[-107.73689270 83.46143341]
[-122.65094757 81.85800934]
[-137.56500244 80.25457764]
[-152.47906494 78.65115356]
[-167.39311218 77.04772949]
[-182.30717468 75.44429779]
[-192.61727905 87.04090118]
[-207.78181458 90.32972717]
[-221.96971130 84.04615021]
[-229.72541809 70.60633850]
[-228.06672668 55.17816925]
[-217.63142395 43.69409180]
[-202.43209839 40.56996918]
[-188.31320190 47.00708771]
[-180.70373535 60.53024292]
[-165.78968811 62.13367081]
[-150.87562561 63.73709869]
[-135.96157837 65.34052277]
[-121.04752350 66.94395447]
[-106.13346863 68.54737854]
[-91.21941376 70.15080261]
[-76.30535889 71.75423431]
[-61.39130402 73.35765839]
[-46.47725296 74.96108246]
[-38.38161087 64.18806458]
[-25.89706421 58.83240891]
[-12.29508781 60.41560745]
[-1.19910610 68.62514496]
[4.38075161 81.36889648]
[19.22807312 83.50362396]
[34.11113358 85.37299347]
[49.02518845 86.97641754]
[63.93923950 88.57984924]
[68.75509644 78.67972565]
[76.21774292 70.58567810]
[85.69501495 64.98335266]
[96.38408661 62.34733200]
[107.37946320 62.90092087]
[117.74971771 66.59722137]
[126.61637115 73.12311554]
[133.22831726 81.92578125]
[137.02545166 92.25954437]
[137.68609619 103.24900818]
[152.07849121 107.47499847]
[166.54402161 111.44342041]
[181.07807922 115.15302277]
[190.34671021 108.93194580]
[201.28703308 108.97071838]
[210.14350891 115.00702667]
[214.01519775 124.76231384]
[228.24758911 129.49931335]
[242.47998047 134.23629761]
[253.91352844 123.98108673]
[268.94616699 120.83228302]
[283.53421021 125.63690948]
[293.75354004 137.10255432]
[296.85522461 152.14500427]
[292.00488281 166.71791077]
[280.50726318 176.90126038]
[265.45516968 179.95574951]
[250.89753723 175.05976868]
[240.75028992 163.53028870]
[237.74298096 148.46868896]
[223.51058960 143.73170471]
[209.27819824 138.99470520]
[190.86981201 144.44850159]
[177.36848450 129.68707275]
[162.83442688 125.97748566]
[155.40731812 127.40668488]
[147.85250854 121.86739349]
[133.46011353 117.64140320]
[120.50174713 131.78799438]
[102.26969910 137.75773621]
[83.45381165 134.01502991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[5 43]
[6 42]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[56 84]
[57 83]
[58 81]
[59 80]
[63 78]
[64 77]
[65 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
