%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUUGCAACCCCGCCCCGCGCCGGCCCCGCCCCUGCUCUCGCGCCGGCGUCGGCUGCGUCUCCGGCGUUUGAAUUGCGCUUCCGCCAUCUUUCCAGCCUCAGUCGGACGGGCGCGGAGACGCUUCUGGAAGGAACGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[89.49224854 234.35368347]
[97.11978912 221.13311768]
[109.73299408 212.53836060]
[107.45114136 197.71293640]
[105.16929626 182.88752747]
[102.88744354 168.06210327]
[93.30407715 156.65997314]
[98.85199738 141.84339905]
[96.57014465 127.01796722]
[91.51323700 125.87874603]
[86.76377106 123.80203247]
[82.49380493 120.86306763]
[78.85801697 117.16831970]
[75.98812103 112.85162354]
[73.98808289 108.06936646]
[58.99164963 108.39659119]
[43.99522018 108.72381592]
[34.48532486 117.51030731]
[21.93980789 117.43245697]
[13.12386131 109.08055878]
[-1.87613857 109.08055878]
[-16.87613869 109.08055878]
[-31.87613869 109.08055878]
[-46.87613678 109.08055878]
[-61.87613678 109.08055878]
[-76.87613678 109.08055878]
[-91.87613678 109.08055878]
[-96.52357483 111.77523804]
[-101.26070404 112.31061554]
[-105.23208618 111.02626801]
[-107.84915161 108.55765533]
[-122.81703949 107.57661438]
[-131.28315735 120.39146423]
[-145.02961731 127.24204254]
[-160.35868835 126.28556824]
[-173.14694214 117.77932739]
[-179.95440674 104.01145935]
[-178.94987488 88.68545532]
[-170.40359497 75.92392731]
[-156.61445618 69.15966034]
[-141.29167175 70.21221161]
[-128.55700684 78.79845428]
[-121.83599091 92.60872650]
[-106.86811066 93.58977509]
[-91.87613678 94.08055878]
[-76.87613678 94.08055878]
[-61.87613678 94.08055878]
[-46.87613678 94.08055878]
[-31.87613869 94.08055878]
[-16.87613869 94.08055878]
[-1.87613857 94.08055878]
[13.12386131 94.08055878]
[27.78029251 84.48770142]
[43.66799545 93.72738647]
[58.66442871 93.40016174]
[73.66085815 93.07293701]
[89.85277557 74.72612762]
[114.23628998 76.78227997]
[125.29545593 66.64842224]
[136.35461426 56.51457214]
[147.41377258 46.38071823]
[158.47293091 36.24686432]
[169.53208923 26.11301231]
[180.59124756 15.97916031]
[191.65040588 5.84530687]
[202.70957947 -4.28854656]
[209.34390259 -17.74163818]
[210.65124512 -32.68455887]
[211.95857239 -47.62747955]
[213.26591492 -62.57040024]
[202.08126831 -73.49916077]
[200.58966064 -89.06544495]
[209.49539185 -101.91931915]
[224.59342957 -105.99158478]
[238.75494385 -99.35944366]
[245.29330444 -85.15438080]
[241.12130737 -70.08360291]
[228.20883179 -61.26306152]
[226.90148926 -46.32014084]
[225.59416199 -31.37722206]
[224.28681946 -16.43430138]
[230.23696899 -11.86859035]
[244.09504700 -17.60912895]
[242.13726807 -2.73716927]
[248.08741760 1.82854152]
[262.18280029 -3.30176067]
[276.27819824 -8.43206310]
[290.37359619 -13.56236458]
[292.35916138 -24.17902946]
[298.55944824 -32.92350006]
[307.78033447 -38.22920990]
[318.29458618 -39.18066788]
[328.16513062 -35.67081451]
[335.60208130 -28.40824127]
[350.00280762 -32.60567474]
[364.40356445 -36.80311203]
[375.48730469 -48.09299469]
[389.87124634 -44.22626114]
[404.27197266 -48.42369461]
[415.21517944 -60.63756561]
[431.20651245 -57.00307465]
[435.79547119 -41.25907516]
[424.26132202 -29.60164452]
[408.46942139 -34.02294540]
[394.06866455 -29.82551193]
[384.01498413 -18.83585739]
[368.60101318 -22.40236282]
[354.20025635 -18.20492744]
[339.79949951 -14.00749302]
[331.81155396 3.68966889]
[313.13571167 10.01682949]
[295.50390625 0.53302437]
[281.40850830 5.66332674]
[267.31311035 10.79362869]
[253.21772766 15.92393112]
[212.84342957 6.77061367]
[201.78427124 16.90446663]
[190.72511292 27.03832054]
[179.66593933 37.17217255]
[168.60678101 47.30602646]
[157.54762268 57.43988037]
[146.48846436 67.57373047]
[135.42930603 77.70758820]
[124.37014771 87.84143829]
[127.18195343 98.30410767]
[125.69242859 109.03513336]
[120.13728333 118.33642578]
[111.39556885 124.73612213]
[113.67742157 139.56153870]
[123.42399597 152.02407837]
[117.71286774 165.78024292]
[119.99471283 180.60566711]
[122.27656555 195.43109131]
[124.55841827 210.25651550]
[139.17233276 214.66061401]
[150.42234802 224.97564697]
[156.07476807 239.15354919]
[155.00729370 254.37928772]
[147.43186951 267.62979126]
[134.85261536 276.27416992]
[119.76713562 278.59603882]
[105.17066956 274.13442993]
[93.96136475 263.77517700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 134]
[4 133]
[5 132]
[6 131]
[8 129]
[9 128]
[15 56]
[16 55]
[17 54]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[31 44]
[32 43]
[58 124]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[64 118]
[65 117]
[66 116]
[67 81]
[68 80]
[69 79]
[70 78]
[85 115]
[86 114]
[87 113]
[88 112]
[94 109]
[95 108]
[96 107]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
