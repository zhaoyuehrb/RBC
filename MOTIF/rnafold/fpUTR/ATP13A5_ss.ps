%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGCGCCUGGGAAGAGCAAUCACAAGUUGUGACGAUUCCAAGUUCACAGAAGCCCAAGGGAUUUUGACAUUUCUCCAAGGAGUUAGCCAGAAGAGAUCCUCGCCGGUUGAGUUCAG\
) } def
/len { sequence length } bind def

/coor [
[162.74822998 144.23036194]
[158.74563599 122.79248047]
[144.21492004 119.06980133]
[129.68420410 115.34712982]
[115.15349579 111.62445068]
[102.63250732 118.91629791]
[88.59629822 115.32030487]
[81.12382507 102.90626526]
[66.59310913 99.18358612]
[52.06239700 95.46091461]
[37.48381042 91.93035889]
[22.85989189 88.59254456]
[8.23597336 85.25473022]
[4.44562674 91.96192169]
[-0.55199432 97.81394958]
[-6.56991959 102.59686279]
[-13.38396072 106.13665009]
[-20.74106216 108.30550385]
[-28.36870003 109.02647400]
[-35.98497391 108.27616882]
[-43.30903244 106.08554077]
[-50.07141495 102.53855896]
[-56.02397919 97.76905060]
[-60.94900513 91.95562744]
[-64.66715240 85.31501007]
[-67.04398346 78.09394073]
[-67.99485016 70.56001282]
[-67.48786163 62.99177933]
[-65.54497528 55.66841507]
[-78.40135193 47.94095612]
[-91.25772858 40.21350098]
[-104.11410522 32.48604202]
[-116.97047424 24.75858688]
[-129.92773438 17.20150185]
[-142.98361206 9.81610584]
[-157.04669189 16.37426186]
[-172.27229309 13.38080788]
[-182.80584717 1.98678982]
[-184.59701538 -13.42656040]
[-176.95703125 -26.93249512]
[-162.82363892 -33.33770752]
[-147.63140869 -30.17926216]
[-137.22206116 -18.67164612]
[-135.59822083 -3.23977160]
[-122.54233551 4.14562464]
[-115.07759857 4.70720196]
[-109.24301910 11.90221024]
[-96.38664246 19.62966728]
[-83.53026581 27.35712433]
[-70.67388916 35.08457947]
[-57.81751633 42.81203842]
[-37.42132187 30.59800720]
[-13.60274410 32.31079102]
[5.00109434 47.45177078]
[11.57378769 70.63081360]
[26.19770622 73.96862793]
[40.82162476 77.30644226]
[48.13461304 75.70709229]
[55.78507614 80.93019867]
[70.31578827 84.65287018]
[84.84650421 88.37554932]
[97.36749268 81.08370209]
[111.40370178 84.67969513]
[118.87617493 97.09373474]
[133.40689087 100.81641388]
[147.93760681 104.53908539]
[162.46832275 108.26176453]
[167.25126648 100.25034332]
[173.63511658 93.45935059]
[181.31924438 88.20227051]
[189.94316101 84.72046661]
[199.10339355 83.17217255]
[208.37237549 83.62524414]
[217.31843567 86.05425262]
[225.52583313 90.34181976]
[232.61416626 96.28431702]
[238.25592041 103.60153198]
[242.19163513 111.94985199]
[244.24185181 120.93843842]
[244.31526184 130.14747620]
[242.41279602 139.14782715]
[255.65907288 146.18601990]
[268.90533447 153.22421265]
[284.72250366 152.86672974]
[292.33132935 165.67121887]
[305.57760620 172.70939636]
[318.82391357 179.74758911]
[332.07019043 186.78578186]
[345.31646729 193.82397461]
[358.56274414 200.86215210]
[370.53317261 193.88639832]
[384.27871704 193.77023315]
[396.17575073 200.43649292]
[403.14138794 212.03416443]
[403.43222046 225.45108032]
[416.48809814 232.83647156]
[429.54397583 240.22186279]
[446.30718994 242.75773621]
[448.51095581 259.56784058]
[432.96783447 266.33898926]
[422.15856934 253.27774048]
[409.10269165 245.89234924]
[396.04681396 238.50695801]
[381.39913940 245.78901672]
[365.12652588 242.92144775]
[353.62234497 230.83149719]
[351.52453613 214.10842896]
[338.27825928 207.07025146]
[325.03198242 200.03205872]
[311.78570557 192.99386597]
[298.53942871 185.95568848]
[285.29315186 178.91749573]
[270.42346191 179.77839661]
[261.86715698 166.47048950]
[248.62088013 159.43229675]
[235.37460327 152.39410400]
[218.30271912 165.53482056]
[196.92112732 168.66693115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[8 61]
[9 60]
[10 59]
[11 57]
[12 56]
[13 55]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 45]
[35 44]
[81 116]
[82 115]
[83 114]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
