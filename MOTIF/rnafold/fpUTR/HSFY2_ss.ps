%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAUUGUGAUGGUCUAGAUAAGUGUACAUGCUUAGGCCUUCUGAAGCAGCAUUUGAAGCUGCAGUCCUGAAAACCAUGCAGGCCGGAAGAGUAGAUAAAGAAAUAUUUAUUUGAG\
) } def
/len { sequence length } bind def

/coor [
[-37.96391678 498.51950073]
[-46.93330765 500.06701660]
[-53.49291611 513.55670166]
[-60.05252457 527.04638672]
[-66.61213684 540.53607178]
[-73.17174530 554.02575684]
[-71.46935272 570.33630371]
[-84.90058136 579.74554443]
[-99.64853668 572.57409668]
[-100.54177856 556.19927979]
[-86.66143036 547.46612549]
[-80.10181427 533.97644043]
[-73.54220581 520.48675537]
[-66.98259735 506.99710083]
[-60.42298889 493.50741577]
[-63.88222504 473.23284912]
[-46.31076813 461.11770630]
[-40.84835815 447.14764404]
[-35.38594818 433.17761230]
[-29.92354012 419.20755005]
[-24.46113205 405.23751831]
[-18.99872398 391.26748657]
[-13.53631496 377.29742432]
[-8.07390594 363.32739258]
[-2.61149788 349.35736084]
[2.85091090 335.38729858]
[8.31331921 321.41726685]
[-3.76128387 312.57681274]
[-13.14323616 300.90310669]
[-19.18831825 287.18807983]
[-21.47896385 272.36428833]
[-19.85309029 257.44125366]
[-14.41555882 243.43687439]
[-5.53142595 231.30799866]
[6.19855070 221.88491821]
[19.97854042 215.81468201]
[34.87162781 213.51655579]
[49.86351776 215.15315247]
[55.32592773 201.18310547]
[60.60189056 187.14158630]
[65.69047546 173.03108215]
[70.77905273 158.92057800]
[75.86763763 144.81007385]
[80.95622253 130.69956970]
[86.04480743 116.58906555]
[74.49559021 106.15087128]
[71.61518860 88.06206512]
[81.88835907 69.64173126]
[79.50240326 54.83271027]
[77.11645508 40.02368546]
[74.73049927 25.21465874]
[72.34455109 10.40563393]
[58.82725143 2.54327059]
[53.57489777 -12.18584251]
[59.06748199 -26.82707024]
[72.71157837 -34.46726990]
[88.06485748 -31.49897385]
[97.87797546 -19.32372284]
[97.51747131 -3.69029498]
[87.15357208 8.01968098]
[89.53952789 22.82870674]
[91.92547607 37.63773346]
[94.31143188 52.44675827]
[96.69738007 67.25578308]
[103.68240356 69.98698425]
[115.39798737 60.61975479]
[117.65244293 75.44939423]
[124.63746643 78.18060303]
[136.43574524 68.91773224]
[148.23400879 59.65486145]
[160.03228760 50.39199066]
[158.47587585 35.04333878]
[165.48501587 21.30013847]
[178.82310486 13.54779530]
[194.23402405 14.26005268]
[206.80018616 23.20963287]
[212.51177979 37.54075623]
[209.54627991 52.68041611]
[198.84992981 63.79759979]
[183.83592224 67.34485626]
[169.29515076 62.19026566]
[157.49688721 71.45313263]
[145.69860840 80.71600342]
[133.90034485 89.97887421]
[122.90344238 116.98528290]
[100.15531158 121.67765045]
[95.06672668 135.78814697]
[89.97814178 149.89865112]
[84.88955688 164.00915527]
[79.80097961 178.11965942]
[74.71239471 192.23016357]
[74.73183441 201.49604797]
[69.29596710 206.64550781]
[63.83356094 220.61555481]
[75.95932770 229.58221436]
[85.34354401 241.37297058]
[91.35120392 255.18035889]
[93.57830811 270.06076050]
[91.87897491 284.99896240]
[86.37500763 298.97735596]
[77.44718170 311.04525757]
[65.70890808 320.38363647]
[51.96408463 326.36062622]
[37.15204620 328.57427979]
[22.28336143 326.87966919]
[16.82095337 340.84973145]
[11.35854530 354.81976318]
[5.89613628 368.78979492]
[0.43372762 382.75985718]
[-5.02868080 396.72988892]
[-10.49108982 410.69992065]
[-15.95349789 424.66998291]
[-21.41590691 438.64001465]
[-26.87831497 452.61004639]
[-32.34072495 466.58010864]
[-27.32794762 474.83462524]
[-26.76338005 484.33639526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[25 107]
[26 106]
[27 105]
[38 94]
[39 93]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[68 84]
[69 83]
[70 82]
[71 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
