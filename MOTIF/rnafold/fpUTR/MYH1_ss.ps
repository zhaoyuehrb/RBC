%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUCCUCAUAAAGCUUCAAGUUCUGAUCCACUUUAAGGUCGCAUCUCUACGCCAGGGUCCUUAACUGGGCUACCAUCAAUAACCUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[18.54379654 365.14071655]
[15.32742786 379.93710327]
[7.47881269 392.88616943]
[-4.15069103 402.58325195]
[-18.29960251 407.97650146]
[-33.43315125 408.48086548]
[-47.90976715 404.04168701]
[-60.15913010 395.14047241]
[-68.85252380 382.74273682]
[-73.04695129 368.19332886]
[-72.28743744 353.07043457]
[-66.65636444 339.01446533]
[-56.76455307 327.55014038]
[-43.68498611 319.92102051]
[-28.83644485 316.95462036]
[-13.82958221 318.97274780]
[-7.13045073 305.55178833]
[-0.43131846 292.13085938]
[-1.66999626 277.28784180]
[11.41607189 268.39596558]
[18.11520386 254.97503662]
[16.87652588 240.13203430]
[29.96259499 231.24015808]
[36.66172791 217.81921387]
[43.36085892 204.39828491]
[41.27252197 187.06004333]
[56.50196075 176.87474060]
[62.75368881 163.23965454]
[69.00541687 149.60455322]
[75.25714874 135.96945190]
[67.41784668 129.05879211]
[61.44545364 120.48310089]
[57.68218994 110.73375702]
[56.34368515 100.36937714]
[57.50662613 89.98384094]
[61.10438156 80.17221069]
[66.93080902 71.49668884]
[74.65205383 64.45436859]
[83.82569885 59.44876862]
[93.92611694 56.76669693]
[94.42206573 41.77489853]
[91.53483582 32.89409256]
[95.19042206 26.29794121]
[96.18177795 11.33073711]
[84.17270660 1.50414813]
[80.26566315 -13.51299572]
[85.96298218 -27.94629669]
[99.07392883 -36.24585724]
[114.55707550 -35.22032547]
[126.45883942 -25.26403809]
[130.20274353 -10.20539284]
[124.34918976 4.16525364]
[111.14897919 12.32209587]
[110.15762329 27.28930092]
[109.41386414 42.27085114]
[108.91791534 57.26264954]
[120.87221527 61.65471268]
[131.05035400 69.30984497]
[138.58621216 79.57661438]
[152.85206604 74.94136047]
[167.11790466 70.30610657]
[181.38375854 65.67084503]
[195.64959717 61.03559494]
[202.60038757 46.84185410]
[217.57867432 41.79941940]
[231.69813538 48.89987564]
[236.58192444 63.93064880]
[229.33259583 77.97424316]
[214.25102234 82.69885254]
[200.28485107 75.30144501]
[186.01901245 79.93669891]
[171.75315857 84.57195282]
[157.48731995 89.20720673]
[143.22146606 93.84246063]
[140.99784851 115.00621796]
[129.03356934 132.60464478]
[110.17118835 142.45652771]
[88.89224243 142.22117615]
[82.64051819 155.85627747]
[76.38878632 169.49137878]
[70.13706207 183.12648010]
[73.89816284 195.59942627]
[68.25636292 206.89276123]
[56.78179932 211.09741211]
[50.08266449 224.51835632]
[43.38353348 237.93928528]
[44.14304352 253.74224854]
[31.53614426 261.67416382]
[24.83701134 275.09512329]
[25.59652328 290.89807129]
[12.98962116 298.82998657]
[6.29048920 312.25094604]
[-0.40864274 325.67187500]
[10.22455692 336.45211792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 93]
[17 92]
[18 91]
[20 89]
[21 88]
[23 86]
[24 85]
[25 84]
[27 81]
[28 80]
[29 79]
[30 78]
[40 56]
[41 55]
[43 54]
[44 53]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
