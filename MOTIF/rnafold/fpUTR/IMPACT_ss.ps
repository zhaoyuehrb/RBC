%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUUCCGGGUCGGGCCGCGCCGCAGCCAGCUCUCGGCUCGCAGCCGCAGCGCCCCGCCCCCGCGCUCCGGACCUGGCAGGCGGCGGCUGCAGGGCAGGUCCAGGGGCCAC\
) } def
/len { sequence length } bind def

/coor [
[190.85426331 137.47348022]
[176.37440491 133.55764771]
[161.89454651 129.64179993]
[147.41470337 125.72595978]
[144.83918762 127.14106750]
[141.50990295 127.54592133]
[137.83824158 126.63291931]
[134.34437561 124.26047516]
[131.59208679 120.48743439]
[117.63625336 114.98883820]
[103.68041229 109.49024200]
[95.49905396 109.69120789]
[89.41653442 103.63994598]
[75.61894226 97.75552368]
[61.82134247 91.87110901]
[48.02375031 85.98669434]
[32.29450226 87.69003296]
[23.62275314 75.58012390]
[9.82515812 69.69570160]
[-3.97243714 63.81128693]
[-17.85049438 58.11922836]
[-31.80633354 52.62063217]
[-47.48215103 54.76056290]
[-56.48718262 42.89638519]
[-70.44302368 37.39778900]
[-86.11884308 39.53771973]
[-95.12387085 27.67354393]
[-109.07971191 22.17494774]
[-124.75553131 24.31487656]
[-133.76055908 12.45069981]
[-147.71640015 6.95210409]
[-161.67224121 1.45350778]
[-175.62808228 -4.04508829]
[-192.58105469 -4.22583866]
[-197.10043335 -20.56632996]
[-182.64961243 -29.43257713]
[-170.12948608 -18.00092697]
[-156.17364502 -12.50233078]
[-142.21780396 -7.00373507]
[-128.26196289 -1.50513875]
[-113.58435822 -4.03836441]
[-103.58111572 8.21910858]
[-89.62527466 13.71770477]
[-74.94766998 11.18447876]
[-64.94442749 23.44195175]
[-50.98858643 28.94054794]
[-36.31098557 26.40732193]
[-26.30773735 38.66479492]
[-12.35189915 44.16339111]
[-4.86997128 43.68064880]
[1.91198015 50.01369095]
[15.70957565 55.89810944]
[29.50716972 61.78252411]
[44.24951935 59.65828705]
[53.90816498 72.18909454]
[67.70576477 78.07351685]
[81.50335693 83.95793152]
[95.30094910 89.84234619]
[109.17900848 95.53440857]
[123.13484955 101.03300476]
[137.09068298 106.53160095]
[151.33053589 111.24610138]
[165.81039429 115.16194916]
[180.29025269 119.07778931]
[194.77009583 122.99362946]
[209.44520569 126.09870911]
[224.27018738 128.38342285]
[239.09516907 130.66813660]
[253.92015076 132.95285034]
[268.74511719 135.23756409]
[283.60043335 137.31597900]
[298.48318481 139.18769836]
[313.36596680 141.05943298]
[328.24871826 142.93115234]
[343.13150024 144.80287170]
[358.01425171 146.67459106]
[372.89700317 148.54632568]
[382.21939087 136.42030334]
[396.26690674 130.62684631]
[411.22875977 132.62928772]
[423.10000610 141.79060364]
[428.75363159 155.57110596]
[443.63638306 157.44282532]
[458.51916504 159.31454468]
[473.40191650 161.18626404]
[489.87173462 157.16362000]
[498.29647827 171.87620544]
[486.49105835 184.04455566]
[471.53018188 176.06903076]
[456.64743042 174.19731140]
[441.76467896 172.32559204]
[426.88189697 170.45385742]
[417.99209595 182.40531921]
[404.22207642 188.34185791]
[389.23034668 186.57720947]
[377.05480957 177.48583984]
[371.02529907 163.42909241]
[356.14251709 161.55735779]
[341.25976562 159.68563843]
[326.37701416 157.81391907]
[311.49423218 155.94218445]
[296.61148071 154.07046509]
[281.72869873 152.19874573]
[274.59930420 154.51907349]
[266.46041870 150.06254578]
[251.63543701 147.77783203]
[236.81045532 145.49311829]
[221.98547363 143.20840454]
[207.16049194 140.92369080]
[204.75793457 142.61589050]
[201.49414062 143.38771057]
[197.74385071 142.88783264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[9 61]
[10 60]
[11 59]
[13 58]
[14 57]
[15 56]
[16 55]
[18 53]
[19 52]
[20 51]
[21 49]
[22 48]
[24 46]
[25 45]
[27 43]
[28 42]
[30 40]
[31 39]
[32 38]
[33 37]
[66 109]
[67 108]
[68 107]
[69 106]
[70 105]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
