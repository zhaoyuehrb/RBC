%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGGAGCUCGGCAGCCGCAGAAGCGGCAGCGGCGGCGGCGCGGCGCAGGCACCGGCCCGGGGAGAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[106.58770752 287.48541260]
[104.68244171 272.60690308]
[102.77717590 257.72839355]
[100.87191010 242.84989929]
[88.47929382 237.45457458]
[80.36775208 226.50679016]
[78.78948975 212.86314392]
[84.27397919 200.15199280]
[95.45774078 191.80856323]
[94.18565369 176.86259460]
[92.91355896 161.91664124]
[91.64147186 146.97067261]
[82.46800995 135.10275269]
[68.32484436 130.10566711]
[52.73537445 132.80360413]
[43.31271744 121.26831055]
[29.16955566 116.27121735]
[15.02639484 111.27411652]
[0.88323283 106.27702332]
[-13.25992870 101.27992249]
[-29.27459335 104.81016541]
[-40.13798141 92.52526093]
[-34.67477417 77.06287384]
[-18.50504684 74.32938385]
[-8.26283169 87.13676453]
[5.88032961 92.13385773]
[20.02349091 97.13095856]
[34.16665268 102.12805176]
[48.30981445 107.12515259]
[62.88767624 104.06978607]
[73.32194519 115.96250153]
[87.46510315 120.95959473]
[78.39521790 94.51311493]
[99.16223907 79.85801697]
[104.15933990 65.71485901]
[109.15643311 51.57169342]
[106.45849609 35.98221970]
[117.99378204 26.55956650]
[122.99087524 12.41640377]
[122.56656647 -4.53223276]
[138.73538208 -9.63181210]
[148.11164856 4.49341679]
[137.13403320 17.41350174]
[132.13694763 31.55666351]
[135.19230652 46.13452148]
[123.29959869 56.56879044]
[118.30249786 70.71195221]
[113.30540466 84.85511780]
[122.28051758 100.67166901]
[114.98423767 119.28472900]
[129.93019104 118.01264191]
[144.87615967 116.74055481]
[158.01507568 106.92723846]
[172.97427368 113.64694977]
[174.36500549 129.98701477]
[160.75662231 139.13818359]
[146.14825439 131.68652344]
[131.20228577 132.95860291]
[116.25632477 134.23069763]
[106.58743286 145.69859314]
[107.85952759 160.64454651]
[109.13161469 175.59051514]
[110.40370178 190.53646851]
[124.90454865 198.95826721]
[131.56484985 214.16876221]
[127.99015808 230.21595764]
[115.75041199 240.94462585]
[117.65567780 255.82313538]
[119.56095123 270.70166016]
[121.46621704 285.58013916]
[131.82832336 298.29074097]
[125.74954987 313.52163696]
[109.48323059 315.60461426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[9 63]
[10 62]
[11 61]
[12 60]
[13 32]
[14 31]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[34 48]
[35 47]
[36 46]
[38 44]
[39 43]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
