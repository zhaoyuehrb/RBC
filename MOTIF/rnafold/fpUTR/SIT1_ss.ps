%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGACUUUGCCACCACCAGUAUUGGGGAUGCUGAGCUGCGGGGUACGGGCCUGAGGAGGGAUGGGAGUAAGAAGUGCUGUGGAAACCGUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[115.05867004 125.37532806]
[104.30646515 129.19117737]
[92.91041565 128.64277649]
[82.57430267 123.81209564]
[74.84343719 115.42135620]
[70.87364197 104.72502899]
[55.94295120 103.28469086]
[41.01226425 101.84434509]
[26.08157730 100.40399933]
[11.15089130 98.96365356]
[-3.77979517 97.52330780]
[-18.71048164 96.08296204]
[-25.30167389 107.42756653]
[-35.69709015 115.35493469]
[-48.29013443 118.68536377]
[-61.15187454 116.94607544]
[-72.32649231 110.43801880]
[-80.12870789 100.18451691]
[-83.39789581 87.77050781]
[-98.20561981 85.37651062]
[-113.01334381 82.98251343]
[-127.82107544 80.58850861]
[-142.62879944 78.19451141]
[-157.43652344 75.80051422]
[-172.24424744 73.40651703]
[-188.84535217 76.84742737]
[-196.74743652 61.84764862]
[-184.52136230 50.10202789]
[-169.85025024 58.59878922]
[-155.04252625 60.99278641]
[-140.23480225 63.38678741]
[-125.42707825 65.78078461]
[-110.61934662 68.17478180]
[-95.81162262 70.56877899]
[-81.00389099 72.96278381]
[-70.76768494 59.31412506]
[-54.99178696 52.59192276]
[-37.88315964 54.68428040]
[-24.05214500 65.11586761]
[-17.27013588 81.15227509]
[-2.33944988 82.59262085]
[12.59123707 84.03296661]
[27.52192307 85.47331238]
[42.45261002 86.91365814]
[57.38329697 88.35400391]
[72.31398010 89.79434204]
[83.71178436 75.39583588]
[101.41831970 70.52697754]
[118.57551575 77.07357025]
[128.53805542 92.50000000]
[143.53805542 92.50000000]
[158.53805542 92.50000000]
[173.53805542 92.50000000]
[188.53805542 92.50000000]
[203.53805542 92.50000000]
[218.53805542 92.50000000]
[225.94367981 84.21429443]
[236.49919128 81.53222656]
[246.54382324 85.12843323]
[252.73516846 93.54319000]
[267.70434570 94.50424194]
[274.64636230 80.09977722]
[286.53027344 69.45880890]
[301.53887939 64.16926575]
[317.39208984 65.00375366]
[331.69326782 71.80686951]
[342.29162598 83.52311707]
[347.60556030 98.36054993]
[362.59783936 98.84132385]
[377.59014893 99.32209778]
[392.58242798 99.80287170]
[405.22088623 89.92110443]
[420.79266357 93.78107452]
[427.35241699 108.42173004]
[419.86810303 122.61202240]
[404.08102417 125.46637726]
[392.10165405 114.79516602]
[377.10937500 114.31439209]
[362.11706543 113.83361816]
[347.12478638 113.35284424]
[341.78338623 126.43297577]
[332.25503540 136.90583801]
[319.68325806 143.48394775]
[305.58731079 145.34909058]
[291.67868042 142.25399780]
[279.65328979 134.55490112]
[270.98461914 123.17073822]
[266.74328613 109.47341919]
[251.77410889 108.51236725]
[235.31544495 118.44603729]
[218.53805542 107.50000000]
[203.53805542 107.50000000]
[188.53805542 107.50000000]
[173.53805542 107.50000000]
[158.53805542 107.50000000]
[143.53805542 107.50000000]
[128.53805542 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[60 89]
[61 88]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
