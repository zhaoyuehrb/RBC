%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGACGCAGGCAGCAAAGAGUAGUCAGUCCCUUCUUGGCUCUGCUGACACUCGAGCCCACAUUCCAUCACCUGCUCCCAAUC\
) } def
/len { sequence length } bind def

/coor [
[108.70743561 349.86441040]
[100.57453156 336.83554077]
[100.06170654 321.48522949]
[107.30690765 307.94259644]
[120.36120605 299.85058594]
[119.81337738 284.86059570]
[119.26554871 269.87060547]
[115.79283142 263.14376831]
[118.98157501 254.32527161]
[118.98157501 239.32527161]
[118.98157501 224.32527161]
[118.98157501 209.32527161]
[118.98157501 194.32527161]
[98.72612000 180.45599365]
[93.60041046 156.23435974]
[106.72108459 134.99249268]
[100.85451508 121.18729401]
[88.49565887 117.81240845]
[80.33628845 107.93537140]
[79.35485077 95.16165161]
[85.90961456 84.15409851]
[80.55115509 70.14385223]
[75.19268799 56.13361359]
[69.83422852 42.12337112]
[63.70563889 35.02586365]
[64.54618073 27.50234032]
[59.70298004 13.30574417]
[54.85977173 -0.89085215]
[50.01656723 -15.08744907]
[45.17335892 -29.28404617]
[40.33015442 -43.48064041]
[23.26402092 -56.16600800]
[27.18191147 -76.28902435]
[20.81506157 -89.87075043]
[6.27817154 -96.65738678]
[2.66080356 -112.28730011]
[12.73789310 -124.77056122]
[28.77915764 -124.53108215]
[38.47911453 -111.75256348]
[34.39678574 -96.23760223]
[40.76363373 -82.65587616]
[49.89322281 -80.93297577]
[57.22667694 -75.00352478]
[60.93133926 -66.17897034]
[60.00137711 -56.51299667]
[54.52674866 -48.32384872]
[59.36995697 -34.12725067]
[64.21316528 -19.93065453]
[69.05636597 -5.73405838]
[73.89957428 8.46253872]
[78.74278259 22.65913582]
[83.84446716 36.76490784]
[89.20292664 50.77515030]
[94.56139374 64.78539276]
[99.91985321 78.79563141]
[115.06608582 85.07871246]
[121.20260620 100.28490448]
[114.65970612 115.32072449]
[120.52628326 129.12591553]
[127.93194580 128.68746948]
[135.24090576 129.87838745]
[142.09968567 132.63519287]
[148.17784119 136.81878662]
[153.18392944 142.22152710]
[156.87947083 148.57746887]
[159.09028625 155.57548523]
[159.71472168 162.87448120]
[158.72827148 170.11999512]
[156.18453979 176.96148682]
[152.21234131 183.06922913]
[147.00915527 188.15019226]
[140.83135986 191.96217346]
[133.98158264 194.32527161]
[133.98158264 209.32527161]
[133.98158264 224.32527161]
[133.98158264 239.32527161]
[133.98158264 254.32527161]
[134.25553894 269.32275391]
[134.80337524 284.31274414]
[135.35119629 299.30273438]
[148.96134949 306.42028809]
[157.17576599 319.39791870]
[157.78482056 334.74472046]
[150.62466431 348.33248901]
[137.62135315 356.50619507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 80]
[6 79]
[7 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[16 59]
[17 58]
[21 55]
[22 54]
[23 53]
[24 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[33 41]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
