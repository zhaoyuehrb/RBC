%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGGGAGAAGAAGAAGAUCGGUAGAUUGAGUGGCUAGAGAGGUCGGAGGUAAGUGGCUAUAGAAGUCGGGCGGACCCGGAACCCAGAGGACGCGACACC\
) } def
/len { sequence length } bind def

/coor [
[107.64711761 205.65737915]
[115.46579742 192.70655823]
[126.90514374 182.80725098]
[121.05835724 168.99366760]
[115.21156311 155.18008423]
[108.38680267 156.62062073]
[101.43748474 157.22033691]
[94.46682739 156.97032166]
[87.57833862 155.87428284]
[80.87431335 153.94850159]
[74.45430756 151.22158813]
[68.41365814 147.73400879]
[62.84206772 143.53758240]
[57.82228470 138.69461060]
[53.42884445 133.27702332]
[49.72699356 127.36526489]
[46.77170563 121.04712677]
[44.60686493 114.41643524]
[29.72055817 116.25975800]
[14.83425045 118.10308838]
[-0.05205705 119.94641113]
[-12.80565739 130.25552368]
[-28.01113510 124.11341095]
[-30.02639771 107.83856201]
[-16.77831650 98.17314148]
[-1.89538145 105.06010437]
[12.99092579 103.21678162]
[27.87723351 101.37345123]
[42.76354218 99.53012848]
[47.35010147 77.54513550]
[60.04212189 59.01706696]
[78.88566589 46.79832840]
[75.22695923 32.25137329]
[71.56825256 17.70442009]
[67.90954590 3.15746689]
[64.25083923 -11.38948727]
[60.59213638 -25.93644142]
[56.93342972 -40.48339462]
[41.84347153 -41.73714066]
[27.97922134 -47.82493973]
[16.84457016 -58.08643341]
[9.64732170 -71.40853119]
[7.16817808 -86.34615326]
[9.67605972 -101.27897644]
[16.89893150 -114.58720398]
[28.05330658 -124.82725525]
[41.92924500 -130.88836670]
[57.02158737 -132.11306763]
[71.69322968 -128.36853027]
[84.35270691 -120.06090546]
[93.62680054 -108.09136963]
[98.50953674 -93.75827789]
[98.47127533 -78.61637115]
[93.51615906 -64.30814362]
[84.18168640 -52.38562775]
[71.48038483 -44.14210129]
[75.13909149 -29.59514618]
[78.79779816 -15.04819298]
[82.45650482 -0.50123906]
[86.11520386 14.04571533]
[89.77391052 28.59266853]
[93.43261719 43.13962173]
[107.05320740 43.19784164]
[120.27439117 46.47260666]
[132.34750366 52.77847672]
[142.58885193 61.75836563]
[150.41851807 72.90377045]
[155.39312744 85.58356476]
[170.27943420 83.74024200]
[185.16575623 81.89691162]
[200.05206299 80.05358887]
[214.93836975 78.21026611]
[227.69197083 67.90115356]
[242.89744568 74.04326630]
[244.91270447 90.31811523]
[231.66462708 99.98353577]
[216.78169250 93.09657288]
[201.89538574 94.93989563]
[187.00907898 96.78321838]
[172.12277222 98.62654877]
[157.23646545 100.46987152]
[153.73272705 119.72378540]
[143.94766235 136.67201233]
[129.02514648 149.33329773]
[134.87193298 163.14688110]
[140.71871948 176.96046448]
[155.78887939 175.63926697]
[170.52926636 179.04164124]
[183.49577332 186.83427429]
[193.41806030 198.25369263]
[199.32406616 212.18116760]
[200.63516235 227.25219727]
[197.22290039 241.99031067]
[189.42158508 254.95158386]
[177.99551392 264.86621094]
[164.06410217 270.76287842]
[148.99218750 272.06387329]
[134.25636292 268.64175415]
[121.30032349 260.83175659]
[111.39334106 249.39904785]
[105.50601196 235.46366882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[5 84]
[18 29]
[19 28]
[20 27]
[21 26]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
