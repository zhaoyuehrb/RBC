%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUUCUGUUUCCACCAAUGCGGGAGGUUCUUGUUCUGCAGGUCUCGCGUCUGCCAGGAGCUACGGCCGGAAG\
) } def
/len { sequence length } bind def

/coor [
[80.61365509 223.42044067]
[64.34381866 221.36508179]
[58.23919678 206.14451599]
[68.57969666 193.41636658]
[70.45969391 178.53463745]
[72.33969116 163.65292358]
[74.21969604 148.77119446]
[76.09969330 133.88948059]
[77.97969055 119.00775909]
[77.79471588 103.80673981]
[85.12624359 94.18757629]
[94.26139069 92.54358673]
[92.38139343 77.66186523]
[90.50139618 62.78014374]
[76.55040741 52.46437073]
[74.27439880 35.60039139]
[84.57946777 22.48052216]
[82.07793427 7.69058084]
[79.26721954 -7.04372787]
[76.14854431 -21.71594238]
[73.02986908 -36.38815689]
[69.91119385 -51.06037140]
[66.79251862 -65.73258209]
[63.67383957 -80.40480042]
[60.55516434 -95.07701111]
[57.43648911 -109.74922943]
[53.87896347 -113.33311462]
[52.04748917 -117.49162292]
[51.89138794 -121.53491974]
[53.11478806 -124.87837982]
[55.24186325 -127.12149048]
[54.61372757 -142.10832214]
[53.98559189 -157.09516907]
[53.35746002 -172.08201599]
[52.72932434 -187.06886292]
[46.02501297 -202.64089966]
[59.13256073 -213.39398193]
[73.09392548 -203.77542114]
[67.71616364 -187.69699097]
[68.34429932 -172.71014404]
[68.97243500 -157.72331238]
[69.60057068 -142.73646545]
[70.22870636 -127.74961853]
[72.10870361 -112.86790466]
[75.22737885 -98.19568634]
[78.34605408 -83.52347565]
[81.46472931 -68.85125732]
[84.58340454 -54.17904663]
[87.70207977 -39.50683212]
[90.82075500 -24.83461761]
[93.93943024 -10.16240311]
[98.54591370 -4.09831572]
[96.86787415 5.18904972]
[99.36940765 19.97899055]
[110.94577026 26.01517105]
[116.93846130 37.83472824]
[114.90670013 51.12871933]
[105.38311768 60.90014648]
[107.26311493 75.78186798]
[109.14311218 90.66358948]
[116.36941528 103.80818939]
[127.92711639 113.36954498]
[144.17803955 115.56941986]
[150.14715576 130.84362793]
[139.69395447 143.47940063]
[123.57177734 140.47810364]
[118.36575317 124.92724609]
[106.80805969 115.36589050]
[92.86141205 120.88775635]
[90.98141479 135.76947021]
[89.10140991 150.65119934]
[87.22141266 165.53291321]
[85.34141541 180.41464233]
[83.46141815 195.29635620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[12 60]
[13 59]
[14 58]
[17 54]
[18 53]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
