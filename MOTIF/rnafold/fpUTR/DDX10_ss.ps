%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGCUCGGGGGCGGGCUUCUGAGUUCGCGCAUGCGCCUCUGUGCGUUUGUCCCAUGCUGGUUCCGUGAGUCUGGCCUUAGGUGUCUCGUGUCUGGGGUUGAUCCGAGCUGUCGCCGCCGCCGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[69.26683044 151.73165894]
[63.62097168 137.83473206]
[65.35587311 122.93540192]
[74.04373932 110.70752716]
[87.54112244 104.16648865]
[73.16743469 99.87730408]
[58.79374695 95.58811951]
[44.42005920 91.29893494]
[30.04637146 87.00975037]
[15.62190914 82.89455414]
[1.14877558 78.95394135]
[-13.32435799 75.01332855]
[-27.79749107 71.07272339]
[-42.27062607 67.13211060]
[-57.61871719 70.97223663]
[-67.86631012 60.16315460]
[-82.33943939 56.22254181]
[-96.81257629 52.28193283]
[-107.74354553 62.98057938]
[-122.46477509 66.74652100]
[-136.99786377 62.66539001]
[-147.46684265 51.92963028]
[-151.13179016 37.49239731]
[-165.60491943 33.55178833]
[-178.59671021 44.30683899]
[-195.27162170 45.22753143]
[-209.09172058 36.14989090]
[-214.75529480 20.79165649]
[-229.31941223 17.20192146]
[-243.88354492 13.61218643]
[-258.44766235 10.02245140]
[-273.01181030 6.43271637]
[-287.57592773 2.84298110]
[-299.34857178 12.95159626]
[-314.81726074 14.17628288]
[-328.03390503 6.04612446]
[-333.91650391 -8.31266785]
[-330.20300293 -23.37884521]
[-318.32138062 -33.35915375]
[-302.84033203 -34.41596222]
[-289.71264648 -26.14290810]
[-283.98620605 -11.72114563]
[-269.42205811 -8.13141155]
[-254.85794067 -4.54167604]
[-240.29380798 -0.95194119]
[-225.72967529 2.63779378]
[-211.16555786 6.22752857]
[-201.75677490 -3.32299876]
[-188.74624634 -6.98185253]
[-175.52792358 -3.68276024]
[-165.60563660 5.81072283]
[-161.66432190 19.07865524]
[-147.19117737 23.01926422]
[-136.71299744 12.43279362]
[-122.24646759 8.48624325]
[-107.65041351 12.33612442]
[-96.87034607 23.04532433]
[-92.87196350 37.80879974]
[-78.39882660 41.74940872]
[-63.92569733 45.69002151]
[-49.61281586 41.56803513]
[-38.33001328 52.65897751]
[-23.85688019 56.59958649]
[-9.38374710 60.54019547]
[5.08938646 64.48080444]
[19.56251907 68.42141724]
[26.91730499 67.13005066]
[34.33555603 72.63606262]
[48.70924377 76.92524719]
[63.08293152 81.21443176]
[77.45661926 85.50361633]
[91.83030701 89.79280090]
[102.15628052 87.29717255]
[110.75909424 93.26163483]
[125.71968842 94.34815216]
[140.68028259 95.43467712]
[155.64088440 96.52119446]
[163.76251221 85.31356049]
[176.27328491 79.65152740]
[189.83726501 80.92671967]
[200.89585876 88.69645691]
[206.60137939 100.82843018]
[221.53135681 102.27613831]
[236.46131897 103.72384644]
[251.39129639 105.17155457]
[270.18215942 95.01110840]
[286.64862061 107.36112976]
[301.64422607 107.72358704]
[316.63986206 108.08604431]
[331.63546753 108.44850159]
[345.61856079 101.04692078]
[358.15515137 109.08950043]
[373.15078735 109.45195770]
[388.14639282 109.81441498]
[398.34814453 97.96288300]
[413.78936768 95.49266052]
[427.17926025 103.57010651]
[432.19546509 118.38130188]
[426.46954346 132.93286133]
[412.70504761 140.35395813]
[397.40118408 137.14060974]
[387.78393555 124.81003571]
[372.78833008 124.44757843]
[357.79272461 124.08512115]
[344.88220215 131.51261902]
[331.27301025 123.44412231]
[316.27740479 123.08166504]
[301.28176880 122.71920776]
[286.28616333 122.35675049]
[280.82580566 129.58032227]
[272.50314331 133.48643494]
[263.18063354 133.05838013]
[255.01179504 128.26585388]
[249.94358826 120.10153198]
[235.01361084 118.65382385]
[220.08364868 117.20611572]
[205.15367126 115.75840759]
[194.71363831 128.36622620]
[178.66403198 132.34226990]
[163.23997498 125.93923187]
[154.55436707 111.48179626]
[139.59376526 110.39527130]
[124.63316345 109.30875397]
[109.67256927 108.22222900]
[119.97395325 119.12551117]
[123.76059723 133.63967896]
[120.09879303 148.18585205]
[109.89146423 159.17724609]
[95.65553284 163.90357971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[16 60]
[17 59]
[18 58]
[23 53]
[24 52]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[74 124]
[75 123]
[76 122]
[77 121]
[82 117]
[83 116]
[84 115]
[85 114]
[87 109]
[88 108]
[89 107]
[90 106]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
