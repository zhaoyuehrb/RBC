%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUUUCCCCGGUGUCGGCGGCAGGUGGAAUUUCCACGCUUUAUCUGCGCCUGCGCCGCGCGGGAUUCGCGGUCCGAGCUGAAGAGGUUCGCGGUCCGGUUUCACUUCUCCGAACCCUGAGGCAGUGUGUGAAGCUGGGACGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[86.22548676 119.84108734]
[76.11088562 103.56597900]
[61.32094574 101.06444550]
[46.53100204 98.56291962]
[31.74106407 96.06138611]
[16.95112228 93.55985260]
[1.98072171 92.61799622]
[-13.00612068 93.24613190]
[-27.99296379 93.87426758]
[-42.97980499 94.50240326]
[-57.93952179 95.60097504]
[-72.85735321 97.16889954]
[-87.77517700 98.73683167]
[-102.69300842 100.30475616]
[-117.61083984 101.87268066]
[-132.52867126 103.44061279]
[-145.44447327 112.57803345]
[-158.91078186 106.21348572]
[-173.82861328 107.78141022]
[-188.74644470 109.34933472]
[-203.66427612 110.91726685]
[-211.93576050 114.95001221]
[-218.91046143 112.35845184]
[-233.85784912 113.61361694]
[-248.80525208 114.86878967]
[-263.75265503 116.12395477]
[-278.70004272 117.37911987]
[-293.64743042 118.63429260]
[-308.59481812 119.88945770]
[-323.54220581 121.14462280]
[-330.00903320 135.07574463]
[-342.58422852 143.89390564]
[-357.88513184 145.22706604]
[-371.79592896 138.71662903]
[-380.57461548 126.11384583]
[-381.85983276 110.80882263]
[-375.30581665 96.91851807]
[-362.67556763 88.17936707]
[-347.36657715 86.94214630]
[-333.49691772 93.53967285]
[-324.79739380 106.19723511]
[-309.84997559 104.94206238]
[-294.90258789 103.68689728]
[-279.95520020 102.43173218]
[-265.00781250 101.17655945]
[-250.06040955 99.92139435]
[-235.11302185 98.66622925]
[-220.16563416 97.41105652]
[-205.23220825 95.99943542]
[-190.31437683 94.43151093]
[-175.39654541 92.86357880]
[-160.47871399 91.29565430]
[-148.62992859 82.27037811]
[-134.09658813 88.52278137]
[-119.17876434 86.95485687]
[-104.26093292 85.38692474]
[-89.34310913 83.81900024]
[-74.42527771 82.25107574]
[-59.50745010 80.68314362]
[-56.99265671 78.12313843]
[-53.08672333 76.68725586]
[-48.34749222 77.02777100]
[-43.60794067 79.51555634]
[-28.62109756 78.88742828]
[-13.63425541 78.25929260]
[1.35258687 77.63115692]
[-10.74472713 68.76239014]
[-16.91347694 55.08955002]
[-15.55727482 40.15098572]
[-7.02708626 27.81259537]
[6.46959019 21.26738930]
[21.43999481 22.20917702]
[34.00999069 30.39423943]
[40.92662811 43.70439148]
[40.39997482 58.69514465]
[32.56632233 71.48709106]
[19.45265388 78.76991272]
[34.24259567 81.27144623]
[49.03253555 83.77297974]
[63.82247543 86.27450562]
[78.61241913 88.77603912]
[85.21595764 80.89926910]
[94.49677277 76.48148346]
[104.77417755 76.32272339]
[114.18701935 80.45173645]
[121.03070068 88.12078857]
[124.06588745 97.94106293]
[138.66957092 101.36633301]
[153.27325439 104.79159546]
[167.87693787 108.21685791]
[183.07931519 103.83526611]
[193.70349121 114.27442169]
[208.30717468 117.69968414]
[222.91085815 121.12494659]
[236.23762512 113.06050110]
[250.99903870 116.74224091]
[258.60513306 129.49696350]
[273.20880127 132.92222595]
[287.81250000 136.34748840]
[302.41616821 139.77275085]
[317.01986694 143.19801331]
[331.62353516 146.62327576]
[346.22723389 150.04853821]
[360.83090210 153.47380066]
[375.43460083 156.89906311]
[390.03826904 160.32432556]
[404.69781494 150.83697510]
[421.36315918 154.77726746]
[429.87960815 169.24464417]
[444.55184937 172.36332703]
[459.25588989 175.32818604]
[473.99020386 178.13890076]
[484.54025269 166.88278198]
[499.50656128 163.13946533]
[514.11352539 168.10343933]
[523.70001221 180.19071960]
[525.20709229 195.54429626]
[518.15380859 209.26489258]
[504.79089355 216.97433472]
[489.38235474 216.21253967]
[476.84500122 207.22262573]
[471.17950439 192.87321472]
[456.44519043 190.06250000]
[449.23779297 191.91079712]
[441.43316650 187.03553772]
[426.76095581 183.91687012]
[417.00772095 192.39588928]
[403.95492554 193.70832825]
[392.36944580 187.14871216]
[386.61300659 174.92800903]
[372.00933838 171.50274658]
[357.40563965 168.07748413]
[342.80197144 164.65222168]
[328.19827271 161.22695923]
[313.59460449 157.80169678]
[298.99090576 154.37643433]
[284.38723755 150.95117188]
[269.78353882 147.52590942]
[255.17987061 144.10064697]
[242.69580078 152.14326477]
[227.83679199 148.87759399]
[219.48559570 135.72863770]
[204.88191223 132.30335999]
[190.27822876 128.87809753]
[176.12040710 133.50469971]
[164.45167542 122.82054138]
[149.84799194 119.39527893]
[135.24430847 115.97001648]
[120.64062500 112.54474640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[7 66]
[8 65]
[9 64]
[10 63]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[18 52]
[19 51]
[20 50]
[21 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[87 149]
[88 148]
[89 147]
[90 146]
[92 144]
[93 143]
[94 142]
[97 139]
[98 138]
[99 137]
[100 136]
[101 135]
[102 134]
[103 133]
[104 132]
[105 131]
[106 130]
[109 126]
[110 125]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
