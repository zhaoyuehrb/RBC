%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCAGUGCUGCCUGUCACACCUGAGCCAGCAGUUUGUGCAACCAGAGGAGCGCAGGCAGGGUUCCCUGCUGGGGCCCGGGCUGCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[53.54099274 147.69003296]
[39.62302399 142.09625244]
[29.48295975 131.04280090]
[25.10737991 116.69517517]
[27.35352898 101.86429596]
[35.78135300 89.45575714]
[48.73971558 81.90057373]
[63.68988419 80.67890930]
[77.70290375 86.03011322]
[88.03233337 96.90398407]
[77.88291931 85.85910034]
[67.73351288 74.81421661]
[57.58410645 63.76932907]
[47.43469620 52.72444534]
[37.28528595 41.67956161]
[27.13587761 30.63467407]
[16.98646927 19.58978844]
[3.33089280 22.18520355]
[-9.70310879 17.67860985]
[-18.69601250 7.36698198]
[-21.34571457 -5.94512558]
[-17.05611992 -18.70785904]
[-26.82670593 -30.08923149]
[-36.59729385 -41.47060394]
[-51.03792572 -36.80757523]
[-66.12303162 -38.02524185]
[-79.55637360 -44.90702057]
[-89.30513763 -56.37651443]
[-93.90747833 -70.66578674]
[-92.69171906 -85.58782959]
[-85.87416077 -98.87127686]
[-95.64474487 -110.25265503]
[-105.41533661 -121.63402557]
[-121.23851013 -124.28103638]
[-128.90832520 -138.37193298]
[-122.54116821 -153.09738159]
[-107.02136993 -157.16128540]
[-94.25438690 -147.44615173]
[-94.03395844 -131.40461731]
[-84.26337433 -120.02323914]
[-74.49279022 -108.64186859]
[-60.33014679 -113.36932373]
[-45.39608002 -112.31145477]
[-31.96850967 -105.59838867]
[-22.10751343 -94.22525024]
[-17.33927727 -79.90471649]
[-18.41995239 -64.80918884]
[-25.21592140 -51.24118805]
[-15.44533443 -39.85981750]
[-5.67474747 -28.47844696]
[10.53646374 -30.36434937]
[24.85757446 -22.19889641]
[31.62553024 -6.98617411]
[28.03135300 9.44038010]
[38.18076324 20.48526573]
[48.33017349 31.53015137]
[58.47957993 42.57503510]
[68.62899017 53.61992264]
[78.77839661 64.66481018]
[88.92781067 75.70969391]
[99.07721710 86.75457764]
[112.65393829 93.13209534]
[127.63468170 93.89183044]
[141.80903625 86.86343384]
[154.12808228 95.23542786]
[169.10882568 95.99516296]
[184.08956909 96.75490570]
[199.07032776 97.51464081]
[213.41506958 89.56728363]
[227.32872009 98.24726868]
[226.49812317 114.62536621]
[211.77770996 121.85320282]
[198.31057739 112.49538422]
[183.32983398 111.73564911]
[168.34909058 110.97591400]
[153.36834717 110.21617126]
[140.26551819 117.29891968]
[126.87494659 108.87258148]
[111.89419556 108.11284637]
[107.71426392 114.34005737]
[95.17446136 133.02168274]
[101.55197906 146.59840393]
[107.92949677 160.17512512]
[114.30702209 173.75184631]
[128.06861877 182.67094421]
[126.95513153 199.03225708]
[112.11203003 206.00463867]
[98.80860901 196.41552734]
[100.73030090 180.12936401]
[94.35278320 166.55264282]
[87.97526550 152.97592163]
[81.59774780 139.39920044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[22 50]
[23 49]
[24 48]
[31 41]
[32 40]
[33 39]
[62 79]
[63 78]
[65 76]
[66 75]
[67 74]
[68 73]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
