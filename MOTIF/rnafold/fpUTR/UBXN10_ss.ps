%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCCCGGGAGACCAGGGUUGUUUACCAGCAGGACAGAGCCCGGGCGCAGGCGGCGGAUGGAGCGGAACGGCUAGGGGUCUUGAGAAGCA\
) } def
/len { sequence length } bind def

/coor [
[50.82401276 177.92610168]
[47.94047165 180.55209351]
[44.71936035 181.77532959]
[41.71405411 181.68389893]
[30.75151443 191.92219543]
[19.78897476 202.16049194]
[8.82643604 212.39878845]
[-1.95970690 222.82275391]
[-12.56630898 233.42935181]
[-16.28576088 249.40113831]
[-32.05393219 253.90632629]
[-43.64988327 242.31037903]
[-39.14468765 226.54220581]
[-23.17291069 222.82275391]
[-12.56630898 212.21615601]
[-10.00965786 205.11178589]
[-1.41186130 201.43624878]
[9.55067825 191.19795227]
[20.51321793 180.95965576]
[31.47575760 170.72135925]
[41.71405411 159.75881958]
[51.18037415 148.12313843]
[60.64669418 136.48747253]
[70.11301422 124.85180664]
[79.57933044 113.21613312]
[75.90767670 103.35111237]
[76.74769592 92.85854340]
[81.94208527 83.70332336]
[90.51810455 77.59992218]
[100.86976624 75.69129181]
[111.05854797 78.33485413]
[121.66514587 67.72824860]
[132.27174377 57.12165070]
[142.87835693 46.51504898]
[153.48495483 35.90844727]
[164.09155273 25.30184555]
[163.23884583 6.54392433]
[175.99279785 -6.80694151]
[194.14292908 -6.81212997]
[204.00099182 -18.11782455]
[213.85903931 -29.42352104]
[223.71710205 -40.72921753]
[218.85662842 -55.23173523]
[221.88781738 -70.12162018]
[231.89846802 -81.41999054]
[246.12515259 -86.15891266]
[260.71545410 -83.16070557]
[270.57348633 -94.46640015]
[280.43154907 -105.77209473]
[277.97296143 -119.14249420]
[283.64373779 -131.28196716]
[295.13461304 -137.78381348]
[308.07131958 -136.43391418]
[318.30960083 -147.39645386]
[319.20111084 -163.41471863]
[332.36346436 -172.58708191]
[347.69961548 -167.87730408]
[353.44497681 -152.89830017]
[345.19223022 -139.14070129]
[329.27215576 -137.15815735]
[319.03384399 -126.19561005]
[320.38046265 -109.52780914]
[309.11032104 -96.72441101]
[291.73724365 -95.91403961]
[281.87918091 -84.60834503]
[272.02114868 -73.30265045]
[276.97811890 -59.25651932]
[274.22055054 -44.51705933]
[264.39053345 -33.06118011]
[250.05207825 -28.03071785]
[235.02279663 -30.87116051]
[225.16474915 -19.56546593]
[215.30668640 -8.25977039]
[205.44863892 3.04592514]
[208.71203613 14.23322010]
[206.04748535 25.70255089]
[198.02291870 34.48442078]
[186.60946655 38.24563599]
[174.69815063 35.90844727]
[164.09155273 46.51504898]
[153.48495483 57.12165070]
[142.87835693 67.72824860]
[132.27174377 78.33485413]
[121.66514587 88.94145203]
[122.99492645 107.93115234]
[110.24112701 122.06330109]
[91.21500397 122.68245697]
[81.74868011 134.31813049]
[72.28236389 145.95379639]
[62.81604385 157.58946228]
[53.34972382 169.22512817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[8 15]
[9 14]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[36 79]
[39 74]
[40 73]
[41 72]
[42 71]
[47 66]
[48 65]
[49 64]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
