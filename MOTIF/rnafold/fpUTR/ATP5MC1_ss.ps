%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGACACGUGGGUGGGGGAAGCUGAGCGCUGAGACCAAGGGCUAAAGCUGGGAGGUGAGUCUGUCACCUUGAGCCGGGCGAGCGCUGUGGGCCAAGCAGGGGUUGCAGGGUAGUAGGAGUGCAGACUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[131.63578796 162.77311707]
[120.57829285 167.21473694]
[108.92944336 169.72483826]
[97.02398682 170.23126221]
[85.20405579 168.71948242]
[73.80931091 165.23292542]
[66.76723480 178.47714233]
[59.72516251 191.72135925]
[60.83792877 208.08270264]
[47.07594299 217.00122070]
[32.59635544 209.30227661]
[32.29452515 192.90591431]
[46.48094940 184.67929077]
[53.52302170 171.43507385]
[60.56509781 158.19085693]
[51.88533783 151.24711609]
[44.40865707 143.02197266]
[38.32200241 133.72109985]
[33.77756500 123.57704163]
[30.88897896 112.84346008]
[29.72846985 101.78873444]
[14.77819633 100.56835175]
[-0.17207718 99.34796906]
[-15.12235069 98.12759399]
[-31.52280426 106.40672302]
[-45.58673477 95.97595215]
[-60.56135559 95.10378265]
[-75.53598022 94.23161316]
[-89.76268768 101.15341187]
[-102.01854706 92.68917847]
[-116.99316406 91.81700134]
[-127.59200287 103.31477356]
[-143.10832214 105.25848389]
[-156.21577454 96.73038483]
[-160.72544861 81.75717926]
[-154.50798035 67.40875244]
[-140.49909973 60.46000290]
[-125.31335449 64.19190979]
[-116.12099457 76.84238434]
[-101.14636993 77.71455383]
[-87.99074554 70.73036957]
[-74.66380310 79.25698853]
[-59.68918610 80.12915802]
[-44.71456146 81.00133514]
[-35.41850662 73.17191315]
[-22.88004875 73.83370209]
[-13.90196991 83.17731476]
[1.04830289 84.39769745]
[15.99857616 85.61808014]
[30.94884872 86.83845520]
[37.15462112 68.50800323]
[48.12365723 52.56443405]
[63.02458191 40.21617126]
[80.72800446 32.39913177]
[99.89211273 29.70578957]
[119.06439972 32.34029007]
[136.79173279 40.10295105]
[151.73048401 52.40541458]
[162.74841309 68.31523895]
[176.78315735 63.02127838]
[190.81790161 57.72732162]
[204.85264587 52.43336105]
[218.88739014 47.13940430]
[232.92213440 41.84544373]
[239.92456055 35.83485031]
[247.34552002 36.59575653]
[261.49966431 31.62980652]
[275.65377808 26.66385460]
[289.74917603 21.53355408]
[303.78390503 16.23959541]
[317.81866455 10.94563580]
[331.85339355 5.65167761]
[343.13418579 -8.84876728]
[360.30877686 -5.43881607]
[374.21655273 -11.05791473]
[388.12429810 -16.67701340]
[394.36557007 -30.94880867]
[408.55007935 -36.44925308]
[422.11758423 -30.41119194]
[436.02532959 -36.03029251]
[449.93310547 -41.64939117]
[463.84085083 -47.26848984]
[467.69503784 -62.18330002]
[479.45501709 -71.85573578]
[494.47784424 -72.73833466]
[506.98995972 -64.70185089]
[520.89770508 -70.32095337]
[534.80548096 -75.94004822]
[548.71319580 -81.55915070]
[553.37310791 -96.48628998]
[566.56561279 -104.88226318]
[582.06158447 -102.78274536]
[592.54437256 -91.17906952]
[593.06427002 -75.55013275]
[583.37585449 -63.27544022]
[568.05358887 -60.15073013]
[554.33233643 -67.65139008]
[540.42456055 -62.03229141]
[526.51678467 -56.41319275]
[512.60906982 -50.79409409]
[509.19119263 -36.32148743]
[497.77157593 -26.52065468]
[482.59310913 -25.30924225]
[469.45996094 -33.36073303]
[455.55221558 -27.74163246]
[441.64443970 -22.12253380]
[427.73669434 -16.50343513]
[422.17141724 -2.73523092]
[408.14703369 3.16145587]
[393.74340820 -2.76925611]
[379.83563232 2.84984279]
[365.92788696 8.46894169]
[360.87588501 19.52306747]
[349.26004028 24.28992081]
[337.14736938 19.68642044]
[323.11260986 24.98037910]
[309.07788086 30.27433777]
[295.04312134 35.56829453]
[289.84744263 40.92129135]
[280.61972046 40.81798172]
[266.46560669 45.78393555]
[252.31147766 50.74988556]
[238.21607971 55.88018799]
[224.18133545 61.17414474]
[210.14660645 66.46810150]
[196.11186218 71.76206207]
[182.07711792 77.05602264]
[168.04237366 82.34998322]
[170.04595947 94.09654999]
[170.03666687 106.01276398]
[168.01473999 117.75619507]
[164.03829956 128.98936462]
[158.22161865 139.38948059]
[150.73182678 148.65766907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[21 50]
[22 49]
[23 48]
[24 47]
[26 44]
[27 43]
[28 42]
[30 40]
[31 39]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
[66 122]
[67 121]
[68 120]
[69 118]
[70 117]
[71 116]
[72 115]
[74 112]
[75 111]
[76 110]
[79 107]
[80 106]
[81 105]
[82 104]
[86 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
