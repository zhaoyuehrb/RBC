%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAUGCUGAUCCCCACUACAAUCAGUGACCUGAACUCAGAGUCCAAGUAGGACACGCAGGUGGACGUGGUGACUGAG\
) } def
/len { sequence length } bind def

/coor [
[169.36561584 227.54849243]
[161.52813721 214.75889587]
[153.69065857 201.96928406]
[145.85317993 189.17968750]
[132.60606384 182.37063599]
[131.99263000 166.56132507]
[124.15514374 153.77171326]
[116.31766510 140.98211670]
[105.80675507 143.72735596]
[94.94364929 143.82046509]
[84.38722229 141.25579834]
[74.77773285 136.18891907]
[66.69801331 128.92710876]
[60.63810349 119.91083527]
[56.96555710 109.68694305]
[55.90311050 98.87551880]
[41.19132996 95.94916534]
[26.47955132 93.02280426]
[11.76777172 90.09645081]
[-1.23211730 99.08413696]
[-16.76446342 96.16492462]
[-25.61420059 83.07073975]
[-22.53093529 67.57012177]
[-9.34391689 58.85932159]
[6.12323236 62.10629654]
[14.69412708 75.38467407]
[29.40590668 78.31102753]
[44.11768341 81.23738098]
[58.82946396 84.16373444]
[64.09421539 74.37628174]
[71.63813019 66.21531677]
[80.98235321 60.19887924]
[76.91074371 45.76205063]
[72.83914185 31.32522202]
[60.72122955 20.27586365]
[64.49513245 4.31686258]
[80.27857208 -0.13452949]
[91.83490753 11.50089836]
[87.27597046 27.25361443]
[91.34757233 41.69044113]
[95.41918182 56.12726974]
[109.45343781 56.91366196]
[122.52778625 62.07508469]
[132.26950073 50.66899490]
[142.01123047 39.26290512]
[151.75294495 27.85681725]
[151.93272400 11.81477165]
[164.67504883 2.06732702]
[180.20510864 6.09188938]
[186.60955811 20.80115891]
[178.97544861 34.91144180]
[163.15904236 37.59853745]
[153.41731262 49.00462723]
[143.67559814 60.41071701]
[133.93386841 71.81680298]
[143.40902710 92.16060638]
[141.64823914 114.53354645]
[129.10726929 133.14463806]
[136.94474792 145.93423462]
[144.78222656 158.72384644]
[158.58993530 166.44769287]
[158.64277649 181.34220886]
[166.48025513 194.13180542]
[174.31773376 206.92141724]
[182.15521240 219.71101379]
[197.08198547 216.96220398]
[211.99304199 219.79504395]
[224.87178040 227.82638550]
[233.97645569 239.97007751]
[238.07574463 254.58378601]
[236.61523438 269.69110107]
[229.79246521 283.24893188]
[218.53016663 293.42364502]
[204.35144043 298.83920288]
[189.17387390 298.76321411]
[175.05009460 293.20596313]
[163.89022827 282.91897583]
[157.20355225 269.29351807]
[155.89439392 254.17233276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[6 60]
[7 59]
[8 58]
[16 29]
[17 28]
[18 27]
[19 26]
[32 41]
[33 40]
[34 39]
[43 55]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
