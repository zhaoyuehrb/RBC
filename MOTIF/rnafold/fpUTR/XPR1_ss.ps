%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGGGGCUAUGGAGAGGAGGAGGAAGAUGGCGGGCGGGCUGCUCUGAAGAGACCUCGGCGGCGGCGGAGGAGGAGAGAAGCGCAGCGCCGCGCCGCGCCGGGGCCCAUGUGGGGAGGAGUCGGAGUCGCUGUUGCCGCCGCCGCCUGUAGCUGCUGGACCCGAGUGGGAGUGAGGGGGAAACGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[291.58953857 335.25918579]
[282.11499023 323.63021851]
[272.64044189 312.00125122]
[263.07156372 300.44976807]
[253.40898132 288.97656250]
[243.74639893 277.50335693]
[234.08381653 266.03015137]
[224.42123413 254.55693054]
[214.66560364 243.16275024]
[204.81755066 231.84834290]
[194.96949768 220.53392029]
[180.77738953 216.01364136]
[177.55326843 200.52442932]
[167.70521545 189.21002197]
[157.85716248 177.89559937]
[148.00910950 166.58119202]
[133.81700134 162.06091309]
[130.59288025 146.57170105]
[120.74482727 135.25727844]
[114.53528595 138.23806763]
[107.91365814 140.13475037]
[101.06766510 140.89356995]
[94.19140625 140.49301147]
[87.47982788 138.94444275]
[81.12320709 136.29174805]
[75.30176544 132.61013794]
[70.18054199 128.00399780]
[65.90473938 122.60391998]
[62.59556961 116.56298828]
[60.34685898 110.05248260]
[59.22235870 103.25698090]
[59.25394821 96.36913300]
[60.44073105 89.58422852]
[62.74906540 83.09461975]
[50.45789719 74.49652863]
[38.16672516 65.89843750]
[25.87555695 57.30035019]
[13.51481628 48.80258179]
[1.08532405 40.40569305]
[-11.34416771 32.00880432]
[-23.77366066 23.61191750]
[-36.27108002 15.31646729]
[-48.83560181 7.12300682]
[-61.40012360 -1.07045448]
[-73.96464539 -9.26391602]
[-86.52916718 -17.45737648]
[-102.31501770 -18.51442337]
[-108.74947357 -31.94748306]
[-121.31399536 -40.14094162]
[-133.99923706 -30.51287842]
[-149.18804932 -25.81586838]
[-165.04032898 -26.59972191]
[-179.64222717 -32.75142288]
[-191.23710632 -43.51098633]
[-198.43692017 -57.56532288]
[-200.38835144 -73.20844269]
[-196.87390137 -88.54855347]
[-209.57011414 -96.53641510]
[-222.26634216 -104.52427673]
[-234.96255493 -112.51213837]
[-250.76353455 -113.31210327]
[-257.41577148 -126.63864899]
[-270.11199951 -134.62651062]
[-286.51095581 -134.70819092]
[-294.40356445 -149.08311462]
[-285.67062378 -162.96359253]
[-269.29580688 -162.07058716]
[-262.12414551 -147.32273865]
[-249.42791748 -139.33486938]
[-234.53506470 -139.10624695]
[-226.97470093 -125.20835876]
[-214.27847290 -117.22049713]
[-201.58226013 -109.23263550]
[-188.88603210 -101.24477386]
[-177.96546936 -110.26531219]
[-164.77212524 -115.47806549]
[-150.59228516 -116.36053467]
[-136.81285095 -112.81312561]
[-124.78565979 -105.17016602]
[-115.69487762 -94.16844940]
[-110.44039917 -80.87621307]
[-109.54878235 -66.58943176]
[-113.12053680 -52.70546341]
[-100.55601501 -44.51200485]
[-85.66885376 -44.04100800]
[-78.33570099 -30.02189827]
[-65.77118683 -21.82843590]
[-53.20666122 -13.63497543]
[-40.64213943 -5.44151449]
[-28.07761955 2.75194645]
[-20.74638939 3.77371645]
[-15.37677193 11.18242455]
[-2.94728017 19.57931328]
[9.48221207 27.97620010]
[21.91170311 36.37308884]
[29.22533226 37.51405334]
[34.47364807 45.00918198]
[46.76481628 53.60727310]
[59.05598450 62.20536041]
[71.34715271 70.80345154]
[92.38703156 59.80713272]
[115.99089050 62.34743881]
[124.28633881 49.85001755]
[132.58178711 37.35259628]
[140.87724304 24.85517693]
[135.84655762 5.41792345]
[146.54681396 -11.20968914]
[165.72151184 -14.57840252]
[173.39703369 -27.46585655]
[181.07255554 -40.35330963]
[178.54054260 -56.19529343]
[189.45367432 -67.95467377]
[205.44033813 -66.61065674]
[214.23690796 -53.19426346]
[209.09544373 -37.99739456]
[193.96000671 -32.67779541]
[186.28448486 -19.79034042]
[178.60897827 -6.90288639]
[183.72933960 2.02391887]
[184.68179321 12.35200500]
[181.22691345 22.21729088]
[173.92691040 29.81113243]
[164.05520630 33.71186066]
[153.37466431 33.15062714]
[145.07920837 45.64804840]
[136.78376770 58.14546585]
[128.48831177 70.64289093]
[138.95494080 87.51252747]
[140.24665833 107.32329559]
[132.05923462 125.40923309]
[141.90728760 136.72364807]
[156.80380249 142.05322266]
[159.32353210 156.73313904]
[169.17156982 168.04756165]
[179.01962280 179.36196899]
[188.86767578 190.67637634]
[203.76419067 196.00595093]
[206.28392029 210.68586731]
[216.13195801 222.00028992]
[225.98001099 233.31469727]
[233.98748779 237.74212646]
[235.89445496 244.89436340]
[245.55703735 256.36755371]
[255.21960449 267.84075928]
[264.88220215 279.31399536]
[274.54476929 290.78720093]
[282.47912598 295.34436035]
[284.26940918 302.52670288]
[293.74395752 314.15567017]
[303.21850586 325.78463745]
[315.07254028 324.66696167]
[325.88076782 329.36874390]
[332.99807739 338.61291504]
[334.74401855 350.02685547]
[330.79837036 360.75076294]
[339.88940430 372.68197632]
[348.98040771 384.61315918]
[358.07141113 396.54437256]
[367.16244507 408.47555542]
[376.25344849 420.40676880]
[395.10021973 422.21408081]
[406.45901489 436.96084595]
[403.49862671 455.01495361]
[412.97317505 466.64392090]
[422.44772339 478.27288818]
[437.13479614 474.24676514]
[452.18869019 476.54888916]
[465.00125122 484.78045654]
[473.35260010 497.51522827]
[475.79583740 512.54687500]
[471.90762329 527.27105713]
[462.36163330 539.13671875]
[448.81179810 546.08807373]
[433.60565186 546.92077637]
[419.37780762 541.49053955]
[408.59326172 530.73809814]
[403.12057495 516.52655029]
[403.90786743 501.31796265]
[410.81875610 487.74743652]
[401.34420776 476.11846924]
[391.86965942 464.48950195]
[380.52041626 465.81805420]
[369.83120728 461.45147705]
[362.50762939 452.36981201]
[360.46362305 440.76177979]
[364.32223511 429.49777222]
[355.23123169 417.56658936]
[346.14022827 405.63537598]
[337.04922485 393.70419312]
[327.95819092 381.77297974]
[318.86718750 369.84179688]
[300.62136841 368.49829102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 140]
[10 139]
[11 138]
[13 136]
[14 135]
[15 134]
[16 133]
[18 131]
[19 130]
[34 100]
[35 99]
[36 98]
[37 97]
[38 95]
[39 94]
[40 93]
[41 92]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[48 84]
[49 83]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[102 127]
[103 126]
[104 125]
[105 124]
[108 118]
[109 117]
[110 116]
[155 191]
[156 190]
[157 189]
[158 188]
[159 187]
[160 186]
[163 181]
[164 180]
[165 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
