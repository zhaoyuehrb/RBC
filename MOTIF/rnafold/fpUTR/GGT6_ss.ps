%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUUGGGCAGGGCCUCUGAGACACAGCCGGAAAGGCUGGCAGGCAGGAGGGCUGGGGCGAGCACUGGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[134.90722656 212.64990234]
[130.03672791 198.46264648]
[124.87407684 184.37907410]
[119.42145538 170.40521240]
[113.96883392 156.43133545]
[108.51621246 142.45747375]
[103.06359863 128.48361206]
[88.44370270 126.21361542]
[76.90605927 116.95203400]
[71.52793121 103.16908264]
[73.74375916 88.54087830]
[82.96253967 76.96900940]
[77.50991821 62.99514389]
[65.28544617 52.95159912]
[67.86698151 38.28241348]
[62.41436005 24.30854797]
[56.96174240 10.33468151]
[51.50912094 -3.63918519]
[46.05650330 -17.61305237]
[30.11585426 -17.80841446]
[15.48233795 -24.03640366]
[4.34363508 -35.33441544]
[-1.64705145 -49.98428345]
[-1.61632681 -65.77351379]
[4.40217972 -80.32945251]
[15.47722816 -91.47579193]
[9.45179653 -105.21239471]
[3.42636561 -118.94899750]
[-2.59906578 -132.68559265]
[-8.62449741 -146.42219543]
[-22.98723602 -153.57000732]
[-26.21285629 -169.28544617]
[-15.82693672 -181.51296997]
[0.20333350 -180.87266541]
[9.58090305 -167.85571289]
[5.11210251 -152.44763184]
[11.13753414 -138.71102905]
[17.16296577 -124.97442627]
[23.18839645 -111.23782349]
[29.21382904 -97.50122833]
[43.37046051 -98.31155396]
[56.96856689 -94.18679047]
[68.33748627 -85.61199951]
[76.07296753 -73.62032318]
[79.21063232 -59.66848373]
[77.34612274 -45.45986557]
[70.68710327 -32.73653793]
[60.03036880 -23.06567192]
[65.48298645 -9.09180450]
[70.93560791 4.88206148]
[76.38822937 18.85592842]
[81.84084320 32.82979584]
[93.67530823 41.87383652]
[91.48378754 57.54252625]
[96.93640137 71.51638794]
[111.55629730 73.78638458]
[123.09394073 83.04796600]
[128.47206116 96.83091736]
[126.25624084 111.45912170]
[117.03746033 123.03099060]
[122.49008179 137.00485229]
[127.94270325 150.97872925]
[133.39532471 164.95259094]
[138.84794617 178.92645264]
[145.05560303 186.02705383]
[144.22399902 193.59214783]
[149.09448242 207.77940369]
[164.10197449 211.35414124]
[174.77795410 222.49089050]
[177.71574402 237.63595581]
[171.97790527 251.95660400]
[159.39537048 260.88314819]
[143.98318481 261.56719971]
[130.65930176 253.79045105]
[123.67534637 240.03443909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[12 55]
[13 54]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
