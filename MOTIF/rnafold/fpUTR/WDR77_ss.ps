%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCUCGCGAGAAGUAGAGUUGCGGUUCCCUCGGGAGAGGGGCGGAGGCUCAGAGGUGCACCACGUGGGGUUUGCUGCCGGAGCGGAGUCUCCGGCCGGCGUCCAGUUUGAGUCUAGGUUGGAGUUGGAACCGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[57.12803268 232.34710693]
[49.72540665 245.39321899]
[42.32278442 258.43933105]
[34.92016220 271.48544312]
[27.51753807 284.53158569]
[20.11491394 297.57769775]
[18.57895470 306.66778564]
[12.39699841 310.83078003]
[4.70350885 323.70751953]
[7.21341085 339.55303955]
[-3.71612167 351.29718018]
[-19.70088768 349.93084717]
[-28.47874069 336.50219727]
[-23.31606483 321.31253052]
[-8.17322254 316.01403809]
[-0.47973379 303.13729858]
[7.06879759 290.17507935]
[14.47142124 277.12893677]
[21.87404442 264.08282471]
[29.27666664 251.03671265]
[36.67929077 237.99060059]
[44.08191299 224.94447327]
[50.74139023 211.50381470]
[56.63676453 197.71090698]
[62.53214264 183.91798401]
[68.42751312 170.12507629]
[74.32289124 156.33215332]
[80.21826935 142.53923035]
[72.09578705 129.92871094]
[57.09956360 129.59213257]
[42.10334015 129.25556946]
[27.10711670 128.91899109]
[12.11089420 128.58242798]
[-2.00380039 136.93151855]
[-16.15692711 128.64773560]
[-15.78896141 112.25272369]
[-1.27843595 104.61225891]
[12.44746494 113.58620453]
[27.44368935 113.92277527]
[42.43991089 114.25934601]
[57.43613434 114.59591675]
[72.43235779 114.93248749]
[74.60797119 90.46940613]
[92.01660156 78.54589081]
[91.68003082 63.54967117]
[91.34346008 48.55344772]
[91.00688934 33.55722427]
[90.67031860 18.56100082]
[90.33374786 3.56477666]
[89.99717712 -11.43144703]
[89.66060638 -26.42766953]
[89.32403564 -41.42389297]
[73.18252563 -51.54336929]
[66.36186981 -69.17272186]
[71.40950012 -87.23496246]
[86.14630127 -98.59284210]
[84.80171204 -113.53245544]
[83.45712280 -128.47207642]
[81.94499969 -143.39566040]
[80.26553345 -158.30134583]
[78.25202942 -173.16558838]
[75.90551758 -187.98091125]
[73.55899811 -202.79623413]
[60.62734985 -211.88183594]
[57.99011612 -227.46453857]
[67.21192169 -240.29940796]
[82.82163239 -242.77174377]
[95.55828857 -233.41474915]
[97.86544800 -217.77976990]
[88.37432098 -205.14276123]
[90.72084045 -190.32743835]
[93.06735992 -175.51211548]
[96.40287781 -171.98954773]
[97.50749969 -166.30860901]
[95.17121124 -159.98080444]
[96.85067749 -145.07513428]
[100.75756836 -138.72821045]
[98.39673615 -129.81666565]
[99.74132538 -114.87705231]
[101.08591461 -99.93743134]
[111.69689941 -96.06935883]
[120.10992432 -88.45724487]
[125.06155396 -78.19185638]
[125.78853607 -66.76612854]
[122.14518738 -55.85805893]
[114.63051605 -47.08427811]
[104.32025909 -41.76046371]
[104.65682983 -26.76424217]
[104.99340057 -11.76801777]
[105.32997131 3.22820568]
[105.66654205 18.22443008]
[106.00311279 33.22065353]
[106.33968353 48.21687698]
[106.67625427 63.21310043]
[107.01282501 78.20932007]
[127.07387543 98.38972473]
[113.07472229 128.49571228]
[127.11824799 133.76634216]
[141.16177368 139.03695679]
[155.20529175 144.30758667]
[169.24880981 149.57820129]
[178.46728516 149.67324829]
[183.54609680 155.12785339]
[197.46781921 160.71226501]
[211.38955688 166.29666138]
[225.31127930 171.88107300]
[239.23300171 177.46546936]
[253.15472412 183.04988098]
[267.07644653 188.63427734]
[280.99816895 194.21868896]
[294.91989136 199.80310059]
[311.06823730 196.94592285]
[321.40817261 209.67454529]
[315.30285645 224.89483643]
[299.03295898 226.94947815]
[289.33551025 213.72482300]
[275.41375732 208.14041138]
[261.49203491 202.55601501]
[247.57032776 196.97160339]
[233.64859009 191.38720703]
[219.72686768 185.80279541]
[205.80514526 180.21838379]
[191.88342285 174.63398743]
[177.96170044 169.04957581]
[163.97819519 163.62171936]
[149.93467712 158.35110474]
[135.89114380 153.08047485]
[121.84762573 147.80986023]
[107.80410004 142.53923035]
[94.01118469 148.43461609]
[88.11580658 162.22752380]
[82.22043610 176.02044678]
[76.32505798 189.81335449]
[70.42967987 203.60627747]
[64.53430939 217.39920044]
[79.30558777 214.78974915]
[90.70622253 224.53785706]
[90.42285156 239.53518677]
[78.66210938 248.84565735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[8 16]
[9 15]
[23 135]
[24 134]
[25 133]
[26 132]
[27 131]
[28 130]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[44 95]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[50 89]
[51 88]
[52 87]
[56 80]
[57 79]
[58 78]
[59 76]
[60 75]
[61 72]
[62 71]
[63 70]
[97 129]
[98 128]
[99 127]
[100 126]
[101 125]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
