%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGCUCAGAGCUUCCUCGGGUACUCGGCCACUCGGGGCAUCGCGGCGGCCUUUCUAGCCGCUGUCCCAAGGGUUGGUCUCGCGCUUUCGGCUGCGAGCUCUCUGUGGUGCUGGCAGCGAC\
) } def
/len { sequence length } bind def

/coor [
[135.71876526 313.02810669]
[133.42903137 298.20388794]
[131.13928223 283.37969971]
[128.84954834 268.55548096]
[126.55980682 253.73127747]
[124.27006531 238.90707397]
[121.79120636 224.11331177]
[119.12361908 209.35241699]
[116.45603943 194.59152222]
[113.03823853 179.98609924]
[108.87912750 165.57423401]
[104.72002411 151.16236877]
[100.56092072 136.75050354]
[96.40180969 122.33863831]
[88.47084045 116.88944244]
[84.25842285 109.27748108]
[83.97515869 101.49937439]
[86.90708160 95.28038025]
[91.69699860 91.69963837]
[84.03172302 78.80609894]
[76.36643982 65.91255188]
[68.70116425 53.01900864]
[61.54124069 47.15662766]
[61.00960541 39.69684219]
[53.67610931 26.61174393]
[46.66823959 20.56842232]
[46.32729340 13.09749222]
[39.33036423 -0.17062664]
[32.33343506 -13.43874550]
[25.33650398 -26.70686531]
[18.33957481 -39.97498322]
[11.48832989 -46.19530487]
[11.33829021 -53.67250443]
[4.68249321 -67.11499023]
[-8.37481880 -76.04903412]
[-7.08826017 -90.88796997]
[-13.74405766 -104.33045197]
[-20.39985466 -117.77293396]
[-27.05565262 -131.21542358]
[-33.71144867 -144.65789795]
[-40.36724854 -158.10038757]
[-45.80113983 -162.18968201]
[-47.94203186 -167.61291504]
[-46.99988556 -172.40353394]
[-52.96062088 -186.16831970]
[-58.92135620 -199.93312073]
[-64.88208771 -213.69792175]
[-70.84282684 -227.46272278]
[-86.10937500 -229.14439392]
[-98.48024750 -238.24697876]
[-104.62774658 -252.32191467]
[-102.89822388 -267.58312988]
[-93.75691223 -279.92541504]
[-79.66277313 -286.02874756]
[-64.40706635 -284.25140381]
[-52.09350204 -275.07144165]
[-46.03435516 -260.95825195]
[-47.85951996 -245.70819092]
[-57.07802582 -233.42344666]
[-51.11729050 -219.65866089]
[-45.15655899 -205.89385986]
[-39.19582367 -192.12905884]
[-33.23508835 -178.36425781]
[-26.92476463 -164.75617981]
[-20.26896667 -151.31370544]
[-13.61316967 -137.87121582]
[-6.95737219 -124.42873383]
[-0.30157450 -110.98625183]
[6.35422325 -97.54376984]
[18.93546867 -89.57122040]
[18.12497711 -73.77079010]
[24.78077316 -60.32830429]
[31.60769463 -46.97191238]
[38.60462189 -33.70379257]
[45.60155106 -20.43567467]
[52.59848022 -7.16755581]
[59.59540939 6.10056305]
[66.76120758 19.27824593]
[74.09470367 32.36334610]
[81.59470367 45.35372543]
[89.25998688 58.24727249]
[96.92526245 71.14081573]
[104.59054565 84.03436279]
[117.94693756 90.86128235]
[132.88703918 89.52214050]
[147.82714844 88.18300629]
[155.67481995 74.79668427]
[169.90547180 68.61053467]
[185.04710388 72.00325775]
[195.27745056 83.67027283]
[196.66275024 99.12538910]
[188.67031860 112.42578888]
[174.37341309 118.45719910]
[159.26947021 114.90042114]
[149.16627502 103.12310791]
[134.22618103 104.46224213]
[119.28607178 105.80138397]
[110.81367493 118.17952728]
[114.97278595 132.59140015]
[119.13188934 147.00326538]
[123.29099274 161.41511536]
[127.45010376 175.82698059]
[130.89968872 178.88734436]
[132.91755676 182.54058838]
[133.49737549 186.23802185]
[132.82028198 189.48986816]
[131.21693420 191.92393494]
[133.88452148 206.68482971]
[136.55209351 221.44572449]
[141.20726013 229.44332886]
[139.09426880 236.61732483]
[141.38401794 251.44154358]
[143.67375183 266.26574707]
[145.96348572 281.08993530]
[148.25323486 295.91415405]
[150.54296875 310.73837280]
[164.00892639 318.68832397]
[169.16552734 333.45123291]
[163.57798767 348.05648804]
[149.88456726 355.60794067]
[134.55087280 352.54000854]
[124.81703186 340.30130005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[7 109]
[8 108]
[9 107]
[10 102]
[11 101]
[12 100]
[13 99]
[14 98]
[19 83]
[20 82]
[21 81]
[22 80]
[24 79]
[25 78]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[33 72]
[34 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[84 97]
[85 96]
[86 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
