%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGUACAGGAGCAGCACUGCCGGCGGGGGCGGGUGCCAGGGACUUGGAGGUGGAGGGGACGCGGCGGUACUCUGGCGUCUUCCGACUUCGACUCCUUACCUUAAAAG\
) } def
/len { sequence length } bind def

/coor [
[83.44392395 292.00054932]
[75.11553955 279.25070190]
[72.69940948 264.21469116]
[76.61413574 249.49752808]
[86.18148041 237.64907837]
[99.74384308 230.72215271]
[98.90278625 215.74574280]
[98.06172943 200.76934814]
[97.22067261 185.79293823]
[93.65245819 179.19665527]
[96.57203674 170.38584900]
[96.15134430 155.39175415]
[95.73065186 140.39765930]
[95.30995178 125.40355682]
[94.88925934 110.40945435]
[91.40568542 110.40924835]
[87.71003723 109.28156281]
[84.15187836 106.94556427]
[69.17547607 106.10450745]
[54.19907761 105.26345062]
[39.22267532 104.42239380]
[24.24627304 103.58133698]
[9.25954819 102.95039368]
[-5.73455143 102.52970123]
[-20.72865105 102.10900879]
[-32.03937149 113.14726257]
[-47.84124756 112.87106323]
[-58.75930405 101.44427490]
[-58.31605148 85.64620209]
[-46.77446747 74.84956360]
[-30.98196411 75.45982361]
[-20.30795670 87.11490631]
[-5.31385756 87.53560638]
[9.68024158 87.95629883]
[16.55310440 84.95513153]
[25.08732986 88.60493469]
[40.06373215 89.44599152]
[55.04013443 90.28704834]
[70.01653290 91.12810516]
[84.99293518 91.96916199]
[71.92649841 84.60247040]
[66.10346985 70.77885437]
[69.96069336 56.28327179]
[81.88398743 47.18189240]
[96.88364410 47.28349304]
[108.68254852 56.54555511]
[112.34305573 71.09205627]
[106.33244324 84.83645630]
[117.79300690 75.15887451]
[129.25357056 65.48129272]
[140.71412659 55.80371475]
[152.17468262 46.12613678]
[163.63525391 36.44855499]
[165.11251831 20.94192886]
[176.87301636 11.29074764]
[191.64710999 12.79465389]
[203.10766602 3.11707401]
[214.56822205 -6.56050587]
[217.25675964 -12.85614681]
[222.04989624 -16.23707390]
[226.95352173 -16.43744850]
[238.93867493 -25.45720482]
[250.92382812 -34.47696304]
[262.90899658 -43.49671936]
[274.89416504 -52.51647568]
[286.87930298 -61.53623199]
[289.91659546 -67.67121887]
[294.89178467 -70.77807617]
[299.79891968 -70.70318604]
[312.27096558 -79.03674316]
[324.74301147 -87.37029266]
[331.50692749 -102.30954742]
[347.85104370 -103.65196228]
[356.96191406 -90.01657104]
[349.46707153 -75.43029785]
[333.07656860 -74.89824677]
[320.60452271 -66.56469727]
[308.13247681 -58.23114395]
[295.89907837 -49.55107498]
[283.91390991 -40.53131866]
[271.92874146 -31.51156044]
[259.94360352 -22.49180412]
[247.95843506 -13.47204876]
[235.97328186 -4.45229197]
[224.24580383 4.90005493]
[212.78524780 14.57763481]
[201.32467651 24.25521469]
[200.33259583 39.07247925]
[188.84780884 49.05018234]
[173.31282043 47.90911484]
[161.85226440 57.58669662]
[150.39170837 67.26427460]
[138.93115234 76.94185638]
[127.47058868 86.61943817]
[116.01002502 96.29701233]
[109.88336182 109.98876190]
[110.30405426 124.98286438]
[110.72474670 139.97695923]
[111.14543915 154.97106934]
[111.56613922 169.96516418]
[112.19707489 184.95188904]
[113.03813171 199.92828369]
[113.87918854 214.90469360]
[114.72024536 229.88108826]
[128.97290039 235.24595642]
[139.80668640 245.94871521]
[145.34460449 260.13500977]
[144.62716675 275.34701538]
[137.77867126 288.94915771]
[125.98566437 298.58477783]
[111.29135895 302.58441162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 104]
[7 103]
[8 102]
[9 101]
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 34]
[24 33]
[25 32]
[48 95]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[56 87]
[57 86]
[58 85]
[61 84]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
