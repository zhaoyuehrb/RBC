%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGUAAACUUUUGCUGGGCUCCAAGUGACCGCCCAUAGUUUAUUAUAAAGGUGACUGCACCCUGCAGCCACCAGCACUGCCUGGCUCCACGUGCCUCCUGGUCUCAGU\
) } def
/len { sequence length } bind def

/coor [
[76.36296082 176.67884827]
[87.96313477 166.61250305]
[85.03678131 151.90071106]
[82.11042786 137.18893433]
[69.99995422 128.33815002]
[55.09426880 130.01762390]
[40.18858337 131.69708252]
[25.28290176 133.37655640]
[10.37721825 135.05603027]
[-4.52846432 136.73548889]
[-19.43414688 138.41496277]
[-34.33983231 140.09442139]
[-38.38845062 147.75970459]
[-45.11907578 153.07077026]
[-53.33154678 155.17855835]
[-61.60044479 153.79666138]
[-68.52245331 149.23757935]
[-72.95449829 142.34632874]
[-87.95449829 142.34632874]
[-102.95449829 142.34632874]
[-117.95449829 142.34632874]
[-132.95449829 142.34632874]
[-140.01078796 155.92820740]
[-152.57725525 164.66561890]
[-167.76622009 166.55078125]
[-182.08737183 161.15049744]
[-192.24981689 149.70570374]
[-195.91828918 134.84632874]
[-192.24981689 119.98696136]
[-182.08737183 108.54216766]
[-167.76622009 103.14187622]
[-152.57725525 105.02703857]
[-140.01078796 113.76445007]
[-132.95449829 127.34632874]
[-117.95449829 127.34632874]
[-102.95449829 127.34632874]
[-87.95449829 127.34632874]
[-72.95449829 127.34632874]
[-55.61693573 114.48344421]
[-36.01929855 125.18874359]
[-21.11361504 123.50927734]
[-6.20793152 121.82981110]
[8.69775200 120.15033722]
[23.60343552 118.47087097]
[38.50911713 116.79140472]
[53.41480255 115.11193848]
[68.32048035 113.43247223]
[66.42977905 101.35638428]
[68.88153076 89.67841339]
[75.15670776 79.87242126]
[84.26758575 73.10144806]
[94.90797424 70.08071136]
[105.63854980 71.00569916]
[112.14680481 57.49116898]
[118.65505981 43.97663498]
[125.16331482 30.46210098]
[124.17991638 14.67148685]
[136.67314148 6.56170034]
[143.18139648 -6.95283270]
[149.68965149 -20.46736526]
[156.19790649 -33.98189926]
[162.70616150 -47.49643326]
[164.13095093 -64.39040375]
[180.75910950 -67.69802856]
[188.54060364 -52.63533401]
[176.22070312 -40.98817444]
[169.71244812 -27.47364235]
[163.20419312 -13.95911026]
[156.69593811 -0.44457677]
[150.18766785 13.06995583]
[151.63658142 27.89392090]
[138.67784119 36.97035599]
[132.16958618 50.48488998]
[125.66133881 63.99942398]
[119.15307617 77.51395416]
[126.24244690 86.44283295]
[129.42207336 97.39152527]
[144.21014404 99.90412140]
[158.99819946 102.41670990]
[173.78627014 104.92930603]
[188.60812378 107.23425293]
[203.46083069 109.33110809]
[214.14964294 98.08259583]
[229.41485596 95.29818726]
[243.38668823 102.04855347]
[250.69268799 115.73803711]
[248.52355957 131.10275269]
[237.71334839 142.23464966]
[222.41883850 144.85330200]
[208.52104187 137.95176697]
[201.36398315 124.18383026]
[186.51126099 122.08697510]
[179.34559631 124.29975128]
[171.27368164 119.71736908]
[156.48561096 117.20478058]
[141.69754028 114.69218445]
[126.90948486 112.17958832]
[122.82386780 120.61486816]
[116.07102203 127.64110565]
[107.14878082 132.41261292]
[96.82220459 134.26258850]
[99.74855804 148.97436523]
[102.67491913 163.68614197]
[117.24430847 168.54704285]
[127.41930389 180.05204773]
[130.46287537 195.10636902]
[125.55632019 209.66044617]
[114.01948547 219.79933167]
[98.95571136 222.79570007]
[84.41707611 217.84355164]
[74.31440735 206.27497864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[53 75]
[54 74]
[55 73]
[56 72]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[77 97]
[78 96]
[79 95]
[80 94]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
