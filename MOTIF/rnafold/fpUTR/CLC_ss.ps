%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUUAAAUUCUGCAGCUCAGAGAUUCACACAGAAGUCUGGACACAAUUCAGAAGAGCCACCCAGAAGGAGACAACA\
) } def
/len { sequence length } bind def

/coor [
[100.38073730 366.95928955]
[88.51116943 357.59954834]
[79.92913818 345.15606689]
[75.39774323 330.73532104]
[75.31993103 315.61959839]
[79.70259857 301.15295410]
[88.15605927 288.62179565]
[99.92862701 279.14031982]
[113.97349548 273.55166626]
[112.76650238 258.60031128]
[111.55950165 243.64895630]
[110.35250092 228.69760132]
[109.14550781 213.74623108]
[94.56804657 203.01971436]
[92.14128876 184.76998901]
[103.79699707 170.11866760]
[101.39082336 155.31291199]
[98.98465729 140.50715637]
[96.57849121 125.70140839]
[88.39295959 123.18503571]
[81.47359467 118.13950348]
[76.57519531 111.11520386]
[74.23211670 102.87840271]
[74.69993591 94.32760620]
[77.92764282 86.39558411]
[67.98080444 75.16792297]
[58.03396225 63.94026184]
[42.17144394 61.54025650]
[34.28287125 47.57064819]
[40.41968155 32.74772263]
[55.87424088 28.44236183]
[68.79113007 37.95726776]
[69.26162720 53.99341965]
[79.20846558 65.22108459]
[89.15530396 76.44874573]
[96.87471008 74.26089478]
[104.89338684 74.53779602]
[111.86423492 61.25595474]
[118.83508301 47.97411346]
[125.80593109 34.69227219]
[132.77677917 21.41043282]
[139.74761963 8.12859249]
[136.36674500 -7.55417442]
[146.63122559 -19.88381004]
[162.66703796 -19.40207291]
[172.17288208 -6.47851086]
[167.85668945 8.97302532]
[153.02946472 15.09943962]
[146.05860901 28.38128090]
[139.08776855 41.66312027]
[132.11691284 54.94496155]
[125.14607239 68.22679901]
[118.17522430 81.50864410]
[125.59239197 104.15917206]
[111.38423920 123.29524231]
[113.79041290 138.10099792]
[116.19657898 152.90675354]
[118.60275269 167.71249390]
[129.70179749 172.81939697]
[136.77728271 182.63003540]
[138.09265137 194.53182983]
[133.42599487 205.42709351]
[124.09686279 212.53924561]
[125.30386353 227.49060059]
[126.51086426 242.44195557]
[127.71785736 257.39331055]
[128.92486572 272.34466553]
[143.68434143 275.60800171]
[156.82537842 283.07821655]
[167.17951965 294.09109497]
[173.82604980 307.66735840]
[176.17396545 322.59982300]
[174.01451111 337.56072998]
[167.53968811 351.21972656]
[157.32524109 362.36227417]
[144.27941895 369.99758911]
[129.56225586 373.44674683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[16 58]
[17 57]
[18 56]
[19 55]
[25 35]
[26 34]
[27 33]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
