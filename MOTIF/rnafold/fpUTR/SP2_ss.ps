%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUUCCAAGCGCUUAUUGGUGAAGGCUGCCGUCGCUCGGGCGGUGGCGGGCUCCGGGAUUGGCGGUUGCUUGGCGGGCGGUGUCAGGCUCUCGGUGGCGGCGGAGGCGGCGGAGGCCAGGGAGGAAGAUGUCGUA\
) } def
/len { sequence length } bind def

/coor [
[115.98107910 227.23890686]
[127.50807953 216.85102844]
[125.80437469 201.94810486]
[116.67157745 190.18199158]
[122.79138184 175.59231567]
[121.08767700 160.68939209]
[119.38397980 145.78645325]
[117.68027496 130.88351440]
[110.61331940 128.37191772]
[99.19635010 138.10089111]
[96.47940063 123.34873199]
[89.41244507 120.83713531]
[78.68580627 131.32232666]
[67.95915985 141.80751038]
[57.23251724 152.29269409]
[53.33151245 168.22109985]
[37.51308060 172.54652405]
[26.04987144 160.81933594]
[30.73425293 145.10346985]
[46.74733353 141.56605530]
[57.47397614 131.08085632]
[68.20061493 120.59568024]
[78.92726135 110.11048889]
[76.65840149 102.96190643]
[62.00782013 99.74312592]
[72.12068176 88.66473389]
[69.85182190 81.51614380]
[55.04187775 79.13591003]
[40.23193359 76.75566864]
[25.42198944 74.37543488]
[10.61204433 71.99519348]
[-4.19790077 69.61495972]
[-19.00784492 67.23471832]
[-33.81779099 64.85447693]
[-48.62773514 62.47424316]
[-62.41846085 70.67152405]
[-77.37419128 64.86586761]
[-82.02217102 49.51087570]
[-72.79686737 36.38558197]
[-56.77514648 35.55858994]
[-46.24749756 47.66429520]
[-31.43755150 50.04453659]
[-16.62760735 52.42477417]
[-1.81766272 54.80501175]
[12.99228191 57.18524933]
[27.80222702 59.56548691]
[42.61217117 61.94572449]
[57.42211533 64.32596588]
[72.23206329 66.70619965]
[86.30788422 61.52245712]
[96.03661346 50.10528564]
[99.09795380 34.58308411]
[113.24184418 29.91406250]
[122.97057343 18.49689102]
[132.69931030 7.07972050]
[142.42803955 -4.33745003]
[152.15676880 -15.75462055]
[147.35998535 -33.16597366]
[153.85595703 -49.84984970]
[168.89874268 -59.26778030]
[186.43304443 -57.84869385]
[195.63204956 -69.69683075]
[197.98371887 -85.34228516]
[211.90045166 -90.65022278]
[221.09944153 -102.49835968]
[223.45112610 -118.14380646]
[237.36784363 -123.45174408]
[246.56684875 -135.29988098]
[255.76585388 -147.14802551]
[264.96484375 -158.99615479]
[274.16384888 -170.84429932]
[283.36285400 -182.69244385]
[286.18948364 -191.47120667]
[292.90859985 -194.70242310]
[302.37490845 -206.33808899]
[305.40063477 -215.05023193]
[312.19155884 -218.12767029]
[321.92028809 -229.54483032]
[331.64901733 -240.96200562]
[341.37774658 -252.37918091]
[337.60742188 -267.43124390]
[343.43572998 -281.81213379]
[356.62161255 -289.99212646]
[372.09478760 -288.82583618]
[383.90554810 -278.76174927]
[387.51235962 -263.66967773]
[381.52838135 -249.35285950]
[368.25454712 -241.31639099]
[352.79492188 -242.65045166]
[343.06619263 -231.23327637]
[333.33746338 -219.81610107]
[323.60873413 -208.39894104]
[314.01055908 -196.87176514]
[304.54425049 -185.23609924]
[295.21099854 -173.49343872]
[286.01199341 -161.64529419]
[276.81298828 -149.79716492]
[267.61398315 -137.94902039]
[258.41497803 -126.10088348]
[249.21598816 -114.25274658]
[247.52227783 -99.45475006]
[232.94758606 -93.29935455]
[223.74858093 -81.45121765]
[222.05487061 -66.65322113]
[207.48017883 -60.49782944]
[198.28118896 -48.64969254]
[203.38273621 -37.52761459]
[203.23657227 -25.21969986]
[197.80879211 -14.09155941]
[188.08656311 -6.30855799]
[175.89915466 -3.41453791]
[163.57394409 -6.02588940]
[153.84519958 5.39128113]
[144.11647034 16.80845261]
[134.38774109 28.22562218]
[124.65901184 39.64279175]
[122.29353333 54.34836197]
[107.45378876 59.83401871]
[97.72505188 71.25119019]
[109.78502655 70.24552917]
[122.14829254 74.46044159]
[132.52156067 83.89910126]
[138.69546509 97.55812836]
[138.98054504 113.51160431]
[132.58320618 129.17982483]
[134.28691101 144.08274841]
[135.99061584 158.98568726]
[137.69432068 173.88861084]
[146.94897461 186.72068787]
[140.70730591 200.24440002]
[142.41101074 215.14732361]
[155.98504639 222.66566467]
[162.51698303 236.74093628]
[159.49516296 251.96092224]
[148.08152771 262.47323608]
[132.66487122 264.23568726]
[119.17319489 256.57052612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[5 128]
[6 127]
[7 126]
[8 125]
[12 23]
[13 22]
[14 21]
[15 20]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[50 119]
[51 118]
[53 116]
[54 115]
[55 114]
[56 113]
[57 112]
[61 106]
[62 105]
[64 103]
[65 102]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[74 94]
[75 93]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
