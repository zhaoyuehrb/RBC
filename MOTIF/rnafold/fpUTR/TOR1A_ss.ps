%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCGGAAGCGUGGGUCUGGCGGCUGCACCGGUUCGCGGUCGGCGCGAGAACAAGCAGGGUGGCGCGGGUCCGGGC\
) } def
/len { sequence length } bind def

/coor [
[113.17647552 381.22097778]
[102.52175903 369.54824829]
[103.32505035 353.76440430]
[115.10977936 343.23370361]
[115.71376801 328.24584961]
[116.31775665 313.25802612]
[116.92174530 298.27020264]
[117.52573395 283.28234863]
[107.26897430 272.54296875]
[107.66799927 257.33456421]
[119.00200653 246.64915466]
[119.60599518 231.66131592]
[120.20998383 216.67347717]
[120.81397247 201.68563843]
[101.00590515 187.19348145]
[96.35958099 162.88668823]
[109.64251709 141.76609802]
[103.76301575 127.96640778]
[97.88352203 114.16671753]
[86.82226562 105.61450958]
[88.31678772 91.71278381]
[82.43729401 77.91308594]
[76.55779266 64.11339569]
[70.14207458 57.21652985]
[70.73181915 49.63768387]
[65.41274261 35.61243820]
[60.09366989 21.58719444]
[53.96086884 14.43758678]
[54.85530090 6.88863182]
[50.10528183 -7.33941507]
[45.35525894 -21.56746101]
[40.60523987 -35.79550934]
[26.95277023 -44.22104263]
[25.17106628 -60.16485214]
[36.62689590 -71.39620972]
[52.53233337 -69.29938507]
[60.68608093 -55.48287582]
[54.83328629 -40.54552841]
[59.58330917 -26.31748199]
[64.33332825 -12.08943462]
[69.08334351 2.13861179]
[74.11891174 16.26812172]
[79.43798828 30.29336548]
[84.75706482 44.31861115]
[90.35748291 58.23389816]
[96.23698425 72.03359222]
[102.11647797 85.83328247]
[113.17773438 94.38549042]
[111.68321228 108.28721619]
[117.56270599 122.08691406]
[123.44220734 135.88659668]
[131.06500244 135.41467285]
[138.58897400 136.64610291]
[145.63893127 139.51351929]
[151.86465454 143.86807251]
[156.95828247 149.48722839]
[160.66952515 156.08609009]
[162.81800842 163.33184814]
[163.30198669 170.86059570]
[162.10314941 178.29556274]
[159.28727722 185.26596069]
[155.00061035 191.42553711]
[149.46232605 196.46972656]
[142.95329285 200.15072632]
[135.80180359 202.28962708]
[135.19781494 217.27746582]
[134.59382629 232.26530457]
[133.98983765 247.25314331]
[144.42727661 258.81591797]
[143.60122681 274.00711060]
[132.51356506 283.88635254]
[131.90957642 298.87417603]
[131.30558777 313.86199951]
[130.70159912 328.84985352]
[130.09761047 343.83767700]
[140.99674988 355.28253174]
[140.52737427 371.07983398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[11 68]
[12 67]
[13 66]
[14 65]
[17 51]
[18 50]
[19 49]
[21 47]
[22 46]
[23 45]
[25 44]
[26 43]
[27 42]
[29 41]
[30 40]
[31 39]
[32 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
