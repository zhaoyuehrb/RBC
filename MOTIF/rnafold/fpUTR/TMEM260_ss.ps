%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGACCCGGAAGCCGCCGUGGCCGCCGCACAAGCUGCGCUCGUCUCUCGGCUGGGGAGCUCCGUGUCGCACCGGGUUCUUGGGCUGGCCGUGUCCUUCUCCCUCGGUCGCCACUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[56.31119156 233.24130249]
[49.65539169 246.68377686]
[42.99959564 260.12628174]
[36.51600647 273.65264893]
[30.20568085 287.26074219]
[35.87731552 302.01226807]
[29.38059616 316.41949463]
[14.56991005 321.93484497]
[0.23217577 315.28619385]
[-5.12628317 300.41799927]
[1.67361140 286.15136719]
[16.59760284 280.95040894]
[22.90792656 267.34231567]
[22.86696053 259.86373901]
[29.55711174 253.47047424]
[36.21290970 240.02798462]
[42.86870575 226.58551025]
[49.00473785 212.89794922]
[54.61199188 198.98541260]
[60.21924973 185.07287598]
[65.64837646 171.08987427]
[70.89849854 157.03866577]
[76.14862061 142.98747253]
[81.39874268 128.93626404]
[86.64885712 114.88506317]
[78.98358154 101.99152374]
[64.13134003 99.89128113]
[49.27910233 97.79103851]
[34.53152466 103.51986694]
[23.01297569 94.07676697]
[8.16073704 91.97652435]
[-6.83896446 98.60532379]
[-19.91807747 88.71245575]
[-17.62193108 72.47485352]
[-2.31260586 66.59636688]
[10.26097870 77.12428284]
[25.11321640 79.22452545]
[38.79846191 73.34546661]
[51.37934494 82.93879700]
[66.23158264 85.03903961]
[81.08382416 87.13928223]
[69.05666351 78.17560577]
[56.17787933 70.48555756]
[49.23577881 57.18866730]
[50.28771973 42.22559738]
[59.02195358 30.03079796]
[72.85000610 24.21831131]
[87.67379761 26.51072311]
[99.10015869 36.22865677]
[103.74278259 50.49210739]
[100.22588348 65.07377625]
[101.21211243 80.04132080]
[107.52243805 66.43324280]
[113.83276367 52.82516479]
[120.14308929 39.21708298]
[118.92933655 23.44250488]
[131.30287170 15.15124798]
[137.61318970 1.54316914]
[143.92352295 -12.06490993]
[150.23384094 -25.67298889]
[156.54417419 -39.28106689]
[162.85449219 -52.88914490]
[169.16481018 -66.49722290]
[175.47514343 -80.10530090]
[174.26139832 -95.87988281]
[186.63493347 -104.17114258]
[192.94525146 -117.77922058]
[199.25556946 -131.38729858]
[200.43363953 -148.30026245]
[217.01176453 -151.85021973]
[225.01226807 -136.90269470]
[212.86364746 -125.07697296]
[206.55332947 -111.46889496]
[200.24301147 -97.86081696]
[201.90811157 -83.05957794]
[189.08322144 -73.79498291]
[182.77290344 -60.18690109]
[176.46257019 -46.57882309]
[170.15225220 -32.97074509]
[163.84191895 -19.36266518]
[157.53160095 -5.75458574]
[151.22126770 7.85349321]
[144.91094971 21.46157265]
[146.57604980 36.26280975]
[133.75115967 45.52740860]
[127.44084167 59.13548660]
[121.13051605 72.74356842]
[114.82019043 86.35164642]
[120.24932861 100.33465576]
[134.08912659 106.11911774]
[147.92890930 111.90358734]
[161.76870728 117.68805695]
[175.60850525 123.47251892]
[186.65959167 112.99428558]
[201.01930237 107.92294312]
[216.19973755 109.13713837]
[229.57080078 116.42649841]
[238.81585693 128.52809143]
[242.33316040 143.34526062]
[239.51330566 158.31083679]
[230.84484863 170.83193970]
[217.82966614 178.73921204]
[202.72271729 180.66265869]
[188.14135742 176.26905823]
[176.61189270 166.31961060]
[170.13189697 152.53811646]
[169.82403564 137.31231689]
[155.98423767 131.52784729]
[142.14445496 125.74338531]
[128.30465698 119.95891571]
[114.46485901 114.17445374]
[100.70005798 120.13518524]
[95.44994354 134.18638611]
[90.19982147 148.23757935]
[84.94969940 162.28878784]
[79.69957733 176.33998108]
[79.61408997 185.59335327]
[74.13178253 190.68013000]
[68.52452850 204.59266663]
[62.91727448 218.50520325]
[63.69558716 223.90464783]
[62.38173294 228.55802917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 13]
[5 12]
[18 120]
[19 119]
[20 118]
[21 116]
[22 115]
[23 114]
[24 113]
[25 112]
[26 41]
[27 40]
[28 39]
[30 37]
[31 36]
[52 88]
[53 87]
[54 86]
[55 85]
[57 83]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[66 74]
[67 73]
[68 72]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
