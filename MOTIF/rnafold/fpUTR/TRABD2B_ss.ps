%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGUGCUCCAGAGGAAACUCCGUGCCCAACUGGGGGCUCCCCGCCCCGCUGAGGGGCGCCGCCCAGGAGGGUCCCCCGCGCCCCGCGGGCCCUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[104.35861969 284.44277954]
[92.30685425 294.07391357]
[76.95895386 295.63772583]
[63.21237946 288.63522339]
[55.45360565 275.30087280]
[56.15843582 259.88961792]
[65.10195923 247.31912231]
[79.43032837 241.60061646]
[82.18656921 226.85601807]
[84.71543121 212.07072449]
[87.01630402 197.24824524]
[89.31717682 182.42576599]
[91.61805725 167.60328674]
[89.49691772 160.38607788]
[94.22480011 152.36262512]
[96.98104095 137.61802673]
[87.01247406 134.85700989]
[78.30796814 129.54968262]
[71.49044800 122.17117310]
[67.02130127 113.34069061]
[65.16965485 103.77010345]
[65.99723816 94.20671082]
[69.35971069 85.37494659]
[74.92385864 77.92147827]
[82.19876862 72.36795807]
[90.57834625 69.07474518]
[89.65493011 54.10319519]
[88.73151398 39.13164520]
[87.80810547 24.16009521]
[76.24884796 13.71876431]
[75.52565002 -1.47767103]
[85.55110168 -12.43330765]
[84.62768555 -27.40485764]
[83.70426941 -42.37640762]
[82.78086090 -57.34795761]
[81.85744476 -72.31950378]
[80.70359039 -87.27506256]
[79.31956482 -102.21107483]
[77.93553925 -117.14708710]
[75.27630615 -120.38538361]
[73.81895447 -123.93642426]
[73.52332306 -127.41555786]
[74.23724365 -130.48515320]
[75.71929169 -132.88481140]
[77.66900635 -134.45274353]
[78.59242249 -149.42430115]
[79.51583862 -164.39584351]
[80.43924713 -179.36740112]
[81.36266327 -194.33894348]
[71.85853577 -207.26376343]
[76.17678070 -222.71473694]
[91.00481415 -228.83918762]
[104.96784210 -220.93896484]
[107.35462189 -205.07444763]
[96.33421326 -193.41552734]
[95.41079712 -178.44398499]
[94.48738861 -163.47242737]
[93.56397247 -148.50088501]
[92.64055634 -133.52932739]
[92.87155151 -118.53111267]
[94.25557709 -103.59510040]
[95.63960266 -88.65908813]
[99.45704651 -82.17723846]
[96.82899475 -73.24291992]
[97.75241089 -58.27136993]
[98.67581940 -43.29981995]
[99.59923553 -28.32827187]
[100.52265167 -13.35672092]
[111.81842804 -3.71613312]
[112.96817780 11.45399284]
[102.77965546 23.23668098]
[103.70306396 38.20822906]
[104.62648010 53.17977905]
[105.54989624 68.15132904]
[125.12995911 76.90274811]
[135.79557800 96.83177948]
[131.83915710 120.26074219]
[145.26661682 126.94682312]
[158.69406128 133.63288879]
[172.12150574 140.31896973]
[185.54896545 147.00505066]
[198.97640991 153.69111633]
[215.85009766 155.33877563]
[218.93795776 172.00915527]
[203.77386475 179.59114075]
[192.29032898 167.11857605]
[178.86288452 160.43249512]
[165.43544006 153.74641418]
[152.00798035 147.06034851]
[138.58053589 140.37426758]
[125.15308380 133.68818665]
[111.72563934 140.37426758]
[108.96939850 155.11886597]
[106.44053650 169.90415955]
[104.13966370 184.72663879]
[101.83878326 199.54911804]
[99.53791046 214.37159729]
[101.33039856 223.51029968]
[96.93116760 229.61225891]
[94.17492676 244.35685730]
[105.46997070 254.86521912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 100]
[9 99]
[10 97]
[11 96]
[12 95]
[13 94]
[15 93]
[16 92]
[26 74]
[27 73]
[28 72]
[29 71]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 62]
[38 61]
[39 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
