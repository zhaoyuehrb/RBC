%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCGGAGGGGCGGCGUGCGCCGGCGUGCGCCGGCGUGACGCGGCUACGCGGGAUGGGCCGGGCCAGGGCCAAGGCCGAGGCGGCAGCGGCUGCGAGAGGCGGCGGCACGACGACGGUCCCUCAGCCCAGCCACC\
) } def
/len { sequence length } bind def

/coor [
[-145.95257568 192.86967468]
[-160.56555176 196.25503540]
[-168.95263672 209.38113403]
[-183.82051086 212.60620117]
[-196.28256226 204.52951050]
[-210.89553833 207.91485596]
[-225.50852966 211.30021667]
[-229.94912720 224.40037537]
[-240.21644592 233.50668335]
[-253.54077148 236.30633545]
[-266.39816284 232.16879272]
[-275.44247437 222.28382874]
[-290.12872314 225.33566284]
[-304.81500244 228.38751221]
[-316.75231934 238.77070618]
[-330.78759766 233.78466797]
[-345.47384644 236.83651733]
[-360.16012573 239.88835144]
[-374.84637451 242.94020081]
[-389.49694824 246.15899658]
[-404.10992432 249.54435730]
[-418.72293091 252.92971802]
[-433.33590698 256.31506348]
[-447.94888306 259.70040894]
[-462.56188965 263.08578491]
[-477.17486572 266.47113037]
[-491.78784180 269.85647583]
[-503.39709473 281.43911743]
[-519.16009521 276.91586304]
[-522.86120605 260.93981934]
[-510.69308472 249.94580078]
[-495.17321777 255.24349976]
[-480.56021118 251.85815430]
[-465.94723511 248.47279358]
[-451.33425903 245.08743286]
[-436.72125244 241.70208740]
[-422.10827637 238.31672668]
[-407.49530029 234.93136597]
[-392.88229370 231.54602051]
[-387.02563477 226.93226624]
[-377.89822388 228.25393677]
[-363.21194458 225.20208740]
[-348.52569580 222.15025330]
[-333.83944702 219.09841919]
[-322.95257568 208.93350220]
[-307.86682129 213.70124817]
[-293.18057251 210.64939880]
[-278.49432373 207.59756470]
[-272.26419067 192.45266724]
[-258.10894775 183.89320374]
[-241.47328186 185.44160461]
[-228.89389038 196.68722534]
[-214.28089905 193.30187988]
[-199.66790771 189.91651917]
[-192.02700806 177.18261719]
[-177.25558472 173.54122925]
[-163.95091248 181.64204407]
[-149.33792114 178.25669861]
[-134.89416504 174.20974731]
[-120.64956665 169.50958252]
[-106.40497589 164.80941772]
[-96.74308777 153.47375488]
[-81.21346283 156.49720764]
[-66.96886444 151.79704285]
[-52.72426987 147.09689331]
[-38.47967529 142.39672852]
[-27.57379150 128.69490051]
[-9.59303951 132.47723389]
[4.54087448 127.45404816]
[18.67478752 122.43085480]
[32.80870056 117.40765381]
[46.88452530 112.22391510]
[60.90043259 106.88028717]
[62.87995911 85.92103577]
[75.29776764 68.92083740]
[94.66192627 60.66020584]
[115.52716827 63.46205139]
[123.89617157 51.01377106]
[132.26518250 38.56549454]
[140.63420105 26.11721420]
[144.45361328 9.59909153]
[161.38352966 8.69657898]
[166.93743896 24.71501923]
[153.08247375 34.48622513]
[144.71347046 46.93450165]
[136.34445190 59.38278198]
[127.97544098 71.83106232]
[132.94670105 77.84984589]
[136.64410400 84.72504425]
[151.33036804 81.67321014]
[163.26770020 71.29000854]
[177.30296326 76.27603912]
[191.98922729 73.22419739]
[206.67549133 70.17235565]
[221.36174011 67.12052155]
[236.04800415 64.06867981]
[246.01376343 51.49635315]
[262.05651855 51.59326935]
[271.86965942 64.28507233]
[267.92535400 79.83570862]
[253.24937439 86.31604767]
[239.09985352 78.75493622]
[224.41358948 81.80677795]
[209.72732544 84.85861969]
[195.04106140 87.91046143]
[180.35479736 90.96230316]
[169.46794128 101.12720490]
[154.38220215 96.35946655]
[139.69593811 99.41130829]
[138.21615601 110.75358582]
[133.56396484 121.20317841]
[126.12554932 129.89265442]
[116.51838684 136.10066223]
[105.53999329 139.31187439]
[94.10171509 139.25970459]
[83.15306854 135.94850159]
[73.60292053 129.65313721]
[66.24405670 120.89619446]
[52.22814941 126.23982239]
[45.25172424 132.27191162]
[37.83189774 131.54156494]
[23.69798279 136.56475830]
[9.56406879 141.58796692]
[-4.56984520 146.61116028]
[-10.84138107 157.94621277]
[-22.78388214 161.81129456]
[-33.77951431 156.64132690]
[-48.02410889 161.34147644]
[-62.26870346 166.04164124]
[-76.51329803 170.74180603]
[-87.19405365 182.41365051]
[-101.70481110 179.05401611]
[-115.94940948 183.75418091]
[-130.19400024 188.45433044]
[-133.08125305 191.95802307]
[-136.59742737 194.09190369]
[-140.21607971 194.82878113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[5 54]
[6 53]
[7 52]
[12 48]
[13 47]
[14 46]
[16 44]
[17 43]
[18 42]
[19 41]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[59 134]
[60 133]
[61 132]
[63 130]
[64 129]
[65 128]
[66 127]
[68 124]
[69 123]
[70 122]
[71 121]
[72 119]
[73 118]
[77 87]
[78 86]
[79 85]
[80 84]
[89 109]
[90 108]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
