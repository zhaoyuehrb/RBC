%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGUGAUGGUGCCUAGCAACGUCAGGGCCAGGGCCGCGAGGUAGUUGGCAGAGGCCUCGGGGUCCUCCUGGAAGGGGCCUC\
) } def
/len { sequence length } bind def

/coor [
[58.67845917 181.63815308]
[45.88159180 189.46376038]
[31.22177505 186.28732300]
[22.81180000 173.86668396]
[25.30615616 159.07482910]
[11.70488167 165.39981079]
[-1.89639246 171.72477722]
[-15.49766731 178.04975891]
[-29.09894180 184.37474060]
[-38.34972000 197.20959473]
[-53.15274429 195.56044006]
[-66.75402069 201.88540649]
[-80.35529327 208.21038818]
[-92.16792297 220.37173462]
[-107.12405396 212.38732910]
[-103.59195709 195.80540466]
[-86.68026733 194.60911560]
[-73.07899475 188.28413391]
[-59.47772217 181.95916748]
[-51.19979858 169.57670593]
[-35.42391968 170.77346802]
[-21.82264328 164.44848633]
[-8.22136974 158.12350464]
[5.37990475 151.79853821]
[18.98118019 145.47355652]
[31.77819252 137.64817810]
[43.60611725 128.42320251]
[55.43404388 119.19822693]
[67.26197052 109.97325134]
[79.08988953 100.74827576]
[98.76923370 79.11273956]
[106.83538055 66.46610260]
[114.90151978 53.81946945]
[122.96766663 41.17283630]
[131.03381348 28.52620506]
[139.09996033 15.87957191]
[139.99751282 0.08384550]
[153.36489868 -6.48595190]
[161.43104553 -19.13258553]
[169.49719238 -31.77921867]
[177.56332397 -44.42584991]
[185.62947083 -57.07248306]
[193.69561768 -69.71911621]
[186.03907776 -82.97189331]
[185.43002319 -98.26528168]
[192.00837708 -112.08496094]
[204.26251221 -121.25528717]
[219.37651062 -123.66897583]
[233.87727356 -118.77138519]
[244.43263245 -107.68793488]
[248.61706543 -92.96553040]
[245.46899414 -77.98727417]
[235.71183777 -66.19505310]
[221.58772278 -60.29863358]
[206.34225464 -61.65297318]
[198.27610779 -49.00634003]
[190.20996094 -36.35970688]
[182.14381409 -23.71307373]
[174.07766724 -11.06644154]
[166.01153564 1.58019161]
[165.69091797 16.47134590]
[151.74658203 23.94571495]
[143.68043518 36.59235001]
[135.61430359 49.23897934]
[127.54815674 61.88561249]
[119.48200989 74.53224945]
[111.41587067 87.17887878]
[113.39720917 102.04744720]
[124.49359131 112.14053345]
[135.58996582 122.23361969]
[151.37551880 128.41850281]
[149.80221558 145.29930115]
[133.14559937 148.46054077]
[125.49687958 133.33000183]
[114.40050507 123.23690796]
[103.30412292 113.14382172]
[88.31486511 112.57620239]
[76.48694611 121.80117798]
[64.65901947 131.02615356]
[52.83109283 140.25112915]
[41.00317001 149.47610474]
[55.30611801 153.99559021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[11 19]
[12 18]
[13 17]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
