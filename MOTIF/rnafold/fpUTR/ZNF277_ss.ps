%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCAGAGCGCGGCGUAGGUGUGGAGAAAACAUUACGUCGACGGGGAGUUCGCCUCCAGUAGCGUUUCUACUGGUGCCACCCCGCCUCCGACCCGCCCUGCGGCCCUCCCUUUUCUUUUCUGCCGGGUA\
) } def
/len { sequence length } bind def

/coor [
[80.27529144 251.17626953]
[68.61631775 261.27932739]
[53.34280396 263.45263672]
[39.32846832 257.00268555]
[31.04523468 243.98762512]
[31.13625336 228.56053162]
[39.57248306 215.64411926]
[53.66194916 209.35998535]
[55.82928467 194.51739502]
[50.01212692 180.80570984]
[59.66220856 168.26831055]
[61.82954788 153.42572021]
[63.99688339 138.58311462]
[66.16421509 123.74052429]
[88.85140991 91.57106018]
[83.87278748 77.42138672]
[78.89417267 63.27170944]
[73.91555786 49.12203217]
[68.93693542 34.97235489]
[63.07895660 27.82877922]
[64.01348114 20.42019081]
[59.37822342 6.15434408]
[54.74296951 -8.11150360]
[50.10771561 -22.37735176]
[45.17049026 -8.21317768]
[34.67580414 2.50417066]
[20.61839104 7.73763371]
[5.67016125 6.49248123]
[-7.32765913 -0.99461889]
[-15.90455818 -13.30058479]
[-18.43031502 -28.08640862]
[-14.42485523 -42.54172897]
[-4.64950180 -53.91900635]
[9.03773212 -60.05575180]
[24.03529739 -59.78554153]
[37.49259186 -53.15974045]
[46.85258484 -41.43604279]
[46.49013138 -56.43166351]
[46.12767410 -71.42728424]
[45.76521683 -86.42290497]
[33.41386414 -103.85204315]
[43.68902969 -121.68706512]
[42.24132156 -136.61703491]
[40.79361343 -151.54701233]
[39.34590149 -166.47698975]
[37.89819336 -181.40696716]
[28.07418823 -186.00183105]
[21.13876343 -194.23385620]
[18.32094383 -204.53834534]
[20.07545090 -214.99363708]
[26.01084709 -223.67955017]
[34.97426605 -229.02992249]
[34.61180878 -244.02554321]
[25.79416466 -253.52941895]
[25.85670280 -266.09140015]
[34.21634293 -274.92211914]
[34.21634293 -289.92211914]
[34.21634293 -304.92211914]
[34.21634293 -319.92211914]
[34.21634293 -334.92211914]
[34.21634293 -349.92211914]
[34.21634293 -364.92211914]
[23.93457222 -377.23733521]
[27.29345512 -392.92483521]
[41.71634293 -399.95050049]
[56.13922882 -392.92483521]
[59.49811172 -377.23733521]
[49.21634293 -364.92211914]
[49.21634293 -349.92211914]
[49.21634293 -334.92211914]
[49.21634293 -319.92211914]
[49.21634293 -304.92211914]
[49.21634293 -289.92211914]
[49.21634293 -274.92211914]
[58.81325531 -260.28152466]
[49.60742950 -244.38800049]
[49.96988678 -229.39237976]
[65.02590179 -217.16789246]
[66.41838837 -197.52232361]
[52.82816696 -182.85467529]
[54.27587891 -167.92469788]
[55.72358704 -152.99472046]
[57.17129517 -138.06475830]
[58.61900330 -123.13477325]
[66.44808197 -118.58496094]
[71.32889557 -110.79379272]
[72.02766418 -101.48767090]
[68.25473785 -92.80070496]
[60.76083755 -86.78535461]
[61.12329483 -71.78974152]
[61.48575211 -56.79411697]
[61.84820557 -41.79849625]
[64.37356567 -27.01260567]
[69.00881958 -12.74675846]
[73.64407349 1.51908910]
[78.27932739 15.78493690]
[83.08661652 29.99373627]
[88.06523132 44.14341354]
[93.04384613 58.29309082]
[98.02246857 72.44277191]
[103.00108337 86.59244537]
[113.21632385 97.57647705]
[126.96820831 103.56694031]
[142.36488342 99.05895996]
[155.40563965 108.40338898]
[156.08671570 124.43197632]
[143.88565063 134.84896851]
[128.16206360 131.66333008]
[120.97773743 117.31882477]
[107.22585297 111.32836151]
[100.67109680 114.97323608]
[109.86752319 126.82337189]
[119.06394958 138.67350769]
[131.50387573 147.05493164]
[133.91490173 161.85989380]
[124.77713776 173.75532532]
[109.85102081 175.24230957]
[98.54601288 165.38346863]
[97.98937988 150.39234924]
[92.77547455 136.32766724]
[87.56157684 122.26298523]
[81.00681305 125.90785980]
[78.83947754 140.75045776]
[76.67214203 155.59304810]
[74.50480652 170.43565369]
[80.16693878 185.20896912]
[70.67188263 196.68472290]
[68.50454712 211.52731323]
[80.20879364 221.57789612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 128]
[9 127]
[11 125]
[12 124]
[13 123]
[14 122]
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[21 96]
[22 95]
[23 94]
[24 93]
[37 92]
[38 91]
[39 90]
[40 89]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[52 77]
[53 76]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
