%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACCCCAGGAUCGCUGGGAAAAGUCUUGGACUGAGGAGCUCCAAAAAGGAAGCUGUGGCGCUGCGUAGGGAAGGAGGGAAGAAAGUAGGUCUCCGAG\
) } def
/len { sequence length } bind def

/coor [
[102.26679993 211.57455444]
[105.05549622 192.39454651]
[105.52198792 177.40179443]
[105.98848724 162.40905762]
[88.73979187 160.46110535]
[73.01570129 153.93170166]
[59.98054123 143.50311279]
[48.50654984 153.16477966]
[37.03256226 162.82643127]
[25.55857658 172.48808289]
[14.08458805 182.14974976]
[11.28686523 197.94697571]
[-2.87649989 205.48213196]
[-17.54058647 198.97489929]
[-21.45636368 183.41705322]
[-11.61997986 170.74325562]
[4.42293167 170.67575073]
[15.89691925 161.01409912]
[27.37090683 151.35244751]
[38.84489441 141.69078064]
[50.31888199 132.02912903]
[45.26990509 122.33148193]
[42.09330750 111.86985016]
[40.89776230 101.00213623]
[41.72417831 90.10014343]
[27.37431335 85.73191833]
[13.02444649 81.36370087]
[-1.32541895 76.99547577]
[-18.23883057 78.16716766]
[-24.04682732 62.23909378]
[-10.34904385 52.24874878]
[3.04280186 62.64561462]
[17.39266777 67.01383209]
[31.74253273 71.38205719]
[46.09239960 75.75027466]
[51.28087616 66.52574921]
[58.03117752 58.37432861]
[66.12689972 51.55733490]
[75.30852509 46.29330063]
[85.28169250 42.75098038]
[83.42021179 27.86693382]
[81.55873108 12.98288631]
[79.69725037 -1.90116215]
[77.60452271 -16.75446129]
[75.28104401 -31.57341766]
[63.21576691 -42.14737701]
[64.10414886 -58.16581345]
[77.26469421 -67.34075928]
[92.60176086 -62.63397217]
[98.35006714 -47.65610504]
[90.10000610 -33.89688873]
[92.42347717 -19.07793427]
[96.64369965 -12.84774876]
[94.58129883 -3.76264358]
[96.44277954 11.12140465]
[98.30426025 26.00545311]
[100.16574097 40.88949966]
[111.50050354 42.01882172]
[122.40819550 45.30126572]
[132.48376465 50.61494064]
[141.35304260 57.76252365]
[153.12196350 48.46237946]
[164.89086914 39.16223907]
[173.56938171 24.59790039]
[189.96697998 28.90543556]
[190.36709595 45.85466003]
[174.19100952 50.93115234]
[162.42210388 60.23129272]
[150.65318298 69.53144073]
[155.99737549 79.52611542]
[159.37155151 90.44812775]
[160.61708069 101.90956116]
[159.65165710 113.49589539]
[156.47358704 124.78100586]
[151.16326904 135.34283447]
[143.88146973 144.77911377]
[155.65037537 154.07925415]
[167.41929626 163.37939453]
[179.18820190 172.67953491]
[190.95712280 181.97967529]
[204.65650940 175.24993896]
[219.91923523 175.13919067]
[233.71484375 181.66940308]
[243.30422974 193.54402161]
[246.78340149 208.40531921]
[243.46157837 223.30258179]
[233.99829102 235.27792358]
[220.27250671 241.95367432]
[205.00947571 242.00431824]
[191.23968506 235.41981506]
[181.69712830 223.50753784]
[178.27650452 208.63265991]
[181.65698242 193.74859619]
[169.88806152 184.44845581]
[158.11915588 175.14831543]
[146.35023499 165.84815979]
[134.58132935 156.54801941]
[120.98123169 162.87554932]
[120.51473236 177.86828613]
[120.04824066 192.86103821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[25 35]
[26 34]
[27 33]
[28 32]
[40 57]
[41 56]
[42 55]
[43 54]
[44 52]
[45 51]
[61 69]
[62 68]
[63 67]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
