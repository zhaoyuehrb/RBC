%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCCCUUCUCGGCCGCCGUAGUUUUUUUUUUUUUUUAAAGAAAAAACGGUUACCCAGCAACUAGAAAAACAACCGGAACCGGCGGCACCAGCUCGGAGAGAAAGGAGGUUCCAUAGGCAGUUCUUACCAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[161.09870911 272.62530518]
[162.54322815 251.82852173]
[174.19392395 234.45443726]
[166.64433289 221.49281311]
[159.09474182 208.53120422]
[151.39703369 195.65698242]
[143.55223083 182.87188721]
[135.70741272 170.08677673]
[127.86260986 157.30166626]
[119.87172699 144.60734558]
[111.73582458 132.00547791]
[103.59992218 119.40360260]
[84.75382996 112.53050232]
[81.66107941 92.71006775]
[70.87363434 82.28744507]
[60.08619308 71.86482239]
[49.29875183 61.44219589]
[38.51130676 51.01956940]
[27.72386742 40.59694672]
[23.26704025 43.60489273]
[17.72264290 45.36255646]
[11.46525097 45.51272583]
[4.97899532 43.81482315]
[-9.97271824 42.61222076]
[-24.92443275 41.40961838]
[-39.87614441 40.20701599]
[-54.82785797 39.00440979]
[-69.77957153 37.80180740]
[-84.73128510 36.59920502]
[-99.68299866 35.39660263]
[-114.63471222 34.19400024]
[-129.58642578 32.99139786]
[-144.53814697 31.78879356]
[-157.63804626 41.05010986]
[-173.00575256 36.44432068]
[-178.85246277 21.50458908]
[-170.69308472 7.69140196]
[-154.78678894 5.60105371]
[-143.33554077 16.83708000]
[-128.38381958 18.03968239]
[-113.43211365 19.24228668]
[-98.48040009 20.44488907]
[-83.52868652 21.64749146]
[-68.57697296 22.85009575]
[-53.62525558 24.05269814]
[-38.67354202 25.25530052]
[-23.72182846 26.45790291]
[-8.77011585 27.66050720]
[6.18159819 28.86310959]
[16.60422325 18.07566833]
[14.88813877 3.17415571]
[13.17205429 -11.72735596]
[11.45596981 -26.62886810]
[7.33332586 -34.88082123]
[9.87541962 -41.89120865]
[8.50146866 -56.82815170]
[-6.32370281 -59.72486877]
[-19.73161507 -66.68220520]
[-30.63535118 -77.13616180]
[-38.15098953 -90.23928833]
[-41.66927719 -104.92936707]
[-40.90499496 -120.01553345]
[-35.92010880 -134.27482605]
[-27.11871147 -146.55131531]
[-15.21429920 -155.84979248]
[-1.17190766 -161.41647339]
[13.87010956 -162.80009460]
[28.69236374 -159.88847351]
[42.09328079 -152.91767883]
[52.98650742 -142.45277405]
[60.48897934 -129.34210205]
[63.99250793 -114.64849854]
[63.21306992 -99.56310272]
[58.21385956 -85.30882263]
[49.40013504 -73.04118347]
[37.48638916 -63.75467300]
[23.43841171 -58.20210266]
[24.81236267 -43.26515961]
[26.35748291 -28.34495163]
[28.07356644 -13.44344044]
[29.78964996 1.45807159]
[31.50573540 16.35958290]
[38.14649200 29.80950356]
[48.93393326 40.23212814]
[59.72137451 50.65475082]
[70.50881958 61.07737732]
[81.29625702 71.50000000]
[92.08370209 81.92262268]
[103.60007477 80.59642792]
[113.87422180 85.96556854]
[127.68254089 80.10636139]
[135.00317383 65.83093262]
[150.75639343 62.79521179]
[162.85768127 73.32794952]
[162.02395630 89.34932709]
[148.89479065 98.56911469]
[133.54174805 93.91468048]
[119.73342896 99.77388763]
[118.86430359 105.79631805]
[116.20179749 111.26770020]
[124.33769226 123.86957550]
[132.47360229 136.47143555]
[139.82348633 142.04548645]
[140.64772034 149.45686340]
[148.49252319 162.24195862]
[156.33732605 175.02706909]
[164.18214417 187.81217957]
[171.40229797 193.55328369]
[172.05636597 200.98159790]
[179.60595703 213.94322205]
[187.15554810 226.90484619]
[196.81668091 224.80480957]
[206.68484497 225.10041809]
[216.17572021 227.76730347]
[224.72895813 232.64091492]
[231.84129333 239.42665100]
[237.09617615 247.71759033]
[240.18809509 257.01898193]
[240.94038391 266.77770996]
[239.31532288 276.41519165]
[235.41590881 285.36169434]
[229.47937012 293.08999634]
[221.86279297 299.14651489]
[227.24366760 313.14816284]
[232.62454224 327.14981079]
[238.00540161 341.15145874]
[243.38627625 355.15310669]
[254.71208191 367.76907349]
[245.72445679 382.14471436]
[229.42260742 377.48788452]
[229.38462830 360.53399658]
[224.00375366 346.53231812]
[218.62287903 332.53067017]
[213.24201965 318.52902222]
[207.86114502 304.52737427]
[187.28971863 302.95959473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 111]
[4 110]
[5 109]
[6 107]
[7 106]
[8 105]
[9 104]
[10 102]
[11 101]
[12 100]
[14 88]
[15 87]
[16 86]
[17 85]
[18 84]
[19 83]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[50 82]
[51 81]
[52 80]
[53 79]
[55 78]
[56 77]
[90 98]
[91 97]
[123 135]
[124 134]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
