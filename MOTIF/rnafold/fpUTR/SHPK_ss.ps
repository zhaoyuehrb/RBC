%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGGCAGGCGACUCCCCGCCCCUGCCCCGCCCCCCUGGGCGAAGAGCGCGGACUUGUGGGGCCGCUGGCUGCAGACUGGAGCUGCGCGGGUCAGGGAGAUA\
) } def
/len { sequence length } bind def

/coor [
[82.13463593 315.26571655]
[72.20883179 326.70062256]
[59.10667038 334.29089355]
[44.24938583 337.21319580]
[29.24858093 335.15051270]
[15.73143291 328.32662964]
[5.16417980 317.48175049]
[-1.30692172 303.79220581]
[-2.97993517 288.74295044]
[0.32661551 273.96643066]
[8.25406075 261.06549072]
[19.94248962 251.43951416]
[34.12403107 246.13267517]
[49.26037598 245.72059631]
[53.72291946 231.39978027]
[58.18546677 217.07897949]
[62.64801407 202.75816345]
[67.11055756 188.43734741]
[62.28188705 171.64050293]
[75.72038269 159.16560364]
[79.74835968 144.71653748]
[83.77633667 130.26747131]
[87.80431366 115.81841278]
[78.31448364 102.98387909]
[80.91294861 85.77329254]
[96.07969666 74.57880402]
[89.92350006 60.90031052]
[83.76731110 47.22181320]
[77.61112213 33.54331589]
[71.45492554 19.86481667]
[65.29873657 6.18631935]
[59.14254379 -7.49217844]
[43.93534470 -9.13181973]
[31.67161942 -18.10387802]
[25.58581161 -31.91797638]
[27.22070885 -46.82378387]
[36.03769302 -58.82904434]
[29.88150215 -72.50754547]
[23.72530937 -86.18604279]
[11.00589943 -95.59493256]
[12.83810711 -110.37641144]
[6.68191528 -124.05490875]
[-7.74835443 -131.06539917]
[-11.12373829 -146.74934387]
[-0.85493100 -159.07537842]
[15.18071747 -158.58802795]
[24.68202972 -145.66113281]
[20.36041260 -130.21110535]
[26.51660538 -116.53260803]
[38.79568481 -108.10209656]
[37.40380859 -92.34223175]
[43.56000137 -78.66373444]
[49.71619034 -64.98523712]
[64.54900360 -63.62388611]
[76.79029846 -54.96324539]
[83.09465790 -41.24750900]
[81.67798615 -26.11840439]
[72.82103729 -13.64837074]
[78.97723389 0.03012715]
[85.13342285 13.70862484]
[91.28961945 27.38712311]
[97.44580841 41.06562042]
[103.60199738 54.74411774]
[109.75819397 68.42261505]
[122.71064758 75.98792267]
[137.64909363 74.63043976]
[152.58753967 73.27295685]
[161.01373291 69.32273102]
[167.99659729 72.10706329]
[182.96923828 71.20138550]
[197.94186401 70.29570770]
[212.91450500 69.39002991]
[226.22232056 60.83361053]
[239.39353943 67.78833771]
[254.36618042 66.88266754]
[269.81134033 59.89101410]
[280.80541992 72.79709625]
[271.44717407 86.93426514]
[255.27185059 81.85530090]
[240.29922485 82.76097107]
[228.06233215 91.25260925]
[213.82017517 84.36266327]
[198.84754944 85.26834106]
[183.87490845 86.17401886]
[168.90228271 87.07969666]
[153.94502258 88.21140289]
[139.00657654 89.56888580]
[124.06813049 90.92636871]
[119.49490356 111.91515350]
[102.25337982 119.84638977]
[98.22539520 134.29545593]
[94.19741821 148.74452209]
[90.16944122 163.19357300]
[95.84162903 174.89901733]
[92.06987000 186.92568970]
[81.43137360 192.89988708]
[76.96882629 207.22070312]
[72.50627899 221.54151917]
[68.04373169 235.86233521]
[63.58118820 250.18315125]
[75.80406952 259.12069702]
[84.46061707 271.54418945]
[88.61183167 286.10598755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[20 93]
[21 92]
[22 91]
[23 90]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[37 53]
[38 52]
[39 51]
[41 49]
[42 48]
[65 88]
[66 87]
[67 86]
[69 85]
[70 84]
[71 83]
[72 82]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
