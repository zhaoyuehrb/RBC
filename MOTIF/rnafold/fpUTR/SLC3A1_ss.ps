%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACCAAGCAUUCAGCAAGCCACUCUUCCACCUCCCUUACUGCAGGAAGGCACUCCGAAGACAUAAGUCGGUGAGAC\
) } def
/len { sequence length } bind def

/coor [
[119.89437103 153.83387756]
[111.22631073 156.28358459]
[102.28171539 157.34689331]
[93.28091431 156.99758911]
[84.44562531 155.24430847]
[75.99347687 152.13020325]
[68.13267517 147.73200989]
[61.05683899 142.15806580]
[54.94027328 135.54563904]
[42.05044937 143.21717834]
[36.72616959 158.35096741]
[21.52771378 163.48774719]
[8.11403656 154.68702698]
[6.77496243 138.69995117]
[18.53771400 127.79045105]
[34.37891769 130.32734680]
[47.26874161 122.65582275]
[44.72019196 115.42772675]
[43.15746307 107.92449951]
[42.60842133 100.27996063]
[43.08285522 92.63042450]
[44.57231140 85.11231232]
[47.05022430 77.85969543]
[50.47240067 71.00191498]
[54.77782059 64.66126251]
[59.88969421 58.95082092]
[65.71686554 53.97241592]
[72.15541840 49.81483078]
[79.09053040 46.55221176]
[86.39852905 44.24274063]
[93.94908905 42.92760468]
[101.60755157 42.63025665]
[103.98352051 27.81962585]
[106.35948944 13.00899506]
[100.90579224 -1.84252775]
[110.56138611 -13.18354893]
[112.93735504 -27.99417877]
[115.31332397 -42.80480957]
[105.84734344 -55.46066666]
[108.18559265 -71.09102631]
[120.94081879 -80.42267609]
[136.54559326 -77.91930389]
[145.74185181 -65.06613159]
[143.07363892 -49.48870087]
[130.12396240 -40.42884064]
[127.74798584 -25.61820984]
[125.37201691 -10.80757904]
[130.99566650 2.98458886]
[121.17012024 15.38496590]
[118.79415131 30.19559479]
[116.41818237 45.00622559]
[142.18730164 61.08851242]
[156.13880920 88.07078552]
[154.36457825 118.39469147]
[167.82316589 125.01787567]
[181.28173828 131.64105225]
[193.10708618 124.26591492]
[206.92582703 123.77241516]
[219.05412292 130.18325806]
[226.31304932 141.69499207]
[226.86152649 155.18395996]
[240.04614258 162.33697510]
[253.23077393 169.48997498]
[269.60089111 168.51460266]
[278.40356445 182.35098267]
[270.58334351 196.76542664]
[254.18499756 196.92959595]
[246.07775879 182.67460632]
[232.89314270 175.52159119]
[219.70851135 168.36857605]
[205.26676941 175.90518188]
[189.00096130 173.42060852]
[177.23477173 161.68411255]
[174.65855408 145.09963989]
[161.19998169 138.47645569]
[147.74139404 131.85327148]
[142.16952515 138.93075562]
[135.55891418 145.04925537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 17]
[10 16]
[32 51]
[33 50]
[34 49]
[36 47]
[37 46]
[38 45]
[54 76]
[55 75]
[56 74]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
