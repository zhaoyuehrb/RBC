%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUUUGCCCUUUGGCCUUUGCUGGCUGUGUGGCGGCUCCGCGGUUCGCAGGUCGUUCGCUGAGCGUCUCUGCUUAGCCGCGGUC\
) } def
/len { sequence length } bind def

/coor [
[95.68361664 111.23186493]
[92.01835632 110.18372345]
[88.63740540 107.91059875]
[73.64696503 108.44598389]
[58.65652084 108.98136902]
[43.66607666 109.51675415]
[37.54305649 112.87564087]
[31.58082962 112.51203918]
[27.59530830 109.51675415]
[12.60486507 108.98136902]
[-2.38557696 108.44598389]
[-11.98249435 120.49610138]
[-26.66312599 124.53744507]
[-40.74192810 119.22223663]
[-48.89371109 106.78494263]
[-63.88415527 106.24955750]
[-78.87459564 105.71417236]
[-93.86503601 105.17878723]
[-108.85548401 104.64340210]
[-120.25031281 115.59481049]
[-136.04960632 115.19773102]
[-146.87994385 103.68775177]
[-146.31584167 87.89353943]
[-134.69200134 77.18550873]
[-118.90463257 77.91655731]
[-108.32009888 89.65296173]
[-93.32965088 90.18834686]
[-78.33921051 90.72373199]
[-63.34877014 91.25911713]
[-48.35832596 91.79449463]
[-39.34004593 79.97042847]
[-24.91793442 75.67314148]
[-10.56301212 80.75148773]
[-1.85019195 93.45554352]
[13.14025021 93.99092865]
[28.13069344 94.52631378]
[43.13069153 94.52631378]
[58.12113571 93.99092865]
[73.11157990 93.45554352]
[88.10202026 92.92015839]
[102.98507690 91.05078125]
[117.64228058 87.86230469]
[132.29948425 84.67382812]
[146.95669556 81.48534393]
[161.61389160 78.29686737]
[176.27108765 75.10838318]
[190.92829895 71.91990662]
[205.58549500 68.73143005]
[218.77613831 56.03553009]
[235.26441956 61.75165176]
[249.79847717 58.04205322]
[264.33255005 54.33245850]
[278.86660767 50.62285995]
[293.40066528 46.91326141]
[306.12973022 33.75465012]
[322.81155396 38.87862396]
[337.20394897 34.65263367]
[351.59634399 30.42664719]
[365.98873901 26.20065880]
[380.38113403 21.97467041]
[393.87521362 11.71085072]
[407.47344971 21.83627319]
[401.50808716 37.70608521]
[384.60711670 36.36706543]
[370.21472168 40.59305191]
[355.82232666 44.81904221]
[341.42993164 49.04502869]
[327.03753662 53.27101898]
[320.86077881 63.83654022]
[308.72674561 67.38569641]
[297.11026001 61.44732285]
[282.57620239 65.15692139]
[268.04214478 68.86651611]
[253.50807190 72.57611084]
[238.97401428 76.28571320]
[232.42410278 86.62403870]
[220.17111206 89.73784637]
[208.77398682 83.38863373]
[194.11677551 86.57711029]
[179.45957947 89.76558685]
[164.80236816 92.95407104]
[150.14517212 96.14254761]
[135.48796082 99.33102417]
[120.83076477 102.51950836]
[106.17356110 105.70798492]
[104.68205261 108.05182648]
[102.31838989 109.95391083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[9 36]
[10 35]
[11 34]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
