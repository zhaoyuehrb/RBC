%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUCAACUUCAAAGAGUCACAAAUCACCCUUAAUCAAAAAGGGUGCAGAAAUUUUUUUGGGCCCUCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[87.57324982 141.46177673]
[74.84888458 149.40473938]
[60.02611160 151.70372009]
[45.49355316 147.98825073]
[33.59307861 138.85705566]
[26.24240494 125.78160095]
[24.62606430 110.86894226]
[29.00452423 96.52219391]
[38.67221451 85.05329132]
[52.07122040 78.31039429]
[67.04234314 77.38010406]
[81.17304230 82.41232300]
[92.18743134 92.59783173]
[91.56755829 77.61064148]
[90.94768524 62.62345505]
[90.32780457 47.63626862]
[89.70793152 32.64908218]
[89.08805847 17.66189575]
[88.46818542 2.67471004]
[74.58218384 -1.40803051]
[62.67801285 -9.60282612]
[53.93380356 -21.08228111]
[49.20984268 -34.69475174]
[48.96394730 -49.07987213]
[53.20712662 -62.80450058]
[61.50383377 -74.50550842]
[73.01663208 -83.02515411]
[86.59069824 -87.52561951]
[86.59069824 -102.52561951]
[86.59069824 -117.52561951]
[86.59069824 -132.52561951]
[86.59069824 -147.52561951]
[86.59069824 -162.52561951]
[86.59069824 -177.52561951]
[74.49610901 -187.43798828]
[71.65349579 -202.81503296]
[79.40503693 -216.39619446]
[94.09069824 -221.76884460]
[108.77635193 -216.39619446]
[116.52789307 -202.81503296]
[113.68527985 -187.43798828]
[101.59069824 -177.52561951]
[101.59069824 -162.52561951]
[101.59069824 -147.52561951]
[101.59069824 -132.52561951]
[101.59069824 -117.52561951]
[101.59069824 -102.52561951]
[101.59069824 -87.52561951]
[116.33547211 -82.39840698]
[128.48608398 -72.55515289]
[136.58920288 -59.15000916]
[139.66775513 -43.76450348]
[137.33872986 -28.22096634]
[129.86068726 -14.36670971]
[118.10520935 -3.85444736]
[103.45536804 2.05483532]
[104.07524872 17.04202080]
[104.69512177 32.02920914]
[105.31499481 47.01639557]
[105.93486786 62.00358200]
[106.55474091 76.99076843]
[107.17462158 91.97795105]
[111.75086212 106.26284027]
[119.95508575 118.82033539]
[128.15930176 131.37783813]
[143.70603943 133.06103516]
[154.49623108 144.37940979]
[155.43508911 159.98878479]
[146.07929993 172.51889038]
[130.84640503 176.05337524]
[116.92888641 168.92338562]
[110.89818573 154.49546814]
[115.60181427 139.58206177]
[107.39759064 127.02455902]
[99.19336700 114.46706390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
