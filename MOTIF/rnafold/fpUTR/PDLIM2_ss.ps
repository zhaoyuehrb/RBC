%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUGAGUAGCUGCUCCGGGAGCUGUGGUGCCCUCUCCUUCUCCCUUUGGCUCCUCUCCUGCUGCCUUACAGUGCCCCCAGAGCCGGCUAGGGGCAUGGACUUCACCUCCUGGUCCUCUCUUCCUCAGGU\
) } def
/len { sequence length } bind def

/coor [
[94.50627899 514.14953613]
[86.88555145 499.62860107]
[95.87815857 485.91491699]
[96.23512268 470.91918945]
[96.59208679 455.92343140]
[96.94905090 440.92767334]
[97.30601501 425.93191528]
[97.66298676 410.93615723]
[88.41788483 396.06887817]
[98.00458527 380.39996338]
[98.00458527 365.39996338]
[83.51253510 358.77435303]
[73.30566406 346.46221924]
[69.45323944 330.88061523]
[72.77059174 315.11712646]
[82.64713287 302.31799316]
[97.15802002 295.06018066]
[96.80104828 280.06442261]
[96.44408417 265.06866455]
[96.08712006 250.07292175]
[95.73015594 235.07717896]
[95.37319183 220.08142090]
[95.01622772 205.08566284]
[86.97823334 192.54612732]
[94.38493347 178.56573486]
[94.02796936 163.56999207]
[85.98997498 151.03044128]
[93.39667511 137.05004883]
[93.03971100 122.05430603]
[92.68274689 107.05854797]
[89.33049011 99.63482666]
[92.50000000 91.70264435]
[92.50000000 76.70264435]
[79.92057037 64.61357117]
[79.92720032 47.50332260]
[92.03063965 35.89012146]
[91.67367554 20.89437103]
[91.31670380 5.89861870]
[90.95973969 -9.09713268]
[90.60277557 -24.09288406]
[80.47483063 -30.53726959]
[74.81380463 -40.98617935]
[74.94431305 -52.74885559]
[80.71636200 -62.86027527]
[90.57262421 -68.82853699]
[90.92958832 -83.82429504]
[88.32294464 -88.57209015]
[87.90896606 -93.35763550]
[89.31835938 -97.31640625]
[91.88523102 -99.86662292]
[93.31107330 -114.79869843]
[94.73691559 -129.73077393]
[96.16275024 -144.66285706]
[97.58859253 -159.59494019]
[83.94158936 -166.15119934]
[73.38092804 -176.96066284]
[67.16741943 -190.70521545]
[66.03339386 -205.71800232]
[70.09648132 -220.18565369]
[78.84770966 -232.36721802]
[91.21518707 -240.80371094]
[105.69536591 -244.49287415]
[107.12120056 -259.42495728]
[108.54704285 -274.35702515]
[109.97288513 -289.28912354]
[100.90830994 -302.52590942]
[105.74317169 -317.82308960]
[120.76858521 -323.44595337]
[134.45832825 -315.08111572]
[136.31080627 -299.14538574]
[124.90496063 -287.86328125]
[123.47912598 -272.93118286]
[122.05328369 -257.99911499]
[120.62744141 -243.06703186]
[134.14776611 -236.70414734]
[144.69512939 -226.07954407]
[150.98283386 -212.46194458]
[152.23448181 -197.48680115]
[148.27975464 -182.95991516]
[139.57736206 -170.63967896]
[127.16184235 -162.02416992]
[112.52067566 -158.16909790]
[111.09483337 -143.23701477]
[109.66899109 -128.30494690]
[108.24314880 -113.37286377]
[106.81730652 -98.44078064]
[105.92533875 -83.46732330]
[105.56837463 -68.47157288]
[118.96826935 -56.10385132]
[119.17504120 -37.55322266]
[105.59852600 -24.44985008]
[105.95549011 -9.45409870]
[106.31246185 5.54165363]
[106.66942596 20.53740501]
[107.02639008 35.53315735]
[117.54225922 43.07657242]
[121.82855225 55.49448013]
[118.09566498 68.29325867]
[107.50000000 76.70264435]
[107.50000000 91.70264435]
[107.67849731 106.70158386]
[108.03546143 121.69733429]
[108.39242554 136.69308472]
[116.45594788 150.30522156]
[109.02371979 163.21302795]
[109.38068390 178.20877075]
[117.44420624 191.82090759]
[110.01197815 204.72869873]
[110.36894226 219.72445679]
[110.72590637 234.72021484]
[111.08287048 249.71595764]
[111.43983459 264.71170044]
[111.79680634 279.70745850]
[112.15377045 294.70321655]
[125.28736877 300.06115723]
[135.34350586 310.00311279]
[140.81732178 322.99459839]
[140.90760803 337.04846191]
[135.63383484 350.02871704]
[125.82823181 359.97531128]
[113.00458527 365.39996338]
[113.00458527 380.39996338]
[121.58869171 390.11181641]
[121.22489929 402.66613770]
[112.65873718 411.29312134]
[112.30177307 426.28887939]
[111.94480133 441.28463745]
[111.58783722 456.28039551]
[111.23087311 471.27615356]
[110.87390900 486.27188110]
[119.20380402 500.39791870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 130]
[4 129]
[5 128]
[6 127]
[7 126]
[8 125]
[10 122]
[11 121]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[25 106]
[26 105]
[28 103]
[29 102]
[30 101]
[32 100]
[33 99]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[45 88]
[46 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[62 74]
[63 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
