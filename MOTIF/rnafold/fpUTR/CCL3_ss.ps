%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGUUUCAGACUUCAGAAGGACACGGGCAGCAGACAGUGGUCAGUCCUUUCUUGGCUCUGCUGACACUCGAGCCCACAUUCCGUCACCUGCUCAGAAUC\
) } def
/len { sequence length } bind def

/coor [
[120.30281067 276.86911011]
[117.12448883 262.20968628]
[113.94617462 247.55027771]
[103.68779755 236.75143433]
[108.32532501 221.62516785]
[105.14701080 206.96575928]
[101.96868896 192.30635071]
[99.49365234 190.66926575]
[97.57820129 187.86912537]
[96.70239258 184.13781738]
[97.24359131 179.88891602]
[99.41213989 175.67274475]
[98.04151917 160.73550415]
[96.67089081 145.79824829]
[79.43139648 141.05479431]
[65.31051636 130.08659363]
[56.44926453 114.55665588]
[54.19117737 96.81964874]
[58.87862778 79.56483459]
[46.71653748 70.78511047]
[34.55444717 62.00539017]
[22.39235878 53.22566605]
[10.23026752 44.44594193]
[-1.93182278 35.66621780]
[-14.09391308 26.88649178]
[-24.92692566 29.26720810]
[-35.03980255 25.28197289]
[-41.08432007 16.51584435]
[-41.20832062 6.09024239]
[-52.81254196 -3.41460037]
[-64.41676331 -12.91944313]
[-79.99556732 -15.67831802]
[-84.93878937 -29.72872353]
[-96.54300690 -39.23356628]
[-112.58535767 -39.08305740]
[-122.59305573 -51.62201691]
[-118.88906097 -67.23162842]
[-104.31475067 -73.93753052]
[-90.05030060 -66.59553528]
[-87.03816223 -50.83778763]
[-75.43394470 -41.33294296]
[-60.68515015 -39.25392151]
[-54.91191864 -24.52366447]
[-43.30769730 -15.01882172]
[-31.70347595 -5.51397896]
[-12.53051186 -3.97564220]
[-5.31418896 14.72440147]
[6.84790134 23.50412560]
[19.00999260 32.28385162]
[31.17208290 41.06357574]
[43.33417130 49.84329987]
[55.49626160 58.62302399]
[67.65835571 67.40274811]
[82.51104736 57.54179001]
[100.00000000 54.08090973]
[117.48895264 57.54179001]
[132.34164429 67.40274811]
[144.50373840 58.62302399]
[156.66583252 49.84329987]
[168.82791138 41.06357574]
[180.99000549 32.28385162]
[178.76161194 17.14143181]
[183.83644104 2.70173979]
[195.04833984 -7.71709013]
[209.82087708 -11.72088718]
[224.75946045 -8.38960838]
[236.43130493 1.51124299]
[242.15428162 15.70652390]
[240.61332703 30.93426323]
[232.16252136 43.69523621]
[218.74380493 51.05706787]
[203.44068909 51.32806015]
[189.76972961 44.44594193]
[177.60763550 53.22566605]
[165.44555664 62.00539017]
[153.28346252 70.78511047]
[141.12136841 79.56483459]
[144.33030701 88.02560425]
[145.81777954 96.95136261]
[145.52600098 105.99552155]
[143.46630859 114.80684662]
[139.71868896 123.04318237]
[134.42868042 130.38467407]
[127.80170441 136.54624939]
[120.09510040 141.28862000]
[111.60813904 144.42762756]
[112.97876740 159.36488342]
[114.34938812 174.30212402]
[116.62810516 189.12803650]
[119.80641937 203.78744507]
[122.98474121 218.44685364]
[133.47044373 230.29423523]
[128.60557556 244.37196350]
[131.78390503 259.03137207]
[134.96221924 273.69076538]
[149.21705627 279.82095337]
[157.11727905 293.17633057]
[155.62507629 308.62149048]
[145.31425476 320.21746826]
[130.14950562 323.50534058]
[115.96200562 317.22088623]
[108.20713043 303.78057861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[5 91]
[6 90]
[7 89]
[12 88]
[13 87]
[14 86]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[29 45]
[30 44]
[31 43]
[33 41]
[34 40]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
