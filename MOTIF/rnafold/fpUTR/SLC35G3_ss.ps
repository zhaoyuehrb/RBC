%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACUCCAAUGAGGUCACAAUGGCUGGAGCUCUGAGGGGCCCAGGCUCCCUGAGCCAGGAGGAGAGGAGAAAGUCCAAGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[74.14775085 173.26725769]
[75.87339020 157.72518921]
[87.22119141 146.96594238]
[86.13882446 132.00503540]
[73.18960571 113.10316467]
[75.98455048 93.79358673]
[61.39585114 97.28209686]
[46.80714417 100.77061462]
[32.21844101 104.25912476]
[17.62973785 107.74763489]
[14.70666695 110.96980286]
[11.26881981 112.96949768]
[7.74115849 113.73173523]
[4.51275539 113.37443542]
[1.89838219 112.12657166]
[0.10951138 110.29602051]
[-14.86849022 111.10810852]
[-29.84649086 111.92018890]
[-44.82449341 112.73226929]
[-60.31305313 119.62725830]
[-71.22624207 106.65271759]
[-61.77981949 92.57431030]
[-45.63657761 97.75427246]
[-30.65857506 96.94218445]
[-15.68057346 96.13010406]
[-0.70257223 95.31802368]
[14.14122581 93.15892792]
[28.72992897 89.67041779]
[43.31863403 86.18190765]
[57.90733719 82.69339752]
[72.49604034 79.20487976]
[83.92847443 69.49408722]
[89.73121643 55.66194534]
[95.53396606 41.82980728]
[101.33670807 27.99766350]
[92.16231537 15.75929070]
[90.35742950 0.67157406]
[96.30734253 -13.20159912]
[108.32209778 -22.17387199]
[123.11503601 -23.91584587]
[128.91778564 -37.74798584]
[134.72052002 -51.58012772]
[132.92422485 -67.29903412]
[144.98266602 -76.04222107]
[150.78540039 -89.87435913]
[156.58815002 -103.70650482]
[162.39089966 -117.53864288]
[162.94267273 -134.48361206]
[179.37817383 -138.64422607]
[187.92599487 -124.00281525]
[176.22303772 -111.73590088]
[170.42028809 -97.90375519]
[164.61755371 -84.07161713]
[158.81480408 -70.23947144]
[161.02615356 -55.50994110]
[148.55267334 -45.77738190]
[142.74992371 -31.94524193]
[136.94717407 -18.11310005]
[146.06968689 -6.33831692]
[148.08699036 8.52056789]
[142.35807800 22.48645782]
[130.32890320 31.77062035]
[115.16885376 33.80041122]
[109.36610413 47.63255310]
[103.56336212 61.46469116]
[97.76061249 75.29683685]
[120.97785950 78.77690125]
[134.76953125 102.74491119]
[147.48066711 110.70900726]
[160.19181824 118.67310333]
[176.08685303 116.49887085]
[187.59722900 127.67433167]
[185.89315796 143.62663269]
[172.28186035 152.11851501]
[157.20477295 146.63575745]
[152.22772217 131.38424683]
[139.51658630 123.42015076]
[126.80543518 115.45605469]
[120.37900543 119.32270813]
[107.52614594 127.05601501]
[101.09972382 130.92266846]
[102.18208313 145.88357544]
[114.96039581 154.89738464]
[118.90518188 170.02923584]
[112.15383148 184.13430786]
[97.89412689 190.55264282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 82]
[4 81]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[16 26]
[17 25]
[18 24]
[19 23]
[32 66]
[33 65]
[34 64]
[35 63]
[40 58]
[41 57]
[42 56]
[44 54]
[45 53]
[46 52]
[47 51]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
