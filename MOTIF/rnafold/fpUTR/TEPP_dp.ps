%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:13 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TEPP)
} def

/sequence { (\
GGUUGCUAAGGAGUGGGUGCCUCAGAAUCAGGCUGCA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.023906469 ubox
1 21 0.145048023 ubox
1 22 0.009182856 ubox
1 23 0.006581290 ubox
1 29 0.507137290 ubox
1 34 0.080911901 ubox
2 6 0.024758590 ubox
2 14 0.007322040 ubox
2 18 0.010248718 ubox
2 20 0.145290193 ubox
2 21 0.011379716 ubox
2 22 0.004400220 ubox
2 28 0.508505187 ubox
2 33 0.085515174 ubox
2 36 0.597615783 ubox
3 9 0.007646547 ubox
3 10 0.022133075 ubox
3 11 0.011726360 ubox
3 12 0.032571546 ubox
3 13 0.013673112 ubox
3 16 0.276983094 ubox
3 17 0.013555322 ubox
3 19 0.125717607 ubox
3 25 0.009522844 ubox
3 26 0.006320563 ubox
3 27 0.508396283 ubox
3 31 0.040779952 ubox
3 32 0.077097677 ubox
3 35 0.580029187 ubox
4 8 0.007331815 ubox
4 9 0.026549538 ubox
4 10 0.014299567 ubox
4 11 0.034786684 ubox
4 12 0.017603504 ubox
4 15 0.349011427 ubox
4 16 0.016683768 ubox
4 19 0.066000671 ubox
4 24 0.014102252 ubox
4 25 0.007309605 ubox
4 26 0.504242009 ubox
4 30 0.056428011 ubox
4 31 0.061454346 ubox
4 35 0.013982770 ubox
4 37 0.088287354 ubox
5 14 0.424970239 ubox
5 18 0.184746653 ubox
5 20 0.008298139 ubox
5 23 0.015234561 ubox
5 29 0.060086000 ubox
5 33 0.617235737 ubox
5 34 0.003241456 ubox
5 36 0.112123293 ubox
6 13 0.430165355 ubox
6 16 0.160385439 ubox
6 17 0.192735542 ubox
6 19 0.008340764 ubox
6 25 0.502487729 ubox
6 31 0.025735618 ubox
6 32 0.617204231 ubox
6 35 0.111755879 ubox
7 12 0.409647890 ubox
7 15 0.161204380 ubox
7 16 0.191249628 ubox
7 24 0.488808538 ubox
7 30 0.031440304 ubox
7 31 0.594708522 ubox
7 35 0.004607299 ubox
8 14 0.152984939 ubox
8 34 0.018501634 ubox
9 22 0.508788096 ubox
9 34 0.025772269 ubox
10 21 0.517353974 ubox
10 22 0.021676332 ubox
10 23 0.013824619 ubox
10 29 0.162242352 ubox
10 33 0.027364468 ubox
10 34 0.037524904 ubox
11 20 0.516901459 ubox
11 21 0.023078323 ubox
11 22 0.012323220 ubox
11 23 0.104530216 ubox
11 28 0.139159641 ubox
11 29 0.243798971 ubox
11 33 0.038090331 ubox
12 22 0.104523850 ubox
12 28 0.236962138 ubox
12 34 0.057856421 ubox
13 20 0.040131741 ubox
13 21 0.099727878 ubox
13 28 0.010066891 ubox
13 33 0.058684176 ubox
13 36 0.081140963 ubox
14 19 0.048802226 ubox
14 24 0.599778863 ubox
14 27 0.012530257 ubox
14 30 0.037930368 ubox
14 32 0.058260834 ubox
14 35 0.079809535 ubox
14 37 0.072335001 ubox
15 21 0.044695363 ubox
15 22 0.029677820 ubox
15 23 0.608237844 ubox
15 29 0.035715381 ubox
15 34 0.069439780 ubox
15 36 0.103565294 ubox
16 20 0.044722295 ubox
16 21 0.067904176 ubox
16 22 0.601429565 ubox
16 23 0.062164902 ubox
16 28 0.030919649 ubox
16 29 0.070237375 ubox
16 33 0.034777273 ubox
16 34 0.014563228 ubox
17 21 0.588556565 ubox
17 22 0.045724613 ubox
17 28 0.071845700 ubox
17 33 0.010054251 ubox
17 36 0.411660642 ubox
18 24 0.025218911 ubox
18 27 0.073210795 ubox
18 30 0.006627106 ubox
18 32 0.007736513 ubox
18 35 0.397768937 ubox
18 37 0.012626681 ubox
19 23 0.025187105 ubox
19 29 0.006710790 ubox
19 33 0.555801911 ubox
19 34 0.048509478 ubox
19 36 0.015652595 ubox
20 32 0.559521232 ubox
20 35 0.014982562 ubox
21 31 0.559465861 ubox
21 32 0.011543090 ubox
22 30 0.539713591 ubox
22 31 0.011713833 ubox
22 32 0.013182207 ubox
23 31 0.017010002 ubox
23 35 0.104426872 ubox
24 34 0.105877341 ubox
25 33 0.105797582 ubox
29 35 0.010762997 ubox
30 34 0.010352626 ubox
1 29 0.9500000 lbox
2 28 0.9500000 lbox
3 27 0.9500000 lbox
4 26 0.9500000 lbox
6 25 0.9500000 lbox
7 24 0.9500000 lbox
9 22 0.9500000 lbox
10 21 0.9500000 lbox
11 20 0.9500000 lbox
showpage
end
%%EOF
