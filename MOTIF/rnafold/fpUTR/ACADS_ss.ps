%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCCCGCCCCCUGGCCGCGAGCGCACCUCGGCCCCGCUCCCGAGGCCCUACGGGCGUGGCCUCUGUCCCGGGUCCCGCCCCCCAGCACUCCGGAACAGCGCGCUCGCAGCGGGAGGUCGCGAAGCCUGGGACUGUGUCUGUCGCCC\
) } def
/len { sequence length } bind def

/coor [
[255.95355225 460.70339966]
[250.10389709 446.89105225]
[244.25425720 433.07867432]
[238.40461731 419.26629639]
[224.54576111 413.93078613]
[218.41662598 400.00640869]
[224.10694885 385.50613403]
[218.25729370 371.69375610]
[212.40765381 357.88137817]
[197.85789490 348.12133789]
[200.18063354 329.88586426]
[194.04107666 316.19989014]
[187.75759888 302.57940674]
[181.33087158 289.02590942]
[168.88673401 280.84100342]
[169.96522522 265.05661011]
[163.53851318 251.50309753]
[151.09436035 243.31820679]
[152.17286682 227.53379822]
[145.74613953 213.98030090]
[139.31941223 200.42680359]
[132.89268494 186.87332153]
[126.46596527 173.31982422]
[120.03923798 159.76632690]
[113.61251831 146.21282959]
[107.18579102 132.65933228]
[76.44332886 130.08642578]
[57.03193283 101.10401917]
[42.03276443 100.94588470]
[27.03359795 100.78775787]
[12.03443241 100.62962341]
[-2.96473408 100.47148895]
[-17.96390152 100.31336212]
[-27.10798836 112.84992218]
[-41.88482285 117.58539581]
[-56.61241150 112.69891357]
[-65.62769318 100.06941223]
[-65.46411133 84.55319977]
[-56.18456650 72.11656952]
[-41.35723114 67.54167175]
[-26.68351746 72.58763885]
[-17.80576897 85.31419373]
[-2.80660319 85.47232819]
[12.19256306 85.63045502]
[27.19173050 85.78858948]
[42.19089508 85.94671631]
[57.19006348 86.10485077]
[61.75054550 80.15068817]
[46.87714386 78.20595551]
[41.12454987 64.35288239]
[50.24529266 52.44439697]
[65.11872864 54.38885498]
[70.87150574 68.24237061]
[75.43199158 62.28821564]
[71.37179565 47.84817123]
[67.31160736 33.40812683]
[63.25141525 18.96808434]
[59.19122696 4.52804089]
[48.00733948 -6.66263723]
[52.01079559 -21.00912285]
[47.95060349 -35.44916534]
[43.89041138 -49.88920975]
[39.83022308 -64.32925415]
[35.77003098 -78.76929474]
[21.44387054 -85.03787994]
[14.54511833 -99.07145691]
[18.33115387 -114.24379730]
[31.01432610 -123.39099121]
[46.60602951 -122.19400787]
[57.74433899 -111.21803284]
[59.17008591 -95.64557648]
[50.21007538 -82.82948303]
[54.27026367 -68.38944244]
[58.33045578 -53.94939804]
[62.39064789 -39.50935745]
[66.45083618 -25.06931305]
[77.34431458 -14.91148281]
[73.63127136 0.46785021]
[77.69145966 14.90789318]
[81.75164795 29.34793663]
[85.81184387 43.78797913]
[89.87203217 58.22802353]
[103.21482086 61.92409515]
[113.21713257 69.28232574]
[122.08500671 57.18436050]
[117.22416687 42.44828415]
[121.98537445 27.67971802]
[134.53782654 18.55747223]
[150.05487061 18.58923912]
[162.56988525 27.76280403]
[167.27056885 42.55074310]
[162.34944153 57.26679230]
[149.69876099 66.25232697]
[134.18296814 66.05223083]
[125.31510162 78.15019989]
[129.63830566 84.51326752]
[132.39305115 91.69589233]
[133.43356323 99.31797791]
[132.70475769 106.97615051]
[130.24522400 114.26514435]
[126.18511200 120.79922485]
[120.73928833 126.23261261]
[127.16600800 139.78610229]
[133.59274292 153.33959961]
[140.01945496 166.89309692]
[146.44618225 180.44659424]
[152.87290955 194.00009155]
[159.29963684 207.55357361]
[165.72636414 221.10707092]
[178.63018799 230.26141357]
[177.09199524 245.07637024]
[183.51872253 258.62988281]
[196.42254639 267.78421021]
[194.88436890 282.59918213]
[201.31109619 296.15267944]
[207.85984802 302.61975098]
[207.72705078 310.06033325]
[213.86660767 323.74630737]
[225.65785217 329.08224487]
[230.47222900 340.66195679]
[226.22003174 352.03173828]
[232.06967163 365.84411621]
[237.91931152 379.65649414]
[252.29295349 385.65954590]
[258.02856445 399.75057983]
[252.21699524 413.41665649]
[258.06661987 427.22903442]
[263.91629028 441.04138184]
[269.76593018 454.85375977]
[275.90545654 468.53973389]
[282.33218384 482.09323120]
[288.90145874 495.57821655]
[295.61248779 508.99322510]
[302.32354736 522.40820312]
[317.57492065 525.86199951]
[326.99691772 538.34240723]
[326.14071655 553.95654297]
[315.41058350 565.33184814]
[299.87298584 567.09735107]
[286.86428833 558.41931152]
[282.52679443 543.39532471]
[288.90853882 529.11926270]
[282.19750977 515.70428467]
[275.48645020 502.28927612]
[269.64144897 497.68319702]
[268.77868652 488.51995850]
[262.35198975 474.96646118]
[258.17254639 472.53027344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[3 127]
[4 126]
[7 123]
[8 122]
[9 121]
[11 118]
[12 117]
[13 115]
[14 114]
[16 112]
[17 111]
[19 109]
[20 108]
[21 107]
[22 106]
[23 105]
[24 104]
[25 103]
[26 102]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[84 95]
[85 94]
[130 147]
[131 146]
[132 144]
[133 143]
[134 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
