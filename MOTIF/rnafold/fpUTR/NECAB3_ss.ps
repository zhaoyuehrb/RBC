%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCGUCGGCGCCGGCGCCAAGGGGCGGCCUCUAGCCACACCGAGUCCGCCGCGGCGUCCAGGGUCGGCAGCAACCGCAGCCGAGCCCGAGCGGGUGGCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[88.37890625 297.67480469]
[74.39319611 289.81478882]
[71.96076965 273.95721436]
[82.94756317 262.26663208]
[83.82788086 247.29249573]
[84.70819092 232.31834412]
[85.58850861 217.34419250]
[86.46882629 202.37005615]
[87.34913635 187.39590454]
[80.37210846 174.23648071]
[88.90596771 160.91418457]
[89.78628540 145.94003296]
[90.66659546 130.96589661]
[91.54691315 115.99174500]
[85.15225220 102.42309570]
[73.04293823 93.57072449]
[60.93362427 84.71835327]
[48.82430649 75.86598206]
[36.71498871 67.01361084]
[24.60567474 58.16123962]
[13.25488949 62.28453064]
[1.45499837 60.36118317]
[-7.80958366 52.99719620]
[-12.25414467 42.15929794]
[-10.85655212 30.65089035]
[-22.42547226 21.10311127]
[-33.99439240 11.55533123]
[-45.56331253 2.00755215]
[-57.13223267 -7.54022741]
[-72.70070648 -10.35681438]
[-77.59181976 -24.42543983]
[-89.16074371 -33.97322083]
[-100.72966003 -43.52099991]
[-115.09072876 -38.07531738]
[-130.24803162 -40.55558777]
[-142.12432861 -50.29462814]
[-147.52497864 -64.67269135]
[-144.99720764 -79.82214355]
[-135.22097778 -91.66786194]
[-120.82606506 -97.02340698]
[-105.68460846 -94.44816589]
[-93.86959076 -84.63486481]
[-88.55918884 -70.22322845]
[-91.18188477 -55.08992004]
[-79.61296082 -45.54214096]
[-68.04404449 -35.99436188]
[-53.30305481 -33.86069489]
[-47.58445358 -19.10914803]
[-36.01553345 -9.56136799]
[-24.44661331 -0.01358815]
[-12.87769222 9.53419113]
[-1.30877280 19.08197021]
[16.64426804 16.15703011]
[31.38239288 27.34694481]
[33.45804596 46.05192566]
[45.56735992 54.90429688]
[57.67667770 63.75666809]
[69.78599548 72.60903931]
[81.89530945 81.46141052]
[94.00462341 90.31378174]
[98.69927216 84.86604309]
[107.09183502 82.38613129]
[117.13797760 84.98338318]
[131.67327881 81.27864075]
[146.20857239 77.57389069]
[160.68791199 73.65616608]
[175.10818481 69.52630615]
[189.52845764 65.39645386]
[203.94874573 61.26659775]
[218.36901855 57.13674164]
[229.50556946 45.89896011]
[243.87121582 49.83310318]
[258.29147339 45.70324707]
[269.29183960 33.54083252]
[285.26593018 37.25027466]
[289.78100586 53.01561737]
[278.19232178 64.61883545]
[262.42135620 60.12352371]
[248.00106812 64.25337982]
[237.89595032 75.19576263]
[222.49887085 71.55701447]
[208.07859802 75.68686676]
[193.65832520 79.81672668]
[179.23805237 83.94657898]
[164.81777954 88.07643890]
[159.16508484 93.02155304]
[149.91331482 92.10918427]
[135.37802124 95.81393433]
[120.84272766 99.51868439]
[135.58837891 102.26931763]
[143.50311279 115.01124573]
[139.43402100 129.44879150]
[126.03030396 136.18231201]
[112.01850891 130.82791138]
[106.52105713 116.87206268]
[105.64074707 131.84620667]
[104.76042938 146.82035828]
[103.88011932 161.79449463]
[110.79418182 176.02496338]
[102.32328033 188.27621460]
[101.44297028 203.25036621]
[100.56265259 218.22451782]
[99.68234253 233.19865417]
[98.80202484 248.17280579]
[97.92171478 263.14694214]
[107.46300507 276.04437256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 105]
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[11 98]
[12 97]
[13 96]
[14 95]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[31 46]
[32 45]
[33 44]
[63 89]
[64 88]
[65 87]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
