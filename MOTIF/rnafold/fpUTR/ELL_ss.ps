%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGCGGGGCGUGGCCGGCGUGGCGGCGCUGGAGCCGGGAAGGGGGCGCGGGGGAGAGAUGGUCGCAAG\
) } def
/len { sequence length } bind def

/coor [
[177.03733826 190.84909058]
[163.38948059 182.55612183]
[152.54768372 170.81179810]
[145.35783386 156.52136230]
[142.38397217 140.78912354]
[143.86401367 124.83310699]
[129.85644531 119.46763611]
[115.84889221 114.10215759]
[101.09619141 121.18624115]
[85.69114685 115.66253662]
[78.80120850 100.81817627]
[64.57578278 96.06031036]
[50.35035706 91.30243683]
[36.12493515 86.54457092]
[21.89950943 81.78669739]
[6.35775280 84.74716187]
[-3.25809860 73.37242126]
[-17.48352242 68.61455536]
[-31.70894623 63.85668564]
[-46.64952087 69.70124054]
[-60.46152878 61.53986740]
[-62.54957962 45.63327789]
[-51.31190109 34.18364334]
[-35.36907578 35.97414398]
[-26.95107651 49.63126373]
[-12.72565269 54.38913345]
[1.49977076 59.14699936]
[16.02403069 55.84622192]
[26.65737915 67.56127167]
[40.88280487 72.31914520]
[55.10822678 77.07701111]
[69.33364868 81.83488464]
[83.55907440 86.59275055]
[94.31684113 79.56082153]
[107.16040802 80.03034973]
[117.37599945 87.82901764]
[121.21437073 100.09460449]
[135.22192383 105.46007538]
[149.22947693 110.82554626]
[157.50579834 99.30183411]
[168.34172058 90.15908051]
[181.07577515 83.94896698]
[194.93217468 81.04434967]
[209.06806946 81.61685944]
[222.62486267 85.62680054]
[234.78033447 92.82582855]
[244.79850769 102.77233124]
[252.07423401 114.85854340]
[256.16970825 128.34762573]
[256.84078979 142.41867065]
[254.05171204 156.21655273]
[267.54617310 162.76631165]
[281.04064941 169.31608582]
[294.53509521 175.86585999]
[306.81369019 166.72831726]
[321.93408203 164.35502625]
[336.42172241 169.29136658]
[346.94741821 180.40298462]
[351.09246826 195.13650513]
[347.90438843 210.10630798]
[338.11575317 221.87240601]
[323.97592163 227.73104858]
[308.73413086 226.33596802]
[295.89282227 218.00773621]
[288.40283203 204.66012573]
[287.98532104 189.36032104]
[274.49087524 182.81054688]
[260.99639893 176.26077271]
[247.50193787 169.71101379]
[237.01397705 181.66355896]
[223.62568665 190.26873779]
[208.37074280 194.85317993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[8 37]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[17 27]
[18 26]
[19 25]
[51 69]
[52 68]
[53 67]
[54 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
