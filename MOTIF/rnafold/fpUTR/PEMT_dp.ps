%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:08 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PEMT)
} def

/sequence { (\
CCCGGCUCUAUAGGUCCGGUUCCGGGGGCGCGUGGCUGCAGCGGGGCCCGCGUGGUGCCUCCUGAGGCGGCCCCCGG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 19 0.138541819 ubox
2 14 0.005586852 ubox
2 18 0.135936015 ubox
2 19 0.984584968 ubox
2 77 0.004854837 ubox
3 13 0.005622442 ubox
3 18 0.990321500 ubox
3 76 0.004928095 ubox
4 16 0.159215514 ubox
4 17 0.987086905 ubox
4 75 0.004920337 ubox
5 15 0.181934990 ubox
5 16 0.982790474 ubox
5 74 0.004910527 ubox
6 13 0.107576121 ubox
6 14 0.800603819 ubox
7 12 0.103042109 ubox
7 13 0.750063099 ubox
7 14 0.495015663 ubox
8 13 0.549175085 ubox
8 14 0.240214169 ubox
9 13 0.216730340 ubox
13 73 0.004171735 ubox
14 72 0.004165243 ubox
16 70 0.004924222 ubox
17 69 0.004937411 ubox
18 68 0.004945500 ubox
20 66 0.004886937 ubox
20 77 0.003487782 ubox
21 65 0.004941888 ubox
21 77 0.010684054 ubox
22 64 0.004928952 ubox
22 76 0.012270915 ubox
22 77 0.977279369 ubox
23 76 0.999437889 ubox
24 62 0.004928031 ubox
24 75 0.999945788 ubox
25 61 0.004931636 ubox
25 73 0.003760198 ubox
25 74 0.999950676 ubox
25 75 0.005448697 ubox
26 60 0.004924668 ubox
26 72 0.004433226 ubox
26 73 0.999938158 ubox
26 74 0.007018135 ubox
27 59 0.004937148 ubox
27 71 0.005008672 ubox
27 72 0.999920335 ubox
27 73 0.008290386 ubox
28 53 0.005889536 ubox
28 58 0.004930609 ubox
28 71 0.999216518 ubox
28 72 0.009380814 ubox
29 52 0.011396033 ubox
29 54 0.008531512 ubox
29 57 0.004784865 ubox
29 69 0.083226793 ubox
29 70 0.993737729 ubox
30 36 0.006127293 ubox
30 39 0.004068611 ubox
30 51 0.046262447 ubox
30 53 0.027605814 ubox
30 68 0.116346857 ubox
30 71 0.015234643 ubox
31 35 0.006135536 ubox
31 38 0.004224079 ubox
31 50 0.046308034 ubox
31 52 0.028408253 ubox
31 67 0.116269530 ubox
31 69 0.929237321 ubox
31 70 0.019269260 ubox
32 49 0.046287073 ubox
32 51 0.028521547 ubox
32 68 0.871625114 ubox
32 71 0.034825631 ubox
33 50 0.028438687 ubox
33 67 0.838800998 ubox
33 69 0.267054386 ubox
33 70 0.056027211 ubox
34 39 0.003581727 ubox
34 48 0.048578233 ubox
34 49 0.024459614 ubox
34 59 0.014429553 ubox
34 62 0.004775004 ubox
34 68 0.298495425 ubox
35 42 0.007724877 ubox
35 47 0.050709651 ubox
35 48 0.019640802 ubox
35 56 0.012391297 ubox
35 58 0.014438665 ubox
35 61 0.004632696 ubox
35 68 0.361797173 ubox
36 41 0.007715647 ubox
36 44 0.003323345 ubox
36 45 0.005088900 ubox
36 46 0.052592871 ubox
36 55 0.013285305 ubox
36 57 0.014381398 ubox
36 66 0.732990502 ubox
36 67 0.390726305 ubox
37 43 0.003623297 ubox
37 44 0.006367752 ubox
37 45 0.052041681 ubox
37 54 0.013418367 ubox
37 64 0.003483683 ubox
37 65 0.735105516 ubox
37 66 0.365956801 ubox
37 69 0.005082864 ubox
38 42 0.004332994 ubox
38 47 0.012272642 ubox
38 53 0.013816018 ubox
38 56 0.003165318 ubox
38 58 0.004250568 ubox
38 68 0.005682944 ubox
39 46 0.012314700 ubox
39 52 0.013805107 ubox
39 54 0.012649415 ubox
39 57 0.004250031 ubox
39 64 0.995387646 ubox
39 67 0.005609235 ubox
40 53 0.012208428 ubox
40 56 0.004196301 ubox
40 63 0.997828152 ubox
41 51 0.020369641 ubox
41 62 0.997816623 ubox
42 50 0.020386455 ubox
42 64 0.005435728 ubox
43 49 0.020383561 ubox
43 59 0.020562124 ubox
43 60 0.027798616 ubox
43 61 0.996776780 ubox
43 62 0.012933886 ubox
43 63 0.003357546 ubox
44 48 0.020054551 ubox
44 58 0.020589578 ubox
44 59 0.027905091 ubox
44 60 0.996880524 ubox
44 61 0.014086525 ubox
44 62 0.003165038 ubox
45 58 0.026714869 ubox
45 59 0.997689439 ubox
46 56 0.023087266 ubox
46 58 0.997730690 ubox
47 55 0.023871712 ubox
47 57 0.997627484 ubox
48 54 0.024376121 ubox
48 55 0.997204748 ubox
49 54 0.995888543 ubox
49 57 0.005709465 ubox
50 56 0.019705603 ubox
51 55 0.020352339 ubox
55 71 0.003328593 ubox
56 69 0.041346676 ubox
57 68 0.055664159 ubox
57 71 0.003524642 ubox
58 67 0.055713374 ubox
58 70 0.003663681 ubox
59 66 0.055702339 ubox
59 69 0.003691619 ubox
60 65 0.051545929 ubox
61 67 0.003784593 ubox
62 66 0.003865922 ubox
2 19 0.9500000 lbox
3 18 0.9500000 lbox
4 17 0.9500000 lbox
5 16 0.9500000 lbox
6 14 0.9500000 lbox
7 13 0.9500000 lbox
22 77 0.9500000 lbox
23 76 0.9500000 lbox
24 75 0.9500000 lbox
25 74 0.9500000 lbox
26 73 0.9500000 lbox
27 72 0.9500000 lbox
28 71 0.9500000 lbox
29 70 0.9500000 lbox
31 69 0.9500000 lbox
32 68 0.9500000 lbox
33 67 0.9500000 lbox
36 66 0.9500000 lbox
37 65 0.9500000 lbox
39 64 0.9500000 lbox
40 63 0.9500000 lbox
41 62 0.9500000 lbox
43 61 0.9500000 lbox
44 60 0.9500000 lbox
45 59 0.9500000 lbox
46 58 0.9500000 lbox
47 57 0.9500000 lbox
48 55 0.9500000 lbox
49 54 0.9500000 lbox
showpage
end
%%EOF
