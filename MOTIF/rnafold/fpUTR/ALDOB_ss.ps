%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGUCUUAUUUGGCAGCUGCUGCCUCACCCACAGCUUUUGAUAUCUAGGAGGACUCUUCUCUCCCAAACUACCUGUCACC\
) } def
/len { sequence length } bind def

/coor [
[89.86146545 129.16409302]
[78.22652435 121.89177704]
[70.89127350 110.29640198]
[55.95837402 111.71368408]
[41.02548218 113.13095856]
[26.09258842 114.54823303]
[22.25809097 128.39851379]
[13.90974998 140.05932617]
[2.08384037 148.11882019]
[-11.76387882 151.60989380]
[-25.93736076 150.12635803]
[-38.70799255 143.86994934]
[-48.52542496 133.62324524]
[-54.20576859 120.65184021]
[-69.18160248 121.50302124]
[-84.15743256 122.35420227]
[-99.13326263 123.20538330]
[-114.10909271 124.05655670]
[-129.57960510 130.99195862]
[-140.52661133 118.04594421]
[-131.11697388 103.94293213]
[-114.96026611 109.08072662]
[-99.98443604 108.22955322]
[-85.00860596 107.37837219]
[-70.03277588 106.52719116]
[-55.05694580 105.67601013]
[-50.12742996 90.73754120]
[-39.85643005 78.77227020]
[-25.76919746 71.60169983]
[-9.97476292 70.33199310]
[5.14978218 75.18342590]
[17.31705666 85.45281982]
[24.67531013 99.61534119]
[39.60820389 98.19806671]
[54.54109955 96.78078461]
[69.47399139 95.36351013]
[75.86278534 80.74567413]
[88.69513702 71.26789093]
[104.54537964 69.46029663]
[119.18221283 75.80543518]
[128.69825745 88.60945129]
[143.56681824 86.62810516]
[158.43537903 84.64675903]
[173.30395508 82.66542053]
[188.17251587 80.68407440]
[197.76902771 68.41441345]
[212.87609863 66.61685181]
[224.51420593 75.84127808]
[239.38276672 73.85993195]
[254.25134277 71.87858582]
[264.92929077 56.47336197]
[283.12841797 53.55523300]
[297.58865356 64.47330475]
[312.26477051 61.37314606]
[326.94091797 58.27298355]
[333.14697266 44.05101013]
[346.54425049 36.22206497]
[361.98123169 37.79653931]
[373.52209473 48.16901398]
[376.72912598 63.35106277]
[370.36917114 77.50487518]
[356.88772583 85.18802643]
[341.46871948 83.44618225]
[330.04107666 72.94911957]
[315.36492920 76.04928589]
[300.68881226 79.14944458]
[296.54235840 90.09042358]
[287.46133423 97.65945435]
[275.71340942 99.81099701]
[264.30966187 95.87226868]
[256.23269653 86.74715424]
[241.36412048 88.72850037]
[226.49554443 90.70984650]
[217.67910767 102.65998840]
[202.62849426 104.88116455]
[190.15385437 95.55264282]
[175.28529358 97.53398132]
[160.41673279 99.51532745]
[145.54815674 101.49667358]
[130.67959595 103.47801971]
[126.14345551 116.42722321]
[116.44467163 126.13248444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 34]
[6 33]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[48 73]
[49 72]
[50 71]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
