%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGACUAAAUCCAGCAAAAACUUAAGUGAAAACAACCUGAGGAAAAGCUGUAGACUGUGAGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[89.19989777 271.67617798]
[77.09548950 261.96728516]
[73.04206085 246.98898315]
[78.59824371 232.50076294]
[91.62756348 224.07363892]
[92.31027985 209.08917236]
[92.99299622 194.10472107]
[93.67572021 179.12026978]
[79.50628662 169.04409790]
[73.93435669 152.41293335]
[79.26575470 135.54269409]
[93.62908936 124.95227814]
[92.94637299 109.96782684]
[91.58235168 95.02996826]
[89.53984833 80.16968536]
[87.49735260 65.30939484]
[85.45484924 50.44910431]
[70.99235535 45.69541168]
[60.07249451 35.17668152]
[54.82400513 21.01781654]
[56.23766708 6.04575634]
[63.97976303 -6.77490520]
[76.46884155 -14.92894650]
[74.42634583 -29.78923607]
[72.38384247 -44.64952469]
[70.34134674 -59.50981522]
[60.79698563 -72.12789154]
[66.72919464 -85.79017639]
[64.68669128 -100.65046692]
[51.35502243 -108.82363892]
[46.44504166 -123.67038727]
[52.27508163 -138.18054199]
[66.09238434 -145.50285339]
[81.37284088 -142.17994690]
[90.90148163 -129.78079224]
[90.17917633 -114.15989685]
[79.54698181 -102.69297028]
[81.58947754 -87.83267975]
[90.98774719 -76.27751160]
[85.20162964 -61.55231476]
[87.24413300 -46.69202423]
[89.28663635 -31.83173561]
[91.32913208 -16.97144508]
[105.55501556 -12.48929214]
[116.46898651 -2.23284864]
[121.86964417 11.80260468]
[120.63579559 26.85244942]
[112.95879364 39.92725754]
[100.31513977 48.40660477]
[102.35763550 63.26689148]
[104.40013885 78.12718201]
[106.44263458 92.98747253]
[110.05831146 97.28274536]
[110.80954742 103.34407806]
[107.93082428 109.28510284]
[108.61354828 124.26956177]
[120.18941498 129.91683960]
[128.11180115 139.97872925]
[130.85400391 152.41293335]
[127.93259430 164.73078918]
[119.99123383 174.49520874]
[108.66017151 179.80297852]
[107.97745514 194.78744507]
[107.29473877 209.77189636]
[106.61201477 224.75634766]
[118.82102966 234.33338928]
[123.03670502 249.26683044]
[117.63802338 263.81445312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 65]
[6 64]
[7 63]
[8 62]
[12 56]
[13 55]
[14 52]
[15 51]
[16 50]
[17 49]
[23 43]
[24 42]
[25 41]
[26 40]
[28 38]
[29 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
