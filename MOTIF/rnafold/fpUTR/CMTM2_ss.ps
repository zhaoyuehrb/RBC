%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGGAGUUGGCAUUCGGUGGUCCUGGCAGUUAGCUGAGCACGCCCUCUGAGCCGCUCGGUGGACACCAGGCACUCUAGUAGGCCUGGCCUACCCAGAAACAGCAGGAGAGAGAAGAAACAGGCCAGCUGUGAGAAGCCAAGGACACCGAGUCAGUC\
) } def
/len { sequence length } bind def

/coor [
[99.39450073 373.41043091]
[98.22491455 358.45608521]
[97.05532074 343.50177002]
[88.34919739 331.41653442]
[94.98690033 317.05508423]
[93.81731415 302.10073853]
[92.64772034 287.14642334]
[77.20471954 278.66244507]
[69.84635162 262.48034668]
[73.67034149 244.95960999]
[87.33865356 233.10984802]
[85.58649445 218.21253967]
[83.83433533 203.31521606]
[82.08216858 188.41790771]
[80.33000946 173.52059937]
[76.40560150 167.21299744]
[78.69192505 158.31588745]
[77.23077393 143.38722229]
[75.76961517 128.45855713]
[66.53213501 116.64040375]
[52.39822006 111.61721039]
[38.26430511 106.59401703]
[24.13039207 101.57081604]
[17.48883820 102.40117645]
[12.23600101 100.07027435]
[9.54955387 96.06605530]
[-4.37761259 90.49523926]
[-18.30477905 84.92441559]
[-32.23194504 79.35359955]
[-46.15911102 73.78277588]
[-58.33346558 78.14174652]
[-69.83751678 73.17691040]
[-74.69460297 62.06378174]
[-88.51042175 56.22227859]
[-102.32624054 50.38077545]
[-118.05011749 52.13300323]
[-126.75946045 40.05010223]
[-140.57528687 34.20859909]
[-154.39109802 28.36709595]
[-168.20692444 22.52559280]
[-182.02273560 16.68408966]
[-195.83856201 10.84258842]
[-209.65437317 5.00108576]
[-221.91145325 9.12167835]
[-233.31645203 3.93332696]
[-237.95578003 -7.27245855]
[-251.65498352 -13.38242054]
[-265.63424683 -6.37428474]
[-280.83569336 -10.04171848]
[-290.08166504 -22.65307236]
[-289.00646973 -38.25364685]
[-278.11782837 -49.47733307]
[-262.55697632 -51.02464676]
[-249.67131042 -42.16499329]
[-245.54502869 -27.08163071]
[-231.84580994 -20.97167015]
[-214.54039001 -23.75265503]
[-203.81286621 -8.81473351]
[-189.99705505 -2.97323084]
[-176.18122864 2.86827183]
[-162.36541748 8.70977402]
[-148.54959106 14.55127716]
[-134.73377991 20.39277840]
[-120.91796112 26.23428154]
[-106.18228149 24.06423187]
[-96.48473358 36.56495667]
[-82.66891479 42.40645981]
[-68.85309601 48.24796295]
[-51.60522842 45.12984467]
[-40.58829117 59.85561371]
[-26.66112709 65.42642975]
[-12.73395920 70.99725342]
[1.19320691 76.56806946]
[15.12037373 82.13889313]
[29.15358543 87.43690491]
[43.28749847 92.46009827]
[57.42141342 97.48329163]
[71.55532837 102.50648499]
[71.19644165 89.82087708]
[76.57519531 77.40861511]
[87.32015228 67.87365723]
[101.88687134 63.51625824]
[106.77192688 49.33401108]
[111.65699005 35.15176010]
[116.54204559 20.96951103]
[121.42710876 6.78726244]
[126.31216431 -7.39498663]
[125.75379181 -24.33973694]
[141.88175964 -29.56706047]
[151.36947632 -15.51644611]
[140.49441528 -2.50992680]
[135.60935974 11.67232227]
[130.72430420 25.85457230]
[125.83924103 40.03681946]
[120.95417786 54.21907043]
[116.06911469 68.40132141]
[120.68785858 74.31040192]
[126.30385590 60.40138626]
[141.15739441 58.31038666]
[150.39509583 70.12837982]
[144.77935791 84.03749084]
[129.92533875 86.12855530]
[134.54408264 92.03763580]
[149.48629761 90.72219849]
[164.42851257 89.40676880]
[179.37071228 88.09133148]
[194.31292725 86.77589417]
[207.38140869 77.85818481]
[220.73817444 84.44955444]
[235.68037415 83.13411713]
[239.57171631 68.48374939]
[248.24165344 56.04959869]
[260.64324951 47.33314896]
[275.27893066 43.38695526]
[290.38137817 44.68753815]
[304.12692261 51.07785034]
[314.85568237 61.78622055]
[321.27215576 75.51956940]
[322.60147095 90.61952972]
[318.68313599 105.26270294]
[309.99029541 117.68085480]
[297.57269287 126.37442780]
[282.92974854 130.29364014]
[267.82971191 128.96524048]
[254.09596252 122.54960632]
[243.38694763 111.82147980]
[236.99581909 98.07632446]
[222.05360413 99.39176178]
[210.05389404 108.21537781]
[195.62835693 101.71810150]
[180.68615723 103.03353882]
[165.74394226 104.34897614]
[150.80172729 105.66441345]
[135.85952759 106.97984314]
[124.49743652 123.39392853]
[107.36861420 130.33187866]
[90.69828033 126.99740601]
[92.15943909 141.92607117]
[93.62059021 156.85473633]
[95.22732544 171.76843262]
[96.97948456 186.66574097]
[98.73164368 201.56306458]
[100.48380280 216.46037292]
[102.23596954 231.35768127]
[113.90072632 236.01017761]
[122.41625214 245.14175415]
[126.19985199 256.96469116]
[124.58706665 269.20010376]
[117.94740295 279.51708984]
[107.60205078 285.97680664]
[108.77164459 300.93115234]
[109.94123840 315.88546753]
[118.73101807 329.04034424]
[112.00965118 342.33215332]
[113.17924500 357.28649902]
[114.34883881 372.24081421]
[125.55955505 383.71685791]
[123.43409729 399.61849976]
[109.60292816 407.74734497]
[94.67613983 401.86767578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[5 152]
[6 151]
[7 150]
[11 144]
[12 143]
[13 142]
[14 141]
[15 140]
[17 139]
[18 138]
[19 137]
[20 78]
[21 77]
[22 76]
[23 75]
[26 74]
[27 73]
[28 72]
[29 71]
[30 70]
[33 68]
[34 67]
[35 66]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[46 56]
[47 55]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[103 134]
[104 133]
[105 132]
[106 131]
[107 130]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
