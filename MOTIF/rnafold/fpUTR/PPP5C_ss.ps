%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGACACUUGUGCGGCAGCGGCGGCGGCCACCCGGCGCUCCUUCGCGACGGUUCGGCCGGGUGCCGCUGGCGGCCGUUGCCAGGGUAGGGGUCGCUUUGCGGC\
) } def
/len { sequence length } bind def

/coor [
[157.23211670 400.47891235]
[168.73065186 390.37728882]
[165.14091492 375.81317139]
[161.55117798 361.24905396]
[157.96144104 346.68490601]
[147.40313721 336.17913818]
[151.61300659 320.92831421]
[148.02328491 306.36419678]
[144.43354797 291.80004883]
[140.84381104 277.23593140]
[125.50934601 271.59616089]
[116.41667175 257.82305908]
[117.27265167 241.17611694]
[127.93927765 228.15272522]
[123.91130066 213.70365906]
[119.88332367 199.25460815]
[115.85534668 184.80554199]
[111.82736206 170.35647583]
[107.79938507 155.90740967]
[103.77140808 141.45835876]
[99.74343109 127.00929260]
[95.71545410 112.56022644]
[90.82241058 98.38072968]
[85.08216095 84.52253723]
[79.34191132 70.66434479]
[73.60165405 56.80615234]
[67.86140442 42.94795990]
[62.12115479 29.08976555]
[55.84297943 22.22031975]
[56.42380905 14.72527981]
[51.10473633 0.70003575]
[45.78566360 -13.32520771]
[40.46659088 -27.35045242]
[35.14751816 -41.37569427]
[29.82844353 -55.40093994]
[24.50937080 -69.42618561]
[8.19945621 -73.59417725]
[-2.35600495 -86.49517059]
[-3.19510794 -102.97763062]
[5.81358004 -116.60833740]
[0.07332855 -130.46652222]
[-15.04587746 -133.95783997]
[-25.19999886 -145.69126892]
[-26.48456955 -161.15507507]
[-18.40564346 -174.40312195]
[-4.06973600 -180.34124756]
[11.01070690 -176.68612671]
[21.03694534 -164.84323120]
[22.15368652 -149.36639404]
[13.93152142 -136.20677185]
[19.67177391 -122.34858704]
[32.97530365 -120.41777802]
[43.64682388 -112.06507874]
[48.79878616 -99.41333008]
[46.96922302 -85.76611328]
[38.53461456 -74.74525452]
[43.85368729 -60.72001266]
[49.17276001 -46.69476700]
[54.49183273 -32.66952515]
[59.81090927 -18.64428139]
[65.12998199 -4.61903763]
[70.44905090 9.40620613]
[75.97934723 23.34951401]
[81.71959686 37.20770645]
[87.45985413 51.06589890]
[93.20010376 64.92409515]
[98.94035339 78.78228760]
[104.68060303 92.64048004]
[107.58643341 94.06578827]
[109.99542999 96.65129089]
[111.44956970 100.19761658]
[111.57830811 104.32888794]
[110.16451263 108.53224945]
[114.19249725 122.98131561]
[118.22047424 137.43037415]
[122.24845123 151.87944031]
[126.27642822 166.32849121]
[130.30441284 180.77755737]
[134.33238220 195.22662354]
[138.36036682 209.67568970]
[142.38833618 224.12474060]
[155.71365356 228.00263977]
[165.27546692 237.91049194]
[168.62402344 251.15423584]
[164.97895813 264.20651245]
[155.40794373 273.64620972]
[158.99766541 288.21032715]
[162.58740234 302.77444458]
[166.17713928 317.33856201]
[176.99220276 328.88607788]
[172.52557373 343.09518433]
[176.11531067 357.65930176]
[179.70504761 372.22344971]
[183.29478455 386.78756714]
[198.17066956 390.38845825]
[209.66154480 400.49874878]
[215.12689209 414.79522705]
[213.31079102 429.99258423]
[204.63059998 442.59866333]
[191.08093262 449.71661377]
[175.77543640 449.71081543]
[162.23117065 442.58258057]
[153.56053162 429.96997070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[7 89]
[8 88]
[9 87]
[10 86]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[40 51]
[41 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
