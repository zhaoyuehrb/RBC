%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCGCGCGGGCGCGCUUCCGCCUGUGUGGAGGUGCGGGAUUGGGCGGGCUGCCACGGCAUGGAGA\
) } def
/len { sequence length } bind def

/coor [
[111.60886383 125.71992493]
[102.02616119 114.17991638]
[88.98010254 109.15081024]
[86.43383026 95.40278625]
[76.85112762 83.86277771]
[67.26842499 72.32276154]
[57.68572235 60.78275681]
[42.91695786 55.10876465]
[40.73875046 40.37429047]
[31.15604782 28.83428192]
[21.57334518 17.29427338]
[2.49439001 11.55788803]
[-0.73722410 -7.29290533]
[-11.34382629 -17.89950752]
[-21.95042801 -28.50610924]
[-32.55702972 -39.11270905]
[-43.16363144 -49.71931076]
[-53.77023315 -60.32591248]
[-64.37683105 -70.93251801]
[-74.98343658 -81.53911591]
[-85.59003448 -92.14572144]
[-96.19664001 -102.75231934]
[-106.80323792 -113.35892487]
[-122.77501678 -117.07837677]
[-127.28021240 -132.84654236]
[-115.68426514 -144.44248962]
[-99.91609192 -139.93730164]
[-96.19664001 -123.96552277]
[-85.59003448 -113.35892487]
[-74.98343658 -102.75231934]
[-64.37683105 -92.14572144]
[-53.77023315 -81.53911591]
[-43.16363144 -70.93251801]
[-32.55702972 -60.32591248]
[-21.95042801 -49.71931076]
[-11.34382629 -39.11270905]
[-0.73722410 -28.50610924]
[9.86937714 -17.89950752]
[20.46653938 -18.79556847]
[29.90972137 -13.43448830]
[34.76799393 -3.47334027]
[33.11335373 7.71157026]
[42.69605637 19.25157928]
[52.27875900 30.79158974]
[66.36210632 35.64016342]
[69.22573090 51.20005417]
[78.80843353 62.74006271]
[88.39113617 74.28007507]
[97.97383881 85.82008362]
[111.01989746 90.84918976]
[113.56616974 104.59721375]
[123.14887238 116.13722229]
[134.68888855 125.71992493]
[147.79321289 133.01899719]
[164.17315674 132.22557068]
[172.82153320 146.15890503]
[164.84164429 160.48556519]
[148.44250488 160.46751404]
[140.49415588 146.12333679]
[127.38981628 138.82426453]
[129.71777344 153.64251709]
[123.20580292 167.15525818]
[110.16489410 174.56706238]
[95.22304535 173.24760437]
[83.68283844 163.66514587]
[79.63968658 149.22032166]
[84.52845001 135.03935242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[4 49]
[5 48]
[6 47]
[7 46]
[9 44]
[10 43]
[11 42]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
