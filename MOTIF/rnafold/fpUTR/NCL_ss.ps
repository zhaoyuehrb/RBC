%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCGCCUCAGUCUCGAGCUCUCGCUGGCCUUCGGGUGUACGUGCUCCGGGAUCUUCAGCACCCGCGGCCGCCAUCGCCGUCGCUUGGCUUCUUCUGGACUCAUCUGCGCCACUUGUCCGCUUCACACUCCGCCGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[216.49234009 227.82322693]
[215.48535156 219.47059631]
[215.52333069 211.05564880]
[216.60617065 202.70864868]
[218.71759033 194.55885315]
[221.82536316 186.73251343]
[209.06184387 178.85263062]
[196.29830933 170.97276306]
[184.40718079 173.44801331]
[173.69049072 166.92092896]
[170.21708679 154.44564819]
[157.63099670 146.28535461]
[145.04492188 138.12504578]
[130.57702637 141.47402954]
[117.69670868 133.37760925]
[114.28208160 118.17965698]
[101.69599915 110.01934814]
[93.69021606 108.60653687]
[88.92452240 101.53671265]
[76.52204132 93.09997559]
[62.70408630 99.65827179]
[47.55870819 98.42771912]
[35.14527512 89.83859253]
[28.74060440 76.27996826]
[29.97422028 61.43598938]
[17.57174492 52.99924850]
[8.63957024 50.73203659]
[4.99104691 44.23616028]
[-7.22175646 35.52711868]
[-19.43455887 26.81807327]
[-31.64736366 18.10903168]
[-44.52643585 19.46059608]
[-54.53353119 11.89039612]
[-56.59893036 -0.07874025]
[-68.61608124 -9.05582523]
[-80.63323975 -18.03290939]
[-92.65039062 -27.00999451]
[-104.66754150 -35.98707962]
[-116.68469238 -44.96416473]
[-128.70184326 -53.94124985]
[-140.90657043 -45.02295303]
[-155.19833374 -40.09984970]
[-170.30632019 -39.60970306]
[-184.88713074 -43.59609604]
[-197.64425659 -51.70455933]
[-207.44334412 -63.21409225]
[-213.41305542 -77.10128021]
[-215.02258301 -92.13127899]
[-212.12878418 -106.96762848]
[-204.98899841 -120.29109955]
[-194.23808289 -130.91697693]
[-180.83200073 -137.90040588]
[-165.96281433 -140.62043762]
[-150.95266724 -138.83518982]
[-137.13627625 -132.70343018]
[-125.74215698 -122.77037048]
[-117.78349304 -109.91925812]
[-113.96794891 -95.29280853]
[-114.63480377 -80.19158936]
[-119.72476196 -65.95840454]
[-107.70761108 -56.98131561]
[-95.69045258 -48.00423050]
[-83.67330170 -39.02714539]
[-71.65615082 -30.05006218]
[-59.63899994 -21.07297707]
[-47.62184525 -12.09589291]
[-30.14021873 -11.01134872]
[-22.93832016 5.89622736]
[-10.72551632 14.60527134]
[1.48728693 23.31431389]
[13.70009041 32.02335739]
[26.00848389 40.59677505]
[38.41096115 49.03351212]
[51.76426697 42.43390656]
[66.72760773 43.41079712]
[79.27584839 51.80175781]
[85.98331451 65.43651581]
[84.95878601 80.69750214]
[97.36125946 89.13423920]
[109.85630035 97.43326569]
[122.44238281 105.59357452]
[137.71073914 102.50891113]
[150.35856628 110.96391296]
[153.20523071 125.53896332]
[165.79130554 133.69926453]
[178.37739563 141.85957336]
[196.74842834 142.34790039]
[204.17819214 158.20922852]
[216.94171143 166.08911133]
[229.70524597 173.96899414]
[247.49169922 158.13693237]
[269.64199829 149.45481873]
[293.40747070 148.98446655]
[315.84436035 156.76959229]
[334.17855835 171.83227539]
[346.14855957 192.29574585]
[350.28430176 215.61819458]
[365.19262695 217.27409363]
[380.10095215 218.93000793]
[395.00927734 220.58592224]
[409.91757202 222.24183655]
[416.90325928 208.76724243]
[428.28741455 198.72900391]
[442.53036499 193.48474121]
[457.70593262 193.74365234]
[471.76168823 199.47074890]
[482.79675293 209.89149475]
[489.31872559 223.59654236]
[490.44552612 238.73242188]
[486.02478027 253.25212097]
[476.65438843 265.19195557]
[463.60156250 272.93719482]
[448.63162231 275.44030762]
[433.76913452 272.36282349]
[421.02413940 264.12091064]
[412.12023926 251.82923889]
[408.26168823 237.15014648]
[393.35336304 235.49423218]
[378.44503784 233.83833313]
[363.53671265 232.18241882]
[348.62838745 230.52650452]
[346.29302979 238.56500244]
[342.97680664 246.25305176]
[338.73062134 253.47146606]
[333.61981201 260.10827637]
[327.72308350 266.06045532]
[321.13137817 271.23556519]
[313.94644165 275.55307007]
[306.27923584 278.94577026]
[298.24822998 281.36071777]
[289.97763062 282.76007080]
[281.59536743 283.12170410]
[273.23117065 282.43951416]
[265.01452637 280.72360229]
[257.07272339 278.00006104]
[249.52883911 274.31060791]
[242.49987793 269.71188354]
[236.09487915 264.27474976]
[230.41329956 258.08291626]
[225.54344177 251.23196411]
[221.56106567 243.82762146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 90]
[7 89]
[8 88]
[11 86]
[12 85]
[13 84]
[16 81]
[17 80]
[19 79]
[20 78]
[25 73]
[26 72]
[28 71]
[29 70]
[30 69]
[31 68]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
