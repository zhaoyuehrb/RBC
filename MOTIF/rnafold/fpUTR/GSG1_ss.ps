%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCGCCCUGGCUGGUGUCUGGCCCUCAGGACAUCCUCUCCAAUCCACCACACACCACCUUACCCCUCUGCUGGCAAGAGGGGACCUGAUUCAUCCUCACGCUAAACACUCAUUCUACCCAACUGAUUGAGACAGAACAGAAGAUAAACUGAAACUUCUCUGCCUUCCCGCUGCAAGAGUGA\
) } def
/len { sequence length } bind def

/coor [
[85.91449738 192.52861023]
[87.64804077 207.42810059]
[80.39948273 220.56044006]
[66.86853027 227.03448486]
[52.09478760 224.43899536]
[41.58072662 213.74064636]
[39.24230576 198.92404175]
[45.95046997 185.50761414]
[59.20571136 178.48849487]
[69.31621552 167.40798950]
[79.42671967 156.32746887]
[72.78807068 152.83770752]
[58.60299301 157.71453857]
[51.48530960 163.47688293]
[44.13544083 162.55152893]
[29.86959267 167.18678284]
[15.60374451 171.82203674]
[1.33789659 176.45729065]
[-12.92795086 181.09254456]
[-27.19379807 185.72779846]
[-37.92758560 197.35089111]
[-52.42289734 193.92523193]
[-66.68874359 198.56048584]
[-80.95458984 203.19573975]
[-82.21102142 218.31846619]
[-89.14292908 231.77178955]
[-100.66631317 241.51988220]
[-115.00508881 246.10105896]
[-129.96476746 244.84689331]
[-143.26832581 237.97953796]
[-152.90280151 226.57313538]
[-167.16865540 231.20838928]
[-181.43449402 235.84364319]
[-187.12429810 250.40936279]
[-200.87031555 257.86462402]
[-216.18211365 254.68927002]
[-225.82992554 242.38261414]
[-225.25834656 226.75549316]
[-214.73727417 215.18652344]
[-199.23440552 213.13824463]
[-186.06974792 221.57778931]
[-171.80390930 216.94253540]
[-157.53805542 212.30728149]
[-156.44812012 197.41630554]
[-149.72184753 184.04084778]
[-138.35638428 174.23313904]
[-124.06333160 169.51127625]
[-109.01093292 170.62435913]
[-95.49523926 177.43385315]
[-85.58985138 188.92988586]
[-71.32399750 184.29463196]
[-57.05815125 179.65937805]
[-47.34475327 168.36782837]
[-31.82905388 171.46194458]
[-17.56320572 166.82669067]
[-3.29735827 162.19143677]
[10.96848965 157.55618286]
[25.23433685 152.92092896]
[39.50018311 148.28567505]
[53.72616196 143.52946472]
[67.91123962 138.65263367]
[55.26593781 116.69408417]
[55.34552765 92.63034058]
[66.85968018 72.96393585]
[85.59369659 62.38386154]
[77.19407654 49.95621490]
[68.79444885 37.52857208]
[60.39482880 25.10092545]
[51.99520874 12.67328167]
[43.59558868 0.24563685]
[35.19596481 -12.18200779]
[19.62480927 -13.62184143]
[8.65891361 -24.77007675]
[7.47603846 -40.36285782]
[16.63470268 -53.03775024]
[31.81046295 -56.81005859]
[45.83779144 -49.89861298]
[52.09341049 -35.56678391]
[47.62361145 -20.58162880]
[56.02323151 -8.15398502]
[64.42285156 4.27365971]
[72.82247162 16.70130539]
[81.22209930 29.12895012]
[89.62171936 41.55659485]
[98.02133942 53.98423767]
[96.60810852 39.05096054]
[95.19487762 24.11768341]
[93.78164673 9.18440628]
[92.36841583 -5.74887133]
[90.95518494 -20.68214798]
[83.93801880 -33.93957901]
[81.17456818 -48.68282318]
[82.91416168 -63.58161163]
[88.99985504 -77.29161835]
[98.88252258 -88.57580566]
[111.67045593 -96.41600800]
[126.20981598 -100.10478973]
[141.18870544 -99.30932617]
[155.25559998 -94.10138702]
[167.14123535 -84.95088959]
[175.77317810 -72.68347168]
[180.37257385 -58.40602493]
[180.52441406 -43.40679169]
[176.21501160 -29.03915405]
[167.83319092 -16.59949684]
[156.13856506 -7.21217537]
[148.92201233 5.93777943]
[141.70545959 19.08773422]
[134.48890686 32.23768997]
[127.27234650 45.38764572]
[120.05578613 58.53759766]
[132.69334412 50.45722961]
[145.33088684 42.37686157]
[157.96842957 34.29648972]
[165.42710876 20.34375763]
[180.31788635 20.00638580]
[192.95544434 11.92601681]
[192.88833618 -3.50120044]
[201.19174194 -16.50339699]
[215.21604919 -22.93161774]
[230.48619080 -20.73464012]
[242.12948608 -10.61351395]
[246.43060303 4.20214701]
[242.01710510 18.98472023]
[230.29728699 29.01713943]
[215.01091003 31.09809685]
[201.03581238 24.56356621]
[188.39825439 32.64393616]
[181.84350586 46.01870728]
[166.04879761 46.93404007]
[153.41125488 55.01440811]
[140.77371216 63.09477615]
[128.13615417 71.17514801]
[145.04840088 95.64397430]
[141.32841492 128.56004333]
[155.33972168 133.91574097]
[169.35101318 139.27143860]
[183.36231995 144.62713623]
[188.56121826 143.79194641]
[193.09960938 144.93446350]
[196.33114624 147.46673584]
[197.93920898 150.62886047]
[211.65960693 156.69110107]
[225.38000488 162.75334167]
[239.10038757 168.81558228]
[251.04383850 159.24412537]
[266.06951904 156.33081055]
[280.72463989 160.74507141]
[291.64157104 171.47256470]
[296.31167603 186.04818726]
[293.66180420 201.12255859]
[284.30087280 213.23170471]
[270.37994385 219.59303284]
[255.09797668 218.74476624]
[241.96661377 210.88180542]
[234.00337219 197.81101990]
[233.03814697 182.53598022]
[219.31774902 176.47373962]
[205.59736633 170.41149902]
[191.87696838 164.34925842]
[178.00662231 158.63842773]
[163.99531555 153.28273010]
[149.98402405 147.92703247]
[135.97271729 142.57133484]
[130.42762756 147.62129211]
[140.52752686 158.71147156]
[150.62724304 169.80181885]
[139.53672791 179.90133667]
[129.43734741 168.81137085]
[119.33745575 157.72119141]
[113.79236603 162.77113342]
[117.81797791 177.22085571]
[121.84359741 191.67057800]
[125.86921692 206.12028503]
[139.07888794 215.22436523]
[140.05335999 231.23779297]
[128.04508972 241.87644958]
[112.26580048 238.97926331]
[104.82001495 224.76870728]
[111.41950226 210.14590454]
[107.39388275 195.69619751]
[103.36826324 181.24647522]
[99.34264374 166.79675293]
[92.70400238 163.30699158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 61]
[13 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[22 52]
[23 51]
[24 50]
[31 43]
[32 42]
[33 41]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[111 133]
[112 132]
[113 131]
[114 130]
[116 128]
[117 127]
[135 164]
[136 163]
[137 162]
[138 161]
[142 160]
[143 159]
[144 158]
[145 157]
[171 183]
[172 182]
[173 181]
[174 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
