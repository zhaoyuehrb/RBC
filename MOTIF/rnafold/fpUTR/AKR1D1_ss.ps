%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUUUGAUGGAAUAGGCCCUAGGACACCUUUCUAAAAAGACUCCCUGUGGUGUUCAGAAUCACUCCUACAGUCAGGUUCUCCACA\
) } def
/len { sequence length } bind def

/coor [
[98.00888062 127.83946228]
[81.95729065 121.29461670]
[72.86542511 106.53566742]
[57.87498474 106.00028229]
[42.88454056 105.46489716]
[27.89409828 104.92951202]
[12.90365601 104.39412689]
[2.81492710 112.66606140]
[-9.79623985 111.77729034]
[-18.07768631 102.76618195]
[-33.03946686 101.69609070]
[-48.00125122 100.62600708]
[-62.96303177 99.55591583]
[-77.92481232 98.48582458]
[-86.93907166 101.03573608]
[-93.39845276 97.10112762]
[-108.31250763 95.49770355]
[-123.22656250 93.89427948]
[-138.20506287 93.09141541]
[-153.20506287 93.09141541]
[-169.04418945 99.13774872]
[-179.23893738 85.59141541]
[-169.04418945 72.04507446]
[-153.20506287 78.09141541]
[-138.20506287 78.09141541]
[-135.36541748 75.65092468]
[-131.12026978 74.59391022]
[-126.19857025 75.60393524]
[-121.62313080 78.98022461]
[-106.70907593 80.58364868]
[-91.79502106 82.18707275]
[-76.85472870 83.52404785]
[-61.89294434 84.59413147]
[-46.93116379 85.66422272]
[-31.96938133 86.73430634]
[-17.00759888 87.80439758]
[-1.79620695 79.25154877]
[13.43904114 89.40368652]
[28.42948341 89.93907166]
[43.41992569 90.47445679]
[58.41036987 91.00984192]
[73.40081024 91.54522705]
[79.62713623 80.92262268]
[89.81836700 74.01280212]
[101.99111938 72.16053772]
[113.77636719 75.72631073]
[122.88049316 84.01616669]
[127.53168488 95.41674042]
[142.44573975 97.02017212]
[157.35980225 98.62359619]
[172.27384949 100.22702026]
[187.18791199 101.83045197]
[191.01153564 99.78169250]
[194.90982056 99.05056000]
[198.48028564 99.50973511]
[201.39799500 100.91976929]
[203.44409180 102.96207428]
[204.52224731 105.27846527]
[218.91464233 109.50445557]
[233.30703735 113.73043823]
[247.69943237 117.95642853]
[262.09182739 122.18241882]
[276.48422241 126.40840912]
[291.01828003 130.11799622]
[305.67547607 133.30648804]
[320.33267212 136.49496460]
[334.55200195 129.06594849]
[349.16702271 135.68269348]
[352.96630859 151.26937866]
[343.03540039 163.86924744]
[326.99243164 163.81675720]
[317.14419556 151.15216064]
[302.48699951 147.96368408]
[287.82980347 144.77520752]
[283.22732544 146.69180298]
[277.36038208 145.56961060]
[272.25823975 140.80079651]
[257.86584473 136.57481384]
[243.47344971 132.34883118]
[229.08105469 128.12283325]
[214.68865967 123.89685059]
[200.29626465 119.67086029]
[185.58447266 116.74450684]
[170.67042542 115.14107513]
[155.75636292 113.53765106]
[140.84231567 111.93422699]
[125.92826080 110.33079529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[16 31]
[17 30]
[18 29]
[19 25]
[20 24]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
