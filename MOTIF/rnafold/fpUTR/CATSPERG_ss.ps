%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGAGACCGGGCAAGAGGGGCGGGACUGGUGCGGCCGAGUGACAGUUGACCGGUUUUAACCAAGUGACUGGUUCUAGCCACGUU\
) } def
/len { sequence length } bind def

/coor [
[58.25130081 355.60391235]
[47.24082565 366.12481689]
[32.90082932 371.25164795]
[17.71581268 370.09619141]
[4.31666660 362.85858154]
[-4.97512484 350.79284668]
[-8.54970264 335.98937988]
[-5.78774977 321.01303101]
[2.83220959 308.45849609]
[15.81671429 300.50094604]
[30.91612053 298.51907349]
[35.14210892 284.12667847]
[39.11053467 269.66116333]
[42.82013321 255.12709045]
[46.52972794 240.59303284]
[40.41624832 232.06185913]
[40.12636566 221.34782410]
[46.00852966 212.12327576]
[56.25302505 207.68939209]
[60.99001694 193.45700073]
[65.72701263 179.22460938]
[70.46400452 164.99221802]
[67.14192200 150.47282410]
[78.84136200 139.82229614]
[83.57835388 125.58990479]
[88.31534576 111.35752106]
[84.44957733 95.13085938]
[96.87943268 84.00667572]
[101.10542297 69.61428070]
[105.33141327 55.22188950]
[109.29983521 40.75635529]
[113.00943756 26.22229767]
[116.71903229 11.68823719]
[107.52258301 -3.06367183]
[111.64878845 -19.60583687]
[126.11685181 -27.97502899]
[129.30532837 -42.63223267]
[132.49380493 -57.28943634]
[135.68228149 -71.94664001]
[138.87077332 -86.60384369]
[137.62966919 -95.88923645]
[142.44349670 -101.72291565]
[146.15309143 -116.25697327]
[136.14181519 -128.11251831]
[135.04460144 -143.59074402]
[143.28337097 -156.73999023]
[157.69013977 -162.50407410]
[172.72520447 -158.66659546]
[182.60729980 -146.70315552]
[183.53652954 -131.21392822]
[175.15560913 -118.15483856]
[160.68714905 -112.54737854]
[156.97755432 -98.01332092]
[153.52796936 -83.41535950]
[150.33949280 -68.75815582]
[147.15101624 -54.10095596]
[143.96252441 -39.44375229]
[140.77404785 -24.78655052]
[149.25022888 -14.90784836]
[150.43571472 -1.74846625]
[143.66371155 9.82444191]
[131.25309753 15.39783478]
[127.54349518 29.93189430]
[123.83389282 44.46595383]
[125.26309967 51.89307022]
[119.72380829 59.44787598]
[115.49781799 73.84027100]
[111.27182770 88.23266602]
[116.25872040 98.91445923]
[112.73613739 110.16439819]
[102.54773712 116.09451294]
[97.81074524 130.32690430]
[93.07375336 144.55929565]
[96.05701447 160.09669495]
[84.69639587 169.72921753]
[79.95940399 183.96160889]
[75.22240448 198.19400024]
[70.48541260 212.42637634]
[75.60414124 231.76504517]
[61.06378937 244.30262756]
[57.35419083 258.83670044]
[53.64459610 273.37075806]
[54.55347443 282.69451904]
[49.53450394 288.35266113]
[45.30851746 302.74505615]
[56.93946838 312.57568359]
[63.56055450 326.28994751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 85]
[12 84]
[13 82]
[14 81]
[15 80]
[19 78]
[20 77]
[21 76]
[22 75]
[24 73]
[25 72]
[26 71]
[28 68]
[29 67]
[30 66]
[31 64]
[32 63]
[33 62]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
