%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCUCCGCCCCCGCCGCCGCCAUUACGGAGCUCCCAGUGGUUGAUUCUUCACCACACUGAAACCAUUAGGAAAAAUCCUUGUGGUUAACAGCAGAGGCUUCAGAGUGUAACCUGUACUCGGGCCUAGAAAUUAUUUAAA\
) } def
/len { sequence length } bind def

/coor [
[125.76709747 270.56723022]
[137.95512390 261.37948608]
[134.96733093 246.68006897]
[131.97953796 231.98063660]
[128.99174500 217.28121948]
[116.46976471 209.29776001]
[113.23032379 194.43301392]
[121.68901062 181.35293579]
[118.70121765 166.65350342]
[115.71342468 151.95408630]
[112.72563934 137.25465393]
[97.03794861 140.85507202]
[80.57862854 137.86637878]
[66.09999084 128.28543091]
[53.27993011 136.07298279]
[49.44146729 148.44198608]
[38.53649521 154.65158081]
[26.72241974 151.82673645]
[13.73203945 159.32673645]
[0.74165851 166.82673645]
[-3.10618520 182.15545654]
[-16.70878983 190.20185852]
[-31.99597168 186.19216919]
[-39.89811707 172.50524902]
[-35.72702026 157.26132202]
[-21.95732307 149.50431824]
[-6.75834131 153.83634949]
[6.23203945 146.33634949]
[19.22241974 138.83634949]
[27.11572266 123.20133972]
[45.49237823 123.25291443]
[58.31244278 115.46536255]
[58.22888947 107.96582794]
[44.01555634 112.75969696]
[35.06417847 100.72338867]
[43.74528122 88.49070740]
[58.06178665 92.96675873]
[57.97823715 85.46722412]
[44.98785782 77.96722412]
[31.99747467 70.46722412]
[19.00709343 62.96722794]
[6.01671314 55.46722794]
[-3.05993104 53.86380768]
[-7.17686129 47.65266037]
[-19.99692535 39.86511230]
[-36.39513016 40.04090500]
[-44.51247406 25.79166603]
[-35.99852753 11.77579117]
[-19.61171150 12.41160965]
[-12.20937538 27.04504585]
[0.61068928 34.83259583]
[13.51671314 42.47684479]
[26.50709343 49.97684479]
[39.49747467 57.47684479]
[52.48785782 64.97684479]
[65.47824097 72.47684479]
[82.63682556 64.87544250]
[99.29927826 65.79416656]
[102.28707123 51.09474182]
[105.27486420 36.39531708]
[99.00531006 19.12114906]
[111.04506683 6.40100527]
[113.70462799 -8.36133671]
[116.36418915 -23.12367821]
[119.02374268 -37.88602066]
[121.68330383 -52.64836121]
[124.34286499 -67.41070557]
[119.17498016 -82.36408234]
[129.04629517 -93.51785278]
[131.70585632 -108.28018951]
[134.36541748 -123.04253387]
[137.02496338 -137.80487061]
[130.96728516 -153.04418945]
[141.34695435 -165.74041748]
[157.48628235 -162.83277893]
[162.78250122 -147.31240845]
[151.78730774 -135.14530945]
[149.12774658 -120.38297272]
[146.46818542 -105.62063599]
[143.80862427 -90.85829163]
[149.16674805 -76.96081543]
[139.10520935 -64.75114441]
[136.44564819 -49.98880386]
[133.78608704 -35.22645950]
[131.12652588 -20.46411896]
[128.46696472 -5.70177650]
[125.80740356 9.06056595]
[132.46485901 19.22080231]
[130.31355286 31.58402443]
[119.97428894 39.38310623]
[116.98649597 54.08253098]
[113.99870300 68.78195953]
[127.54420471 76.92660522]
[136.52230835 90.85526276]
[138.53083801 108.07627869]
[153.48524475 109.24483490]
[168.43966675 110.41339111]
[175.86595154 101.00688934]
[186.81410217 96.43531799]
[198.48519897 97.74076843]
[207.95651245 104.47872925]
[212.91329956 114.85909271]
[227.80081177 116.69266510]
[242.68832397 118.52622986]
[253.17631531 107.09024048]
[268.38983154 104.03601074]
[282.47900391 110.53795624]
[290.02621460 124.09594727]
[288.12942505 139.49665833]
[277.51800537 150.81819153]
[262.27224731 153.70721436]
[248.25445557 147.05281067]
[240.85476685 133.41374207]
[225.96725464 131.58016968]
[211.07974243 129.74661255]
[197.43464661 141.86172485]
[178.94384766 140.20912170]
[167.27110291 125.36779785]
[152.31669617 124.19924164]
[137.36227417 123.03068542]
[127.42506409 134.26687622]
[130.41285706 148.96629333]
[133.40065002 163.66572571]
[136.38842773 178.36514282]
[149.28224182 187.10513306]
[152.10289001 202.05500793]
[143.69117737 214.29342651]
[146.67897034 228.99284363]
[149.66676331 243.69227600]
[152.65454102 258.39169312]
[167.46224976 262.09231567]
[179.19239807 271.85791016]
[185.51594543 285.74945068]
[185.17736816 301.00881958]
[178.24388123 314.60623169]
[166.09213257 323.84191895]
[151.13487244 326.88211060]
[136.34184265 323.12319946]
[124.65025330 313.31149292]
[118.38144684 299.39514160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[4 128]
[5 127]
[8 124]
[9 123]
[10 122]
[11 121]
[14 32]
[15 31]
[18 29]
[19 28]
[20 27]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[44 51]
[45 50]
[58 92]
[59 91]
[60 90]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[69 80]
[70 79]
[71 78]
[72 77]
[95 120]
[96 119]
[97 118]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
