%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUUCUCCAGCCAGCGCCCCAGCCCUCCCGCCGCCCGCUCGCAGGUCCCGAGGAGCGCAGACUGUGUCCCUGACA\
) } def
/len { sequence length } bind def

/coor [
[54.97069931 361.49911499]
[41.68703461 368.88916016]
[26.58591270 370.62826538]
[11.97013760 366.45123291]
[0.06851309 356.99505615]
[-7.30405092 343.70166016]
[-9.02329159 328.59826660]
[-4.82703781 313.98800659]
[4.64481306 302.09881592]
[17.94787216 294.74374390]
[33.05352020 293.04437256]
[37.17533493 278.62182617]
[41.29715347 264.19924927]
[33.46152496 253.77316284]
[33.14212036 240.53851318]
[40.68596649 229.42170715]
[53.47063828 224.69340515]
[58.16258621 210.44610596]
[62.85453796 196.19880676]
[67.54648590 181.95150757]
[56.54402161 170.28976440]
[52.82671738 154.59834290]
[57.48146439 139.06196594]
[69.34957886 127.87193298]
[85.31352234 124.09539032]
[89.43534088 109.67281342]
[86.22745514 96.06395721]
[96.14208221 86.20536804]
[100.26390076 71.78279114]
[104.38571930 57.36022186]
[108.50753784 42.93764496]
[112.34178162 28.43597221]
[115.88694763 13.86093330]
[107.93229675 0.46834999]
[111.73522949 -14.26231098]
[124.55203247 -21.76332092]
[128.09719849 -36.33835983]
[131.64236450 -50.91340256]
[121.49778748 -62.65508270]
[120.22578430 -78.11993408]
[128.31547546 -91.36140442]
[142.65620422 -97.28787994]
[157.73367310 -93.62050629]
[167.75028992 -81.76946259]
[168.85444641 -66.29172516]
[160.62158203 -53.13879013]
[146.21740723 -47.36823654]
[142.67224121 -32.79319382]
[139.12707520 -18.21815491]
[147.06681824 -5.66841507]
[143.67915344 9.16325092]
[130.46199036 17.40609932]
[126.91682434 31.98114014]
[128.43760681 39.42485046]
[122.93010712 47.05946350]
[118.80828857 61.48203659]
[114.68647766 75.90460968]
[110.56465912 90.32718658]
[113.77254486 103.93604279]
[103.85791779 113.79463196]
[99.73609924 128.21720886]
[110.06135559 137.87040710]
[115.14010620 150.98986816]
[114.01665497 164.94619751]
[106.97218323 176.96922302]
[95.45731354 184.69779968]
[81.79378510 186.64344788]
[77.10183716 200.89074707]
[72.40988922 215.13806152]
[67.71794128 229.38536072]
[75.88780975 244.70503235]
[70.68214417 260.91769409]
[55.71972656 268.32104492]
[51.59790802 282.74362183]
[47.47609329 297.16619873]
[59.40255356 306.59106445]
[66.81006622 319.86499023]
[68.56903839 334.96380615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 75]
[12 74]
[13 73]
[17 70]
[18 69]
[19 68]
[20 67]
[25 61]
[26 60]
[28 58]
[29 57]
[30 56]
[31 55]
[32 53]
[33 52]
[36 49]
[37 48]
[38 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
