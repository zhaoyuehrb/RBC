%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGCGCUGCGGCCCCCCCAAUCCCCCGCCCCGUCCGGGCUGGGGCGGAGGAGCGGGCGGGGACCAAAGGUUGGUGUCUUUGCGCUCGGACCUUCGCCAGAGGGGCCGGGACAUC\
) } def
/len { sequence length } bind def

/coor [
[10.55126572 283.75381470]
[-1.12666655 281.05303955]
[-9.74847794 293.32757568]
[-18.37028885 305.60211182]
[-26.99209976 317.87664795]
[-35.61391068 330.15118408]
[-37.21462250 345.89123535]
[-50.86155319 351.85867310]
[-59.48336411 364.13320923]
[-60.39705658 380.50689697]
[-75.15395355 387.65994263]
[-88.57342529 378.23391724]
[-86.85066223 361.92550659]
[-71.75790405 355.51141357]
[-63.13609314 343.23687744]
[-62.15207291 328.37481689]
[-47.88845444 321.52938843]
[-39.26664352 309.25485229]
[-30.64483070 296.98031616]
[-22.02301979 284.70574951]
[-13.40120792 272.43121338]
[-21.78559113 256.52774048]
[-21.05247879 238.48063660]
[-11.31594276 223.16831970]
[4.86482573 214.77215576]
[23.15766907 215.63478088]
[30.77265739 202.71147156]
[38.38764191 189.78816223]
[38.18274307 174.89495850]
[51.85472107 166.93333435]
[59.46970749 154.01002502]
[67.08469391 141.08670044]
[74.69968414 128.16339111]
[82.31466675 115.24008179]
[75.23535919 105.00382996]
[74.13249207 91.64183807]
[80.23925781 78.63349152]
[67.96472168 70.01168060]
[51.97730255 71.34664154]
[41.07082748 59.58108521]
[43.61180496 43.74053574]
[57.65101624 35.97650909]
[72.41877747 42.24489975]
[76.58653259 57.73713684]
[88.86106873 66.35894775]
[103.77609253 64.76454926]
[113.95076752 53.74293137]
[124.12545013 42.72132111]
[134.30012512 31.69970894]
[144.47480774 20.67809677]
[154.64947510 9.65648460]
[164.82415771 -1.36512804]
[174.99884033 -12.38674068]
[174.54553223 -27.95697784]
[185.02110291 -38.98951721]
[199.86773682 -39.32572174]
[210.04241943 -50.34733200]
[220.21710205 -61.36894608]
[230.39176941 -72.39055634]
[240.56645203 -83.41217041]
[250.74113464 -94.43378448]
[260.31478882 -105.98129272]
[269.26031494 -118.02196503]
[271.27944946 -133.71379089]
[285.08041382 -139.31585693]
[294.02590942 -151.35652161]
[302.97143555 -163.39720154]
[311.91693115 -175.43788147]
[320.86245728 -187.47854614]
[325.45492554 -203.79864502]
[342.40853882 -203.90350342]
[347.20251465 -187.64146423]
[332.90310669 -178.53303528]
[323.95761108 -166.49237061]
[315.01208496 -154.45169067]
[306.06658936 -142.41102600]
[297.12109375 -130.37034607]
[295.74176025 -115.53974152]
[281.30096436 -109.07645416]
[272.35546875 -97.03578186]
[272.71972656 -94.13238525]
[271.87994385 -90.90279388]
[269.70294189 -87.83453369]
[266.24554443 -85.45476532]
[261.76275635 -84.25910187]
[251.58805847 -73.23749542]
[241.41339111 -62.21588135]
[231.23870850 -51.19426727]
[221.06402588 -40.17265701]
[210.88935852 -29.15104294]
[211.73878479 -14.32491493]
[201.57720947 -3.00249076]
[186.02044678 -2.21206284]
[175.84576416 8.80954933]
[165.67109680 19.83116150]
[155.49641418 30.85277367]
[145.32173157 41.87438583]
[135.14706421 52.89599991]
[124.97238159 63.91761017]
[114.79770660 74.93922424]
[126.13530731 90.93089294]
[124.45568848 109.46862793]
[111.83892822 121.77501678]
[95.23797607 122.85507202]
[87.62299347 135.77838135]
[80.00800323 148.70169067]
[72.39302063 161.62500000]
[64.77803040 174.54832458]
[64.43825531 190.36587524]
[51.31095505 197.40315247]
[43.69596863 210.32646179]
[36.08098221 223.24977112]
[43.40414810 233.04562378]
[46.93095016 244.72023010]
[46.26002502 256.86245728]
[41.49588013 268.01321411]
[33.23348236 276.84063721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[8 15]
[9 14]
[26 112]
[27 111]
[28 110]
[30 108]
[31 107]
[32 106]
[33 105]
[34 104]
[37 45]
[38 44]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[62 80]
[63 79]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
