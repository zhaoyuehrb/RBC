%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:35 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (GOT1L1)
} def

/sequence { (\
GAGGCAGGACUGCCCGGCCCAGCCUUGGAGGAAGACUUCUGGGCAGAAGCGGAACACAGGAGCAGAGACACAUAGUCUUGGCUCCAGUUUCGUUUCAGUU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 26 0.038928900 ubox
1 96 0.014877111 ubox
1 100 0.025769902 ubox
2 11 0.022570688 ubox
2 25 0.042182412 ubox
2 95 0.012716877 ubox
2 99 0.027985598 ubox
2 100 0.013636975 ubox
3 10 0.025958913 ubox
3 11 0.003232944 ubox
3 14 0.477823606 ubox
3 15 0.043076853 ubox
3 19 0.865375275 ubox
3 20 0.090127476 ubox
3 24 0.042732728 ubox
3 94 0.004485729 ubox
3 100 0.013436564 ubox
4 10 0.004573451 ubox
4 13 0.479908842 ubox
4 14 0.030640547 ubox
4 18 0.869452191 ubox
4 19 0.067724110 ubox
4 23 0.042750181 ubox
4 93 0.003713503 ubox
4 99 0.018233682 ubox
5 12 0.480790085 ubox
5 17 0.868960415 ubox
5 22 0.042690056 ubox
5 92 0.003646597 ubox
5 98 0.018556034 ubox
6 11 0.433137585 ubox
7 14 0.427788979 ubox
7 15 0.756449742 ubox
7 19 0.016542065 ubox
7 20 0.042831622 ubox
7 96 0.005067141 ubox
8 13 0.427259521 ubox
8 14 0.757551640 ubox
8 18 0.016717723 ubox
8 19 0.042799970 ubox
8 95 0.003870804 ubox
8 96 0.004485291 ubox
8 100 0.016488575 ubox
9 95 0.003464229 ubox
9 99 0.018047596 ubox
10 17 0.042547577 ubox
10 46 0.029970557 ubox
10 98 0.018214948 ubox
11 16 0.039855129 ubox
11 45 0.065483324 ubox
11 97 0.014399916 ubox
12 18 0.011531367 ubox
12 44 0.073915272 ubox
13 17 0.011460895 ubox
13 43 0.073934273 ubox
14 42 0.073935889 ubox
15 41 0.073885234 ubox
16 24 0.052388776 ubox
16 40 0.053652419 ubox
16 100 0.023709933 ubox
17 23 0.052534985 ubox
17 39 0.053382520 ubox
17 44 0.422102761 ubox
17 99 0.031993005 ubox
18 22 0.052156429 ubox
18 43 0.422685128 ubox
18 98 0.032480298 ubox
19 28 0.010367938 ubox
19 42 0.422695193 ubox
20 27 0.010592611 ubox
20 41 0.422673582 ubox
21 26 0.009697062 ubox
21 37 0.050966571 ubox
21 40 0.418147058 ubox
21 100 0.005643736 ubox
22 36 0.055852515 ubox
22 37 0.003704874 ubox
22 39 0.375634769 ubox
22 44 0.900841921 ubox
23 31 0.165536565 ubox
23 42 0.013301436 ubox
23 43 0.901717427 ubox
24 30 0.165600353 ubox
24 31 0.009562454 ubox
24 34 0.171629226 ubox
24 41 0.014558714 ubox
24 42 0.901503333 ubox
24 43 0.021770102 ubox
25 29 0.149188114 ubox
25 30 0.008909558 ubox
25 32 0.012403990 ubox
25 33 0.171892030 ubox
25 34 0.027456994 ubox
25 35 0.029622728 ubox
25 41 0.837463875 ubox
25 42 0.029023948 ubox
26 31 0.015100327 ubox
26 32 0.170411703 ubox
26 33 0.030370336 ubox
26 34 0.030660916 ubox
26 41 0.166239425 ubox
27 37 0.025264630 ubox
27 38 0.022583094 ubox
27 39 0.873640469 ubox
27 40 0.252532352 ubox
28 36 0.026258450 ubox
28 37 0.013437938 ubox
28 38 0.919294334 ubox
28 39 0.293805301 ubox
29 37 0.920981702 ubox
29 38 0.296081159 ubox
29 40 0.017876567 ubox
30 36 0.921210065 ubox
30 37 0.294574470 ubox
30 38 0.003948741 ubox
30 39 0.018617655 ubox
30 40 0.011995083 ubox
31 36 0.292720906 ubox
31 37 0.003854815 ubox
31 38 0.019365844 ubox
31 39 0.012807205 ubox
32 37 0.018194166 ubox
32 38 0.013533644 ubox
33 37 0.010437114 ubox
33 40 0.003903437 ubox
34 39 0.004554581 ubox
42 100 0.029865783 ubox
43 99 0.041212313 ubox
44 98 0.045160701 ubox
45 100 0.012613809 ubox
46 95 0.005564895 ubox
46 96 0.997788547 ubox
47 94 0.005104471 ubox
47 95 0.998985133 ubox
48 93 0.003803502 ubox
48 94 0.997698848 ubox
49 93 0.999453753 ubox
50 92 0.999963044 ubox
51 91 0.999804686 ubox
52 90 0.998962699 ubox
52 91 0.010935269 ubox
53 89 0.998694283 ubox
53 90 0.015232017 ubox
54 88 0.996247583 ubox
54 89 0.016178065 ubox
55 87 0.995038779 ubox
56 88 0.075393999 ubox
57 87 0.086177610 ubox
59 85 0.999434520 ubox
60 84 0.999986589 ubox
61 83 0.999848295 ubox
62 82 0.999981522 ubox
63 80 0.028919981 ubox
63 81 0.994873316 ubox
64 78 0.004040141 ubox
64 79 0.034624617 ubox
65 77 0.004389465 ubox
65 78 0.022584223 ubox
65 79 0.869485817 ubox
66 76 0.004285428 ubox
66 78 0.997966487 ubox
66 79 0.007888935 ubox
67 77 0.999965011 ubox
68 76 0.999760838 ubox
69 75 0.998988385 ubox
70 76 0.003829146 ubox
71 75 0.005943920 ubox
3 19 0.9500000 lbox
4 18 0.9500000 lbox
5 17 0.9500000 lbox
7 15 0.9500000 lbox
8 14 0.9500000 lbox
22 44 0.9500000 lbox
23 43 0.9500000 lbox
24 42 0.9500000 lbox
25 41 0.9500000 lbox
27 39 0.9500000 lbox
28 38 0.9500000 lbox
29 37 0.9500000 lbox
30 36 0.9500000 lbox
46 96 0.9500000 lbox
47 95 0.9500000 lbox
48 94 0.9500000 lbox
49 93 0.9500000 lbox
50 92 0.9500000 lbox
51 91 0.9500000 lbox
52 90 0.9500000 lbox
53 89 0.9500000 lbox
54 88 0.9500000 lbox
55 87 0.9500000 lbox
59 85 0.9500000 lbox
60 84 0.9500000 lbox
61 83 0.9500000 lbox
62 82 0.9500000 lbox
63 81 0.9500000 lbox
65 79 0.9500000 lbox
66 78 0.9500000 lbox
67 77 0.9500000 lbox
68 76 0.9500000 lbox
69 75 0.9500000 lbox
showpage
end
%%EOF
