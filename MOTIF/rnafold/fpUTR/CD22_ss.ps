%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCUCCUUUUGCUCUCAGAUGCUGCCAGGGUCCCUGAAGAGGGAAGACACGCGGAAACAGGCUUGCACCCAGACACGACACC\
) } def
/len { sequence length } bind def

/coor [
[222.68450928 156.07720947]
[236.37423706 149.93656921]
[221.94685364 145.83163452]
[207.51947021 141.72668457]
[193.09208679 137.62173462]
[185.61836243 138.84968567]
[178.21270752 133.08935547]
[163.94685364 128.45410156]
[149.68101501 123.81884766]
[135.41516113 119.18359375]
[121.14931488 114.54833984]
[106.88346863 109.91307831]
[80.84706116 140.02047729]
[66.15591431 143.04870605]
[59.88027191 157.24011230]
[46.44480133 165.00334167]
[31.01570892 163.35327148]
[19.52579689 152.92439270]
[16.39317322 137.72682190]
[22.82239342 123.60432434]
[36.34128952 115.98730469]
[51.75157547 117.80464935]
[63.12767792 128.35755920]
[77.81882477 125.32933044]
[80.26786041 118.24044800]
[70.43858337 106.90972900]
[85.16594696 104.06269073]
[87.61498260 96.97381592]
[77.92606354 85.52284241]
[68.23714447 74.07186127]
[58.54822159 62.62089157]
[43.70151520 54.43482590]
[47.45769119 37.90220642]
[64.38402557 36.93490219]
[69.99919891 52.93196869]
[79.68811798 64.38294220]
[89.37703705 75.83391571]
[99.06595612 87.28488922]
[111.51872253 95.64723206]
[125.78456879 100.28248596]
[140.05041504 104.91773987]
[154.31626892 109.55300140]
[168.58210754 114.18825531]
[182.84796143 118.82350922]
[197.19702148 123.19435120]
[211.62440491 127.29930115]
[226.05178833 131.40425110]
[240.47917175 135.50918579]
[247.03219604 133.43678284]
[253.16349792 134.80525208]
[267.04806519 129.12908936]
[276.89413452 116.74501038]
[291.60287476 119.09080505]
[305.48742676 113.41464233]
[309.04855347 98.31172943]
[320.82876587 88.21192169]
[336.29833984 86.99880981]
[349.50894165 95.13885498]
[355.38076782 109.50204468]
[351.65600586 124.56543732]
[339.76693726 134.53684998]
[324.28509521 135.58207703]
[311.16360474 127.29920959]
[297.27902222 132.97537231]
[288.42605591 144.95344543]
[272.72424316 143.01365662]
[258.83966064 148.68981934]
[273.12130737 153.27621460]
[285.47686768 161.78147888]
[294.85934448 173.48486328]
[300.47360229 187.39457703]
[301.84390259 202.33184814]
[298.85406494 217.03086853]
[291.75750732 230.24597168]
[281.15560913 240.85725403]
[267.94680786 247.96551514]
[253.25044250 250.96833801]
[238.31195068 249.61126709]
[224.39727783 244.00932312]
[212.68559265 234.63720703]
[204.16938782 222.28915405]
[199.57035828 208.01159668]
[199.27824402 193.01443481]
[203.31779480 178.56860352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 24]
[14 23]
[28 38]
[29 37]
[30 36]
[31 35]
[50 67]
[51 66]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
