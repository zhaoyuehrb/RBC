%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[64.71863556 134.22071838]
[54.90885925 119.56071472]
[50.90660477 102.38138580]
[35.98877716 100.81346130]
[21.07094765 99.24553680]
[11.90727425 101.50341797]
[5.56590939 97.28678894]
[-9.27317524 95.09555054]
[-24.15489578 93.21554565]
[-39.07272339 91.64762115]
[-53.99055099 90.07969666]
[-68.90837860 88.51176453]
[-83.82621002 86.94384003]
[-100.29101562 94.87564087]
[-114.17824554 84.35670471]
[-129.14865112 83.41484833]
[-144.11904907 82.47299194]
[-158.55937195 90.24531555]
[-172.36643982 81.39677429]
[-171.33673096 65.02998352]
[-156.52951050 57.98170090]
[-143.17718506 67.50258636]
[-128.20678711 68.44445038]
[-113.23638153 69.38630676]
[-103.78343201 61.54699707]
[-91.12657928 62.39756012]
[-82.25828552 72.02600861]
[-67.34045410 73.59394073]
[-52.42262650 75.16186523]
[-37.50479889 76.72978973]
[-22.58696938 78.29772186]
[-15.39619732 75.79060364]
[-7.08193016 80.25646210]
[7.75715494 82.44770813]
[22.63887596 84.32770538]
[37.55670547 85.89562988]
[52.47453308 87.46356201]
[56.34831238 77.40879822]
[62.31998062 68.43975830]
[70.10254669 60.98750687]
[79.32197571 55.41018295]
[89.53519440 51.97583771]
[100.25134277 50.84952545]
[110.95541382 52.08537292]
[121.13296509 55.62399292]
[130.29487610 61.29531097]
[138.00082397 68.82677460]
[143.88044739 77.85640717]
[158.14630127 73.22115326]
[172.41213989 68.58589935]
[182.97723389 56.04353714]
[199.07209778 59.18798065]
[204.13970947 74.78450012]
[192.96694946 86.78872681]
[177.04739380 82.85174561]
[162.78155518 87.48700714]
[148.51570129 92.12226105]
[147.85249329 111.22370148]
[139.95336914 128.62797546]
[150.67045593 139.12292480]
[161.38754272 149.61787415]
[172.10462952 160.11282349]
[182.82173157 170.60777283]
[198.83157349 174.15977478]
[203.50164795 189.87989807]
[192.02777100 201.59664917]
[176.21327209 197.25682068]
[172.32678223 181.32485962]
[161.60968018 170.82991028]
[150.89259338 160.33496094]
[140.17550659 149.84001160]
[129.45841980 139.34506226]
[113.67038727 147.21179199]
[96.12167358 148.99786377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[7 34]
[8 33]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[15 24]
[16 23]
[17 22]
[48 57]
[49 56]
[50 55]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
