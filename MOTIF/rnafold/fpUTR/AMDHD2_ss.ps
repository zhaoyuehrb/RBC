%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCGCGGUCUCAGCUCUCGGCUGGGGUUCGUCACUGGGCGCGGGAUUUGGCCGCCGCGGGGCUCCGGAGCCGCUCGCUCCCGACACGGCUCACG\
) } def
/len { sequence length } bind def

/coor [
[77.62351227 274.44174194]
[77.14273834 259.44946289]
[76.66196442 244.45715332]
[76.18119049 229.46485901]
[75.70041656 214.47256470]
[75.21964264 199.48028564]
[71.79499817 192.77081299]
[74.97151947 184.00143433]
[74.97151947 169.00143433]
[74.73110199 154.00335693]
[74.25032806 139.01106262]
[73.76955414 124.01877594]
[66.20025635 111.06864929]
[53.37311172 103.29276276]
[40.54597092 95.51686859]
[27.71882820 87.74098206]
[11.90675163 87.20357513]
[5.03407669 73.98934937]
[-7.79306507 66.21346283]
[-20.62020683 58.43757629]
[-33.44734955 50.66168594]
[-46.27449036 42.88579941]
[-59.22461319 35.31650162]
[-72.29439545 27.95573616]
[-85.36417389 20.59497261]
[-101.18534851 20.56464195]
[-108.47803497 7.57749081]
[-121.54781342 0.21672755]
[-135.59849548 6.80139017]
[-150.82971191 3.83665347]
[-161.38475037 -7.53748131]
[-163.20497131 -22.94742584]
[-155.59046936 -36.46774292]
[-141.46917725 -42.89959717]
[-126.27101898 -39.76980591]
[-115.83999634 -28.28183746]
[-114.18704987 -12.85305309]
[-101.11727142 -5.49228954]
[-86.23093414 -5.98844862]
[-78.00341034 7.52519274]
[-64.93363190 14.88595581]
[-51.86384964 22.24671936]
[-44.35099030 22.79630089]
[-38.49860001 30.05865669]
[-25.67145920 37.83454514]
[-12.84431744 45.61043549]
[-0.01717646 53.38632202]
[12.80996513 61.16221237]
[27.70455933 61.14343643]
[35.49471664 74.91384125]
[48.32185745 82.68972778]
[61.14899826 90.46561432]
[73.97614288 98.24150848]
[77.17161560 81.75795746]
[90.74998474 68.99002075]
[111.05983734 66.26817322]
[121.14434814 55.16400146]
[131.22886658 44.05983353]
[134.17630005 27.92773247]
[149.70968628 22.66981506]
[161.84962463 33.69497681]
[158.10755920 49.66147614]
[142.33303833 54.14434433]
[132.24851990 65.24851227]
[122.16400146 76.35268402]
[124.64109802 83.43180847]
[139.37959290 86.22045135]
[129.59527588 97.59005737]
[132.07237244 104.66918182]
[146.88009644 107.06318665]
[161.68783569 109.45718384]
[176.49555969 111.85118103]
[191.30328369 114.24517822]
[205.10162354 106.06071472]
[220.05195618 111.88026428]
[224.68566895 127.23957062]
[215.44816589 140.35627747]
[199.42567444 141.16839600]
[188.90928650 129.05290222]
[174.10156250 126.65890503]
[159.29383850 124.26490784]
[144.48609924 121.87091064]
[129.67837524 119.47691345]
[108.28092957 129.65650940]
[88.76184082 123.53800201]
[89.24261475 138.53028870]
[89.72338867 153.52258301]
[93.17934418 162.18565369]
[89.97151947 169.00143433]
[89.97151947 184.00143433]
[90.21193695 198.99951172]
[90.69271088 213.99179077]
[91.17348480 228.98408508]
[91.65425110 243.97637939]
[92.13502502 258.96868896]
[92.61579895 273.96096802]
[95.42275238 293.13833618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[8 90]
[9 89]
[10 87]
[11 86]
[12 85]
[13 53]
[14 52]
[15 51]
[16 50]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 42]
[24 41]
[25 40]
[27 38]
[28 37]
[56 65]
[57 64]
[58 63]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
