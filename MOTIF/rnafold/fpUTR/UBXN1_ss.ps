%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGACCCAAACAGAUCCGGCACUUCCGCUUCCCCUCGGCUUUCUUCUCGUCGGUGUUCCCGGCUGCUAUAGAGCCGGGUGAGAGAGCGAGCGCCCGUCGGCGGGUGUCGAGGGCGGGUUGCCUCGCGCUGACCCUUCCCGCCCUCCUUCUCGUCACACACCAGGUCCCCGCGGAAGCCGCGGUGUCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[36.25210953 609.92047119]
[29.40640831 623.36663818]
[19.31312752 634.58215332]
[6.66044426 642.80236816]
[-7.68895864 647.46679688]
[-22.75671577 648.25744629]
[-37.51548004 645.12036133]
[-50.95898056 638.26947021]
[-62.17061234 628.17187500]
[-70.38594818 615.51599121]
[-75.04485321 601.16479492]
[-75.82967377 586.09674072]
[-72.68690491 571.33917236]
[-65.83081818 557.89831543]
[-55.72887802 546.69061279]
[-43.06985092 538.48016357]
[-28.71685219 533.82678223]
[-13.64848900 533.04779053]
[-10.52981281 518.37561035]
[-7.41113806 503.70336914]
[-4.29246235 489.03115845]
[-1.17378712 474.35894775]
[1.94488823 459.68673706]
[5.06356335 445.01452637]
[8.18223858 430.34228516]
[-1.90485835 419.41580200]
[-3.64434814 404.46795654]
[3.83903575 391.20700073]
[17.85798836 384.82147217]
[20.97666359 370.14926147]
[24.09534073 355.47705078]
[27.21401596 340.80484009]
[30.33269119 326.13262939]
[33.45136642 311.46041870]
[27.12952995 303.41174316]
[26.27059174 292.99279785]
[31.39988136 283.63195801]
[41.03208542 278.54321289]
[44.62181854 263.97906494]
[48.21155548 249.41494751]
[38.48170090 238.16915894]
[37.22467041 223.17301941]
[45.13138199 210.16006470]
[59.34877777 204.22946167]
[62.93851089 189.66534424]
[66.52824402 175.10121155]
[53.68511581 182.85066223]
[38.84506989 180.66590881]
[28.78018188 169.54396057]
[28.08343315 154.56015015]
[37.07277679 142.55215454]
[51.64603806 138.99969482]
[65.15289307 145.52386475]
[71.42956543 159.14634705]
[76.63549042 145.07872009]
[81.84141541 131.01107788]
[87.04734039 116.94345093]
[92.25326538 102.87581635]
[87.39530182 102.76040649]
[82.50674438 101.32727814]
[77.86196136 98.57817078]
[66.24288940 89.09149170]
[54.62381363 79.60481262]
[43.00473785 70.11812592]
[31.38566399 60.63144684]
[19.76659012 51.14476776]
[4.43925619 54.24425888]
[-9.26968098 46.72102356]
[-14.88728046 32.12730789]
[-9.76108360 17.35381317]
[3.68847609 9.37613487]
[19.11092758 11.96108818]
[29.22426224 23.88813591]
[29.25327110 39.52569199]
[40.87234497 49.01237488]
[52.49142075 58.49905396]
[64.11049652 67.98573303]
[75.72956848 77.47241211]
[87.34864044 86.95909882]
[102.27861786 85.51139069]
[111.85858917 73.96910858]
[121.43855286 62.42682648]
[131.01852417 50.88454819]
[140.50520325 39.26547241]
[149.89797974 27.57035828]
[159.29075623 15.87524319]
[168.68353271 4.18012810]
[178.07630920 -7.51498699]
[174.87159729 -17.80827522]
[176.66876221 -28.29086113]
[182.94558716 -36.69624710]
[192.22595215 -41.26795197]
[193.67366028 -56.19792557]
[195.12136841 -71.12789917]
[196.56907654 -86.05787659]
[198.01678467 -100.98785400]
[199.46449280 -115.91782379]
[200.91220093 -130.84779358]
[193.63279724 -145.54277039]
[202.94331360 -159.04263306]
[219.26589966 -157.45988464]
[225.80928040 -142.42272949]
[215.84217834 -129.40008545]
[214.39447021 -114.47011566]
[212.94676208 -99.54014587]
[211.49905396 -84.61016846]
[210.05134583 -69.68019104]
[208.60363770 -54.75021744]
[207.15592957 -39.82024384]
[209.29992676 -38.64829636]
[211.30070496 -37.24575043]
[224.04272461 -45.16035461]
[236.78474426 -53.07495880]
[249.52676392 -60.98956299]
[262.26876831 -68.90416718]
[275.01080322 -76.81877136]
[287.75280762 -84.73337555]
[300.49484253 -92.64797974]
[313.23684692 -100.56258392]
[311.69183350 -115.70768738]
[316.85467529 -129.96363831]
[327.65100098 -140.52108765]
[341.90194702 -145.32431030]
[356.76385498 -143.47138977]
[369.29553223 -135.38299561]
[382.03756714 -143.29759216]
[387.07388306 -158.52963257]
[402.17218018 -163.95372009]
[415.75036621 -155.40896606]
[417.39236450 -139.45016479]
[405.83862305 -128.31954956]
[389.95217896 -130.55557251]
[377.21014404 -122.64096832]
[378.90689087 -107.82251740]
[373.98120117 -93.67871094]
[363.35955811 -83.03250885]
[349.11074829 -78.03337097]
[334.04321289 -79.72338104]
[321.15145874 -87.82056427]
[308.40945435 -79.90596008]
[295.66741943 -71.99135590]
[282.92541504 -64.07675171]
[270.18338013 -56.16214752]
[257.44137573 -48.24754333]
[244.69934082 -40.33293915]
[231.95732117 -32.41833496]
[219.21530151 -24.50373268]
[212.52748108 -2.89424753]
[189.77142334 1.87779081]
[180.37864685 13.57290649]
[170.98587036 25.26802063]
[161.59309387 36.96313858]
[152.20031738 48.65825272]
[150.46070862 55.85160828]
[142.56080627 60.46451569]
[132.98083496 72.00679779]
[123.40086365 83.54907227]
[113.82089996 95.09135437]
[106.32089996 108.08173370]
[101.11497498 122.14936829]
[95.90904999 136.21701050]
[90.70312500 150.28463745]
[85.49720001 164.35227966]
[81.09237671 178.69094849]
[77.50263977 193.25508118]
[73.91290283 207.81919861]
[83.74569702 219.67762756]
[84.69931793 234.87448120]
[76.61722565 247.56871033]
[62.77568054 253.00468445]
[59.18594742 267.56881714]
[55.59621048 282.13293457]
[62.08273315 301.21005249]
[48.12358093 314.57907104]
[45.00490570 329.25128174]
[41.88623047 343.92352295]
[38.76755524 358.59573364]
[35.64888000 373.26794434]
[32.53020477 387.94015503]
[42.73992157 399.47564697]
[44.18262482 414.63388062]
[36.51368332 427.58190918]
[22.85445213 433.46096802]
[19.73577690 448.13317871]
[16.61710167 462.80538940]
[13.49842644 477.47763062]
[10.37975121 492.14984131]
[7.26107597 506.82205200]
[4.14240074 521.49426270]
[1.02372539 536.16644287]
[14.47251034 543.00695801]
[25.69193649 553.09594727]
[33.91704178 565.74542236]
[38.58702850 580.09301758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 190]
[19 189]
[20 188]
[21 187]
[22 186]
[23 185]
[24 184]
[25 183]
[29 179]
[30 178]
[31 177]
[32 176]
[33 175]
[34 174]
[38 172]
[39 171]
[40 170]
[44 166]
[45 165]
[46 164]
[54 163]
[55 162]
[56 161]
[57 160]
[58 159]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[80 158]
[81 157]
[82 156]
[83 155]
[84 153]
[85 152]
[86 151]
[87 150]
[88 149]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
[111 147]
[112 146]
[113 145]
[114 144]
[115 143]
[116 142]
[117 141]
[118 140]
[119 139]
[125 133]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
