%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACUGUCUGGGACAGACGCUGCCCGGAUCCCUGCGGCUGCCUGCACUCUGGACCACGAGCUCUGAGAGCAGCAGGUUGAGGGCCGGUGGGCAGCAGCUCGGAGGCUCCGCGAGGUGCAGGAGACGCAGGC\
) } def
/len { sequence length } bind def

/coor [
[-64.11697388 319.91903687]
[-67.29753113 325.58502197]
[-71.94137573 330.07131958]
[-77.64141083 333.01712036]
[-83.90716553 334.19522095]
[-90.20692444 333.52941895]
[-96.01290131 331.09899902]
[-107.51621246 340.72570801]
[-119.01952362 350.35244751]
[-130.52282715 359.97918701]
[-142.02613831 369.60589600]
[-153.52944946 379.23263550]
[-165.03276062 388.85934448]
[-169.66322327 396.84637451]
[-176.92333984 398.57369995]
[-188.65081787 407.92605591]
[-200.37828064 417.27841187]
[-208.99198914 431.88116455]
[-225.40856934 427.64654541]
[-225.88398743 410.69924927]
[-209.73063660 405.55093384]
[-198.00315857 396.19857788]
[-186.27568054 386.84625244]
[-174.65948486 377.35604858]
[-163.15617371 367.72930908]
[-151.65286255 358.10260010]
[-140.14955139 348.47586060]
[-128.64624023 338.84912109]
[-117.14293671 329.22241211]
[-105.63962555 319.59567261]
[-100.75403595 296.33474731]
[-76.88556671 291.02343750]
[-67.12365723 279.63461304]
[-57.36174393 268.24581909]
[-47.59983063 256.85699463]
[-37.83791733 245.46818542]
[-28.07600594 234.07936096]
[-25.66775131 219.38073730]
[-10.81210136 213.93829346]
[-1.05018902 202.54948425]
[0.93325144 195.35510254]
[9.07928848 191.01048279]
[19.10746765 179.85540771]
[29.13564682 168.70033264]
[39.16382599 157.54527283]
[49.19200516 146.39019775]
[59.22018433 135.23512268]
[69.24835968 124.08005524]
[79.14409637 112.80732727]
[88.90601349 101.41851044]
[98.53273773 89.91519928]
[108.02293396 78.29899597]
[117.51313782 66.68280029]
[127.00333405 55.06659698]
[136.35568237 43.33912659]
[145.56887817 31.50201797]
[147.62860107 13.24795341]
[164.05751038 7.19581556]
[172.98855591 -4.85559464]
[181.91960144 -16.90700531]
[190.85063171 -28.95841408]
[199.78167725 -41.00982285]
[208.71272278 -53.06123352]
[217.50080872 -65.21728516]
[226.14471436 -77.47627258]
[234.78863525 -89.73526001]
[230.49118042 -100.94157410]
[232.16490173 -112.70468140]
[239.27194214 -122.07557678]
[249.92727661 -126.76254272]
[261.39749146 -125.69111633]
[270.61068726 -137.52822876]
[267.41442871 -150.67121887]
[272.32861328 -163.06327820]
[283.33657837 -170.23065186]
[296.26730347 -169.72657776]
[305.75747681 -181.34277344]
[315.24768066 -192.95896912]
[324.73788452 -204.57518005]
[330.07662964 -220.66661072]
[347.01708984 -219.99107361]
[351.05755615 -203.52561951]
[336.35409546 -195.08497620]
[326.86389160 -183.46878052]
[317.37368774 -171.85256958]
[307.88348389 -160.23637390]
[310.30435181 -143.63731384]
[299.80087280 -130.12921143]
[282.44778442 -128.31503296]
[273.23458862 -116.47792053]
[276.63885498 -98.56195831]
[265.75897217 -83.53357697]
[247.04762268 -81.09134674]
[238.40371704 -68.83235931]
[229.75979614 -56.57337189]
[228.46394348 -49.22396088]
[220.76412964 -44.13019180]
[211.83308411 -32.07878113]
[202.90205383 -20.02737236]
[193.97100830 -7.97596216]
[185.03996277 4.07544756]
[176.10891724 16.12685776]
[177.56805420 28.19522667]
[170.14398193 38.32416153]
[157.40597534 40.71520996]
[148.19279480 52.55231476]
[146.55131531 59.83232880]
[138.61953735 64.55679321]
[129.12933350 76.17299652]
[119.63913727 87.78919983]
[110.14894104 99.40540314]
[107.86207581 107.22151184]
[100.29482269 111.18041992]
[90.53291321 122.56923676]
[87.28022766 131.20947266]
[80.40343475 134.10823059]
[70.37525177 145.26330566]
[60.34707642 156.41838074]
[50.31889725 167.57344055]
[40.29071808 178.72851562]
[30.26253891 189.88359070]
[20.23435974 201.03866577]
[10.33862400 212.31138611]
[0.57671225 223.70021057]
[-2.52978110 239.21343994]
[-16.68719292 243.84127808]
[-26.44910622 255.23008728]
[-36.21101761 266.61889648]
[-45.97293091 278.00772095]
[-55.73484039 289.39654541]
[-65.49675751 300.78533936]
[-63.15297318 306.97625732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[15 23]
[16 22]
[17 21]
[32 131]
[33 130]
[34 129]
[35 128]
[36 127]
[37 126]
[39 124]
[40 123]
[42 122]
[43 121]
[44 120]
[45 119]
[46 118]
[47 117]
[48 116]
[49 114]
[50 113]
[51 111]
[52 110]
[53 109]
[54 108]
[55 106]
[56 105]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[64 95]
[65 94]
[66 93]
[71 90]
[72 89]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
