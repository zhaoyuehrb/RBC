%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCUGAGGCAGAGCUCGGGGGCUGUCGGUGGGGACCUUGCAGGAGGGCACCCCAAGCCCGCCCGGCCCGCCCAACCCAGCCCCUGCGCGCAGCCCGGGCCGAGUAGGACCCCGCGCGCCCCUCGCU\
) } def
/len { sequence length } bind def

/coor [
[161.16012573 278.25305176]
[162.92614746 263.35739136]
[174.56829834 253.89903259]
[189.51077271 255.22145081]
[181.29058838 242.67439270]
[173.07038879 230.12734985]
[164.85020447 217.58029175]
[156.63002014 205.03324890]
[150.26855469 201.12271118]
[148.36706543 192.08219910]
[140.45246887 179.34017944]
[132.53785706 166.59815979]
[117.69396973 165.70552063]
[106.08470154 156.13008118]
[102.29557037 141.38233948]
[107.98265076 127.06580353]
[100.06804657 114.32378387]
[87.83226776 107.55789185]
[87.18993378 93.59082031]
[79.27532959 80.84880066]
[71.36072540 68.10678101]
[63.44612122 55.36476517]
[55.53151703 42.62274551]
[47.61691666 29.88072586]
[39.70231247 17.13870621]
[31.78770828 4.39668703]
[23.87310410 -8.34533215]
[18.09302711 -11.88176346]
[15.44150829 -17.05294228]
[15.90120411 -21.89972878]
[8.61145306 -35.00925064]
[1.32170212 -48.11877060]
[-12.14710617 -56.41947937]
[-11.57019615 -71.30290985]
[-18.85994720 -84.41242981]
[-26.14969826 -97.52194977]
[-38.76523209 -97.39071655]
[-50.15641022 -102.64277649]
[-58.15573883 -112.21036530]
[-61.27049255 -124.21125793]
[-58.96102142 -136.31892395]
[-51.73306656 -146.21347046]
[-58.38093948 -159.65988159]
[-73.91838074 -169.45474243]
[-72.22456360 -186.87825012]
[-79.19541168 -200.16009521]
[-92.45970917 -208.78382874]
[-91.52333069 -223.64897156]
[-98.49417877 -236.93081665]
[-105.46501923 -250.21266174]
[-112.43586731 -263.49450684]
[-127.75160217 -266.65081787]
[-137.41468811 -278.94549561]
[-136.86250305 -294.57333374]
[-126.35579681 -306.15533447]
[-110.85549927 -308.22286987]
[-97.68037415 -299.79968262]
[-93.05131531 -284.86294556]
[-99.15402985 -270.46533203]
[-92.18318176 -257.18350220]
[-85.21233368 -243.90165710]
[-78.24148560 -230.61982727]
[-65.47579193 -222.94609070]
[-65.91356659 -207.13093567]
[-58.94272232 -193.84909058]
[-47.43679047 -189.91481018]
[-41.54356384 -178.82077026]
[-44.93453598 -166.30775452]
[-38.28666306 -152.86134338]
[-20.83343124 -150.75939941]
[-7.97001553 -138.54986572]
[-4.90778732 -120.92266846]
[-13.04017735 -104.81169891]
[-5.75042629 -91.70217896]
[1.53932476 -78.59265900]
[14.48672104 -71.22962952]
[14.43122292 -55.40851974]
[21.72097397 -42.29899979]
[29.01072502 -29.18947983]
[36.61512375 -16.25993538]
[44.52972794 -3.51791644]
[52.44432831 9.22410297]
[60.35893250 21.96612167]
[68.27353668 34.70814133]
[76.18814087 47.45016098]
[84.10274506 60.19217682]
[92.01734924 72.93419647]
[99.93195343 85.67621613]
[112.16773224 92.44210815]
[112.81006622 106.40917969]
[120.72467041 119.15119934]
[136.07887268 120.39810944]
[147.61982727 130.33087158]
[151.05838013 144.98147583]
[145.27987671 158.68356323]
[153.19448853 171.42558289]
[161.10908508 184.16760254]
[169.17707825 196.81304932]
[177.39726257 209.36010742]
[185.61744690 221.90716553]
[193.83763123 234.45420837]
[202.05781555 247.00126648]
[211.16525269 258.91992188]
[221.11210632 270.14758301]
[231.05894470 281.37524414]
[241.00578308 292.60290527]
[253.87373352 294.18087769]
[261.92645264 303.82254028]
[261.23144531 315.96264648]
[270.90408325 327.42736816]
[286.00808716 324.64077759]
[300.47644043 329.79464722]
[310.41723633 341.50256348]
[313.15649414 356.61523438]
[307.95730591 371.06735229]
[296.21826172 380.97140503]
[281.09710693 383.66326904]
[266.66134644 378.41882324]
[256.79412842 366.64877319]
[254.14967346 351.51925659]
[259.43936157 337.10000610]
[249.76672363 325.63525391]
[232.99078369 320.63372803]
[229.77812195 302.54974365]
[219.83128357 291.32208252]
[209.88444519 280.09442139]
[199.93759155 268.86676025]
[197.28857422 283.63101196]
[185.10437012 292.38003540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[10 97]
[11 96]
[12 95]
[16 91]
[17 90]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[30 79]
[31 78]
[32 77]
[34 75]
[35 74]
[36 73]
[42 69]
[43 68]
[45 65]
[46 64]
[48 62]
[49 61]
[50 60]
[51 59]
[103 127]
[104 126]
[105 125]
[106 124]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
