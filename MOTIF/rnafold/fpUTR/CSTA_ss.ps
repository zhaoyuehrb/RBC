%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGUUUGUGGAAAAUAAAGCAUUCUAUAGGCGGAGCUAGUGAACGCCUCUUUUAAAACACGAGUCUCCACACUUCCCUGUUCACUUUGGUUCCAGCAUCCUGUCCAGCAAAGAAGCAAUCAGCCAAA\
) } def
/len { sequence length } bind def

/coor [
[139.96028137 148.24530029]
[130.01344299 137.01763916]
[120.06660461 125.78998566]
[110.11976624 114.56232452]
[95.18978882 113.11460876]
[83.27112579 122.22205353]
[71.35246277 131.32948303]
[59.43379593 140.43692017]
[47.51512909 149.54435730]
[35.59646606 158.65179443]
[23.67780113 167.75923157]
[11.75913525 176.86666870]
[-0.15952997 185.97410583]
[-12.07819557 195.08155823]
[-10.72308636 210.44927979]
[-17.91174698 224.09944153]
[-31.35030174 231.67630005]
[-46.75055695 230.76211548]
[-59.19834518 221.64860535]
[-64.72162628 207.24385071]
[-61.55793381 192.14436340]
[-50.71680069 181.16831970]
[-35.65758514 177.81816101]
[-21.18563271 183.16288757]
[-9.26696777 174.05545044]
[2.65169764 164.94801331]
[14.57036304 155.84057617]
[26.48902893 146.73313904]
[38.40769196 137.62570190]
[50.32635880 128.51826477]
[62.24502182 119.41082001]
[74.16368866 110.30338287]
[86.08235168 101.19594574]
[92.56727600 87.67019653]
[92.20481873 72.67458344]
[91.84236145 57.67895889]
[91.47990417 42.68333817]
[91.11744690 27.68771935]
[90.75498962 12.69209862]
[90.03028870 -2.29038453]
[88.94377136 -17.25098228]
[87.85724640 -32.21157837]
[86.77072144 -47.17217636]
[85.68420410 -62.13277435]
[84.59767914 -77.09336853]
[83.51116180 -92.05397034]
[82.42463684 -107.01456451]
[75.04082489 -108.65283966]
[68.10873413 -111.65656281]
[61.87801361 -115.91407013]
[56.57240677 -121.26857758]
[52.38169098 -127.52400208]
[49.45489502 -134.45210266]
[47.89500809 -141.80084229]
[47.75535583 -149.30352783]
[49.03777695 -156.68850708]
[51.69268417 -163.68899536]
[55.62096786 -170.05271912]
[60.67768860 -175.55101013]
[66.67742920 -179.98699951]
[73.40110016 -183.20269775]
[80.60391235 -185.08457947]
[88.02431488 -185.56765747]
[91.26107788 -200.21427917]
[94.49784088 -214.86090088]
[97.73460388 -229.50750732]
[89.02379608 -242.69453430]
[92.27076721 -258.16168213]
[105.54914093 -266.73257446]
[120.98109436 -263.32226562]
[129.41113281 -249.95401001]
[125.83785248 -234.55897522]
[112.38121796 -226.27075195]
[109.14445496 -211.62413025]
[105.90769196 -196.97750854]
[102.67092896 -182.33090210]
[120.67316437 -166.79039001]
[126.38560486 -143.59295654]
[117.57856750 -121.26857758]
[97.38523102 -108.10108948]
[98.47175598 -93.14048767]
[99.55828094 -78.17989349]
[100.64479828 -63.21929550]
[101.73132324 -48.25869751]
[102.81784058 -33.29809952]
[103.90436554 -18.33750343]
[104.99089050 -3.37690639]
[108.03150940 0.42536590]
[108.64746094 6.20396852]
[105.75061035 12.32964230]
[106.11306763 27.32526207]
[106.47552490 42.32088470]
[106.83798218 57.31650162]
[107.20043945 72.31212616]
[107.56288910 87.30774689]
[121.34742737 104.61547852]
[131.29426575 115.84313965]
[141.24110413 127.07080078]
[151.18794250 138.29846191]
[172.11439514 138.04478455]
[186.38697815 152.95443726]
[185.25228882 173.27455139]
[196.23632812 183.48979187]
[207.22035217 193.70503235]
[220.57063293 190.05235291]
[233.87043762 193.47187805]
[243.64743042 202.95968628]
[247.40423584 215.94226074]
[244.25581360 228.97396851]
[254.98980713 239.45164490]
[270.78793335 239.01008606]
[282.21353149 249.92938232]
[282.48803711 265.73129272]
[271.44854736 277.04083252]
[255.64463806 277.14822388]
[244.45245361 265.98980713]
[244.51213074 250.18562317]
[233.77815247 239.70796204]
[217.74349976 243.00056458]
[202.74029541 236.05055237]
[194.72402954 221.39996338]
[197.00511169 204.68905640]
[186.02108765 194.47381592]
[175.03704834 184.25857544]
[166.03166199 187.52639771]
[156.39785767 187.23081970]
[147.50267029 183.37062073]
[140.62420654 176.45343018]
[136.76814270 167.42936707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[63 76]
[64 75]
[65 74]
[66 73]
[102 124]
[103 123]
[104 122]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
