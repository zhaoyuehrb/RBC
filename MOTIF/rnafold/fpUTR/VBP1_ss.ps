%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUUGUCACUUACCUGAGCGCAGCCAAUCAGCACCUAGAGGUUGGGCUACUUUCGGCCAAAGGAGAACGGGGACUUGUGGGGGACGCUCCCUGCGCACCA\
) } def
/len { sequence length } bind def

/coor [
[164.18910217 271.54235840]
[166.73474121 260.74691772]
[158.14151001 248.45236206]
[149.54827881 236.15779114]
[134.88301086 233.81991577]
[125.99311829 221.47389221]
[128.54473877 206.10746765]
[119.95149994 193.81289673]
[111.35826874 181.51832581]
[108.88057709 181.19458008]
[106.36917877 179.92033386]
[104.16307068 177.67726135]
[102.60227966 174.56111145]
[101.99121857 170.77938843]
[102.56384277 166.63742065]
[95.93806458 153.18011475]
[89.31228638 139.72280884]
[82.68650055 126.26551056]
[72.49189758 115.26232147]
[59.57844162 107.63063812]
[46.66498184 99.99895477]
[30.84787750 99.63874054]
[23.82757950 86.50235748]
[10.91412067 78.87067413]
[-1.99933767 71.23899078]
[-14.91279602 63.60730743]
[-27.82625580 55.97562408]
[-34.70020294 55.50891876]
[-39.48900986 52.06264496]
[-41.27403259 47.46440125]
[-53.69821167 39.05965805]
[-68.24024200 44.47344589]
[-83.17805481 40.27328491]
[-92.76776123 28.07422066]
[-93.32192230 12.56704426]
[-84.62744904 -0.28541946]
[-70.02754974 -5.54113626]
[-55.13618088 -1.17917526]
[-45.67937469 11.12320042]
[-45.29346848 26.63547707]
[-32.86928940 35.04021835]
[-20.19457245 43.06216431]
[-7.28111362 50.69384766]
[5.63234520 58.32553101]
[18.54580307 65.95721436]
[31.45926285 73.58889771]
[46.35271072 73.40324402]
[54.29666519 87.08549500]
[67.21012878 94.71717834]
[80.12358093 102.34886169]
[83.27489471 91.55698395]
[91.35388947 84.83567810]
[101.08184052 83.85957336]
[108.90956879 71.06400299]
[116.73728943 58.26842499]
[124.56501007 45.47285080]
[118.49180603 31.19364357]
[122.00438690 16.07936478]
[133.75209045 5.94176340]
[149.21769714 4.67895460]
[162.45436096 12.77651310]
[168.37231445 27.12076378]
[164.69596863 42.19604874]
[152.83898926 52.20561218]
[137.36059570 53.30057526]
[129.53286743 66.09614563]
[121.70513916 78.89172363]
[113.87741852 91.68730164]
[114.80619812 110.40336609]
[96.14380646 119.63972473]
[102.76959229 133.09703064]
[109.39537048 146.55433655]
[116.02114868 160.01164246]
[123.65283203 172.92509460]
[132.24606323 185.21966553]
[140.83929443 197.51423645]
[156.14685059 200.39805603]
[164.68647766 212.98890686]
[161.84284973 227.56455994]
[170.43608093 239.85911560]
[179.02931213 252.15368652]
[197.61712646 259.65435791]
[198.86289978 278.84854126]
[208.18968201 290.59634399]
[223.64457703 292.54162598]
[232.93589783 304.58843994]
[230.98614502 319.31033325]
[240.31292725 331.05816650]
[249.63969421 342.80596924]
[265.34967041 346.05804443]
[272.47329712 360.43283081]
[265.54589844 374.90316772]
[249.88162231 378.36868286]
[237.49673462 368.17092896]
[237.89187622 352.13275146]
[228.56509399 340.38491821]
[219.23832703 328.63711548]
[204.45780945 327.19763184]
[194.83178711 315.41653442]
[196.44186401 299.92312622]
[187.11508179 288.17532349]
[176.69258118 287.89233398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[7 76]
[8 75]
[9 74]
[15 73]
[16 72]
[17 71]
[18 70]
[19 50]
[20 49]
[21 48]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[30 41]
[31 40]
[53 68]
[54 67]
[55 66]
[56 65]
[83 101]
[84 100]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
