%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:46 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (IGSF6)
} def

/sequence { (\
CCUUCUGAAAAAAGAAAGCCAACUUUCCUUUCAAAUACACACCCCAACCCGCCCCGGCAUACACAGAA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 57 0.010280969 ubox
2 14 0.004913344 ubox
2 18 0.018101390 ubox
2 56 0.010334914 ubox
2 66 0.073139166 ubox
3 9 0.003778900 ubox
3 10 0.004706724 ubox
3 11 0.003263195 ubox
3 12 0.003997196 ubox
3 13 0.005402090 ubox
3 16 0.060860261 ubox
3 17 0.015237768 ubox
3 34 0.037674652 ubox
3 35 0.119859776 ubox
3 47 0.003670766 ubox
3 65 0.068438161 ubox
3 66 0.011494515 ubox
3 67 0.027266949 ubox
3 68 0.442057880 ubox
4 8 0.003511711 ubox
4 9 0.004706529 ubox
4 10 0.003572639 ubox
4 11 0.004136284 ubox
4 12 0.005204653 ubox
4 15 0.068591429 ubox
4 16 0.010830510 ubox
4 33 0.019982378 ubox
4 34 0.133584632 ubox
4 46 0.003920908 ubox
4 57 0.003609121 ubox
4 65 0.011919939 ubox
4 66 0.018259730 ubox
4 67 0.624938795 ubox
5 14 0.070269366 ubox
5 56 0.004649617 ubox
5 66 0.641206989 ubox
6 13 0.070036928 ubox
6 33 0.706510088 ubox
6 37 0.007585395 ubox
6 39 0.010175038 ubox
6 41 0.006141960 ubox
6 46 0.003635873 ubox
6 59 0.010694671 ubox
6 63 0.014865376 ubox
6 65 0.630705658 ubox
7 27 0.003504313 ubox
7 30 0.003226543 ubox
7 31 0.007055817 ubox
7 32 0.773760872 ubox
7 36 0.007157860 ubox
7 38 0.011510804 ubox
7 40 0.006860309 ubox
7 45 0.003748487 ubox
7 58 0.011725405 ubox
7 62 0.017373943 ubox
7 64 0.613637323 ubox
8 26 0.003724504 ubox
8 29 0.006393842 ubox
8 30 0.014667222 ubox
8 31 0.774431111 ubox
9 25 0.003511369 ubox
9 29 0.014747974 ubox
9 30 0.764940423 ubox
9 31 0.085825853 ubox
10 26 0.003347090 ubox
10 29 0.740346935 ubox
10 30 0.097628342 ubox
10 31 0.308639849 ubox
11 25 0.003542932 ubox
11 26 0.072758927 ubox
11 29 0.097416655 ubox
11 30 0.349450603 ubox
11 31 0.281337565 ubox
12 25 0.080485934 ubox
12 26 0.004767264 ubox
12 29 0.351544793 ubox
12 30 0.315461715 ubox
12 31 0.031552392 ubox
13 24 0.081193214 ubox
13 25 0.004534619 ubox
13 26 0.028198707 ubox
13 29 0.324368465 ubox
13 30 0.029740018 ubox
13 31 0.009401898 ubox
14 23 0.081248414 ubox
14 24 0.003597031 ubox
14 25 0.028488821 ubox
14 26 0.009969992 ubox
14 27 0.944364940 ubox
14 28 0.233155495 ubox
14 29 0.005414848 ubox
14 30 0.003293366 ubox
14 32 0.194972859 ubox
15 24 0.027997103 ubox
15 25 0.010163224 ubox
15 26 0.972562885 ubox
15 31 0.195126722 ubox
16 24 0.009200779 ubox
16 25 0.972240558 ubox
16 26 0.022419138 ubox
16 30 0.194905945 ubox
17 24 0.971506136 ubox
17 25 0.023164356 ubox
17 26 0.004055105 ubox
17 29 0.194746227 ubox
18 23 0.963832557 ubox
18 24 0.019279814 ubox
18 25 0.004213487 ubox
18 28 0.193177562 ubox
18 52 0.003705627 ubox
18 58 0.056132581 ubox
19 51 0.003706672 ubox
19 57 0.056201345 ubox
20 56 0.056144851 ubox
24 35 0.005107623 ubox
25 34 0.005869233 ubox
26 33 0.005501171 ubox
28 56 0.004181965 ubox
29 35 0.019116892 ubox
29 47 0.008762727 ubox
30 34 0.018454738 ubox
30 46 0.009306915 ubox
30 47 0.008347255 ubox
30 68 0.004273164 ubox
31 46 0.009133709 ubox
31 57 0.004570316 ubox
31 67 0.006114464 ubox
32 56 0.007181646 ubox
32 66 0.006391014 ubox
35 60 0.011735918 ubox
36 59 0.011581959 ubox
36 61 0.012191536 ubox
37 60 0.012607883 ubox
42 57 0.121381483 ubox
43 56 0.121578730 ubox
43 57 0.095180119 ubox
44 56 0.095809469 ubox
44 57 0.142195803 ubox
45 56 0.143449070 ubox
48 57 0.353472839 ubox
49 56 0.351087387 ubox
49 57 0.768874765 ubox
50 56 0.776963222 ubox
51 55 0.728450292 ubox
51 58 0.408851856 ubox
52 57 0.407949287 ubox
6 33 0.9500000 lbox
7 32 0.9500000 lbox
8 31 0.9500000 lbox
9 30 0.9500000 lbox
10 29 0.9500000 lbox
14 27 0.9500000 lbox
15 26 0.9500000 lbox
16 25 0.9500000 lbox
17 24 0.9500000 lbox
18 23 0.9500000 lbox
49 57 0.9500000 lbox
50 56 0.9500000 lbox
51 55 0.9500000 lbox
showpage
end
%%EOF
