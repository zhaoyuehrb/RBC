%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGGCCUCGCGCGUCGCGCCUGCGCCUGCGUCCCUGCGGCCGCCAGAGGGAGGGUUAAGGCGCCUGGGCGCACAGCGAGCCGGCUGAGGGGGCUGUGGCGGCCGCGGCGGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[-125.02597046 384.42092896]
[-132.05261230 387.24496460]
[-139.55543518 387.38003540]
[-146.54960632 384.85748291]
[-158.09712219 394.43115234]
[-169.64463806 404.00482178]
[-181.19213867 413.57846069]
[-179.86120605 430.37878418]
[-188.67839050 444.54678345]
[-204.03186035 450.65039062]
[-219.84999084 446.48718262]
[-231.13854980 456.36486816]
[-242.42710876 466.24252319]
[-253.71566772 476.12020874]
[-261.65414429 491.10076904]
[-278.24685669 487.61953735]
[-279.49499512 470.71160889]
[-263.59335327 464.83163452]
[-252.30477905 454.95397949]
[-241.01622009 445.07629395]
[-229.72766113 435.19863892]
[-232.16148376 421.99975586]
[-227.68904114 409.23025513]
[-217.38752747 400.29190063]
[-203.90180969 397.62231445]
[-190.76580811 402.03094482]
[-179.21829224 392.45730591]
[-167.67079163 382.88363647]
[-156.12327576 373.30996704]
[-151.03497314 351.45483398]
[-128.34100342 346.83834839]
[-118.16632080 335.81674194]
[-107.99164581 324.79510498]
[-97.81696320 313.77349854]
[-87.64228821 302.75189209]
[-77.61522675 291.59582520]
[-67.73755646 280.30725098]
[-57.85988235 269.01870728]
[-47.98221207 257.73013306]
[-38.10454178 246.44157410]
[-28.22687149 235.15301514]
[-18.34920120 223.86445618]
[-8.47153091 212.57588196]
[1.40614009 201.28732300]
[11.28381062 189.99876404]
[21.16148186 178.71020508]
[31.03915215 167.42164612]
[33.59733963 152.74836731]
[48.50777435 147.45785522]
[58.38544846 136.16929626]
[51.57751083 126.36763000]
[47.03812408 115.33065033]
[44.97995377 103.57545471]
[45.49942398 91.65274811]
[48.57220078 80.12110138]
[54.05432129 69.52075958]
[61.68895721 60.34835052]
[71.11843109 53.03358078]
[81.90098572 47.91915131]
[93.53145599 45.24465942]
[105.46497345 45.13540649]
[117.14246368 47.59651566]
[123.70207214 34.10683441]
[130.26168823 20.61715126]
[136.82128906 7.12746906]
[135.11889648 -9.18307686]
[148.55012512 -18.59233475]
[163.29808044 -11.42086792]
[164.19132996 4.95393467]
[150.31097412 13.68707848]
[143.75137329 27.17676163]
[137.19175720 40.66644287]
[130.63214111 54.15612411]
[140.51257324 62.60053253]
[148.14173889 73.12321472]
[162.11178589 67.66080475]
[176.08183289 62.19839478]
[190.05187988 56.73598480]
[196.15985107 42.15969849]
[210.81729126 36.24910355]
[225.32818604 42.51084900]
[231.08348083 57.22995377]
[224.66867065 71.67383575]
[209.88954163 77.27319336]
[195.51428223 70.70603180]
[181.54423523 76.16843414]
[167.57420349 81.63084412]
[153.60415649 87.09325409]
[154.83203125 105.78255463]
[149.73258972 123.80458069]
[138.89430237 139.07969666]
[123.56782532 149.84523010]
[105.52175140 154.85890198]
[86.83849335 153.54217529]
[69.67401123 146.04696655]
[59.79633713 157.33554077]
[56.53163147 172.81623840]
[42.32771301 177.29931641]
[32.45004272 188.58787537]
[22.57237244 199.87643433]
[12.69470215 211.16499329]
[2.81703091 222.45355225]
[-7.06063986 233.74212646]
[-16.93831062 245.03068542]
[-26.81598091 256.31924438]
[-36.69365311 267.60781860]
[-46.57132339 278.89636230]
[-56.44899368 290.18493652]
[-66.32666016 301.47348022]
[-69.68283081 310.11022949]
[-76.62067413 312.92657471]
[-86.79535675 323.94818115]
[-96.97003174 334.96978760]
[-107.14470673 345.99139404]
[-117.31938934 357.01303101]
[-115.24198151 364.58145142]
[-115.98954773 372.32495117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 29]
[5 28]
[6 27]
[7 26]
[11 21]
[12 20]
[13 19]
[14 18]
[31 115]
[32 114]
[33 113]
[34 112]
[35 111]
[36 109]
[37 108]
[38 107]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[47 98]
[49 96]
[50 95]
[62 73]
[63 72]
[64 71]
[65 70]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
