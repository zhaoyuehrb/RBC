%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGAGGCCGGCGGCGUGGGCCUUUUCUCUGCACGGAGCCGGCGCUUUUGCAGUUGCUUCUGCGGAAAGGUGGUAGUUAAGAAUUUGUAAAGGCCAGAGAACUACCUACGAUUCUCUCAGCGGGUAAUUGGCUGCUCCUAGUCUCUCUUCUCCUCAAGUUUGAA\
) } def
/len { sequence length } bind def

/coor [
[113.70660400 201.51425171]
[110.88472748 186.78208923]
[108.06285095 172.04991150]
[98.06938934 161.00546265]
[103.07238007 145.99610901]
[100.25051117 131.26393127]
[97.42863464 116.53175354]
[83.59775543 110.72599792]
[71.10603333 119.03002167]
[58.61431122 127.33404541]
[46.12258530 135.63807678]
[33.63086319 143.94209290]
[21.13913918 152.24612427]
[17.89892197 167.48222351]
[5.11224365 175.72573853]
[-9.39308071 172.54278564]
[-21.88480377 180.84681702]
[-34.37652969 189.15084839]
[-46.86825180 197.45486450]
[-44.28315735 212.46276855]
[-48.03211594 227.22302246]
[-57.46559143 239.17834473]
[-70.94918060 246.25737000]
[-86.14677429 247.23362732]
[-100.42529297 241.93798828]
[-111.31089783 231.28793335]
[-116.91758728 217.12867737]
[-116.27397919 201.91336060]
[-109.49156952 188.27815247]
[-97.74546814 178.58543396]
[-83.07073975 174.51451111]
[-68.00988007 176.77072144]
[-55.17227554 184.96315002]
[-42.68055344 176.65911865]
[-30.18882942 168.35508728]
[-17.69710541 160.05107117]
[-15.01768017 145.44435120]
[-2.46759009 136.84494019]
[12.83511448 139.75439453]
[25.32683754 131.45037842]
[37.81856155 123.14634705]
[50.31028366 114.84232330]
[62.80200958 106.53829956]
[75.29373169 98.23427582]
[78.56436920 96.55191040]
[81.91593933 95.42790222]
[85.27593994 94.86137390]
[72.94360352 86.32244110]
[60.61126328 77.78350067]
[48.27892303 69.24456787]
[35.94658279 60.70563889]
[23.61424065 52.16670227]
[11.28190136 43.62776947]
[-1.05043924 35.08883667]
[-16.55320930 38.16124344]
[-29.64119339 29.30233765]
[-32.54952240 13.76795101]
[-23.55273819 0.77435946]
[-7.98847151 -1.96956921]
[4.90927362 7.16408873]
[7.48849440 22.75649643]
[19.82083511 31.29542923]
[32.15317535 39.83436203]
[44.48551559 48.37329865]
[56.81785583 56.91223145]
[69.15019226 65.45116425]
[81.48253632 73.99009705]
[93.81487274 82.52902985]
[108.77191925 81.39459991]
[119.67530060 71.09333038]
[130.57868958 60.79206085]
[134.69187927 52.58556747]
[141.78724670 50.40143585]
[152.88362122 40.30834579]
[163.97999573 30.21525955]
[175.07637024 20.12217140]
[186.17276001 10.02908421]
[197.26913452 -0.06400413]
[208.36550903 -10.15709209]
[219.46188354 -20.25017929]
[230.55825806 -30.34326744]
[231.46343994 -45.89377975]
[242.86051941 -55.97153473]
[257.67999268 -55.01275253]
[268.77636719 -65.10584259]
[279.87274170 -75.19892883]
[290.96911621 -85.29201508]
[302.06549072 -95.38510132]
[313.16186523 -105.47819519]
[310.67642212 -114.16757202]
[311.17053223 -123.14823914]
[314.56127930 -131.43179321]
[320.44842529 -138.11587524]
[328.16162109 -142.48255920]
[336.83645630 -144.07530212]
[345.51156616 -142.74659729]
[353.23489380 -138.67112732]
[365.23529053 -147.67062378]
[377.23565674 -156.67010498]
[389.23605347 -165.66960144]
[401.23641968 -174.66909790]
[413.23681641 -183.66857910]
[411.32064819 -198.90748596]
[417.29547119 -213.05659485]
[429.55401611 -222.30987549]
[444.79885864 -224.17825317]
[458.92916870 -218.15911865]
[468.14398193 -205.87162781]
[469.96456909 -190.62101746]
[463.90118408 -176.50964355]
[451.58483887 -167.33338928]
[436.32861328 -165.56062317]
[422.23629761 -171.66819763]
[410.23593140 -162.66871643]
[398.23553467 -153.66921997]
[386.23516846 -144.66972351]
[374.23477173 -135.67024231]
[362.23440552 -126.67074585]
[361.29278564 -105.48086548]
[344.85433960 -91.63589478]
[323.25494385 -94.38181305]
[312.15856934 -84.28872681]
[301.06219482 -74.19564056]
[289.96582031 -64.10255432]
[278.86944580 -54.00946426]
[267.77307129 -43.91637421]
[267.32733154 -29.07262611]
[256.21780396 -18.67872620]
[240.65135193 -19.24689102]
[229.55497742 -9.15380287]
[218.45858765 0.93928474]
[207.36221313 11.03237247]
[196.26583862 21.12545967]
[185.16946411 31.21854782]
[174.07308960 41.31163788]
[162.97671509 51.40472412]
[151.88034058 61.49781036]
[140.87995911 71.69544983]
[129.97657776 81.99671936]
[119.07318878 92.29798889]
[132.21090698 85.05918121]
[147.14599609 86.45305634]
[158.71731567 95.99793243]
[162.92611694 110.39536285]
[158.31797791 124.66999054]
[146.48532104 133.88890076]
[131.51719666 134.86628723]
[118.58617401 127.26438904]
[112.16081238 113.70987701]
[114.98268890 128.44206238]
[117.80455780 143.17422485]
[127.99987030 155.27243042]
[122.79502869 169.22802734]
[125.61690521 183.96020508]
[128.43878174 198.69238281]
[143.10562134 203.06759644]
[154.05108643 213.76596069]
[158.76000977 228.32908630]
[156.15031433 243.41047668]
[146.82167053 255.54450989]
[132.91773987 261.94290161]
[117.63355255 261.13534546]
[104.48130035 253.30740356]
[96.48326111 240.25788879]
[95.47734070 224.98547363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[5 151]
[6 150]
[7 149]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[13 39]
[16 36]
[17 35]
[18 34]
[19 33]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[69 140]
[70 139]
[71 138]
[73 137]
[74 136]
[75 135]
[76 134]
[77 133]
[78 132]
[79 131]
[80 130]
[81 129]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[89 121]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
