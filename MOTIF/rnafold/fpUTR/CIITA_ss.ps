%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUAGUGAUGAGGCUAGUGAUGAGGCUGUGUGCUUCUGAGCUGGGCAUCCGAAGGCAUCCUUGGGGAAGCUGAGGGCACGAGGAGGGGCUGCCAGACUCCGGGAGCUGCUGCCUGGCUGGGAUUCCUACACA\
) } def
/len { sequence length } bind def

/coor [
[-4.19796610 335.67645264]
[5.93430567 346.73706055]
[11.17528915 360.79165649]
[10.75889778 375.78588867]
[4.74599743 389.52798462]
[-5.98449373 400.00921631]
[-19.86407661 405.69757080]
[-34.86394119 405.76150513]
[-48.79152298 400.19174194]
[-59.61099625 389.80236816]
[-65.74085236 376.11203003]
[-66.28508759 361.12191772]
[-61.16524124 347.02496338]
[-73.46371460 355.61260986]
[-85.76219177 364.20022583]
[-98.06066895 372.78787231]
[-98.21703339 388.30416870]
[-107.49079895 400.74511719]
[-122.31600189 405.32690430]
[-136.99206543 400.28775024]
[-145.87573242 387.56533813]
[-145.55105591 372.05166626]
[-136.14286804 359.71203613]
[-121.26883698 355.29135132]
[-106.64830780 360.48941040]
[-94.34983063 351.90176392]
[-82.05135345 343.31411743]
[-69.75287628 334.72650146]
[-59.02267075 324.24496460]
[-50.14908981 312.15118408]
[-41.27550507 300.05740356]
[-32.40192413 287.96362305]
[-23.52833939 275.86984253]
[-27.43864632 258.05603027]
[-16.98602486 242.72560120]
[1.65084028 239.75846863]
[9.94780731 227.26205444]
[18.24477577 214.76564026]
[18.83872604 199.88288879]
[32.91793060 192.66578674]
[41.21489716 180.16937256]
[49.51186371 167.67295837]
[57.80883408 155.17654419]
[66.10579681 142.68013000]
[74.40277100 130.18373108]
[82.69973755 117.68730927]
[90.99670410 105.19089508]
[85.57080841 100.10325623]
[83.87159729 91.00615692]
[88.30948639 80.77127075]
[88.30948639 65.77127075]
[75.11497498 58.03485489]
[67.61392975 44.82004547]
[67.73377228 29.72527695]
[75.34216309 16.80365562]
[88.30948639 9.47466278]
[88.30948639 -5.52533722]
[85.27129364 -11.56773949]
[85.74134827 -17.34996414]
[88.67761230 -21.22429848]
[89.38069916 -36.20781326]
[90.08377838 -51.19132614]
[90.78686523 -66.17484283]
[91.48994446 -81.15835571]
[92.19303131 -96.14186859]
[82.49980927 -108.92548370]
[86.59030151 -124.43830109]
[101.32664490 -130.78019714]
[115.40437317 -123.08623505]
[118.02425385 -107.25854492]
[107.17654419 -95.43878174]
[106.47345734 -80.45526886]
[105.77037811 -65.47175598]
[105.06729126 -50.48824310]
[104.36421204 -35.50473022]
[103.66112518 -20.52121544]
[103.30948639 -5.52533722]
[103.30948639 9.47466278]
[116.27680969 16.80365562]
[123.88520813 29.72527695]
[124.00504303 44.82004547]
[116.50399780 58.03485489]
[103.30948639 65.77127075]
[103.30948639 80.77127075]
[114.51918793 90.73834229]
[129.41624451 88.98400879]
[142.21679688 79.68580627]
[155.76164246 85.88148499]
[170.65869141 84.12715912]
[185.55575562 82.37282562]
[200.45281982 80.61849976]
[213.25335693 71.32028961]
[226.79820251 77.51596832]
[241.69526672 75.76164246]
[250.12507629 62.59075928]
[265.06414795 57.96921921]
[279.45867920 64.07917786]
[286.51202393 78.03569031]
[282.89379883 93.24892426]
[270.31243896 102.53565979]
[254.70846558 101.51097107]
[243.44958496 90.65869904]
[228.55253601 92.41303253]
[216.81752014 101.58575439]
[202.20713806 95.51555634]
[187.31008911 97.26988220]
[172.41302490 99.02421570]
[157.51597595 100.77854156]
[145.78096008 109.95126343]
[131.17057800 103.88107300]
[116.27352142 105.63539886]
[103.49311829 113.48786163]
[95.19614410 125.98427582]
[86.89917755 138.48069763]
[78.60221100 150.97709656]
[70.30524445 163.47351074]
[62.00827789 175.96992493]
[53.71131134 188.46633911]
[45.41434479 200.96275330]
[44.22693634 216.73933411]
[30.74118805 223.06262207]
[22.44421959 235.55902100]
[14.14725304 248.05543518]
[18.75639915 259.13473511]
[17.41438293 270.93798828]
[10.57571983 280.50369263]
[0.05918135 285.48910522]
[-11.43455982 284.74340820]
[-20.30814362 296.83718872]
[-29.18172646 308.93096924]
[-38.05530930 321.02474976]
[-46.92889404 333.11853027]
[-32.71366501 328.33029175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 28]
[14 27]
[15 26]
[16 25]
[29 132]
[30 131]
[31 130]
[32 129]
[33 128]
[36 123]
[37 122]
[38 121]
[40 119]
[41 118]
[42 117]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[50 84]
[51 83]
[56 78]
[57 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[85 111]
[86 110]
[88 108]
[89 107]
[90 106]
[91 105]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
