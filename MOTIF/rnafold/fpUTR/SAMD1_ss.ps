%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAGCAGCGCCGCCGCCGCUCCGCCGAGGCGCUGCGCCCCCCGGGGGGGGAGGCGGAGGAGGCGGGCAGCGGCGGAGGGAGGGGAGCCGGGGAGGGGGGCGCCGCGCUGGGAGGGAGGCAGCGCGCACGGUGCAGCCGGGCCGGGCGGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[101.88176727 174.69445801]
[90.24732208 174.07893372]
[78.85000610 171.66226196]
[67.96691895 167.50321960]
[57.86268234 161.70291138]
[48.78296280 154.40235901]
[40.94852448 145.77909851]
[34.54985428 136.04275513]
[29.74252701 125.43009186]
[26.64342499 114.19911957]
[25.32789993 102.62290955]
[25.82793999 90.98292542]
[11.19447899 87.68720245]
[-3.43898129 84.39147186]
[-18.07244301 81.09574127]
[-32.70590210 77.80001068]
[-47.33936310 74.50428772]
[-61.97282410 71.20855713]
[-77.13578033 75.72467804]
[-87.85204315 65.38007355]
[-102.48550415 62.08434677]
[-111.60406494 63.25326157]
[-117.37904358 58.57210541]
[-131.94317627 54.98237228]
[-146.50729370 51.39263535]
[-161.07142639 47.80290222]
[-175.63555908 44.21316528]
[-182.21821594 51.51510239]
[-190.97096252 55.86237717]
[-200.65078735 56.68530273]
[-209.90037537 53.91136932]
[-217.43847656 47.96941757]
[-222.23735046 39.72396469]
[-223.66281128 30.34961128]
[-237.89085388 25.59959221]
[-253.43098450 28.56863022]
[-263.05310059 17.19919968]
[-277.28115845 12.44917870]
[-291.50921631 7.69915915]
[-305.73724365 2.94913912]
[-320.01239014 -1.65737724]
[-334.33322144 -6.11992311]
[-348.65402222 -10.58246899]
[-362.97485352 -15.04501438]
[-378.84567261 -10.91597080]
[-390.16265869 -22.78432655]
[-385.28384399 -38.44093323]
[-369.22814941 -41.77962112]
[-358.51229858 -29.36582756]
[-344.19146729 -24.90328217]
[-329.87066650 -20.44073677]
[-315.54986572 -15.97819042]
[-308.18600464 -16.99661827]
[-300.98721313 -11.27890778]
[-286.75918579 -6.52888775]
[-272.53112793 -1.77886772]
[-258.30310059 2.97115231]
[-243.78065491 -0.33763942]
[-233.14083862 11.37154484]
[-218.91279602 16.12156487]
[-201.54798889 5.43227816]
[-181.62800598 10.99368286]
[-172.04582214 29.64903831]
[-157.48168945 33.23877335]
[-142.91757202 36.82850647]
[-128.35343933 40.41824341]
[-113.78931427 44.00797653]
[-99.18978119 47.45088577]
[-84.55632019 50.74661255]
[-70.44004822 45.99475479]
[-58.67709732 56.57509613]
[-44.04363632 59.87082672]
[-29.41017532 63.16655350]
[-14.77671337 66.46228027]
[-0.14325292 69.75801086]
[14.49020767 73.05374146]
[29.12366867 76.34946442]
[37.21232986 59.49678421]
[49.23100281 45.17928314]
[64.42741394 34.29312897]
[81.85038757 27.51970291]
[100.40938568 25.28297043]
[118.94275665 27.72293472]
[136.29046631 34.68687439]
[151.36666870 45.73889923]
[163.22773743 60.18723679]
[171.13124084 77.12754059]
[174.58248901 95.49948120]
[189.57032776 96.10346985]
[204.55815125 96.70745850]
[218.65869141 89.53211212]
[231.06408691 97.77561188]
[246.05192566 98.37960052]
[255.70388794 86.37353516]
[270.40286255 82.39942932]
[284.45718384 87.77901459]
[292.55197144 100.25349426]
[307.53979492 100.85748291]
[319.10256958 90.42005157]
[334.29376221 91.24608612]
[344.17300415 102.33374786]
[359.16085815 102.93773651]
[374.14868164 103.54172516]
[389.13650513 104.14571381]
[404.12435913 104.74970245]
[419.12435913 104.74970245]
[434.11218262 104.14571381]
[449.10000610 103.54172516]
[464.08786011 102.93773651]
[479.07568359 102.33374786]
[494.06353760 101.72975922]
[501.78598022 88.37434387]
[515.51348877 81.33446503]
[530.86553955 82.85651398]
[542.94348145 92.45481873]
[547.89318848 107.06658173]
[544.13531494 122.02925873]
[532.86889648 132.56829834]
[517.68902588 135.32075500]
[503.43960571 129.40829468]
[494.66751099 116.71759796]
[479.67968750 117.32158661]
[464.69183350 117.92557526]
[449.70401001 118.52956390]
[434.71618652 119.13355255]
[419.72833252 119.73754120]
[417.71520996 121.76600647]
[414.75442505 123.09537506]
[411.11712646 123.35194397]
[407.20751953 122.27032471]
[403.52035522 119.73754120]
[388.53253174 119.13355255]
[373.54467773 118.52956390]
[358.55685425 117.92557526]
[343.56903076 117.32158661]
[332.82962036 127.57834625]
[317.62121582 127.17932129]
[306.93582153 115.84531403]
[291.94796753 115.24132538]
[282.87567139 127.02399445]
[268.43405151 131.25523376]
[254.10252380 126.11123657]
[245.44793701 113.36743927]
[230.46009827 112.76345062]
[217.43159485 119.98200226]
[203.95416260 111.69529724]
[188.96633911 111.09130859]
[173.97850037 110.48731995]
[171.44885254 121.86009979]
[167.18200684 132.70137024]
[161.28172302 142.74755859]
[153.89143372 151.75437927]
[145.19084167 159.50285339]
[135.39149475 165.80459595]
[124.73163605 170.50636292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[20 69]
[21 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[34 60]
[35 59]
[37 57]
[38 56]
[39 55]
[40 54]
[41 52]
[42 51]
[43 50]
[44 49]
[88 148]
[89 147]
[90 146]
[92 144]
[93 143]
[97 139]
[98 138]
[101 135]
[102 134]
[103 133]
[104 132]
[105 131]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
