%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCAGAGAAAGAGUCUUUUGUGCAGCACCCUUUAAAGGGUGACUCGUCCCACUUGUGUUCUCUCUCCUGGUGCAGAGUUGCAAGCAAGUUUAUCGGAGUAUCGCC\
) } def
/len { sequence length } bind def

/coor [
[101.48574829 140.95715332]
[96.94113922 126.65962982]
[85.73576355 136.63157654]
[74.53038788 146.60351562]
[63.32501221 156.57543945]
[52.11963272 166.54737854]
[46.95428467 181.50163269]
[32.30296707 184.18272400]
[21.09759331 194.15466309]
[9.89221668 204.12660217]
[-1.31315970 214.09854126]
[-1.98177290 229.88867188]
[-13.67623043 240.51953125]
[-29.45841789 239.68402100]
[-39.96504593 227.87782288]
[-38.96271515 212.10534668]
[-27.04609108 201.72412109]
[-11.28509808 202.89315796]
[-0.07972158 192.92121887]
[11.12565422 182.94927979]
[22.33102989 172.97734070]
[26.69489670 158.73634338]
[42.14769745 155.34201050]
[53.35307312 145.37007141]
[64.55844879 135.39813232]
[75.76382446 125.42619324]
[86.96920013 115.45425415]
[85.22780609 100.55567932]
[72.02478790 93.43667603]
[58.82176590 86.31767273]
[45.61874390 79.19866180]
[32.41572189 72.07965851]
[19.21270180 64.96065521]
[2.84515548 65.97821808]
[-5.99313545 52.16457367]
[1.78990579 37.73002243]
[18.18775368 37.52358627]
[26.33170891 51.75763321]
[39.53472900 58.87664032]
[52.73775101 65.99564362]
[65.94077301 73.11464691]
[79.14379120 80.23365784]
[92.34680939 87.35266113]
[107.34680939 87.35266113]
[120.54983521 80.23365784]
[133.75285339 73.11464691]
[146.95587158 65.99564362]
[146.06555176 49.82281113]
[152.26031494 34.91955948]
[164.26612854 24.22010994]
[179.67027283 19.80737114]
[195.40615845 22.50757408]
[208.36373901 31.73609543]
[221.35412598 24.23609543]
[234.34451294 16.73609543]
[247.33488464 9.23609638]
[260.32525635 1.73609638]
[273.31564331 -5.76390362]
[271.95532227 -21.90399933]
[277.71401978 -36.98112106]
[289.40356445 -48.02522659]
[304.67285156 -52.88412476]
[320.48059082 -50.64273834]
[333.70111084 -41.79498672]
[346.46786499 -49.66963577]
[359.23461914 -57.54428482]
[372.00137329 -65.41893768]
[373.03948975 -80.90124512]
[383.00546265 -92.79490662]
[398.06713867 -96.52655792]
[412.43301392 -90.66131592]
[420.57913208 -77.45447540]
[419.37310791 -61.98433685]
[409.27868652 -50.19948959]
[394.17742920 -46.63144302]
[379.87600708 -52.65218353]
[367.10925293 -44.77753448]
[354.34249878 -36.90288544]
[341.57574463 -29.02823830]
[343.69046021 -15.23570824]
[340.35006714 -1.64292312]
[332.03176880 9.66849995]
[319.97775269 16.95318604]
[306.00967407 19.07128334]
[292.25341797 15.66670513]
[280.81564331 7.22647762]
[267.82525635 14.72647762]
[254.83488464 22.22647667]
[241.84451294 29.72647667]
[228.85412598 37.22647858]
[215.86373901 44.72647858]
[217.57640076 58.57467651]
[213.84207153 72.06455994]
[205.19830322 83.12926483]
[192.93751526 90.06027985]
[178.91374207 91.77122498]
[165.26234436 87.96798706]
[154.07487488 79.19866180]
[140.87185669 86.31767273]
[127.66883850 93.43667603]
[114.46582031 100.55567932]
[129.41709900 99.34773254]
[142.72180176 106.27484894]
[150.30627441 119.21609497]
[149.84829712 134.20910645]
[141.48811340 146.66329956]
[127.78542328 152.76547241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[8 21]
[9 20]
[10 19]
[11 18]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[44 101]
[45 100]
[46 99]
[47 98]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[64 79]
[65 78]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
