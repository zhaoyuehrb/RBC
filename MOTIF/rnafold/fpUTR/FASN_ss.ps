%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGACGGCAGCGGCCCCGGCCUCCCUCUCCGCCGCGCUUCAGCCUCCCGCUCCGCCGCGCUCCAGCCUCGCUCUCCGCCGCCCGCACCGCCGCCCGCGCCCUCACCAGAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[211.21179199 383.02603149]
[203.71044922 376.26980591]
[198.63218689 367.51019287]
[196.48390198 357.58496094]
[197.49127197 347.45001221]
[201.57510376 338.08715820]
[208.35731506 330.40905762]
[201.79771423 316.91937256]
[195.23809814 303.42971802]
[188.67849731 289.94003296]
[171.90980530 280.46505737]
[173.29940796 260.44009399]
[166.03115845 247.31864929]
[158.76289368 234.19720459]
[151.49462891 221.07575989]
[141.30976868 219.10003662]
[133.78572083 211.63935852]
[131.63565063 201.03808594]
[135.82621765 190.82617188]
[129.26660156 177.33648682]
[122.70700073 163.84681702]
[116.14738464 150.35713196]
[102.42643738 152.82699585]
[88.53684235 151.62533569]
[75.44395447 146.83566284]
[64.05773163 138.79087830]
[55.16952515 128.05007935]
[49.39707947 115.35978699]
[47.14158249 101.60197449]
[48.55979156 87.73281860]
[53.55314255 74.71624756]
[61.77459335 63.45691681]
[52.51172256 51.65864563]
[43.24885559 39.86037064]
[28.64112282 33.78379822]
[26.86750412 18.99516869]
[17.60463524 7.19689465]
[8.34176636 -4.60137892]
[-1.31477344 -4.47314310]
[-9.78766537 -8.81045628]
[-15.17058945 -16.49172592]
[-16.32105446 -25.66060638]
[-13.10087681 -34.17384338]
[-21.39287758 -46.67355347]
[-29.68487930 -59.17325974]
[-45.06067657 -63.75194931]
[-50.93371964 -78.68134308]
[-42.79871368 -92.50889587]
[-26.89613724 -94.62728882]
[-15.42508602 -83.41147614]
[-17.18516922 -67.46526337]
[-8.89316845 -54.96555328]
[-0.60116774 -42.46584320]
[18.62259865 -35.15346527]
[20.14003944 -13.86424828]
[29.40290833 -2.06597447]
[38.66577911 9.73229885]
[52.61096954 14.96498108]
[55.04712677 30.59750175]
[64.30999756 42.39577484]
[73.57286835 54.19404984]
[82.86637115 49.96983719]
[92.79834747 47.60997391]
[102.99869537 47.20240021]
[113.08729553 48.76230621]
[122.68820190 52.23155975]
[130.98020935 39.73184967]
[139.27220154 27.23214149]
[142.98957825 10.69075489]
[159.91358948 9.68374157]
[165.56628418 25.66758919]
[151.77191162 35.52414322]
[143.47991943 48.02384949]
[135.18791199 60.52355957]
[146.93009949 75.62492371]
[152.53152466 93.91574860]
[151.25923157 113.00269318]
[143.27970886 130.38824463]
[129.63706970 143.79751587]
[136.19668579 157.28720093]
[142.75628662 170.77688599]
[149.31590271 184.26657104]
[166.50109863 194.63954163]
[164.61607361 213.80749512]
[171.88433838 226.92893982]
[179.15260315 240.05038452]
[186.42085266 253.17182922]
[197.18597412 255.61236572]
[204.62519836 263.46524048]
[206.40554810 273.91049194]
[202.16816711 283.38040161]
[208.72778320 296.87008667]
[215.28739929 310.35977173]
[221.84700012 323.84945679]
[242.29716492 325.99710083]
[257.37417603 339.78009033]
[261.29122925 359.69107056]
[252.67413330 377.91400146]
[260.96612549 390.41369629]
[274.46237183 391.56924438]
[284.65344238 400.19311523]
[287.92846680 412.93380737]
[283.29891968 425.03817749]
[291.25521851 437.75421143]
[299.21154785 450.47021484]
[313.94152832 457.67849731]
[314.79388428 474.05548096]
[300.89175415 482.75393677]
[286.53646851 474.82562256]
[286.49551392 458.42654419]
[278.53921509 445.71051025]
[270.58288574 432.99450684]
[254.09780884 429.97277832]
[244.66148376 415.71722412]
[248.46643066 398.70568848]
[240.17442322 386.20599365]
[230.37503052 388.22814941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 94]
[8 93]
[9 92]
[10 91]
[12 87]
[13 86]
[14 85]
[15 84]
[19 82]
[20 81]
[21 80]
[22 79]
[32 61]
[33 60]
[34 59]
[36 57]
[37 56]
[38 55]
[43 53]
[44 52]
[45 51]
[66 74]
[67 73]
[68 72]
[98 116]
[99 115]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
