%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCCUCGGCGCCGCCGCCGCCGCCCGCGGGGCUGGGACCCGAUGCGGUUAGAGCCGCGGAGCCUGGAAGAGCCCCGAGCGUUUCUGCUUUGGGACAACCAUACAUCUAAUUCCUUAAAGUAGUUUUAUAUGUAAAACUUGCAAAGAAUCAGAACA\
) } def
/len { sequence length } bind def

/coor [
[77.06021881 110.30348969]
[62.16683960 112.08876038]
[47.27345657 113.87403107]
[34.49225616 123.19880676]
[20.93456841 117.03128052]
[6.04118729 118.81655121]
[-2.55706620 128.47853088]
[-15.03609467 129.63240051]
[-24.62474442 122.20191193]
[-39.55067444 123.69071960]
[-54.47660828 125.17952728]
[-67.44068146 134.24833679]
[-80.87306213 127.81247711]
[-95.79899597 129.30128479]
[-110.72492981 130.79008484]
[-125.65086365 132.27890015]
[-138.61492920 141.34771729]
[-152.04731750 134.91184998]
[-166.97325134 136.40065002]
[-183.49845886 149.98756409]
[-201.99900818 140.90557861]
[-216.80964661 143.28153992]
[-231.62026978 145.65751648]
[-246.43090820 148.03349304]
[-261.24151611 150.40945435]
[-267.84957886 162.18353271]
[-279.86465454 167.90257263]
[-292.78552246 165.67303467]
[-301.91360474 156.53388977]
[-316.76855469 158.61492920]
[-331.62350464 160.69595337]
[-346.47842407 162.77699280]
[-354.61700439 176.12980652]
[-369.45095825 181.07827759]
[-383.97619629 175.28588867]
[-391.33432007 161.48762512]
[-388.05102539 146.19860840]
[-375.67663574 136.63783264]
[-360.05392456 137.31962585]
[-348.55947876 147.92204285]
[-333.70452881 145.84101868]
[-318.84957886 143.75997925]
[-303.99462891 141.67895508]
[-294.47781372 127.84272766]
[-277.57015991 125.09027100]
[-263.61749268 135.59883118]
[-248.80686951 133.22285461]
[-233.99624634 130.84687805]
[-219.18560791 128.47091675]
[-204.37498474 126.09494781]
[-200.36360168 118.06776428]
[-192.97787476 112.73147583]
[-183.82369995 111.40407562]
[-174.96578979 114.51417542]
[-168.46205139 121.47472382]
[-153.53611755 119.98591614]
[-141.63964844 111.02359009]
[-127.13967133 117.35296631]
[-112.21373749 115.86415863]
[-97.28780365 114.37535095]
[-82.36186981 112.88654327]
[-70.46540070 103.92421722]
[-55.96541595 110.25359344]
[-41.03948212 108.76478577]
[-26.11355019 107.27597809]
[-12.46833992 96.27783203]
[4.25591469 103.92317200]
[19.14929581 102.13790131]
[30.86522293 92.94081879]
[45.48818588 98.98065186]
[60.38156509 97.19538116]
[75.27494812 95.41010284]
[87.03109741 74.32469940]
[114.13729095 70.86688232]
[117.39196777 56.22423935]
[120.64665222 41.58159637]
[116.08802795 26.43136406]
[126.40254211 15.68613148]
[129.65722656 1.04348719]
[132.91191101 -13.59915733]
[136.16659546 -28.24180222]
[139.42127991 -42.88444519]
[133.98513794 -58.35637283]
[144.87002563 -70.62223816]
[160.87847900 -67.06397247]
[165.54238892 -51.34201050]
[154.06391907 -39.62976456]
[150.80923462 -24.98711967]
[147.55455017 -10.34447575]
[144.29986572 4.29816914]
[141.04519653 18.94081497]
[145.83660889 33.04370499]
[135.28929138 44.83627701]
[132.03462219 59.47891998]
[128.77993774 74.12156677]
[138.65625000 62.83181381]
[144.90560913 49.19562912]
[156.97601318 40.29027939]
[171.84902954 38.34270096]
[185.80541992 43.83992767]
[195.35510254 55.40727615]
[198.11001587 70.15212250]
[193.38125610 84.38724518]
[182.35131836 94.55289459]
[167.77844238 98.10697174]
[153.30746460 94.16106415]
[138.31137085 94.50297546]
[151.63560486 101.39243317]
[164.95983887 108.28189087]
[180.77201843 107.74736786]
[188.52371216 120.46587372]
[201.84794617 127.35533905]
[215.17219543 134.24479675]
[228.49642944 141.13426208]
[237.61137390 142.30880737]
[242.01507568 148.29545593]
[255.19969177 155.44845581]
[265.49807739 151.74021912]
[275.91601562 154.28994751]
[283.03890991 162.01152039]
[284.67114258 172.16606140]
[297.56097412 179.83760071]
[310.45080566 187.50912476]
[323.41625977 195.05213928]
[336.45605469 202.46586609]
[349.49588013 209.87960815]
[362.53567505 217.29335022]
[375.57546997 224.70709229]
[388.61526489 232.12081909]
[405.00155640 231.47111511]
[413.52737427 245.47978210]
[405.42211914 259.73590088]
[389.02374268 259.57397461]
[381.20153809 245.16062927]
[368.16174316 237.74688721]
[355.12191772 230.33314514]
[342.08212280 222.91941833]
[329.04232788 215.50567627]
[316.00253296 208.09193420]
[308.59295654 207.51673889]
[302.77926636 200.39895630]
[289.88943481 192.72741699]
[276.99963379 185.05589294]
[257.73348999 186.27064514]
[248.04669189 168.63308716]
[234.86206055 161.48007202]
[221.60696411 154.45849609]
[208.28273010 147.56903076]
[194.95849609 140.67958069]
[181.63424683 133.79011536]
[166.77511597 134.81742859]
[158.07038879 121.60613251]
[144.74613953 114.71667480]
[131.42190552 107.82721710]
[122.86146545 120.84080505]
[109.73770905 127.83405304]
[95.57342529 127.68973541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[5 68]
[6 67]
[9 65]
[10 64]
[11 63]
[13 61]
[14 60]
[15 59]
[16 58]
[18 56]
[19 55]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[29 43]
[30 42]
[31 41]
[32 40]
[74 95]
[75 94]
[76 93]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[107 154]
[108 153]
[109 152]
[111 150]
[112 149]
[113 148]
[114 147]
[116 146]
[117 145]
[121 143]
[122 142]
[123 141]
[124 139]
[125 138]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
