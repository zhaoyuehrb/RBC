%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGCUCGCCGCGGGGCGCUGAGCAGGCCGGGACACCGCGGCCGAGGUUAUCGUUAGGCAUCUCCCAGGCGACCGGCUCCGCAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[203.00061035 424.37710571]
[197.44024658 410.44577026]
[191.87988281 396.51443481]
[186.35858154 391.35971069]
[186.37718201 382.00500488]
[181.30099487 367.89004517]
[175.96089172 362.54782104]
[176.30238342 353.19934082]
[171.71640015 338.91757202]
[167.13043213 324.63580322]
[162.54444885 310.35403442]
[157.95846558 296.07229614]
[147.24711609 290.16860962]
[143.38955688 278.13763428]
[149.01856995 266.37741089]
[144.92828369 251.94584656]
[140.83799744 237.51431274]
[136.74769592 223.08276367]
[121.88521576 210.91606140]
[126.52941895 191.44873047]
[121.45322418 177.33377075]
[116.37702942 163.21879578]
[104.78916931 153.86087036]
[107.39979553 138.25654602]
[102.32359314 124.14157104]
[97.24739838 110.02661133]
[83.07540131 111.39165497]
[69.80649567 96.42038727]
[61.07371521 84.22454834]
[52.34093475 72.02870941]
[43.60815430 59.83286667]
[34.87537384 47.63702393]
[25.93338585 35.59373474]
[16.78485680 23.70658112]
[2.33295369 14.84210968]
[6.85031319 -1.49893677]
[23.80327415 -1.68176961]
[28.67200851 14.55805111]
[37.82053757 26.44520378]
[44.53821945 29.89898682]
[47.07121658 38.90424347]
[55.80399704 51.10008621]
[64.53677368 63.29592896]
[73.26955414 75.49176788]
[82.00233459 87.68760681]
[96.82169342 85.36666870]
[101.40766907 71.08490753]
[95.38336945 56.21589661]
[103.37758636 42.30647659]
[119.25784302 40.02675629]
[130.84216309 51.12554550]
[129.24404907 67.08880615]
[115.68943024 75.67088318]
[111.10345459 89.95264435]
[111.36236572 104.95041656]
[116.43856049 119.06537628]
[121.51475525 133.18034363]
[133.46569824 143.54786682]
[130.49198914 158.14260864]
[135.56819153 172.25756836]
[140.64437866 186.37252808]
[150.97761536 190.55264282]
[157.07714844 199.61567688]
[157.05949402 210.31779480]
[151.17924500 218.99246216]
[155.26953125 233.42401123]
[159.35983276 247.85556030]
[163.45011902 262.28710938]
[176.93951416 274.67410278]
[172.24023438 291.48629761]
[176.82621765 305.76806641]
[181.41218567 320.04983521]
[185.99816895 334.33160400]
[190.58415222 348.61337280]
[195.41595459 362.81384277]
[200.49215698 376.92880249]
[205.81121826 390.95404053]
[211.37158203 404.88540649]
[216.93196106 418.81674194]
[232.16217041 419.81835938]
[245.44531250 427.33639526]
[254.14399719 439.87817383]
[256.53109741 454.95346069]
[252.13264465 469.56909180]
[241.82196045 480.82308960]
[227.64625549 486.48098755]
[212.42008972 485.41940308]
[199.16667175 477.84909058]
[190.51744080 465.27319336]
[188.18972778 450.18859863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 76]
[6 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[15 68]
[16 67]
[17 66]
[18 65]
[20 61]
[21 60]
[22 59]
[24 57]
[25 56]
[26 55]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 39]
[34 38]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
