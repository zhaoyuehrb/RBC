%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGCGGCUGUGGCCGGGGGAAGUGAAUGGUUUUACCCAGAGGGCCCUGCGCCGCCUUUCUCCGCUGGCAACGGCGCCGCUCCCCGCUCCUCCUCCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[60.23090744 396.28091431]
[50.15826797 408.24234009]
[34.74470901 410.87982178]
[21.26804924 402.94802856]
[16.09154892 388.19207764]
[21.65939713 373.57931519]
[35.34262466 366.00939941]
[38.04644775 351.25512695]
[40.75027466 336.50082397]
[43.45410156 321.74652100]
[46.15792465 306.99221802]
[44.23559189 299.72463989]
[49.17267609 291.83605957]
[52.32089233 277.17013550]
[44.04340363 264.84054565]
[47.02722168 249.92239380]
[60.01575089 241.32380676]
[63.16396713 226.65789795]
[66.31217957 211.99198914]
[69.46040344 197.32609558]
[72.60861969 182.66018677]
[75.75683594 167.99427795]
[74.05487823 160.67196655]
[79.22796631 152.93608093]
[82.81770325 138.37194824]
[86.40744019 123.80782318]
[77.72830200 115.98567200]
[73.09454346 105.25991821]
[73.34783173 93.57876587]
[60.28259277 86.20994568]
[47.21735382 78.84112549]
[32.06275940 83.32597351]
[18.21565628 75.70801544]
[13.89128113 60.50685501]
[21.65521049 46.74106598]
[36.90124130 42.57765198]
[50.58417892 50.48668671]
[54.58617020 65.77588654]
[67.65141296 73.14470673]
[80.71665192 80.51352692]
[89.55307007 74.65376282]
[99.95212555 72.58525848]
[110.35833740 74.61742401]
[119.60912323 62.80967331]
[128.85990906 51.00192261]
[138.11068726 39.19416809]
[136.15779114 28.28000832]
[140.53369141 18.33429337]
[149.52513123 12.63767433]
[159.94380188 12.91772366]
[169.89064026 1.69006264]
[179.83747864 -9.53759861]
[189.78431702 -20.76526070]
[199.73115540 -31.99292183]
[209.15922546 -43.65961075]
[218.04914856 -55.74137497]
[226.93908691 -67.82314301]
[220.70353699 -81.85929108]
[222.33741760 -97.13102722]
[231.40122986 -109.53034210]
[245.45684814 -115.72186279]
[260.72338867 -114.04012299]
[273.09423828 -104.93748474]
[279.24166870 -90.86252594]
[277.51208496 -75.60132599]
[268.37072754 -63.25908279]
[254.27655029 -57.15579224]
[239.02085876 -58.93321228]
[230.13092041 -46.85144424]
[221.24098206 -34.76967621]
[221.49105835 -31.09240723]
[219.86195374 -27.11892891]
[216.23977661 -23.78716278]
[210.95881653 -22.04608154]
[201.01197815 -10.81842041]
[191.06513977 0.40924129]
[181.11830139 11.63690281]
[171.17146301 22.86456299]
[168.88862610 41.96517944]
[149.91844177 48.44495010]
[140.66766357 60.25270462]
[131.41687012 72.06045532]
[122.16609192 83.86820984]
[127.29791260 102.52868652]
[118.82567596 119.92897797]
[100.97156525 127.39756012]
[97.38182831 141.96168518]
[93.79209900 156.52581787]
[90.42273712 171.14250183]
[87.27452087 185.80839539]
[84.12630463 200.47430420]
[80.97808838 215.14021301]
[77.82987213 229.80610657]
[74.68165588 244.47201538]
[82.99691772 257.64373779]
[79.59526062 272.47219849]
[66.98679352 280.31835938]
[63.83857727 294.98425293]
[60.91222382 309.69604492]
[58.20839691 324.45034790]
[55.50457382 339.20465088]
[52.80074692 353.95892334]
[50.09692383 368.71322632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[13 98]
[14 97]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[24 88]
[25 87]
[26 86]
[29 40]
[30 39]
[31 38]
[43 83]
[44 82]
[45 81]
[46 80]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[55 70]
[56 69]
[57 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
