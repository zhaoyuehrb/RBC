%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGUCCCCAGGCGCUAGCUGACUGGGGUGGUUGGGACCGUUAGCUCGGCAGGCUGGCAGGCUCCGGGGCGCUACUCCAUUGGCGGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[81.46221924 279.67242432]
[73.40085602 292.93118286]
[59.07283401 298.88830566]
[43.98756027 295.25317383]
[33.94563675 283.42355347]
[32.80838776 267.94821167]
[41.01310730 254.77770996]
[55.40491486 248.97637939]
[58.91891098 234.39378357]
[62.43290710 219.81120300]
[60.90773773 212.41958618]
[66.31969452 204.79953003]
[70.32420349 190.34394836]
[74.32871246 175.88836670]
[78.08850098 161.36721802]
[81.60249329 146.78462219]
[85.11649323 132.20204163]
[88.63048553 117.61945343]
[92.14448547 103.03686523]
[90.70762634 100.68743134]
[90.03542328 97.75909424]
[90.33869934 94.51622772]
[91.73408508 91.29428101]
[94.22160339 88.46604919]
[97.67423248 86.40132141]
[103.58956909 72.61695099]
[109.50491333 58.83258438]
[115.42024994 45.04821777]
[121.33558655 31.26384926]
[127.25092316 17.47948265]
[133.16625977 3.69511533]
[139.08160400 -10.08925152]
[144.99693298 -23.87361908]
[136.44746399 -41.83404922]
[143.44531250 -60.13679504]
[161.24919128 -67.58313751]
[165.73963928 -81.89522552]
[170.23008728 -96.20731354]
[174.47816467 -110.59320068]
[178.48266602 -125.04878998]
[182.24246216 -139.56994629]
[185.75645447 -154.15252686]
[189.27044678 -168.73512268]
[192.78445435 -183.31770325]
[196.29844666 -197.90028381]
[199.81243896 -212.48287964]
[203.32644653 -227.06546021]
[196.21583557 -241.44665527]
[203.15629578 -255.91073608]
[218.82371521 -259.36209106]
[231.19937134 -249.15313721]
[230.78971863 -233.11531067]
[217.90902710 -223.55146790]
[214.39503479 -208.96888733]
[210.88102722 -194.38629150]
[207.36703491 -179.80371094]
[203.85304260 -165.22111511]
[200.33903503 -150.63853455]
[196.82504272 -136.05595398]
[198.35021973 -128.66433716]
[192.93826294 -121.04428101]
[188.93374634 -106.58869934]
[190.20840454 -99.14978790]
[184.54217529 -91.71686554]
[180.05172729 -77.40477753]
[175.56127930 -63.09268951]
[182.81018066 -55.33322525]
[186.10379028 -45.15215683]
[184.75270081 -34.45466995]
[178.94358826 -25.27376938]
[169.71694946 -19.38393211]
[158.78131104 -17.95828056]
[152.86596680 -4.17391396]
[146.95062256 9.61045265]
[141.03529358 23.39482117]
[135.11994934 37.17918777]
[129.20462036 50.96355438]
[123.28927612 64.74792480]
[117.37393951 78.53228760]
[111.45860291 92.31665802]
[106.72707367 106.55086517]
[103.21307373 121.13344574]
[99.69908142 135.71603394]
[96.18508148 150.29861450]
[92.67108154 164.88121033]
[93.70498657 174.17021179]
[88.78429413 179.89286804]
[84.77978516 194.34846497]
[80.77528381 208.80404663]
[77.01549530 223.32519531]
[73.50149536 237.90779114]
[69.98750305 252.49037170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 92]
[9 91]
[10 90]
[12 89]
[13 88]
[14 87]
[15 85]
[16 84]
[17 83]
[18 82]
[19 81]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[33 72]
[36 66]
[37 65]
[38 64]
[39 62]
[40 61]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
