%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGUGGUGACCACCCCUUCCAGCAGGCAGGUUCCCAGCCCCAGCCAAGCAGUGUUUCUCCAGGAGCCGGACAGCCUCUCUGUCUCC\
) } def
/len { sequence length } bind def

/coor [
[151.90855408 208.22508240]
[136.90873718 208.29806519]
[126.02483368 197.97621155]
[125.30315399 182.99357605]
[135.14460754 171.67343140]
[150.08293152 170.30468750]
[140.35127258 158.88999939]
[130.61962891 147.47531128]
[116.47454071 142.80992126]
[113.40923309 127.28849792]
[103.67758179 115.87381744]
[87.78891754 110.78852081]
[84.70037079 94.39429474]
[74.57194519 83.33016205]
[64.44351196 72.26603699]
[48.89019394 71.41046143]
[38.77613831 60.04558182]
[39.68764496 45.22314453]
[29.55921364 34.15901566]
[19.43078423 23.09488869]
[8.27418709 23.22380257]
[-0.85510588 17.20474243]
[-4.96181822 7.31061316]
[-2.86664844 -2.96819878]
[-12.18939686 -14.71921444]
[-31.17963791 -21.01832771]
[-33.71052933 -40.05284882]
[-43.83895874 -51.11697388]
[-53.96738815 -62.18110275]
[-68.99275970 -67.13578033]
[-71.87947845 -81.74797058]
[-82.00791168 -92.81209564]
[-97.16278076 -100.41251373]
[-94.05467224 -117.07912445]
[-77.17898560 -118.70626831]
[-70.94378662 -102.94052887]
[-60.81535339 -91.87639618]
[-46.51443481 -87.71310425]
[-42.90326309 -72.30953217]
[-32.77483368 -61.24540710]
[-22.64640236 -50.18127823]
[-12.16558552 -50.62419510]
[-3.04560566 -45.00415421]
[1.45363021 -35.03771591]
[-0.43838134 -24.04196167]
[8.88436699 -12.29094696]
[27.27892685 -6.78108692]
[30.49491119 12.96645927]
[40.62334061 24.03058624]
[50.75177002 35.09471130]
[65.59687042 35.49309158]
[76.02614594 46.56940460]
[75.50763702 62.13760757]
[85.63607025 73.20173645]
[95.76449585 84.26586151]
[107.48280334 85.52553558]
[115.28626251 94.35794067]
[115.09226227 106.14216614]
[124.82391357 117.55684662]
[139.66506958 123.03870392]
[142.03430176 137.74366760]
[151.76596069 149.15835571]
[161.49760437 160.57302856]
[172.38125610 170.89514160]
[184.29498291 180.00906372]
[196.20869446 189.12297058]
[208.12240601 198.23687744]
[223.78430176 200.47644043]
[229.19177246 214.35478210]
[241.10549927 223.46870422]
[253.01921082 232.58261108]
[264.93292236 241.69651794]
[280.15441895 238.11311340]
[294.09475708 245.19836426]
[300.17175293 259.60684204]
[295.51605225 274.53527832]
[282.32592773 282.93493652]
[266.82934570 280.83978271]
[256.34329224 269.23901367]
[255.81901550 253.61022949]
[243.90530396 244.49632263]
[231.99159241 235.38241577]
[220.07786560 226.26850891]
[205.26812744 224.68083191]
[199.00849915 210.15058899]
[187.09478760 201.03668213]
[175.18106079 191.92277527]
[163.26734924 182.80886841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[10 59]
[11 58]
[13 55]
[14 54]
[15 53]
[18 50]
[19 49]
[20 48]
[24 46]
[25 45]
[27 41]
[28 40]
[29 39]
[31 37]
[32 36]
[64 88]
[65 87]
[66 86]
[67 85]
[69 83]
[70 82]
[71 81]
[72 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
