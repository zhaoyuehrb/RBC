%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCUGGGCUGGGGGAAGAGGCGUGGCGGCGCUGUGCGCGUGCACAAAAGAGAGCUGAGGGGCGGGGGCGCUGCGGCACAGCUGGUUUGAGCAACUGAACUGGAAACAAG\
) } def
/len { sequence length } bind def

/coor [
[99.26098633 171.58699036]
[111.81661224 163.37991333]
[126.60015869 160.84083557]
[141.17636108 164.38914490]
[131.89404297 152.60615540]
[122.61173248 140.82318115]
[113.32941437 129.04019165]
[104.04710388 117.25721741]
[90.44457245 118.45551300]
[77.90500641 108.95188904]
[65.74528503 117.73489380]
[53.58556747 126.51789856]
[54.52613068 141.91656494]
[46.97230148 155.36807251]
[33.33448410 162.58010864]
[17.96445274 161.25132751]
[5.76672745 151.80575562]
[0.63356090 137.25741577]
[4.20292616 122.24864197]
[15.33585262 111.56867981]
[30.47986412 108.62547302]
[44.80255890 114.35817719]
[56.96228027 105.57517242]
[69.12200165 96.79216766]
[74.23052216 82.68886566]
[70.51633453 68.15598297]
[59.60288620 56.70141220]
[63.94780731 42.45462418]
[60.23361588 27.92173958]
[56.51942825 13.38885212]
[52.80524063 -1.14403450]
[49.09104919 -15.67692184]
[45.37686157 -30.20980835]
[41.66267395 -44.74269485]
[37.94848251 -59.27558136]
[30.20901489 -72.12473297]
[19.09912491 -82.20294189]
[7.98923540 -92.28115082]
[-3.12065434 -102.35936737]
[-19.25442505 -105.29764557]
[-24.52115250 -120.82805634]
[-13.50288105 -132.97424316]
[2.46573758 -129.24124146]
[6.95755720 -113.46925354]
[18.06744766 -103.39104462]
[29.17733765 -93.31283569]
[40.28722763 -83.23461914]
[47.43923187 -85.49267578]
[42.52113724 -99.66350555]
[31.68026543 -110.03054047]
[35.08013535 -124.64015961]
[49.38436508 -129.15556335]
[60.55585861 -119.14568329]
[57.63271713 -104.43458557]
[61.74324417 -90.00878906]
[68.89524841 -92.26684570]
[72.20401764 -106.89736176]
[75.51278687 -121.52787781]
[70.13385773 -137.01979065]
[81.06398773 -149.24534607]
[97.05918884 -145.62794495]
[101.66497040 -129.88887024]
[90.14330292 -118.21910858]
[86.83453369 -103.58859253]
[83.52576447 -88.95807648]
[78.64343262 -76.44729614]
[70.69387054 -67.68930817]
[61.39506531 -63.23775864]
[52.48136902 -62.98977280]
[56.19556046 -48.45688248]
[59.90974808 -33.92399597]
[63.62393570 -19.39110947]
[67.33812714 -4.85822344]
[71.05231476 9.67466354]
[74.76650238 24.20755005]
[78.48069000 38.74043655]
[89.12847900 49.15551758]
[85.04922485 64.44179535]
[88.76341248 78.97467804]
[114.51697540 85.12823486]
[115.83007812 107.97489929]
[125.11239624 119.75788116]
[134.39471436 131.54086304]
[143.67703247 143.32383728]
[152.95933533 155.10682678]
[164.20825195 165.02963257]
[177.05740356 172.76910400]
[189.90655518 180.50856018]
[202.75569153 188.24803162]
[215.60484314 195.98750305]
[228.45399475 203.72697449]
[243.73065186 199.67736816]
[257.35421753 207.68823242]
[261.24206543 223.00685120]
[253.08763123 236.54496765]
[237.72875977 240.27064514]
[224.27761841 231.97351074]
[220.71452332 216.57611084]
[207.86537170 208.83665466]
[195.01623535 201.09718323]
[182.16708374 193.35771179]
[169.31793213 185.61824036]
[156.46878052 177.87878418]
[161.80789185 191.89640808]
[161.13415527 206.88127136]
[154.55862427 220.36320496]
[143.16523743 230.11978149]
[128.83213806 234.54270935]
[113.92205048 232.90286255]
[100.89279938 225.47059631]
[91.89218903 213.47105408]
[88.40390778 198.88229370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[10 24]
[11 23]
[12 22]
[25 79]
[26 78]
[28 76]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[36 47]
[37 46]
[38 45]
[39 44]
[56 65]
[57 64]
[58 63]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
