%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGGGUAGGCGGCGGCGGCGGCGGCUACGCGGAGCGGCAGGCGGUGGAGCGAGGCCGCGCGCGCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[47.10021210 218.81956482]
[37.96879196 230.71986389]
[28.83736801 242.62016296]
[19.70594788 254.52046204]
[22.01704979 270.15487671]
[12.52910995 282.79428101]
[-3.12884688 284.93994141]
[-15.66723251 275.31890869]
[-17.64724541 259.63912964]
[-7.89417744 247.20317078]
[7.80564737 245.38905334]
[16.93706894 233.48873901]
[26.06849098 221.58843994]
[35.19991302 209.68814087]
[43.25940704 197.03727722]
[50.18563461 183.73211670]
[57.11186600 170.42695618]
[64.03809357 157.12178040]
[70.96432495 143.81661987]
[77.59865570 130.36352539]
[83.93792725 116.76891327]
[90.27719879 103.17430115]
[90.59666443 94.84394073]
[97.20098877 89.13425446]
[104.12721252 75.82909393]
[111.05344391 62.52392960]
[117.97967529 49.21876526]
[124.90589905 35.91360092]
[124.41504669 20.10001183]
[137.15490723 12.38347244]
[144.08114624 -0.92169017]
[151.00737000 -14.22685242]
[144.25170898 -28.07124329]
[146.91233826 -43.06372452]
[157.76257324 -53.49139786]
[172.49612427 -55.50637436]
[179.42236328 -68.81153870]
[172.37841797 -82.63768768]
[174.83981323 -97.95830536]
[185.86006165 -108.88228607]
[201.20169067 -111.20915222]
[214.96549988 -104.04415894]
[221.85903931 -90.14241028]
[219.23159790 -74.84939575]
[208.09347534 -64.04560852]
[192.72752380 -61.88530731]
[185.80130005 -48.58014679]
[192.60154724 -35.35537338]
[190.28312683 -20.48631477]
[179.52809143 -9.70752239]
[164.31253052 -7.30062342]
[157.38630676 6.00453901]
[150.46006775 19.30970192]
[151.44635010 34.17161560]
[138.21105957 42.83983231]
[131.28483582 56.14499283]
[124.35860443 69.45015717]
[117.43238068 82.75531769]
[110.50614929 96.06047821]
[103.87181854 109.51357269]
[97.53254700 123.10819244]
[91.19326782 136.70280457]
[90.34092712 146.12176514]
[84.26948547 150.74285889]
[77.34325409 164.04801941]
[70.41703033 177.35317993]
[63.49079895 190.65834045]
[56.56456757 203.96350098]
[57.03905869 209.03981018]
[55.78726196 213.45063782]
[53.29951096 216.68434143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 62]
[21 61]
[22 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[30 53]
[31 52]
[32 51]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
