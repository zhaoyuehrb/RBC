%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGGGCGGUGCGGGGGCGUGGGCAGCACAAGCCGUGCGCUCCCGGGCUGCGAGGUCUGGCUAGGCUACGGGCCACGCGCCGCCGCCGCUGCCGCCGCCACUGUCCUCUUCGGAGGCGCGGGCCCGACGGAAACC\
) } def
/len { sequence length } bind def

/coor [
[232.46278381 214.14274597]
[233.29580688 207.09487915]
[221.30155945 198.08721924]
[209.30729675 189.07955933]
[197.31304932 180.07189941]
[185.31880188 171.06423950]
[170.49552917 169.60824585]
[164.10700989 155.13423157]
[152.11276245 146.12657166]
[140.11849976 137.11891174]
[128.12425232 128.11125183]
[116.12999725 119.10359192]
[104.13574982 110.09593201]
[96.27166748 115.70665741]
[83.87152100 114.02873993]
[69.03309631 116.22445679]
[54.19467545 118.42017365]
[39.35625076 120.61589050]
[24.51782608 122.81160736]
[9.67940235 125.00732422]
[-5.15902138 127.20304108]
[-19.99744606 129.39875793]
[-34.83586884 131.59448242]
[-48.94096375 143.37117004]
[-65.00066376 136.38610840]
[-79.78567505 138.91659546]
[-94.57068634 141.44709778]
[-102.30063629 155.04055786]
[-116.97773743 160.43653870]
[-131.67192078 155.08723450]
[-139.44503784 141.51841736]
[-136.62686157 126.13687134]
[-124.54804230 116.20529175]
[-108.91184235 116.41306305]
[-97.10118866 126.66208649]
[-82.31616974 124.13159180]
[-67.53115845 121.60109711]
[-60.24610519 111.87826538]
[-47.88724136 109.68921661]
[-37.03158569 116.75605774]
[-22.19316292 114.56034088]
[-7.35473824 112.36462402]
[7.48368549 110.16890717]
[22.32210922 107.97319031]
[37.16053391 105.77746582]
[51.99895859 103.58174896]
[66.83737946 101.38603210]
[81.67580414 99.19031525]
[90.68346405 87.19606781]
[88.65557098 72.33377838]
[86.62767029 57.47148895]
[82.33444214 49.31116867]
[84.72582245 42.25083542]
[83.03432465 27.34651184]
[81.34282684 12.44218826]
[72.09867859 -0.39745072]
[78.35141754 -13.91605091]
[76.65991974 -28.82037354]
[74.96842194 -43.72469711]
[73.27692413 -58.62901688]
[71.58542633 -73.53334045]
[69.89392853 -88.43766022]
[56.01266098 -95.16922760]
[47.99386978 -108.34885406]
[48.39632034 -123.77097321]
[57.09159088 -136.51443481]
[71.30505371 -142.51284790]
[86.50124359 -139.85214233]
[97.83111572 -129.38134766]
[101.67934418 -114.44164276]
[96.81797028 -99.80024719]
[84.79824829 -90.12916565]
[86.48974609 -75.22483826]
[88.18124390 -60.32051849]
[89.87274170 -45.41619492]
[91.56423950 -30.51187134]
[93.25573730 -15.60754871]
[102.37889862 -3.83396649]
[96.24714661 10.75069046]
[97.93864441 25.65501213]
[99.63014221 40.55933380]
[101.48995972 55.44359207]
[103.51786041 70.30587769]
[105.54575348 85.16816711]
[113.14340973 98.10167694]
[125.13765717 107.10933685]
[137.13191223 116.11699677]
[149.12615967 125.12465668]
[161.12040710 134.13230896]
[173.11466980 143.13996887]
[188.79585266 145.24024963]
[194.32646179 159.06999207]
[206.32070923 168.07763672]
[218.31495667 177.08529663]
[230.30921936 186.09295654]
[242.30346680 195.10061646]
[266.15704346 195.43087769]
[275.33700562 216.68260193]
[288.43893433 223.98602295]
[301.54083252 231.28944397]
[318.43826294 222.49424744]
[337.09280396 225.53591919]
[350.11489868 239.02957153]
[352.45401001 257.48587036]
[366.02062988 263.88482666]
[379.58728027 270.28381348]
[393.15390015 276.68276978]
[406.79196167 282.92800903]
[420.49975586 289.01870728]
[434.20751953 295.10943604]
[447.91528320 301.20016479]
[464.15747070 298.93655396]
[474.02410889 312.03546143]
[467.36526489 327.02185059]
[451.03097534 328.47900391]
[441.82455444 314.90792847]
[428.11679077 308.81723022]
[414.40902710 302.72650146]
[400.70123291 296.63577271]
[393.24862671 296.79571533]
[386.75494385 290.24938965]
[373.18832397 283.85043335]
[359.62167358 277.45147705]
[346.05505371 271.05252075]
[337.34750366 278.24975586]
[326.52185059 281.65496826]
[315.15924072 280.73007202]
[304.93466187 275.57238770]
[297.36996460 266.90615845]
[293.60742188 255.98086548]
[294.23742676 244.39135742]
[281.13549805 237.08792114]
[268.03359985 229.78450012]
[262.32864380 233.36094666]
[255.73585510 234.96562195]
[248.92187500 234.40252686]
[242.58639526 231.69659424]
[237.39031982 227.09446716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[25 37]
[26 36]
[27 35]
[49 84]
[50 83]
[51 82]
[53 81]
[54 80]
[55 79]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[98 133]
[99 132]
[100 131]
[104 124]
[105 123]
[106 122]
[107 121]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
