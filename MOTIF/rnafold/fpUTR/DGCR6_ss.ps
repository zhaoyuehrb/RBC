%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGAGGCGCGCCGCGAUCGGGGACUGUCCUAAGACGGGCGGGGCGCGCUGCGCUAGGGACUGUCAUAAAAGGGGCGGGACGCGCCGCGGUCGGGAUGACGUGAGCUGGGGGCGCUCGUCGCUGCAGCCGGCGGCUAGCGGGCGUCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-128.50885010 130.75814819]
[-133.91488647 129.22512817]
[-147.60551453 135.35430908]
[-161.29612732 141.48347473]
[-170.73011780 154.18429565]
[-185.50794983 152.32290649]
[-199.19857788 158.45207214]
[-212.88920593 164.58125305]
[-226.57983398 170.71041870]
[-240.27046204 176.83959961]
[-253.96109009 182.96876526]
[-267.65170288 189.09794617]
[-281.34234619 195.22711182]
[-290.77630615 207.92793274]
[-305.55416870 206.06654358]
[-319.24478149 212.19570923]
[-324.95443726 226.68838501]
[-338.92599487 232.70921326]
[-352.70733643 227.17662048]
[-366.39797974 233.30578613]
[-379.82543945 239.99186707]
[-392.96707153 247.22357178]
[-406.10870361 254.45527649]
[-419.25033569 261.68698120]
[-430.21209717 274.62048340]
[-445.67468262 267.66744995]
[-443.27383423 250.88435364]
[-426.48202515 248.54534912]
[-413.34039307 241.31364441]
[-400.19876099 234.08193970]
[-387.05712891 226.85023499]
[-386.16247559 224.13166809]
[-384.10354614 221.61570740]
[-380.95642090 219.76033020]
[-376.96600342 218.98570251]
[-372.52716064 219.61515808]
[-358.83651733 213.48599243]
[-353.78381348 199.52154541]
[-339.98687744 193.11065674]
[-325.37396240 198.50508118]
[-311.68331909 192.37591553]
[-303.22857666 180.11351013]
[-287.47149658 181.53649902]
[-273.78088379 175.40731812]
[-260.09027100 169.27815247]
[-246.39962769 163.14897156]
[-232.70899963 157.01979065]
[-219.01838684 150.89062500]
[-205.32775879 144.76144409]
[-191.63713074 138.63227844]
[-183.18238831 126.36986542]
[-167.42530823 127.79285431]
[-153.73468018 121.66368103]
[-140.04405212 115.53450775]
[-154.93658447 113.74214935]
[-168.68188477 107.73658752]
[-180.11512756 98.02674866]
[-188.26741028 85.43547058]
[-192.44790649 71.02979279]
[-192.30232239 56.03050232]
[-187.84300232 41.70868301]
[-179.44784546 29.27802277]
[-167.82827759 19.79193497]
[-153.96899414 14.05430508]
[-139.04447937 12.55135918]
[-124.31948853 15.41046333]
[-111.04186249 22.38932610]
[-100.33678436 32.89653397]
[-93.11145782 46.04167175]
[-89.97817230 60.71076965]
[-91.20245361 75.66072845]
[-96.68055725 89.62461853]
[-105.94824219 101.41911316]
[-118.22362518 110.04644775]
[-103.26234436 108.96937561]
[-88.30106354 107.89231110]
[-73.33978271 106.81523895]
[-58.39035034 105.58462524]
[-43.45433807 104.20059967]
[-28.51832390 102.81657410]
[-13.58231163 101.43254852]
[1.35370088 100.04852295]
[16.28971291 98.66449738]
[22.69937325 94.89244080]
[31.54610443 97.40862274]
[46.50738525 96.33155060]
[61.46866608 95.25447845]
[76.42994690 94.17740631]
[82.33206177 68.74073792]
[114.03508759 54.58423996]
[124.36598969 43.70892715]
[134.69689941 32.83361053]
[135.72422791 16.82348633]
[148.96388245 7.76307726]
[164.25953674 12.60275650]
[169.87767029 27.62993622]
[161.50852966 41.31705093]
[145.57220459 43.16451645]
[135.24130249 54.03982925]
[124.91040039 64.91514587]
[128.52626038 71.48596191]
[135.75796509 84.62758636]
[139.37380981 91.19840240]
[154.08932495 88.29093170]
[168.80485535 85.38346100]
[183.52037048 82.47599030]
[190.90045166 68.68945312]
[205.43487549 62.92018890]
[220.26095581 67.89226532]
[228.37825012 81.25801849]
[225.95404053 96.70655823]
[214.13294983 106.94354248]
[198.49653625 107.13539124]
[186.42785645 97.19151306]
[171.71232605 100.09898376]
[156.99681091 103.00645447]
[142.28128052 105.91392517]
[140.13270569 120.75925446]
[153.42004395 127.71960449]
[166.70738220 134.67996216]
[179.99472046 141.64031982]
[193.28207397 148.60067749]
[206.56941223 155.56103516]
[219.85675049 162.52139282]
[236.21093750 161.30786133]
[245.21405029 175.01464844]
[237.60444641 189.54138184]
[221.21025085 189.94421387]
[212.89639282 175.80873108]
[199.60905457 168.84837341]
[186.32171631 161.88801575]
[173.03437805 154.92765808]
[159.74702454 147.96730042]
[146.45968628 141.00694275]
[133.17234802 134.04658508]
[104.76126862 139.49690247]
[83.73960876 127.59650421]
[77.50701904 109.13868713]
[62.54573441 110.21575928]
[47.58445358 111.29283142]
[32.62317276 112.36990356]
[17.67373848 113.60050964]
[2.73772621 114.98453522]
[-12.19828606 116.36856079]
[-27.13429832 117.75258636]
[-42.07031250 119.13661194]
[-57.00632477 120.52063751]
[-65.32249451 124.44963837]
[-72.26271820 121.77651978]
[-87.22399902 122.85359192]
[-102.18527222 123.93065643]
[-117.14655304 125.00772858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[15 41]
[16 40]
[19 37]
[20 36]
[21 31]
[22 30]
[23 29]
[24 28]
[74 152]
[75 151]
[76 150]
[77 149]
[78 147]
[79 146]
[80 145]
[81 144]
[82 143]
[83 142]
[85 141]
[86 140]
[87 139]
[88 138]
[90 100]
[91 99]
[92 98]
[103 117]
[104 116]
[105 115]
[106 114]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
