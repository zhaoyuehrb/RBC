%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCCUUUCUCUGUUCGCGAUGUGACGUAACGCGCCUGCGGACUGGGCCCAGCUUGUCCUCUAUGACUUACCCAGAAGGCAACGCUUCUCUUUCUGGUCAAA\
) } def
/len { sequence length } bind def

/coor [
[67.71353149 103.19499969]
[52.84928513 101.18149567]
[37.98503876 99.16799927]
[23.06721115 97.60007477]
[8.10915375 96.47911835]
[-6.84890318 95.35816956]
[-21.80695915 94.23722076]
[-36.76501846 93.11626434]
[-45.97549820 103.07783508]
[-59.06207657 105.82341766]
[-71.14090729 100.55978394]
[-77.83750916 89.44027710]
[-92.75534058 87.87234497]
[-107.67316437 86.30442047]
[-122.59099579 84.73649597]
[-137.50881958 83.16856384]
[-149.71975708 92.83970642]
[-164.82621765 91.03710175]
[-173.97091675 79.33624268]
[-188.88874817 77.76831818]
[-203.80657959 76.20039368]
[-212.83602905 78.43948364]
[-219.14485168 74.35589600]
[-234.00909424 72.34239960]
[-248.87335205 70.32889557]
[-261.29421997 80.10118103]
[-276.97702026 78.14542389]
[-286.61743164 65.62193298]
[-284.49597168 49.96067429]
[-271.87127686 40.45319748]
[-256.23330688 42.74011993]
[-246.85984802 55.46465302]
[-231.99560547 57.47814941]
[-217.13134766 59.49164963]
[-202.23864746 61.28256226]
[-187.32081604 62.85049057]
[-172.40299988 64.41841888]
[-161.02537537 54.87454605]
[-145.87423706 56.25213623]
[-135.94090271 68.25074005]
[-121.02307129 69.81866455]
[-106.10523987 71.38658905]
[-91.18740845 72.95452118]
[-76.26958466 74.52244568]
[-63.75201797 63.40271759]
[-46.72432327 64.72357178]
[-35.64406586 78.15821075]
[-20.68600845 79.27915955]
[-5.72795153 80.40011597]
[9.23010540 81.52106476]
[24.18816185 82.64201355]
[28.43742752 80.14887238]
[34.32316208 80.41595459]
[39.99853897 84.30375671]
[54.86278534 86.31725311]
[69.72702789 88.33074951]
[87.69634247 69.97927094]
[113.37628174 70.44159698]
[122.55214691 58.57553482]
[131.72801208 46.70946884]
[129.47540283 31.06653786]
[139.01054382 18.46270752]
[154.67642212 16.37560463]
[167.17872620 26.04347229]
[169.10008240 41.73053741]
[159.30058289 54.12993622]
[143.59408569 55.88533401]
[134.41821289 67.75139618]
[125.24234772 79.61746216]
[128.51388550 84.52155304]
[130.84400940 89.93666840]
[132.15580750 95.68402863]
[132.40597534 101.57389069]
[131.58622742 107.41178131]
[145.00187683 114.12148285]
[158.41754150 120.83117676]
[171.83320618 127.54087830]
[185.24887085 134.25057983]
[198.66453552 140.96026611]
[212.08018494 147.66996765]
[225.49584961 154.37966919]
[238.26959229 145.85165405]
[253.59701538 144.86904907]
[267.35513306 151.69619751]
[275.84307861 164.49661255]
[276.77761841 179.82704163]
[269.90737915 193.56369019]
[257.08041382 202.01145935]
[241.74713135 202.89794922]
[228.03208923 195.98469543]
[219.62457275 183.13131714]
[218.78614807 167.79533386]
[205.37049866 161.08563232]
[191.95483398 154.37593079]
[178.53916931 147.66622925]
[165.12350464 140.95654297]
[151.70785522 134.24684143]
[138.29219055 127.53713989]
[124.87652588 120.82744598]
[116.64256287 127.85047913]
[106.55684662 131.77470398]
[95.74158478 132.16348267]
[85.40013123 128.97357178]
[76.68315125 122.55989075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[19 37]
[20 36]
[21 35]
[23 34]
[24 33]
[25 32]
[58 69]
[59 68]
[60 67]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
