%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUGAGCGGUCUCUGAGGACCUGGUGAGCAGAUUGUUGCACCAUUAGAAGCUAGGUUGAUCCACAGACAG\
) } def
/len { sequence length } bind def

/coor [
[118.59862518 207.46748352]
[124.26728058 193.44174194]
[133.99424744 181.85546875]
[126.03328705 169.14236450]
[118.07234192 156.42924500]
[111.65740967 152.30751038]
[110.05604553 142.99346924]
[102.64940643 129.94963074]
[95.24277496 116.90578461]
[81.74831390 110.35601807]
[66.91815186 112.60684967]
[52.08798599 114.85768127]
[37.25782013 117.10851288]
[22.42765617 119.35934448]
[9.96154022 130.01429749]
[-5.40664339 124.29145050]
[-7.86742401 108.07798004]
[5.11063862 98.05290985]
[20.17682648 104.52918243]
[35.00698853 102.27835083]
[49.83715439 100.02751923]
[64.66732025 97.77668762]
[79.49748230 95.52585602]
[88.26195526 83.35276794]
[85.69255829 68.57447052]
[83.12316132 53.79616547]
[80.55376434 39.01786423]
[77.98436737 24.23956299]
[75.09759521 9.51996613]
[71.89477539 -5.13411140]
[68.69196320 -19.78818893]
[65.48915100 -34.44226456]
[56.20026398 -48.62510300]
[67.25740814 -61.47718048]
[82.66814423 -54.40995789]
[80.14322662 -37.64508057]
[83.34603882 -22.99100304]
[86.54885864 -8.33692455]
[89.75167084 6.31715250]
[94.39897156 12.36220264]
[92.76266479 21.67016602]
[95.33206177 36.44846725]
[97.90145874 51.22676849]
[100.47085571 66.00507355]
[103.04025269 80.78337097]
[108.54570770 83.61791229]
[112.61011505 87.86812592]
[114.93116760 92.93119049]
[115.43280792 98.16641998]
[114.25591278 102.97379303]
[111.72357178 106.86210632]
[108.28661346 109.49915314]
[115.69325256 122.54299164]
[123.09988403 135.58683777]
[130.78546143 148.46829224]
[138.74639893 161.18141174]
[146.70735168 173.89451599]
[161.37800598 170.20300293]
[176.47122192 171.22766113]
[190.50833130 176.86811829]
[202.11412048 186.57176208]
[210.15158081 199.38795471]
[213.83326721 214.06106567]
[212.79849243 229.15359497]
[207.14863586 243.18692017]
[197.43721008 254.78620911]
[184.61564636 262.81506348]
[169.94006348 266.48693848]
[154.84823608 265.44204712]
[140.81869507 259.78277588]
[129.22592163 250.06358337]
[121.20564270 237.23664856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 55]
[7 54]
[8 53]
[9 52]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
