%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGGCGGGGCGAAGGGUCCUCGUAUAUAAAAGGGCCCCGGCCGCGCGGGGUCUCUAAUCUGCCAUUUUCUGUCCCUGAGUGAGUCUCUGGCGUCCCAAAUUGCCUGUUUUUCUCGCAGGCUCUAUUCCGUUCGCUGGUUCGCCACCUCAGGGGAACG\
) } def
/len { sequence length } bind def

/coor [
[170.10273743 93.32394409]
[155.45124817 96.53858185]
[140.79975891 99.75321960]
[126.14827728 102.96785736]
[111.49678802 106.18249512]
[99.02474213 114.51604462]
[90.44792175 126.82206726]
[81.87110901 139.12809753]
[73.41551208 151.51771545]
[65.08195496 163.98976135]
[56.74840546 176.46180725]
[48.41485214 188.93385315]
[50.12185669 204.88583374]
[38.61354446 216.06341553]
[22.71810341 213.89210510]
[14.62915993 200.03756714]
[20.55185509 185.12779236]
[35.94280624 180.60029602]
[44.27635956 168.12825012]
[52.60991287 155.65620422]
[60.94346619 143.18417358]
[62.05052948 135.83731079]
[69.56508636 130.55126953]
[78.14190674 118.24524689]
[86.71871948 105.93923187]
[83.84859467 99.01013184]
[70.42190552 105.69773865]
[60.67274094 117.09745789]
[45.85820770 114.74593353]
[40.11827087 100.88761139]
[48.93149948 88.74977875]
[63.88539124 89.91719055]
[78.10834503 85.15193939]
[75.23822021 78.22283936]
[60.47182083 75.58589935]
[45.70542145 72.94895172]
[30.93902397 70.31201172]
[16.17262459 67.67506409]
[1.40622687 65.03812408]
[-13.36017132 62.40117645]
[-28.12656975 59.76423264]
[-40.94749069 69.00541687]
[-56.53415680 66.39173126]
[-65.63927460 53.47381973]
[-62.86094284 37.91565704]
[-49.84748840 28.94762421]
[-34.31957245 31.89029503]
[-25.48962593 44.99783325]
[-10.72322750 47.63477707]
[4.04317093 50.27172470]
[18.80957031 52.90866852]
[33.57596970 55.54561234]
[48.34236526 58.18255615]
[63.10876465 60.81949997]
[77.87516022 63.45644379]
[81.26771545 48.84512711]
[91.49442291 37.87176895]
[105.83086395 33.45969009]
[120.45779419 36.78427505]
[131.47857666 46.95984650]
[135.95726013 61.27562332]
[132.70072937 75.91785431]
[122.57649994 86.98583221]
[108.28215027 91.53100586]
[122.93363953 88.31636810]
[137.58512878 85.10173035]
[152.23661804 81.88709259]
[166.88810730 78.67245483]
[170.47979736 63.87850189]
[180.09933472 52.15879822]
[193.79734802 45.80390167]
[208.83436584 46.02567291]
[222.22866821 52.72657394]
[231.34753418 64.52961731]
[245.99902344 61.31497955]
[260.65051270 58.10034180]
[275.30200195 54.88570404]
[289.95349121 51.67106628]
[304.60498047 48.45642853]
[319.25646973 45.24179077]
[333.90795898 42.02715302]
[348.52716064 38.66883469]
[363.11273193 35.16715240]
[370.77398682 30.09609413]
[378.01898193 31.74289322]
[392.67047119 28.52825546]
[401.80508423 13.63830090]
[418.54742432 10.00756264]
[432.47036743 19.39927101]
[447.05590820 15.89759064]
[461.64144897 12.39591026]
[476.22698975 8.89422989]
[490.81256104 5.39254951]
[505.39810181 1.89086902]
[506.05181885 -14.35206985]
[511.22531128 -29.74828148]
[520.49688721 -43.06724548]
[533.11761475 -53.24677277]
[548.07189941 -59.47770309]
[564.15911865 -61.26822662]
[580.09002686 -58.48269653]
[594.59020996 -51.35186768]
[606.50189209 -40.45380020]
[614.87628174 -26.66701698]
[629.31311035 -30.73862457]
[643.74993896 -34.81023026]
[658.18676758 -38.88183975]
[672.62359619 -42.95344543]
[687.06042480 -47.02505112]
[693.31768799 -61.35616302]
[707.34582520 -68.26600647]
[722.52111816 -64.49197388]
[731.67834473 -51.81603622]
[730.49371338 -36.22338867]
[719.52655029 -25.07640457]
[703.95520020 -23.63834763]
[691.13201904 -32.58822250]
[676.69519043 -28.51661682]
[662.25836182 -24.44500923]
[647.82153320 -20.37340164]
[633.38470459 -16.30179596]
[618.94787598 -12.23018932]
[619.28289795 1.59139419]
[616.27795410 15.09671116]
[610.10522461 27.49008560]
[601.12365723 38.04016876]
[589.85797119 46.12310791]
[576.96832275 51.25941849]
[563.21136475 53.14244461]
[549.39587402 51.65665436]
[536.33520508 46.88470840]
[524.79949951 39.10289001]
[515.47021484 28.76510620]
[508.89978027 16.47641754]
[494.31423950 19.97809792]
[479.72869873 23.47977829]
[465.14312744 26.98145866]
[450.55758667 30.48313904]
[435.97204590 33.98482132]
[430.82434082 45.82993317]
[419.61865234 52.63512039]
[406.34545898 51.71393967]
[395.88510132 43.17974472]
[381.23361206 46.39438248]
[366.61441040 49.75270081]
[352.02883911 53.25438309]
[346.22885132 57.89786530]
[337.12258911 56.67864227]
[322.47109985 59.89328003]
[307.81961060 63.10791779]
[293.16812134 66.32255554]
[278.51663208 69.53719330]
[263.86514282 72.75183105]
[249.21365356 75.96646881]
[234.56216431 79.18110657]
[231.22239685 93.71765900]
[221.86384583 105.41069031]
[208.30093384 111.90748596]
[193.20063782 111.87113190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 25]
[7 24]
[8 23]
[9 21]
[10 20]
[11 19]
[12 18]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[74 155]
[75 154]
[76 153]
[77 152]
[78 151]
[79 150]
[80 149]
[81 148]
[82 146]
[83 145]
[85 144]
[86 143]
[89 139]
[90 138]
[91 137]
[92 136]
[93 135]
[94 134]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
