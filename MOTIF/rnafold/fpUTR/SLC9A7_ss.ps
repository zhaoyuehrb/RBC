%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCAGCCCCGGCCCGGCGCGAGUAGGAGGAGGAGCUGCAGCGGCCACGGCCACUCCGGCAGGUCCGCGGUGCUGCCAGAACCCGCCGACGGCGCGGGCUGCUGGUCCCCGCUCGGAGGAGGCGCGGGGGGCCCCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[101.73806000 160.59443665]
[99.45620728 145.76901245]
[97.17435455 130.94358826]
[94.89250946 116.11816406]
[88.25817871 102.66507721]
[77.88548279 91.82961273]
[67.51278687 80.99415588]
[57.14008713 70.15869904]
[46.76739120 59.32323837]
[36.39469528 48.48777771]
[26.02200127 37.65232086]
[10.45346737 37.14387512]
[0.08843415 26.00741768]
[0.66909993 11.16833305]
[-9.70359612 0.33287340]
[-20.07629204 -10.50258636]
[-30.68289375 -21.10918808]
[-41.51835251 -31.48188400]
[-52.35381317 -41.85457993]
[-63.18927002 -52.22727585]
[-74.02473450 -62.59997177]
[-71.38258362 -47.83450317]
[-75.28701782 -33.35157013]
[-84.99295044 -21.91500664]
[-98.64813995 -15.70730019]
[-113.64672852 -15.91309071]
[-127.12647247 -22.49310684]
[-136.51496887 -34.19165802]
[-140.02058411 -48.77626038]
[-136.97431946 -63.46368027]
[-127.95751190 -75.45105743]
[-114.69087219 -82.45079041]
[-99.70612335 -83.12709045]
[-85.86456299 -77.35209656]
[-93.64616394 -90.17577362]
[-108.73561096 -94.04181671]
[-116.44458771 -107.15769958]
[-112.66591644 -121.51935577]
[-120.44751740 -134.34303284]
[-128.22911072 -147.16671753]
[-136.15013123 -159.90475464]
[-144.20962524 -172.55561829]
[-152.26911926 -185.20649719]
[-160.32861328 -197.85736084]
[-168.38810730 -210.50823975]
[-175.69500732 -216.11801147]
[-176.48193359 -223.52416992]
[-184.26353455 -236.34783936]
[-198.03739929 -244.13186646]
[-198.02525330 -259.02645874]
[-205.80685425 -271.85015869]
[-213.58845520 -284.67382812]
[-221.50947571 -297.41186523]
[-229.56896973 -310.06271362]
[-244.99627686 -310.02108765]
[-257.98474121 -318.34594727]
[-264.38980103 -332.38085938]
[-262.16763306 -347.64733887]
[-252.02728271 -359.27392578]
[-237.20454407 -363.55056763]
[-222.42927551 -359.11267090]
[-212.41621399 -347.37631226]
[-210.36050415 -332.08651733]
[-216.91810608 -318.12222290]
[-208.85861206 -305.47134399]
[-202.56428528 -301.48992920]
[-200.76478577 -292.45541382]
[-192.98318481 -279.63174438]
[-185.20158386 -266.80807495]
[-171.98429871 -259.94128418]
[-171.43984985 -244.12944031]
[-163.65824890 -231.30575562]
[-155.73724365 -218.56773376]
[-147.67774963 -205.91685486]
[-139.61825562 -193.26599121]
[-131.55876160 -180.61511230]
[-123.49925995 -167.96424866]
[-117.20494080 -163.98281860]
[-115.40543365 -154.94831848]
[-107.62384033 -142.12463379]
[-99.84223938 -129.30096436]
[-85.35849762 -126.02120209]
[-77.28417206 -113.12702179]
[-80.82248688 -97.95737457]
[-73.04088593 -85.13369751]
[-63.65203476 -73.43543243]
[-52.81657410 -63.06273651]
[-41.98111725 -52.69004059]
[-31.14565659 -42.31734467]
[-20.31019783 -31.94464684]
[-15.52938080 -31.15893555]
[-11.21614361 -27.31326866]
[-9.24083233 -20.87528229]
[1.13186347 -10.03982258]
[11.50455952 0.79563701]
[26.35484886 0.86279565]
[37.02859116 11.70372963]
[36.85746002 27.27962303]
[47.23015594 38.11508179]
[57.60285187 48.95054245]
[67.97554779 59.78600311]
[78.34824371 70.62145996]
[88.72093964 81.45691681]
[99.09363556 92.29238129]
[103.22454834 86.93029022]
[110.83312225 84.19352722]
[120.36467743 85.73580933]
[129.59832764 92.37683105]
[142.58871460 99.87683105]
[155.57908630 107.37683105]
[168.56947327 114.87683105]
[181.55984497 122.37683105]
[194.55023193 129.87683105]
[207.54061890 137.37683105]
[220.61203003 144.73468018]
[233.76293945 151.94950867]
[248.86380005 147.28695679]
[262.79943848 154.74171448]
[267.30209351 169.89103699]
[259.70040894 183.74707031]
[244.50431824 188.08930969]
[230.72943115 180.34155273]
[226.54809570 165.10041809]
[213.39720154 157.88558960]
[205.96377563 157.42247009]
[200.04061890 150.36721802]
[187.05023193 142.86721802]
[174.05984497 135.36721802]
[161.06947327 127.86721039]
[148.07908630 120.36721039]
[135.08871460 112.86721039]
[122.09832764 105.36721039]
[109.71792603 113.83631897]
[111.99977875 128.66174316]
[114.28163147 143.48716736]
[116.56348419 158.31259155]
[130.41957092 165.29745483]
[137.49382019 179.10812378]
[135.06605530 194.43409729]
[124.06977844 205.38223267]
[108.73329926 207.74275208]
[94.95379639 200.60797119]
[88.02977753 186.72137451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[10 99]
[11 98]
[14 95]
[15 94]
[16 93]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[34 85]
[35 84]
[38 81]
[39 80]
[40 79]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[47 72]
[48 71]
[50 69]
[51 68]
[52 67]
[53 65]
[54 64]
[108 132]
[109 131]
[110 130]
[111 129]
[112 128]
[113 127]
[114 126]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
