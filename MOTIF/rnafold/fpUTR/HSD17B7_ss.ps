%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACUCUGAUUGGUGACGGGUGAGGCGGCCCGAAAUCGUAGGACUUCCGAAAGCAGCGGCGGUGUUUGCUUCACUGCUUGGAAGUGUGAGUGCGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[113.84539032 212.60543823]
[111.03467560 197.87112427]
[108.22395325 183.13681030]
[105.41323090 168.40251160]
[102.60251617 153.66819763]
[99.79179382 138.93388367]
[91.17263794 137.92056274]
[82.99206543 135.02314758]
[75.65652466 130.38562012]
[69.53048706 124.23839569]
[64.91831970 116.88688660]
[62.04918671 108.69635773]
[47.05658722 109.16751862]
[32.06398773 109.63867950]
[21.27856255 120.87755585]
[6.06722450 121.14180756]
[-4.58086061 110.79029083]
[-19.57345963 111.26145172]
[-34.56605530 111.73261261]
[-49.55865479 112.20377350]
[-64.55125427 112.67493439]
[-75.18596649 124.36588287]
[-90.97632599 125.02929688]
[-102.55419159 114.27156830]
[-103.05061340 98.47507477]
[-92.17108154 87.01159668]
[-76.37022400 86.68221283]
[-65.02241516 97.68233490]
[-50.02981567 97.21117401]
[-35.03722000 96.74001312]
[-20.04462051 96.26885223]
[-5.05202198 95.79769135]
[4.92507458 84.79800415]
[20.12298965 84.10660553]
[31.59282684 94.64608002]
[46.58542633 94.17491913]
[61.57802200 93.70375824]
[66.04788208 80.94364166]
[74.61200714 70.48151398]
[86.23765564 63.57900620]
[99.52288818 61.06847763]
[112.86566162 63.25267792]
[124.65696716 69.86820984]
[136.21466064 60.30685043]
[147.77236938 50.74549103]
[159.33006287 41.18412781]
[170.88775635 31.62277031]
[182.44546509 22.06141090]
[194.00315857 12.50005054]
[196.77922058 6.17627907]
[201.65940857 2.83781958]
[206.60006714 2.72888803]
[218.73532104 -6.08789062]
[230.87057495 -14.90466976]
[243.00582886 -23.72144890]
[255.14108276 -32.53822708]
[262.28857422 -51.25729752]
[281.44857788 -52.87813568]
[293.00628662 -62.43949509]
[304.56396484 -72.00085449]
[316.12167358 -81.56221008]
[319.05685425 -97.33447266]
[333.28530884 -104.74599457]
[347.89218140 -98.11128998]
[351.67230225 -82.51994324]
[341.72592163 -69.93229675]
[325.68304443 -70.00451660]
[314.12533569 -60.44315720]
[302.56762695 -50.88179398]
[291.00994873 -41.32043457]
[290.93499756 -30.88218880]
[284.92031860 -22.08064079]
[274.81057739 -18.05371666]
[263.95785522 -20.40297127]
[251.82261658 -11.58619308]
[239.68736267 -2.76941466]
[227.55210876 6.04736423]
[215.41683960 14.86414337]
[203.56451416 24.05774879]
[192.00682068 33.61911011]
[180.44912720 43.18046951]
[168.89141846 52.74182892]
[157.33372498 62.30318832]
[145.77603149 71.86454773]
[134.21832275 81.42591095]
[138.85319519 102.51397705]
[131.53936768 122.82891083]
[114.52610016 136.12316895]
[117.33682251 150.85748291]
[120.14754486 165.59178162]
[122.95825958 180.32609558]
[125.76898193 195.06040955]
[128.57969666 209.79470825]
[142.31744385 217.26521301]
[147.99108887 231.83723450]
[142.92170715 246.63031006]
[129.50289917 254.65962219]
[114.07062531 252.13395691]
[103.91153717 240.24584961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[6 88]
[12 37]
[13 36]
[14 35]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[43 85]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[58 70]
[59 69]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
