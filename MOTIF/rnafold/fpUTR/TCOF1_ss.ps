%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGAGGAGCCGGAAGUGUGGCGCGCGAGGUCUAAGGGCGCGAGGGAAGUGGCGGGCGGGGACUAAGGCGGGGCGUGCAGGUAGCCGGCCGGCCGGGGGUCGCGGGU\
) } def
/len { sequence length } bind def

/coor [
[97.83052063 193.64700317]
[95.28335571 208.42915344]
[87.11764526 221.01171875]
[74.65463257 229.35877991]
[59.91091537 232.11972046]
[45.27210999 228.84780884]
[33.10686493 220.07244873]
[25.38358688 207.21356201]
[23.35194778 192.35179138]
[27.34185791 177.88952637]
[15.13082218 186.60105896]
[2.91978645 195.31257629]
[-9.29124928 204.02409363]
[-11.65093422 219.65122986]
[-24.41895485 228.96537781]
[-40.02027130 226.44059753]
[-49.19889832 213.57481384]
[-46.50931931 198.00106812]
[-33.54721451 188.95898438]
[-18.00277138 191.81306458]
[-5.79173565 183.10154724]
[6.41929960 174.39001465]
[18.63033485 165.67849731]
[21.92057037 157.56933594]
[30.80140495 153.33074951]
[39.33605576 140.99545288]
[47.87070465 128.66014099]
[56.40535736 116.32484436]
[64.94001007 103.98953247]
[66.45059204 89.06579590]
[60.56089783 75.27044678]
[54.67120361 61.47510529]
[48.78150558 47.67976379]
[42.89181137 33.88442230]
[31.03390694 31.63420868]
[21.87443542 23.96121407]
[17.66692924 12.90705776]
[19.37118340 1.32479274]
[26.43714714 -7.85728884]
[21.35201073 -21.96903610]
[9.39450645 -32.32899094]
[12.35896683 -46.92560577]
[7.27383041 -61.03735352]
[-7.85708714 -63.67381287]
[-19.63232040 -73.53482056]
[-24.88438988 -87.96781158]
[-22.20051765 -103.09039307]
[-12.30264950 -114.83465576]
[2.14673710 -120.04145813]
[17.26082993 -117.31019592]
[28.97401237 -107.37556458]
[34.13549805 -92.90993500]
[31.35687447 -77.80447388]
[21.38557625 -66.12248993]
[26.47071266 -52.01074219]
[38.06449509 -42.66015625]
[35.46375656 -27.05417252]
[40.54889297 -12.94242573]
[57.48754883 -6.30089855]
[64.45432281 10.84729004]
[56.68715286 27.99472618]
[62.57685089 41.79006958]
[68.46654510 55.58541107]
[74.35623932 69.38075256]
[80.24593353 83.17609406]
[95.68304443 75.97047424]
[111.16648102 80.02870178]
[119.87691498 92.21275330]
[134.87536621 91.99659729]
[149.87379456 91.78044128]
[163.56103516 83.84507751]
[176.39848328 91.39817047]
[191.39692688 91.18201447]
[205.08416748 83.24665070]
[217.92161560 90.79973602]
[232.92005920 90.58358002]
[241.60742188 87.29039001]
[248.35238647 90.58358002]
[263.35083008 90.79973602]
[275.81292725 80.69650269]
[291.45040894 84.28110504]
[298.26748657 98.80373383]
[291.03472900 113.12387848]
[275.30044556 116.25634766]
[263.13467407 105.79817963]
[248.13621521 105.58202362]
[233.13621521 105.58202362]
[218.13778687 105.79817963]
[205.52333069 113.71808624]
[191.61308289 106.18045044]
[176.61465454 106.39661407]
[164.00019836 114.31651306]
[150.08996582 106.77888489]
[135.09152222 106.99504089]
[120.09307098 107.21119690]
[116.52638245 114.69451904]
[110.19461823 120.48445129]
[101.87960815 123.57282257]
[92.72329712 123.30458832]
[84.07132721 119.50257111]
[77.27531433 112.52418518]
[68.74066162 124.85948944]
[60.20600891 137.19479370]
[51.67136002 149.53010559]
[43.13670731 161.86540222]
[57.53738022 157.66770935]
[72.42701721 159.48393250]
[85.39639282 167.02020264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 23]
[11 22]
[12 21]
[13 20]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[39 58]
[40 57]
[42 55]
[43 54]
[68 95]
[69 94]
[70 93]
[72 91]
[73 90]
[75 88]
[76 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
