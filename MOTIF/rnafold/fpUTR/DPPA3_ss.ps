%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:49:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGCUCCGGUUUUCAGCCUCUUUCCGGGCUACCUGGUAGCAAUUUGAGGCUCUGUCAUCAGUUUCUGCUACGUUUCAAAGAUCCUGGAGAAGCCUAGUGUUGUGUCAAGACGCCG\
) } def
/len { sequence length } bind def

/coor [
[58.08944321 165.34831238]
[62.08885193 150.88970947]
[49.58914185 159.18171692]
[37.20092010 167.63937378]
[24.92637825 176.26118469]
[12.65183640 184.88299561]
[7.34182978 192.47647095]
[-0.06619686 193.56581116]
[-12.56590557 201.85781860]
[-25.06561470 210.14982605]
[-37.56532288 218.44181824]
[-34.61506271 233.35371399]
[-37.60081482 248.25852966]
[-46.06726837 260.88342285]
[-58.72335434 269.30313110]
[-73.63911438 272.23379517]
[-88.53999329 269.22842407]
[-101.15372467 260.74536133]
[-109.55680084 248.07823181]
[-112.46781921 233.15863037]
[-109.44286346 218.26170349]
[-100.94322968 205.65914917]
[-88.26502991 197.27273560]
[-73.34161377 194.38134766]
[-58.44869232 197.42590332]
[-45.85732269 205.94210815]
[-33.35761642 197.65011597]
[-20.85790634 189.35810852]
[-8.35819817 181.06611633]
[4.03002501 172.60845947]
[16.30456734 163.98664856]
[28.57910919 155.36483765]
[32.29137421 148.86216736]
[41.29714203 146.68200684]
[53.79684830 138.39001465]
[65.08541107 128.51234436]
[74.96308136 117.22377777]
[84.84075165 105.93521118]
[84.78522491 94.20861816]
[92.62419891 85.48700714]
[104.29026031 84.29576111]
[114.46493530 73.27414703]
[124.63961792 62.25253296]
[134.81430054 51.23092270]
[144.98896790 40.20930862]
[142.10263062 25.07738304]
[148.60389709 11.30832672]
[161.81005859 4.09299612]
[176.55610657 6.01454592]
[186.73077393 -5.00706625]
[196.90545654 -16.02867889]
[207.08013916 -27.05029106]
[217.25480652 -38.07190323]
[218.44491577 -43.42065430]
[221.33999634 -47.31827927]
[225.06463623 -49.34985733]
[228.70834351 -49.52544022]
[239.72996521 -59.70011520]
[244.62167358 -74.74610901]
[259.22164917 -77.69400024]
[270.24325562 -87.86867523]
[281.26486206 -98.04335022]
[292.28646851 -108.21803284]
[293.07690430 -123.77479553]
[304.39932251 -133.93635559]
[319.22546387 -133.08692932]
[330.24707031 -143.26161194]
[341.26867676 -153.43629456]
[336.75756836 -168.01753235]
[339.02822876 -183.11079407]
[347.62985229 -195.71932983]
[360.85455322 -203.33967590]
[376.07656860 -204.45881653]
[390.27359009 -198.85455322]
[400.62673950 -187.63960266]
[405.08041382 -173.04072571]
[402.75033569 -157.95651245]
[394.09912109 -145.38195801]
[380.84451294 -137.81373596]
[365.61819458 -136.75454712]
[351.44335938 -142.41467285]
[340.42175293 -132.24000549]
[329.40014648 -122.06532288]
[329.06393433 -107.21868896]
[318.03140259 -96.74311066]
[302.46115112 -97.19641876]
[291.43954468 -87.02173615]
[280.41793823 -76.84706116]
[269.39633179 -66.67238617]
[265.29293823 -52.35415649]
[249.90463257 -48.67850494]
[238.88302612 -38.50382614]
[228.27642822 -27.89722633]
[218.10174561 -16.87561417]
[207.92707825 -5.85400105]
[197.75239563 5.16761112]
[187.57771301 16.18922424]
[190.66966248 30.73493767]
[184.53100586 44.47469330]
[171.32455444 52.05381393]
[156.01058960 50.38398743]
[145.83590698 61.40559769]
[135.66122437 72.42720795]
[125.48654938 83.44882202]
[115.31187439 94.47043610]
[112.10785675 110.88252258]
[96.12931824 115.81288147]
[86.25164032 127.10144806]
[76.37397003 138.39001465]
[91.23389435 136.34481812]
[105.19080353 141.84068298]
[114.66658783 153.46864319]
[117.23195648 168.24765015]
[112.22920990 182.38882446]
[100.94091797 192.26679993]
[86.26103210 195.34916687]
[71.95303345 190.84571838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 32]
[5 31]
[6 30]
[8 29]
[9 28]
[10 27]
[11 26]
[36 109]
[37 108]
[38 107]
[41 105]
[42 104]
[43 103]
[44 102]
[45 101]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[57 92]
[58 91]
[60 89]
[61 88]
[62 87]
[63 86]
[66 83]
[67 82]
[68 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
