%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCAGGUUCCGCCCCGGAGCCGACUUCCUCCUGGUCGGCGGCUGCAGCGGGGUGAGCGGCGGCAGCGGCCGGGGAUCCUGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.84051514 333.16366577]
[95.20684052 320.13864136]
[94.12447357 305.17773438]
[93.04210663 290.21685791]
[91.95973969 275.25595093]
[90.87737274 260.29504395]
[89.79500580 245.33415222]
[80.16435242 240.75897217]
[73.34604645 232.45541382]
[70.69177246 221.95957947]
[72.77441406 211.25192261]
[79.26615906 202.38369751]
[88.98785400 197.08399963]
[89.52938843 182.09378052]
[90.07093048 167.10356140]
[90.61246490 152.11332703]
[91.15399933 137.12310791]
[91.69553375 122.13288879]
[78.91765594 110.69409180]
[77.23574066 93.62682343]
[64.82040405 85.20901489]
[52.40507126 76.79121399]
[39.98973465 68.37340546]
[27.57439995 59.95560074]
[15.15906429 51.53779221]
[2.74372959 43.11998749]
[-12.24795341 47.56784439]
[-26.57060623 41.29125214]
[-33.46150970 27.25382042]
[-29.66699028 12.08359909]
[-16.97870445 2.94350076]
[-1.38767111 4.14920092]
[9.74449921 15.13140488]
[11.16153526 30.70465279]
[23.57686996 39.12245941]
[35.99220657 47.54026413]
[48.40753937 55.95806885]
[60.82287598 64.37587738]
[73.23821259 72.79367828]
[85.65354919 81.21148682]
[97.86882019 76.45669556]
[110.73936462 78.94067383]
[121.44128418 68.43025970]
[132.14320374 57.91983795]
[142.84512329 47.40942001]
[153.54704285 36.89900208]
[157.97145081 21.70903015]
[172.47334290 18.31136513]
[183.17526245 7.80094528]
[179.25654602 -7.04961729]
[183.30360413 -21.86572075]
[194.22778320 -32.66190720]
[209.09056091 -36.53406143]
[223.89390564 -32.44058609]
[234.65579224 -21.48261070]
[238.48133850 -6.60777378]
[234.34149170 8.18266773]
[223.34983826 18.91016006]
[208.46307373 22.68906021]
[193.68568420 18.50286484]
[182.98376465 29.01328468]
[179.32482910 43.45148087]
[164.05746460 47.60092163]
[153.35554504 58.11133957]
[142.65362549 68.62175751]
[131.95170593 79.13217926]
[121.24977875 89.64260101]
[123.45314026 102.96296692]
[118.00621033 115.31682587]
[106.68576050 122.67442322]
[106.14421844 137.66464233]
[105.60268402 152.65486145]
[105.06114960 167.64509583]
[104.51961517 182.63531494]
[103.97807312 197.62553406]
[118.43338776 211.25192261]
[118.58068085 230.82127380]
[104.75590515 244.25178528]
[105.83827209 259.21267700]
[106.92063904 274.17358398]
[108.00300598 289.13449097]
[109.08537292 304.09539795]
[110.16773987 319.05627441]
[121.31134796 330.59750366]
[119.09319305 346.48645020]
[105.21485901 354.53454590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[18 70]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
