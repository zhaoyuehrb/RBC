%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGGUCACGUGAGGCCGGUCACGCCCCGGGCAGCUUGGCUGGGGCUAGGCUUCCGGGGCUCUGCAGUCCUCGGCGUGUGCUGGCAGCUUCGGAGCCCACCGAGCCGGGCGGCUAGG\
) } def
/len { sequence length } bind def

/coor [
[114.53063202 286.92385864]
[105.93859100 299.37503052]
[93.91821289 308.56011963]
[79.64713287 313.57925415]
[64.52349091 313.94067383]
[50.02894592 309.60900879]
[37.58352280 301.00863647]
[28.40649796 288.98208618]
[23.39694405 274.70767212]
[23.04564476 259.58377075]
[27.38702011 245.09213257]
[35.99574280 232.65248108]
[48.02841568 223.48352051]
[62.30620956 218.48352051]
[77.43032074 218.14236450]
[81.72534180 203.77041626]
[86.02036285 189.39846802]
[90.31539154 175.02653503]
[94.61041260 160.65458679]
[90.84133911 146.24475098]
[102.20614624 135.23785400]
[106.50116730 120.86591339]
[94.20071411 119.65324402]
[85.30819702 112.24683380]
[82.33696747 101.87774658]
[68.14632416 97.01711273]
[53.95568848 92.15647888]
[39.76504898 87.29584503]
[25.57441139 82.43521118]
[11.38377190 77.57457733]
[-2.80686665 72.71394348]
[-18.36963081 75.56192017]
[-27.90295792 64.11792755]
[-42.09359741 59.25729370]
[-59.03736115 59.84484100]
[-64.29244995 43.72589493]
[-50.25818634 34.21401215]
[-37.23296356 45.06665421]
[-23.04232407 49.92728806]
[-8.49457073 46.73164749]
[2.05376768 58.52330399]
[16.24440575 63.38393784]
[30.43504524 68.24457550]
[44.62568283 73.10520935]
[58.81632233 77.96584320]
[73.00696564 82.82647705]
[87.19760132 87.68711090]
[99.90985870 80.87342072]
[114.63439178 85.65718842]
[121.84849548 100.54276276]
[134.49641418 92.47863007]
[147.14433289 84.41449738]
[159.79225159 76.35036469]
[172.44015503 68.28623199]
[173.50614929 52.91841125]
[183.30227661 41.26126480]
[197.91137695 37.65039444]
[211.68055725 43.26710510]
[224.32847595 35.20297623]
[236.97639465 27.13884163]
[249.62431335 19.07471085]
[262.27221680 11.01057816]
[274.92013550 2.94644570]
[287.56805420 -5.11768627]
[300.21597290 -13.18181896]
[307.69256592 -27.12496185]
[322.58377075 -27.44320679]
[335.23168945 -35.50733948]
[347.87960815 -43.57147217]
[351.40997314 -58.74296188]
[364.35162354 -66.74096680]
[378.79357910 -63.28179169]
[391.44149780 -71.34592438]
[404.08941650 -79.41005707]
[416.73733521 -87.47418976]
[429.38525391 -95.53832245]
[436.46801758 -110.32906342]
[452.83718872 -111.32061005]
[461.65350342 -97.49294281]
[453.84753418 -83.07077789]
[437.44937134 -82.89040375]
[424.80145264 -74.82627106]
[412.15353394 -66.76213837]
[399.50561523 -58.69800568]
[386.85769653 -50.63387299]
[383.90002441 -36.08094788]
[371.18811035 -27.72259521]
[355.94372559 -30.92355537]
[343.29580688 -22.85942268]
[330.64788818 -14.79529095]
[324.07595825 -1.42894924]
[308.28009033 -0.53390300]
[295.63220215 7.53022909]
[282.98428345 15.59436131]
[270.33636475 23.65849304]
[257.68844604 31.72262573]
[245.04052734 39.78675842]
[232.39260864 47.85089111]
[219.74468994 55.91502380]
[219.02694702 70.76840210]
[209.58891296 82.48963928]
[194.88682556 86.45221710]
[180.50428772 80.93415070]
[167.85638428 88.99828339]
[155.20846558 97.06240845]
[142.56054688 105.12654114]
[129.91262817 113.19067383]
[120.87310791 125.16093445]
[116.57808685 139.53288269]
[120.03995514 154.97068787]
[108.98235321 164.94961548]
[104.68733215 179.32154846]
[100.39231110 193.69349670]
[96.09729004 208.06544495]
[91.80226135 222.43739319]
[104.25920105 231.02108765]
[113.45233917 243.03530884]
[118.48101807 257.30300903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 115]
[16 114]
[17 113]
[18 112]
[19 111]
[21 109]
[22 108]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[33 39]
[34 38]
[50 107]
[51 106]
[52 105]
[53 104]
[54 103]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[64 93]
[65 92]
[67 90]
[68 89]
[69 88]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
