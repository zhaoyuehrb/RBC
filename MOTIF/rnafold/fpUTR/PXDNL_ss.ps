%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCAGCAGCCACCAUCACCACCACUGCGGUUGCUGCUGCAGCUGCAGCUGCUGCUCUCCCUCCGGCUGCUUCUUCGCGUGGCCAGCAGCGAAUGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[46.69580078 144.12547302]
[37.05651474 146.45744324]
[27.30224609 145.02648926]
[18.84025383 140.08337402]
[12.87476635 132.38233948]
[-1.86982965 135.13858032]
[-16.61442566 137.89482117]
[-31.35902214 140.65106201]
[-46.10361862 143.40730286]
[-60.84821701 146.16355896]
[-75.59281158 148.91979980]
[-87.73628235 159.06112671]
[-101.66857910 153.79420471]
[-116.41316986 156.55044556]
[-131.15777588 159.30668640]
[-134.26107788 174.18748474]
[-142.82690430 186.74513245]
[-155.54905701 195.06471252]
[-170.48748779 197.87753296]
[-185.36418152 194.75465393]
[-197.91056824 186.17230225]
[-206.21339417 173.43922424]
[-209.00656128 158.49711609]
[-205.86412048 143.62454224]
[-197.26527405 131.08946228]
[-184.52127075 122.80337524]
[-169.57550049 120.02986908]
[-154.70707703 123.19187927]
[-142.18331909 131.80720520]
[-133.91401672 144.56208801]
[-119.16941833 141.80584717]
[-104.42481995 139.04960632]
[-93.33597565 129.10542297]
[-78.34905243 134.17520142]
[-63.60445786 131.41896057]
[-48.85986328 128.66271973]
[-34.11526489 125.90647125]
[-19.37066841 123.15023041]
[-4.62607241 120.39398193]
[10.11852360 117.63774109]
[19.89532471 99.86610413]
[39.79116058 94.65328979]
[57.50886917 105.64704132]
[71.80300140 101.09974670]
[86.09712982 96.55245972]
[95.65766144 86.35011292]
[109.35558319 89.15341187]
[123.64971161 84.60612488]
[130.95622253 70.84920502]
[145.51727295 66.44123077]
[158.58737183 73.49165344]
[172.88150024 68.94436646]
[187.17562866 64.39707184]
[201.46975708 59.84978104]
[215.76388550 55.30249405]
[230.05801392 50.75520325]
[244.35214233 46.20791245]
[231.23582458 38.93039703]
[224.68876648 25.43462181]
[227.09181213 10.62836075]
[237.57109070 -0.10405341]
[252.31578064 -2.85975075]
[265.96395874 3.36338520]
[273.55239868 16.30229568]
[272.32159424 31.25171280]
[262.72061157 42.77425003]
[277.69216919 41.85083771]
[292.66372681 40.92742157]
[307.63528442 40.00400925]
[322.60681152 39.08059692]
[337.57836914 38.15718079]
[345.79504395 24.99413109]
[360.19210815 19.20586205]
[375.23361206 23.01807976]
[385.13577271 34.96491241]
[386.09100342 50.45255661]
[377.73202515 63.52569962]
[363.27301025 69.15744781]
[348.27377319 65.18228149]
[338.50177002 53.12873077]
[323.53024292 54.05214691]
[308.55868530 54.97555923]
[293.58712769 55.89897156]
[278.61557007 56.82238770]
[263.64404297 57.74580002]
[248.89944458 60.50204086]
[234.60530090 65.04933167]
[220.31117249 69.59662628]
[206.01704407 74.14391327]
[191.72291565 78.69120026]
[177.42878723 83.23849487]
[163.13465881 87.78578186]
[156.54043579 101.09186554]
[142.10893250 105.90708923]
[128.19700623 98.90025330]
[113.90287018 103.44754028]
[104.34233856 113.64988708]
[90.64441681 110.84658813]
[76.35028839 115.39387512]
[62.05615616 119.94116974]
[60.20580673 129.86352539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[13 32]
[14 31]
[15 30]
[43 100]
[44 99]
[45 98]
[47 96]
[48 95]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
