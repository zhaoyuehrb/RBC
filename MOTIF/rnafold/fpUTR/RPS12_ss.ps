%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUCCCUGCCGCCGCCGAGUCGCGCGGAGGCGGAGGCUUGGGUGCGUUCAAGAUUCAACUUCACCCGUAACCCACCGCC\
) } def
/len { sequence length } bind def

/coor [
[117.45080566 115.20011139]
[112.60100555 119.41104889]
[106.78061676 122.12684631]
[100.43795013 123.13832855]
[94.06155396 122.36758423]
[88.14256287 119.87398529]
[83.13688660 115.84959412]
[79.43009186 110.60438538]
[77.30769348 104.54238129]
[62.43912506 102.56103516]
[47.57056046 100.57969666]
[32.70199203 98.59835052]
[17.83342552 96.61700439]
[3.13215637 102.46364594]
[-8.46157932 93.11300659]
[-23.33014679 91.13166046]
[-38.19871140 89.15031433]
[-53.06727982 87.16896820]
[-67.97068024 85.46935272]
[-82.90357208 84.05207825]
[-99.24313354 88.57480621]
[-108.11235046 74.12581635]
[-96.68328094 61.60333252]
[-81.48629761 69.11918640]
[-66.55339813 70.53646088]
[-59.41988373 67.96926880]
[-51.08593369 72.30039978]
[-36.21736908 74.28174591]
[-21.34880066 76.26309204]
[-6.48023462 78.24443817]
[7.15753555 72.25607300]
[19.81476974 81.74843597]
[34.68333817 83.72978210]
[49.55190277 85.71112823]
[64.42047119 87.69247437]
[79.28903961 89.67381287]
[99.56204987 76.86167145]
[120.30537415 88.89747620]
[135.08831787 86.35490417]
[149.87124634 83.81233215]
[163.59106445 71.70706177]
[179.81298828 78.11236572]
[194.48913574 75.01220703]
[209.16526794 71.91204834]
[223.84140015 68.81188202]
[238.51753235 65.71172333]
[253.13238525 62.33438492]
[267.68069458 58.68107605]
[282.22900391 55.02777100]
[288.23367310 39.34440613]
[302.21450806 30.34112549]
[318.64837646 31.34310150]
[331.17877197 41.76771545]
[345.57843018 37.56649399]
[359.97805786 33.36527634]
[367.35537720 19.38848305]
[382.47949219 14.80183983]
[396.37750244 22.32651711]
[400.80398560 37.49826050]
[393.13278198 51.31594086]
[377.91510010 55.58177567]
[364.17929077 47.76491928]
[349.77963257 51.96614075]
[335.38000488 56.16735840]
[331.99496460 69.22437286]
[322.47821045 78.93674469]
[309.28277588 82.64579773]
[295.88800049 79.26065063]
[285.88232422 69.57608032]
[271.33398438 73.22938538]
[256.78567505 76.88269806]
[250.91979980 81.68570709]
[241.61770630 80.38786316]
[226.94155884 83.48802185]
[212.26542664 86.58818054]
[197.58929443 89.68834686]
[182.91314697 92.78850555]
[175.92594910 102.85426331]
[163.53622437 105.44346619]
[152.41381836 98.59526825]
[137.63088989 101.13784790]
[122.84794617 103.68041992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[15 30]
[16 29]
[17 28]
[18 27]
[19 25]
[20 24]
[38 82]
[39 81]
[40 80]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 71]
[48 70]
[49 69]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
