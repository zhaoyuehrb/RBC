%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGACAUGCCACAAAGGCACAGUAUAAAAACGGUGGGAAUCAGAGCACUUCAGCUCCAAUUGCUCUAUGUUUAGAAUUGCCUCUUUUUCAAG\
) } def
/len { sequence length } bind def

/coor [
[96.20948792 361.66830444]
[82.14683533 356.44891357]
[70.04877472 347.58117676]
[60.83852005 335.74179077]
[55.21893311 321.83422852]
[53.61885071 306.91983032]
[56.15908813 292.14074707]
[44.61431885 301.71771240]
[33.06954956 311.29467773]
[21.52478218 320.87164307]
[18.61089897 336.64785767]
[4.39247274 344.07861328]
[-10.22333717 337.46365356]
[-14.02453136 321.87741089]
[-4.09515905 309.27633667]
[11.94781399 309.32687378]
[23.49258232 299.74990845]
[35.03734970 290.17294312]
[46.58211899 280.59597778]
[54.30044937 267.73413086]
[57.31992722 253.04116821]
[60.33940506 238.34822083]
[63.35888290 223.65527344]
[53.41451263 214.57797241]
[49.27087784 201.65266418]
[52.12953949 188.27246094]
[61.33871460 178.00669861]
[74.53797913 173.64892578]
[78.05197906 159.06632996]
[81.56597900 144.48374939]
[85.07997131 129.90115356]
[88.59397125 115.31857300]
[81.12338257 102.90339661]
[84.51779175 88.81708527]
[96.82344055 81.16742706]
[100.33744049 66.58483887]
[103.85144043 52.00225449]
[107.11864471 37.36240005]
[110.13812256 22.66945076]
[113.15760040 7.97650146]
[104.72713470 -5.12178516]
[107.99862671 -19.97951126]
[120.53779602 -27.93594551]
[123.55727386 -42.62889481]
[126.57675171 -57.32184219]
[129.59622192 -72.01479340]
[120.69106293 -85.07135010]
[123.70859528 -100.58489227]
[136.85856628 -109.35151672]
[152.33934021 -106.17013550]
[160.96644592 -92.92820740]
[157.62156677 -77.48193359]
[144.28916931 -68.99531555]
[141.26969910 -54.30236435]
[138.25021362 -39.60941696]
[135.23074341 -24.91646767]
[143.61604309 -12.65994549]
[140.76316833 2.28380752]
[127.85054779 10.99597931]
[124.83106995 25.68892860]
[121.81159210 40.38187790]
[123.58553314 47.71776581]
[118.43402100 55.51625443]
[114.92002869 70.09883881]
[111.40602875 84.68142700]
[118.87661743 97.09660339]
[115.48220825 111.18291473]
[103.17655945 118.83257294]
[99.66255951 133.41516113]
[96.14855957 147.99774170]
[92.63456726 162.58033752]
[89.12056732 177.16291809]
[100.23496246 189.78115845]
[101.70018768 206.36685181]
[93.14128113 220.45634460]
[78.05183411 226.67475891]
[75.03235626 241.36770630]
[72.01287842 256.06063843]
[68.99340057 270.75360107]
[80.84331512 261.55688477]
[94.75729370 255.95320129]
[109.67352295 254.37016296]
[124.45372772 256.92858887]
[137.97000122 263.43322754]
[149.19088745 273.38772583]
[157.26010132 286.03240967]
[161.56185913 300.40234375]
[161.76788330 315.40090942]
[157.86247253 329.88357544]
[150.14364624 342.74514771]
[139.20042419 353.00408936]
[125.86792755 359.87756348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 19]
[8 18]
[9 17]
[10 16]
[20 79]
[21 78]
[22 77]
[23 76]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[35 65]
[36 64]
[37 63]
[38 61]
[39 60]
[40 59]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
