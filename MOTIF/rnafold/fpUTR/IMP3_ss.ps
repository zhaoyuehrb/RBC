%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGCCAAUGGGAAGUGAGGGCGUGACUUUAAGUCUUUCUUUCAUUGGCCCAGGGUCCCAGGCCGUCCAGGUCUUGGGGCGCCGCGGCGGAAAUCGCGCGGAUGCCAGAACGCGCUCUCAGCUUCGGGUCCUGCGGCUGCGGCUGCCGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[83.16814423 119.01905823]
[69.36845398 124.89855194]
[55.56875992 130.77806091]
[41.76906967 136.65754700]
[27.96937752 142.53704834]
[14.16968632 148.41654968]
[0.42989478 154.43470764]
[-13.24860287 160.59089661]
[-26.92710114 166.74708557]
[-40.60559845 172.90327454]
[-54.28409576 179.05946350]
[-67.96259308 185.21566772]
[-81.64109039 191.37185669]
[-88.22863770 197.78424072]
[-95.65757751 197.51119995]
[-109.45726776 203.39070129]
[-123.25695801 209.27020264]
[-129.97229004 215.54862976]
[-137.39422607 215.12605286]
[-151.30952454 220.72647095]
[-165.22480774 226.32688904]
[-179.14009094 231.92730713]
[-193.05538940 237.52774048]
[-206.97067261 243.12815857]
[-209.04916382 258.34576416]
[-218.47067261 270.47549438]
[-232.70085144 276.25454712]
[-247.91186523 274.12838745]
[-260.01202393 264.66888428]
[-265.74645996 250.42066956]
[-263.57260132 235.21640015]
[-254.07522583 223.14595032]
[-239.80909729 217.45622253]
[-224.61170959 219.67771912]
[-212.57109070 229.21286011]
[-198.65580750 223.61244202]
[-184.74052429 218.01202393]
[-170.82522583 212.41160583]
[-156.90994263 206.81117249]
[-142.99464417 201.21075439]
[-129.13645935 195.47050476]
[-115.33676910 189.59100342]
[-101.53707123 183.71150208]
[-87.79728699 177.69335938]
[-74.11878204 171.53717041]
[-60.44028854 165.38096619]
[-46.76179123 159.22477722]
[-33.08329391 153.06858826]
[-19.40479469 146.91239929]
[-5.72629738 140.75621033]
[-0.88971007 135.11076355]
[8.29018688 134.61686707]
[22.08987808 128.73736572]
[35.88956833 122.85786438]
[49.68926239 116.97836304]
[63.48895264 111.09886169]
[77.28864288 105.21936798]
[62.32265854 104.20977020]
[54.47804642 91.42453766]
[60.35751343 77.62483215]
[75.01239014 74.42567444]
[86.10789490 84.51982880]
[80.78881836 70.49458313]
[75.46974945 56.46934128]
[70.15067291 42.44409561]
[64.83160400 28.41885185]
[50.85094070 20.54988289]
[48.42868805 4.69074488]
[59.42298889 -6.99278736]
[75.39995575 -5.53810740]
[84.10342407 7.93887806]
[78.85684204 23.09977913]
[84.17591858 37.12502289]
[89.49498749 51.15026474]
[94.81406403 65.17550659]
[100.13314056 79.20075226]
[112.81098938 87.21774292]
[127.76235199 86.01074219]
[142.71371460 84.80374146]
[157.65216064 83.44625854]
[172.57617188 81.93843079]
[187.50019836 80.43060303]
[202.40827942 78.77257538]
[217.29891968 76.96452332]
[232.18954468 75.15647888]
[247.08018494 73.34842682]
[261.97082520 71.54037476]
[276.86145020 69.73232269]
[291.75207520 67.92427826]
[306.64273071 66.11622620]
[295.79327393 55.75814438]
[295.25970459 40.76763535]
[305.34524536 29.66439056]
[320.31787109 28.75881195]
[331.66809082 38.56557465]
[332.94512939 53.51111603]
[323.42340088 65.10118103]
[338.42340088 65.10118103]
[353.42340088 65.10118103]
[368.42340088 65.10118103]
[377.06231689 61.95734406]
[383.72470093 65.25525665]
[398.72164917 65.55731201]
[413.71859741 65.85936737]
[428.71557617 66.16142273]
[437.41604614 63.19218826]
[444.01065063 66.62359619]
[458.99850464 67.22758484]
[467.75698853 64.43415070]
[474.28118896 67.99765778]
[489.25381470 68.90333557]
[504.22644043 69.80901337]
[513.03942871 67.19251251]
[519.49053955 70.88667297]
[534.44189453 72.09367371]
[545.29528809 60.83592606]
[560.85125732 59.23986053]
[573.76458740 68.05909729]
[577.93811035 83.12945557]
[571.40118408 97.33517456]
[557.24035645 103.96875000]
[542.14190674 99.89801025]
[533.23486328 87.04503632]
[518.28350830 85.83803558]
[503.32077026 84.78164673]
[488.34814453 83.87596893]
[473.37548828 82.97029114]
[458.39450073 82.21541595]
[443.40667725 81.61142731]
[428.41351318 81.15838623]
[413.41656494 80.85633087]
[398.41958618 80.55427551]
[383.42263794 80.25222015]
[368.42340088 80.10118103]
[353.42340088 80.10118103]
[338.42340088 80.10118103]
[323.42340088 80.10118103]
[308.45077515 81.00685883]
[293.56011963 82.81491089]
[278.66949463 84.62295532]
[263.77886963 86.43100739]
[248.88822937 88.23905945]
[233.99760437 90.04711151]
[219.10696411 91.85515594]
[204.21633911 93.66320801]
[197.91920471 97.61413574]
[189.00802612 95.35462189]
[174.08401489 96.86245728]
[159.15998840 98.37028503]
[152.78457642 102.19360352]
[143.92070007 99.75510406]
[128.96934509 100.96210480]
[114.01799011 102.16909790]
[113.11322021 110.79979706]
[106.71949005 118.61557007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[15 43]
[16 42]
[17 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[77 153]
[78 152]
[79 151]
[80 149]
[81 148]
[82 147]
[83 145]
[84 144]
[85 143]
[86 142]
[87 141]
[88 140]
[89 139]
[90 138]
[97 137]
[98 136]
[99 135]
[100 134]
[102 133]
[103 132]
[104 131]
[105 130]
[107 129]
[108 128]
[110 127]
[111 126]
[112 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
