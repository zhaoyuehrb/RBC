%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCGUCGCCCGCUGAGAGCAAGCGCAACGGGCGUUUUCGUUUGUGACGCCAGGGAGCGUGAGGACGUGGGGCUUCCGUGAAUGCGCAGUGGGUGCGUCGGCCACGACCUUUUGGCCAGGUUAGGGAGGGGGCGACGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[92.70070648 416.77258301]
[101.05860138 402.66311646]
[100.73137665 387.66668701]
[92.71827698 375.11123657]
[100.15268707 361.14553833]
[99.82546234 346.14910889]
[99.49823761 331.15267944]
[99.17102051 316.15625000]
[98.84379578 301.15982056]
[98.51657104 286.16339111]
[98.18934631 271.16696167]
[97.86212158 256.17053223]
[89.84902191 243.61508179]
[97.28343201 229.64939880]
[96.95620728 214.65296936]
[83.19577789 205.76538086]
[77.36022949 190.28178406]
[81.92214966 174.20399475]
[95.28235626 163.88999939]
[94.62805939 148.90428162]
[93.97377014 133.91856384]
[76.66242218 127.64379883]
[64.31987762 112.79691315]
[61.01347733 92.86805725]
[46.04559708 91.88700867]
[31.07771111 90.90596771]
[19.25588608 101.04904938]
[4.09029818 99.84090424]
[-5.50672960 88.50809479]
[-20.47461319 87.52704620]
[-35.44249725 86.54599762]
[-50.41038132 85.56495667]
[-65.37826538 84.58390808]
[-80.34614563 83.60285950]
[-95.31403351 82.62181091]
[-109.77465820 90.35630798]
[-123.55851746 81.47164917]
[-122.48596191 65.10761261]
[-107.66034698 58.09811401]
[-94.33298492 67.65393066]
[-79.36510468 68.63497925]
[-64.39721680 69.61602020]
[-49.42933273 70.59706879]
[-34.46145248 71.57811737]
[-19.49356651 72.55916595]
[-4.52568293 73.54020691]
[6.46847010 63.55701447]
[21.66200829 64.33871460]
[32.05875778 75.93807983]
[47.02664185 76.91912842]
[61.99452591 77.90017700]
[71.63633728 66.40950775]
[68.07105255 51.83937836]
[64.34704590 37.30900574]
[60.46475601 22.82011604]
[56.58247375 8.33122921]
[52.70018768 -6.15765810]
[48.81790161 -20.64654541]
[44.93561554 -35.13543320]
[29.88764763 -37.47607040]
[17.09619141 -45.74036407]
[8.77744293 -58.49647141]
[6.37267494 -73.53432465]
[10.29852867 -88.24851990]
[19.87482643 -100.08973694]
[33.44241714 -107.00640869]
[48.65063095 -107.80018616]
[62.86455536 -102.33354187]
[73.62154388 -91.55360413]
[79.05787659 -77.32805634]
[78.23168182 -62.12157059]
[71.28610229 -48.56875229]
[59.42450333 -39.01771927]
[63.30678940 -24.52883148]
[67.18907166 -10.03994370]
[71.07135773 4.44894361]
[74.95364380 18.93783188]
[78.83592987 33.42671967]
[83.64169312 39.11660767]
[82.64118195 48.27408981]
[86.20647430 62.84421921]
[104.69347382 63.25694656]
[119.72285461 71.75476837]
[130.78201294 61.62091827]
[141.84117126 51.48706436]
[152.90032959 41.35321045]
[163.95948792 31.21935844]
[175.01866150 21.08550453]
[177.15213013 5.18494415]
[190.98739624 -2.93694496]
[205.91120911 2.95025563]
[210.47531128 18.33039093]
[201.17851257 31.40513420]
[185.15251160 32.14466476]
[174.09335327 42.27851868]
[163.03419495 52.41237259]
[151.97502136 62.54622650]
[140.91586304 72.68007660]
[129.85670471 82.81393433]
[132.49874878 88.57131958]
[134.04194641 94.71513367]
[149.00982666 95.69618225]
[163.97770691 96.67723083]
[178.94560242 97.65827179]
[193.91348267 98.63932037]
[203.73179626 86.62348175]
[218.74624634 82.70609283]
[233.18347168 88.39347076]
[241.49205017 101.49869537]
[240.47718811 116.98254395]
[230.52911377 128.89117432]
[215.47305298 132.64544678]
[201.09837341 126.80179596]
[192.93243408 113.60720825]
[177.96455383 112.62615967]
[162.99667358 111.64511108]
[148.02877808 110.66406250]
[133.06089783 109.68302155]
[127.92046356 120.17998505]
[119.56610107 128.35403442]
[108.95949554 133.26426697]
[109.61378479 148.24998474]
[110.26807404 163.23571777]
[122.32992554 169.99465942]
[129.40394592 181.74801636]
[129.72445679 195.35372925]
[123.31471252 207.23616028]
[111.95263672 214.32574463]
[112.27986145 229.32217407]
[120.31636810 242.95028687]
[112.85855103 255.84330750]
[113.18577576 270.83975220]
[113.51300049 285.83618164]
[113.84022522 300.83261108]
[114.16744995 315.82904053]
[114.49467468 330.82546997]
[114.82189178 345.82189941]
[115.14911652 360.81832886]
[123.18562317 374.44641113]
[115.72781372 387.33944702]
[116.05503082 402.33587646]
[125.02042389 416.06738281]
[117.37091064 430.57315063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 141]
[3 140]
[5 138]
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[11 132]
[12 131]
[14 129]
[15 128]
[19 123]
[20 122]
[21 121]
[24 51]
[25 50]
[26 49]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[52 81]
[53 80]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[101 118]
[102 117]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
