%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACUGAAGAGUGGGCGGCGCAAAUGGGCGAGGUGUUUACUCGCCAUUUUGUGUGAGGAACGUUGACGCUACCUACCUCUGGCCUGGCCUCUACCCACUGCUGCCCUGGCCGCUACCAAC\
) } def
/len { sequence length } bind def

/coor [
[113.14186859 255.48483276]
[113.14212036 240.48532104]
[113.14212036 225.48532104]
[105.64212036 225.48532104]
[99.28340149 239.07086182]
[92.92469025 252.65638733]
[94.86892700 268.93988037]
[81.57879639 278.54739380]
[66.72605133 271.59558105]
[65.58992004 255.23582458]
[79.33915710 246.29768372]
[85.69786835 232.71214294]
[92.05658722 219.12660217]
[95.12487030 204.44377136]
[94.73864746 189.44874573]
[94.35243225 174.45372009]
[93.96620941 159.45869446]
[93.57999420 144.46366882]
[93.19377136 129.46864319]
[92.80755615 114.47360992]
[83.95955658 102.36109924]
[69.79222107 97.43296814]
[55.62488174 92.50482941]
[41.45754242 87.57669067]
[27.29020309 82.64855957]
[13.19576454 89.28063965]
[-1.10172808 84.08099365]
[-7.33754778 70.60322571]
[-21.50488663 65.67509460]
[-35.67222595 60.74695587]
[-49.83956146 55.81882095]
[-64.00690460 50.89068604]
[-78.17424011 45.96255112]
[-91.50994873 54.12911987]
[-106.96732330 51.76193237]
[-117.24786377 39.97870255]
[-117.49741364 24.34310913]
[-107.59814453 12.23780441]
[-92.22418213 9.37854004]
[-78.63465118 17.11537552]
[-73.24610138 31.79521179]
[-59.07876587 36.72334671]
[-44.91142654 41.65148163]
[-30.74408913 46.57962036]
[-16.57674980 51.50775528]
[-2.40941238 56.43589020]
[10.84464645 49.73771667]
[25.28254509 54.53372955]
[32.21833801 68.48121643]
[46.38567734 73.40935516]
[60.55301666 78.33749390]
[74.72035217 83.26562500]
[88.88769531 88.19376373]
[103.52980804 84.93669128]
[114.27208710 74.46752930]
[125.01437378 63.99837112]
[129.04011536 55.66357040]
[136.17062378 53.40238571]
[147.17889404 43.21328354]
[144.66806030 33.56554794]
[145.90541077 23.73242188]
[150.67164612 15.10980606]
[158.24963379 8.90555000]
[167.53195190 5.97031116]
[177.18275452 6.68109322]
[185.82981873 10.89340115]
[197.82740784 1.89018679]
[204.22128296 -12.58147049]
[219.04510498 -14.03196430]
[231.04269409 -23.03517914]
[243.04028320 -32.03839111]
[255.03787231 -41.04160690]
[266.79965210 -50.35074997]
[278.31787109 -59.95964813]
[278.18167114 -75.59663391]
[288.16845703 -87.62985992]
[303.56274414 -90.37759399]
[317.09582520 -82.54244232]
[322.37780762 -67.82392883]
[316.91467285 -53.17168045]
[303.28598022 -45.50404358]
[287.92675781 -48.44144058]
[276.40856934 -38.83254242]
[275.09368896 -34.12835312]
[270.73818970 -30.24781609]
[264.04107666 -29.04401779]
[252.04348755 -20.04080391]
[240.04589844 -11.03759003]
[228.04830933 -2.03437543]
[222.51257324 11.79331112]
[206.83062744 13.88777542]
[194.83303833 22.89098930]
[193.85215759 43.20317459]
[178.14598083 56.56815720]
[157.36799622 54.22156525]
[146.35971069 64.41066742]
[135.48353577 74.74065399]
[124.74124908 85.20981598]
[113.99897003 95.67897797]
[114.26431274 105.74369049]
[107.80258179 114.08739471]
[108.18880463 129.08242798]
[108.57501984 144.07745361]
[108.96124268 159.07247925]
[109.34745789 174.06750488]
[109.73367310 189.06253052]
[110.11989594 204.05755615]
[149.22766113 219.12660217]
[155.58636475 232.71214294]
[161.94508362 246.29768372]
[176.88749695 251.44549561]
[183.73812866 265.68783569]
[178.43261719 280.57498169]
[164.11863708 287.27465820]
[149.28840637 281.81204224]
[142.74046326 267.42803955]
[148.35955811 252.65638733]
[142.00083923 239.07086182]
[135.64212036 225.48532104]
[128.14212036 225.48532104]
[128.14212036 240.48532104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[14 107]
[15 106]
[16 105]
[17 104]
[18 103]
[19 102]
[20 101]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[54 99]
[55 98]
[56 97]
[58 96]
[59 95]
[66 92]
[67 91]
[69 89]
[70 88]
[71 87]
[72 86]
[73 83]
[74 82]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
