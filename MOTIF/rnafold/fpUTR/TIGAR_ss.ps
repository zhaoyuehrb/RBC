%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGGUGUGGGGGAGGUAGCCCGCAGUGCAGGGGCAGCGCGGCGCGGGGCCACCGACGGGACGCGGCUCCGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[20.61100960 200.95190430]
[10.68721676 189.70385742]
[6.85821104 175.20080566]
[9.93645000 160.52005005]
[19.26862335 148.77676392]
[4.37259579 150.53982544]
[-10.52343082 152.30288696]
[-23.31852531 161.60859680]
[-36.86700058 155.42085266]
[-51.76302719 157.18391418]
[-66.65904999 158.94697571]
[-81.55507660 160.71003723]
[-96.45110321 162.47309875]
[-111.34712982 164.23616028]
[-118.81132507 177.84004211]
[-132.86047363 184.42799377]
[-148.09237671 181.46682739]
[-158.65008545 170.09516907]
[-160.47392273 154.68565369]
[-152.86259460 141.16355896]
[-138.74279785 134.72839355]
[-123.54391479 137.85461426]
[-113.11019135 149.34013367]
[-98.21416473 147.57707214]
[-83.31813812 145.81401062]
[-68.42211151 144.05094910]
[-53.52608871 142.28788757]
[-38.63005829 140.52482605]
[-26.90043068 131.34523010]
[-12.28649235 137.40686035]
[2.60953498 135.64379883]
[17.50556183 133.88073730]
[23.95966530 128.56457520]
[33.33807755 128.73645020]
[46.42551422 121.40712738]
[59.51295471 114.07780457]
[72.60039520 106.74848938]
[85.68783569 99.41916656]
[93.00101471 87.50241852]
[106.98284149 87.49339294]
[120.07028198 80.16407013]
[133.15773010 72.83475494]
[135.09884644 57.55279541]
[145.54415894 46.47359467]
[160.33549500 43.70218658]
[173.76176453 50.09540176]
[186.84919739 42.76608276]
[199.79022217 35.18122101]
[212.57981873 27.34374428]
[225.36941528 19.50626564]
[230.49766541 4.30492878]
[245.62846375 -1.02784610]
[259.15475464 7.59878969]
[260.70034790 23.56721878]
[249.07955933 34.62783051]
[233.20689392 32.29586792]
[220.41729736 40.13334656]
[207.62770081 47.97082520]
[203.46066284 54.31859207]
[194.17851257 55.85352325]
[181.09107971 63.18284225]
[179.52697754 77.97106934]
[169.43551636 89.13468933]
[154.53128052 92.25192261]
[140.48704529 85.92219543]
[127.39960480 93.25151062]
[114.31216431 100.58083344]
[106.99898529 112.49758148]
[93.01715851 112.50660706]
[79.92971802 119.83592987]
[66.84227753 127.16524506]
[53.75483322 134.49456787]
[40.66739273 141.82388306]
[55.11998367 145.83918762]
[66.23940277 155.90689087]
[71.66626740 169.89077759]
[70.24909210 184.82366943]
[62.28857422 197.53706360]
[49.47381210 205.33332825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 32]
[6 31]
[7 30]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[40 67]
[41 66]
[42 65]
[46 61]
[47 60]
[48 58]
[49 57]
[50 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
