%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUGACCAAUAGGAGACCGUAGUGAUAGCGACGGGGAAAUUCAAACGUGUUUGCGGAAAGGAGUUUGGGUUCCAUCUUUUCAUUUCCCCAGCGCAGCUUUCUGUAGUUUUUUUCUUAGAA\
) } def
/len { sequence length } bind def

/coor [
[62.43472672 624.73535156]
[47.48390579 626.76892090]
[32.51631927 624.86267090]
[18.55248833 619.14660645]
[6.54448414 610.01037598]
[-2.68896484 598.07696533]
[-8.51830673 584.16003418]
[-10.54608822 569.20843506]
[-8.63405132 554.24157715]
[-2.91256142 540.27996826]
[6.22828007 528.27551270]
[18.16523552 519.04663086]
[32.08442307 513.22265625]
[47.03681183 511.20068359]
[48.93189240 496.32086182]
[50.82696915 481.44107056]
[52.72204971 466.56124878]
[54.61712646 451.68142700]
[56.51220703 436.80163574]
[58.40728378 421.92181396]
[49.11551666 410.33740234]
[50.82542801 395.22018433]
[63.03923035 385.55267334]
[64.93431091 370.67285156]
[66.82938385 355.79302979]
[53.29592896 347.39566040]
[44.72519684 333.90261841]
[42.86281204 317.96813965]
[48.12888336 302.75277710]
[59.52456284 291.29650879]
[74.82109070 285.91131592]
[76.33861542 270.98828125]
[77.85614014 256.06524658]
[68.27389526 244.71992493]
[69.60029602 229.56422424]
[81.56526947 219.59040833]
[83.08279419 204.66735840]
[84.60031891 189.74432373]
[86.11784363 174.82128906]
[87.63536835 159.89823914]
[89.15289307 144.97520447]
[90.67041779 130.05216980]
[92.18794250 115.12912750]
[80.43283081 124.44670105]
[65.62516022 122.05235291]
[57.40553665 109.50492859]
[61.12538528 94.97349548]
[74.36287689 87.91880035]
[88.49936676 92.93353271]
[82.23673248 79.30343628]
[75.97409821 65.67334747]
[62.28831100 56.63834000]
[63.53992462 40.28702545]
[78.44138336 33.44023514]
[91.66334534 43.14135742]
[89.60418701 59.41071320]
[95.86682129 73.04080200]
[102.12945557 86.67089844]
[117.12464142 87.05088806]
[124.06959534 73.75548553]
[131.01454163 60.46008682]
[137.95948792 47.16468430]
[144.90443420 33.86928558]
[151.84939575 20.57388496]
[158.79434204 7.27848387]
[158.54989624 1.83334219]
[160.31135559 -2.66564488]
[163.35281372 -5.59704590]
[166.80516052 -6.73296118]
[174.73962402 -19.46262550]
[182.67407227 -32.19228745]
[185.92121887 -48.83237457]
[202.80990601 -50.31856918]
[208.91326904 -34.50131989]
[195.40374756 -24.25782967]
[187.46928406 -11.52816486]
[179.53482056 1.20149887]
[172.08973694 14.22343349]
[165.14479065 27.51883316]
[158.19984436 40.81423569]
[151.25489807 54.10963440]
[144.30993652 67.40503693]
[137.36499023 80.70043945]
[130.42004395 93.99583435]
[107.11098480 116.64665222]
[105.59346008 131.56968689]
[104.07593536 146.49272156]
[102.55841064 161.41577148]
[101.04088593 176.33880615]
[99.52336121 191.26184082]
[98.00583649 206.18489075]
[96.48831177 221.10792542]
[106.20064545 233.28611755]
[104.44908142 248.39859009]
[92.77918243 257.58276367]
[91.26165771 272.50579834]
[89.74413300 287.42883301]
[102.11330414 294.38964844]
[110.85180664 305.51867676]
[114.65632629 319.10229492]
[112.98007965 333.06494141]
[106.11109161 345.28628540]
[95.12339783 353.92330933]
[81.70919800 357.68811035]
[79.81411743 372.56793213]
[77.91903687 387.44772339]
[87.31974792 399.86807251]
[85.18590546 414.93130493]
[73.28709412 423.81689453]
[71.39201355 438.69671631]
[69.49693298 453.57650757]
[67.60186005 468.45632935]
[65.70677948 483.33612061]
[63.81169891 498.21594238]
[61.91661835 513.09576416]
[75.88486481 518.80108643]
[87.89991760 527.92797852]
[97.14257812 539.85424805]
[102.98266602 553.76666260]
[105.02199554 568.71673584]
[103.12151337 583.68505859]
[97.41080475 597.65106201]
[88.27923584 609.66259766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[19 110]
[20 109]
[23 106]
[24 105]
[25 104]
[31 97]
[32 96]
[33 95]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[49 58]
[50 57]
[51 56]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
