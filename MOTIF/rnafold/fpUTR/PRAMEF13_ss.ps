%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACAGCACUCAUUCCUGGAGCUACUGCUUGGUUCCCUGAGAGGUCCCAGAACUCUGCAAAGUGAGUCCAGCGCUGAGAUUUUUCUUGCAGAUCUAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[24.48775291 163.95875549]
[9.56180763 165.87712097]
[-3.47562218 158.72425842]
[-16.96194458 165.29077148]
[-30.44826508 171.85729980]
[-36.92611313 178.53877258]
[-44.44254684 178.41154480]
[-58.12104416 184.56773376]
[-71.79954529 190.72393799]
[-85.47804260 196.88012695]
[-98.75988007 203.85096741]
[-111.59660339 211.61103821]
[-124.43331909 219.37110901]
[-126.65915680 234.84947205]
[-138.34794617 245.23725891]
[-153.98060608 245.62966919]
[-166.17587280 235.84143066]
[-169.17550659 220.49424744]
[-161.56317139 206.83457947]
[-146.93319702 201.31211853]
[-132.19338989 206.53439331]
[-119.35666656 198.77432251]
[-106.51995087 191.01425171]
[-105.77266693 188.14566040]
[-103.74707031 185.42941284]
[-100.50665283 183.39268494]
[-96.31899261 182.52467346]
[-91.63423157 183.20162964]
[-77.95573425 177.04544067]
[-64.27723694 170.88923645]
[-50.59873962 164.73304749]
[-37.01478195 158.37097168]
[-23.52845955 151.80445862]
[-10.04213810 145.23794556]
[-7.63232183 130.56378174]
[3.08290172 119.99742889]
[18.14140892 117.74027252]
[31.79943466 124.86519623]
[45.28575516 118.29868317]
[58.77207947 111.73217010]
[72.25839996 105.16564941]
[85.74472046 98.59913635]
[93.72943878 87.12151337]
[107.68876648 87.91454315]
[121.17508698 81.34802246]
[134.66140747 74.78150940]
[120.41439056 70.08868408]
[110.80092621 58.57429123]
[108.72655487 43.71841812]
[114.81823730 30.01107025]
[127.23483276 21.59512520]
[142.22358704 21.01420021]
[155.25431824 28.44387436]
[162.38864136 41.63861847]
[161.47032166 56.61048126]
[152.77587891 68.83520508]
[167.53018188 66.13137817]
[182.28446960 63.42755508]
[197.03877258 60.72372818]
[211.79307556 58.01990509]
[226.54736328 55.31607819]
[241.30166626 52.61225128]
[248.07986450 38.77887726]
[261.54647827 31.67229462]
[276.43936157 33.83247375]
[287.07714844 44.22358322]
[301.83145142 41.51975632]
[316.58575439 38.81592941]
[331.34005737 36.11210632]
[346.09436035 33.40827942]
[360.80615234 30.48192406]
[375.47204590 27.33370781]
[387.26736450 15.94062996]
[402.95501709 20.71863556]
[406.39691162 36.75252533]
[394.05227661 47.54800415]
[378.62026978 41.99961090]
[363.95434570 45.14782715]
[357.97564697 49.70501328]
[348.79818726 48.16257858]
[334.04388428 50.86640167]
[319.28958130 53.57022858]
[304.53527832 56.27405548]
[289.78097534 58.97787857]
[283.51919556 72.46595001]
[270.36013794 79.76683807]
[255.24859619 77.89739990]
[244.00549316 67.36655426]
[229.25119019 70.07037354]
[214.49690247 72.77420044]
[199.74259949 75.47802734]
[184.98829651 78.18185425]
[170.23400879 80.88568115]
[155.47970581 83.58950806]
[141.22792053 88.26782990]
[127.74160004 94.83435059]
[114.25527954 101.40086365]
[106.27056122 112.87848663]
[92.31123352 112.08545685]
[78.82491302 118.65197754]
[65.33859253 125.21849060]
[51.85227203 131.78500366]
[38.36595154 138.35151672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 23]
[12 22]
[13 21]
[38 103]
[39 102]
[40 101]
[41 100]
[42 99]
[44 97]
[45 96]
[46 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
