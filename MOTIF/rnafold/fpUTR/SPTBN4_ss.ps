%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGGCCGGGCAGCGGACGCCGACAGGGAGGGCGGUCGGUCGCGGCGAGCAGCGGAGACAGCGACGCUGGCGGCCGCGGGCCCAGGCCUCACCUUCCCCG\
) } def
/len { sequence length } bind def

/coor [
[-2.32133698 219.06698608]
[-12.34695721 230.22436523]
[-22.37257767 241.38172913]
[-19.40993690 253.10443115]
[-22.52156258 264.66323853]
[-30.79984665 273.14123535]
[-42.04916000 276.45901489]
[-53.36729050 273.88378906]
[-64.05445862 284.40921021]
[-74.74163055 294.93463135]
[-76.30130005 310.90167236]
[-89.83520508 319.51638794]
[-104.96128845 314.17025757]
[-110.07611847 298.96441650]
[-101.25603485 285.56344604]
[-85.26704407 284.24746704]
[-74.57987976 273.72204590]
[-63.89270782 263.19662476]
[-64.96318817 245.04780579]
[-52.33885193 231.53141785]
[-33.52994919 231.35610962]
[-23.50432968 220.19874573]
[-13.47870827 209.04136658]
[-17.47652817 196.20483398]
[-14.54361439 182.97248840]
[-5.34987879 172.86639404]
[7.75383615 168.63131714]
[21.33619118 171.48989868]
[31.69740486 160.64346313]
[42.05862045 149.79702759]
[52.41983414 138.95057678]
[62.78104782 128.10414124]
[73.14226532 117.25770569]
[83.50347900 106.41126251]
[86.83536530 88.17072296]
[104.61705780 82.91426849]
[114.29776001 71.45633698]
[123.97845459 59.99841690]
[133.65916443 48.54048920]
[142.98593140 36.79267120]
[151.95010376 24.76588440]
[160.91427612 12.73909855]
[169.87844849 0.71231157]
[178.65817261 -11.44977856]
[187.25140381 -23.74434471]
[195.84465027 -36.03890991]
[204.43788147 -48.33347702]
[213.03111267 -60.62804031]
[208.12791443 -75.23163605]
[212.71040344 -89.75245667]
[224.82131958 -98.68494415]
[239.69177246 -98.77217102]
[248.28501892 -111.06673431]
[256.87823486 -123.36129761]
[265.47146606 -135.65586853]
[274.06469727 -147.95042419]
[267.48937988 -161.83064270]
[268.75106812 -177.13763428]
[277.51040649 -189.75387573]
[291.41116333 -196.28567505]
[306.71411133 -194.97601318]
[319.30282593 -186.17718506]
[325.79104614 -172.25601196]
[324.43341064 -156.95724487]
[315.59515381 -144.39614868]
[301.65371704 -137.95162964]
[286.35928345 -139.35719299]
[277.76605225 -127.06262970]
[269.17282104 -114.76806641]
[260.57958984 -102.47350311]
[251.98634338 -90.17893219]
[257.01409912 -76.18394470]
[252.78695679 -61.74111938]
[240.72486877 -52.44813538]
[225.32566833 -52.03480911]
[216.73243713 -39.74024200]
[208.13920593 -27.44567680]
[199.54597473 -15.15111160]
[190.95274353 -2.85654569]
[189.67918396 4.55478382]
[181.90524292 9.67648506]
[172.94107056 21.70327187]
[163.97689819 33.73005676]
[155.01272583 45.75684357]
[154.84120178 50.68642426]
[151.45408630 55.51725769]
[145.11708069 58.22119141]
[135.43638611 69.67911530]
[125.75568390 81.13703918]
[116.07498169 92.59496307]
[117.49938965 102.64783478]
[113.16463470 111.82927704]
[104.49732971 117.11763763]
[94.34991455 116.77248383]
[83.98870087 127.61891937]
[73.62748718 138.46536255]
[63.26627350 149.31179810]
[52.90505981 160.15823364]
[42.54384613 171.00466919]
[32.18262863 181.85112000]
[35.45454025 198.36256409]
[28.36775398 213.44831848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[8 18]
[9 17]
[10 16]
[28 100]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[36 90]
[37 89]
[38 88]
[39 87]
[40 84]
[41 83]
[42 82]
[43 81]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
