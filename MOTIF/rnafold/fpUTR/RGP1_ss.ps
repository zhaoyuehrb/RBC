%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGGAAGUCCCGCCUCUACCGCCCAGCGGACGCCGCCGCCGCCGCCGCCGCCGCGUACCUAGCCAGGUCCCUGAGGGGCGGGCAGAUGAGGCCUAGGGGUGCCGAUCCCUAGUGUCGACUAUGCGAGAUCUGAUUCCGGAGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[89.41434479 142.32908630]
[76.49867249 134.70114136]
[79.76169586 120.06101990]
[72.29542542 120.77155304]
[67.03326416 134.81825256]
[61.77110291 148.86494446]
[64.99957275 164.94316101]
[52.51257324 175.57362366]
[37.15565109 169.82061768]
[34.72669601 153.60235596]
[47.72440720 143.60278320]
[52.98656845 129.55609131]
[58.24872971 115.50939178]
[54.49388123 100.98695374]
[43.08265686 91.25125122]
[31.67143440 81.51554108]
[20.26021194 71.77983856]
[8.84898853 62.04412842]
[-11.88059711 65.15756226]
[-28.03413773 52.25807190]
[-29.54088211 31.93181992]
[-41.73166275 23.19197655]
[-53.92244339 14.45213413]
[-66.11322784 5.71229076]
[-78.30400848 -3.02755237]
[-90.49478912 -11.76739502]
[-105.89066315 -9.39997196]
[-118.12934875 -18.43707848]
[-120.29144287 -33.12928391]
[-132.48222351 -41.86912918]
[-144.67300415 -50.60897064]
[-158.01649475 -57.46106339]
[-172.22256470 -62.27641678]
[-186.42863464 -67.09176636]
[-200.63470459 -71.90711975]
[-216.18830872 -69.00952911]
[-225.75808716 -80.42304993]
[-239.96415710 -85.23840332]
[-255.51776123 -82.34081268]
[-265.08752441 -93.75434113]
[-279.29360962 -98.56968689]
[-292.56396484 -90.29736328]
[-308.03967285 -92.54159546]
[-318.41357422 -104.24272156]
[-318.78741455 -119.87583923]
[-308.98468018 -132.05946350]
[-293.63394165 -135.04084778]
[-279.98333740 -127.41229248]
[-274.47824097 -112.77575684]
[-260.27218628 -107.96040344]
[-245.73469543 -111.20243073]
[-235.14880371 -99.44447327]
[-220.94273376 -94.62911987]
[-206.40524292 -97.87113953]
[-195.81935120 -86.11318970]
[-181.61328125 -81.29783630]
[-167.40721130 -76.48248291]
[-153.20114136 -71.66712952]
[-143.10946655 -82.76479340]
[-149.24902344 -96.45076752]
[-155.38856506 -110.13674164]
[-161.52812195 -123.82271576]
[-175.13192749 -132.98069763]
[-173.73300171 -149.32006836]
[-158.77044678 -156.03228760]
[-145.63644409 -146.21240234]
[-147.84213257 -129.96226501]
[-141.70259094 -116.27629089]
[-135.56304932 -102.59031677]
[-129.42349243 -88.90434265]
[-128.00440979 -78.04857635]
[-130.60134888 -68.92739868]
[-135.93316650 -62.79975128]
[-123.74238586 -54.05990982]
[-111.55159760 -45.32006454]
[-96.94295502 -47.98894882]
[-84.45526123 -39.29916763]
[-81.75494385 -23.95817566]
[-69.56416321 -15.21833324]
[-57.37338257 -6.47849035]
[-45.18260193 2.26135278]
[-32.99181747 11.00119591]
[-20.80103874 19.74103928]
[-12.35077286 15.38905621]
[-2.83411360 14.44576168]
[6.41801167 17.08610535]
[14.09582329 22.98083687]
[19.09609032 31.33692360]
[20.68056297 41.00404739]
[18.58469582 50.63290405]
[29.99591827 60.36861420]
[41.40714264 70.10431671]
[52.81836319 79.84002686]
[64.22959137 89.57573700]
[120.97202301 67.71434021]
[135.27645874 63.19956589]
[149.58088684 58.68479156]
[163.88531494 54.17001724]
[178.18975830 49.65523911]
[192.49418640 45.14046478]
[206.79861450 40.62568665]
[221.10304260 36.11091232]
[231.77354431 23.65809822]
[247.84130859 26.93816948]
[252.77720642 42.57686996]
[241.50361633 54.48644257]
[225.61782837 50.41534424]
[211.31338501 54.93011856]
[197.00895691 59.44489670]
[182.70452881 63.95967102]
[168.40010071 68.47444916]
[154.09565735 72.98922729]
[139.79122925 77.50399780]
[125.48679352 82.01877594]
[122.85571289 89.04212189]
[137.57353210 91.93794250]
[152.29135132 94.83377075]
[167.24375916 96.02766418]
[175.29200745 108.68569946]
[170.02990723 122.73241425]
[155.64595032 126.98702240]
[143.58929443 118.06283569]
[130.59143066 110.57582855]
[117.59355164 103.08882141]
[114.96247101 110.11216736]
[122.77971649 122.91414642]
[129.97264099 128.65621948]
[130.62353516 136.06947327]
[138.16912842 149.03341675]
[151.79823303 157.06822205]
[151.51350403 171.96009827]
[159.05911255 184.92404175]
[166.60470581 197.88798523]
[174.15031433 210.85194397]
[188.64225769 218.52757263]
[188.97045898 234.92343140]
[174.79728699 243.17286682]
[160.70288086 234.78956604]
[161.18637085 218.39753723]
[153.64076233 205.43359375]
[146.09516907 192.46965027]
[138.54956055 179.50570679]
[125.46016693 172.39816284]
[125.20519257 156.57901001]
[117.65958405 143.61506653]
[109.97773743 130.73138428]
[102.16049194 117.92941284]
[94.69422913 118.63994598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[21 83]
[22 82]
[23 81]
[24 80]
[25 79]
[26 78]
[29 75]
[30 74]
[31 73]
[32 58]
[33 57]
[34 56]
[35 55]
[37 53]
[38 52]
[40 50]
[41 49]
[59 70]
[60 69]
[61 68]
[62 67]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[125 147]
[126 146]
[128 145]
[129 144]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
