%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCGGGGGCUUCUCGGGGUCCACGCACGCCCUGCGCCGCCAGGACCCGAGCGGAGCCUCCCCGCGGCCCGGCCGCGCCUGGUCCUGAGCGGUACC\
) } def
/len { sequence length } bind def

/coor [
[267.94250488 272.97698975]
[270.33071899 262.25650024]
[259.39620972 251.98828125]
[248.46166992 241.72007751]
[237.52714539 231.45187378]
[226.59262085 221.18367004]
[215.65808105 210.91546631]
[204.72355652 200.64724731]
[193.78903198 190.37904358]
[182.85449219 180.11083984]
[171.91996765 169.84263611]
[160.66830444 159.92295837]
[149.11061096 150.36160278]
[137.55290222 140.80023193]
[125.99520874 131.23887634]
[114.43750763 121.67752075]
[98.85577393 126.02012634]
[83.71538544 120.32652283]
[74.85612488 106.79278564]
[75.69509888 90.63899994]
[63.84277725 81.44538879]
[51.99045181 72.25178528]
[40.13812637 63.05818176]
[28.28580093 53.86457443]
[16.43347740 44.67096710]
[0.95923388 46.45578384]
[-10.92974281 36.96331787]
[-12.53592873 22.19999504]
[-24.38825417 13.00638866]
[-42.60999298 11.01728344]
[-48.76669693 -5.33340025]
[-60.90195465 -14.15017891]
[-73.03720856 -22.96695709]
[-89.40528870 -27.38537407]
[-89.69067383 -44.33692169]
[-73.48060608 -49.30381393]
[-64.22042847 -35.10221481]
[-52.08517456 -26.28543472]
[-39.94992065 -17.46865463]
[-27.84122276 -19.03362846]
[-17.62852097 -11.63228321]
[-15.19464779 1.15406322]
[-3.34232283 10.34766865]
[11.35662651 8.23190403]
[23.50753593 17.38668633]
[25.62708282 32.81864166]
[37.47940826 42.01224899]
[49.33173370 51.20585632]
[61.18405914 60.39945984]
[73.03638458 69.59306335]
[84.88871002 78.78667450]
[97.36865234 74.08798981]
[110.53838348 76.18196106]
[120.94554901 84.51967621]
[125.86197662 96.91545105]
[123.99887085 110.11981964]
[135.55656433 119.68117523]
[147.11427307 129.24253845]
[158.67196655 138.80389404]
[170.22966003 148.36526489]
[176.96160889 149.90719604]
[181.15538025 154.07536316]
[182.18817139 158.90811157]
[193.12271118 169.17631531]
[204.05723572 179.44451904]
[214.99176025 189.71272278]
[225.92630005 199.98092651]
[236.86082458 210.24914551]
[247.79534912 220.51734924]
[258.72988892 230.78555298]
[269.66439819 241.05375671]
[280.59893799 251.32196045]
[300.42813110 249.44720459]
[315.21319580 262.34463501]
[316.02243042 281.65002441]
[327.87475586 290.84362793]
[339.72708130 300.03723145]
[351.57940674 309.23083496]
[363.43173218 318.42443848]
[377.06985474 311.57141113]
[392.33096313 311.32296753]
[406.18490601 317.72848511]
[415.88101196 329.51611328]
[419.49411011 344.34542847]
[416.30679321 359.27203369]
[406.95193481 371.33227539]
[393.28692627 378.13156128]
[378.02496338 378.31988525]
[364.19631958 371.85986328]
[354.54672241 360.03411865]
[350.99206543 345.19070435]
[354.23812866 330.27676392]
[342.38580322 321.08316040]
[330.53347778 311.88955688]
[318.68115234 302.69595337]
[306.82882690 293.50234985]
[297.07281494 297.58154297]
[286.42562866 297.14285278]
[276.89306641 292.19967651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[28 43]
[29 42]
[31 39]
[32 38]
[33 37]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
