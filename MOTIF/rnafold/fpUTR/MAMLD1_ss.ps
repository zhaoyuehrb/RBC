%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGUGUCUAGGUCGUUUGGGAAACGCCUUGGAGAGUCAAGAAUAAAUUUGCAGGUCAAACA\
) } def
/len { sequence length } bind def

/coor [
[106.71912384 192.88615417]
[116.79552460 181.20413208]
[112.44125366 166.85002136]
[108.08698273 152.49592590]
[103.73271179 138.14181519]
[99.37844086 123.78771210]
[95.02417755 109.43360901]
[85.50827789 97.83844757]
[72.27945709 90.76750183]
[59.05063629 83.69654846]
[45.82181931 76.62559509]
[32.59299850 69.55464935]
[19.36417961 62.48369598]
[3.54617667 62.80202866]
[-4.03093719 49.97874451]
[-17.25975609 42.90779495]
[-30.48857498 35.83684158]
[-43.71739578 28.76589203]
[-56.94621277 21.69494057]
[-73.76530457 19.56081963]
[-76.37057495 2.80824137]
[-60.99390411 -4.33278990]
[-49.87526321 8.46612072]
[-36.64644241 15.53707218]
[-23.41762352 22.60802269]
[-10.18880463 29.67897415]
[3.04001403 36.74992371]
[17.91180420 35.92583084]
[26.43513107 49.25487518]
[39.66395187 56.32582855]
[52.89276886 63.39677811]
[66.12158966 70.46772766]
[79.35041046 77.53868103]
[92.57922363 84.60963440]
[89.28115845 69.97669983]
[90.96987915 55.07205963]
[97.45819092 41.54793930]
[108.02684021 30.90352249]
[121.50426483 24.31877327]
[136.39645386 22.52362823]
[151.05258179 25.71708679]
[163.84794617 33.54514313]
[173.36416626 45.14003372]
[178.54634094 59.21643829]
[178.82000732 74.21394348]
[174.15483093 88.47003174]
[165.06794739 100.40438080]
[152.56668091 108.69402313]
[138.03681946 112.42004395]
[123.08905029 111.16939545]
[109.37828064 105.07933807]
[113.73255157 119.43344116]
[118.08682251 133.78755188]
[122.44109344 148.14164734]
[126.79535675 162.49575806]
[131.14962769 176.84986877]
[146.01803589 180.96496582]
[156.28430176 192.48048401]
[158.67250061 207.72187805]
[152.42056274 221.82566833]
[139.52345276 230.29138184]
[124.09661102 230.41764832]
[111.06266785 222.16415405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
