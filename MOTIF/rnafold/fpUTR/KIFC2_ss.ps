%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACUGCGGCGGGCGGGCGCCGAGUCUGGGCGCGGGGACGCGGGGCGGCGCGAAGCGGGGCCCUCUGCCGCCCCGCGCUCCC\
) } def
/len { sequence length } bind def

/coor [
[141.89141846 125.39093781]
[135.26416016 138.84751892]
[121.53634644 144.89294434]
[107.13521576 140.69680786]
[98.80300903 128.22274780]
[87.80722809 138.42533875]
[76.81145477 148.62792969]
[65.81567383 158.83052063]
[63.78135681 174.74406433]
[49.99699020 182.95204163]
[35.03676224 177.15797424]
[30.37688065 161.80659485]
[39.59200668 148.67414856]
[55.61308289 147.83473206]
[66.60886383 137.63214111]
[77.60463715 127.42955780]
[88.60041809 117.22696686]
[85.81174469 102.48846436]
[71.84864044 97.00835419]
[57.88553238 91.52823639]
[43.92242432 86.04811859]
[29.95932007 80.56800842]
[16.31350708 88.20513916]
[0.96089339 85.23339081]
[-8.84948635 73.05593872]
[-8.48547077 57.42258835]
[1.88106263 45.71494293]
[17.35535431 43.46098709]
[30.63091660 51.72497559]
[35.43943405 66.60489655]
[49.40254211 72.08501434]
[63.36564636 77.56513214]
[77.32875061 83.04524231]
[91.29186249 88.52536011]
[106.28923798 88.80584717]
[120.44748688 83.85165405]
[134.60574341 78.89746857]
[148.76399231 73.94328308]
[156.04269409 68.01551056]
[163.54525757 69.07936859]
[177.87884521 64.65804291]
[192.21244812 60.23671341]
[206.54603577 55.81538391]
[220.87962341 51.39405823]
[235.21321106 46.97272873]
[249.54681396 42.55140305]
[263.88040161 38.13007355]
[278.21398926 33.70874786]
[292.54757690 29.28741837]
[306.88116455 24.86609077]
[321.21478271 20.44476318]
[328.71002197 14.79329109]
[336.16757202 16.13693428]
[350.65646362 12.25464916]
[363.21627808 -1.05350971]
[379.95599365 3.84917593]
[394.28958130 -0.57215166]
[407.64285278 -11.01853561]
[421.37753296 -1.07897854]
[415.62854004 14.87049198]
[398.71090698 13.76144028]
[384.37731934 18.18276787]
[378.33627319 28.83973694]
[366.23703003 32.54632187]
[354.53875732 26.74353600]
[340.04986572 30.62582207]
[325.63610840 34.77835464]
[311.30252075 39.19968414]
[296.96890259 43.62100983]
[282.63531494 48.04233932]
[268.30172729 52.46366501]
[253.96813965 56.88499451]
[239.63455200 61.30632019]
[225.30094910 65.72764587]
[210.96736145 70.14897919]
[196.63377380 74.57030487]
[182.30017090 78.99163055]
[167.96658325 83.41295624]
[153.71817017 88.10153198]
[139.55992126 93.05572510]
[125.40167236 98.00991058]
[111.24342346 102.96409607]
[126.21014404 101.96543121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[35 82]
[36 81]
[37 80]
[38 79]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[53 66]
[54 65]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
