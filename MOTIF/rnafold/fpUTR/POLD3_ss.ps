%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUGCGUCGCCUCCGUUGCCGGGGAAACGACCCGGGACCUGGGAGGGAGCAAAGACGUUUCCCGCCGGCGGGAGCUGUGGCUGUGAUUGAGAGAGGGGUUAGAGGCGGGUCCCAGCGCUGCCGCACC\
) } def
/len { sequence length } bind def

/coor [
[85.62448883 226.65274048]
[83.45715332 211.81013489]
[81.28981781 196.96754456]
[79.12248230 182.12493896]
[76.95513916 167.28234863]
[74.78780365 152.43975830]
[72.62046814 137.59715271]
[66.50002289 133.26240540]
[61.28611755 147.32708740]
[59.54875946 162.22613525]
[47.39614868 171.01898193]
[32.70119095 168.00929260]
[24.98380089 155.14688110]
[29.24358368 140.76445007]
[42.72227859 134.17941284]
[54.25912094 124.59289551]
[48.13867188 120.25814056]
[33.41811752 123.14004517]
[18.69756699 126.02194214]
[10.78254032 130.78628540]
[3.58672380 128.79110718]
[-11.19916725 131.31646729]
[-25.98505783 133.84182739]
[-40.77095032 136.36717224]
[-55.55684280 138.89253235]
[-63.29151535 152.48329163]
[-77.97049713 157.87417603]
[-92.66281128 152.51976013]
[-100.43121338 138.94824219]
[-97.60768127 123.56768036]
[-85.52541351 113.64030457]
[-69.88928986 113.85351562]
[-58.08219528 124.10664368]
[-43.29630661 121.58128357]
[-28.51041412 119.05593109]
[-13.72452354 116.53057098]
[1.06136811 114.00521851]
[15.81566715 111.30139160]
[30.53621864 108.41949463]
[45.25677109 105.53759003]
[51.90464401 92.09118652]
[45.25677109 78.64478302]
[38.60889816 65.19837952]
[31.96102333 51.75197601]
[17.26074600 46.60031509]
[10.71040726 32.86904907]
[15.71231937 18.88632774]
[9.06444645 5.43992376]
[2.41657305 -8.00648022]
[-4.23130035 -21.45288467]
[-10.87917328 -34.89928818]
[-17.52704620 -48.34569168]
[-32.57615280 -53.17269135]
[-39.72987366 -67.26523590]
[-34.74403763 -82.26246643]
[-20.57664490 -89.26679993]
[-5.63296556 -84.12267303]
[1.22118378 -69.88202667]
[-4.08064270 -54.99356461]
[2.56723070 -41.54716110]
[9.21510410 -28.10075760]
[15.86297703 -14.65435314]
[22.51085091 -1.20794928]
[29.15872383 12.23845482]
[43.30605316 16.75382996]
[50.23949051 30.29569435]
[45.40742874 45.10410309]
[52.05530167 58.55050659]
[58.70317459 71.99691010]
[65.35105133 85.44331360]
[98.56529236 68.34210968]
[122.78317261 87.89727020]
[137.50372314 85.01537323]
[152.22427368 82.13346863]
[166.94482422 79.25157166]
[179.00135803 69.00703430]
[192.97807312 74.15493774]
[207.69862366 71.27304077]
[222.41917419 68.39113617]
[237.13972473 65.50923920]
[242.49598694 61.35880661]
[248.27136230 60.71331787]
[252.64018250 62.86183548]
[267.48278809 60.69449997]
[280.02017212 51.04441833]
[293.73184204 56.86157608]
[308.57443237 54.69424057]
[323.41705322 52.52690506]
[338.25964355 50.35956955]
[353.10223389 48.19223404]
[360.19387817 34.39048004]
[374.05874634 27.42304993]
[389.36550903 29.96906281]
[400.22842407 41.04952240]
[402.47048950 56.40376663]
[395.22955322 70.12777710]
[381.28991699 76.94438934]
[366.01165771 74.23247528]
[355.26956177 63.03482819]
[340.42697144 65.20216370]
[325.58438110 67.36949921]
[310.74179077 69.53683472]
[295.89920044 71.70417023]
[284.42343140 81.19923401]
[269.65011597 75.53709412]
[254.80751038 77.70442963]
[240.02162170 80.22978973]
[225.30107117 83.11168671]
[210.58052063 85.99359131]
[195.85997009 88.87548828]
[184.85633850 98.91389465]
[169.82672119 93.97212219]
[155.10617065 96.85401917]
[140.38562012 99.73592377]
[125.66506958 102.61782074]
[116.95475769 126.77342987]
[87.46306610 135.42982483]
[89.63040161 150.27241516]
[91.79773712 165.11502075]
[93.96507263 179.95761108]
[96.13240814 194.80020142]
[98.29974365 209.64280701]
[100.46707916 224.48539734]
[113.86697388 232.54621887]
[118.90158081 247.35118103]
[113.19371033 261.90982056]
[99.43844604 269.34802246]
[84.13059998 266.15365601]
[74.49806976 253.83503723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[17 40]
[18 39]
[19 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[41 70]
[42 69]
[43 68]
[44 67]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[72 115]
[73 114]
[74 113]
[75 112]
[77 110]
[78 109]
[79 108]
[80 107]
[83 106]
[84 105]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
