%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:48:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGGGGUGGGCUAUAGGGCCAGAUCGCCGCGCGAGGGUGGUGGGCAUCGAGGUCCCAGCAGCGGACGAGGGAGGUGCCGCCGUCGCCCAGGAUGGGCUGGGAAUGAAGCGAUGUAGCCUUUUAAGAGAUUUGCUCUGACCCAUCUGAAGUCCAU\
) } def
/len { sequence length } bind def

/coor [
[80.51615906 455.17999268]
[75.22147369 440.95568848]
[75.42665863 425.77929688]
[81.10394287 411.70333862]
[91.48554230 400.63143921]
[105.16741180 394.06100464]
[103.96808624 379.10900879]
[102.76876068 364.15704346]
[101.56943512 349.20507812]
[100.37010956 334.25308228]
[99.17077637 319.30111694]
[97.97145081 304.34915161]
[89.57686615 298.40402222]
[85.78920746 288.60363770]
[88.09830475 278.12796021]
[95.97190857 270.52191162]
[95.37176514 255.53390503]
[94.77162170 240.54591370]
[94.17147827 225.55792236]
[93.57133484 210.56994629]
[92.97119141 195.58195496]
[89.54199219 188.98736572]
[92.51202393 180.28869629]
[92.21189117 165.29170227]
[91.91175842 150.29470825]
[91.61162567 135.29769897]
[91.31149292 120.30070496]
[79.84229279 110.63336945]
[65.01089478 112.87606812]
[50.17950058 115.11876678]
[35.34810638 117.36147308]
[20.51670837 119.60417175]
[11.34077168 132.47187805]
[-4.26001644 134.99990845]
[-17.02998352 125.68843842]
[-19.39293671 110.06179047]
[-9.94697571 97.39098358]
[5.70377731 95.19338226]
[18.27400780 104.77277374]
[33.10540390 102.53007507]
[47.93679810 100.28737640]
[62.76819611 98.04467010]
[77.59959412 95.80197144]
[88.15299988 85.14244843]
[90.24720001 70.28935242]
[92.04379272 55.39733505]
[93.54205322 40.47234726]
[95.04030609 25.54735947]
[96.53856659 10.62237358]
[98.03682709 -4.30261278]
[99.53507996 -19.22760010]
[84.74176025 -31.27786064]
[80.17038727 -49.64871597]
[87.47515869 -66.95204926]
[103.57079315 -76.33923340]
[104.17093658 -91.32721710]
[104.77108002 -106.31520844]
[105.37122345 -121.30319977]
[105.97136688 -136.29118347]
[106.57151031 -151.27917480]
[107.17165375 -166.26716614]
[92.19386292 -179.53205872]
[95.59790039 -203.26017761]
[92.03058624 -217.82980347]
[88.46327209 -232.39944458]
[84.89595795 -246.96908569]
[81.18305969 -261.50228882]
[77.32493591 -275.99765015]
[63.08772659 -282.46569824]
[56.38564301 -296.59423828]
[60.38321304 -311.71224976]
[73.19290161 -320.68139648]
[88.76636505 -319.26678467]
[99.75029755 -308.13632202]
[100.95841217 -292.54547119]
[91.82028198 -279.85574341]
[95.67839813 -265.36041260]
[100.46471405 -259.67367554]
[99.46559906 -250.53639221]
[103.03291321 -235.96676636]
[106.60021973 -221.39712524]
[110.16753387 -206.82748413]
[125.09252167 -205.32922363]
[131.48464966 -218.89907837]
[137.87677002 -232.46893311]
[144.26889038 -246.03877258]
[138.68614197 -260.82418823]
[145.26947021 -275.19204712]
[160.11308289 -280.61816406]
[174.41053772 -273.88330078]
[179.67941284 -258.98315430]
[172.79376221 -244.75769043]
[157.83872986 -239.64665222]
[151.44660950 -226.07681274]
[145.05448914 -212.50695801]
[138.66236877 -198.93710327]
[137.75639343 -176.33583069]
[122.15964508 -165.66702271]
[121.55950165 -150.67903137]
[120.95935822 -135.69104004]
[120.35921478 -120.70305634]
[119.75907135 -105.71506500]
[119.15892029 -90.72707367]
[118.55877686 -75.73908234]
[128.54223633 -70.55414581]
[135.88298035 -61.96182251]
[139.47814941 -51.19352341]
[138.76528931 -39.81172180]
[133.81010437 -29.48326302]
[125.30232239 -21.73526573]
[114.46006775 -17.72934151]
[112.96180725 -2.80435467]
[111.46355438 12.12063217]
[109.96529388 27.04561806]
[108.46703339 41.97060394]
[106.96878052 56.89559174]
[109.28120422 61.13249969]
[108.91732025 66.87463379]
[105.10029602 72.38355255]
[103.00608826 87.23664856]
[106.95809174 87.86786652]
[110.76370239 89.75620270]
[114.01763153 92.85766602]
[116.33187866 96.99733734]
[117.37779236 101.87698364]
[116.92471313 107.09606934]
[114.87113953 112.18458557]
[111.26470184 116.64516449]
[106.30848694 120.00057220]
[106.60861969 134.99757385]
[106.90875244 149.99456787]
[107.20888519 164.99156189]
[107.50901794 179.98855591]
[107.95917511 194.98181152]
[108.55932617 209.96980286]
[109.15946960 224.95777893]
[109.75961304 239.94577026]
[110.35975647 254.93376160]
[110.95989990 269.92175293]
[122.51260376 286.39645386]
[112.92343140 303.14981079]
[114.12275696 318.10177612]
[115.32208252 333.05377197]
[116.52140808 348.00573730]
[117.72074127 362.95773315]
[118.92006683 377.90969849]
[120.11939240 392.86166382]
[134.67364502 397.16723633]
[146.68734741 406.44277954]
[154.53573608 419.43380737]
[157.15737915 434.38345337]
[154.19773865 449.26983643]
[146.05705261 462.07974243]
[133.83628845 471.08071899]
[119.18822479 475.05548096]
[104.09387970 473.46643066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[23 133]
[24 132]
[25 131]
[26 130]
[27 129]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[44 120]
[45 119]
[46 116]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
[55 104]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[63 82]
[64 81]
[65 80]
[66 79]
[67 77]
[68 76]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
