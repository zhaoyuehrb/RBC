%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCAUGGCAACGCGCGUACACAGGCCGGCCGGGCGGGCGGGGUGCCGGGUGCGAGCUGGAGACUCCGCGGGAGCGCGGCCGGGAGGCUUCGCCCCGGAGCUGGCCCGACGCCUCCCGAGCUGGCAGGGCUCUCGGCGGAGGUCGGAGCGUGGGCUUCCUCCUCCCGCCAGGGAAAACAGAGAGG\
) } def
/len { sequence length } bind def

/coor [
[91.13182831 117.23738861]
[82.35608673 129.40235901]
[73.58035278 141.56732178]
[64.80461884 153.73229980]
[62.31357956 162.54376221]
[55.77651215 166.02693176]
[46.79656601 178.04194641]
[37.81662369 190.05696106]
[28.83668137 202.07197571]
[27.67289162 208.61610413]
[23.93028259 212.92927551]
[19.34494781 214.33428955]
[9.96432972 226.03915405]
[7.03019571 234.71315002]
[0.32509628 237.86074829]
[-9.25187206 249.40551758]
[-5.28290892 264.40640259]
[-10.92063618 278.86309814]
[-23.99723434 287.21667480]
[-39.48448181 286.25500488]
[-51.42721939 276.34793091]
[-55.23321533 261.30484009]
[-49.43899155 246.91017151]
[-36.27254486 238.69894409]
[-20.79664040 239.82853699]
[-11.21967220 228.28378296]
[-1.74054170 216.65853882]
[7.64007521 204.95367432]
[16.82166481 193.09202576]
[25.80160904 181.07701111]
[34.78155136 169.06199646]
[43.76149368 157.04698181]
[52.63965225 144.95655823]
[61.41538620 132.79159546]
[70.19112396 120.62661743]
[78.96685791 108.46165466]
[80.17832184 104.71729279]
[81.98581696 101.53113556]
[67.40322876 98.01714325]
[52.82064056 94.50314331]
[38.23805618 90.98915100]
[23.65546799 87.47515106]
[9.07288265 83.96115112]
[-5.50970411 80.44715881]
[-23.03171921 86.07641602]
[-35.28099823 73.52270508]
[-49.92085266 70.25550079]
[-64.56070709 66.98829651]
[-79.20056915 63.72109604]
[-91.50930786 73.36624146]
[-107.13632202 72.79128265]
[-118.70300293 62.26769638]
[-120.74791718 46.76439285]
[-112.30552673 33.60156631]
[-97.36206818 28.99429512]
[-82.97337341 35.11799240]
[-75.93336487 49.08123779]
[-61.29350662 52.34844208]
[-46.65365219 55.61564636]
[-32.01379395 58.88285065]
[-21.62413025 52.66086960]
[-9.38972664 55.27872086]
[-1.99570715 65.86457062]
[12.58687878 69.37857056]
[27.16946602 72.89256287]
[41.75205231 76.40656281]
[56.33463669 79.92055511]
[70.91722107 83.43455505]
[85.49980927 86.94855499]
[98.55307007 79.55852509]
[103.04351044 65.24643707]
[107.53395844 50.93434525]
[112.02440643 36.62225723]
[116.51485443 22.31016731]
[121.00530243 7.99807930]
[125.13174438 -6.42317152]
[128.89152527 -20.94432831]
[132.52854919 -35.49671936]
[136.04255676 -50.07930374]
[139.55654907 -64.66188812]
[142.94726562 -79.27363586]
[146.21447754 -93.91349030]
[149.48167419 -108.55334473]
[152.74887085 -123.19319916]
[156.01608276 -137.83305359]
[159.28327942 -152.47291565]
[162.55049133 -167.11276245]
[165.81768799 -181.75262451]
[161.27201843 -196.90675354]
[171.59573364 -207.64315796]
[174.86293030 -222.28300476]
[178.13014221 -236.92286682]
[169.92210388 -250.16166687]
[173.44406128 -264.96203613]
[186.11581421 -272.70553589]
[189.38302612 -287.34539795]
[192.65022278 -301.98526001]
[187.22732544 -317.46182251]
[198.12269592 -329.71838379]
[214.12811279 -326.14642334]
[218.77856445 -310.42047119]
[207.29008484 -298.71804810]
[204.02287292 -284.07818604]
[200.75567627 -269.43835449]
[208.93276978 -257.04193115]
[205.82791138 -242.14851379]
[192.76998901 -233.65567017]
[189.50279236 -219.01580811]
[186.23558044 -204.37594604]
[191.01493835 -190.26896667]
[180.45755005 -178.48542786]
[177.19033813 -163.84556580]
[173.92314148 -149.20570374]
[170.65592957 -134.56585693]
[167.38873291 -119.92599487]
[164.12153625 -105.28614044]
[160.85432434 -90.64628601]
[157.58712769 -76.00643158]
[159.20231628 -68.77753448]
[154.13912964 -61.14789581]
[150.62513733 -46.56530762]
[147.11114502 -31.98272133]
[148.60400391 -24.72757912]
[143.41268921 -17.18453979]
[139.65289307 -2.66338372]
[141.13398743 0.55912519]
[141.11466980 4.66330957]
[139.19581604 8.93004417]
[135.31738281 12.48852634]
[130.82695007 26.80061531]
[126.33649445 41.11270523]
[121.84604645 55.42479324]
[117.35560608 69.73688507]
[112.86515808 84.04897308]
[119.01245880 97.73146820]
[132.69496155 103.87876892]
[146.37744141 110.02607727]
[160.05993652 116.17337799]
[173.74243164 122.32068634]
[187.47636414 128.35221863]
[201.26072693 134.26756287]
[215.04508972 140.18289185]
[229.57229614 134.56167603]
[243.46733093 140.75703430]
[248.73678589 154.64114380]
[262.52114868 160.55647278]
[276.30551147 166.47181702]
[290.08987427 172.38716125]
[303.87426758 178.30249023]
[320.08621216 175.83184814]
[330.11917114 188.80380249]
[323.65206909 203.87393188]
[307.33770752 205.53936768]
[297.95892334 192.08685303]
[284.17456055 186.17152405]
[270.39016724 180.25617981]
[256.60580444 174.34085083]
[242.82144165 168.42550659]
[229.12786865 174.17193604]
[215.06430054 168.36930847]
[209.12976074 153.96726990]
[195.34538269 148.05192566]
[181.56101990 142.13658142]
[174.15817261 142.38861084]
[167.59513855 136.00317383]
[153.91264343 129.85586548]
[140.23014832 123.70856476]
[126.54765320 117.56126404]
[112.86515808 111.41395569]
[121.92549896 123.36846161]
[130.98583984 135.32296753]
[144.14489746 142.52291870]
[153.85539246 153.95561218]
[158.83082581 168.10639954]
[158.41204834 183.10055542]
[152.65455627 196.95158386]
[142.32109070 207.82447815]
[128.78068542 214.27873230]
[113.82721710 215.45928955]
[99.44176483 211.20971680]
[87.53016663 202.09304810]
[79.67050934 189.31706238]
[76.90406799 174.57437134]
[79.59735107 159.81814575]
[87.39335632 147.00354004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[6 32]
[7 31]
[8 30]
[9 29]
[12 28]
[13 27]
[15 26]
[16 25]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[46 60]
[47 59]
[48 58]
[49 57]
[70 134]
[71 133]
[72 132]
[73 131]
[74 130]
[75 129]
[76 125]
[77 124]
[78 122]
[79 121]
[80 120]
[81 118]
[82 117]
[83 116]
[84 115]
[85 114]
[86 113]
[87 112]
[88 111]
[90 109]
[91 108]
[92 107]
[95 104]
[96 103]
[97 102]
[135 169]
[136 168]
[137 167]
[138 166]
[139 165]
[140 163]
[141 162]
[142 161]
[145 158]
[146 157]
[147 156]
[148 155]
[149 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
