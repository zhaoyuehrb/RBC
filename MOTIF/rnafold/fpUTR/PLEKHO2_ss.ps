%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUUCUUGGGCCCCCGGCAGCCGGCGGGACAGAACGCGGAGAGUCGCCGCCUGGCCGGGCGUAGACGCGGUGGCAGAGCCCGCGCGGCGCUGGAAGCGAGUGGCGGAGCGGCGGGACCUCGGCGGACUCGCC\
) } def
/len { sequence length } bind def

/coor [
[-23.61270905 338.22387695]
[-35.38327408 328.92581177]
[-42.46609116 315.70333862]
[-43.68460083 300.75292969]
[-38.83469391 286.55517578]
[-51.07171249 295.23016357]
[-63.30873108 303.90515137]
[-68.56113434 311.49285889]
[-75.93295288 312.63571167]
[-88.36851501 321.02362061]
[-91.61812592 333.56750488]
[-102.22474670 340.28689575]
[-114.16445923 338.01538086]
[-126.79183197 346.11163330]
[-139.41920471 354.20788574]
[-151.95152283 362.45053101]
[-164.38708496 370.83840942]
[-176.82264709 379.22631836]
[-189.25820923 387.61419678]
[-199.00837708 401.48397827]
[-215.03523254 395.95437622]
[-214.15841675 379.02313232]
[-197.64610291 375.17864990]
[-185.21054077 366.79074097]
[-172.77497864 358.40286255]
[-160.33941650 350.01495361]
[-156.51826477 343.60803223]
[-147.51547241 341.58050537]
[-134.88809204 333.48425293]
[-122.26071930 325.38800049]
[-115.10992432 309.40484619]
[-96.75640869 308.58804321]
[-84.32084656 300.20016479]
[-71.98371887 291.66812134]
[-59.74669647 282.99313354]
[-47.50967789 274.31817627]
[-36.71958160 263.89828491]
[-27.62281609 251.97148132]
[-18.52605057 240.04466248]
[-16.95967102 225.23265076]
[-2.43845248 218.95214844]
[6.65831375 207.02532959]
[15.75508022 195.09851074]
[17.32462120 187.80561829]
[25.20490456 183.00329590]
[34.57673264 171.29138184]
[43.94855881 159.57946777]
[45.68737411 152.32507324]
[53.67726898 147.70741272]
[63.31908035 136.21675110]
[72.96089935 124.72608185]
[82.60270691 113.23541260]
[92.24452209 101.74474335]
[81.97335052 97.88206482]
[74.53492737 87.53549957]
[72.95855713 72.52062225]
[71.91220856 57.55716324]
[70.86585999 42.59370041]
[69.81951141 27.63023949]
[59.16360092 12.66459846]
[67.35603333 -2.81051397]
[65.96178436 -17.74557495]
[64.56753540 -32.68063736]
[54.64712524 -45.73887253]
[61.24430084 -60.75251007]
[77.57244873 -62.27680969]
[86.83457947 -48.74369812]
[79.50260162 -34.07488632]
[80.89685059 -19.13982391]
[82.29109192 -4.20476198]
[91.43190002 3.80536771]
[92.66703033 16.30037880]
[84.78297424 26.58389282]
[85.82932281 41.54735184]
[86.87566376 56.51081467]
[87.92201233 71.47427368]
[94.04052734 75.81176758]
[107.67177582 69.55166626]
[106.27754211 84.48675537]
[112.39604950 88.82424164]
[126.86210632 84.85773468]
[141.28103638 80.72317505]
[155.65087891 76.42112732]
[170.02072144 72.11907196]
[184.39056396 67.81702423]
[188.01774597 52.95799637]
[198.52606201 41.98202515]
[213.02105713 37.76759720]
[227.58195496 41.35039902]
[238.32212830 51.67097855]
[252.69197083 47.36893082]
[267.06179810 43.06687927]
[281.43164062 38.76483154]
[294.87127686 28.42978859]
[308.52285767 38.48315048]
[302.64154053 54.38429260]
[285.73370361 53.13467407]
[271.36386108 57.43672180]
[256.99401855 61.73877335]
[242.62417603 66.04081726]
[239.32214355 80.56536102]
[229.12547302 91.56008148]
[214.69921875 96.00411224]
[199.88824463 92.60824585]
[188.69261169 82.18686676]
[174.32276917 86.48891449]
[159.95292664 90.79096985]
[145.58308411 95.09301758]
[140.02664185 100.07053375]
[130.82862854 99.32379150]
[116.36256409 103.29029846]
[103.73519135 111.38655853]
[94.09337616 122.87722778]
[84.45156097 134.36788940]
[74.80974579 145.85856628]
[65.16793060 157.34922791]
[55.66046906 168.95130920]
[46.28864288 180.66320801]
[36.91681290 192.37512207]
[27.68189240 204.19528198]
[18.58512497 216.12210083]
[9.48835945 228.04890442]
[7.27131844 243.71400452]
[-6.59923792 249.14143372]
[-15.69600391 261.06823730]
[-24.79277039 272.99505615]
[-10.43772316 268.64389038]
[4.46122694 270.38208008]
[17.42913246 277.92086792]
[26.31182480 290.00796509]
[29.63374901 304.63549805]
[26.84308243 319.37362671]
[18.40339851 331.77407837]
[5.71665859 339.77700806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 34]
[9 33]
[10 32]
[13 30]
[14 29]
[15 28]
[16 26]
[17 25]
[18 24]
[19 23]
[37 126]
[38 125]
[39 124]
[41 122]
[42 121]
[43 120]
[45 119]
[46 118]
[47 117]
[49 116]
[50 115]
[51 114]
[52 113]
[53 112]
[56 76]
[57 75]
[58 74]
[59 73]
[61 70]
[62 69]
[63 68]
[80 111]
[81 110]
[82 108]
[83 107]
[84 106]
[85 105]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
