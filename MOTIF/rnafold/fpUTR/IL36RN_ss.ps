%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGGGAAUCCUGCUCCUCCUCAGGUCCUGGCAGUUUCAGGGCCCCUCCCUAGGCCUUACUUAAAAGGCUGAGGCAUCCUUGGAGGAACAGGCAGACUCCACAGCUCCCGCCAGGAGAAAGGAACAUUCUGAGGGGAGUCUACACCCUGUGGAGCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[281.47137451 256.70132446]
[267.84567261 262.97348022]
[252.86506653 263.73626709]
[238.67274475 258.88058472]
[227.29904175 249.10105896]
[220.37110901 235.79678345]
[218.88006592 220.87106323]
[223.03921509 206.45921326]
[232.25355530 194.62300110]
[245.20486450 187.05572510]
[260.04208374 184.84004211]
[246.50956726 178.36924744]
[232.97705078 171.89846802]
[219.44454956 165.42767334]
[204.62464905 166.91764832]
[195.51234436 153.98410034]
[181.97984314 147.51330566]
[168.44732666 141.04251099]
[154.91481018 134.57173157]
[141.38230896 128.10093689]
[127.84979248 121.63014221]
[112.66205597 134.41453552]
[92.23641968 137.27719116]
[72.70658875 128.53182983]
[60.37689972 110.10442352]
[45.71689224 113.27997589]
[31.05688667 116.45553589]
[16.39687729 119.63109589]
[1.73687005 122.80665588]
[-12.92313766 125.98220825]
[-27.58314514 129.15777588]
[-42.24315262 132.33332825]
[-52.10255051 144.98922729]
[-68.14555359 145.02758789]
[-78.06535339 132.41896057]
[-74.25231934 116.83563232]
[-59.63148880 110.23178101]
[-45.41871262 117.67331696]
[-30.75870323 114.49776459]
[-16.09869576 111.32220459]
[-1.43868804 108.14664459]
[13.22132015 104.97108459]
[27.88132858 101.79553223]
[42.54133606 98.61997223]
[57.20134354 95.44441223]
[61.36385727 81.03353119]
[50.65491104 70.53027344]
[39.94596481 60.02701187]
[29.23702049 49.52375031]
[24.88458061 48.57587814]
[21.42997932 46.48032379]
[19.12736320 43.66995621]
[18.06044579 40.61583328]
[18.14511681 37.76702118]
[8.28229618 26.46548271]
[-1.58052397 15.16394424]
[-11.44334412 3.86240578]
[-21.30616570 -7.43913269]
[-31.16898537 -18.74067116]
[-46.95190048 -19.56235504]
[-57.46886826 -31.35934258]
[-56.48036575 -47.13268661]
[-44.57284546 -57.52434540]
[-28.81083488 -56.36912918]
[-18.54565048 -44.35240936]
[-19.86744690 -28.60349083]
[-10.00462627 -17.30195236]
[-0.14180605 -6.00041485]
[9.72101402 5.30112362]
[19.58383560 16.60266304]
[29.44665527 27.90420151]
[39.74028015 38.81480408]
[50.44922638 49.31806564]
[61.15817261 59.82132721]
[71.86711884 70.32458496]
[82.93456268 63.61568069]
[95.33538055 60.79238129]
[107.77051544 62.00587845]
[118.98213959 66.99180603]
[127.88082123 75.11144257]
[133.65121460 85.43003845]
[135.82586670 96.82294464]
[134.32058716 108.09763336]
[147.85308838 114.56842804]
[161.38560486 121.03921509]
[174.91812134 127.51000977]
[188.45062256 133.98080444]
[201.98313904 140.45158386]
[217.77096558 139.42445374]
[225.91534424 151.89515686]
[239.44784546 158.36595154]
[252.98036194 164.83674622]
[266.51287842 171.30752563]
[274.17864990 169.97711182]
[280.71206665 172.51116943]
[284.50598145 177.46405029]
[299.16598511 180.63960266]
[313.85607910 183.67286682]
[328.57492065 186.56355286]
[343.29376221 189.45423889]
[358.01257324 192.34492493]
[372.73141479 195.23561096]
[387.45022583 198.12629700]
[402.16906738 201.01696777]
[416.88790894 203.90765381]
[431.78646851 205.64904785]
[446.77517700 206.23068237]
[461.76391602 206.81231689]
[476.75262451 207.39393616]
[491.74136353 207.97557068]
[503.28854370 197.52090454]
[518.48095703 198.32427979]
[528.37670898 209.39718628]
[543.36541748 209.97882080]
[558.35412598 210.56045532]
[573.34289551 211.14208984]
[588.33160400 211.72370911]
[596.45300293 198.68769836]
[610.01196289 191.47305298]
[625.36108398 192.02049255]
[638.37158203 200.18275452]
[645.54370117 213.76422119]
[644.94812012 229.11157227]
[636.74517822 242.09642029]
[623.14123535 249.22592163]
[607.79583740 248.58226013]
[594.83679199 240.33860779]
[587.74993896 226.71243286]
[572.76123047 226.13079834]
[557.77252197 225.54917908]
[542.78381348 224.96754456]
[527.79510498 224.38591003]
[517.07098389 234.65867615]
[501.86203003 234.28234863]
[491.15972900 222.96429443]
[476.17098999 222.38265991]
[461.18228149 221.80102539]
[446.19357300 221.21940613]
[431.20483398 220.63777161]
[441.81976318 231.23605347]
[444.32562256 246.02525330]
[437.79452515 259.52874756]
[424.64495850 266.74606323]
[409.74642944 265.00448608]
[398.61596680 254.94895935]
[395.37539673 240.30319214]
[401.22467041 226.49067688]
[413.99722290 218.62648010]
[399.27838135 215.73580933]
[384.55953979 212.84512329]
[369.84072876 209.95443726]
[355.12188721 207.06375122]
[340.40307617 204.17306519]
[325.68423462 201.28237915]
[310.96539307 198.39169312]
[303.76043701 200.19735718]
[295.99041748 195.29962158]
[281.33041382 192.12405396]
[291.69934082 202.96310425]
[297.30087280 216.87796021]
[297.33361816 231.87792969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 93]
[12 92]
[13 91]
[14 90]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[46 75]
[47 74]
[48 73]
[49 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[96 158]
[97 157]
[98 155]
[99 154]
[100 153]
[101 152]
[102 151]
[103 150]
[104 149]
[105 148]
[106 139]
[107 138]
[108 137]
[109 136]
[110 135]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
