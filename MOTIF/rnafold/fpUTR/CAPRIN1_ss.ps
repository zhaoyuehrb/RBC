%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGGGCUGCUGGCUGGCUAAGUCCCUCCCGCUCCCGGCUCUCGCCUCACUAGGAGCGGCUCUCGGUGCAGCGGGACAGGGCGAAGCGGCCUGCGCCCACGGAGCGCGCGACACUGCCCGGAAGGGACCACCACCCUUGCCCCCUCAGCUGCCCACUCGUGAUUUCCAGCGGCCUCCGCGCGCGCACG\
) } def
/len { sequence length } bind def

/coor [
[-150.94987488 95.98989105]
[-159.12698364 96.59635162]
[-166.78562927 93.94229889]
[-172.69520569 88.53306580]
[-175.93756104 81.31008148]
[-190.77177429 79.08612823]
[-205.60600281 76.86217499]
[-220.44021606 74.63822174]
[-229.40940857 76.46250916]
[-235.50050354 72.25290680]
[-250.29592896 69.78398895]
[-265.18139648 75.14432526]
[-276.46157837 65.41770935]
[-291.25698853 62.94879150]
[-306.05239868 60.47987366]
[-320.84783936 58.01095581]
[-335.64324951 55.54203796]
[-344.64135742 57.21778488]
[-350.66204834 52.90804291]
[-365.41461182 50.19483185]
[-378.33471680 58.89591599]
[-393.25726318 55.93418121]
[-401.47280884 43.56322098]
[-416.22537231 40.85001373]
[-430.97796631 38.13680649]
[-445.73052979 35.42359543]
[-462.92163086 41.99948120]
[-475.83575439 30.12835884]
[-490.63119507 27.65944099]
[-505.42660522 25.19052124]
[-520.22204590 22.72160339]
[-535.01745605 20.25268364]
[-549.81286621 17.78376579]
[-564.60827637 15.31484699]
[-583.13073730 23.24001312]
[-597.53070068 10.35106277]
[-612.39965820 8.37267971]
[-627.26861572 6.39429760]
[-642.13757324 4.41591501]
[-652.85174561 15.48447227]
[-667.85369873 18.09136200]
[-681.35430908 11.44334316]
[-688.26885986 -1.72205508]
[-703.13781738 -3.70043755]
[-718.00677490 -5.67882013]
[-732.87573242 -7.65720272]
[-741.81353760 -5.68486357]
[-747.97338867 -9.79318619]
[-762.80761719 -12.01714134]
[-776.51110840 -3.67490745]
[-791.52722168 -9.32255173]
[-796.33685303 -24.62768555]
[-787.25048828 -37.84951782]
[-771.23834229 -38.84539413]
[-760.58367920 -26.85135841]
[-745.74945068 -24.62740517]
[-730.89733887 -22.52616310]
[-716.02838135 -20.54778099]
[-701.15942383 -18.56939888]
[-686.29046631 -16.59101677]
[-676.17401123 -27.49037361]
[-661.40472412 -30.37694740]
[-647.60638428 -23.93805504]
[-640.15924072 -10.45304585]
[-625.29028320 -8.47466373]
[-610.42126465 -6.49628115]
[-595.55230713 -4.51789856]
[-588.01025391 -11.44460392]
[-577.68231201 -13.10174561]
[-567.95117188 -8.70145893]
[-562.13934326 0.51942712]
[-547.34393311 2.98834586]
[-532.54852295 5.45726490]
[-517.75311279 7.92618370]
[-502.95767212 10.39510250]
[-488.16226196 12.86402130]
[-473.36685181 15.33294010]
[-463.33209229 8.55778217]
[-450.97586060 10.50599670]
[-443.01733398 20.67102051]
[-428.26473999 23.38422966]
[-413.51217651 26.09743690]
[-398.75958252 28.81064606]
[-386.68014526 20.17222023]
[-371.68026733 22.71364403]
[-362.70141602 35.44225693]
[-347.94882202 38.15546417]
[-333.17431641 40.74661636]
[-318.37890625 43.21553421]
[-303.58349609 45.68445587]
[-288.78805542 48.15337372]
[-273.99264526 50.62229156]
[-260.16543579 45.08535767]
[-247.82701111 54.98856735]
[-233.03158569 57.45748520]
[-218.21626282 59.80400085]
[-203.38204956 62.02795792]
[-188.54782104 64.25191498]
[-173.71360779 66.47586823]
[-154.47406006 56.57550812]
[-137.07690430 70.68527222]
[-122.12813568 71.92395782]
[-112.68714142 64.34327698]
[-100.21224213 65.26447296]
[-91.44145966 74.73756409]
[-76.51522064 76.22325134]
[-61.58897400 77.70893097]
[-46.66273117 79.19461823]
[-31.73648834 80.68029785]
[-16.81024551 82.16597748]
[-1.88400149 83.65166473]
[5.79757452 70.86656189]
[18.31992531 62.65071106]
[33.22869110 60.67847061]
[47.57382202 65.39411926]
[58.49332428 75.91322327]
[63.78421402 90.18795013]
[78.71045685 91.67362976]
[93.63670349 93.15930939]
[93.65399933 73.54698944]
[112.38290405 56.67030716]
[126.40137482 51.33339691]
[140.37524414 45.88077927]
[154.30354309 40.31282043]
[168.23185730 34.74486160]
[182.16017151 29.17690277]
[196.08848572 23.60894394]
[200.80317688 8.69902515]
[214.02642822 0.35158238]
[229.51460266 2.50802159]
[239.95468140 14.15013885]
[240.41716003 29.78088188]
[230.68367004 42.01988983]
[215.35008240 45.08828354]
[201.65643311 37.53725433]
[187.72813416 43.10521317]
[173.79981995 48.67317200]
[159.87150574 54.24113083]
[145.94319153 59.80908966]
[140.89018250 65.22104645]
[131.73828125 65.35186768]
[117.71981049 70.68877411]
[116.91529846 78.14550018]
[131.82875061 79.75453186]
[146.74217224 81.36380768]
[145.13264465 96.27720642]
[130.21971130 94.66798401]
[115.30626678 93.05895233]
[114.50174713 100.51567078]
[127.05924988 108.71989441]
[139.61674500 116.92411804]
[152.17424011 125.12834167]
[164.48803711 116.25507355]
[179.17668152 112.43302917]
[194.25367737 114.17912292]
[207.67996216 121.25720215]
[217.63975525 132.71002197]
[222.78607178 146.98867798]
[222.42291260 162.16209412]
[216.59939575 176.17819214]
[206.10310364 187.14141846]
[192.35357666 193.56907654]
[177.21031189 194.59188843]
[162.72132874 190.07151794]
[150.84613037 180.61930847]
[143.19075012 167.51361084]
[140.79051208 152.52684021]
[143.97001648 137.68583679]
[131.41252136 129.48161316]
[118.85502625 121.27739716]
[106.29753113 113.07317352]
[92.15101624 108.08555603]
[77.22477722 106.59987640]
[62.29853058 105.11418915]
[54.29765701 118.06592560]
[41.51890182 126.22621918]
[26.52568626 128.02168274]
[12.29819489 123.14936066]
[1.64101732 112.62633514]
[-3.36968446 98.57790375]
[-18.29592705 97.09222412]
[-33.22217178 95.60654449]
[-48.14841461 94.12085724]
[-63.07465744 92.63517761]
[-78.00090027 91.14949036]
[-92.92714691 89.66381073]
[-109.51648712 97.63686371]
[-123.36682892 86.87272644]
[-138.31559753 85.63404083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[7 97]
[8 96]
[10 95]
[11 94]
[13 92]
[14 91]
[15 90]
[16 89]
[17 88]
[19 87]
[20 86]
[23 83]
[24 82]
[25 81]
[26 80]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[36 67]
[37 66]
[38 65]
[39 64]
[43 60]
[44 59]
[45 58]
[46 57]
[48 56]
[49 55]
[101 189]
[102 188]
[105 186]
[106 185]
[107 184]
[108 183]
[109 182]
[110 181]
[111 180]
[117 174]
[118 173]
[119 172]
[121 142]
[122 141]
[123 139]
[124 138]
[125 137]
[126 136]
[127 135]
[149 171]
[150 170]
[151 169]
[152 168]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
