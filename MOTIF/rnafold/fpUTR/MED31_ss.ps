%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGCCCCGGGACCGGAAGAGGGAGCCGUGGUUUCCGGAACUUCGCCCGCGUCUCUGGGCUUUUGCUCUGUCAGGCUGGUGGCGUUUUGGUGUCUUCGUUUGUU\
) } def
/len { sequence length } bind def

/coor [
[94.32210541 179.32135010]
[86.40153503 166.58303833]
[82.29790497 152.15528870]
[82.32897186 137.15531921]
[86.49233246 122.74468231]
[94.46245575 110.04301453]
[80.62542725 115.83409119]
[66.78839111 121.62516022]
[57.04531860 134.09043884]
[42.31765366 131.86665344]
[28.48062134 137.65773010]
[14.64358902 143.44880676]
[8.57970524 157.79687500]
[-5.53550959 163.47273254]
[-19.17683029 157.60331726]
[-33.01386261 163.39439392]
[-37.48834229 178.37815857]
[-50.57573318 186.93702698]
[-66.09656525 185.02976990]
[-76.72238922 173.55693054]
[-77.43600464 157.93563843]
[-67.90046692 145.54177856]
[-52.61816406 142.22737122]
[-38.80493546 149.55735779]
[-24.96790314 143.76628113]
[-19.57374573 129.93016052]
[-5.62352276 123.86006927]
[8.85251522 129.61177063]
[22.68954849 123.82069397]
[36.52658081 118.02962494]
[45.27994156 105.97856903]
[60.99732208 107.78813171]
[74.83435059 101.99705505]
[88.67138672 96.20598602]
[91.01493835 91.70351410]
[95.09516144 88.48930359]
[100.25073242 87.20777130]
[109.27991486 75.22971344]
[118.30908966 63.25165558]
[127.33827209 51.27359390]
[136.36744690 39.29553604]
[145.39663696 27.31747437]
[154.42581177 15.33941460]
[156.55422974 -0.33796984]
[170.39387512 -5.84373999]
[179.42306519 -17.82180023]
[188.45223999 -29.79986000]
[197.48141479 -41.77791977]
[206.51058960 -53.75598145]
[208.63902283 -69.43336487]
[222.47866821 -74.93913269]
[231.50784302 -86.91719818]
[223.86514282 -100.02691650]
[221.82937622 -115.02354431]
[225.67988586 -129.61761475]
[234.79981995 -141.59320068]
[247.77465820 -149.14425659]
[262.61157227 -151.14703369]
[277.04550171 -147.32720947]
[286.07467651 -159.30526733]
[295.10385132 -171.28332520]
[304.13302612 -183.26138306]
[305.59613037 -199.59513855]
[320.58493042 -206.24855042]
[333.68023682 -196.37715149]
[331.41076660 -180.13580322]
[316.11111450 -174.23220825]
[307.08190918 -162.25415039]
[298.05273438 -150.27607727]
[289.02355957 -138.29801941]
[296.66976929 -125.47364044]
[298.82934570 -110.65872192]
[295.14242554 -96.10636139]
[286.14059448 -84.04174042]
[273.17068481 -76.32194519]
[258.19317627 -74.15011597]
[243.48590088 -77.88801575]
[234.45672607 -65.90995789]
[232.97412109 -51.08932114]
[218.48866272 -44.72680283]
[209.45947266 -32.74874115]
[200.43029785 -20.77068138]
[191.40112305 -8.79262066]
[182.37193298 3.18543911]
[180.88934326 18.00607300]
[166.40386963 24.36859322]
[157.37469482 36.34665298]
[148.34550476 48.32471466]
[139.31632996 60.30277252]
[130.28715515 72.28083038]
[121.25797272 84.25889587]
[112.22879028 96.23695374]
[126.51024628 91.65001678]
[141.50276184 91.17617035]
[156.04536438 94.85211945]
[169.01194763 102.39321136]
[179.39839172 113.21548462]
[186.40043640 126.48090363]
[189.47586060 141.16224670]
[188.38650513 156.12263489]
[183.21675110 170.20359802]
[174.36689758 182.31475830]
[162.52226257 191.51826477]
[148.60003662 197.10144043]
[133.67831421 198.63192749]
[118.91259766 195.99122620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 34]
[7 33]
[8 32]
[10 30]
[11 29]
[12 28]
[15 25]
[16 24]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[43 86]
[45 84]
[46 83]
[47 82]
[48 81]
[49 80]
[51 78]
[52 77]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
