%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCAGUCCCGCUCCGCGCCGCGCCGCUCCGCUCCGGCUCGGGCUCCGGCUCGCCUCGGGCUGGGCUCGGGCUCCGGGGGCGGCGUCCCCCGCGCCGGGCCCCGGGACGGGCGGCGACGCUCCAACC\
) } def
/len { sequence length } bind def

/coor [
[43.71545029 292.12060547]
[35.80084991 304.86264038]
[27.88624382 317.60464478]
[19.97164154 330.34667969]
[12.05703735 343.08868408]
[11.93480015 361.45541382]
[-3.75964212 369.20989990]
[-11.36404037 382.13946533]
[-18.96843719 395.06900024]
[-21.78647995 411.78710938]
[-38.63134766 413.70721436]
[-45.13954926 398.05221558]
[-31.89798355 387.46459961]
[-24.29358482 374.53506470]
[-16.68918800 361.60552979]
[-19.41812515 349.75570679]
[-13.10360336 338.89593506]
[-0.68498176 335.17410278]
[7.22962189 322.43206787]
[15.14422512 309.69006348]
[23.05882835 296.94802856]
[30.97343254 284.20602417]
[30.96886826 274.75961304]
[38.57605362 267.31369019]
[42.86523819 252.94000244]
[47.15442276 238.56631470]
[51.44360733 224.19262695]
[55.73279190 209.81893921]
[60.02198029 195.44525146]
[58.90871048 188.06140137]
[64.59236145 180.77836609]
[69.22761536 166.51252747]
[73.86287689 152.24667358]
[72.92835236 144.83808899]
[78.78633118 137.69450378]
[83.76494598 123.54483032]
[88.74356842 109.39515686]
[88.19995117 94.40500641]
[82.20948029 80.65312958]
[76.21900940 66.90124512]
[70.22854614 53.14936066]
[64.23807526 39.39747620]
[58.24760437 25.64559555]
[52.25713730 11.89371204]
[46.26666641 -1.85817075]
[40.27619934 -15.61005402]
[33.91616440 -22.31054115]
[34.31159210 -29.76736069]
[28.65516853 -43.65998077]
[22.99874687 -57.55260086]
[17.34232330 -71.44522095]
[11.68590069 -85.33783722]
[6.02947855 -99.23046112]
[0.37305573 -113.12307739]
[-5.28336668 -127.01570129]
[-16.85618782 -139.40545654]
[-8.15430164 -153.95584106]
[8.23636436 -149.62196350]
[8.60925293 -132.67211914]
[14.26567554 -118.77950287]
[19.92209816 -104.88687897]
[25.57851982 -90.99426270]
[31.23494339 -77.10163879]
[36.89136505 -63.20902252]
[42.54778671 -49.31640244]
[48.20421219 -35.42378235]
[54.02808380 -21.60052299]
[60.01855087 -7.84863949]
[66.00901794 5.90324354]
[71.99948883 19.65512657]
[77.98995972 33.40700912]
[83.98042297 47.15889359]
[89.97089386 60.91077423]
[95.96136475 74.66265869]
[101.95183563 88.41454315]
[105.64968109 88.41903687]
[109.46385956 89.65287781]
[123.83754730 85.36369324]
[138.21122742 81.07450867]
[152.58491516 76.78532410]
[166.95860291 72.49613953]
[179.22949219 58.82950974]
[196.11914062 63.43252182]
[210.38497925 58.79726791]
[224.65083313 54.16201019]
[238.91667175 49.52675629]
[253.18252563 44.89150238]
[267.44836426 40.25624847]
[275.98361206 26.67209053]
[291.94125366 25.01887512]
[303.07995605 36.56480789]
[300.85510254 52.45283508]
[286.97335815 60.49502563]
[272.08361816 54.52209473]
[257.81777954 59.15734863]
[243.55194092 63.79260635]
[229.28608704 68.42785645]
[215.02023315 73.06311798]
[200.75439453 77.69837189]
[194.93914795 88.37770081]
[183.01130676 92.31904602]
[171.24778748 86.86981964]
[156.87409973 91.15901184]
[142.50041199 95.44819641]
[128.12672424 99.73738098]
[113.75304413 104.02656555]
[102.89324188 114.37377167]
[97.91462708 128.52345276]
[92.93601227 142.67312622]
[88.12872314 156.88192749]
[83.49346924 171.14778137]
[78.85821533 185.41362000]
[74.39566803 199.73443604]
[70.10648346 214.10812378]
[65.81729889 228.48181152]
[61.52811050 242.85549927]
[57.23892593 257.22918701]
[52.94974136 271.60287476]
[65.30021667 263.09017944]
[80.08243561 260.54345703]
[94.56952667 264.43243408]
[106.08905792 274.03973389]
[112.51601410 287.59310913]
[112.66482544 302.59237671]
[106.50803375 316.27059937]
[95.18138885 326.10458374]
[80.77430725 330.28024292]
[65.94446564 328.02728271]
[53.42752838 319.76129150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[7 15]
[8 14]
[9 13]
[24 118]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[31 112]
[32 111]
[33 110]
[35 109]
[36 108]
[37 107]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[77 106]
[78 105]
[79 104]
[80 103]
[81 102]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
