%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCCACUCUGGCUGGGGCCAGCUGGAGGCCUUCAGUACAGCCCCAGCCAACUCUCACUGAACAGCUGGAGCACCGACACCCUGGGCACUCAUUUCAAAUC\
) } def
/len { sequence length } bind def

/coor [
[151.86097717 205.96214294]
[146.49258423 191.95570374]
[141.12417603 177.94926453]
[135.75578308 163.94282532]
[130.38737488 149.93638611]
[125.01898193 135.92994690]
[119.65058136 121.92351532]
[104.40490723 127.41757965]
[89.54521179 123.91143799]
[79.66532135 113.53086090]
[77.24978638 100.35604095]
[63.01247787 95.63385010]
[48.77517319 90.91165924]
[34.53786469 86.18946838]
[20.30056000 81.46727753]
[6.06325245 76.74507904]
[-8.17405415 72.02288818]
[-22.41135979 67.30069733]
[-36.64866638 62.57850647]
[-50.88597488 57.85631180]
[-66.27970886 65.99188232]
[-82.50284576 60.66321945]
[-89.78247070 45.58848572]
[-104.15715790 41.30267334]
[-118.53185272 37.01685715]
[-132.90655518 32.73104477]
[-147.28123474 28.44523430]
[-161.65592957 24.15942001]
[-177.47470093 28.48363876]
[-188.93701172 16.75557899]
[-184.25143433 1.04006374]
[-168.23808289 -2.49613118]
[-157.37011719 9.78472710]
[-142.99542236 14.07054043]
[-128.62072754 18.35635376]
[-114.24604034 22.64216614]
[-99.87134552 26.92797852]
[-85.49665833 31.21379089]
[-75.03737640 23.52051353]
[-61.85952377 23.30621147]
[-50.83297729 30.87667656]
[-46.16378021 43.61900711]
[-31.92647552 48.34119797]
[-17.68916893 53.06339264]
[-3.45186162 57.78558350]
[10.78544521 62.50777435]
[25.02275085 67.22996521]
[39.26005936 71.95216370]
[53.49736404 76.67435455]
[67.73467255 81.39654541]
[81.97197723 86.11873627]
[101.58000946 73.95075989]
[125.32726288 84.98948669]
[134.65403748 73.24166107]
[143.98081970 61.49384308]
[153.30758667 49.74602509]
[151.69750977 34.25262451]
[161.32354736 22.47152901]
[176.10404968 21.03205109]
[185.43083191 9.28423119]
[187.30313110 -7.00768471]
[202.45410156 -13.28304863]
[215.29771423 -3.08630514]
[212.62156677 13.09301090]
[197.17864990 18.61100578]
[187.85186768 30.35882568]
[189.80162048 45.08071518]
[180.51029968 57.12754059]
[165.05540466 59.07279968]
[155.72863770 70.82061768]
[146.40185547 82.56843567]
[137.07508850 94.31626129]
[147.16340637 83.21554565]
[161.15733337 77.81462860]
[176.08758545 79.25951385]
[188.78617859 87.24361420]
[196.55865479 100.07281494]
[197.75582886 115.02496338]
[192.12367249 128.92744446]
[180.85723877 138.83033752]
[166.34710693 142.63243103]
[151.67208862 139.52696228]
[139.94601440 130.17285156]
[133.65701294 116.55511475]
[139.02542114 130.56155396]
[144.39381409 144.56799316]
[149.76222229 158.57443237]
[155.13061523 172.58087158]
[160.49902344 186.58729553]
[165.86741638 200.59373474]
[181.07722473 201.35635376]
[194.65896606 208.24519348]
[204.25950623 220.06677246]
[208.21551514 234.77288818]
[205.84156799 249.81562805]
[197.54898071 262.58877563]
[184.77449036 270.87924194]
[169.73135376 273.25073242]
[155.02587891 269.29232788]
[143.20588684 259.68981934]
[136.31927490 246.10696411]
[135.55915833 230.89703369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[53 72]
[54 71]
[55 70]
[56 69]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
