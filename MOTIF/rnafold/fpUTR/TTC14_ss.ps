%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGUGCUGUCUGUGUACUUCCGGCAGCCUCCAGACAGUUUCUUCCGCUUCCUGUACCACCCGGCUCAAGUAGCGGACACGGAACAGGGAACUAUCAGCCCGUCGGCCUCCGGGCCCUGCAUUCUCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[75.15344238 155.63742065]
[67.09809875 168.29093933]
[70.30964661 183.53311157]
[61.96013260 196.25082397]
[47.40926361 199.21861267]
[39.35391998 211.87211609]
[31.29857635 224.52563477]
[23.24323273 237.17915344]
[28.12266159 252.03598022]
[22.26277733 266.53411865]
[8.43044090 273.82797241]
[-6.84314442 270.47363281]
[-16.34625816 258.05490112]
[-15.59181881 242.43551636]
[-4.93605089 230.99049377]
[10.58971786 229.12380981]
[18.64506149 216.47029114]
[26.70040512 203.81677246]
[34.75574875 191.16326904]
[31.28653908 176.72372437]
[39.27555084 163.77651978]
[54.44458389 160.23559570]
[62.49992752 147.58207703]
[70.40526581 134.83430481]
[78.15950775 121.99406433]
[85.91374207 109.15382385]
[76.00531769 120.41540527]
[62.28680801 126.48190308]
[47.28885269 126.23423004]
[33.77812576 119.71807098]
[24.24695396 108.13546753]
[20.45354843 93.62305450]
[23.09767914 78.85794067]
[31.69158363 66.56384277]
[44.64994431 59.00865555]
[59.58233261 57.58608246]
[73.73417664 62.55854034]
[84.49488068 73.00876617]
[89.87896729 87.00598145]
[87.06128693 72.27300262]
[84.24360657 57.54002380]
[81.42592621 42.80704498]
[78.60824585 28.07406425]
[64.72824860 13.54249668]
[71.62580109 -4.46161413]
[68.11550903 -19.04509354]
[64.60521698 -33.62857056]
[61.09492493 -48.21205139]
[57.58463287 -62.79552841]
[54.07434082 -77.37900543]
[39.88948441 -83.38700867]
[32.05382538 -96.44287872]
[33.39257812 -111.43193817]
[43.18358612 -122.62452698]
[39.67329407 -137.20800781]
[26.47589493 -145.48245239]
[23.12370491 -160.32217407]
[31.09345055 -172.85289001]
[27.58315849 -187.43637085]
[15.90158844 -198.94606018]
[20.28979683 -214.74717712]
[36.23357010 -218.58489990]
[47.33132172 -206.51129150]
[42.16663742 -190.94665527]
[45.67692947 -176.36317444]
[58.47575378 -168.83152771]
[62.24343491 -154.09181213]
[54.25677490 -140.71829224]
[57.76706696 -126.13481903]
[71.57876587 -120.62348175]
[79.59154510 -107.88537598]
[78.55509949 -92.69395447]
[68.65781403 -80.88929749]
[72.16811371 -66.30582428]
[75.67840576 -51.72234344]
[79.18869781 -37.13886261]
[82.69898987 -22.55538559]
[86.20928192 -7.97190714]
[95.46650696 -3.37734485]
[100.73190308 5.77108908]
[100.02583313 16.52419662]
[93.34122467 25.25638390]
[96.15890503 39.98936462]
[98.97658539 54.72234344]
[101.79426575 69.45532227]
[104.61194611 84.18830109]
[114.23867035 95.69161224]
[128.24449158 101.06161499]
[142.25032043 106.43162537]
[156.25613403 111.80162811]
[170.26196289 117.17163086]
[184.26777649 122.54164124]
[194.75694275 111.57563782]
[208.60809326 105.47737885]
[223.69798279 105.14765167]
[237.72648621 110.60556793]
[248.56715393 120.99039459]
[254.58958435 134.69717407]
[254.90457153 149.62466431]
[268.91040039 154.99467468]
[282.91622925 160.36466980]
[296.92202759 165.73468018]
[310.92785645 171.10469055]
[323.86437988 162.53576660]
[339.36541748 163.24089050]
[351.47052002 172.94891357]
[355.52505493 187.92691040]
[349.96994019 202.41554260]
[336.94122314 210.84361267]
[321.44876099 209.97038269]
[309.44964600 200.13160706]
[305.55786133 185.11050415]
[291.55203247 179.74050903]
[277.54620361 174.37049866]
[263.54040527 169.00048828]
[249.53457642 163.63049316]
[239.32061768 174.52105713]
[225.67829895 180.68812561]
[210.67367554 181.16354370]
[196.59222412 175.84375000]
[185.59074402 165.51025391]
[179.36698914 151.71504211]
[178.89778137 136.54745483]
[164.89195251 131.17745972]
[150.88612366 125.80744934]
[136.88031006 120.43744659]
[122.87448883 115.06743622]
[108.86866760 109.69743347]
[104.92749023 114.21794891]
[98.75398254 116.90805817]
[90.99974823 129.74830627]
[83.24551392 142.58854675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[5 19]
[6 18]
[7 17]
[8 16]
[24 132]
[25 131]
[26 130]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[54 69]
[55 68]
[58 65]
[59 64]
[87 128]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
