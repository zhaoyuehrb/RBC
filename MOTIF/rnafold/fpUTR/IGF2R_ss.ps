%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGCCCAGUCGAGCCGCGCUCACCUCGGGCUCCCGCUCCGUCUCCACCUCCGCCUUUGCCCUGGCGGCGCGACCCCGUCCCGGGCGCGGCCCCCAGCAGUCGCGCGCCGUUAGCCUCGCGCCCGCCGCGCAGUCCGGGCCCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[33.66123581 200.05267334]
[21.55583763 200.95434570]
[11.46415997 212.05200195]
[1.37248170 223.14965820]
[-8.71919632 234.24731445]
[-18.81087494 245.34497070]
[-28.90255356 256.44262695]
[-38.87667847 267.64605713]
[-48.73214340 278.95401001]
[-47.83394241 294.50494385]
[-57.98987198 305.83239746]
[-72.82083130 306.59286499]
[-82.67629242 317.90081787]
[-92.53175354 329.20877075]
[-102.38722229 340.51672363]
[-108.23590088 356.42990112]
[-125.14626312 355.21499634]
[-128.66009521 338.62918091]
[-113.69517517 330.66128540]
[-103.83970642 319.35333252]
[-93.98424530 308.04534912]
[-84.12878418 296.73739624]
[-85.40166473 281.94161987]
[-75.56790924 270.33334351]
[-60.04009628 269.09854126]
[-50.18463135 257.79058838]
[-48.14710617 250.63319397]
[-40.00021362 246.35095215]
[-29.90853310 235.25329590]
[-19.81685448 224.15563965]
[-9.72517681 213.05798340]
[0.36650145 201.96032715]
[10.45817947 190.86265564]
[13.22574711 173.56253052]
[30.75714874 168.03282166]
[40.61261368 156.72486877]
[50.46807861 145.41691589]
[52.99741745 130.73863220]
[67.89743042 125.41883850]
[77.75289154 114.11087799]
[87.60835266 102.80292511]
[72.80803680 105.24228668]
[58.48446655 100.78858948]
[47.67689896 90.38684082]
[42.67853165 76.24412537]
[44.54994583 61.36132050]
[52.89405060 48.89633560]
[65.94036102 41.49404526]
[80.92063904 40.72510910]
[94.65629578 46.75268173]
[104.23284149 58.29780197]
[107.61827087 72.91076660]
[104.09433746 87.49076080]
[116.09814453 78.49584198]
[128.10195923 69.50092316]
[140.10577393 60.50600815]
[151.81913757 51.13600922]
[163.23036194 41.40030289]
[174.64158630 31.66459465]
[186.05281067 21.92888832]
[187.86289978 9.11370277]
[197.62472534 1.24131012]
[209.73110962 2.12961984]
[221.34506226 -7.36334085]
[232.95899963 -16.85630226]
[244.57293701 -26.34926224]
[256.18688965 -35.84222412]
[267.80084229 -45.33518600]
[279.31405640 -54.95005417]
[290.72528076 -64.68576050]
[302.13650513 -74.42146301]
[313.54772949 -84.15717316]
[324.95895386 -93.89288330]
[320.08520508 -106.49527740]
[319.35211182 -119.96446991]
[322.81750488 -132.97720337]
[330.12753296 -144.25944519]
[340.55249023 -152.71112061]
[353.05993652 -157.51341248]
[366.41668701 -158.20797729]
[379.31060791 -154.74076843]
[390.47937012 -147.46586609]
[402.29086304 -156.71186829]
[414.10235596 -165.95785522]
[425.81573486 -175.32785034]
[437.42968750 -184.82081604]
[449.04364014 -194.31378174]
[460.65756226 -203.80673218]
[472.27151489 -213.29969788]
[483.88546753 -222.79266357]
[495.49938965 -232.28562927]
[494.48211670 -247.76931763]
[502.78863525 -260.87585449]
[517.22497559 -266.56549072]
[532.24005127 -262.65045166]
[542.06024170 -250.63615417]
[542.90948486 -235.14233398]
[534.46130371 -222.12669373]
[519.96405029 -216.59399414]
[504.99237061 -220.67167664]
[493.37841797 -211.17871094]
[481.76446533 -201.68576050]
[470.15054321 -192.19279480]
[458.53659058 -182.69982910]
[446.92263794 -173.20687866]
[435.30871582 -163.71391296]
[432.09851074 -157.00013733]
[423.34835815 -154.14636230]
[411.53686523 -144.90036011]
[399.72537231 -135.65437317]
[404.56665039 -119.78343964]
[402.96575928 -103.23119354]
[395.13827515 -88.51764679]
[382.24996948 -77.89362335]
[366.24310303 -72.99645996]
[349.54388428 -74.59769440]
[334.69464111 -82.48165894]
[323.28341675 -72.74594879]
[311.87219238 -63.01024246]
[300.46099854 -53.27453613]
[289.04977417 -43.53882980]
[285.98184204 -36.75886536]
[277.29379272 -33.72124100]
[265.67984009 -24.22827911]
[254.06590271 -14.73531914]
[242.45196533 -5.24235773]
[230.83801270 4.25060320]
[219.22407532 13.74356365]
[213.94250488 30.44862747]
[195.78851318 33.34011078]
[184.37728882 43.07581711]
[172.96606445 52.81152344]
[161.55485535 62.54723358]
[160.93090820 66.08262634]
[158.52214050 69.47858429]
[154.41947937 71.88039398]
[149.10069275 72.50981903]
[137.09687805 81.50473785]
[125.09306335 90.49965668]
[113.08925629 99.49457550]
[108.90699768 109.33398438]
[98.91631317 112.65839386]
[89.06084442 123.96634674]
[79.20538330 135.27429199]
[75.97111511 150.76139832]
[61.77603149 155.27236938]
[51.92056656 166.58032227]
[42.06510544 177.88829041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 26]
[9 25]
[12 22]
[13 21]
[14 20]
[15 19]
[35 148]
[36 147]
[37 146]
[39 144]
[40 143]
[41 142]
[53 140]
[54 139]
[55 138]
[56 137]
[57 133]
[58 132]
[59 131]
[60 130]
[63 128]
[64 127]
[65 126]
[66 125]
[67 124]
[68 123]
[69 121]
[70 120]
[71 119]
[72 118]
[73 117]
[82 110]
[83 109]
[84 108]
[85 106]
[86 105]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
