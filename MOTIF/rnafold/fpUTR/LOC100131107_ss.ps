%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGAUGUCAUAAACUCCCAGAUGCCCAGUGUGCACCCGGCCACAGAGAAGUGGGUGACUUAGGAGUAUCCUCUCUGCUUCUGACCCUUAGUUUCGUCUGUGCACAACUCGCUCAAA\
) } def
/len { sequence length } bind def

/coor [
[56.47407913 200.40936279]
[48.85909271 213.33267212]
[47.16133118 222.44171143]
[40.86545563 226.49479675]
[32.90914536 239.21081543]
[30.96949577 248.27142334]
[24.56795883 252.15547180]
[16.27595711 264.65518188]
[18.03604126 280.60140991]
[6.56499052 291.81723022]
[-9.33758640 289.69882202]
[-17.47259331 275.87127686]
[-11.59955025 260.94186401]
[3.77624893 256.36318970]
[12.06824970 243.86347961]
[20.19312668 231.25450134]
[28.14944077 218.53848267]
[35.93577957 205.71768188]
[43.55076981 192.79437256]
[41.72018814 172.30844116]
[60.20224762 161.63386536]
[66.76185608 148.14418030]
[66.85833740 140.65710449]
[73.67985535 134.38623047]
[80.59624481 121.07595062]
[72.66845703 108.58418274]
[72.03041840 93.80287933]
[78.85231781 80.67444611]
[91.31463623 72.70043945]
[106.09347534 72.00765991]
[113.00986481 58.69737625]
[119.92625427 45.38709641]
[126.84263611 32.07681656]
[133.75903320 18.76653481]
[140.67541504 5.45625353]
[147.59179688 -7.85402727]
[144.45195007 -20.45044136]
[150.58787537 -31.43173790]
[162.19406128 -35.11544800]
[169.46231079 -48.23689270]
[176.73057556 -61.35834122]
[176.45779419 -65.98983002]
[177.63125610 -70.01969147]
[179.86050415 -73.05022430]
[182.66291809 -74.86185455]
[185.53379822 -75.42790222]
[194.15560913 -87.70244598]
[202.77742004 -99.97698975]
[211.39923096 -112.25152588]
[205.69499207 -128.10975647]
[210.47387695 -144.09841919]
[223.68054199 -154.02651978]
[240.03671265 -154.17178345]
[248.32870483 -166.67149353]
[256.62069702 -179.17120361]
[264.91271973 -191.67091370]
[265.01031494 -196.30940247]
[266.50158691 -200.23278809]
[268.96551514 -203.07580566]
[271.90353394 -204.65806580]
[274.81042480 -204.99325562]
[284.38409424 -216.54075623]
[293.95773315 -228.08827209]
[303.53140259 -239.63577271]
[313.10507202 -251.18328857]
[322.67874146 -262.73080444]
[332.25241089 -274.27832031]
[341.82604980 -285.82580566]
[338.84176636 -301.17599487]
[346.46771240 -314.82806396]
[361.10321045 -320.33590698]
[375.83779907 -315.09890747]
[383.71426392 -301.58984375]
[381.01354980 -286.18722534]
[369.01089478 -276.16372681]
[353.37356567 -276.25216675]
[343.79989624 -264.70465088]
[334.22625732 -253.15713501]
[324.65258789 -241.60963440]
[315.07891846 -230.06211853]
[305.50524902 -218.51460266]
[295.93157959 -206.96710205]
[286.35794067 -195.41958618]
[277.41241455 -183.37890625]
[269.12042236 -170.87921143]
[260.82843018 -158.37950134]
[252.53642273 -145.87979126]
[258.35714722 -133.78627014]
[257.40197754 -120.28995514]
[249.81510925 -108.95616150]
[237.50689697 -102.83250427]
[223.67376709 -103.62971497]
[215.05195618 -91.35517883]
[206.43014526 -79.08063507]
[197.80833435 -66.80609131]
[189.85202026 -54.09007645]
[182.58377075 -40.96863174]
[175.31550598 -27.84718323]
[176.62811279 -10.40241909]
[160.90208435 -0.93763995]
[153.98568726 12.37264156]
[147.06930542 25.68292236]
[140.15292358 38.99320221]
[133.23652649 52.30348587]
[126.32014465 65.61376190]
[119.40375519 78.92404938]
[127.33154297 91.41581726]
[127.96958160 106.19712067]
[121.14768219 119.32555389]
[108.68536377 127.29956055]
[93.90652466 127.99234009]
[86.99013519 141.30262756]
[80.25154114 154.70379639]
[73.69193268 168.19346619]
[78.03012848 176.82164001]
[77.83479309 186.33815002]
[73.28092194 194.53816223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[4 17]
[5 16]
[7 15]
[8 14]
[21 114]
[22 113]
[24 112]
[25 111]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[35 101]
[36 100]
[39 98]
[40 97]
[41 96]
[46 95]
[47 94]
[48 93]
[49 92]
[53 87]
[54 86]
[55 85]
[56 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
