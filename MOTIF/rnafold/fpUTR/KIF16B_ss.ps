%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGUGGGGCUGCCGCGGAACUCCAGGUCCGGCCGGGAGCAGAGGGGCGGGGGCGAGAGGGAAGUGGGCGGGAGCCGCGAUCUGAGUAGCCAGCGUCGCCGGCGACCGCGGAGUUCUGGGCUAGUGGGACCCCGCGCGGGCUGGUUCGGGAUGAGCG\
) } def
/len { sequence length } bind def

/coor [
[232.56411743 443.19931030]
[228.20983887 428.84518433]
[223.85557556 414.49108887]
[207.24038696 406.89669800]
[201.30114746 389.28463745]
[210.22415161 372.61849976]
[205.30970764 358.44641113]
[200.39524841 344.27432251]
[195.48078918 330.10223389]
[190.56634521 315.93014526]
[185.65188599 301.75805664]
[180.59854126 287.63488770]
[175.40678406 273.56201172]
[169.53076172 259.76086426]
[162.98461914 246.26461792]
[156.43847656 232.76840210]
[150.65989685 228.09831238]
[149.89923096 218.94232178]
[143.61933899 205.32017517]
[137.33944702 191.69802856]
[131.05953979 178.07588196]
[124.77964783 164.45373535]
[118.49975586 150.83158875]
[112.21985626 137.20942688]
[105.93996429 123.58728790]
[99.66006470 109.96514130]
[94.19772339 113.19103241]
[86.54737854 113.20494843]
[78.51035309 108.97979736]
[63.58258438 107.50953674]
[48.65481186 106.03928375]
[33.72703934 104.56902313]
[17.16638374 112.56545258]
[3.29284692 101.85486603]
[-11.66091347 100.67797852]
[-26.61467361 99.50109100]
[-34.71482849 112.48747253]
[-47.92808914 120.21199799]
[-63.21814346 120.89963531]
[-77.07144928 114.39236450]
[-86.30461884 102.18551636]
[-88.79592896 87.08412933]
[-83.97290802 72.55838776]
[-72.94384766 61.94621277]
[-58.24313736 57.68619537]
[-43.24890137 60.75725555]
[-31.40670013 70.45368958]
[-25.43778610 84.54733276]
[-10.48402691 85.72422028]
[4.46973324 86.90110779]
[13.89955044 79.27275085]
[26.39833260 80.16411591]
[35.19729614 89.64125061]
[50.12506866 91.11151123]
[65.05284119 92.58176422]
[79.98061371 94.05202484]
[67.58513641 85.60499573]
[52.94771957 82.32688141]
[41.05266571 73.18862915]
[34.11307144 59.89043427]
[33.42007065 44.90645218]
[39.10259247 31.02448654]
[50.10339355 20.82731247]
[64.37574768 16.21213531]
[79.26425934 18.03761864]
[91.99887085 25.96413040]
[100.21029663 38.51692200]
[102.37076569 53.36051941]
[98.07882690 67.73233795]
[99.39213562 82.67473602]
[105.40336609 68.93191528]
[111.41459656 55.18909454]
[117.42583466 41.44627380]
[111.90596008 26.88026047]
[118.19797516 13.02871990]
[132.11846924 7.85613108]
[138.12969971 -5.88668823]
[144.14093018 -19.62950706]
[150.15216064 -33.37232590]
[156.02818298 -47.17350006]
[161.76843262 -61.03169250]
[167.50868225 -74.88988495]
[173.24893188 -88.74807739]
[178.85285950 -102.66195679]
[184.31991577 -116.63018036]
[189.78697205 -130.59840393]
[183.22459412 -144.97584534]
[188.82887268 -159.75311279]
[203.27488708 -166.16311646]
[217.99208069 -160.40292358]
[224.24899292 -145.88993835]
[218.33352661 -131.23446655]
[203.75520325 -125.13134766]
[198.28814697 -111.16312408]
[192.82109070 -97.19490051]
[193.31423950 -89.78149414]
[187.10713196 -83.00782776]
[181.36688232 -69.14963531]
[175.62663269 -55.29143906]
[169.88638306 -41.43324661]
[170.23388672 -34.01158524]
[163.89497375 -27.36109543]
[157.88374329 -13.61827564]
[151.87251282 0.12454408]
[145.86128235 13.86736298]
[151.51217651 27.60064697]
[145.61169434 41.62345123]
[131.16865540 47.45750809]
[125.15741730 61.20032501]
[119.14618683 74.94314575]
[113.13495636 88.68596649]
[113.28221130 103.68524170]
[119.56211090 117.30738831]
[125.84200287 130.92953491]
[132.12190247 144.55168152]
[138.40179443 158.17382812]
[144.68168640 171.79597473]
[150.96159363 185.41812134]
[157.24148560 199.04026794]
[163.52137756 212.66242981]
[169.93470764 226.22225952]
[176.48085022 239.71849060]
[183.02699280 253.21470642]
[190.59226990 240.26225281]
[205.40542603 237.90202332]
[216.62142944 247.86201477]
[216.02882385 262.85031128]
[204.06146240 271.89367676]
[189.47966003 268.37026978]
[194.67141724 282.44314575]
[200.60780334 289.45526123]
[199.82397461 296.84359741]
[204.73843384 311.01568604]
[209.65289307 325.18777466]
[214.56733704 339.35986328]
[219.48179626 353.53195190]
[224.39624023 367.70404053]
[235.95637512 370.73266602]
[244.51473999 378.89996338]
[248.00854492 390.07647705]
[245.67395020 401.42858887]
[238.20967102 410.13681030]
[242.56394958 424.49093628]
[246.91821289 438.84503174]
[260.64343262 451.08499146]
[256.05731201 468.00122070]
[260.69256592 482.26705933]
[265.32781982 496.53292847]
[269.96307373 510.79876709]
[283.54724121 519.33398438]
[285.20046997 535.29162598]
[273.65454102 546.43035889]
[257.76651001 544.20550537]
[249.72430420 530.32373047]
[255.69723511 515.43402100]
[251.06198120 501.16818237]
[246.42672729 486.90231323]
[241.79147339 472.63647461]
[231.13516235 466.84371948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[11 132]
[12 130]
[13 129]
[14 123]
[15 122]
[16 121]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[26 112]
[29 56]
[30 55]
[31 54]
[32 53]
[34 50]
[35 49]
[36 48]
[70 111]
[71 110]
[72 109]
[73 108]
[76 105]
[77 104]
[78 103]
[79 102]
[80 100]
[81 99]
[82 98]
[83 97]
[84 95]
[85 94]
[86 93]
[146 158]
[147 157]
[148 156]
[149 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
