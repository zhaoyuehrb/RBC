%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCGGUAGCGGCGCCGCUUGGAGCACGGGCGCUGCGGGACGGAGCCCGGAGCCGGAGGCGGCGGCGGCGGAGACGUCGGCCGGAGCUCGAGUCCAGUCCAGCCCCCGGCUCCGCCACCUGCAGAGCAGAAGCCACUCUCUUGGGACCAUUCAUAAGCAGGAGACAUCAACACCGUGACAC\
) } def
/len { sequence length } bind def

/coor [
[61.97792816 231.71792603]
[59.31573868 216.52200317]
[65.31275940 202.30795288]
[78.05536652 193.61141968]
[77.54045868 178.62026978]
[77.02554321 163.62910461]
[76.51062775 148.63793945]
[75.99571228 133.64678955]
[61.39674759 130.20147705]
[54.23371124 143.38066101]
[47.07067108 156.55984497]
[39.90763474 169.73902893]
[40.87055206 186.10987854]
[27.02748680 194.90200806]
[12.61899471 187.07083130]
[12.46729851 170.67237854]
[26.72844887 162.57598877]
[33.89148712 149.39680481]
[41.05452728 136.21762085]
[48.21756363 123.03842926]
[60.29484177 80.25777435]
[92.72325134 68.82934570]
[81.89150238 58.45277405]
[71.05975342 48.07620239]
[60.22800446 37.69963074]
[49.39625549 27.32306099]
[41.01220703 23.63366699]
[38.46956253 16.67417526]
[27.81753540 6.11319256]
[17.16551018 -4.44779015]
[6.51348591 -15.00877285]
[-8.73406601 -19.23047066]
[-12.32458115 -33.68583298]
[-22.97660637 -44.24681473]
[-33.62863159 -54.80779648]
[-44.28065872 -65.36878204]
[-63.18854523 -64.54924011]
[-76.48175049 -77.56874847]
[-76.06983948 -95.85227966]
[-87.07811737 -106.04137421]
[-98.08640289 -116.23047638]
[-109.09468079 -126.41957855]
[-127.13275909 -130.06452942]
[-131.69258118 -146.99980164]
[-142.87414551 -156.99842834]
[-154.05570984 -166.99705505]
[-165.23727417 -176.99568176]
[-176.50425720 -186.89796448]
[-187.85581970 -196.70317078]
[-199.20738220 -206.50837708]
[-210.55894470 -216.31358337]
[-228.17802429 -208.73202515]
[-250.06268311 -220.98420715]
[-263.64822388 -227.34292603]
[-277.23376465 -233.70164490]
[-290.81927490 -240.06036377]
[-307.10278320 -238.11611938]
[-316.71029663 -251.40625000]
[-309.75848389 -266.25900269]
[-293.39871216 -267.39511108]
[-284.46057129 -253.64588928]
[-270.87503052 -247.28717041]
[-257.28952026 -240.92845154]
[-243.70397949 -234.56974792]
[-238.89952087 -240.32884216]
[-229.29061890 -251.84704590]
[-224.48617554 -257.60617065]
[-233.17749023 -269.83157349]
[-241.86880493 -282.05700684]
[-250.56011963 -294.28244019]
[-259.25143433 -306.50784302]
[-274.38034058 -312.83621216]
[-276.19561768 -329.13458252]
[-262.82983398 -338.63659668]
[-248.03259277 -331.56741333]
[-247.02601624 -315.19918823]
[-238.33470154 -302.97375488]
[-229.64338684 -290.74832153]
[-220.95207214 -278.52288818]
[-212.26075745 -266.29748535]
[-196.04582214 -246.58367920]
[-200.75373840 -227.66514587]
[-189.40217590 -217.85993958]
[-178.05061340 -208.05473328]
[-166.69905090 -198.24952698]
[-159.56408691 -196.25157166]
[-155.23864746 -188.17724609]
[-144.05708313 -178.17861938]
[-132.87551880 -168.17999268]
[-121.69394684 -158.18136597]
[-109.58707428 -158.53871155]
[-100.18754578 -150.27851868]
[-98.90557861 -137.42785645]
[-87.89730072 -127.23875427]
[-76.88902283 -117.04965973]
[-65.88073730 -106.86055756]
[-54.81763458 -109.76520538]
[-43.61309052 -106.92836761]
[-35.08990479 -98.94503021]
[-31.45297432 -87.72144318]
[-33.71967316 -76.02080536]
[-23.06764984 -65.45982361]
[-12.41562366 -54.89884186]
[-1.76359844 -44.33785629]
[12.72204971 -40.87155151]
[17.07446861 -25.66079903]
[27.72649384 -15.09981537]
[38.37851715 -4.53883266]
[49.03054428 6.02215004]
[59.77282715 16.49131203]
[70.60457611 26.86788368]
[81.43632507 37.24445343]
[92.26807404 47.62102509]
[103.09982300 57.99759293]
[117.90077972 60.43308640]
[131.48631287 54.07437134]
[134.59288025 40.95318985]
[144.54934692 32.15143204]
[157.56533813 30.72033119]
[168.85537720 36.96027756]
[182.54806519 30.83571243]
[196.24075317 24.71114731]
[209.93344116 18.58658218]
[221.92338562 6.60001898]
[236.76065063 14.80317688]
[232.98544312 31.33145905]
[216.05801392 32.27927017]
[202.36532593 38.40383530]
[188.67263794 44.52840042]
[174.97994995 50.65296555]
[169.66732788 66.59780121]
[154.16650391 73.92192078]
[137.84503174 67.65990448]
[124.25949860 74.01862335]
[124.06639099 81.51613617]
[136.85951233 89.34785461]
[123.68016815 96.51116180]
[123.48706055 104.00867462]
[136.72724915 111.05832672]
[149.96742249 118.10797882]
[163.20761108 125.15763092]
[176.44778442 132.20727539]
[189.68797302 139.25692749]
[202.92814636 146.30657959]
[214.64082336 136.61732483]
[229.17131042 132.15263367]
[244.30381775 133.59335327]
[257.73074341 140.71978760]
[267.40460205 152.44520569]
[271.85015869 166.98155212]
[270.38952637 182.11213684]
[263.24545288 195.52969360]
[251.50732422 205.18809509]
[236.96513367 209.61453247]
[221.83647156 208.13400269]
[208.42834473 200.97227478]
[198.78538513 189.22146606]
[194.37806702 174.67346191]
[195.87849426 159.54676819]
[182.63832092 152.49711609]
[169.39813232 145.44746399]
[156.15795898 138.39781189]
[142.91777039 131.34815979]
[129.67759705 124.29850769]
[116.43740845 117.24885559]
[110.07477570 121.21961212]
[118.31434631 133.75393677]
[129.59895325 143.63612366]
[123.87683868 157.50181580]
[108.90711212 156.54930115]
[104.98853302 142.07023621]
[97.34951019 129.16111755]
[90.98686981 133.13186646]
[91.50178528 148.12303162]
[92.01670074 163.11419678]
[92.53161621 178.10534668]
[93.04653168 193.09651184]
[106.35581207 200.89820862]
[113.31399536 214.66726685]
[111.70074463 230.01005554]
[102.03084564 242.03073120]
[87.38991547 246.89353943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 177]
[5 176]
[6 175]
[7 174]
[8 173]
[9 20]
[10 19]
[11 18]
[12 17]
[22 114]
[23 113]
[24 112]
[25 111]
[26 110]
[28 109]
[29 108]
[30 107]
[31 106]
[33 104]
[34 103]
[35 102]
[36 101]
[39 96]
[40 95]
[41 94]
[42 93]
[44 90]
[45 89]
[46 88]
[47 87]
[48 85]
[49 84]
[50 83]
[51 82]
[53 64]
[54 63]
[55 62]
[56 61]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
[115 134]
[116 133]
[120 130]
[121 129]
[122 128]
[123 127]
[138 165]
[139 164]
[140 163]
[141 162]
[142 161]
[143 160]
[144 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
