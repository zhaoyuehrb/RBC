%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGCUGCUCAGUGGCGGGAGGGCGGGCUACCGCGCCCGGGCCCUACCCGCCCUGGCGCACUGCUCUUCCCGGUC\
) } def
/len { sequence length } bind def

/coor [
[130.90739441 259.00161743]
[137.16928101 245.17581177]
[148.00552368 234.54847717]
[142.05392456 220.77972412]
[136.10232544 207.01097107]
[130.39720154 201.98056030]
[130.20152283 192.55712891]
[124.81648254 178.55708313]
[119.43144226 164.55703735]
[113.76194000 150.66973877]
[107.81034088 136.90100098]
[101.85874176 123.13224792]
[95.90713501 109.36350250]
[89.91001892 103.61244965]
[90.00634003 94.90965271]
[84.62129974 80.90959930]
[79.23625946 66.90955353]
[73.85121918 52.90950775]
[68.46617889 38.90945816]
[63.08113480 24.90941238]
[57.41163635 11.02212334]
[51.46003342 -2.74662495]
[45.50843430 -16.51537323]
[39.55683136 -30.28412247]
[33.60523224 -44.05287170]
[27.09697533 -57.56740570]
[20.04289627 -70.80522919]
[12.98881721 -84.04305267]
[5.93473864 -97.28087616]
[-9.25432014 -101.64756775]
[-16.83368111 -115.51583862]
[-12.30664253 -130.65788269]
[1.64098370 -138.09019470]
[16.73431778 -133.40332031]
[24.01875305 -119.37789154]
[19.17256165 -104.33495331]
[26.22664070 -91.09712982]
[33.28071976 -77.85930634]
[40.33479691 -64.62148285]
[44.82792664 -62.34249115]
[47.78503036 -57.06921387]
[47.37397766 -50.00447083]
[53.32558060 -36.23572540]
[59.27718353 -22.46697426]
[65.22878265 -8.69822598]
[71.18038177 5.07052231]
[76.88551331 10.10093880]
[77.08118439 19.52437019]
[82.46622467 33.52441788]
[87.85126495 47.52446747]
[93.23630524 61.52451324]
[98.62134552 75.52455902]
[104.00638580 89.52461243]
[109.67588806 103.41189575]
[115.62748718 117.18064880]
[121.57908630 130.94940186]
[127.53069305 144.71813965]
[133.98599243 151.58607483]
[133.43148804 159.17199707]
[138.81652832 173.17204285]
[144.20156860 187.17208862]
[149.87107849 201.05937195]
[155.82267761 214.82812500]
[161.77427673 228.59687805]
[176.93969727 227.98487854]
[191.30084229 232.89630127]
[202.91548157 242.66688538]
[210.21282959 255.97526550]
[212.20599365 271.02160645]
[208.62541199 285.77096558]
[199.95530701 298.22863770]
[187.36827087 306.70983887]
[172.56655884 310.06753540]
[157.55201721 307.84765625]
[144.35522461 300.35037231]
[134.76094055 288.58969116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[7 61]
[8 60]
[9 59]
[10 57]
[11 56]
[12 55]
[13 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 39]
[27 38]
[28 37]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
