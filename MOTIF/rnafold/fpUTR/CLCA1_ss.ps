%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAAACCACUUCCGAUAAGUUGGAAACGUGUGUCUAUAUUUUCAUAUCUGUAUAUAUAUAAUGGUAAAGAAAGACACCUUCGUAACCCGCAUUUUCCAAAGAGAGAAAUCACAGGGAGAUGUACAGCA\
) } def
/len { sequence length } bind def

/coor [
[126.58105469 209.87170410]
[112.20802307 214.16308594]
[97.22569275 213.43527222]
[83.33628082 207.77098083]
[72.11784363 197.81373596]
[64.84497070 184.69483948]
[62.34397125 169.90480042]
[64.89899445 155.12400818]
[72.21975708 142.03178406]
[83.47243500 132.11686707]
[89.23272705 118.26699829]
[77.53760529 127.65977478]
[65.84249115 137.05255127]
[54.14737701 146.44532776]
[42.45226288 155.83810425]
[30.75714684 165.23088074]
[25.32619858 180.70463562]
[9.16220760 183.47184753]
[-1.10669601 170.68585205]
[5.08325529 155.49978638]
[21.36437035 153.53576660]
[33.05948639 144.14299011]
[44.75460052 134.75021362]
[56.44971466 125.35743713]
[68.14482880 115.96466064]
[79.83994293 106.57188416]
[83.07670593 91.92526245]
[76.42883301 78.47885895]
[69.78096008 65.03245544]
[52.52625656 54.73999405]
[54.35308456 35.55016327]
[47.06333160 22.44064331]
[39.77358246 9.33112335]
[32.48382950 -3.77839684]
[25.19407845 -16.88791656]
[17.90432739 -29.99743843]
[7.16753387 -32.41013718]
[-0.27450222 -40.21422577]
[-2.09825683 -50.61841583]
[2.06802750 -60.08406067]
[-4.57984591 -73.53046417]
[-11.22771931 -86.97686768]
[-17.87559128 -100.42327118]
[-23.28737068 -104.50105286]
[-25.42741966 -109.90399933]
[-24.50208855 -114.68379211]
[-30.49255562 -128.43568420]
[-36.48302460 -142.18756104]
[-42.47349548 -155.93943787]
[-56.90771103 -161.79530334]
[-62.78699875 -175.82701111]
[-57.11537170 -189.55174255]
[-63.10584259 -203.30361938]
[-69.09631348 -217.05551147]
[-82.59980011 -226.36076355]
[-81.02341461 -242.68397522]
[-65.98880005 -249.23321533]
[-52.96228790 -239.27117920]
[-55.34442902 -223.04597473]
[-49.35395813 -209.29409790]
[-43.36349106 -195.54220581]
[-29.45083427 -190.34860229]
[-23.17974472 -176.48757935]
[-28.72161102 -161.92991638]
[-22.73114204 -148.17802429]
[-16.74067307 -134.42614746]
[-10.75020504 -120.67426300]
[-4.42918825 -107.07114410]
[2.21868515 -93.62474060]
[8.86655807 -80.17833710]
[15.51443100 -66.73193359]
[32.34510803 -57.33432007]
[31.01384735 -37.28718948]
[38.30360031 -24.17766762]
[45.59334946 -11.06814766]
[52.88310242 2.04137254]
[60.17285156 15.15089321]
[67.46260071 28.26041412]
[77.61940002 30.20872879]
[85.14586639 37.61990356]
[87.34095001 48.17780685]
[83.22736359 58.38458252]
[89.87523651 71.83098602]
[96.52310944 85.27738953]
[101.35057831 84.45291901]
[106.34046173 85.21882629]
[110.96752167 87.59016418]
[114.71532440 91.40856934]
[117.13335419 96.35011292]
[117.88969421 101.95180511]
[131.49281311 108.27281952]
[145.09591675 114.59384155]
[158.69903564 120.91485596]
[172.30215454 127.23587036]
[185.90527344 133.55688477]
[199.50837708 139.87789917]
[213.11149597 146.19892883]
[226.71461487 152.51994324]
[240.24127197 145.14865112]
[255.33821106 147.13252258]
[266.24316406 157.50294495]
[268.91854858 172.13101196]
[282.52166748 178.45202637]
[297.27764893 172.79199219]
[311.67977905 179.30003357]
[317.18347168 194.11505127]
[310.52352905 208.44755554]
[295.65115356 213.79432678]
[281.38986206 206.98321533]
[276.20065308 192.05514526]
[262.59753418 185.73413086]
[249.69186401 193.12210083]
[234.73361206 191.47454834]
[223.48216248 181.21499634]
[220.39360046 166.12304688]
[206.79048157 159.80203247]
[193.18736267 153.48101807]
[179.58424377 147.16000366]
[165.98114014 140.83898926]
[152.37802124 134.51797485]
[138.77490234 128.19696045]
[125.17179108 121.87593842]
[111.56867218 115.55492401]
[120.47607422 127.62381744]
[133.77648926 134.55914307]
[144.01710510 145.51953125]
[150.03440857 159.25968933]
[151.14476013 174.21853638]
[147.22198486 188.69651794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[27 84]
[28 83]
[29 82]
[31 78]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[40 71]
[41 70]
[42 69]
[43 68]
[46 67]
[47 66]
[48 65]
[49 64]
[52 61]
[53 60]
[54 59]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
