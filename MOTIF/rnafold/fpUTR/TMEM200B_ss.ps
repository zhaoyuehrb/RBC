%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUGAUCCGAGCGGUCUUCCCGGUGUCUAGCUCAAGUCGCUCCUGCUGCAGCUUCGCUGCGGGCGGAGGAGGUCUGGAAGGAGGGGGCGGGCAGGGAGAGGCUGGAGCCGGUGACGCCCCCUCCUCCCGCGCUGCGAGCGCCCAGACGACGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[82.09979248 236.69851685]
[77.29924011 246.89611816]
[69.62142944 255.11111450]
[59.81793213 260.56332397]
[48.84109879 262.74185181]
[37.75153732 261.45288086]
[30.90209961 274.79776001]
[24.05265999 288.14260864]
[17.20322227 301.48745728]
[20.72697830 317.13873291]
[10.57535648 329.56146240]
[-5.46418810 329.22598267]
[-15.08749008 316.38964844]
[-10.91237545 300.89938354]
[3.85836554 294.63803101]
[10.70780373 281.29315186]
[17.55724335 267.94830322]
[24.40668106 254.60345459]
[13.31553364 239.37846375]
[11.42204189 220.55593872]
[19.32588005 203.27952576]
[34.93812943 192.31193542]
[54.03265762 190.72200012]
[59.80712128 176.87802124]
[57.56566238 162.15304565]
[70.01923370 152.39500427]
[75.79369354 138.55104065]
[81.56815338 124.70706177]
[87.34261322 110.86309052]
[81.34026337 124.60978699]
[69.07935333 133.25097656]
[54.11477661 134.28125000]
[40.78531265 127.40190125]
[32.95566559 114.60750580]
[32.89593506 99.60762024]
[40.62343979 86.75127411]
[53.89769363 79.76599121]
[68.87000275 80.67705536]
[81.19777679 89.21843719]
[69.01047516 80.47374725]
[60.16266251 77.99333954]
[56.67107391 71.43392944]
[44.65892029 62.45016098]
[32.64676666 53.46638870]
[20.63461304 44.48261642]
[5.19414616 46.53925705]
[-6.85990858 37.25731659]
[-8.72544575 22.52451706]
[-20.73760033 13.54074574]
[-32.74975586 4.55697441]
[-44.76190948 -4.42679739]
[-56.77406311 -13.41056919]
[-68.78621674 -22.39434052]
[-80.79837036 -31.37811279]
[-97.10377502 -36.02248383]
[-97.15468597 -52.97635651]
[-80.87747955 -57.71858215]
[-71.81459808 -43.39026642]
[-59.80244446 -34.40649414]
[-47.79029083 -25.42272377]
[-35.77813721 -16.43895149]
[-23.76598167 -7.45517969]
[-11.75382805 1.52859199]
[0.25832561 10.51236343]
[14.91779900 8.13845825]
[27.22780800 17.07816315]
[29.61838341 32.47046280]
[41.63053894 41.45423508]
[53.64269257 50.43800735]
[65.65484619 59.42177963]
[77.75516510 68.28644562]
[89.94246674 77.03113556]
[103.30642700 82.28115845]
[107.73172760 92.21076965]
[122.03376007 87.68840790]
[136.33580017 83.16604614]
[150.63783264 78.64367676]
[164.93986511 74.12131500]
[179.24191284 69.59895325]
[179.45677185 49.50114059]
[201.13110352 33.06555557]
[213.48880005 24.56335640]
[225.84649658 16.06115723]
[238.20419312 7.55895901]
[250.56188965 -0.94324005]
[262.91958618 -9.44543839]
[275.27728271 -17.94763756]
[287.63497925 -26.44983673]
[299.99267578 -34.95203400]
[312.35037231 -43.45423508]
[324.70803833 -51.95643234]
[327.83078003 -64.50670624]
[338.34295654 -71.32795715]
[350.28579712 -69.20616913]
[362.80908203 -77.46255493]
[361.91744995 -87.24371338]
[364.66275024 -96.61338806]
[370.62057495 -104.27495575]
[378.92517090 -109.18455505]
[388.39492798 -110.69322205]
[397.70046997 -108.63238525]
[405.55136108 -103.33155060]
[418.68740845 -110.57343292]
[431.82342529 -117.81531525]
[439.83419800 -132.12472534]
[456.23327637 -132.07130432]
[464.15066528 -117.70999146]
[455.44161987 -103.81449127]
[439.06530762 -104.67929077]
[425.92929077 -97.43740845]
[412.79324341 -90.19552612]
[408.87597656 -70.18052673]
[391.27386475 -59.31496048]
[371.06546021 -64.93929291]
[358.54220581 -56.68291092]
[351.57238770 -40.60206985]
[333.21026611 -39.59873962]
[320.85256958 -31.09654045]
[308.49487305 -22.59434128]
[296.13717651 -14.09214211]
[283.77947998 -5.58994293]
[271.42178345 2.91225576]
[259.06408691 11.41445446]
[246.70639038 19.91665268]
[234.34869385 28.41885185]
[221.99099731 36.92105103]
[209.63330078 45.42324829]
[209.26298523 52.91410065]
[221.86721802 61.04634094]
[208.52233887 67.89580536]
[208.15202332 75.38665771]
[219.61087036 85.06626129]
[231.06973267 94.74585724]
[242.52857971 104.42546082]
[253.98744202 114.10506439]
[269.98907471 119.70722198]
[269.03552246 136.63433838]
[252.50598145 140.40396118]
[244.30783081 125.56391907]
[232.84898376 115.88431549]
[221.39013672 106.20471191]
[209.93127441 96.52511597]
[198.47242737 86.84551239]
[183.76426697 83.90099335]
[169.46223450 88.42335510]
[155.16020203 92.94571686]
[140.85815430 97.46807861]
[126.55612183 101.99044037]
[112.25408936 106.51280212]
[101.18659210 116.63755035]
[95.41213226 130.48152161]
[89.63766479 144.32550049]
[83.86320496 158.16946411]
[85.69163513 173.88467407]
[73.65109253 182.65248108]
[67.87663269 196.49645996]
[76.09039307 204.36982727]
[81.48177338 214.35891724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[23 156]
[24 155]
[26 153]
[27 152]
[28 151]
[29 150]
[39 72]
[40 71]
[42 70]
[43 69]
[44 68]
[45 67]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[74 149]
[75 148]
[76 147]
[77 146]
[78 145]
[79 144]
[81 127]
[82 126]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[94 115]
[95 114]
[102 111]
[103 110]
[104 109]
[131 143]
[132 142]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
