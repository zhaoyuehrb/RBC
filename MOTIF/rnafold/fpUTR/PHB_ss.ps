%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCAGAGGAGCUCAUGCGCAGUAUGUGUGGUUGGGGAAUUCAUGUGGAGGUCAGAGUGGAAGCAGUUAUCUUGGCCCCAGGAUGUCAUCCAGCUCCUGCUUCCAUAAGAAGCAUGUCGUUCUUAAUACACGAUGUUGACAAGCAGUAUGGUGAGGAGGUGUGAGAGGGUCCAGCAGAAGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[103.47924805 349.65902710]
[112.12581635 337.12280273]
[125.12717438 329.19284058]
[123.15908813 314.32250977]
[113.81878662 302.72042847]
[119.67853546 288.02438354]
[117.71044922 273.15405273]
[115.74237061 258.28372192]
[113.77428436 243.41340637]
[103.78511047 240.59379578]
[95.27684021 234.58221436]
[89.23834229 226.04609680]
[86.38183594 215.94802856]
[87.05892944 205.43722534]
[91.21757507 195.71873474]
[98.40511322 187.91531372]
[107.81738281 182.93768311]
[106.83120728 167.97013855]
[105.84503174 153.00259399]
[104.85885620 138.03503418]
[103.87268066 123.06749725]
[90.22354889 116.84647369]
[78.27957916 125.92070007]
[66.33560944 134.99491882]
[54.39163589 144.06915283]
[42.44766617 153.14337158]
[33.49324799 167.53971863]
[17.18068886 162.92054749]
[17.10357475 145.96678162]
[33.37343979 141.19940186]
[45.31740952 132.12518311]
[57.26137924 123.05095673]
[69.20535278 113.97673035]
[81.14932251 104.90250397]
[81.14932251 89.90250397]
[69.20535278 80.82827759]
[57.26137924 71.75405121]
[45.31740952 62.67982483]
[33.37343979 53.60559845]
[21.42947006 44.53137207]
[9.48550034 35.45714569]
[-2.53269148 26.48145103]
[-14.62429333 17.60490036]
[-30.04585075 19.79882240]
[-42.18200302 10.62448692]
[-44.17853546 -4.09113264]
[-56.27013779 -12.96768475]
[-66.92955780 -10.69778442]
[-76.87051392 -14.59787369]
[-82.88951874 -23.15118599]
[-83.19113159 -33.38581085]
[-94.98423767 -42.65525818]
[-106.77734375 -51.92470169]
[-115.47415924 -54.77460861]
[-118.68653107 -61.44487381]
[-130.32559204 -70.90703583]
[-141.96464539 -80.36919403]
[-153.60369873 -89.83135223]
[-165.24275208 -99.29351044]
[-176.88180542 -108.75566864]
[-192.47062683 -111.45730591]
[-197.46542358 -125.48945618]
[-209.10447693 -134.95161438]
[-220.74353027 -144.41377258]
[-232.38258362 -153.87593079]
[-248.07574463 -152.00498962]
[-260.44357300 -161.84429932]
[-262.14849854 -177.55635071]
[-252.17898560 -189.81948853]
[-236.44978333 -191.35818481]
[-224.29273987 -181.25958252]
[-222.92042542 -165.51498413]
[-211.28137207 -156.05282593]
[-199.64231873 -146.59066772]
[-188.00326538 -137.12850952]
[-173.24693298 -135.10366821]
[-167.41964722 -120.39472198]
[-155.78059387 -110.93256378]
[-144.14154053 -101.47040558]
[-132.50248718 -92.00824738]
[-120.86342621 -82.54608917]
[-109.22437286 -73.08393097]
[-97.50789642 -63.71781158]
[-85.71479034 -54.44836426]
[-73.92168427 -45.17891693]
[-54.64056396 -43.85809708]
[-47.39358521 -25.05928612]
[-35.30198288 -16.18273354]
[-20.66421127 -18.68696213]
[-8.27515697 -9.85712528]
[-5.74774122 5.51329803]
[6.34386015 14.38984966]
[13.60865974 15.81618977]
[18.55972672 23.51317406]
[30.50369644 32.58740234]
[42.44766617 41.66162872]
[54.39163589 50.73585510]
[66.33560944 59.81008148]
[78.27957916 68.88430786]
[90.22354889 77.95853424]
[105.05949402 80.17092896]
[119.13129425 74.97628021]
[133.20309448 69.78163147]
[143.46981812 57.74397659]
[158.08901978 60.59491348]
[172.16082764 55.40026474]
[186.23263550 50.20561600]
[200.26123047 44.89541626]
[214.24569702 39.47002411]
[228.23016357 34.04463196]
[242.21461487 28.61924362]
[256.19906616 23.19385147]
[258.79318237 11.57101059]
[266.60192871 2.73925424]
[277.59350586 -1.17838597]
[288.99108887 0.68471825]
[297.97445679 7.75008297]
[312.12979126 2.78758097]
[322.59310913 -9.07958412]
[337.16345215 -5.98858547]
[351.31878662 -10.95108795]
[365.47412109 -15.91358948]
[379.62945557 -20.87609100]
[393.78479004 -25.83859444]
[393.66528320 -40.98007584]
[398.47103882 -55.33916092]
[407.68078613 -67.35829163]
[420.29550171 -75.73371124]
[434.94683838 -79.55693054]
[450.04553223 -78.41322327]
[463.95379639 -72.42665863]
[475.16296387 -62.24660873]
[482.45712280 -48.97733307]
[485.04510498 -34.05817795]
[482.64614868 -19.10746956]
[475.52047729 -5.74694252]
[464.44104004 4.57415009]
[450.60968018 10.73625469]
[435.52664185 12.07095051]
[420.82809448 8.43346214]
[408.10839844 0.21835472]
[398.74728394 -11.68325710]
[384.59194946 -6.72075462]
[370.43661499 -1.75825262]
[356.28128052 3.20424962]
[342.12594604 8.16675186]
[332.67510986 19.67896461]
[317.09228516 16.94291878]
[302.93695068 21.90542030]
[296.02667236 38.84394073]
[278.63790894 45.48225784]
[261.62448120 37.17831039]
[247.64001465 42.60370255]
[233.65554810 48.02909470]
[219.67108154 53.45448303]
[205.68663025 58.87987518]
[200.57907104 64.23941040]
[191.42727661 64.27742004]
[177.35548401 69.47206879]
[163.28367615 74.66671753]
[154.02346802 86.33281708]
[138.39775085 83.85343170]
[124.32594299 89.04808044]
[110.25414276 94.24272919]
[120.07663727 103.57910919]
[118.84022522 122.08132172]
[119.82640076 137.04885864]
[120.81257629 152.01641846]
[121.79875183 166.98396301]
[122.78492737 181.95150757]
[140.22937012 191.67886353]
[148.22454834 209.82495117]
[143.69638062 228.98257446]
[128.64460754 241.44531250]
[130.61270142 256.31564331]
[132.58078003 271.18597412]
[134.54885864 286.05630493]
[144.02993774 298.72198486]
[138.02941895 312.35443115]
[139.99749756 327.22473145]
[154.61415100 331.49948120]
[166.22422791 341.35473633]
[172.81620789 355.08303833]
[173.24800110 370.30581665]
[167.44479370 384.38568115]
[156.41201782 394.88320923]
[142.06118774 399.97961426]
[126.87865448 398.79193115]
[113.49488831 391.52593994]
[104.22871399 379.44052124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 180]
[4 179]
[6 177]
[7 176]
[8 175]
[9 174]
[17 170]
[18 169]
[19 168]
[20 167]
[21 166]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 92]
[43 91]
[46 88]
[47 87]
[51 85]
[52 84]
[53 83]
[55 82]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
[62 75]
[63 74]
[64 73]
[65 72]
[101 164]
[102 163]
[103 162]
[105 160]
[106 159]
[107 158]
[108 156]
[109 155]
[110 154]
[111 153]
[112 152]
[117 149]
[118 148]
[120 146]
[121 145]
[122 144]
[123 143]
[124 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
