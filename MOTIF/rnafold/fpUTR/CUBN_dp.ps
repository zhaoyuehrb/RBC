%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:22 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (CUBN)
} def

/sequence { (\
AUGCUCAGUUGGUUGGAGUGGCCUCACUCUUACCUGCCAACCUGGGAGGUUG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.011558300 ubox
1 13 0.003193219 ubox
1 50 0.120669989 ubox
2 8 0.012747767 ubox
2 12 0.003468113 ubox
2 39 0.009518374 ubox
2 49 0.133199570 ubox
2 52 0.007294043 ubox
3 9 0.023958120 ubox
3 10 0.005053777 ubox
3 13 0.044911422 ubox
3 14 0.004413165 ubox
3 19 0.003376548 ubox
3 22 0.005018057 ubox
3 37 0.043770091 ubox
3 38 0.014206175 ubox
3 50 0.037253900 ubox
3 51 0.013218876 ubox
4 8 0.025076421 ubox
4 12 0.047260505 ubox
4 18 0.003458188 ubox
4 21 0.005004460 ubox
4 36 0.043392073 ubox
4 45 0.037745075 ubox
4 46 0.724562075 ubox
4 48 0.056958613 ubox
4 49 0.036387396 ubox
5 11 0.041467259 ubox
5 12 0.015410446 ubox
5 17 0.003416369 ubox
5 44 0.025300787 ubox
5 45 0.727571382 ubox
5 46 0.008722636 ubox
5 47 0.056168842 ubox
5 48 0.030333251 ubox
6 11 0.026752130 ubox
6 15 0.018782823 ubox
6 16 0.003207923 ubox
6 20 0.005122157 ubox
6 36 0.042672342 ubox
6 44 0.730710484 ubox
6 45 0.012188513 ubox
6 46 0.053330644 ubox
6 52 0.006047069 ubox
7 14 0.018464975 ubox
7 19 0.005168224 ubox
7 28 0.005535855 ubox
7 35 0.044020219 ubox
7 43 0.728753263 ubox
7 51 0.005452137 ubox
8 13 0.013140484 ubox
8 27 0.005917350 ubox
8 34 0.023321085 ubox
8 37 0.625631228 ubox
8 41 0.515874658 ubox
8 42 0.519048854 ubox
9 17 0.005130563 ubox
9 26 0.005835556 ubox
9 36 0.608312414 ubox
9 40 0.725569097 ubox
10 16 0.005098385 ubox
10 32 0.007391428 ubox
10 36 0.019114656 ubox
10 39 0.729533326 ubox
11 23 0.006396001 ubox
11 31 0.008515576 ubox
11 34 0.675390053 ubox
11 35 0.006928470 ubox
11 38 0.727433165 ubox
11 42 0.024797031 ubox
12 22 0.006402060 ubox
12 30 0.003367915 ubox
12 33 0.677243079 ubox
12 34 0.007880869 ubox
12 37 0.726474264 ubox
12 41 0.025225064 ubox
13 21 0.006381296 ubox
13 32 0.670951874 ubox
13 36 0.700746285 ubox
13 40 0.025211464 ubox
14 20 0.005854313 ubox
14 32 0.265400722 ubox
14 36 0.045887971 ubox
14 39 0.025184186 ubox
15 29 0.007212999 ubox
15 30 0.847594685 ubox
15 31 0.191530966 ubox
15 34 0.387999447 ubox
15 35 0.021110712 ubox
15 38 0.024578088 ubox
16 25 0.004627538 ubox
16 28 0.003248764 ubox
16 29 0.947306870 ubox
16 30 0.022242485 ubox
16 31 0.011205553 ubox
16 33 0.317045414 ubox
16 34 0.019032252 ubox
16 37 0.021218547 ubox
17 24 0.005347137 ubox
17 28 0.997149757 ubox
17 30 0.020458009 ubox
17 31 0.035874380 ubox
17 35 0.007373614 ubox
18 23 0.005319004 ubox
18 27 0.998620542 ubox
18 29 0.020001267 ubox
18 30 0.024098796 ubox
18 33 0.018164092 ubox
18 34 0.005761920 ubox
19 26 0.998206617 ubox
19 32 0.019250972 ubox
20 25 0.995171992 ubox
20 28 0.027114382 ubox
20 29 0.030684374 ubox
20 30 0.008327229 ubox
20 31 0.018973503 ubox
20 34 0.004760106 ubox
21 27 0.028706265 ubox
21 28 0.023500434 ubox
21 29 0.008838573 ubox
21 30 0.017615579 ubox
21 33 0.004781543 ubox
31 52 0.011717466 ubox
32 50 0.102575791 ubox
32 51 0.010181820 ubox
33 49 0.111855367 ubox
34 48 0.112374960 ubox
35 47 0.112901441 ubox
36 50 0.007330970 ubox
37 45 0.114583029 ubox
37 46 0.010312223 ubox
37 49 0.007736229 ubox
38 44 0.114648587 ubox
38 45 0.010664835 ubox
38 48 0.007756519 ubox
38 52 0.656601902 ubox
39 43 0.092917266 ubox
39 51 0.667101559 ubox
40 50 0.669341278 ubox
41 49 0.669900099 ubox
42 48 0.669706416 ubox
42 49 0.007359114 ubox
43 47 0.603328417 ubox
43 48 0.008781388 ubox
8 37 0.9500000 lbox
9 36 0.9500000 lbox
11 34 0.9500000 lbox
12 33 0.9500000 lbox
13 32 0.9500000 lbox
15 30 0.9500000 lbox
16 29 0.9500000 lbox
17 28 0.9500000 lbox
18 27 0.9500000 lbox
19 26 0.9500000 lbox
20 25 0.9500000 lbox
38 52 0.9500000 lbox
39 51 0.9500000 lbox
40 50 0.9500000 lbox
41 49 0.9500000 lbox
42 48 0.9500000 lbox
43 47 0.9500000 lbox
showpage
end
%%EOF
