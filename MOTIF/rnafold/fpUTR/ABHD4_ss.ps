%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGGGUCAGCUGGUGCUGGCGUCAGGCGCUGGGCGGGCUCGCCAGGACCUGGCAAGGCUUGUUUACU\
) } def
/len { sequence length } bind def

/coor [
[98.27043152 282.20574951]
[96.25646973 266.97949219]
[102.14030457 252.79229736]
[114.33919525 243.46049500]
[112.32569122 228.59623718]
[110.31219482 213.73199463]
[108.29869843 198.86775208]
[106.28519440 184.00350952]
[104.27169800 169.13925171]
[92.78158569 156.06341553]
[99.46793365 139.07148743]
[96.78958130 124.31255341]
[94.11122894 109.55360413]
[91.10238647 94.85847473]
[87.76457214 80.23455811]
[84.42675781 65.61064148]
[73.81262207 53.87817764]
[78.52384949 39.74829102]
[75.18603516 25.12437439]
[71.84822083 10.50045490]
[68.51040649 -4.12346363]
[65.17259216 -18.74738312]
[61.83477783 -33.37129974]
[48.10801315 -36.86697769]
[37.32436371 -45.94817352]
[31.59854126 -58.75796127]
[32.02018738 -72.71601105]
[38.44698715 -85.03833008]
[49.54467773 -93.29252625]
[46.86632538 -108.05146790]
[44.18797302 -122.81041718]
[35.41061401 -137.31538391]
[46.91891479 -149.76510620]
[62.06790161 -142.15296936]
[58.94691467 -125.48876953]
[61.62527084 -110.72982025]
[64.30361938 -95.97087860]
[79.51634979 -90.99280548]
[90.27455139 -79.01584625]
[93.63629150 -63.17665482]
[88.61322021 -47.68593597]
[76.45869446 -36.70911407]
[79.79650879 -22.08519554]
[83.13432312 -7.46127748]
[86.47213745 7.16264105]
[89.80995178 21.78656006]
[93.14776611 36.41047668]
[103.52316284 47.09693909]
[99.05067444 62.27282333]
[102.38848877 76.89674377]
[105.72630310 91.52066040]
[110.59240723 98.30444336]
[108.87017059 106.87525177]
[111.54852295 121.63419342]
[114.22687531 136.39314270]
[124.50491333 144.53382874]
[126.28386688 157.11480713]
[119.13594818 167.12576294]
[121.14944458 181.99000549]
[123.16294098 196.85424805]
[125.17644501 211.71849060]
[127.18994141 226.58274841]
[129.20344543 241.44699097]
[143.44532776 247.19714355]
[152.89143372 259.30773926]
[155.00079346 274.52111816]
[149.20602417 288.74490356]
[137.06587219 298.15298462]
[121.84598541 300.21466064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[11 55]
[12 54]
[13 53]
[14 51]
[15 50]
[16 49]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[29 37]
[30 36]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
