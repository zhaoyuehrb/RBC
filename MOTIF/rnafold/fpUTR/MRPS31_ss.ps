%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAGGGCGGGGACGUGUUUGGCAGCGGGACGCACCAUUUCAGUUGUGUUCUUGGUUCAUUUCGUGUCUCGGCG\
) } def
/len { sequence length } bind def

/coor [
[74.06003571 303.76879883]
[61.42386246 312.61926270]
[46.00782394 313.21026611]
[32.73112106 305.35327148]
[25.83029747 291.55535889]
[27.50738335 276.21942139]
[37.22722626 264.23910522]
[51.88825989 259.43725586]
[55.57054138 244.89625549]
[51.19436264 230.65904236]
[62.08264542 219.18054199]
[65.76492310 204.63954163]
[69.44721222 190.09854126]
[73.12949371 175.55754089]
[76.81177521 161.01652527]
[80.49405670 146.47552490]
[84.17633820 131.93452454]
[87.85861969 117.39351654]
[79.08985138 103.56556702]
[82.78049469 87.61306000]
[96.73146820 79.04136658]
[99.80970001 64.36061096]
[102.88793182 49.67986298]
[91.56187439 39.40038300]
[86.93235779 24.92749977]
[90.14731598 10.17858791]
[100.24549866 -0.90665978]
[114.44085693 -5.41857624]
[117.51908875 -20.09932899]
[120.59731293 -34.78008270]
[123.67554474 -49.46083450]
[126.75377655 -64.14158630]
[129.83200073 -78.82234192]
[132.91023254 -93.50308990]
[135.98846436 -108.18384552]
[124.49293518 -118.36953735]
[119.64559174 -132.94345093]
[122.75033569 -147.98526001]
[132.97201538 -159.44880676]
[147.56105042 -164.25044250]
[162.59304810 -161.09857178]
[174.02450562 -150.84100342]
[178.78039551 -136.23699951]
[175.58140564 -121.21494293]
[165.28807068 -109.81570435]
[150.66921997 -105.10561371]
[147.59098816 -90.42486572]
[144.51275635 -75.74411011]
[141.43452454 -61.06335831]
[138.35629272 -46.38260269]
[135.27807617 -31.70185089]
[132.19984436 -17.02109909]
[129.12161255 -2.34034586]
[140.30892944 7.49375725]
[145.10366821 21.70172501]
[142.12327576 36.49982071]
[132.07000732 47.89404678]
[117.56867981 52.75809097]
[114.49044800 67.43884277]
[111.41222382 82.11959839]
[119.63775635 91.98088074]
[120.66611481 104.78114319]
[114.12040710 115.82913971]
[102.39962769 121.07579803]
[98.71733856 135.61680603]
[95.03505707 150.15780640]
[91.35277557 164.69880676]
[87.67049408 179.23982239]
[83.98821259 193.78082275]
[80.30593109 208.32182312]
[76.62364960 222.86282349]
[80.73645020 238.14012146]
[70.11154938 248.57853699]
[66.42926025 263.11953735]
[77.03783417 274.32052612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 74]
[9 73]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[21 60]
[22 59]
[23 58]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
