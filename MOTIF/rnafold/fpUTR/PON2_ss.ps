%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUCGGCCUAGGCGGAGGACGGGGCGGAGCGCGGCCGGCACCAUCGAGCCGGGAAGAUGGCACCGCCCACGGAGCUGCUGGCCAGGCCGGAGCGAGGCAGCGCGCCCGGCUCCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[180.83164978 192.71701050]
[170.08937073 182.24784851]
[163.01945496 179.80381775]
[159.20964050 171.36813354]
[148.74047852 160.62585449]
[134.31648254 156.91139221]
[130.22581482 141.62815857]
[119.75664520 130.88587952]
[109.28748322 120.14360046]
[98.81832123 109.40131378]
[93.59690857 108.12865448]
[89.50478363 103.96743774]
[88.10453033 97.82615662]
[78.20224762 86.55917358]
[68.29996490 75.29219818]
[58.39768219 64.02521515]
[48.49539948 52.75823975]
[34.83580780 55.05119705]
[21.93984032 50.30372238]
[13.16736317 39.86752701]
[10.74677753 26.56110382]
[15.20971298 13.90900612]
[5.60081482 2.39079905]
[-4.15558338 -9.00273800]
[-14.05786514 -20.26971626]
[-23.96014786 -31.53669548]
[-33.86243057 -42.80367661]
[-43.76470947 -54.07065582]
[-53.66699219 -65.33763123]
[-68.58893585 -70.59558868]
[-71.17913818 -85.26324463]
[-81.08142090 -96.53022003]
[-98.90066528 -92.25712585]
[-116.37485504 -97.48898315]
[-128.79919434 -110.72924042]
[-132.87272644 -128.33712769]
[-127.57510376 -145.52851868]
[-138.31738281 -155.99768066]
[-149.05967712 -166.46684265]
[-159.80195618 -176.93600464]
[-170.54423523 -187.40516663]
[-185.81439209 -184.64801025]
[-199.77415466 -191.42330933]
[-207.05570984 -205.12580872]
[-204.85916138 -220.48661804]
[-194.02911377 -231.59921265]
[-178.72993469 -234.19055176]
[-164.84449768 -227.26422119]
[-157.71200562 -213.48353577]
[-160.07507324 -198.14744568]
[-149.33279419 -187.67828369]
[-138.59051514 -177.20912170]
[-127.84822845 -166.73995972]
[-117.10594177 -156.27079773]
[-106.14334106 -161.07882690]
[-94.16323853 -161.85972595]
[-82.60223389 -158.49597168]
[-72.85481262 -151.36849976]
[-66.10513306 -141.31369019]
[-63.18323898 -129.52531433]
[-64.46298981 -117.41273499]
[-69.81444550 -106.43250275]
[-59.91216278 -95.16552734]
[-45.69849396 -90.71346283]
[-42.40001297 -75.23991394]
[-32.49773026 -63.97293472]
[-22.59544945 -52.70595551]
[-12.69316769 -41.43897629]
[-2.79088640 -30.17199898]
[7.11139536 -18.90501976]
[13.97160816 -15.92265129]
[17.11902237 -7.21809864]
[26.72791862 4.30010796]
[43.00651932 2.65786147]
[57.22046661 11.08960438]
[63.71212387 26.46766281]
[59.76237869 42.85595703]
[69.66465759 54.12293625]
[79.56694031 65.38991547]
[89.46922302 76.65689087]
[99.37150574 87.92387390]
[109.56060791 98.93215179]
[120.02976990 109.67443848]
[130.49893188 120.41671753]
[140.96809387 131.15899658]
[156.14093018 135.64181519]
[159.48277283 150.15669250]
[169.95193481 160.89897156]
[180.55853271 171.50556946]
[191.30081177 181.97473145]
[202.94178772 191.43453979]
[215.38693237 199.80819702]
[227.83209229 208.18185425]
[240.27725220 216.55551147]
[252.72239685 224.92916870]
[268.04110718 222.10519409]
[280.54299927 230.77456665]
[283.14080811 245.39601135]
[295.58596802 253.76966858]
[308.03109741 262.14334106]
[323.98849487 260.48767090]
[335.12896729 272.03192139]
[332.90652466 287.92028809]
[319.02600098 295.96459961]
[304.13537598 289.99392700]
[299.65744019 274.58847046]
[287.21231079 266.21484375]
[274.76715088 257.84118652]
[260.24426270 260.94305420]
[247.50382996 252.62828064]
[244.34873962 237.37431335]
[231.90359497 229.00065613]
[219.45843506 220.62699890]
[207.01327515 212.25335693]
[194.56813049 203.87969971]
[196.65873718 218.73329163]
[188.89665222 231.56878662]
[174.77128601 236.61599731]
[160.63270569 231.60594177]
[152.83689880 218.79090881]
[154.88844299 203.93186951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[4 88]
[5 87]
[7 85]
[8 84]
[9 83]
[10 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[22 73]
[23 72]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[31 63]
[32 62]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
