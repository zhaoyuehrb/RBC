%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGAGGGCGCCCGAGGGGCCCCGGGCCGCGGCGCUCAGGGCCCGGGCGGCCGGCGGCGGCCCCGGGGCUGGGGGGAGUCCAGCCCGGAUAUUGAGUGCAGCCAUUGAGAAAAGCCAAACUCUUGUGUGUGCGCGUCUCGAUAGCCCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[87.56196594 246.53761292]
[75.21617889 237.13754272]
[70.78570557 222.26641846]
[75.97415161 207.64247131]
[88.78645325 198.88891602]
[89.09045410 183.89199829]
[86.06389618 177.10086060]
[89.55566406 168.59506226]
[90.16354370 153.60737610]
[90.77143097 138.61970520]
[91.37931061 123.63202667]
[79.42523956 114.57111359]
[65.15939331 119.20636749]
[50.89354706 123.84162140]
[36.62769699 128.47688293]
[33.06196213 132.44905090]
[28.75143051 134.41868591]
[24.59958076 134.44200134]
[21.35207367 132.93164062]
[6.83091688 136.69143677]
[-7.69023991 140.45121765]
[-22.21139717 144.21101379]
[-36.73255157 147.97079468]
[-51.25371170 151.73059082]
[-62.67396545 162.67993164]
[-76.93431854 158.37976074]
[-91.45548248 162.13954163]
[-105.97663879 165.89933777]
[-120.49779510 169.65911865]
[-128.29824829 183.40425110]
[-143.55528259 187.52717590]
[-157.21716309 179.58183289]
[-161.17854309 164.28205872]
[-153.08921814 150.70494080]
[-137.74841309 146.90553284]
[-124.25758362 155.13796997]
[-109.73642731 151.37817383]
[-95.21526337 147.61839294]
[-80.69410706 143.85859680]
[-70.31250000 133.17817688]
[-55.01349640 137.20942688]
[-40.49234009 133.44964600]
[-25.97118378 129.68984985]
[-11.45002747 125.93006897]
[3.07112908 122.17028046]
[17.59228516 118.41049194]
[31.99244308 114.21102905]
[46.25828934 109.57577515]
[60.52413940 104.94052124]
[74.78998566 100.30525970]
[78.10662842 85.67652893]
[67.23473358 75.34202576]
[56.36284256 65.00752258]
[45.49094772 54.67301559]
[34.61905670 44.33851242]
[18.55818176 41.02486038]
[13.65498257 25.37587929]
[24.95345306 13.48989487]
[40.83069229 17.59419250]
[44.95355988 33.46662140]
[55.82545471 43.80112457]
[66.69734192 54.13562775]
[77.56923676 64.47013092]
[88.44113159 74.80463409]
[102.22549438 68.88929749]
[102.22549438 53.88929749]
[102.22549438 38.88929749]
[102.22549438 23.88929749]
[102.22549438 8.88929844]
[99.08129883 0.24897158]
[102.38058472 -6.41393566]
[102.68459320 -21.41085434]
[102.98859406 -36.40777206]
[103.29260254 -51.40469360]
[103.59660339 -66.40161133]
[93.56653595 -78.92269135]
[97.24266815 -94.53888702]
[111.80498505 -101.27079773]
[126.08251953 -93.95426941]
[129.12277222 -78.20192719]
[118.59352112 -66.09761047]
[118.28952026 -51.10068893]
[117.98551178 -36.10377121]
[117.68151093 -21.10685158]
[117.37750244 -6.10993147]
[117.22549438 8.88929844]
[117.22549438 23.88929749]
[117.22549438 38.88929749]
[117.22549438 53.88929749]
[117.22549438 68.88929749]
[123.29753113 85.78357697]
[119.01498413 99.41683197]
[133.95263672 100.78305054]
[148.89028931 102.14926147]
[163.82794189 103.51548004]
[178.76559448 104.88169861]
[193.70324707 106.24791718]
[208.64089966 107.61413574]
[223.59162903 108.82890320]
[238.55389404 109.89209747]
[253.51617432 110.95529175]
[262.35763550 108.43142700]
[268.76992798 112.19467926]
[283.70758057 113.56089783]
[298.65829468 114.77566528]
[313.62057495 115.83885956]
[328.58285522 116.90206146]
[344.91540527 108.45645905]
[359.07769775 118.77718353]
[374.05844116 119.53691864]
[389.03918457 120.29666138]
[404.01992798 121.05639648]
[412.29574585 108.11782837]
[425.93945312 101.06484985]
[441.28100586 101.79467773]
[454.19357300 110.11099243]
[461.20373535 123.77675629]
[460.42581177 139.11593628]
[452.06906128 152.00236511]
[438.38140869 158.96968079]
[423.04473877 158.14369202]
[410.18457031 149.74658203]
[403.26019287 136.03713989]
[388.27944946 135.27740479]
[373.29870605 134.51766968]
[358.31796265 133.75793457]
[349.10028076 141.64797974]
[336.57727051 141.10090637]
[327.51965332 131.86433411]
[312.55737305 130.80113220]
[297.59512329 129.73794556]
[290.65939331 132.41664124]
[282.34136963 128.49855042]
[267.40371704 127.13233185]
[252.45297241 125.91756439]
[237.49070740 124.85437012]
[222.52842712 123.79117584]
[215.59271240 126.46987915]
[207.27467346 122.55178070]
[192.33702087 121.18556976]
[177.39936829 119.81935120]
[162.46171570 118.45313263]
[147.52406311 117.08691406]
[132.58641052 115.72070312]
[117.64876556 114.35448456]
[106.36698914 124.23990631]
[105.75910950 139.22758484]
[105.15122223 154.21525574]
[104.54334259 169.20294189]
[104.08737183 184.19601440]
[103.78337097 199.19293213]
[116.23040009 208.45851135]
[120.82193756 223.28070068]
[115.79244232 237.96006775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 151]
[6 150]
[8 149]
[9 148]
[10 147]
[11 146]
[12 50]
[13 49]
[14 48]
[15 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[26 39]
[27 38]
[28 37]
[29 36]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[65 90]
[66 89]
[67 88]
[68 87]
[69 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[92 145]
[93 144]
[94 143]
[95 142]
[96 141]
[97 140]
[98 139]
[99 137]
[100 136]
[101 135]
[103 134]
[104 133]
[105 131]
[106 130]
[107 129]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
