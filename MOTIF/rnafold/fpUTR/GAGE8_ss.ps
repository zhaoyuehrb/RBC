%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[58.72147751 108.39009857]
[43.72494888 108.71283722]
[28.72842216 109.03557587]
[19.90936661 112.43262482]
[13.08293915 109.03557587]
[-1.91358876 108.71283722]
[-16.91358948 108.71283722]
[-31.91011620 109.03557587]
[-46.90664291 109.35832214]
[-61.90317154 109.68106079]
[-76.89969635 110.00379944]
[-92.22695160 119.94664001]
[-107.33028412 111.27485657]
[-122.29904175 112.24248505]
[-137.26779175 113.21011353]
[-150.60371399 122.75397491]
[-165.42304993 115.73118591]
[-166.48092651 99.36619568]
[-152.68910217 90.49390411]
[-138.23542786 98.24135590]
[-123.26667023 97.27372742]
[-108.29791260 96.30609894]
[-99.91050720 87.32524109]
[-87.23975372 86.56807709]
[-77.22244263 95.00727844]
[-62.22591400 94.68453217]
[-47.22938538 94.36179352]
[-32.23285675 94.03904724]
[-17.23633003 93.71630859]
[-10.40990257 90.31925964]
[-1.59084725 93.71630859]
[13.40568066 94.03904724]
[28.40567970 94.03904724]
[43.40220642 93.71630859]
[58.39873505 93.39356995]
[60.87044525 84.40550995]
[65.25847626 76.18116760]
[71.34793091 69.12332153]
[78.84058380 63.57762909]
[87.36949158 59.81567001]
[96.51696014 58.02169037]
[105.83500671 58.28354263]
[114.86729431 60.58840561]
[123.17147064 64.82340240]
[130.34086609 70.78112793]
[136.02433777 78.16981506]
[150.03189087 72.80433655]
[164.03945923 67.43886566]
[173.94302368 54.36785507]
[190.17874146 56.67729568]
[196.04469299 71.99143219]
[185.50648499 84.55638885]
[169.40492249 81.44642639]
[155.39736938 86.81189728]
[141.38981628 92.17736816]
[141.33514404 108.10655212]
[135.36918640 122.87642670]
[146.31254578 133.13522339]
[157.25590515 143.39401245]
[168.19927979 153.65280151]
[179.14263916 163.91159058]
[195.22612000 167.11367798]
[200.23782349 182.72825623]
[189.02214050 194.69238281]
[173.11679077 190.69837952]
[168.88385010 174.85496521]
[157.94047546 164.59616089]
[146.99711609 154.33737183]
[136.05375671 144.07858276]
[125.11038971 133.81979370]
[105.72911072 141.73114014]
[84.93283081 139.33561707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[5 32]
[6 31]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[13 22]
[14 21]
[15 20]
[46 55]
[47 54]
[48 53]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
