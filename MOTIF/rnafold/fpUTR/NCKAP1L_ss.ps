%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGUGUCACCAUCUAAGCUGAAAGUGUUUGGGGAGAUCAGACAUUGCUGUCUGGUGCUCCUCUCUCAGUGGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[88.16559601 125.40457916]
[78.42387390 136.81066895]
[68.68215179 148.21675110]
[59.16625214 159.81192017]
[49.87984085 171.59167480]
[51.98609924 187.25497437]
[42.33352661 199.76910400]
[26.64882469 201.70964050]
[14.23744965 191.92530823]
[12.46284962 176.22096252]
[22.37786293 163.91372681]
[38.10009003 162.30525208]
[47.38649750 150.52551270]
[49.09889603 143.12780762]
[57.27606201 138.47503662]
[67.01778412 127.06894684]
[76.75950623 115.66285706]
[72.50547791 94.56887817]
[84.46060181 76.67677307]
[105.57684326 72.53466034]
[112.38669586 59.16956711]
[119.19655609 45.80447006]
[126.00641632 32.43936920]
[132.81626892 19.07427216]
[127.16873169 11.91878033]
[124.03756714 3.39446235]
[123.71298981 -5.64642334]
[126.20574188 -14.30704117]
[131.24815369 -21.73494530]
[138.32270813 -27.20597649]
[146.71511841 -30.19484520]
[155.58638000 -30.42551422]
[164.05667114 -27.89655495]
[173.79840088 -39.30264282]
[183.54011536 -50.70873260]
[193.28184509 -62.11482239]
[203.02355957 -73.52091217]
[212.76527405 -84.92700195]
[222.28117371 -96.52215576]
[231.56759644 -108.30191040]
[240.85400391 -120.08166504]
[250.14041138 -131.86141968]
[259.42681885 -143.64117432]
[268.71322632 -155.42092896]
[277.99963379 -167.20068359]
[287.28604126 -178.98043823]
[289.10244751 -195.27868652]
[304.23178101 -201.60600281]
[317.11032104 -191.45338440]
[314.48968506 -175.26498413]
[299.06579590 -169.69403076]
[289.77938843 -157.91427612]
[280.49298096 -146.13452148]
[271.20657349 -134.35476685]
[261.92016602 -122.57501221]
[252.63375854 -110.79525757]
[243.34735107 -99.01550293]
[234.06092834 -87.23574829]
[232.34854126 -79.83805084]
[224.17137146 -75.18527985]
[214.42965698 -63.77919006]
[204.68792725 -52.37310028]
[194.94621277 -40.96701431]
[185.20448303 -29.56092262]
[175.46276855 -18.15483284]
[180.02188110 3.09024811]
[167.97584534 21.47789192]
[146.18136597 25.88413048]
[139.37150574 39.24922943]
[132.56166077 52.61432648]
[125.75179291 65.97942352]
[118.94194031 79.34452057]
[124.40992737 86.23042297]
[127.47515106 94.47171783]
[127.83588409 103.25717926]
[125.45662689 111.72203064]
[120.57157135 119.03302765]
[113.66157532 124.47053528]
[105.40681458 127.49931335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 13]
[5 12]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
