%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCCCCGCCGCCCCAGCAGCCCAGGACAGCCCCCUCUCCCCGCCCCCAGCCCCCUCCCCCGGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[184.84764099 113.00046539]
[169.87889099 112.03284454]
[154.91012573 111.06521606]
[139.94137573 110.09758759]
[124.97261810 109.12995911]
[110.00386047 108.16233063]
[95.00386047 108.16233063]
[80.03510284 109.12995911]
[64.13789368 121.17938995]
[47.00647736 112.62541962]
[32.17631531 114.87625122]
[19.69341850 124.59674072]
[5.94922590 118.85684204]
[-8.88093853 121.10767365]
[-21.34705544 131.76261902]
[-36.71523666 126.03977203]
[-39.17601776 109.82630157]
[-26.19795609 99.80123901]
[-11.13176918 106.27750397]
[3.69839478 104.02667236]
[15.12053967 94.46718597]
[29.92548370 100.04608917]
[44.75564957 97.79525757]
[50.29097366 88.76357269]
[60.15824509 84.33276367]
[71.02598572 86.27468109]
[79.06747437 94.16120148]
[94.03623199 93.19357300]
[97.17703247 90.39113617]
[101.61929321 89.13965607]
[106.56428528 90.01936340]
[110.97148132 93.19357300]
[125.94023895 94.16120148]
[140.90899658 95.12882996]
[155.87776184 96.09645844]
[170.84651184 97.06408691]
[185.81527710 98.03170776]
[192.68074036 87.17031097]
[203.51838684 80.40494537]
[216.14558411 79.02303314]
[228.05165100 83.23529053]
[236.89704895 92.14645386]
[240.97308350 103.94472504]
[255.80323792 106.19555664]
[270.63339233 108.44638824]
[285.46356201 110.69721222]
[289.56765747 108.69274139]
[293.69442749 108.13230133]
[297.39312744 108.84939575]
[300.31219482 110.54977417]
[302.23190308 112.85447693]
[303.08093262 115.35012054]
[317.08850098 120.71559143]
[331.09603882 126.08106995]
[343.46603394 116.86221313]
[358.85797119 115.81732178]
[372.36035156 123.27983093]
[379.66464233 136.86846924]
[378.44003296 152.24714661]
[369.07733154 164.50859070]
[354.56408691 169.74023438]
[339.53149414 166.27264404]
[328.77633667 155.21234131]
[325.73056030 140.08862305]
[311.72302246 134.72315979]
[297.71545410 129.35768127]
[283.21273804 125.52738190]
[268.38256836 123.27655029]
[253.55241394 121.02571869]
[238.72224426 118.77488708]
[227.19038391 131.81781006]
[210.03640747 135.58641052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 28]
[8 27]
[10 23]
[11 22]
[13 20]
[14 19]
[43 70]
[44 69]
[45 68]
[46 67]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
