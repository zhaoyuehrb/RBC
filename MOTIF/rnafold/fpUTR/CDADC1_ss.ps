%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGGCUGCGCCUAGUGGGCCGUUGCCUUACAGUUGCUGAGAGGAGGCGAGAGGCGGGGGCGCUAGGGCCGAGAUCAUGUCUGACUGGGAGAGGUUUCCUUGGCAGCAGAGGACGCUAGGUUUGGG\
) } def
/len { sequence length } bind def

/coor [
[118.78459930 249.64921570]
[116.94843292 234.76202393]
[115.11227417 219.87483215]
[113.27611542 204.98764038]
[111.43995667 190.10044861]
[109.60379791 175.21325684]
[107.76763916 160.32606506]
[104.84127808 145.61428833]
[100.84059143 131.15763855]
[96.83989716 116.70099640]
[81.25418091 104.90245819]
[86.00833130 83.34101105]
[72.15013885 77.60076141]
[58.29194641 71.86051178]
[44.43375397 66.12026215]
[30.57556152 60.38000870]
[16.71736908 54.63975525]
[9.95268250 55.13586807]
[4.78055906 52.47467804]
[2.33114815 48.26278305]
[-11.22869110 41.84945679]
[-24.78853035 35.43613052]
[-40.57186127 36.53023148]
[-48.76905441 24.09418678]
[-62.32889557 17.68086052]
[-75.88873291 11.26753426]
[-89.44857788 4.85420752]
[-103.00841522 -1.55911899]
[-116.56825256 -7.97244549]
[-130.12809753 -14.38577175]
[-134.67974854 -13.82816124]
[-138.73406982 -14.72200871]
[-141.88096619 -16.71457863]
[-143.87524414 -19.35315895]
[-144.65512085 -22.15063286]
[-157.52105713 -29.86217499]
[-170.38697815 -37.57371521]
[-183.25291443 -45.28525543]
[-196.11883545 -52.99679947]
[-210.83882141 -47.71890640]
[-225.48954773 -53.18608856]
[-233.15341187 -66.81691742]
[-230.21174622 -82.17532349]
[-218.05352783 -92.00953674]
[-202.41949463 -91.67614746]
[-190.69157410 -81.33257294]
[-188.40730286 -65.86272430]
[-175.54136658 -58.15118408]
[-162.67544556 -50.43964386]
[-149.80950928 -42.72810364]
[-136.94358826 -35.01656342]
[-123.71476746 -27.94561195]
[-110.15493011 -21.53228569]
[-96.59508514 -15.11895847]
[-83.03524780 -8.70563221]
[-69.47541046 -2.29230547]
[-55.91556931 4.12102079]
[-42.35572815 10.53434753]
[-27.54228973 8.98152065]
[-18.37520409 21.87629128]
[-4.81536484 28.28961754]
[8.74447441 34.70294571]
[22.45762062 40.78156281]
[36.31581497 46.52181625]
[50.17400742 52.26206589]
[64.03219604 58.00231934]
[77.89039612 63.74256897]
[91.74858856 69.48281860]
[106.74406433 69.11470032]
[120.30390930 62.70137787]
[133.86375427 56.28805161]
[147.42358398 49.87472534]
[160.98342896 43.46139526]
[174.54325867 37.04806900]
[177.52919006 21.93547821]
[188.71063232 11.59969234]
[203.65736389 9.85051823]
[216.61293030 17.15060234]
[230.17276001 10.73727608]
[239.33985901 -2.15749454]
[254.15328979 -0.60466784]
[267.71313477 -7.01799440]
[281.27297974 -13.43132019]
[285.06256104 -28.60277748]
[297.74786377 -37.74700928]
[313.33929443 -36.54639053]
[324.47503662 -25.56781387]
[325.89712524 -9.99502850]
[316.93414307 2.81897092]
[301.81808472 6.82380724]
[287.68630981 0.12851875]
[274.12646484 6.54184532]
[260.56661987 12.95517159]
[252.36941528 25.39121819]
[236.58609009 24.29711533]
[223.02626038 30.71044159]
[220.45036316 45.35635757]
[209.61613464 55.80066299]
[194.53303528 57.88708878]
[180.95658875 50.60791016]
[167.39675903 57.02123642]
[153.83691406 63.43456268]
[140.27706909 69.84789276]
[126.71723175 76.26121521]
[113.15739441 82.67454529]
[119.36174011 99.24974060]
[111.29653931 112.70030975]
[115.29723358 127.15695190]
[119.29792023 141.61358643]
[128.18795776 129.53189087]
[142.98143005 127.05136871]
[155.32609558 135.57249451]
[158.25224304 150.28431702]
[150.10780334 162.88066101]
[135.49105835 166.24977112]
[122.65483093 158.48989868]
[124.49098969 173.37709045]
[126.32714844 188.26428223]
[128.16331482 203.15147400]
[129.99946594 218.03866577]
[131.83563232 232.92585754]
[133.67178345 247.81306458]
[146.28367615 257.33755493]
[148.38401794 273.00164795]
[138.72671509 285.51214600]
[123.04128265 287.44674683]
[110.63360596 277.65771484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[6 117]
[7 116]
[8 109]
[9 108]
[10 107]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[20 62]
[21 61]
[22 60]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[69 105]
[70 104]
[71 103]
[72 102]
[73 101]
[74 100]
[78 96]
[79 95]
[81 93]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
