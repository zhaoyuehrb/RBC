%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAAAAAGCCAGCUCCAGCAGGCGCUGCUCACUCCUCCCCAUCCUCUCCCUCUGUCCCUCUGUCCCUCUGACCCUGCACUGUCCCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[97.49806213 203.71791077]
[81.51126862 202.08737183]
[65.96804810 198.00761414]
[51.24130630 191.57649231]
[37.68435669 182.94833374]
[25.62244797 172.33010864]
[15.34496880 159.97659302]
[7.09848785 146.18414307]
[1.08085096 131.28366089]
[-13.51052856 134.76095581]
[-28.10190964 138.23826599]
[-35.90971756 143.36827087]
[-43.23886871 141.57931519]
[-57.93829346 144.56709290]
[-72.63771820 147.55488586]
[-84.62020111 157.88594055]
[-98.63359833 152.83877563]
[-113.33302307 155.82656860]
[-125.25212860 167.09010315]
[-140.88665771 162.14097595]
[-144.15313721 146.07043457]
[-131.69129944 135.41047668]
[-116.32081604 141.12715149]
[-101.62139130 138.13935852]
[-90.69031525 128.02200317]
[-75.62551117 132.85546875]
[-60.92608643 129.86767578]
[-46.22665787 126.87988281]
[-31.57921028 123.64688873]
[-16.98783112 120.16958618]
[-2.39645123 116.69228363]
[-3.51718950 106.91786957]
[-3.70702195 97.08125305]
[-2.96424127 87.27088165]
[-1.29552722 77.57497406]
[1.28411376 68.08074188]
[4.75148344 58.87354279]
[9.07540131 50.03618622]
[14.21698189 41.64814377]
[20.12998962 33.78484344]
[26.76124954 26.51700211]
[34.05112839 19.90997696]
[41.93407059 14.02318096]
[50.33918762 8.90955544]
[59.19088745 4.61508560]
[68.40957642 1.17838919]
[77.91235352 -1.36962748]
[87.61376190 -3.00605083]
[97.42655182 -3.71616483]
[107.26248169 -3.49358344]
[117.03310394 -2.34030867]
[126.65055847 -0.26671129]
[136.02833557 2.70856118]
[145.08213806 6.55875254]
[153.73051453 11.24923992]
[161.89570618 16.73784065]
[169.50428772 22.97520065]
[176.48782349 29.90522385]
[182.78353882 37.46559525]
[188.33479309 45.58832169]
[193.09167480 54.20036316]
[197.01139832 63.22426605]
[200.05871582 72.57888794]
[202.20625305 82.18009949]
[217.13092041 80.67866516]
[232.05557251 79.17723083]
[243.27980042 67.71439362]
[259.22470093 69.48616028]
[267.65875244 83.13337708]
[262.11206055 98.18706512]
[246.83955383 103.09932709]
[233.55702209 94.10189819]
[218.63235474 95.60333252]
[203.70768738 97.10476685]
[200.31250000 126.47768402]
[188.76927185 153.69992065]
[170.01564026 176.56028748]
[179.31187439 188.33227539]
[188.60812378 200.10426331]
[203.95231628 198.50437927]
[217.71531677 205.47456360]
[225.50540161 218.79064941]
[224.83679199 234.20352173]
[215.92283630 246.79498291]
[201.60795593 252.54714966]
[186.45994568 249.62452698]
[175.31251526 238.95971680]
[171.72274780 223.95581055]
[176.83613586 209.40051270]
[167.53988647 197.62852478]
[158.24363708 185.85653687]
[144.28643799 193.82098389]
[129.26673889 199.53453064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 31]
[10 30]
[11 29]
[13 28]
[14 27]
[15 26]
[17 24]
[18 23]
[64 74]
[65 73]
[66 72]
[77 91]
[78 90]
[79 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
