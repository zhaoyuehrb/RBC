%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGUGGGGCGGCCGGGCCUGCGCUGGGGACGGCUCUGGGGACUGCGGCCGGCGCCGGGACCUGGAGGGGACGCUGGGGCCGAAGCAGCAUGUGACACCGACCAGGAUUCAGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[75.92298889 198.25997925]
[72.56410980 182.57249451]
[82.84587860 170.25726318]
[82.84587860 155.25726318]
[82.84587860 140.25726318]
[82.84587860 125.25726318]
[72.88764191 114.03971100]
[57.99337006 112.26190186]
[43.37343979 118.30906677]
[31.65290260 109.11785889]
[16.75862694 107.34004974]
[1.84218466 105.75899506]
[-13.09382820 104.37496948]
[-28.02984047 102.99094391]
[-42.96585464 101.60691833]
[-57.90186691 100.22289276]
[-72.85484314 99.03614044]
[-87.82218933 98.04685974]
[-102.80128479 97.25522614]
[-117.78952789 96.66138458]
[-132.77777100 96.06754303]
[-146.06489563 109.43230438]
[-164.58927917 108.98057556]
[-176.78591919 95.45317841]
[-191.78462219 95.65116882]
[-206.78330994 95.84915924]
[-221.78199768 96.04715729]
[-235.59024048 104.89389038]
[-250.02954102 97.11968231]
[-250.24600220 80.72196198]
[-236.01695251 72.56930542]
[-221.97999573 81.04846191]
[-206.98130798 80.85047150]
[-191.98260498 80.65247345]
[-176.98391724 80.45448303]
[-170.89022827 70.63640594]
[-160.68054199 64.97129059]
[-148.88378906 64.99675751]
[-138.48811340 70.82388306]
[-132.18391418 81.07929993]
[-117.19567871 81.67314148]
[-102.20744324 82.26699066]
[-95.31285095 79.35111237]
[-86.83290863 83.07951355]
[-71.86557007 84.06879425]
[-64.89640808 81.33592987]
[-56.51784134 85.28688049]
[-41.58182907 86.67090607]
[-26.64581490 88.05493164]
[-11.70980263 89.43895721]
[3.22621012 90.82298279]
[10.26507854 88.27503204]
[18.53643417 92.44577789]
[33.43070984 94.22357941]
[46.98530197 88.04926300]
[59.77117538 97.36763000]
[74.66545105 99.14543152]
[93.42369080 79.14859772]
[114.68925476 88.95439911]
[129.31317139 85.61658478]
[143.93708801 82.27877045]
[158.51568604 78.74821472]
[173.04640198 75.02553558]
[187.57711792 71.30286407]
[202.10783386 67.58018494]
[216.63854980 63.85750961]
[224.71957397 50.54079819]
[239.50880432 46.97246933]
[252.15446472 54.75855637]
[266.68518066 51.03588104]
[275.26043701 35.85777664]
[291.81869507 31.59997368]
[306.07989502 40.40590668]
[320.50729370 36.30096054]
[334.93466187 32.19601440]
[349.30661011 27.90099335]
[363.62060547 23.41663933]
[370.98757935 9.69200802]
[385.56790161 5.34814548]
[398.60684204 12.45600414]
[412.92083740 7.97165203]
[423.61779785 -4.45844603]
[439.67855835 -1.14421940]
[444.58117676 14.50494003]
[433.28228760 26.39051819]
[417.40518188 22.28565216]
[403.09118652 26.77000427]
[396.43847656 40.04694748]
[381.98593140 44.79862595]
[368.10498047 37.73064041]
[353.79098511 42.21499252]
[348.27966309 47.28086472]
[339.03961182 46.62340164]
[324.61224365 50.72834396]
[310.18484497 54.83329010]
[305.50900269 66.91834259]
[294.54119873 74.17922211]
[281.19924927 73.75133514]
[270.40783691 65.56659698]
[255.87713623 69.28927612]
[248.53300476 82.19660950]
[233.84982300 86.17893219]
[220.36122131 78.38822174]
[205.83050537 82.11090088]
[191.29978943 85.83358002]
[176.76907349 89.55625153]
[162.23835754 93.27893066]
[156.46736145 98.04688263]
[147.27490234 96.90268707]
[132.65098572 100.24050140]
[118.02706909 103.57831573]
[113.14247131 117.47295380]
[97.84587860 125.25726318]
[97.84587860 140.25726318]
[97.84587860 155.25726318]
[97.84587860 170.25726318]
[108.12764740 182.57249451]
[104.76876831 198.25997925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 114]
[6 113]
[7 57]
[8 56]
[10 54]
[11 53]
[12 51]
[13 50]
[14 49]
[15 48]
[16 47]
[17 45]
[18 44]
[19 42]
[20 41]
[21 40]
[24 35]
[25 34]
[26 33]
[27 32]
[59 111]
[60 110]
[61 109]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[69 100]
[70 99]
[73 95]
[74 94]
[75 93]
[76 91]
[77 90]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
