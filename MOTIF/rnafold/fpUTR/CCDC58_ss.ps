%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCAAUAUGGCGGCGCCCAGUGGCGGUGUGAACUGUGAGGAGUUCGCCGAGUUCCAGGUGAUGGGGUUUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[79.18254089 115.35236359]
[74.16132355 101.19350433]
[59.62032318 97.51122284]
[45.07931900 93.82893372]
[27.64702606 99.32651520]
[15.40732861 86.92549896]
[0.72657603 83.84726715]
[-13.95417690 80.76903534]
[-29.10917091 91.74548340]
[-47.22359848 88.51035309]
[-57.29529953 73.48384857]
[-72.18010712 71.62846375]
[-87.06491852 69.77307129]
[-101.71615601 75.74397278]
[-113.38864136 66.49182129]
[-128.27345276 64.63643646]
[-143.15826416 62.78104401]
[-158.04307556 60.92565536]
[-172.93157959 67.80055237]
[-186.17182922 58.12439728]
[-184.14337158 41.85118484]
[-168.93292236 35.72140503]
[-156.18768311 46.04084396]
[-141.30287170 47.89623642]
[-126.41806030 49.75162506]
[-111.53325653 51.60701370]
[-97.94667053 45.50340271]
[-85.20952606 54.88826370]
[-70.32471466 56.74365234]
[-55.43990707 58.59904099]
[-47.91915512 49.57866287]
[-36.81626511 45.39190292]
[-24.97148132 47.23794174]
[-15.47837925 54.75599670]
[-10.87594700 66.08828735]
[3.80480623 69.16651154]
[18.48555946 72.24474335]
[28.96093369 65.84257507]
[41.36214447 68.49443054]
[48.76160049 79.28793335]
[63.30260468 82.97021484]
[77.84360504 86.65249634]
[90.96926880 75.76144409]
[108.02135468 75.40895844]
[121.58587646 85.74828339]
[135.96229553 81.46824646]
[150.33869934 77.18820190]
[164.71511841 72.90815735]
[179.09152222 68.62811279]
[184.12387085 53.94972610]
[196.84219360 45.06017303]
[212.35601807 45.37767410]
[224.69998169 54.78013992]
[229.12756348 69.65213013]
[223.93627930 84.27506256]
[211.12226868 93.02612305]
[195.61280823 92.54034424]
[183.37156677 83.00452423]
[168.99516296 87.28456879]
[154.61874390 91.56461334]
[140.24234009 95.84465790]
[125.86592102 100.12470245]
[124.09674072 109.40258026]
[119.11463165 117.42676544]
[126.79290771 130.31257629]
[134.47119141 143.19839478]
[142.14945984 156.08419800]
[156.71943665 163.61067200]
[157.21591187 180.00230408]
[143.12815857 188.39678955]
[128.94845581 180.15858459]
[129.26365662 163.76246643]
[121.58537292 150.87666321]
[113.90710449 137.99085999]
[106.22882843 125.10504150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[6 37]
[7 36]
[8 35]
[11 30]
[12 29]
[13 28]
[15 26]
[16 25]
[17 24]
[18 23]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
