%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCGCAUGCGCCCGGAGAGCUGAAGGGCGCGCGGUGCCGACAGGGAGCUUCCUUGGCUGGC\
) } def
/len { sequence length } bind def

/coor [
[103.06597900 124.31822968]
[92.31142426 123.27364349]
[83.05103302 117.70618439]
[77.08440399 108.69780731]
[75.57106018 97.99914551]
[61.71286774 92.25889587]
[47.85467529 86.51863861]
[40.64524460 87.04986572]
[35.25383759 84.06023407]
[32.96413803 79.47593689]
[19.73531723 72.40499115]
[6.50649881 65.33403778]
[-6.72232008 58.26308823]
[-19.95113945 51.19213486]
[-33.17995834 44.12118530]
[-45.80550003 52.77302170]
[-61.00692749 54.55494308]
[-75.29106140 49.05747604]
[-85.37551117 37.54389954]
[-88.94294739 22.65994835]
[-85.17359161 7.82584667]
[-74.93363190 -3.54963875]
[-60.57611465 -8.85250473]
[-45.40030670 -6.86419058]
[-32.89348984 1.95840323]
[-25.92964363 15.58790874]
[-26.10900688 30.89236641]
[-12.88018799 37.96331787]
[0.34863082 45.03426743]
[13.57744980 52.10522079]
[26.80626869 59.17617035]
[40.03508759 66.24712372]
[53.59492874 72.66044617]
[67.45311737 78.40069580]
[81.31130981 84.14095306]
[98.13095093 75.56062317]
[116.05975342 81.48349762]
[124.45812225 98.39472961]
[139.00859070 102.03943634]
[153.55905151 105.68413544]
[168.10952759 109.32883453]
[185.47804260 103.76451111]
[197.79084778 116.03992462]
[212.50262451 118.96627808]
[227.21440125 121.89263153]
[241.92617798 124.81899261]
[256.63796997 127.74534607]
[271.34973145 130.67170715]
[288.06411743 127.83159637]
[295.42022705 143.10655212]
[282.77859497 154.40370178]
[268.42340088 145.38348389]
[253.71160889 142.45712280]
[238.99983215 139.53076172]
[224.28805542 136.60441589]
[209.57626343 133.67805481]
[194.86448669 130.75170898]
[184.40322876 137.27671814]
[171.93301392 134.69206238]
[164.46482849 123.87931061]
[149.91435242 120.23460388]
[135.36389160 116.58990479]
[120.81341553 112.94519806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[7 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[38 63]
[39 62]
[40 61]
[41 60]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
