%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGGCACAAACCUAGCGCCAAGGUUGGCUGUCAAGGUAGAUUCCAGGGUGUGGAAGUGGCUUUGUGGUGCCACCUCUAACCGCUCGGAGGUCAACCCCCAUUCUACACCGAAAACUAGGCCUUGGCUGCU\
) } def
/len { sequence length } bind def

/coor [
[18.57373238 376.17758179]
[16.87957573 379.47610474]
[14.44405460 381.69451904]
[11.74047947 382.72814941]
[5.23222303 396.24267578]
[-1.27603281 409.75720215]
[4.17970467 424.58996582]
[-2.52659082 438.90081787]
[-17.41619301 444.19943237]
[-31.65536499 437.34222412]
[-36.79626083 422.39743042]
[-29.78887367 408.23153687]
[-14.79056549 403.24896240]
[-8.28230953 389.73440552]
[-1.77405369 376.21987915]
[4.08872509 362.41308594]
[9.29294491 348.34481812]
[14.49716377 334.27655029]
[19.53487015 320.14779663]
[24.40536308 305.96054077]
[29.27585411 291.77328491]
[34.14634705 277.58602905]
[39.01683807 263.39877319]
[43.88733292 249.21150208]
[48.75782394 235.02424622]
[53.62831497 220.83699036]
[58.33091354 206.59320068]
[62.86495972 192.29486084]
[67.39900970 177.99652100]
[58.42504501 166.13879395]
[58.15093231 151.09255981]
[66.89133453 138.62425232]
[81.46597290 133.63566589]
[86.00002289 119.33732605]
[77.32772827 107.47662354]
[77.24349213 92.78383636]
[85.77921295 80.82447052]
[99.70163727 76.12862396]
[104.23568726 61.83028793]
[108.76973724 47.53195190]
[113.30377960 33.23361588]
[117.83782959 18.93527794]
[120.30674744 4.13985920]
[120.66103363 -10.85595608]
[121.01531219 -25.85177231]
[121.36959076 -40.84758759]
[118.42201233 -49.59661484]
[121.91350555 -56.19225693]
[122.62187195 -71.17552185]
[123.33023834 -86.15878296]
[124.03860474 -101.14205170]
[124.74697113 -116.12531281]
[125.10125732 -131.12112427]
[125.10125732 -146.12112427]
[125.10125732 -161.12112427]
[125.10125732 -176.12112427]
[117.36395264 -189.92131042]
[125.10125732 -202.64857483]
[125.10125732 -217.64857483]
[125.10125732 -232.64857483]
[125.10125732 -247.64857483]
[125.10125732 -262.64859009]
[112.46899414 -271.66000366]
[107.57800293 -286.38607788]
[112.30895996 -301.16436768]
[124.84272003 -310.31228638]
[140.35978699 -310.31228638]
[152.89355469 -301.16436768]
[157.62451172 -286.38607788]
[152.73352051 -271.66000366]
[140.10125732 -262.64859009]
[140.10125732 -247.64857483]
[140.10125732 -232.64857483]
[140.10125732 -217.64857483]
[140.10125732 -202.64857483]
[147.83856201 -189.92131042]
[140.10125732 -176.12112427]
[140.10125732 -161.12112427]
[140.10125732 -146.12112427]
[140.10125732 -131.12112427]
[142.85409546 -127.11224365]
[143.05194092 -121.31186676]
[139.73023987 -115.41694641]
[139.02186584 -100.43368530]
[138.31350708 -85.45041656]
[137.60513306 -70.46715546]
[136.89677429 -55.48389053]
[136.36541748 -40.49330521]
[136.01112366 -25.49748993]
[135.65684509 -10.50167465]
[135.30256653 4.49414110]
[144.60186768 -7.27544212]
[158.02661133 -13.96694279]
[173.02275085 -14.30730247]
[186.73725891 -8.23176861]
[196.56095886 3.10378981]
[200.62489319 17.54278183]
[198.15588379 32.33818817]
[189.62367249 44.67517853]
[176.65151978 52.20664597]
[161.70735168 53.49972534]
[147.63432312 48.30841064]
[137.10981750 37.62034225]
[132.13616943 23.46932602]
[127.60211945 37.76766205]
[123.06806946 52.06599808]
[118.53402710 66.36433411]
[113.99997711 80.66267395]
[122.67227173 92.52337646]
[122.75650787 107.21616364]
[114.22078705 119.17552948]
[100.29836273 123.87137604]
[95.76431274 138.16970825]
[104.80094147 150.64550781]
[104.75917816 165.87217712]
[95.86460876 178.01098633]
[81.69734192 182.53057861]
[77.16329956 196.82891846]
[72.62924957 211.12724304]
[73.01235199 220.35150146]
[67.81557465 225.70748901]
[62.94508362 239.89474487]
[58.07458878 254.08200073]
[53.20409775 268.26925659]
[48.33360672 282.45651245]
[43.46311188 296.64376831]
[38.59262085 310.83102417]
[33.72212982 325.01828003]
[33.88726044 334.24902344]
[28.56542969 339.48077393]
[23.36120987 353.54904175]
[18.15699005 367.61730957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[16 132]
[17 131]
[18 130]
[19 128]
[20 127]
[21 126]
[22 125]
[23 124]
[24 123]
[25 122]
[26 121]
[27 119]
[28 118]
[29 117]
[33 113]
[34 112]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[43 91]
[44 90]
[45 89]
[46 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 80]
[54 79]
[55 78]
[56 77]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
