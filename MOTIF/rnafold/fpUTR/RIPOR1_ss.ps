%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGAGCCCUGAGUCCGGCCUCCCCUACAGACCCUCCCCAGCCAGUUCUAACGUGUGUCCAGGCUGGCCGCCCCAGCACCUACUGUGCGCAGCCUCGUGUAACAAUACUUGUGCCCUGGCUGCAGUCUGCGGGGCCGCGCCCUGGGCCUGCCGCAUUCGGCCAACGCACAGCAUCUGAGGAGGGUU\
) } def
/len { sequence length } bind def

/coor [
[-72.21677399 419.44692993]
[-78.56239319 433.03860474]
[-77.38958740 448.81628418]
[-89.78459167 457.07537842]
[-96.13021088 470.66705322]
[-102.47583008 484.25869751]
[-108.70705414 497.90319824]
[-114.82344818 511.59951782]
[-106.96355438 524.97869873]
[-108.50234985 540.41925049]
[-118.84812164 551.98406982]
[-134.02272034 555.22619629]
[-148.19119263 548.89892578]
[-155.90547180 535.43530273]
[-154.19927979 520.01232910]
[-143.72865295 508.56042480]
[-128.51979065 505.48312378]
[-122.40338898 491.78680420]
[-122.54703522 484.38177490]
[-116.06748199 477.91308594]
[-109.72187042 464.32144165]
[-103.37625122 450.72976685]
[-105.00293732 435.92425537]
[-92.15404510 426.69299316]
[-85.80843353 413.10131836]
[-90.17562866 405.32916260]
[-90.46910095 396.28106689]
[-86.49571991 387.99374390]
[-79.03710938 382.39120483]
[-69.69911194 380.83853149]
[-62.67682648 367.58383179]
[-55.65454102 354.32910156]
[-48.63225174 341.07440186]
[-41.60996246 327.81967163]
[-34.58767700 314.56497192]
[-27.56538963 301.31024170]
[-20.54310036 288.05554199]
[-21.42184448 273.18685913]
[-8.12421131 264.61462402]
[-1.10192406 251.35989380]
[5.92036343 238.10517883]
[0.44613501 226.42723083]
[2.73811579 213.53733826]
[12.17910480 204.18817139]
[25.47483826 201.95773315]
[32.71880341 188.82286072]
[39.96276855 175.68797302]
[25.03541756 177.16249084]
[14.45258808 166.53216553]
[15.99391747 151.61155701]
[28.52634430 143.36909485]
[42.83704758 147.86395264]
[48.40593719 161.79235840]
[56.72638702 149.31156921]
[65.04684448 136.83078003]
[73.36729431 124.34999084]
[81.68775177 111.86920166]
[90.00820160 99.38842010]
[96.35382080 85.79676056]
[100.57981110 71.40436554]
[104.80579376 57.01197052]
[109.03178406 42.61957550]
[113.25777435 28.22718048]
[105.47960663 17.21574974]
[105.47048187 3.92895436]
[113.00935364 -6.77468300]
[125.15609741 -11.11040401]
[129.62327576 -25.42977524]
[126.34690857 -40.90801620]
[137.52345276 -50.75352859]
[141.99061584 -65.07289886]
[146.45779419 -79.39226532]
[150.92497253 -93.71163940]
[155.39213562 -108.03101349]
[154.96162415 -117.17668152]
[160.05650330 -122.55227661]
[164.76359558 -136.79458618]
[169.47068787 -151.03688049]
[164.01686096 -160.47811890]
[164.65808105 -171.14228821]
[170.94020081 -179.51019287]
[180.58769226 -182.95411682]
[185.77058411 -197.03024292]
[190.95346069 -211.10638428]
[190.05010986 -215.40194702]
[190.52532959 -219.35891724]
[192.10037231 -222.58253479]
[194.39625549 -224.81040955]
[196.98609924 -225.93397522]
[203.10249329 -239.63031006]
[209.21888733 -253.32664490]
[215.33528137 -267.02297974]
[221.45167542 -280.71932983]
[227.56806946 -294.41567993]
[219.81497192 -305.82644653]
[218.72663879 -319.47033691]
[224.48100281 -331.76968384]
[235.47576904 -339.55245972]
[248.77291870 -340.87014771]
[255.11853027 -354.46179199]
[261.46414185 -368.05346680]
[262.26300049 -377.17434692]
[268.03222656 -381.81875610]
[274.60528564 -395.30191040]
[281.17831421 -408.78503418]
[282.68417358 -425.67196655]
[299.32803345 -428.89974976]
[307.03713989 -413.79986572]
[294.66146851 -402.21197510]
[288.08840942 -388.72885132]
[281.51535034 -375.24572754]
[275.05581665 -361.70782471]
[268.71017456 -348.11618042]
[262.36456299 -334.52453613]
[270.77127075 -320.43582153]
[269.11477661 -303.94653320]
[257.85018921 -291.56585693]
[241.26440430 -288.29928589]
[235.14801025 -274.60293579]
[229.03161621 -260.90658569]
[222.91522217 -247.21025085]
[216.79882812 -233.51391602]
[210.68243408 -219.81758118]
[205.02960205 -205.92349243]
[199.84671021 -191.84735107]
[194.66383362 -177.77122498]
[199.35411072 -159.02499390]
[183.71299744 -146.32978821]
[179.00590515 -132.08747864]
[174.29881287 -117.84517670]
[169.71151733 -103.56383514]
[165.24433899 -89.24446869]
[160.77716064 -74.92509460]
[156.30999756 -60.60572433]
[151.84281921 -46.28635406]
[155.43870544 -31.83233070]
[143.94264221 -20.96260262]
[139.47546387 -6.64323139]
[147.91621399 7.89211512]
[143.14857483 24.36184883]
[127.65016937 32.45317078]
[123.42417908 46.84556580]
[119.19818878 61.23795700]
[114.97219849 75.63035583]
[110.74621582 90.02275085]
[122.00537872 80.11157990]
[136.60594177 83.55011749]
[142.25880432 97.44418335]
[134.20603943 110.09933472]
[119.22546387 110.86386871]
[132.29902649 118.21791077]
[145.37258911 125.57195282]
[158.44615173 132.92599487]
[174.82928467 132.20137024]
[183.41906738 146.17089844]
[175.37905884 160.46392822]
[158.98014832 160.37699890]
[151.09211731 145.99955750]
[138.01855469 138.64552307]
[124.94498444 131.29147339]
[111.87142181 123.93743134]
[108.19612885 118.80468750]
[105.06231689 113.38143158]
[102.48899078 107.70886993]
[94.16853333 120.18965912]
[85.84808350 132.67044067]
[77.52762604 145.15122986]
[69.20717621 157.63201904]
[60.88672256 170.11280823]
[53.09764481 182.93194580]
[45.85367966 196.06681824]
[38.60971451 209.20169067]
[43.77721786 225.90400696]
[35.43958664 240.88621521]
[19.17507935 245.12747192]
[12.15279102 258.38217163]
[5.13050365 271.63690186]
[5.50696564 287.45364380]
[-7.28838587 295.07781982]
[-14.31067371 308.33251953]
[-21.33296204 321.58724976]
[-28.35524940 334.84194946]
[-35.37753677 348.09667969]
[-42.39982224 361.35137939]
[-49.42211151 374.60610962]
[-56.44440079 387.86080933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[4 22]
[5 21]
[6 20]
[7 18]
[8 17]
[30 186]
[31 185]
[32 184]
[33 183]
[34 182]
[35 181]
[36 180]
[37 179]
[39 177]
[40 176]
[41 175]
[45 172]
[46 171]
[47 170]
[53 169]
[54 168]
[55 167]
[56 166]
[57 165]
[58 164]
[59 145]
[60 144]
[61 143]
[62 142]
[63 141]
[67 138]
[68 137]
[70 135]
[71 134]
[72 133]
[73 132]
[74 131]
[76 130]
[77 129]
[78 128]
[82 126]
[83 125]
[84 124]
[89 123]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[99 114]
[100 113]
[101 112]
[103 111]
[104 110]
[105 109]
[150 161]
[151 160]
[152 159]
[153 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
