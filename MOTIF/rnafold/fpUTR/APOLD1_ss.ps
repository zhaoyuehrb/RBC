%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUGCAGGCAGGCGGGGGUGCGCGGGGCGGUCAGCGAUCUGCAGCUUCGCGGGGACAGAGAUGUAACCCAACUCGUUCACGG\
) } def
/len { sequence length } bind def

/coor [
[90.41403961 235.84828186]
[98.55731964 221.61384583]
[98.00304413 206.62408447]
[97.44877625 191.63433838]
[89.24646759 179.20166016]
[96.46854401 165.12500000]
[95.91427612 150.13525391]
[95.08309937 135.15829468]
[93.97531128 120.19925690]
[84.02819824 115.12943268]
[77.71245575 105.35280609]
[77.13191986 93.25279999]
[82.91664886 82.07186890]
[93.92794037 75.04261017]
[84.23902130 63.59164047]
[74.55010223 52.14066315]
[64.86117554 40.68968964]
[55.17225647 29.23871613]
[45.48333740 17.78774261]
[30.66277695 12.25045395]
[28.34851646 -2.46326351]
[18.65959549 -13.91423798]
[8.97067451 -25.36521149]
[-0.71824628 -36.81618500]
[-15.78808117 -34.19944763]
[-30.05018044 -39.44247818]
[-39.70883179 -51.04320145]
[-42.24703217 -65.82202148]
[-37.08180618 -79.79292297]
[-46.77072525 -91.24389648]
[-62.57456207 -94.00403595]
[-70.14338684 -108.14943695]
[-63.67105103 -122.82895660]
[-48.12257385 -126.78173065]
[-35.42541504 -116.97551727]
[-35.31975174 -100.93281555]
[-25.63083076 -89.48184204]
[-10.99759674 -92.26285553]
[3.15707731 -87.31298828]
[12.99869347 -75.86707306]
[15.80822563 -60.93378067]
[10.73272800 -46.50510788]
[20.42164803 -35.05413437]
[30.11056900 -23.60315895]
[39.79949188 -12.15218449]
[53.92703629 -7.43394613]
[56.93431091 8.09882069]
[66.62322998 19.54979515]
[76.31215668 31.00076866]
[86.00107574 42.45174408]
[95.68999481 53.90271759]
[105.37891388 65.35369110]
[119.36599731 70.77231598]
[134.24067688 68.83732605]
[149.11534119 66.90234375]
[163.32560730 55.36943054]
[179.27102661 62.44552612]
[194.06404114 59.96221542]
[208.85705566 57.47890854]
[221.15440369 46.62961960]
[236.61051941 52.11056137]
[239.32545471 68.28341675]
[226.50633240 78.51093292]
[211.34036255 72.27191925]
[196.54734802 74.75522614]
[181.75433350 77.23853302]
[174.35708618 86.99932098]
[161.87693787 89.07257843]
[151.05032349 81.77700806]
[136.17565918 83.71199799]
[121.30098724 85.64698792]
[124.14607239 99.57513428]
[119.18697357 111.96921539]
[108.93434906 119.09146881]
[110.04213715 134.05050659]
[113.87496948 142.61405945]
[110.90402985 149.58097839]
[111.45830536 164.57073975]
[119.70025635 178.07557678]
[112.43852997 191.08006287]
[112.99280548 206.06982422]
[113.54707336 221.05957031]
[122.71936798 234.65373230]
[115.29039001 249.27366638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[6 78]
[7 77]
[8 75]
[9 74]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[21 45]
[22 44]
[23 43]
[24 42]
[29 37]
[30 36]
[53 71]
[54 70]
[55 69]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
