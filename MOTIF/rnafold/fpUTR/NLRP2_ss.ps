%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCUCAGCAACGAUUACGCCCCGAGGGCCAAUCACAGGGCUGCGGCCGAGAGAGAAGCCUUAUUAGAGCUUUCUCAACCUGCAGCCCUCAUCUCCGCCGGCGAGUAGGGCCAGGUGUUGGGAGCUCCCACGUGGGACAAG\
) } def
/len { sequence length } bind def

/coor [
[80.62136841 252.32853699]
[87.56518555 239.03254700]
[100.51739502 231.46682739]
[115.50962830 231.94938660]
[127.94854736 240.33245850]
[124.06626129 225.84356689]
[120.18397522 211.35467529]
[116.30168915 196.86578369]
[105.95264435 190.51187134]
[102.63043213 178.41397095]
[108.65618896 166.95401001]
[105.09089661 152.38388062]
[101.52561188 137.81375122]
[97.96031952 123.24362183]
[84.36570740 116.90435028]
[70.91261292 123.53868103]
[57.45952225 130.17300415]
[44.00643158 136.80734253]
[39.10087204 148.78965759]
[27.69787216 154.02107239]
[16.17824745 150.17745972]
[2.58363008 156.51673889]
[-11.01098633 162.85600281]
[-24.60560417 169.19528198]
[-36.40543747 181.36903381]
[-51.36995316 173.40037537]
[-47.85530090 156.81472778]
[-30.94487762 155.60066223]
[-17.35025978 149.26139832]
[-3.75564361 142.92211914]
[9.83897305 136.58283997]
[19.06809235 121.69468689]
[37.37210083 123.35424805]
[50.82519150 116.71991730]
[64.27828217 110.08558655]
[77.73137665 103.45125580]
[79.25696564 95.05348969]
[83.65175629 88.28070831]
[89.94197845 83.99262238]
[85.43138885 69.68686676]
[80.92079926 55.38111115]
[76.41021729 41.07535553]
[71.89962769 26.76960373]
[67.38903809 12.46384811]
[62.87845612 -1.84190571]
[58.36786652 -16.14765930]
[53.85728073 -30.45341492]
[49.34669495 -44.75916672]
[35.94649887 -48.16597748]
[26.07152939 -57.68795395]
[22.24052238 -70.74710846]
[25.35645676 -83.88361359]
[34.49645615 -93.67235565]
[30.29902267 -108.07310486]
[26.10158730 -122.47385406]
[21.90415192 -136.87460327]
[17.70671654 -151.27534485]
[13.50928116 -165.67610168]
[8.06406879 -173.10644531]
[9.38104057 -180.43692017]
[5.49875498 -194.92581177]
[1.45865417 -209.37149048]
[-2.73878098 -223.77223206]
[-14.95265198 -234.71542358]
[-11.31816101 -250.70675659]
[4.42583799 -255.29571533]
[16.08326912 -243.76156616]
[11.66196632 -227.96966553]
[15.85940170 -213.56892395]
[20.78814888 -207.98522949]
[19.98764229 -198.80809021]
[23.86992836 -184.31921387]
[27.91002846 -169.87353516]
[32.10746384 -155.47277832]
[36.30490112 -141.07203674]
[40.50233459 -126.67128754]
[44.69976807 -112.27053833]
[48.89720535 -97.86978912]
[64.48903656 -92.84650421]
[74.13319397 -79.40084839]
[73.88795471 -62.69017410]
[63.65244675 -49.26975632]
[68.16303253 -34.96400070]
[72.67362213 -20.65824699]
[77.18421173 -6.35249281]
[81.69479370 7.95326138]
[86.20538330 22.25901604]
[90.71597290 36.56476974]
[95.22655487 50.87052536]
[99.73714447 65.17627716]
[104.24773407 79.48203278]
[102.88065338 64.54445648]
[110.94334412 51.89562607]
[125.06169891 46.82886124]
[139.32740784 51.46452332]
[147.77052307 63.86266708]
[146.85771179 78.83486938]
[136.97099304 90.11550140]
[122.24652863 92.98363495]
[137.24296570 93.31085968]
[152.23939514 93.63808441]
[167.23849487 93.80170441]
[182.23849487 93.80170441]
[197.23849487 93.80170441]
[207.15086365 81.70712280]
[222.52790833 78.86450195]
[236.10906982 86.61604309]
[241.48171997 101.30170441]
[236.10906982 115.98736572]
[222.52790833 123.73890686]
[207.15086365 120.89628601]
[197.23849487 108.80170441]
[182.23849487 108.80170441]
[167.23849487 108.80170441]
[160.49865723 111.97106934]
[151.91217041 108.63451385]
[136.91574097 108.30728912]
[121.91930389 107.98006439]
[112.53045654 119.67833710]
[116.09574127 134.24845886]
[119.66103363 148.81858826]
[123.22631836 163.38873291]
[136.26321411 176.34365845]
[130.79057312 192.98350525]
[134.67286682 207.47239685]
[138.55514526 221.96127319]
[142.43743896 236.45016479]
[147.72119141 250.48875427]
[154.35551453 263.94183350]
[160.98985291 277.39492798]
[167.62417603 290.84802246]
[181.55274963 299.50405884]
[180.75035095 315.88354492]
[166.04240417 323.13671875]
[152.55918884 313.80209351]
[154.17108154 297.48236084]
[147.53675842 284.02926636]
[140.90242004 270.57617188]
[134.26809692 257.12307739]
[130.44340515 271.62728882]
[119.48986053 281.87518311]
[104.76345062 284.72702026]
[90.77613831 279.30899048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[7 125]
[8 124]
[11 122]
[12 121]
[13 120]
[14 119]
[15 36]
[16 35]
[17 34]
[18 33]
[21 31]
[22 30]
[23 29]
[24 28]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[60 72]
[61 71]
[62 69]
[63 68]
[99 118]
[100 117]
[101 116]
[102 114]
[103 113]
[104 112]
[128 139]
[129 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
