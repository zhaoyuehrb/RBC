%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGUUUGUUCCUAGCAACCAGCCUGAGGUCUGGAGGUGGUGCGGAGGGAGCCGCCUAGGGACCAGGGACUCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[204.10746765 243.17086792]
[202.20614624 225.07577515]
[208.15713501 207.83033752]
[197.03660583 197.76387024]
[185.91609192 187.69738770]
[174.79556274 177.63092041]
[163.67503357 167.56443787]
[152.55451965 157.49795532]
[137.92643738 154.69290161]
[132.88790894 139.69543457]
[121.76738739 129.62895203]
[110.64686584 119.56248474]
[99.52633667 109.49600983]
[94.06604004 108.53782654]
[89.62998962 104.45646667]
[87.96311188 98.16043854]
[77.67752075 87.24225616]
[67.39193726 76.32407379]
[58.99316025 72.07196045]
[56.92517090 64.76135254]
[47.08178329 53.44287872]
[37.23839951 42.12441254]
[29.01531410 37.54175568]
[27.23960304 30.15470505]
[17.85398293 18.45384598]
[8.46836185 6.75298643]
[-6.86319304 8.46966171]
[-20.67886925 1.60448503]
[-28.57013321 -11.65188980]
[-28.01891327 -27.06940269]
[-19.20110130 -39.72838211]
[-4.93042850 -45.58938980]
[10.23938560 -42.78220367]
[21.46770668 -32.20258713]
[25.17162132 -17.22645378]
[20.16922188 -2.63263488]
[29.55484200 9.06822491]
[38.94046402 20.76908493]
[48.55686951 32.28102493]
[58.40025330 43.59949493]
[68.24363708 54.91796494]
[78.31011963 66.03849030]
[88.59570312 76.95667267]
[98.88129425 87.87485504]
[109.59281158 98.37548065]
[120.71334076 108.44195557]
[131.83386230 118.50843811]
[142.95439148 128.57490540]
[158.37788391 132.09999084]
[162.62098694 146.37744141]
[173.74151611 156.44390869]
[184.86204529 166.51039124]
[195.98255920 176.57687378]
[207.10308838 186.64334106]
[218.22361755 196.70982361]
[229.02563477 190.75540161]
[241.07037354 188.19076538]
[253.32186890 189.22482300]
[264.72970581 193.75743103]
[274.31924438 201.38905334]
[281.27462769 211.45585632]
[285.00842285 223.08747864]
[285.21105957 235.28230286]
[281.87664795 246.99366760]
[275.30224609 257.21972656]
[284.68786621 268.92056274]
[294.07348633 280.62142944]
[303.45910645 292.32229614]
[318.92950439 297.76269531]
[321.68682861 313.92837524]
[308.89456177 324.18945312]
[293.71228027 317.99023438]
[291.75823975 301.70791626]
[282.37261963 290.00704956]
[272.98699951 278.30618286]
[263.60137939 266.60534668]
[246.31095886 271.61056519]
[228.47898865 268.82070923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[10 48]
[11 47]
[12 46]
[13 45]
[16 44]
[17 43]
[18 42]
[20 41]
[21 40]
[22 39]
[24 38]
[25 37]
[26 36]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
