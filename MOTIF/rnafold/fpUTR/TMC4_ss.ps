%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGAAACCACAGGAAGUGUACCUUACUCCCUCCGGGCCACCUGCUGGCCAGGUACACACCUGCCCCUGGCCCCUCCCUUACCUGGGGCAGUGUCUGCCUGGUGGCCACUAGAGACAGCCCAGCCUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[106.83106995 151.87675476]
[105.00465393 166.76513672]
[107.68972778 181.52285767]
[101.59928894 195.23075867]
[88.84770966 203.12995911]
[73.86187744 202.47813416]
[61.84433365 193.50157166]
[56.96712494 179.31661987]
[60.92344666 164.84777832]
[72.33959961 155.11817932]
[80.34478760 142.43287659]
[88.34996796 129.74757385]
[96.35515594 117.06226349]
[89.29077911 114.54340363]
[76.18391418 121.83792114]
[63.07704163 129.13243103]
[57.02868271 136.10746765]
[49.57332993 136.44027710]
[36.29782867 143.42318726]
[23.02232742 150.40609741]
[16.90938568 165.23889160]
[1.46177745 169.56912231]
[-11.47041512 160.07502747]
[-11.96672058 144.03964233]
[0.35358411 133.76396179]
[16.03941536 137.13059998]
[29.31491852 130.14768982]
[42.59041977 123.16477966]
[55.78252792 116.02556610]
[68.88939667 108.73104858]
[81.99626923 101.43653870]
[91.62299347 89.93322754]
[96.49348450 75.74597168]
[101.36397552 61.55870819]
[92.38070679 44.96414566]
[98.18552399 27.34233093]
[114.69913483 19.60467148]
[118.89421082 5.20323515]
[123.08927917 -9.19820118]
[127.28435516 -23.59963799]
[131.47943115 -38.00107193]
[126.27520752 -52.06933975]
[113.71771240 -60.27355957]
[97.32257080 -60.63619995]
[89.67739105 -75.14424133]
[98.64687347 -88.87305450]
[115.00399017 -87.69961548]
[121.92192841 -72.83105469]
[134.47943115 -64.62683868]
[148.97593689 -68.48059082]
[155.80157471 -81.83763885]
[162.62721252 -95.19468689]
[169.45285034 -108.55173492]
[176.27847290 -121.90877533]
[183.10411072 -135.26582336]
[189.92974854 -148.62286377]
[189.31959534 -164.43231201]
[202.00086975 -172.24475098]
[208.82650757 -185.60180664]
[215.65214539 -198.95884705]
[222.47778320 -212.31588745]
[223.61816406 -221.47740173]
[229.62564087 -225.90496826]
[236.76484680 -239.09707642]
[243.90405273 -252.28918457]
[251.04327393 -265.48129272]
[258.18246460 -278.67340088]
[265.32168579 -291.86550903]
[265.08508301 -307.68493652]
[277.94735718 -315.19567871]
[285.08657837 -328.38778687]
[276.50009155 -341.05786133]
[274.79672241 -356.26831055]
[280.36791992 -370.52383423]
[291.93347168 -380.54867554]
[306.83566284 -384.03915405]
[321.65008545 -380.19320679]
[332.97250366 -369.89459229]
[338.20111084 -355.50985718]
[336.13439941 -340.34454346]
[327.24731445 -327.88348389]
[313.58200073 -320.99014282]
[298.27868652 -321.24859619]
[291.13946533 -308.05648804]
[291.88668823 -293.18063354]
[278.51379395 -284.72628784]
[271.37457275 -271.53417969]
[264.23538208 -258.34207153]
[257.09616089 -245.14996338]
[249.95695496 -231.95785522]
[242.81773376 -218.76576233]
[235.83482361 -205.49024963]
[229.00918579 -192.13320923]
[222.18354797 -178.77616882]
[215.35791016 -165.41911316]
[216.45629883 -150.56506348]
[203.28680420 -141.79722595]
[196.46116638 -128.44018555]
[189.63552856 -115.08313751]
[182.80989075 -101.72609711]
[175.98425293 -88.36904907]
[169.15861511 -75.01200104]
[162.33297729 -61.65495682]
[145.88085938 -33.80599976]
[141.68579102 -19.40456390]
[137.49072266 -5.00312805]
[133.29563904 9.39830780]
[129.10057068 23.79974365]
[136.68894958 32.46751785]
[139.13328552 43.84860992]
[135.70289612 55.09832382]
[127.15062714 63.34639359]
[115.55123901 66.42919922]
[110.68074799 80.61646271]
[105.81024933 94.80371857]
[113.79771423 93.98594666]
[122.21279144 97.94133759]
[128.81130981 106.63101959]
[131.48970032 119.08377838]
[137.02474976 133.02520752]
[142.55978394 146.96662903]
[148.09483337 160.90805054]
[153.62986755 174.84947205]
[165.09419250 187.33969116]
[156.26574707 201.81362915]
[139.91349792 197.33697510]
[139.68844604 180.38452148]
[134.15341187 166.44308472]
[128.61836243 152.50166321]
[123.08332062 138.56024170]
[117.54827881 124.61882019]
[110.48390198 122.09996796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 31]
[15 30]
[16 29]
[18 28]
[19 27]
[20 26]
[32 115]
[33 114]
[34 113]
[37 108]
[38 107]
[39 106]
[40 105]
[41 104]
[42 49]
[43 48]
[50 103]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[58 95]
[59 94]
[60 93]
[61 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[70 84]
[71 83]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
