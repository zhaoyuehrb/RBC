%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGCUGCCCAAGACCGGCUCGCCGCGCCCAGGCCCGCGUUGGUCGCCCCUCCGGGCCCCAGCGCCGGGUGCUCCGCCUCCCAAGGCCGGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[-18.74367142 256.92843628]
[-22.46254539 259.12011719]
[-26.15460968 259.39044189]
[-36.84502029 269.91256714]
[-47.53543472 280.43466187]
[-58.22584534 290.95678711]
[-68.91625977 301.47891235]
[-79.60667419 312.00103760]
[-77.16784668 327.32525635]
[-84.23213196 341.14102173]
[-98.08317566 348.13589478]
[-113.39496613 345.62020874]
[-124.27980804 334.56127930]
[-126.55225372 319.21148682]
[-119.33850098 305.47317505]
[-105.41239166 298.62896729]
[-90.12879181 301.31063843]
[-79.43838501 290.78851318]
[-68.74797058 280.26638794]
[-58.05755615 269.74426270]
[-47.36714554 259.22213745]
[-36.67673111 248.70001221]
[-26.49909019 237.68113708]
[-16.85727692 226.19047546]
[-7.21546268 214.69981384]
[2.42635155 203.20913696]
[12.06816578 191.71847534]
[21.52645493 180.07627869]
[30.79883957 168.28547668]
[40.07122421 156.49468994]
[40.36745071 151.55847168]
[43.89305115 146.80616760]
[50.32486725 144.27487183]
[60.32640457 133.09590149]
[70.32794189 121.91693115]
[80.32947540 110.73796844]
[79.76490021 90.36804962]
[95.93093109 77.96193695]
[98.30095673 63.15035248]
[100.67097473 48.33877182]
[103.04099274 33.52718735]
[105.41101837 18.71560287]
[107.78103638 3.90402031]
[110.15106201 -10.90756321]
[103.18905640 -21.90772820]
[105.58917236 -34.29216766]
[115.50231934 -41.42322540]
[118.34108734 -56.15215683]
[121.17985535 -70.88108826]
[124.01862335 -85.61001587]
[118.14658356 -100.92181396]
[128.67979431 -113.49096680]
[144.78257751 -110.38741302]
[149.88978577 -94.80381775]
[138.74755859 -82.77124786]
[135.90878296 -68.04232025]
[133.07002258 -53.31338882]
[130.23124695 -38.58445740]
[136.90621948 -22.44004440]
[124.96263885 -8.53754234]
[122.59262085 6.27404118]
[120.22260284 21.08562469]
[117.85257721 35.89720917]
[115.48255920 50.70878983]
[113.11253357 65.52037811]
[110.74251556 80.33195496]
[117.61589813 86.14670563]
[121.64627838 94.19721222]
[136.59909058 95.38596344]
[151.55192566 96.57471466]
[167.87834167 88.24545288]
[181.99397278 98.53844452]
[196.97698975 99.25217438]
[213.08587646 93.96633911]
[222.62452698 107.98242188]
[211.79675293 121.02833557]
[196.26325989 114.23518372]
[181.28025818 113.52146149]
[172.01309204 121.47395325]
[159.41189575 120.88668060]
[150.36317444 111.52753448]
[135.41035461 110.33878326]
[120.45752716 109.15003967]
[113.33438873 118.01187897]
[102.77906799 122.23758698]
[91.50843811 120.73950195]
[81.50690460 131.91847229]
[71.50537109 143.09744263]
[61.50383759 154.27639771]
[51.86202240 165.76707458]
[42.58963776 177.55786133]
[33.31725311 189.34866333]
[30.39479065 198.20211792]
[23.55883217 201.36029053]
[13.91701794 212.85095215]
[4.27520418 224.34162903]
[-5.36661005 235.83229065]
[-15.00842476 247.32295227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[23 98]
[24 97]
[25 96]
[26 95]
[27 94]
[28 92]
[29 91]
[30 90]
[33 89]
[34 88]
[35 87]
[36 86]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[47 58]
[48 57]
[49 56]
[50 55]
[68 83]
[69 82]
[70 81]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
