%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCGCGAGCGCCGGCACUGCCCGCUCCGAGCCCGUGUCUGUCGGGUGCCGAGCCAACUUUCCUGCGUCC\
) } def
/len { sequence length } bind def

/coor [
[75.49942780 280.40557861]
[62.84469223 288.93905640]
[47.73939514 291.12829590]
[33.18270111 286.53857422]
[22.06485367 276.08123779]
[16.59330940 261.83255005]
[17.85444832 246.62161255]
[25.59786987 233.46858215]
[38.28610992 224.98500061]
[53.39991379 222.85527039]
[57.91049957 208.54951477]
[62.42108917 194.24375916]
[66.93167114 179.93800354]
[63.37964630 165.47314453]
[74.90863037 154.63833618]
[79.41921997 140.33258057]
[67.87434387 131.90968323]
[59.52951431 120.30825806]
[55.21595383 106.68392181]
[55.36334229 92.39379883]
[59.95699692 78.86132812]
[68.53933716 67.43448639]
[80.25548553 59.25150681]
[93.93838501 55.12748718]
[108.22509003 55.47322845]
[113.35539246 41.37783813]
[118.48569489 27.28244781]
[123.61598969 13.18705845]
[115.11106873 0.34289956]
[115.79202271 -14.86859894]
[125.18834686 -26.62330437]
[139.53285217 -30.54415703]
[144.66316223 -44.63954544]
[149.79345703 -58.73493576]
[154.92376709 -72.83032227]
[160.05406189 -86.92571259]
[152.07910156 -100.37688446]
[154.66717529 -115.79881287]
[166.59626770 -125.90973663]
[182.23382568 -125.93558502]
[194.19627380 -115.86415863]
[196.83532715 -100.45086670]
[188.90487671 -86.97340393]
[174.14944458 -81.79541016]
[169.01914978 -67.70001984]
[163.88885498 -53.60463333]
[158.75854492 -39.50924301]
[153.62825012 -25.41385460]
[162.09649658 -13.18983555]
[161.73872375 1.85463178]
[152.48260498 13.94502544]
[137.71138000 18.31735992]
[132.58108521 32.41275024]
[127.45077515 46.50814056]
[122.32047272 60.60352707]
[134.34802246 70.49578094]
[142.31271362 83.87795258]
[145.27241516 99.16712189]
[142.87707520 114.55480194]
[135.41000366 128.22087097]
[123.75444794 138.54882812]
[109.28909302 144.31701660]
[93.72497559 144.84317017]
[89.21438599 159.14892578]
[92.44378662 174.63702393]
[81.23742676 184.44859314]
[76.72684479 198.75434875]
[72.21625519 213.06010437]
[67.70566559 227.36585999]
[78.86460876 237.77934265]
[84.39221954 252.00637817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 69]
[11 68]
[12 67]
[13 66]
[15 64]
[16 63]
[25 55]
[26 54]
[27 53]
[28 52]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
