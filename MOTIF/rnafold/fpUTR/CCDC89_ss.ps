%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACUUCAUAGCAUUCUGAAGACCUGUCCACCAAUUACAGGGCUCCUUACUGGAAAAACCAACUGCUGGGGAGUGCCAAGAGUCCCUAGCAACACCCUGCAGCGUUUGAAAUCUGAGGGGAAAAGACUGUAGUCAGCCCUUAGUGG\
) } def
/len { sequence length } bind def

/coor [
[-27.93447113 254.77279663]
[-35.04790497 271.80245972]
[-48.80769348 284.02630615]
[-66.45994568 289.05630493]
[-84.49699402 285.93838501]
[-92.63094330 298.54150391]
[-100.76489258 311.14465332]
[-108.89884186 323.74777222]
[-117.03278351 336.35092163]
[-111.30561066 350.77239990]
[-115.18157196 365.79757690]
[-127.17028809 375.64901733]
[-142.66183472 376.53857422]
[-155.69941711 368.12423706]
[-161.26982117 353.64147949]
[-157.23107910 338.65921021]
[-145.13621521 328.93841553]
[-129.63591003 328.21694946]
[-121.50196838 315.61383057]
[-113.36801910 303.01071167]
[-105.23406982 290.40756226]
[-97.10012817 277.80444336]
[-104.44380188 268.66110229]
[-108.91446686 257.79840088]
[-110.13820648 246.09614563]
[-108.00456238 234.50544739]
[-102.67639923 223.97149658]
[-94.57753754 215.35639954]
[-84.35904694 209.36872864]
[-72.84692383 206.50515747]
[-60.97533035 207.00932312]
[-49.71077728 210.85112000]
[-40.53731155 198.98320007]
[-31.36384392 187.11528015]
[-29.75050354 179.84928894]
[-21.86755371 175.09555054]
[-12.44425488 163.42501831]
[-3.02095437 151.75448608]
[-1.25375235 144.52436829]
[6.72831964 139.93902588]
[16.39720917 128.47113037]
[26.06609726 117.00323486]
[35.73498535 105.53533936]
[45.40387344 94.06744385]
[43.02591324 79.25713348]
[30.25297737 71.39252472]
[17.48003960 63.52791977]
[1.60246038 65.82617950]
[-9.99481106 54.74092865]
[-8.41534042 38.77581406]
[5.12923813 30.17791176]
[20.24868202 35.54279327]
[25.34465027 50.75498199]
[38.11758804 58.61959076]
[50.89052200 66.48419952]
[57.75714111 63.46764755]
[50.31832886 50.44213104]
[37.56919098 42.53899765]
[35.37561798 27.70025826]
[45.29282761 16.44641495]
[60.28962326 16.75632477]
[69.73344421 28.41026497]
[66.92938995 43.14477539]
[71.49037170 57.43454361]
[78.35698700 54.41799164]
[81.20523071 39.69089127]
[84.05347443 24.96378899]
[86.90171814 10.23668766]
[89.74995422 -4.49041367]
[92.59819794 -19.21751595]
[95.44644165 -33.94461823]
[98.29468536 -48.67171860]
[101.14292908 -63.39881897]
[89.48949432 -73.40347290]
[84.41480255 -87.89978790]
[87.28391266 -102.98831940]
[97.32505035 -114.61032867]
[111.83719635 -119.63956451]
[126.91665649 -116.72317505]
[138.50714111 -106.64565277]
[143.49085999 -92.11781311]
[140.52722168 -77.04756927]
[130.41342163 -65.48873138]
[115.87002563 -60.55057526]
[113.02178192 -45.82347488]
[110.17354584 -31.09637451]
[107.32530212 -16.36927223]
[104.47705841 -1.64217138]
[101.62881470 13.08493042]
[98.78057098 27.81203079]
[95.93233490 42.53913116]
[93.08409119 57.26623535]
[107.61928558 57.58016205]
[121.16663361 62.67662430]
[132.20611572 71.93820190]
[139.51428223 84.28278351]
[154.39279175 82.37751770]
[169.27128601 80.47224426]
[184.14979553 78.56697845]
[192.33082581 74.34683990]
[199.36392212 76.78264618]
[214.27951050 75.19360352]
[229.19511414 73.60456848]
[237.46386719 69.55902100]
[244.44367981 72.14356232]
[259.38964844 70.87146759]
[274.33560181 69.59938049]
[289.60491943 62.23157120]
[300.91174316 74.86453247]
[291.90252686 89.22664642]
[275.60769653 84.54534149]
[260.66171265 85.81743622]
[245.71575928 87.08952332]
[230.78414917 88.52016449]
[215.86854553 90.10919952]
[200.95295715 91.69823456]
[186.05506897 93.44548798]
[171.17655945 95.35075378]
[156.29804993 97.25601959]
[141.41954041 99.16128540]
[138.84608459 106.20595551]
[153.83631897 106.74714661]
[157.95382690 121.17095184]
[145.50833130 129.54411316]
[133.69915771 120.29528046]
[131.12570190 127.33995056]
[141.27259827 138.38714600]
[151.41947937 149.43435669]
[167.21900940 153.82830811]
[171.05091858 169.77348328]
[158.97328186 180.86683655]
[143.41052246 175.69648743]
[140.37228394 159.58123779]
[130.22538757 148.53404236]
[120.07849884 137.48683167]
[79.56758118 137.73031616]
[56.87176895 103.73633575]
[47.20288086 115.20423126]
[37.53399277 126.67212677]
[27.86510277 138.14001465]
[18.19621468 149.60791016]
[8.64958191 161.17778015]
[-0.77371812 172.84831238]
[-10.19701767 184.51884460]
[-19.49592400 196.28874207]
[-28.66938972 208.15666199]
[-37.84285355 220.02458191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[32 147]
[33 146]
[34 145]
[36 144]
[37 143]
[38 142]
[40 141]
[41 140]
[42 139]
[43 138]
[44 137]
[45 55]
[46 54]
[47 53]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[96 120]
[97 119]
[98 118]
[99 117]
[101 116]
[102 115]
[103 114]
[105 113]
[106 112]
[107 111]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
