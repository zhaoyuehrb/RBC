%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACCGGCCCUGGAUUCCACUUCCGUUCCACCAUCGCUGCUGGAGCAGCUGCCUUCAGGCCCUGCGCCGCCUCCGGAGUCC\
) } def
/len { sequence length } bind def

/coor [
[152.50190735 224.57667542]
[149.71322632 209.83818054]
[134.43121338 204.94950867]
[123.58517456 192.99975586]
[120.15642548 177.13505554]
[125.15666962 161.59571838]
[137.33189392 150.58282471]
[133.99407959 135.95890808]
[130.65626526 121.33499146]
[127.31845856 106.71107483]
[112.61269379 123.00555420]
[92.18334961 123.05241394]
[79.46260071 109.06009674]
[64.50453949 110.18104553]
[49.54648590 111.30200195]
[34.58842850 112.42295074]
[25.60760498 125.22446442]
[10.48598576 129.20826721]
[-3.63646150 122.49331665]
[-10.09154987 108.25022125]
[-5.83138323 93.20412445]
[7.13251734 84.45933533]
[22.67899513 86.14488220]
[33.46747589 97.46488953]
[48.42553329 96.34394073]
[63.38359070 95.22299194]
[78.34165192 94.10203552]
[90.30319214 76.64407349]
[113.92593384 75.55812836]
[108.97174835 61.39987946]
[104.01756287 47.24163055]
[99.06337738 33.08338165]
[87.20235443 22.61309624]
[90.30191803 8.04456806]
[85.34772491 -6.11368179]
[72.57146454 -16.39468765]
[75.35398102 -32.55604935]
[90.83286285 -37.97234726]
[103.08476257 -27.07175255]
[99.50598145 -11.06786823]
[104.46016693 3.09038210]
[115.96682739 12.54797363]
[113.22162628 28.12919426]
[118.17581177 42.28744507]
[123.12999725 56.44569397]
[128.08418274 70.60394287]
[141.94236755 76.34419250]
[155.45690918 69.83593750]
[168.97143555 63.32768250]
[182.48597717 56.81942749]
[187.56785583 44.79043961]
[199.15649414 39.70774841]
[210.68684387 43.84492111]
[224.43528748 37.84654236]
[238.18371582 31.84815979]
[247.48120117 18.33931923]
[263.80532837 19.90631485]
[270.36318970 34.93715286]
[260.40869141 47.96939850]
[244.18209839 45.59659576]
[230.43367004 51.59497452]
[216.68522644 57.59335709]
[207.19496155 72.22855377]
[188.99423218 70.33396149]
[175.47969055 76.84221649]
[161.96516418 83.35047150]
[148.45063782 89.85872650]
[141.94236755 103.37326050]
[145.28018188 117.99717712]
[148.61799622 132.62109375]
[151.95581055 147.24501038]
[165.64186096 150.72271729]
[176.40830994 159.75642395]
[182.15551758 172.50885010]
[181.79562378 186.42521667]
[175.45790100 198.74499512]
[164.45172119 207.04949951]
[167.24040222 221.78800964]
[180.43806458 230.48266602]
[183.54028320 245.97950745]
[174.70655823 259.08450317]
[159.17779541 262.02270508]
[146.16693115 253.05091858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[7 71]
[8 70]
[9 69]
[10 68]
[13 27]
[14 26]
[15 25]
[16 24]
[29 46]
[30 45]
[31 44]
[32 43]
[34 41]
[35 40]
[47 67]
[48 66]
[49 65]
[50 64]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
