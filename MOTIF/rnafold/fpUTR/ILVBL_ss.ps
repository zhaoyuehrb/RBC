%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGACUGUGCGCAUGCGCAUCGGGCCGGACUACGGGGCGCCGCUGAGCCAAGUGGGCCACCCGGGCACGGCCACGCUCCCGGGUCACGUGACACGGAGGGGGCCGAAUUCUGCUGGAGGCAGCGCCAUAUCCUGGAGGUGAAGGUACCACCUC\
) } def
/len { sequence length } bind def

/coor [
[98.67096710 139.93873596]
[87.55041504 136.30889893]
[80.00657654 149.27386475]
[72.46273804 162.23884583]
[64.91889954 175.20381165]
[63.29111099 184.25320435]
[57.08850861 188.35287476]
[49.28345871 201.16229248]
[41.47840500 213.97171021]
[33.67335510 226.78112793]
[25.86830521 239.59054565]
[26.02170563 255.98898315]
[11.76139641 264.08685303]
[-2.24283910 255.55377197]
[-1.58464348 239.16784668]
[13.05888844 231.78549194]
[20.86393929 218.97607422]
[28.66898918 206.16665649]
[36.47404099 193.35723877]
[44.27909088 180.54782104]
[51.95392990 167.65997314]
[59.49776840 154.69499207]
[67.04161072 141.73002625]
[74.58544922 128.76506042]
[62.24805069 122.41741943]
[51.81256104 111.00602722]
[37.54671097 115.64128876]
[23.28086472 120.27654266]
[14.74563026 133.86070251]
[-1.21201491 135.51391602]
[-12.35073090 123.96797943]
[-10.12584877 108.07994843]
[3.75589228 100.03776550]
[18.64560890 106.01068878]
[32.91145706 101.37543488]
[47.17730331 96.74018097]
[47.63327026 81.74711609]
[33.67546082 76.25352478]
[19.71765137 70.75993347]
[10.52612019 70.52124786]
[5.53447533 65.01097107]
[-8.30912971 59.23563004]
[-22.15273476 53.46028900]
[-35.99634171 47.68494415]
[-49.83994675 41.90960312]
[-64.35931396 48.15166855]
[-79.00872803 42.22120667]
[-85.09693909 27.63665390]
[-79.01192474 13.05076408]
[-64.36381531 7.11708927]
[-49.84307861 13.35597324]
[-44.06460190 28.06599617]
[-30.22099686 33.84133911]
[-16.37739182 39.61668396]
[-2.53378677 45.39202499]
[11.30981827 51.16736984]
[25.21124077 56.80212402]
[39.16905212 62.29571533]
[53.12686157 67.78930664]
[64.60666656 58.13455582]
[61.58718491 43.44160843]
[58.56770706 28.74865913]
[55.54822922 14.05570984]
[52.52875137 -0.63723934]
[49.50927353 -15.33018875]
[46.48979568 -30.02313805]
[33.57717514 -38.73530960]
[30.72430229 -53.67906189]
[39.10960007 -65.93558502]
[36.09012222 -80.62853241]
[24.80092621 -92.52332306]
[29.71632767 -108.16847992]
[45.77978516 -111.46960449]
[56.46658707 -99.03078461]
[50.78307343 -83.64801025]
[53.80255127 -68.95506287]
[66.34172058 -60.99862671]
[69.61320496 -46.14090347]
[61.18274689 -33.04261398]
[64.20222473 -18.34966660]
[67.22170258 -3.65671706]
[70.24118042 11.03623199]
[73.26065826 25.72918129]
[76.28013611 40.42213058]
[79.29961395 55.11507797]
[91.59279633 52.09295654]
[104.04693604 52.32152176]
[115.83047485 55.68176270]
[126.18305206 61.84900284]
[134.46455383 70.32118988]
[140.19445801 80.45837402]
[143.07914734 91.53035736]
[143.02561951 102.76895142]
[157.96327209 101.40274048]
[166.28131104 97.48464203]
[173.21702576 100.16334534]
[188.17930603 99.10015106]
[203.14157104 98.03695679]
[211.40139771 85.03382111]
[225.56848145 79.45287323]
[240.13304138 83.23937988]
[249.56231689 94.73837280]
[264.52459717 93.67517853]
[279.48684692 92.61198425]
[267.82498169 83.17798615]
[263.78463745 68.73236847]
[268.86001587 54.61709976]
[281.17419434 46.05199432]
[296.17340088 46.20441437]
[308.31100464 55.01799011]
[313.09848022 69.23348236]
[308.76544189 83.59400940]
[296.91549683 92.78861237]
[311.85314941 94.15483093]
[326.79080200 95.52104950]
[341.72845459 96.88726044]
[356.38348389 89.52776337]
[369.93395996 98.76448059]
[368.44030762 115.09546661]
[353.43905640 121.72080231]
[340.36224365 111.82491302]
[325.42459106 110.45869446]
[310.48693848 109.09248352]
[295.54928589 107.72626495]
[280.55004883 107.57425690]
[265.58776855 108.63745117]
[250.62550354 109.70064545]
[242.91697693 122.41742706]
[229.03417969 128.22535706]
[214.22027588 124.70375061]
[204.20477295 112.99922943]
[189.24249268 114.06242371]
[174.28022766 115.12561798]
[159.32948303 116.34039307]
[144.39184570 117.70660400]
[136.71699524 130.59446716]
[142.63233948 144.37882996]
[148.54766846 158.16319275]
[154.46301270 171.94757080]
[160.37835693 185.73193359]
[166.29368591 199.51629639]
[181.31710815 203.85577393]
[189.99337769 216.86563110]
[188.22584534 232.40299988]
[176.84907532 243.13162231]
[161.23483276 243.98574829]
[148.75569153 234.56211853]
[145.30390930 219.31025696]
[152.50932312 205.43164062]
[146.59397888 191.64726257]
[140.67864990 177.86289978]
[134.76330566 164.07853699]
[128.84797668 150.29417419]
[122.93263245 136.50979614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[26 36]
[27 35]
[28 34]
[37 59]
[38 58]
[39 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[69 76]
[70 75]
[93 135]
[94 134]
[96 133]
[97 132]
[98 131]
[102 127]
[103 126]
[104 125]
[113 124]
[114 123]
[115 122]
[116 121]
[136 154]
[137 153]
[138 152]
[139 151]
[140 150]
[141 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
