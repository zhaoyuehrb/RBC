%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUCAUCAAGUGCCCUCUAGCUGUUAAGUCACUCUGAUCUCUGACUGCAGCUCCUACUGUUGGACACACCUGGCCGGUGCUUCAGUUAGAUCAAACCAUUGCUGAAACUGAAGAGGAC\
) } def
/len { sequence length } bind def

/coor [
[114.14097595 245.99374390]
[108.29898071 259.96334839]
[98.23573303 271.27749634]
[85.04281616 278.70889282]
[70.15130615 281.45144653]
[55.17652130 279.20767212]
[41.74280930 272.22097778]
[31.30736351 261.24917603]
[25.00214195 247.48245239]
[23.51108742 232.41409302]
[26.99593735 217.67860413]
[35.07868195 204.87438965]
[46.88256836 195.39035034]
[61.12719345 190.25523376]
[76.26741028 190.02607727]
[80.90266418 175.76023865]
[85.53792572 161.49438477]
[90.17317963 147.22853088]
[94.80843353 132.96269226]
[63.84546280 115.46459198]
[62.79064560 74.20304108]
[48.65102386 69.19593811]
[34.51140213 64.18883514]
[20.37178040 59.18173599]
[6.23215723 54.17463303]
[-0.52632761 55.02788925]
[-5.84648991 52.62067032]
[-8.50469780 48.51768494]
[-22.36289024 42.77743149]
[-36.22108459 37.03718185]
[-50.07927704 31.29692841]
[-63.93746948 25.55667686]
[-76.07348633 34.97010803]
[-91.29247284 37.03846741]
[-105.50058746 31.20538330]
[-114.87593079 19.03991890]
[-116.89658356 3.81452680]
[-111.01898956 -10.37523937]
[-98.82419586 -19.71240425]
[-83.59254456 -21.68531609]
[-69.42127228 -15.76327419]
[-60.12237930 -3.53927541]
[-58.19721985 11.69848442]
[-44.33902359 17.43873596]
[-30.48083305 23.17898750]
[-16.62263870 28.91923904]
[-2.76444650 34.65948868]
[11.23925972 40.03501129]
[25.37888145 45.04211426]
[39.51850510 50.04921722]
[53.65812683 55.05632019]
[67.79775238 60.06342316]
[79.81655884 51.08855057]
[79.03151703 36.10910797]
[78.24647522 21.12966537]
[65.64969635 11.86386204]
[62.00620270 -3.34333873]
[69.03633881 -17.31155968]
[83.42068481 -23.44543648]
[98.36740875 -18.84873581]
[106.81910706 -5.69188356]
[104.78515625 9.81285954]
[93.22592163 20.34462738]
[94.01096344 35.32406998]
[94.79599762 50.30351257]
[101.86581421 52.80706406]
[116.00543213 57.81416702]
[123.07524109 60.31771851]
[133.11219788 49.17054749]
[143.14916992 38.02337265]
[153.18612671 26.87620163]
[153.78576660 10.84435940]
[166.77888489 1.43381023]
[182.19827271 5.86352253]
[188.21548462 20.73539925]
[180.21463013 34.64101028]
[164.33329773 36.91316223]
[154.29634094 48.06033325]
[144.25936890 59.20750427]
[134.22241211 70.35467529]
[139.55497742 88.09474182]
[137.02745056 104.80862427]
[128.43667603 117.45985413]
[142.29487610 123.20010376]
[156.15306091 128.94035339]
[170.01126099 134.68060303]
[183.86944580 140.42086792]
[197.72764587 146.16111755]
[209.92448425 136.93157959]
[225.00389099 135.05859375]
[238.90377808 140.94583130]
[247.93020630 152.91996765]
[249.73892212 167.70489502]
[263.59710693 173.44514465]
[277.45532227 179.18539429]
[293.63467407 176.50958252]
[303.83114624 189.35340881]
[297.55548096 204.50425720]
[281.26351929 206.37622070]
[271.71505737 193.04359436]
[257.85687256 187.30332947]
[243.99867249 181.56307983]
[232.26518250 190.73864746]
[217.41555786 192.82299805]
[203.42395020 187.15719604]
[194.08558655 175.17004395]
[191.98739624 160.01930237]
[178.12919617 154.27905273]
[164.27101135 148.53880310]
[150.41281128 142.79855347]
[136.55462646 137.05830383]
[122.69642639 131.31805420]
[109.07427979 137.59794617]
[104.43902588 151.86378479]
[99.80377197 166.12963867]
[95.16851807 180.39549255]
[90.53325653 194.66133118]
[102.64726257 203.74592590]
[111.15306091 216.27308655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[53 65]
[54 64]
[55 63]
[68 80]
[69 79]
[70 78]
[71 77]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
