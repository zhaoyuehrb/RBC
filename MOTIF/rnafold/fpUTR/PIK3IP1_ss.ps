%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAAAAACAGCUCGCGCUGCAGCAAGCUAGCUGGGAAGCUCCCAGUUCUAAAGAGAGGCUGUUUACCAGAACAGCAUAACAAGGGCAGGUCUGACUGCAAGGCUGGGACUGGGAGGCAGAGCCGCCGCCAAGGGGGCCUCGGUUAAACACUGGUCGUUCAAUCACCUGCAAGACGAAGGAGGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[96.86990356 138.05299377]
[90.07982635 136.87028503]
[83.41324615 150.30743408]
[76.74666595 163.74456787]
[70.08007812 177.18170166]
[84.92614746 175.03826904]
[95.97327423 185.18524170]
[95.09638214 200.15957642]
[82.94041443 208.94778442]
[68.44599915 205.08616638]
[62.27368927 191.41473389]
[54.52580643 204.25880432]
[46.77792358 217.10289001]
[39.03004456 229.94696045]
[39.25652695 246.34454346]
[25.03245163 254.50590515]
[10.99032307 246.03532410]
[11.57548237 229.64662170]
[26.18596649 222.19908142]
[33.93384933 209.35501099]
[41.68173218 196.51092529]
[49.42961502 183.66685486]
[56.64294434 170.51512146]
[63.30952454 157.07798767]
[69.97610474 143.64085388]
[76.64268494 130.20370483]
[66.39939117 118.13359070]
[61.93231964 102.94615173]
[64.00940704 87.25225067]
[72.27357483 73.74979401]
[85.30415344 64.75996399]
[82.36267090 50.05120087]
[79.42119598 35.34243774]
[76.47972107 20.63367462]
[73.53824615 5.92491055]
[70.59676361 -8.78385258]
[67.65528870 -23.49261475]
[64.71381378 -38.20137787]
[55.36493301 -41.79809189]
[48.50619125 -49.10060501]
[45.50096512 -58.65931320]
[46.94748306 -68.57592010]
[39.62623978 -81.66787720]
[32.30499268 -94.75983429]
[24.98374939 -107.85179138]
[17.66250420 -120.94374847]
[10.34125996 -134.03570557]
[3.02001476 -147.12767029]
[-4.30122995 -160.21961975]
[-11.62247467 -173.31158447]
[-18.94371986 -186.40354919]
[-26.26496506 -199.49549866]
[-33.58620834 -212.58746338]
[-47.33018112 -208.96496582]
[-61.82229614 -209.73109436]
[-75.66702271 -214.99424744]
[-87.47613525 -224.42135620]
[-96.00753021 -237.25369263]
[-100.29457092 -252.36602783]
[-99.75270081 -268.36462402]
[-94.25175476 -283.71566772]
[-105.57329559 -293.55551147]
[-116.89484406 -303.39538574]
[-128.21638489 -313.23522949]
[-139.53793335 -323.07507324]
[-150.85946655 -332.91491699]
[-162.18101501 -342.75476074]
[-178.37358093 -345.34954834]
[-183.96913147 -360.76452637]
[-173.21145630 -373.14212036]
[-157.16711426 -369.74929810]
[-152.34115601 -354.07632446]
[-141.01962280 -344.23648071]
[-129.69807434 -334.39660645]
[-118.37653351 -324.55676270]
[-107.05499268 -314.71691895]
[-95.73344421 -304.87707520]
[-84.41190338 -295.03720093]
[-77.63941956 -298.25955200]
[-84.08409119 -311.80450439]
[-90.52876282 -325.34948730]
[-100.84350586 -336.24014282]
[-93.67314911 -349.41534424]
[-78.92705536 -346.66711426]
[-76.98379517 -331.79415894]
[-70.53912354 -318.24917603]
[-64.09445190 -304.70422363]
[-57.32196808 -307.92654419]
[-57.81532288 -322.91845703]
[-58.30867767 -337.91033936]
[-58.80203247 -352.90222168]
[-70.50871277 -363.51962280]
[-71.19549561 -379.30895996]
[-60.45491791 -390.90274048]
[-44.65917969 -391.42254639]
[-33.17961121 -380.55999756]
[-32.82683182 -364.75964355]
[-43.81014633 -353.39556885]
[-43.31679153 -338.40368652]
[-42.82343674 -323.41180420]
[-42.33008194 -308.41992188]
[-23.33021355 -300.78115845]
[-9.04616451 -286.81710815]
[-1.37608624 -268.91769409]
[-1.13197410 -249.94786072]
[-7.96889830 -232.79054260]
[-20.49425125 -219.90870667]
[-13.17300606 -206.81674194]
[-5.85176134 -193.72479248]
[1.46948349 -180.63282776]
[8.79072857 -167.54087830]
[16.11197281 -154.44891357]
[23.43321800 -141.35694885]
[30.75446320 -128.26499939]
[38.07570648 -115.17303467]
[45.39695358 -102.08107758]
[52.71819687 -88.98912048]
[60.03944397 -75.89716339]
[57.64750290 -90.70522308]
[66.96699524 -102.45882416]
[81.93041992 -103.50572205]
[92.79576874 -93.16434479]
[92.48910522 -78.16748047]
[81.21051025 -68.27904510]
[95.19497681 -73.70442963]
[109.17943573 -79.12982178]
[119.24677277 -91.33470917]
[133.91090393 -88.72460938]
[147.89535522 -94.15000153]
[155.65797424 -108.18999481]
[171.49826050 -110.73256683]
[183.26492310 -99.82727814]
[181.93156433 -83.83972931]
[168.52104187 -75.03419495]
[153.32075500 -80.16553497]
[139.33628845 -74.74014282]
[130.26921082 -62.92332077]
[114.60482788 -65.14536285]
[100.62036133 -59.71997070]
[86.63590240 -54.29458237]
[79.42257690 -41.14285660]
[82.36405182 -26.43409348]
[85.30552673 -11.72532940]
[88.24700928 2.98343349]
[91.18848419 17.69219589]
[94.12995911 32.40095901]
[97.07143402 47.10972214]
[100.01291656 61.81848526]
[116.86368561 65.74443054]
[130.25154114 76.70467377]
[137.42732239 92.44856262]
[136.91748047 109.74311829]
[128.82672119 125.03694916]
[137.99885559 136.90588379]
[156.85617065 138.58331299]
[168.31683350 153.24926758]
[165.48474121 171.32258606]
[175.04229736 182.88342285]
[189.79867554 188.58955383]
[191.94479370 203.32873535]
[201.50234985 214.88957214]
[211.05990601 226.45042419]
[223.81385803 228.44715881]
[231.53578186 238.28730774]
[230.50967407 250.35096741]
[239.87579346 262.06744385]
[255.36962891 261.21856689]
[268.38507080 269.66711426]
[273.91741943 284.16445923]
[269.83935547 299.13607788]
[257.71899414 308.82504272]
[242.21684265 309.50579834]
[229.29382324 300.91656494]
[223.91908264 286.36004639]
[228.15931702 271.43356323]
[218.79319763 259.71710205]
[202.13345337 254.22477722]
[199.49906921 236.00798035]
[189.94151306 224.44712830]
[180.38395691 212.88629150]
[166.31120300 208.00706482]
[163.48144531 192.44097900]
[153.92388916 180.88014221]
[142.58226013 182.28988647]
[131.86047363 177.99804688]
[124.47227478 168.96606445]
[122.34767914 157.37025452]
[126.12992096 146.07803345]
[116.95777130 134.20909119]
[110.53146362 136.70036316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[11 22]
[12 21]
[13 20]
[14 19]
[31 148]
[32 147]
[33 146]
[34 145]
[35 144]
[36 143]
[37 142]
[38 141]
[42 118]
[43 117]
[44 116]
[45 115]
[46 114]
[47 113]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[88 101]
[89 100]
[90 99]
[91 98]
[124 140]
[125 139]
[126 138]
[128 136]
[129 135]
[153 189]
[154 188]
[157 183]
[158 182]
[160 180]
[161 179]
[162 178]
[165 176]
[166 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
