%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:30 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SCX)
} def

/sequence { (\
CAGGAGGCGGCAUGAGCAGCGCGCGACAGAGCUGACGCCGCGCCCCCGCCGGCCCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
3 44 0.006224798 ubox
3 45 0.015064237 ubox
3 46 0.003982875 ubox
3 47 0.006033136 ubox
3 50 0.032147851 ubox
3 54 0.373646778 ubox
3 55 0.149253310 ubox
3 56 0.883722461 ubox
4 43 0.006245529 ubox
4 44 0.015124132 ubox
4 45 0.003942936 ubox
4 46 0.006025508 ubox
4 49 0.032130140 ubox
4 53 0.374455872 ubox
4 54 0.147148806 ubox
4 55 0.891208759 ubox
6 44 0.006432709 ubox
6 46 0.004599935 ubox
6 47 0.031857945 ubox
6 50 0.409543570 ubox
6 54 0.907078627 ubox
6 55 0.020597962 ubox
6 56 0.048498080 ubox
7 41 0.027384263 ubox
7 43 0.006311731 ubox
7 45 0.004817892 ubox
7 46 0.031876664 ubox
7 49 0.409666223 ubox
7 53 0.907132771 ubox
7 54 0.018937042 ubox
7 55 0.048901917 ubox
8 40 0.027438500 ubox
8 42 0.006198530 ubox
8 48 0.409661931 ubox
8 51 0.643739133 ubox
8 52 0.642658287 ubox
9 39 0.027661417 ubox
9 41 0.004144438 ubox
9 44 0.035232065 ubox
9 45 0.010819253 ubox
9 46 0.014248770 ubox
9 47 0.408954877 ubox
9 50 0.907944345 ubox
9 54 0.049681558 ubox
10 17 0.061771568 ubox
10 20 0.004693594 ubox
10 38 0.027691263 ubox
10 43 0.036126255 ubox
10 44 0.011023644 ubox
10 45 0.019634484 ubox
10 46 0.403512756 ubox
10 49 0.909671179 ubox
10 53 0.049705385 ubox
11 16 0.065849859 ubox
11 19 0.005004438 ubox
11 37 0.027645468 ubox
11 42 0.036862375 ubox
11 48 0.908036674 ubox
11 52 0.049654306 ubox
13 40 0.023422645 ubox
13 42 0.007964876 ubox
13 48 0.021991395 ubox
13 51 0.041787475 ubox
14 20 0.003356271 ubox
14 36 0.005473322 ubox
14 39 0.023523738 ubox
14 41 0.005163184 ubox
14 47 0.157311724 ubox
14 50 0.047011482 ubox
15 33 0.006147972 ubox
16 32 0.006182453 ubox
16 38 0.022531274 ubox
16 41 0.273097058 ubox
16 43 0.865733362 ubox
16 49 0.048166173 ubox
17 31 0.006175836 ubox
17 34 0.027902219 ubox
17 37 0.022441707 ubox
17 40 0.272939829 ubox
17 42 0.864106384 ubox
17 48 0.048101771 ubox
18 33 0.028161996 ubox
19 32 0.028162850 ubox
19 38 0.275916835 ubox
19 41 0.879551291 ubox
19 43 0.383283306 ubox
20 31 0.028153380 ubox
20 34 0.021671009 ubox
20 37 0.276020979 ubox
20 40 0.879939985 ubox
20 42 0.383933508 ubox
21 32 0.010895843 ubox
21 33 0.020042156 ubox
21 36 0.275650375 ubox
21 38 0.042481536 ubox
21 39 0.878493929 ubox
21 41 0.384438468 ubox
21 43 0.015426576 ubox
22 31 0.011451631 ubox
22 34 0.231095770 ubox
22 37 0.059520920 ubox
22 40 0.384353436 ubox
22 42 0.015457966 ubox
23 32 0.272420094 ubox
23 33 0.049574878 ubox
23 36 0.057191824 ubox
23 38 0.918870264 ubox
23 39 0.272069013 ubox
23 41 0.015477046 ubox
24 31 0.276826484 ubox
24 34 0.048331279 ubox
24 37 0.958192051 ubox
24 40 0.015477127 ubox
25 33 0.042892561 ubox
25 36 0.955350186 ubox
25 39 0.015416551 ubox
27 34 0.928864925 ubox
28 33 0.838476230 ubox
31 38 0.018155314 ubox
32 37 0.018133533 ubox
37 53 0.004776083 ubox
38 52 0.004795291 ubox
39 51 0.004921926 ubox
40 50 0.004674558 ubox
41 48 0.003302964 ubox
42 47 0.005592631 ubox
42 49 0.005248513 ubox
42 53 0.021587872 ubox
43 48 0.005249641 ubox
43 52 0.021623568 ubox
44 51 0.021641074 ubox
45 52 0.003590460 ubox
46 51 0.004145213 ubox
46 52 0.004934416 ubox
47 51 0.005005080 ubox
3 56 0.9500000 lbox
4 55 0.9500000 lbox
6 54 0.9500000 lbox
7 53 0.9500000 lbox
8 52 0.9500000 lbox
9 50 0.9500000 lbox
10 49 0.9500000 lbox
11 48 0.9500000 lbox
16 43 0.9500000 lbox
17 42 0.9500000 lbox
19 41 0.9500000 lbox
20 40 0.9500000 lbox
21 39 0.9500000 lbox
23 38 0.9500000 lbox
24 37 0.9500000 lbox
25 36 0.9500000 lbox
27 34 0.9500000 lbox
28 33 0.9500000 lbox
showpage
end
%%EOF
