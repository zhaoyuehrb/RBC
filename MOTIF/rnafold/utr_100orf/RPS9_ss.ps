%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGCGGUGUGCUUUUUCUCUAGGGUUUGGGUUGGAUGGUGGCCCGGGCCUUCCGAGUUUCCAUGAGCGCAGACGGGGAAGCGGAGCCAACAUGCCAGUGGCCCGGAGCUGGGUUUGUCGCAAAACUUAUGUGACCCCGCGGAGACCCUUCGAGAAAUCUCGUCUCGACCAAGAGCUGAAGCUGAUCGGCG\
) } def
/len { sequence length } bind def

/coor [
[82.40683746 456.22390747]
[66.02703857 455.42752075]
[58.76846695 440.72222900]
[68.09811401 427.23559570]
[68.82655334 412.25329590]
[61.71644211 399.16528320]
[70.11478424 385.75714111]
[70.84321594 370.77484131]
[71.57164764 355.79254150]
[72.30007935 340.81024170]
[62.13286209 329.98605347]
[62.65816879 314.78149414]
[74.08051300 304.19055176]
[74.80895233 289.20825195]
[75.53738403 274.22595215]
[76.26581573 259.24365234]
[76.99424744 244.26135254]
[66.82702637 233.43714905]
[67.35233307 218.23258972]
[78.77468109 207.64166260]
[79.50311279 192.65936279]
[80.23155212 177.67706299]
[80.95998383 162.69474792]
[73.84987640 149.60676575]
[82.24821472 136.19860840]
[82.97664642 121.21630859]
[73.17043304 109.86561584]
[58.24118423 108.41046906]
[43.31193542 106.95532227]
[28.38268280 105.50016785]
[13.45343113 104.04502106]
[-1.03224611 110.40707397]
[-12.94889450 101.47160339]
[-27.87814522 100.01644897]
[-42.80739594 98.56130219]
[-53.25565720 106.14003754]
[-65.66841888 104.61184692]
[-73.45005798 95.33882904]
[-88.35378265 93.64212036]
[-103.25751495 91.94541168]
[-118.16124725 90.24871063]
[-132.74804688 96.37535858]
[-144.51843262 87.24808502]
[-159.42216492 85.55137634]
[-174.32589722 83.85467529]
[-188.91270447 89.98132324]
[-200.68309021 80.85404968]
[-215.58682251 79.15734100]
[-230.49055481 77.46063232]
[-243.88975525 86.28339386]
[-259.09661865 81.17160034]
[-264.44577026 66.04657745]
[-255.83377075 52.51095581]
[-239.86701965 50.94810104]
[-228.79383850 62.55690384]
[-213.89012146 64.25361633]
[-198.98638916 65.95031738]
[-185.46560669 59.70230865]
[-172.62919617 68.95094299]
[-157.72546387 70.64765167]
[-142.82173157 72.34435272]
[-129.30094910 66.09634399]
[-116.46453857 75.34497833]
[-101.56080627 77.04168701]
[-86.65708160 78.73838806]
[-71.75334930 80.43509674]
[-56.06946182 72.57570648]
[-41.35224915 83.63204956]
[-26.42299843 85.08720398]
[-11.49374676 86.54235077]
[1.92409039 80.07621002]
[14.90857887 89.11577606]
[29.83782959 90.57092285]
[44.76708221 92.02606964]
[59.69633102 93.48121643]
[74.62558746 94.93636322]
[101.64072418 79.12429810]
[109.48855591 66.34104919]
[117.33638763 53.55779266]
[125.18421936 40.77453995]
[115.25588226 24.19673157]
[115.11085510 4.97521114]
[124.68637085 -11.57502174]
[141.24603271 -20.92977905]
[140.51760864 -35.91208267]
[139.78916931 -50.89438248]
[136.24243164 -59.32796097]
[139.17224121 -66.12480164]
[138.68650818 -81.11692810]
[138.20077515 -96.10906219]
[134.79107666 -104.59896851]
[137.83055115 -111.34747314]
[137.58766174 -126.34550476]
[126.05994415 -137.15695190]
[125.63696289 -152.95556641]
[136.56967163 -164.36834717]
[152.37188721 -164.62426758]
[163.66844177 -153.57150269]
[163.75727844 -137.76745605]
[152.58569336 -126.58840179]
[152.82859802 -111.59037018]
[153.19291687 -96.59479523]
[153.67864990 -81.60266113]
[154.16436768 -66.61052704]
[154.77146912 -51.62281799]
[155.49990845 -36.64051437]
[156.22833252 -21.65821266]
[162.83845520 -19.93041992]
[169.00428772 -16.98742294]
[174.50471497 -12.93476963]
[186.61135864 -21.79080582]
[191.69943237 -29.39449501]
[198.98651123 -30.69034386]
[211.23495483 -39.34917450]
[223.48341370 -48.00800705]
[225.67709351 -52.77589417]
[229.13894653 -55.90412521]
[233.02818298 -57.18410873]
[236.54359436 -56.77283096]
[249.19808960 -64.82662964]
[261.85260010 -72.88043213]
[274.50708008 -80.93423462]
[287.16159058 -88.98803711]
[299.81607056 -97.04183960]
[301.68466187 -112.56738281]
[313.13098145 -123.22175598]
[328.75042725 -123.97429657]
[341.16802979 -114.46967316]
[344.52050781 -99.19567871]
[337.22494507 -85.36422729]
[322.72610474 -79.50611115]
[307.86987305 -84.38734436]
[295.21539307 -76.33354187]
[282.56088257 -68.27973938]
[269.90640259 -60.22594070]
[257.25189209 -52.17213821]
[244.59739685 -44.11833572]
[232.14224243 -35.75955200]
[219.89379883 -27.10072136]
[207.64533997 -18.44189072]
[195.46739197 -9.68416977]
[183.36076355 -0.82813394]
[186.63739014 12.78091335]
[184.48924255 26.66342926]
[177.20120239 38.73093033]
[165.83425903 47.15345764]
[152.07118225 50.63703537]
[137.96746826 48.62237167]
[130.11964417 61.40562439]
[122.27181244 74.18888092]
[114.42398071 86.97212982]
[118.26714325 101.47144318]
[131.41642761 108.68923187]
[144.56570435 115.90702057]
[157.71498108 123.12480927]
[170.86425781 130.34260559]
[184.01353455 137.56039429]
[198.52264404 131.72775269]
[213.37028503 136.63507080]
[221.54583740 149.96527100]
[219.18907166 165.42424011]
[207.41276550 175.71272278]
[191.77734375 175.97280884]
[179.66537476 166.08169556]
[176.79574585 150.70967102]
[163.64646912 143.49188232]
[150.49719238 136.27409363]
[137.34791565 129.05630493]
[124.19863129 121.83850861]
[111.04935455 114.62071991]
[97.95895386 121.94474030]
[97.23051453 136.92704773]
[104.28852081 151.08666992]
[95.94228363 163.42318726]
[95.21385193 178.40548706]
[94.48542023 193.38778687]
[93.75698853 208.37010193]
[104.09803772 220.01914978]
[103.14587402 235.20295715]
[91.97655487 244.98977661]
[91.24811554 259.97207642]
[90.51968384 274.95437622]
[89.79125214 289.93667603]
[89.06282043 304.91897583]
[99.40386963 316.56805420]
[98.45170593 331.75186157]
[87.28238678 341.53866577]
[86.55394745 356.52096558]
[85.82551575 371.50326538]
[85.09708405 386.48556519]
[92.15509033 400.64520264]
[83.80885315 412.98171997]
[83.08042145 427.96401978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 193]
[5 192]
[7 190]
[8 189]
[9 188]
[10 187]
[13 184]
[14 183]
[15 182]
[16 181]
[17 180]
[20 177]
[21 176]
[22 175]
[23 174]
[25 172]
[26 171]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[33 70]
[34 69]
[35 68]
[38 66]
[39 65]
[40 64]
[41 63]
[43 61]
[44 60]
[45 59]
[47 57]
[48 56]
[49 55]
[77 151]
[78 150]
[79 149]
[80 148]
[84 107]
[85 106]
[86 105]
[88 104]
[89 103]
[90 102]
[92 101]
[93 100]
[110 142]
[111 141]
[113 140]
[114 139]
[115 138]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[152 170]
[153 169]
[154 168]
[155 167]
[156 166]
[157 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
