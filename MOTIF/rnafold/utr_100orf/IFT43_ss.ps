%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUCCAGGAAGUGACGUCAGGCGGCCGCGGAGAUGGAGGAUUUGCUCGACUUGGACGAGGAGCUUCGCUACAGCUUGGCUACCUCCAGGGCCAAGAUGGGUCGCCGAGCUCAACAGGAGUCAGCGCAGGCCG\
) } def
/len { sequence length } bind def

/coor [
[-3.24617600 207.36703491]
[-17.58439445 203.42324829]
[-29.18646812 212.93070984]
[-40.78854370 222.43817139]
[-52.39061737 231.94563293]
[-63.99269104 241.45310974]
[-75.59476471 250.96057129]
[-81.64109802 268.30877686]
[-99.00366211 270.57516479]
[-110.38136292 280.35000610]
[-111.72647858 295.86865234]
[-123.40433502 305.61965942]
[-138.19070435 304.24166870]
[-149.56840515 314.01654053]
[-148.17178345 329.47064209]
[-156.15447998 342.77688599]
[-170.44696045 348.81875610]
[-185.55349731 345.27304077]
[-195.66531372 333.50314331]
[-196.89421082 318.03479004]
[-188.76763916 304.81591797]
[-174.41044617 298.92944336]
[-159.34326172 302.63882446]
[-147.96556091 292.86398315]
[-147.09973145 278.03878784]
[-135.70036316 267.96362305]
[-120.15621948 268.97232056]
[-108.77851868 259.19744873]
[-107.53026581 247.10784912]
[-98.05113983 238.87396240]
[-85.10222626 239.35848999]
[-73.50015259 229.85102844]
[-61.89807892 220.34356689]
[-50.29600525 210.83610535]
[-38.69393158 201.32864380]
[-27.09185791 191.82116699]
[-28.14105034 176.98751831]
[-20.15999031 164.22952271]
[-6.03172970 158.55099487]
[8.90379810 162.32408142]
[20.50587273 152.81661987]
[23.71496201 146.08226013]
[32.49032593 143.22669983]
[44.31048584 133.99177551]
[56.13064575 124.75685883]
[67.95080566 115.52193451]
[79.77097321 106.28701019]
[81.37782288 89.90274048]
[94.23193359 79.61692810]
[110.56979370 81.64190674]
[122.17186737 72.13444519]
[133.77394104 62.62697601]
[145.37602234 53.11951447]
[156.97808838 43.61204910]
[152.93470764 30.92911339]
[153.46940613 17.66010666]
[158.49584961 5.40302658]
[167.38807678 -4.37349939]
[179.05833435 -10.50618362]
[192.09017944 -12.27547359]
[204.91036987 -9.48991394]
[215.97875977 -2.50659776]
[228.01060486 -11.46397686]
[240.04244995 -20.42135620]
[252.07429504 -29.37873459]
[264.10614014 -38.33611298]
[276.13800049 -47.29349136]
[282.58703613 -61.74065018]
[297.41625977 -63.13458252]
[309.44812012 -72.09196472]
[315.89715576 -86.53912354]
[330.72640991 -87.93305206]
[342.75823975 -96.89043427]
[344.71960449 -115.66133118]
[359.46844482 -126.92209625]
[377.46743774 -123.97080231]
[389.06951904 -133.47825623]
[400.67156982 -142.98573303]
[412.27365112 -152.49319458]
[423.87573242 -162.00065613]
[435.47781372 -171.50811768]
[447.07986450 -181.01557922]
[446.04324341 -196.49800110]
[454.33337402 -209.61489868]
[468.76260376 -215.32257080]
[483.78253174 -211.42630005]
[493.61773682 -199.42428589]
[494.48635864 -183.93153381]
[486.05441284 -170.90533447]
[471.56411743 -165.35453796]
[456.58734131 -169.41351318]
[444.98526001 -159.90605164]
[433.38317871 -150.39859009]
[421.78112793 -140.89111328]
[410.17904663 -131.38365173]
[398.57696533 -121.87619019]
[386.97488403 -112.36872101]
[388.33404541 -100.93351746]
[383.91995239 -90.16708374]
[374.73660278 -82.82655334]
[363.02465820 -80.85282898]
[351.71563721 -84.85858154]
[339.68377686 -75.90120697]
[334.09533691 -62.09473801]
[318.40548706 -60.06011581]
[306.37365723 -51.10273743]
[300.78521729 -37.29626846]
[285.09536743 -35.26164246]
[273.06353760 -26.30426598]
[261.03167725 -17.34688568]
[248.99983215 -8.38950729]
[236.96797180 0.56787115]
[224.93612671 9.52525043]
[228.63517761 25.93136215]
[224.82269287 42.36791229]
[214.21017456 55.55606842]
[198.87045288 62.84370422]
[181.83297729 62.73868942]
[166.48554993 55.21412277]
[154.88348389 64.72158813]
[143.28140259 74.22904968]
[131.67933655 83.73651886]
[120.07726288 93.24398041]
[120.32499695 105.96948242]
[113.23519897 116.53993988]
[101.36736298 121.13931274]
[89.00588989 118.10717773]
[77.18572998 127.34209442]
[65.36557007 136.57702637]
[53.54540634 145.81193542]
[41.72524643 155.04685974]
[30.01333618 164.41868591]
[18.41126251 173.92616272]
[19.17569923 189.31192017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[9 28]
[10 27]
[13 24]
[14 23]
[40 133]
[41 132]
[43 131]
[44 130]
[45 129]
[46 128]
[47 127]
[50 123]
[51 122]
[52 121]
[53 120]
[54 119]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[69 106]
[70 105]
[72 103]
[73 102]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
