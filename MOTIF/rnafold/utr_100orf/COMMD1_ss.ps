%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCUCAGCUGUUGCGGGGCGGGGCCUUCGCAGAGCAUGGCGGCGGGCGAGCUUGAGGGUGGCAAACCCCUGAGCGGGCUGCUGAAUGCGCUGGCCCAGGACACUUUCCACGGGUACCCCGGCAUCACAGAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[100.65436554 395.54034424]
[84.29344940 394.42123413]
[77.32617188 379.57574463]
[86.91986847 366.27563477]
[87.94350433 351.31057739]
[88.96714783 336.34555054]
[89.99078369 321.38052368]
[80.03890991 310.35800171]
[80.86383820 295.16674805]
[92.49274445 284.80307007]
[93.51638794 269.83801270]
[94.54002380 254.87300110]
[95.56365967 239.90795898]
[96.24637604 224.92350769]
[96.58782196 209.92739868]
[96.92926788 194.93128967]
[97.10000610 179.93225098]
[97.10000610 164.93225098]
[97.10000610 149.93225098]
[97.10000610 134.93225098]
[76.23220825 120.24056244]
[72.69703674 97.88997650]
[84.62910461 82.15750885]
[78.96781921 68.26686859]
[73.30653381 54.37623215]
[67.64524078 40.48559189]
[61.98395538 26.59495544]
[47.69328308 20.39702225]
[42.14980698 6.22929239]
[48.14665985 -7.35648584]
[42.48537064 -21.24712372]
[36.82408142 -35.13776016]
[31.16279602 -49.02840042]
[22.63055611 -49.42070389]
[14.63763428 -52.33391571]
[7.90799236 -57.48254776]
[3.04468274 -64.37963867]
[0.47583354 -72.38277435]
[0.41701278 -80.75389099]
[2.85328460 -88.72732544]
[7.54243040 -95.57987976]
[14.03887558 -100.69637299]
[10.32175922 -115.22850800]
[6.60464239 -129.76065063]
[2.88752556 -144.29278564]
[-0.82959121 -158.82492065]
[-6.03025818 -166.44132996]
[-4.46190548 -173.73019409]
[-7.84726095 -188.34318542]
[-20.97336388 -196.73025513]
[-24.19842911 -211.59812927]
[-16.12173462 -224.06018066]
[-19.50708961 -238.67317200]
[-22.89244461 -253.28614807]
[-26.27780151 -267.89913940]
[-29.66315651 -282.51211548]
[-40.31539536 -294.20999146]
[-35.65014648 -308.35513306]
[-39.03549957 -322.96810913]
[-42.42085648 -337.58111572]
[-45.80621338 -352.19409180]
[-58.60213089 -361.87109375]
[-58.87042618 -377.91189575]
[-46.40528870 -388.01138306]
[-30.76889992 -384.42208862]
[-23.95616341 -369.89743042]
[-31.19322586 -355.57943726]
[-27.80787086 -340.96646118]
[-24.42251587 -326.35348511]
[-21.03715897 -311.74047852]
[-10.62706566 -301.08782959]
[-15.05016994 -285.89749146]
[-11.66481495 -271.28448486]
[-8.27945900 -256.67150879]
[-4.89410353 -242.05851746]
[-1.50874770 -227.44554138]
[11.22515011 -219.80462646]
[14.86654949 -205.03320312]
[6.76572514 -191.72853088]
[10.15108109 -177.11555481]
[13.70254707 -162.54203796]
[17.41966438 -148.00990295]
[21.13677979 -133.47776794]
[24.85389709 -118.94562531]
[28.57101440 -104.41349030]
[48.51822281 -95.41999817]
[55.64485931 -74.44823456]
[45.05343246 -54.68968582]
[50.71472168 -40.79904938]
[56.37601089 -26.90841103]
[62.03729630 -13.01777363]
[75.82232666 -7.49432802]
[81.76155853 6.51210690]
[75.87459564 20.93366814]
[81.53588104 34.82430649]
[87.19716644 48.71494293]
[92.85845947 62.60557938]
[98.51974487 76.49621582]
[119.90175629 78.49438477]
[135.04872131 99.49063110]
[150.01374817 100.51426697]
[164.97879028 101.53790283]
[177.96694946 92.12052155]
[193.38865662 96.54212952]
[199.41368103 111.41083527]
[191.42015076 125.32065582]
[175.54000854 127.60115051]
[163.95515442 116.50292969]
[148.99011230 115.47929382]
[134.02508545 114.45565796]
[128.54382324 119.57480621]
[143.38349915 121.76202393]
[150.92601013 134.72776794]
[145.49182129 148.70881653]
[131.17288208 153.17739868]
[118.75140381 144.76867676]
[117.58127594 129.81311035]
[112.10000610 134.93225098]
[112.10000610 149.93225098]
[112.10000610 164.93225098]
[112.10000610 179.93225098]
[115.25105286 188.59986877]
[111.92538452 195.27273560]
[111.58393860 210.26884460]
[111.24248505 225.26495361]
[114.13711548 231.36402893]
[113.54147339 237.12516785]
[110.52868652 240.93159485]
[109.50505066 255.89663696]
[108.48141479 270.86166382]
[107.45777893 285.82669067]
[117.56718445 297.67733765]
[116.31588745 312.83941650]
[104.95581055 322.40417480]
[103.93217468 337.36920166]
[102.90853882 352.33422852]
[101.88490295 367.29925537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 137]
[5 136]
[6 135]
[7 134]
[10 131]
[11 130]
[12 129]
[13 128]
[14 125]
[15 124]
[16 123]
[17 121]
[18 120]
[19 119]
[20 118]
[23 98]
[24 97]
[25 96]
[26 95]
[27 94]
[30 91]
[31 90]
[32 89]
[33 88]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[48 80]
[49 79]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[58 70]
[59 69]
[60 68]
[61 67]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
