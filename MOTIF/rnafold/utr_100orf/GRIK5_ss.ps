%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCAGCUGCGUCCCCAUGAGGAGGGGAGGAAGAUGCCGGCUGAGCUGCUGCUGCUGCUGAUUGUUGCCUUCGCCAGCCCCAGCUGCCAGGUGCUCUCAUCACUGCGCAUGGCUGCAAUCCUGGAUGAUCAGA\
) } def
/len { sequence length } bind def

/coor [
[277.54196167 81.03877258]
[267.13073730 72.40924072]
[252.45375061 75.50531769]
[237.77674866 78.60139465]
[223.09974670 81.69747162]
[208.42274475 84.79354858]
[193.74575806 87.88961792]
[179.06875610 90.98569489]
[164.39175415 94.08177185]
[153.53555298 104.27944183]
[138.43553162 99.55717468]
[123.75853729 102.65325165]
[111.85275269 125.50208282]
[82.02378082 126.88084412]
[69.27052307 134.77732849]
[56.51726532 142.67381287]
[43.76401138 150.57029724]
[31.01075363 158.46678162]
[28.95006371 173.96798706]
[17.37268257 184.47979736]
[1.74509513 185.03886414]
[-10.55382824 175.38119507]
[-13.71691322 160.06686401]
[-6.25064802 146.32681274]
[8.31962585 140.64869690]
[23.11427116 145.71351624]
[35.86752701 137.81703186]
[48.62078476 129.92056274]
[61.37404251 122.02407074]
[74.12729645 114.12759399]
[70.52462769 99.56665802]
[55.56063080 98.52799225]
[43.80433273 109.09042358]
[28.02728844 108.16281891]
[17.58973885 96.29550934]
[18.68409729 80.52915192]
[30.66110039 70.21765900]
[46.41500092 71.47864532]
[56.59929657 83.56399536]
[71.56329346 84.60266113]
[78.28429413 77.69075012]
[86.46438599 73.30706024]
[95.23428345 71.67391205]
[103.72931671 72.73416138]
[111.17413330 76.17503357]
[116.95346069 81.47628021]
[120.66246033 87.97624969]
[135.33946228 84.88017273]
[147.24545288 74.46105957]
[161.29566956 79.40477753]
[175.97267151 76.30870056]
[190.64967346 73.21262360]
[205.32667542 70.11654663]
[220.00367737 67.02046967]
[234.68067932 63.92439270]
[249.35766602 60.82831573]
[264.03466797 57.73223877]
[273.27075195 42.92644501]
[290.01861572 39.40630341]
[303.87750244 48.86187363]
[318.47906494 45.42761612]
[333.08062744 41.99335861]
[347.68222046 38.55910110]
[362.28378296 35.12484360]
[376.88534546 31.69058418]
[391.48690796 28.25632477]
[406.08850098 24.82206726]
[393.20126343 17.14619637]
[387.12374878 3.43254948]
[390.09329224 -11.27057838]
[401.01666260 -21.55064201]
[415.87277222 -23.62332726]
[429.19274902 -16.72562981]
[436.07321167 -3.39674616]
[433.98132324 11.45667076]
[423.68615723 22.36729813]
[438.67016602 21.67454720]
[453.65414429 20.98179436]
[468.63815308 20.28904343]
[474.43911743 7.50718546]
[485.14291382 -1.47043908]
[498.61090088 -4.92490435]
[512.18420410 -2.23342037]
[523.20880127 6.01927423]
[529.55413818 18.16676903]
[544.55010986 17.82030106]
[558.16790771 9.76630974]
[571.07049561 17.20757294]
[586.06646729 16.86110497]
[601.06250000 16.51463699]
[616.05847168 16.16816711]
[629.67626953 8.11417675]
[642.57885742 15.55543995]
[657.57482910 15.20897102]
[672.57086182 14.86250305]
[687.56683350 14.51603413]
[694.86651611 1.00269413]
[707.95330811 -7.03669691]
[723.30688477 -7.43958330]
[736.79730225 -0.09758983]
[744.79559326 13.01432323]
[745.15039062 28.36911774]
[737.76611328 41.83643341]
[724.62921143 49.79362488]
[709.27337646 50.10025024]
[695.82928467 42.67382812]
[687.91326904 29.51203346]
[672.91729736 29.85850143]
[657.92132568 30.20496941]
[642.92529297 30.55143738]
[630.38012695 38.58064651]
[616.40496826 31.16416550]
[601.40893555 31.51063347]
[586.41296387 31.85710335]
[571.41693115 32.20357132]
[558.87176514 40.23278046]
[544.89660645 32.81629944]
[529.90057373 33.16276550]
[522.52764893 47.49516296]
[508.86810303 56.22565460]
[492.57751465 56.90615463]
[478.07192993 49.25799561]
[469.33090210 35.27303696]
[454.34689331 35.96578979]
[439.36291504 36.65854263]
[424.37890625 37.35129166]
[409.52276611 39.42363739]
[394.92117310 42.85789490]
[380.31961060 46.29215622]
[365.71804810 49.72641373]
[351.11645508 53.16067123]
[336.51489258 56.59492874]
[321.91333008 60.02918625]
[307.31176758 63.46344757]
[302.09576416 75.30259705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[5 54]
[6 53]
[7 52]
[8 51]
[9 50]
[11 48]
[12 47]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[31 40]
[32 39]
[60 134]
[61 133]
[62 132]
[63 131]
[64 130]
[65 129]
[66 128]
[67 127]
[76 126]
[77 125]
[78 124]
[79 123]
[85 118]
[86 117]
[88 115]
[89 114]
[90 113]
[91 112]
[93 110]
[94 109]
[95 108]
[96 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
