%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACCCCGGGAACCGUUAUUGGCCGGGUCACAAGCCCGCCCGCCCGCUGCUGGAGCCGCGACCAUGGAGGAGUCUGGCAUGGCUCAUGAAUCAGCAGAGGACUUGUUUCAUUUCAACGUAGGGGGCUGGCAUUUCUCAGUUCCCAGAAGCAAACUCUCUCAGU\
) } def
/len { sequence length } bind def

/coor [
[104.84373474 250.05227661]
[90.52788544 255.34558105]
[75.33387756 253.89472961]
[62.27849960 245.98779297]
[53.95390320 233.19467163]
[52.01294327 218.05546570]
[56.84099579 203.57608032]
[67.47945404 192.63139343]
[81.81604004 187.39450073]
[83.24187469 172.46241760]
[84.66771698 157.53034973]
[86.09355927 142.59826660]
[80.15428925 138.01840210]
[71.74417877 150.43894958]
[69.05240631 165.19546509]
[55.04986191 170.57400513]
[43.17150116 161.41406250]
[44.81419754 146.50428772]
[58.40127182 140.15003967]
[68.27575684 128.85868835]
[62.33649063 124.27883148]
[48.25745392 129.45384216]
[34.17841721 134.62884521]
[23.89491081 146.65216064]
[9.27968884 143.78082275]
[-4.79934931 148.95582581]
[-18.87838745 154.13082886]
[-32.95742416 159.30583191]
[-47.03646469 164.48083496]
[-55.04835129 178.38009644]
[-70.93148804 180.63963318]
[-82.50169373 169.52612305]
[-80.88329315 153.56491089]
[-67.31778717 145.00006104]
[-52.21146774 150.40180969]
[-38.13243103 145.22679138]
[-24.05339241 140.05178833]
[-9.97435474 134.87678528]
[4.10468340 129.70178223]
[13.38116169 118.04861450]
[29.00341034 120.54980469]
[43.08244705 115.37479401]
[57.16148758 110.19979095]
[63.61528015 85.58473969]
[81.16277313 71.41161346]
[75.85396576 57.38248062]
[63.73330307 47.21390152]
[66.46537018 32.57200623]
[61.15657425 18.54287338]
[55.84777069 4.51373768]
[50.53897095 -9.51539707]
[45.23017120 -23.54453278]
[39.92136765 -37.57366943]
[33.82032013 -51.27684784]
[26.94692039 -64.60938263]
[20.07352257 -77.94190979]
[13.20012474 -91.27444458]
[6.32672739 -104.60697937]
[-0.54667056 -117.93950653]
[-13.78856564 -120.54691315]
[-22.96642494 -130.17454529]
[-24.88074684 -143.14039612]
[-19.05254173 -154.66169739]
[-25.67085838 -168.12266541]
[-32.28917313 -181.58364868]
[-37.61903000 -185.61849976]
[-39.75563431 -190.94627380]
[-38.89221573 -195.68545532]
[-44.99326706 -209.38864136]
[-58.57127380 -218.58482361]
[-57.12642670 -234.92019653]
[-42.14505768 -241.59033203]
[-29.03871918 -231.73355103]
[-31.29008484 -215.48968506]
[-25.18903351 -201.78649902]
[-18.82819748 -188.20196533]
[-12.20988178 -174.74098206]
[-5.59156513 -161.28001404]
[10.52871513 -156.55903625]
[18.42166138 -141.35069275]
[12.78586102 -124.81290436]
[19.65925980 -111.48037720]
[26.53265762 -98.14784241]
[33.40605545 -84.81530762]
[40.27945328 -71.48278046]
[47.15285110 -58.15024567]
[53.01828384 -71.95592499]
[66.86094666 -77.73352814]
[80.80059814 -72.19402313]
[86.90178680 -58.49090576]
[81.69127655 -44.42496872]
[68.13526917 -38.00355530]
[53.95050430 -42.88246918]
[59.25930405 -28.85333443]
[64.56810760 -14.82419872]
[69.87690735 -0.79506356]
[75.18570709 13.23407173]
[80.49450684 27.26320648]
[92.23545837 36.42832947]
[89.88310242 52.07368088]
[95.19190216 66.10281372]
[113.84570312 68.68812561]
[128.31027222 80.74732971]
[134.20913696 98.63172150]
[148.96441650 101.33014679]
[163.71971130 104.02857208]
[178.47499084 106.72699738]
[193.23028564 109.42541504]
[207.98556519 112.12384033]
[222.74085999 114.82226562]
[212.96829224 103.44259644]
[209.33346558 88.88965607]
[212.60763550 74.25135803]
[222.09608459 62.63372803]
[235.78549194 56.50185013]
[250.77119446 57.15681458]
[263.87341309 64.45964813]
[272.31210327 76.86080933]
[274.29666138 91.72894287]
[269.40603638 105.90927124]
[258.67788696 116.39292908]
[244.38882446 120.95543671]
[258.36679077 126.39755249]
[272.34472656 131.83967590]
[286.32269287 137.28178406]
[300.30065918 142.72390747]
[314.27862549 148.16601562]
[328.25659180 153.60813904]
[342.23452759 159.05024719]
[356.21249390 164.49237061]
[370.57821655 157.90432739]
[385.36544800 163.48222351]
[391.80123901 177.91676331]
[386.06732178 192.64421082]
[371.56552124 198.92703247]
[356.89953613 193.03771973]
[350.77038574 178.47032166]
[336.79241943 173.02821350]
[322.81445312 167.58609009]
[308.83651733 162.14398193]
[294.85855103 156.70185852]
[280.88058472 151.25975037]
[266.90261841 145.81762695]
[252.92466736 140.37551880]
[238.94670105 134.93339539]
[228.96253967 136.70852661]
[220.04243469 129.57754517]
[205.28715515 126.87912750]
[190.53186035 124.18070221]
[175.77656555 121.48228455]
[161.02128601 118.78385925]
[146.26599121 116.08543396]
[131.51071167 113.38701630]
[129.22871399 121.35090637]
[124.89337921 128.91754150]
[118.58175659 135.55319214]
[110.50951385 140.74250793]
[101.02564240 144.02410889]
[99.59980011 158.95619202]
[98.17395782 173.88825989]
[96.74811554 188.82034302]
[109.83453369 196.67582703]
[118.20944214 209.43605042]
[120.21000671 224.56748962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 161]
[10 160]
[11 159]
[12 158]
[21 43]
[22 42]
[23 41]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[45 101]
[46 100]
[48 98]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[63 78]
[64 77]
[65 76]
[68 75]
[69 74]
[104 153]
[105 152]
[106 151]
[107 150]
[108 149]
[109 148]
[110 147]
[122 145]
[123 144]
[124 143]
[125 142]
[126 141]
[127 140]
[128 139]
[129 138]
[130 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
