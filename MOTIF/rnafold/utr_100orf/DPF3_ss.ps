%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAAUAUUCUGUUACAUUGUAGCAAAAUGGCGACUGUCAUUCACAACCCCCUGAAAGCGCUCGGGGACCAGUUCUACAAGGAAGCCAUUGAGCACUGCCGGAGUUACAACUCACGGCUGUGUGCAG\
) } def
/len { sequence length } bind def

/coor [
[136.65283203 185.98927307]
[131.54946899 200.09443665]
[121.26979065 211.01818848]
[107.50037384 216.96824646]
[92.50037384 216.96839905]
[78.73083496 211.01861572]
[68.45092773 200.09509277]
[63.34727859 185.99003601]
[64.25723267 171.01765442]
[71.03150177 157.63449097]
[82.55931091 148.03593445]
[88.75000000 134.37301636]
[76.76680756 143.39538574]
[64.78360748 152.41773987]
[52.80041122 161.44010925]
[40.81721878 170.46246338]
[28.83402061 179.48483276]
[19.81727791 193.84222412]
[3.52489614 189.15237427]
[3.52127981 172.19842529]
[19.81165886 167.50163269]
[31.79485512 158.47926331]
[43.77804947 149.45690918]
[55.76124573 140.43453979]
[67.74444580 131.41218567]
[79.72763824 122.38982391]
[73.77777100 98.02048492]
[87.63426971 81.33471680]
[84.01725769 66.77733612]
[80.40024567 52.21996307]
[76.78323364 37.66258621]
[73.16622162 23.10520744]
[69.54920959 8.54783154]
[56.29156113 0.37027386]
[52.83077240 -14.44450188]
[60.70852280 -27.03325081]
[57.09151077 -41.59062576]
[42.04698563 -41.09969711]
[27.23494148 -43.74661255]
[13.30239868 -49.41327286]
[0.85744029 -57.84973907]
[-9.55731964 -68.68522644]
[-17.48839951 -81.44443512]
[-22.59119034 -95.56835175]
[-24.64493370 -110.43879700]
[-23.56226921 -125.40544128]
[-19.39294624 -139.81425476]
[-12.32154465 -153.03607178]
[-2.65930390 -164.49414062]
[9.16957283 -173.68917847]
[22.64654350 -180.22117615]
[19.02953148 -194.77854919]
[15.41251945 -209.33592224]
[11.79550743 -223.89331055]
[8.17849541 -238.45068359]
[4.56148291 -253.00805664]
[-9.10638142 -260.94311523]
[-13.07928467 -276.23989868]
[-5.00017262 -289.82308960]
[10.33775997 -293.63406372]
[23.83478928 -285.41177368]
[27.48336983 -270.03442383]
[19.11886024 -256.62506104]
[22.73587227 -242.06768799]
[26.35288429 -227.51031494]
[29.96989632 -212.95294189]
[33.58691025 -198.39556885]
[37.20392227 -183.83818054]
[52.17085648 -184.37353516]
[66.92775726 -181.78416443]
[80.82916260 -176.18086243]
[93.26653290 -167.80628967]
[103.69486237 -157.02450562]
[111.65657043 -144.30508423]
[116.80158234 -130.20271301]
[118.90272522 -115.33298492]
[117.86575317 -100.34552002]
[113.73355103 -85.89560699]
[106.68441772 -72.61552429]
[97.02431488 -61.08689499]
[85.17363739 -51.81520462]
[71.64888763 -45.20764160]
[75.26589966 -30.65026283]
[88.11954498 -23.21256065]
[91.99508667 -8.50083637]
[84.10659027 4.93081903]
[87.72360229 19.48819542]
[91.34061432 34.04557419]
[94.95762634 48.60295105]
[98.57463837 63.16032791]
[102.19165039 77.71770477]
[119.06028748 83.83119202]
[127.53955078 101.81313324]
[120.27236176 122.38982391]
[132.25555420 131.41218567]
[144.23875427 140.43453979]
[156.22195435 149.45690918]
[176.26057434 150.89144897]
[183.26002502 168.85104370]
[195.66828918 177.27928162]
[208.07655334 185.70750427]
[220.48481750 194.13572693]
[232.99478149 202.41224670]
[245.60459900 210.53582764]
[258.21441650 218.65940857]
[270.82424927 226.78297424]
[287.22137451 227.04052734]
[294.95935059 241.49928284]
[286.07803345 255.28529358]
[269.71374512 254.21672058]
[262.70065308 239.39279175]
[250.09083557 231.26922607]
[237.48101807 223.14564514]
[224.87120056 215.02206421]
[217.46798706 214.03413391]
[212.05657959 206.54399109]
[199.64833069 198.11576843]
[187.24006653 189.68753052]
[174.83180237 181.25930786]
[164.88192749 184.08915710]
[154.82397461 180.85430908]
[148.11413574 172.40914917]
[147.19958496 161.44010925]
[135.21638489 152.41773987]
[123.23319244 143.39538574]
[111.25000000 134.37301636]
[117.44068909 148.03593445]
[128.96801758 157.63389587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[28 91]
[29 90]
[30 89]
[31 88]
[32 87]
[33 86]
[36 83]
[37 82]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[94 126]
[95 125]
[96 124]
[97 123]
[99 119]
[100 118]
[101 117]
[102 116]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
