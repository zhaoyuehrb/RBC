%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCGCGUUCCCUGCACAAAAUGCCGGGCGAAGCCACAGAAACCGUCCCUGCUACAGAGCAGGAGUUGCCGCAGUCCCAGGCUGAGACAGGGUCUGGAACAGCAUCUGAUAGUGGUGAAU\
) } def
/len { sequence length } bind def

/coor [
[69.55288696 108.99315643]
[57.39515305 117.77890778]
[45.23741913 126.56466675]
[33.07968521 135.35041809]
[20.92195129 144.13616943]
[15.72218895 151.79087830]
[8.33965302 152.98635864]
[-4.03849268 161.45875549]
[-5.86147022 165.69458008]
[-8.69675064 168.75712585]
[-12.02534103 170.46815491]
[-15.32538128 170.84594727]
[-18.13969803 170.08761597]
[-31.31738091 177.25340271]
[-39.74473953 190.64334106]
[-54.62206650 189.92608643]
[-67.79975128 197.09188843]
[-80.97743225 204.25769043]
[-86.88470459 219.17356873]
[-102.27096558 223.71697998]
[-115.33319092 214.40260315]
[-116.05116272 198.37561035]
[-103.87411499 187.93057251]
[-88.14323425 191.08000183]
[-74.96554565 183.91419983]
[-61.78786469 176.74841309]
[-54.30305862 163.87103271]
[-38.48317719 164.07572937]
[-25.30549431 156.90992737]
[-12.51089001 149.08061218]
[-0.13274486 140.60821533]
[12.13619518 131.97843933]
[24.29393005 123.19268036]
[36.45166397 114.40692902]
[48.60939789 105.62117767]
[60.76713562 96.83541870]
[45.88560104 98.71691895]
[32.26412201 104.99826050]
[17.26412392 105.00697327]
[3.63535094 98.74147034]
[-6.12382460 87.35031128]
[-10.22438908 72.92168427]
[-7.91464281 58.10057831]
[0.38200015 45.60395050]
[13.14463234 37.72262955]
[28.03365707 35.90139008]
[42.31967926 40.47409058]
[53.38383865 50.60248566]
[59.19796371 64.43023682]
[68.91082764 75.86090851]
[65.86714172 61.17295074]
[62.82345963 46.48499680]
[59.77977371 31.79704475]
[56.73608780 17.10909081]
[53.69240570 2.42113781]
[42.38362122 -9.45503521]
[47.27323532 -25.10826874]
[63.33123016 -28.43585777]
[74.03851318 -16.01466370]
[68.38035583 -0.62254733]
[71.42404175 14.06540585]
[74.46772766 28.75336075]
[77.51141357 43.44131470]
[80.55509949 58.12926865]
[83.59878540 72.81722260]
[102.66797638 70.57978821]
[118.10116577 79.51791382]
[124.55623627 94.67099762]
[139.49633789 96.01013947]
[154.43644714 97.34928131]
[169.37655640 98.68841553]
[184.31665039 100.02755737]
[199.25675964 101.36669159]
[214.19686890 102.70583344]
[228.63269043 96.23145294]
[240.61837769 105.07409668]
[255.55848694 106.41323090]
[270.49859619 107.75237274]
[279.38208008 95.30122375]
[293.21377563 89.00989532]
[308.23754883 90.47685242]
[320.42834473 99.20845795]
[326.57040405 112.77829742]
[341.51049805 114.11743927]
[356.45062256 115.45657349]
[371.39071655 116.79571533]
[381.62051392 105.27802277]
[396.49688721 102.03040314]
[410.27014160 108.09354401]
[417.74267578 120.95041656]
[432.68276978 122.28955841]
[447.62289429 123.62869263]
[463.93856812 119.02055359]
[472.88323975 133.42294312]
[461.51983643 146.00505066]
[446.28375244 138.56880188]
[431.34362793 137.22966003]
[416.40353394 135.89051819]
[406.76367188 147.21354675]
[392.13171387 150.73062134]
[378.07000732 144.88917542]
[370.05157471 131.73582458]
[355.11148071 130.39668274]
[340.17135620 129.05754089]
[325.23126221 127.71840668]
[316.77386475 139.97964478]
[303.22457886 146.40406799]
[288.17941284 145.17582703]
[275.68701172 136.52497864]
[269.15945435 122.69247437]
[254.21934509 121.35333252]
[239.27923584 120.01419830]
[225.91203308 126.58436584]
[212.85772705 117.64593506]
[197.91761780 116.30680084]
[182.97750854 114.96765900]
[168.03741455 113.62851715]
[153.09730530 112.28938293]
[138.15721130 110.95024109]
[123.21710205 109.61110687]
[114.29084015 122.65142059]
[98.50366211 128.39825439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[7 31]
[8 30]
[13 29]
[14 28]
[16 26]
[17 25]
[18 24]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[68 120]
[69 119]
[70 118]
[71 117]
[72 116]
[73 115]
[74 114]
[76 112]
[77 111]
[78 110]
[83 105]
[84 104]
[85 103]
[86 102]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
