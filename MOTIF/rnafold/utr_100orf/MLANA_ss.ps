%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGACAGAGGACUCUCAUUAAGGAAGGUGUCCUGUGCCCUGACCCUACAAGAUGCCAAGAGAAGAUGCUCACUUCAUCUAUGGUUACCCCAAGAAGGGGCACGGCCACUCUUACACCACGGCUGAAGAGGCCGCUGGGAUCGGCAUCCUGA\
) } def
/len { sequence length } bind def

/coor [
[-31.61767960 221.94740295]
[-48.82349396 223.26710510]
[-64.26394653 215.76225281]
[-76.36312103 224.62846375]
[-88.46230316 233.49468994]
[-95.45578003 250.49900818]
[-112.93155670 251.78878784]
[-124.84735870 260.89996338]
[-131.11030579 275.42877197]
[-145.92042542 277.01306152]
[-157.83622742 286.12423706]
[-169.75202942 295.23541260]
[-181.66784668 304.34658813]
[-193.58364868 313.45776367]
[-205.40589905 322.69000244]
[-217.13337708 332.04235840]
[-228.76484680 341.51382446]
[-240.29910278 351.10345459]
[-241.49813843 366.86221313]
[-253.54335022 377.09393311]
[-269.28854370 375.72836304]
[-279.39233398 363.57565308]
[-277.86038208 347.84576416]
[-265.60150146 337.87100220]
[-249.88871765 339.56921387]
[-238.35446167 329.97958374]
[-235.20272827 323.24441528]
[-226.48571777 320.31488037]
[-214.75825500 310.96252441]
[-211.46977234 304.29309082]
[-202.69482422 301.54196167]
[-190.77902222 292.43078613]
[-178.86320496 283.31961060]
[-166.94740295 274.20843506]
[-155.03160095 265.09725952]
[-149.62094116 251.22013855]
[-133.95854187 248.98416138]
[-122.04273224 239.87298584]
[-120.11672974 227.89256287]
[-110.21152496 220.20915222]
[-97.32852173 221.39550781]
[-85.22933960 212.52928162]
[-73.13015747 203.66307068]
[-75.85177612 191.25862122]
[-73.65117645 178.70364380]
[-66.82296753 167.88502502]
[-56.35991669 160.44238281]
[-43.80875397 157.51963806]
[-31.04157448 159.58926392]
[-19.97659111 166.37637329]
[-7.52583838 158.01104736]
[-1.27656841 144.49084473]
[14.49327183 143.21699524]
[26.94402504 134.85166931]
[39.39477921 126.48633575]
[51.84553146 118.12100220]
[64.29628754 109.75567627]
[76.74703979 101.39034271]
[94.08843231 73.23205566]
[99.75793457 59.34476852]
[105.42742920 45.45748138]
[111.09693146 31.57019424]
[116.76643372 17.68290520]
[98.48567963 13.54467773]
[84.77030945 -6.28113222]
[82.33316803 -21.08181953]
[79.89602661 -35.88250732]
[77.45887756 -50.68319321]
[75.02173615 -65.48387909]
[61.47734070 -73.29946136]
[56.17408752 -88.01032257]
[61.61602020 -102.67045593]
[75.23361206 -110.35778809]
[90.59706879 -107.44259644]
[100.45222473 -95.30134583]
[100.14577484 -79.66676331]
[89.82242584 -67.92102051]
[92.25956726 -53.12033463]
[94.69670868 -38.31964874]
[97.13385010 -23.51896095]
[99.57099152 -8.71827412]
[106.72259521 -6.45892763]
[128.17738342 0.31911147]
[138.67524719 -10.39512348]
[149.17311096 -21.10935974]
[159.67097473 -31.82359314]
[170.16883850 -42.53783035]
[174.23382568 -62.24170685]
[192.99867249 -66.75955963]
[203.05078125 -77.89306641]
[213.10289001 -89.02658081]
[223.15499878 -100.16009521]
[223.77645874 -116.19110870]
[236.78236389 -125.58397675]
[252.19569397 -121.13329315]
[258.19268799 -106.25325012]
[250.17292786 -92.35853577]
[234.28851318 -90.10798645]
[224.23640442 -78.97447205]
[214.18429565 -67.84095764]
[204.13218689 -56.70744705]
[205.56906128 -46.51647186]
[201.03517151 -37.03236771]
[191.82373047 -31.52469826]
[180.88308716 -32.03996277]
[170.38522339 -21.32572937]
[159.88734436 -10.61149406]
[149.38948059 0.10274106]
[138.89161682 10.81697655]
[130.65371704 23.35240555]
[124.98422241 37.23969269]
[119.31472015 51.12698364]
[113.64521790 65.01426697]
[107.97572327 78.90155792]
[121.63754272 72.70845795]
[133.22814941 82.22989655]
[129.80537415 96.83415985]
[115.18999481 100.21362305]
[128.12907410 107.80178833]
[141.06816101 115.38994598]
[154.08396912 122.84573364]
[167.17514038 130.16838074]
[180.26631165 137.49102783]
[193.35749817 144.81365967]
[206.44866943 152.13630676]
[222.21603394 149.17494202]
[234.26748657 159.76464844]
[233.35820007 175.78192139]
[220.18566895 184.93966675]
[204.85476685 180.21284485]
[199.12602234 165.22747803]
[186.03485107 157.90484619]
[172.94367981 150.58219910]
[159.85249329 143.25955200]
[146.76132202 135.93690491]
[139.34367371 135.41320801]
[133.47999573 128.32902527]
[120.54091644 120.74086761]
[107.60183716 113.15270996]
[112.97023773 127.15914154]
[104.66110229 139.64747620]
[89.66812897 140.10644531]
[80.61068726 128.14973450]
[85.11236572 113.84109497]
[72.66161346 122.20642853]
[60.21086121 130.57176208]
[47.76010895 138.93708801]
[35.30935669 147.30241394]
[22.85860252 155.66775513]
[15.71877098 169.78630066]
[0.83949161 170.46180725]
[-11.61126137 178.82713318]
[-9.98951244 196.27416992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[7 38]
[8 37]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 29]
[16 28]
[17 26]
[18 25]
[50 152]
[51 151]
[53 149]
[54 148]
[55 147]
[56 146]
[57 145]
[58 144]
[59 114]
[60 113]
[61 112]
[62 111]
[63 110]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[89 101]
[90 100]
[91 99]
[92 98]
[118 139]
[119 138]
[120 137]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
