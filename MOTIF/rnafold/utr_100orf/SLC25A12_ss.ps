%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGCGGGCGCGGCCGGGAAGACGGCGCGCGCGCGCCCUGACAGCUCGGCCCUGCUCGCUCACUCGCUCGUCCCCGGCUUCCGAGCACAGCAUGGCGGUCAAGGUGCAGACAACUAAGCGAGGGGAUCCUCAUGAGUUAAGAAACAUAUUUCUACAGUAUGCCAGUACUGAGGUUGAUGGAGAGCGUUAUA\
) } def
/len { sequence length } bind def

/coor [
[29.39407349 232.78610229]
[25.21360397 218.38159180]
[15.73905182 230.01055908]
[6.26450062 241.63952637]
[-3.21005106 253.26849365]
[-12.68460274 264.89746094]
[-22.15915489 276.52642822]
[-24.87739754 292.11236572]
[-38.91486359 297.09222412]
[-48.38941574 308.72119141]
[-57.86396790 320.35015869]
[-67.33851624 331.97912598]
[-76.81307220 343.60809326]
[-86.19266510 355.31378174]
[-95.47667694 367.09542847]
[-104.76068878 378.87707520]
[-114.04470062 390.65869141]
[-111.93525696 406.32159424]
[-121.58528137 418.83767700]
[-137.26959229 420.78140259]
[-149.68295288 410.99960327]
[-151.46075439 395.29562378]
[-141.54824829 382.98635864]
[-125.82633972 381.37469482]
[-116.54232788 369.59304810]
[-107.25831604 357.81140137]
[-97.97430420 346.02975464]
[-96.30116272 338.81924438]
[-88.44203949 334.13354492]
[-78.96748352 322.50457764]
[-69.49293518 310.87561035]
[-60.01838303 299.24664307]
[-50.54383087 287.61767578]
[-48.50327301 272.86349487]
[-33.78812027 267.05187988]
[-24.31357002 255.42291260]
[-14.83901787 243.79394531]
[-5.36446619 232.16497803]
[4.11008549 220.53601074]
[13.58463669 208.90704346]
[22.57824326 196.90225220]
[31.07601357 184.54151917]
[39.57378387 172.18077087]
[40.77423477 164.87667847]
[48.31182861 159.68952942]
[57.00967026 147.46875000]
[65.70751190 135.24797058]
[74.40534973 123.02717590]
[65.64422607 102.24009705]
[71.63188934 80.49134827]
[61.42078018 69.50347900]
[51.20966721 58.51561737]
[36.14756775 53.67374802]
[33.15135574 39.08361435]
[22.94024467 28.09574890]
[12.72913361 17.10788155]
[2.51802230 6.12001562]
[-15.19818115 1.12405109]
[-18.46183968 -16.11222076]
[-28.85044670 -26.93242455]
[-39.23905563 -37.75263214]
[-49.62766266 -48.57283401]
[-64.50352478 -45.01530457]
[-79.06660461 -49.35274124]
[-89.43440247 -60.32429886]
[-92.89528656 -74.91464996]
[-88.61721802 -89.18222046]
[-99.00582886 -100.00242615]
[-107.21987915 -104.03369904]
[-109.47368622 -111.08432007]
[-119.68479919 -122.07218933]
[-135.50967407 -126.37397766]
[-139.43446350 -142.29653931]
[-127.42169189 -153.46011353]
[-111.82906342 -148.38055420]
[-108.69692993 -132.28329468]
[-98.48582458 -121.29543304]
[-88.18562317 -110.39103699]
[-77.79701233 -99.57083130]
[-63.36720657 -103.26490784]
[-48.92973709 -99.21331787]
[-38.38905334 -88.40774536]
[-34.64767838 -73.68025970]
[-38.80745697 -58.96144104]
[-28.41884995 -48.14123917]
[-18.03024292 -37.32103348]
[-7.64163494 -26.50082779]
[4.45134163 -25.93819618]
[13.19512558 -16.99544334]
[13.50588894 -4.09109545]
[23.71699905 6.89677095]
[33.92811203 17.88463783]
[44.13922119 28.87250328]
[58.47095490 32.92844772]
[62.19753265 48.30450439]
[72.40864563 59.29236984]
[82.61975861 70.28023529]
[96.80519867 57.81729507]
[118.51824951 53.36378098]
[122.85060883 39.00304794]
[127.18296814 24.64231300]
[117.69178009 12.36644173]
[117.26248169 -3.14469337]
[126.06013489 -15.92674541]
[140.70187378 -21.06475449]
[155.55764771 -16.58304977]
[164.91510010 -4.20493984]
[165.17611694 11.30994034]
[156.24031067 23.99580193]
[141.54370117 28.97467422]
[137.21133423 43.33540726]
[132.87898254 57.69614029]
[145.02856445 66.49315643]
[157.31973267 57.89506531]
[169.61091614 49.29697418]
[181.90208435 40.69888306]
[181.12379456 26.92856216]
[187.20657349 14.67084408]
[198.46398926 7.08333111]
[211.89256287 6.06127548]
[223.97276306 11.76519012]
[236.40226746 3.36830187]
[248.83175659 -5.02858591]
[261.26126099 -13.42547417]
[267.94909668 -28.39894295]
[284.28616333 -29.82447433]
[293.46627808 -16.23560143]
[286.04571533 -1.61139452]
[269.65814209 -0.99598181]
[257.22863770 7.40090609]
[244.79914856 15.79779434]
[232.36965942 24.19468117]
[232.33767700 40.60347748]
[222.43675232 53.89632416]
[206.40617371 58.72157669]
[190.50016785 52.99005508]
[178.20899963 61.58814240]
[165.91783142 70.18623352]
[153.62666321 78.78432465]
[153.68769836 86.28407288]
[166.61656189 78.67852020]
[179.66764832 86.07238007]
[179.79000854 101.07188416]
[166.86128235 108.67768097]
[153.80978394 101.28357697]
[153.87081909 108.78333282]
[166.30030823 117.18021393]
[178.72981262 125.57710266]
[193.25369263 120.44260406]
[207.84545898 124.79388428]
[216.96916199 136.76141357]
[217.29254150 151.62861633]
[229.72203064 160.02549744]
[242.15153503 168.42239380]
[251.02905273 170.63850403]
[254.71347046 177.05848694]
[267.00463867 185.65657043]
[279.29580688 194.25465393]
[291.58697510 202.85275269]
[303.87814331 211.45083618]
[316.16931152 220.04893494]
[332.54473877 220.93099976]
[339.72625732 235.67405701]
[330.32617188 249.11169434]
[314.01446533 247.42044067]
[307.57122803 232.34010315]
[295.28005981 223.74200439]
[282.98889160 215.14392090]
[270.69772339 206.54582214]
[258.40655518 197.94773865]
[246.11538696 189.34965515]
[233.75463867 180.85188293]
[221.32514954 172.45498657]
[208.89566040 164.05810547]
[194.98228455 169.30749512]
[180.47415161 165.31025696]
[170.99076843 153.39729309]
[170.33291626 138.00659180]
[157.90342712 129.60971069]
[145.47393799 121.21282196]
[126.22298431 136.48178101]
[104.44023895 139.42936707]
[86.62613678 131.72502136]
[77.92829132 143.94580078]
[69.23045349 156.16659546]
[60.53261566 168.38737488]
[51.93452454 180.67854309]
[43.43675613 193.03927612]
[34.93898392 205.40002441]
[49.93894196 205.36456299]
[59.44870758 216.96475220]
[56.47203445 231.66642761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 27]
[15 26]
[16 25]
[17 24]
[41 189]
[42 188]
[43 187]
[45 186]
[46 185]
[47 184]
[48 183]
[50 97]
[51 96]
[52 95]
[54 93]
[55 92]
[56 91]
[57 90]
[59 87]
[60 86]
[61 85]
[62 84]
[67 79]
[68 78]
[70 77]
[71 76]
[99 112]
[100 111]
[101 110]
[113 139]
[114 138]
[115 137]
[116 136]
[121 132]
[122 131]
[123 130]
[124 129]
[146 180]
[147 179]
[148 178]
[152 174]
[153 173]
[154 172]
[156 171]
[157 170]
[158 169]
[159 168]
[160 167]
[161 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
