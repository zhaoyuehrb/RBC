%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCACCCCACCAUGCUCAAGCGCUGCGGCCGGCGCCUGCUGCUGGCGCUGGCGGGCGCGCUGCUCGCCUGCCUGCUGGUGCUCACCGCCGACCCGCCGCCGCCUCCACUGC\
) } def
/len { sequence length } bind def

/coor [
[58.99353027 128.48634338]
[44.88302612 133.57492065]
[30.77252197 138.66351318]
[16.66201973 143.75209045]
[6.30498600 155.71212769]
[-8.29235458 152.75123596]
[-22.40285873 157.83981323]
[-36.51336288 162.92840576]
[-50.62386703 168.01698303]
[-57.40094376 182.04228210]
[-71.78349304 187.00181580]
[-85.11270142 180.45448303]
[-99.22320557 185.54306030]
[-113.26472473 190.81903076]
[-127.23477173 196.28143311]
[-131.08251953 206.62739563]
[-139.85328674 212.95851135]
[-150.44242859 213.33676147]
[-159.26615906 207.87997437]
[-173.50712585 212.59112549]
[-187.74809265 217.30227661]
[-198.24624634 229.90071106]
[-214.35762024 226.84202576]
[-219.50820923 211.27270508]
[-208.39953613 199.20915222]
[-192.45924377 203.06130981]
[-178.21827698 198.35015869]
[-163.97731018 193.63900757]
[-152.36053467 178.27626038]
[-132.69717407 182.31138611]
[-118.72713470 176.84898376]
[-113.57767487 171.41311646]
[-104.31179047 171.43255615]
[-90.20128632 166.34397888]
[-84.11880493 152.79631042]
[-69.88124084 147.43475342]
[-55.71244812 153.90647888]
[-41.60194778 148.81790161]
[-27.49144173 143.72930908]
[-13.38093758 138.64073181]
[-4.03318310 127.04466248]
[11.57343578 129.64158630]
[25.68393898 124.55300903]
[39.79444504 119.46442413]
[53.90494919 114.37583923]
[67.64576721 108.36003876]
[80.95604706 101.44364929]
[85.42330933 87.65996552]
[98.28061676 80.97895813]
[112.12756348 85.24607086]
[125.43784332 78.32968140]
[138.74812317 71.41329956]
[152.05841064 64.49691010]
[160.73640442 51.26804352]
[175.59759521 52.26530457]
[188.90786743 45.34891510]
[202.21815491 38.43252945]
[215.52844238 31.51613998]
[228.83871460 24.59975243]
[242.14900208 17.68336487]
[255.45927429 10.76697731]
[268.67630005 3.67402411]
[281.79776001 -3.59423900]
[294.82128906 -11.03652382]
[307.74459839 -18.65151024]
[315.70623779 -32.32349014]
[330.59942627 -32.11858749]
[343.52273560 -39.73357391]
[347.58374023 -54.77172852]
[360.79827881 -62.31031036]
[375.10983276 -58.34609604]
[388.03317261 -65.96108246]
[400.95648193 -73.57606506]
[413.87979126 -81.19105530]
[415.23065186 -96.64921570]
[425.43496704 -108.33900452]
[440.56900024 -111.76546478]
[454.81341553 -105.61103821]
[462.69088745 -92.24224091]
[461.17242432 -76.79963684]
[450.84188843 -65.22123718]
[435.67156982 -61.95915985]
[421.49478149 -68.26774597]
[408.57144165 -60.65275574]
[395.64813232 -53.03776932]
[382.72482300 -45.42278290]
[379.25790405 -30.98270035]
[366.26031494 -23.07592201]
[351.13772583 -26.81026268]
[338.21441650 -19.19527626]
[331.17715454 -6.06797218]
[315.35958862 -5.72819948]
[302.43627930 1.88678777]
[298.21704102 8.07253456]
[289.06600952 9.52720737]
[275.94458008 16.79547119]
[271.56216431 22.86670685]
[262.37567139 24.07725906]
[249.06538391 30.99364662]
[235.75509644 37.91003418]
[222.44482422 44.82641983]
[209.13453674 51.74280930]
[195.82426453 58.65919495]
[182.51397705 65.57558441]
[174.78802490 78.30974579]
[158.97479248 77.80718994]
[145.66452026 84.72357941]
[132.35423279 91.63996124]
[119.04395294 98.55635071]
[114.57669067 112.34003448]
[101.71938324 119.02104187]
[87.87243652 114.75392914]
[74.56215668 121.67031860]
[87.50170135 129.25767517]
[89.90666962 144.06362915]
[80.03387451 155.35644531]
[65.03936005 154.95083618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[6 40]
[7 39]
[8 38]
[9 37]
[12 34]
[13 33]
[14 31]
[15 30]
[19 28]
[20 27]
[21 26]
[46 113]
[47 112]
[50 109]
[51 108]
[52 107]
[53 106]
[55 104]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 96]
[63 95]
[64 93]
[65 92]
[67 90]
[68 89]
[71 86]
[72 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
