%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCCCUUACGGCGCCGGAGAGAUGGCGGAGUUGGACAUCGGGCAGCACUGCCAGGUGGAGCAUUGCCGGCAGCGAGAUUUUCUUCCAUUUGUGUGUGAUGAUUGUUCAGGAAUAUUUUGCC\
) } def
/len { sequence length } bind def

/coor [
[114.84002686 139.91133118]
[101.74687958 132.59220886]
[100.13059235 117.67946625]
[93.86795807 131.30955505]
[87.60532379 144.93965149]
[93.32857513 159.67124939]
[86.88234711 174.10113525]
[72.09106445 179.66831970]
[57.73013306 173.06988525]
[52.31964493 158.22056580]
[59.06954193 143.93020630]
[73.97522736 138.67701721]
[80.23786163 125.04692078]
[86.50050354 111.41683197]
[82.74071503 96.89566803]
[70.65029144 88.01751709]
[58.55986404 79.13935852]
[46.46944046 70.26120758]
[34.37901688 61.38304901]
[18.67615700 59.45152664]
[12.99714661 45.68206406]
[0.90672219 36.80390930]
[-21.32878304 42.69906998]
[-40.68148804 30.74620819]
[-45.26092911 8.72833538]
[-58.72799683 2.12242293]
[-72.19506836 -4.48348951]
[-85.66213226 -11.08940125]
[-99.12920380 -17.69531441]
[-112.59626770 -24.30122566]
[-128.39358521 -23.43215752]
[-136.41273499 -35.98375702]
[-149.87979126 -42.58966827]
[-163.34686279 -49.19558334]
[-176.81393433 -55.80149460]
[-189.96432495 -47.73484421]
[-205.38780212 -48.08123016]
[-218.16278076 -56.73011780]
[-224.21282959 -70.92168427]
[-221.60739136 -86.12744141]
[-211.17784119 -97.49530029]
[-196.25222778 -101.39781189]
[-181.59326172 -96.58969879]
[-171.87854004 -84.60521698]
[-170.20802307 -69.26856232]
[-156.74095154 -62.66265106]
[-143.27388000 -56.05673599]
[-129.80682373 -49.45082474]
[-114.97275543 -50.79239273]
[-105.99035645 -37.76829529]
[-92.52329254 -31.16238213]
[-79.05622101 -24.55646896]
[-65.58915710 -17.95055771]
[-52.12208557 -11.34464550]
[-38.65501785 -4.73873281]
[-32.72073364 -9.93499660]
[-25.55962944 -13.30620193]
[-17.71993256 -14.57770157]
[-9.80641556 -13.63623047]
[-2.43373322 -10.53982925]
[3.82131624 -5.51449156]
[8.46491241 1.06226122]
[11.12518120 8.68971825]
[11.58194733 16.78208733]
[9.78487778 24.71348381]
[21.87530136 33.59164047]
[36.71337509 34.88813782]
[43.25717163 49.29262543]
[55.34759521 58.17078018]
[67.43801880 67.04893494]
[79.52844238 75.92709351]
[91.61886597 84.80524445]
[108.30639648 80.48229218]
[124.21488190 93.50611877]
[138.73603821 97.26590729]
[153.25718689 101.02569580]
[167.77835083 104.78548431]
[182.29951477 108.54527283]
[196.82066345 112.30506134]
[211.34182739 116.06484985]
[226.64082336 112.03359222]
[237.02243042 122.71401978]
[251.54359436 126.47380829]
[266.06475830 130.23359680]
[280.58590698 133.99337769]
[295.10705566 137.75317383]
[314.16342163 131.41528320]
[327.50799561 145.31541443]
[342.20092773 148.33488464]
[357.27612305 143.53392029]
[368.18536377 153.67481995]
[382.87829590 156.69430542]
[397.57125854 159.71377563]
[412.26419067 162.73326111]
[426.39703369 155.14099121]
[441.08728027 161.58898926]
[445.06582642 177.13088989]
[435.28067017 189.84428406]
[419.23815918 189.97654724]
[409.24472046 177.42620850]
[394.55178833 174.40672302]
[379.85882568 171.38725281]
[365.16589355 168.36776733]
[351.14163208 173.38470459]
[339.18145752 163.02783203]
[324.48849487 160.00836182]
[316.37576294 166.44747925]
[305.83279419 167.31463623]
[296.39035034 162.07336426]
[291.34725952 152.27432251]
[276.82611084 148.51454163]
[262.30496216 144.75476074]
[247.78379822 140.99496460]
[233.26264954 137.23518372]
[219.00228882 141.53535461]
[207.58203125 130.58601379]
[193.06088257 126.82621765]
[178.53971863 123.06642914]
[164.01856995 119.30664062]
[149.49740601 115.54685211]
[134.97624207 111.78706360]
[120.45509338 108.02727509]
[130.99127197 118.70383453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[21 66]
[22 65]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[32 48]
[33 47]
[34 46]
[35 45]
[74 122]
[75 121]
[76 120]
[77 119]
[78 118]
[79 117]
[80 116]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[88 106]
[89 105]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
