%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCCGCCUGCUGCAUGCAGAAGAGUGGGCUGAAGUGAAGGAGUUGGGAGACCACCAUCGCCAGCCCCAGCCGCAUCAUCUCCCGCAACCGCCGCCGC\
) } def
/len { sequence length } bind def

/coor [
[48.51893234 321.89938354]
[41.09609604 325.09524536]
[33.28451157 327.15365601]
[25.25731277 328.03002930]
[17.19227028 327.70596313]
[9.26783848 326.18960571]
[1.65921593 323.51550293]
[-5.46553326 319.74377441]
[-11.94918728 314.95874023]
[-17.64883995 309.26715088]
[-30.23313141 317.43020630]
[-42.81742477 325.59329224]
[-55.40171432 333.75634766]
[-60.13822556 349.08425903]
[-75.12721252 354.80352783]
[-88.87040710 346.52679443]
[-90.82520294 330.60327148]
[-79.49205017 319.24813843]
[-63.56477737 321.17205811]
[-50.98048782 313.00900269]
[-38.39619446 304.84591675]
[-25.81190109 296.68286133]
[-30.97328949 272.46798706]
[-24.81194115 248.43927002]
[-8.57359886 229.62425232]
[14.38304615 219.97892761]
[39.28100204 221.55598450]
[45.60852814 207.95590210]
[51.93605423 194.35580444]
[58.26357651 180.75572205]
[64.59110260 167.15562439]
[61.31676483 148.20591736]
[77.62684631 136.56265259]
[83.09661865 122.59548950]
[88.56639862 108.62832642]
[86.66234589 94.77674866]
[97.46644592 85.90190125]
[102.93621826 71.93473816]
[108.40599060 57.96757507]
[101.09699249 42.16815567]
[107.27173615 26.25114632]
[122.70500183 19.77396965]
[127.73774719 5.64345646]
[125.07913208 -9.95277214]
[136.63815308 -19.34630585]
[141.67089844 -33.47681808]
[146.70364380 -47.60733414]
[151.73640442 -61.73784637]
[156.76914978 -75.86836243]
[161.58154297 -90.07543182]
[166.17239380 -104.35562897]
[156.90432739 -116.80081177]
[156.75506592 -132.31716919]
[165.78199768 -144.93833923]
[180.51409912 -149.81124878]
[195.28654480 -145.06213379]
[204.41906738 -132.51713562]
[204.39999390 -117.00007629]
[195.23667908 -104.47756195]
[180.45259094 -99.76477051]
[175.86174011 -85.48457336]
[176.82836914 -78.02192688]
[170.89965820 -70.83560944]
[165.86691284 -56.70509720]
[160.83416748 -42.57458115]
[155.80140686 -28.44406891]
[150.76866150 -14.31355476]
[153.78724670 0.27196494]
[141.86827087 10.67620659]
[136.83551025 24.80672073]
[143.97178650 35.65824127]
[143.49249268 48.83296204]
[135.34846497 59.44783020]
[122.37315369 63.43734741]
[116.90338135 77.40451050]
[111.43360138 91.37167358]
[113.33765411 105.22325134]
[102.53355408 114.09809875]
[97.06378174 128.06526184]
[91.59400940 142.03242493]
[96.60385132 151.93734741]
[95.26071930 162.73210144]
[88.26730347 170.77239990]
[78.19119263 173.48315430]
[71.86367035 187.08323669]
[65.53614044 200.68333435]
[59.20861435 214.28341675]
[52.88109207 227.88351440]
[59.35025406 232.80499268]
[65.01536560 238.62934875]
[69.75175476 245.22698975]
[73.45540619 252.45132446]
[76.04522705 260.14199829]
[77.46484375 268.12850952]
[77.68381500 276.23388672]
[76.69828033 284.27874756]
[74.53104401 292.08514404]
[71.23102570 299.48059082]
[66.87216949 306.30178833]
[61.55177307 312.39831543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[12 20]
[13 19]
[27 88]
[28 87]
[29 86]
[30 85]
[31 84]
[33 80]
[34 79]
[35 78]
[37 76]
[38 75]
[39 74]
[42 70]
[43 69]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
