%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCCCGUGUCUCCACACGUCUGCCUCCAUCACUGCCAUCGCGAUCCUGCAGCUAUGUCCUACCCUGUGACCAGUCAGCCCCAGUGCGCCACCACCAGCUGCUACCAGACCCAGCUCAGUGACUGGCACACAGGUCUCACGGACUGCUGCAACG\
) } def
/len { sequence length } bind def

/coor [
[81.89169312 141.60359192]
[73.87470245 154.28144836]
[71.91464233 163.26324463]
[65.56645966 167.13160706]
[57.29580688 179.64544678]
[57.04616928 199.76461792]
[39.47724915 207.76014709]
[31.71718407 220.59686279]
[23.95711517 233.43359375]
[16.19704819 246.27030945]
[8.43698120 259.10702515]
[8.64790630 275.50482178]
[-5.58390856 283.65267944]
[-19.61799240 275.16876221]
[-19.01728249 258.78063965]
[-4.39973736 251.34695435]
[3.36032963 238.51023865]
[11.12039661 225.67352295]
[18.88046455 212.83680725]
[26.64053154 200.00007629]
[23.29908752 190.26953125]
[25.95060730 180.10096741]
[33.94625854 172.94706726]
[44.78196335 171.37478638]
[53.05261993 158.86094666]
[61.19685364 146.26446533]
[69.21384430 133.58660889]
[65.66172791 126.98111725]
[52.54807281 134.26342773]
[42.05210876 144.97952271]
[28.56503296 138.41456604]
[30.52409172 123.54304504]
[45.25161362 120.69499207]
[58.55749893 113.77014160]
[55.00538254 107.16465759]
[40.00842285 106.86260223]
[25.01146507 106.56053925]
[10.91602516 114.94210815]
[-3.25612903 106.69091797]
[-2.92589855 90.29509735]
[11.56700325 82.62125397]
[25.31352234 91.56358337]
[40.31048203 91.86563873]
[55.30743790 92.16769409]
[63.95636368 75.77243042]
[77.93995667 64.86622620]
[94.39015198 60.85890198]
[110.24419403 63.82569122]
[122.81179047 72.60046387]
[134.61953735 63.34968185]
[146.42729187 54.09889984]
[158.23504639 44.84811401]
[170.04280090 35.59733200]
[181.85055542 26.34654999]
[182.54580688 15.41946507]
[189.03314209 6.87409258]
[198.95536804 3.41294074]
[208.92324829 5.96056509]
[221.09391785 -2.80726552]
[233.26457214 -11.57509613]
[245.43524170 -20.34292603]
[244.65640259 -39.40563202]
[255.38267517 -55.00296021]
[273.17941284 -61.00180817]
[290.87600708 -55.17374802]
[302.49508667 -64.66043091]
[314.11413574 -74.14710999]
[325.73321533 -83.63378906]
[337.35229492 -93.12046814]
[348.97137451 -102.60715485]
[355.06781006 -119.95470428]
[372.45388794 -122.15337372]
[383.87957764 -131.87210083]
[395.30523682 -141.59083557]
[406.73092651 -151.30957031]
[418.15661621 -161.02828979]
[429.58230591 -170.74702454]
[441.00799561 -180.46575928]
[437.31488037 -191.77621460]
[437.55429077 -203.63385010]
[441.67437744 -214.71464539]
[449.19140625 -223.78956604]
[459.24636841 -229.86096191]
[470.70315552 -232.27207947]
[482.27676392 -230.77818298]
[489.51367188 -243.91696167]
[496.75054932 -257.05572510]
[492.11334229 -272.16439819]
[499.59149170 -286.08749390]
[514.74835205 -290.56472778]
[528.59161377 -282.93978882]
[532.90832520 -267.73645020]
[525.13745117 -253.97457886]
[509.88934326 -249.81884766]
[502.65243530 -236.68006897]
[495.41555786 -223.54129028]
[498.51473999 -220.45658875]
[501.20339966 -217.00816345]
[515.11871338 -222.60859680]
[529.03399658 -228.20901489]
[542.94927979 -233.80943298]
[556.86456299 -239.40985107]
[558.94305420 -254.62745667]
[568.36456299 -266.75720215]
[582.59472656 -272.53625488]
[597.80572510 -270.41006470]
[609.90588379 -260.95059204]
[615.64031982 -246.70236206]
[613.46649170 -231.49809265]
[603.96911621 -219.42764282]
[589.70300293 -213.73791504]
[574.50561523 -215.95941162]
[562.46496582 -225.49456787]
[548.54968262 -219.89414978]
[534.63439941 -214.29371643]
[520.71911621 -208.69329834]
[506.80380249 -203.09288025]
[504.26226807 -182.66476440]
[490.58786011 -167.12043762]
[470.42294312 -161.93711853]
[450.72671509 -169.04006958]
[439.30102539 -159.32135010]
[427.87533569 -149.60261536]
[416.44967651 -139.88388062]
[405.02398682 -130.16514587]
[393.59829712 -120.44641876]
[382.17260742 -110.72769165]
[380.87316895 -98.66501617]
[371.38357544 -90.47660828]
[358.45803833 -90.98807526]
[346.83898926 -81.50139618]
[335.21990967 -72.01471710]
[323.60083008 -62.52803421]
[311.98175049 -53.04135513]
[300.36267090 -43.55467606]
[303.09951782 -32.64066696]
[301.53186035 -21.44646645]
[295.85064697 -11.61493587]
[286.85351562 -4.60358763]
[275.83276367 -1.46854842]
[264.38995361 -2.70560861]
[254.20307922 -8.17225838]
[242.03240967 0.59557170]
[229.86174011 9.36340237]
[217.69107056 18.13123322]
[211.13517761 36.28655624]
[191.10133362 38.15430069]
[179.29357910 47.40508270]
[167.48582458 56.65586853]
[155.67808533 65.90665436]
[143.87033081 75.15743256]
[132.06257629 84.40821838]
[137.57492065 101.28433990]
[134.29568481 119.67998505]
[122.14353180 135.08120728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 25]
[5 24]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[35 44]
[36 43]
[37 42]
[49 152]
[50 151]
[51 150]
[52 149]
[53 148]
[54 147]
[58 145]
[59 144]
[60 143]
[61 142]
[65 135]
[66 134]
[67 133]
[68 132]
[69 131]
[70 130]
[72 127]
[73 126]
[74 125]
[75 124]
[76 123]
[77 122]
[78 121]
[85 96]
[86 95]
[87 94]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
