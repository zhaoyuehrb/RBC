%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCAGGGGGCCUGACCCGCCGCCCGCUCCGCCCCCGCCUGCCAUGGCGGCCCGCGCGCCCCCCGCCGCACCUGCGGCCGAGGAGCCGGGGAACCCGGGCGGCCCCCCGCGCAGGAAGAAGUCCCGCUCCGGCGCGUCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[65.49469757 172.84138489]
[65.16972351 157.84490967]
[64.84475708 142.84843445]
[64.51979065 127.85195160]
[70.36392975 113.91899109]
[80.08136749 104.30059052]
[91.98749542 99.88943481]
[82.90988159 87.94803619]
[73.83226776 76.00664520]
[64.75465393 64.06524658]
[55.67704010 52.12385178]
[46.59942627 40.18245697]
[37.52181244 28.24106026]
[26.58522797 27.38315392]
[18.12583160 20.75035667]
[14.82228661 10.75286865]
[17.54796028 0.81108522]
[8.99615383 -11.51233196]
[0.44434795 -23.83575058]
[-8.10745811 -36.15916824]
[-26.17663383 -35.97682190]
[-40.64566040 -46.53863525]
[-45.88657379 -63.50514221]
[-39.99941635 -80.09263611]
[-49.07703018 -92.03403473]
[-58.15464401 -103.97542572]
[-67.23225403 -115.91682434]
[-76.43869781 -127.75918579]
[-85.77288055 -139.50111389]
[-95.10707092 -151.24304199]
[-104.44125366 -162.98498535]
[-116.67131042 -171.66978455]
[-130.83338928 -176.61300659]
[-146.40563965 -168.72096252]
[-162.56227112 -174.38639832]
[-169.51618958 -189.66244507]
[-183.78204346 -194.29769897]
[-198.04788208 -198.93295288]
[-212.31373596 -203.56822205]
[-226.57958984 -208.20347595]
[-240.54576111 -200.80606079]
[-255.62731934 -205.53067017]
[-262.87664795 -219.57426453]
[-257.99285889 -234.60504150]
[-243.87341309 -241.70549011]
[-228.89511108 -236.66305542]
[-221.94433594 -222.46931458]
[-207.67848206 -217.83406067]
[-193.41262817 -213.19880676]
[-179.14678955 -208.56355286]
[-164.88093567 -203.92829895]
[-154.29046631 -211.34310913]
[-141.16740417 -211.28034973]
[-130.33085632 -203.53791809]
[-125.89015961 -190.77508545]
[-111.72808075 -185.83186340]
[-105.61305237 -190.17425537]
[-115.67153931 -201.30201721]
[-129.71157837 -206.58190918]
[-134.78935242 -220.69630432]
[-127.33074951 -233.71049500]
[-112.58567810 -236.46418762]
[-100.93274689 -227.01911926]
[-100.57438660 -212.02279663]
[-93.38300323 -198.85905457]
[-87.26797485 -203.20146179]
[-87.26797485 -218.20146179]
[-87.26797485 -233.20146179]
[-87.26797485 -248.20146179]
[-87.26797485 -263.20147705]
[-95.93167877 -277.12527466]
[-87.96754456 -291.46069336]
[-71.56839752 -291.46069336]
[-63.60427094 -277.12527466]
[-72.26797485 -263.20147705]
[-72.26797485 -248.20146179]
[-72.26797485 -233.20146179]
[-72.26797485 -218.20146179]
[-72.26797485 -203.20146179]
[-73.70029449 -191.38262939]
[-78.33358002 -181.86361694]
[-85.07802582 -175.39379883]
[-92.69932556 -172.31916809]
[-83.36513519 -160.57723999]
[-74.03095245 -148.83529663]
[-64.69676208 -137.09336853]
[-58.02287674 -133.79020691]
[-55.29085922 -124.99443817]
[-46.21324539 -113.05303955]
[-37.13563538 -101.11164856]
[-28.05801964 -89.17024994]
[-16.01050186 -91.23304749]
[-4.16710997 -87.93024445]
[5.18382454 -79.83570099]
[10.20816517 -68.45523071]
[9.88555050 -55.94670486]
[4.21595955 -44.71097183]
[12.76776505 -32.38755417]
[21.31957054 -20.06413841]
[29.87137604 -7.74072027]
[47.90533829 -0.88572049]
[49.46321106 19.16344643]
[58.54082108 31.10484314]
[67.61843872 43.04623795]
[76.69605255 54.98763275]
[85.77365875 66.92903137]
[94.85127258 78.87042999]
[103.92888641 90.81182098]
[114.70643616 101.24467468]
[126.93649292 109.92948151]
[139.16654968 118.61428070]
[151.39659119 127.29907990]
[163.62664795 135.98388672]
[179.35823059 137.66549683]
[185.25546265 151.34292603]
[197.48550415 160.02772522]
[206.36540222 162.47248840]
[209.88368225 169.03552246]
[221.92271423 177.98324585]
[236.69062805 173.22001648]
[251.42736816 178.07882690]
[260.46636963 190.69136047]
[260.33193970 206.20785522]
[251.07577515 218.66189575]
[236.25706482 223.26464844]
[221.57389832 218.24626160]
[212.67225647 205.53640747]
[212.97499084 190.02227783]
[200.93595886 181.07455444]
[188.80070496 172.25778198]
[176.57064819 163.57298279]
[161.71385193 162.51255798]
[154.94184875 148.21394348]
[142.71179199 139.52914429]
[130.48173523 130.84432983]
[118.25168610 122.15953064]
[106.02163696 113.47473145]
[99.39529419 116.98779297]
[86.14261627 124.01392365]
[79.51627350 127.52698517]
[79.84123993 142.52346802]
[80.16620636 157.51994324]
[80.49117279 172.51641846]
[83.09870911 191.72190857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 140]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[13 102]
[17 100]
[18 99]
[19 98]
[20 97]
[24 91]
[25 90]
[26 89]
[27 88]
[28 86]
[29 85]
[30 84]
[31 83]
[32 56]
[33 55]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[109 137]
[110 136]
[111 135]
[112 134]
[113 133]
[115 131]
[116 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
