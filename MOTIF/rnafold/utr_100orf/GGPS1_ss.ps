%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCAAAUCCUCGUCCGCGAGAACUGCAAGGCCCGCAAUGCCCUGCGCCUGCGUGGACCGAUUAGCUUUGAAGUUUAAAUCCAAUGGAGAAGACUCAAGAAACAGUCCAAAGAAUUCUUCUAGAACCCUAUAAAUACUUACUUCAGUUACCAGGUAAACAAGUGAGAACCAAACUUUCACAGG\
) } def
/len { sequence length } bind def

/coor [
[62.62209320 145.21862793]
[59.63303757 130.51945496]
[66.26720428 117.06627655]
[79.74954987 110.48888397]
[65.73825073 115.84457397]
[55.61027145 127.99919128]
[40.95932007 125.31610870]
[26.94802094 130.67179871]
[12.93672180 136.02749634]
[-1.07457781 141.38319397]
[-4.94374084 151.57954407]
[-13.61508465 157.82423401]
[-24.07271004 158.24385071]
[-32.84008408 152.94125366]
[-47.02516174 157.81808472]
[-61.21024323 162.69491577]
[-75.39532471 167.57174683]
[-89.58040619 172.44857788]
[-103.76548767 177.32540894]
[-117.95056915 182.20223999]
[-132.09373474 187.19934082]
[-146.19395447 192.31634521]
[-150.23570251 202.44551086]
[-159.01182556 208.54206848]
[-169.47506714 208.78402710]
[-178.15113831 203.33332825]
[-192.41699219 207.96858215]
[-206.68283081 212.60383606]
[-220.94868469 217.23908997]
[-231.68246460 228.86219788]
[-246.17778015 225.43652344]
[-260.44363403 230.07177734]
[-274.70947266 234.70703125]
[-280.39926147 249.27275085]
[-294.14529419 256.72802734]
[-309.45709229 253.55267334]
[-319.10491943 241.24601746]
[-318.53332520 225.61888123]
[-308.01223755 214.04992676]
[-292.50939941 212.00164795]
[-279.34472656 220.44119263]
[-265.07888794 215.80592346]
[-250.81303406 211.17066956]
[-241.09963989 199.87911987]
[-225.58393860 202.97325134]
[-211.31808472 198.33799744]
[-197.05224609 193.70272827]
[-182.78639221 189.06747437]
[-170.96113586 173.78550720]
[-151.31095886 178.21612549]
[-137.21072388 173.09912109]
[-131.98370361 167.84982300]
[-122.82740021 168.01716614]
[-108.64231873 163.14033508]
[-94.45723724 158.26350403]
[-80.27215576 153.38667297]
[-66.08707428 148.50984192]
[-51.90199661 143.63301086]
[-37.71691513 138.75617981]
[-26.15286064 123.27560425]
[-6.43027449 127.37189484]
[7.58102465 122.01620483]
[21.59232330 116.66050720]
[35.60362244 111.30480957]
[44.72942352 99.53327179]
[60.38255310 101.83327484]
[74.39385223 96.47757721]
[86.73480988 82.74485779]
[102.17442322 82.45195770]
[109.71115875 69.48285675]
[117.24789429 56.51375580]
[124.78462982 43.54465485]
[132.32136536 30.57555199]
[139.85809326 17.60644913]
[147.39483643 4.63734770]
[136.57635498 -5.85293722]
[128.58786011 -18.61993980]
[123.89004517 -32.91922760]
[122.75184631 -47.91825104]
[125.23509979 -62.74481201]
[131.19117737 -76.53777313]
[140.26988220 -88.49710083]
[151.94000244 -97.93024445]
[165.52046204 -104.29223633]
[180.22000122 -107.21719360]
[195.18331909 -106.53936005]
[209.54078674 -102.30247498]
[217.07752991 -115.27157593]
[224.05705261 -128.54885864]
[230.46678162 -142.11039734]
[236.87651062 -155.67193604]
[243.28623962 -169.23348999]
[249.69595337 -182.79502869]
[256.10568237 -196.35656738]
[254.16188049 -214.65722656]
[268.94586182 -224.09437561]
[275.12435913 -237.76280212]
[264.46539307 -248.56791687]
[258.43301392 -262.49539185]
[257.84310913 -277.66168213]
[262.77542114 -292.01568604]
[272.56292725 -303.61608887]
[285.88189697 -310.89404297]
[300.93112183 -312.86529541]
[315.67526245 -309.26324463]
[328.12030029 -300.57501221]
[336.58316040 -287.97564697]
[339.91931152 -273.16906738]
[337.67755127 -258.15777588]
[330.16107178 -244.97190857]
[318.38644409 -235.39476013]
[303.94601440 -230.72154236]
[288.79278564 -231.58427429]
[282.61428833 -217.91584778]
[286.59140015 -206.47663879]
[281.53744507 -195.03080750]
[269.66723633 -189.94683838]
[263.25750732 -176.38529968]
[256.84777832 -162.82376099]
[250.43804932 -149.26220703]
[244.02832031 -135.70066833]
[237.61859131 -122.13912964]
[252.42660522 -124.53133392]
[263.64596558 -114.57511902]
[263.03106689 -99.58772278]
[251.03384399 -90.58402252]
[236.47155762 -94.18119812]
[230.04663086 -107.73484039]
[222.50988770 -94.76573944]
[233.29931641 -84.38899994]
[241.29643250 -71.72384644]
[246.03269958 -57.50415039]
[247.22868347 -42.55512238]
[244.81053162 -27.74537659]
[238.91455078 -13.93648148]
[229.87944031 -1.93283474]
[218.22692871 7.56519985]
[204.63163757 14.00214958]
[189.88198853 16.99991798]
[174.83445740 16.37999725]
[160.36393738 12.17408371]
[152.82720947 25.14318657]
[145.29046631 38.11228943]
[137.75372314 51.08139038]
[130.21699524 64.05049133]
[122.68025970 77.01959229]
[115.14352417 89.98869324]
[127.97534943 82.22054291]
[138.08537292 71.13959503]
[151.55857849 64.54618835]
[166.51174927 63.36190033]
[180.85485840 67.75225830]
[192.58311462 77.10361481]
[200.05723572 90.10890198]
[202.23254395 104.95033264]
[198.80497742 119.55348206]
[190.25363159 131.87721252]
[177.77374268 140.19902039]
[163.10966492 143.35571289]
[148.31103516 140.90611267]
[135.44630432 133.19256592]
[126.31540680 121.29680634]
[114.18859100 112.46842194]
[120.59832001 126.02996063]
[127.00804901 139.59150696]
[133.41778564 153.15304565]
[139.82751465 166.71458435]
[146.23722839 180.27612305]
[161.40768433 184.06973267]
[170.54855347 196.75746155]
[169.34379578 212.34857178]
[158.36225891 223.48139954]
[142.78910828 224.89938354]
[129.97747803 215.93298340]
[125.97665405 200.81585693]
[132.67568970 186.68585205]
[126.26596832 173.12431335]
[119.85623932 159.56277466]
[113.44651031 146.00123596]
[107.03678131 132.43969727]
[100.62705231 118.87815094]
[105.80953217 132.95443726]
[101.29110718 147.25772095]
[88.96268463 155.80230713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[7 64]
[8 63]
[9 62]
[10 61]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 51]
[22 50]
[26 48]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[33 41]
[69 147]
[70 146]
[71 145]
[72 144]
[73 143]
[74 142]
[75 141]
[87 129]
[88 128]
[89 122]
[90 121]
[91 120]
[92 119]
[93 118]
[94 117]
[96 114]
[97 113]
[163 181]
[164 180]
[165 179]
[166 178]
[167 177]
[168 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
