%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGCCGCGCUCCUCAUCUGCCCCGCGCCGAGCGCCGCCGCCGCCGCCGCCGCCGCCGCUCCGCUGCCCGCGCCGCCCGCGGCUCCCGAUGGAGACUGACGCGCCCCAGCCCGGCCUCGCCUCCCCGGACUCGCCGCACGACCCCUGCAAGAUGUUCAUCGGGGGACUCAGUUGGCAGACUACGCAGG\
) } def
/len { sequence length } bind def

/coor [
[92.67283630 351.34375000]
[80.66699982 361.62164307]
[64.91668701 360.31655884]
[54.76628494 348.20272827]
[56.23784256 332.46707153]
[68.45831299 322.44531250]
[69.69699860 307.49655151]
[70.81206512 292.53805542]
[71.80342102 277.57086182]
[72.79478455 262.60363770]
[63.55230331 257.87570190]
[56.38970184 250.30795288]
[52.14582825 240.74960327]
[51.33004761 230.28494263]
[54.06123734 220.11044312]
[60.05127335 211.39796448]
[68.63518524 205.15977478]
[78.84491730 202.13093567]
[80.82330322 187.26196289]
[82.80168915 172.39300537]
[84.78006744 157.52404785]
[86.75845337 142.65509033]
[88.73683167 127.78612518]
[73.99050903 119.79502106]
[64.84671021 104.07519531]
[65.21434021 84.47713470]
[50.21639252 84.72514343]
[35.22100449 85.09713745]
[20.22920609 85.59308624]
[6.69240093 93.78244019]
[-6.28373384 86.47017670]
[-21.27553177 86.96612549]
[-36.26733017 87.46207428]
[-51.25912857 87.95802307]
[-66.25093079 88.45397186]
[-72.08203125 91.63119507]
[-77.78329468 91.40678406]
[-81.74482727 88.71018219]
[-96.74482727 88.71018219]
[-110.54499817 96.44748688]
[-123.27227020 88.71018219]
[-138.27227783 88.71018219]
[-152.07244873 96.44748688]
[-164.79971313 88.71018219]
[-179.79971313 88.71018219]
[-193.72352600 97.37388611]
[-208.05895996 89.40975952]
[-208.05895996 73.01061249]
[-193.72352600 65.04648590]
[-179.79971313 73.71018219]
[-164.79971313 73.71018219]
[-152.07244873 65.97288513]
[-138.27227783 73.71018219]
[-123.27227020 73.71018219]
[-110.54499817 65.97288513]
[-96.74482727 73.71018219]
[-81.74482727 73.71018219]
[-66.74687958 73.46217346]
[-51.75508118 72.96622467]
[-36.76328278 72.47027588]
[-21.77148247 71.97432709]
[-6.77968454 71.47837067]
[5.68480778 63.32449722]
[19.73325539 70.60128784]
[34.72505569 70.10533905]
[41.31816101 66.73587036]
[49.96838379 69.72719574]
[64.96633148 69.47918701]
[71.66546631 56.05824280]
[62.84868622 43.92298889]
[54.03190613 31.78773499]
[45.21512985 19.65247917]
[36.39834976 7.51722479]
[20.84151649 3.59747052]
[14.33803082 -11.06828022]
[21.87681198 -25.22971916]
[37.67475128 -28.02340126]
[49.61302185 -17.30625343]
[48.53360367 -1.29955387]
[57.35038376 10.83570099]
[66.16716003 22.97095680]
[74.98394012 35.10621262]
[83.80072021 47.24146652]
[98.55329895 49.95467377]
[111.11079407 41.75045013]
[123.66828918 33.54623032]
[136.22578430 25.34200668]
[148.78327942 17.13778496]
[161.34077454 8.93356228]
[173.89828491 0.72933954]
[186.45578003 -7.47488260]
[199.01327515 -15.67910480]
[211.57077026 -23.88332748]
[224.12826538 -32.08755112]
[221.08541870 -46.01078033]
[222.97685242 -60.10641479]
[229.55488586 -72.68198395]
[240.01031494 -82.23456573]
[253.07199097 -87.63040924]
[267.16128540 -88.23946381]
[280.58285522 -84.00886536]
[291.72875977 -75.46687317]
[304.42016602 -83.46234894]
[317.11160278 -91.45782471]
[313.16159058 -106.76647949]
[314.13153076 -122.52728271]
[319.91464233 -137.19992065]
[329.93429565 -149.35414124]
[343.20153809 -157.80917358]
[358.41268921 -161.74839783]
[374.07739258 -160.79826355]
[388.66479492 -155.06367493]
[400.75286865 -145.11647034]
[413.31039429 -153.32069397]
[425.86788940 -161.52491760]
[438.42538452 -169.72914124]
[437.68533325 -185.00656128]
[444.64562988 -198.51399231]
[457.34802246 -206.66973877]
[472.32696533 -207.36769104]
[485.55499268 -200.52046204]
[498.11251831 -208.72468567]
[502.79879761 -224.06803894]
[517.76898193 -229.83633423]
[531.53918457 -221.60464478]
[533.54614258 -205.68762207]
[522.25024414 -194.29542542]
[506.31671143 -196.16719055]
[493.75921631 -187.96296692]
[494.71609497 -173.09858704]
[488.05993652 -159.66163635]
[475.48864746 -151.30525208]
[460.32296753 -150.35705566]
[446.62960815 -157.17164612]
[434.07211304 -148.96742249]
[421.51458740 -140.76319885]
[408.95709229 -132.55897522]
[413.02453613 -118.88800049]
[413.07153320 -104.60892487]
[409.08529663 -90.88087463]
[401.38082886 -78.82077789]
[390.57595825 -69.41249084]
[377.54193115 -63.42654419]
[363.33306885 -61.35702515]
[349.10153198 -63.38082123]
[336.00387573 -69.34254456]
[325.10708618 -78.76639557]
[312.41564941 -70.77091980]
[299.72421265 -62.77544403]
[302.63748169 -47.20697021]
[299.34893799 -31.67405319]
[290.33261108 -18.55853271]
[276.94326782 -9.88312054]
[261.21261597 -6.99948835]
[245.54132080 -10.37773705]
[232.33248901 -19.53005219]
[219.77499390 -11.32583046]
[207.21749878 -3.12160802]
[194.66000366 5.08261442]
[182.10250854 13.28683662]
[169.54499817 21.49105835]
[156.98750305 29.69528198]
[144.43000793 37.89950562]
[131.87251282 46.10372543]
[119.31501770 54.30794907]
[106.75751495 62.51217270]
[117.64062500 67.25901031]
[126.28557587 74.97962952]
[131.94392395 84.77021027]
[134.20091248 95.56227112]
[133.00210571 106.23822784]
[128.64212036 115.74691772]
[121.71807098 123.20707703]
[113.05402374 127.98867035]
[103.60579681 129.76451111]
[101.62741089 144.63346863]
[99.64903259 159.50242615]
[97.67064667 174.37138367]
[95.69226074 189.24035645]
[93.71388245 204.10931396]
[108.90296173 217.07759094]
[113.17341614 236.44052124]
[104.96823120 254.33329773]
[87.76198578 263.59500122]
[86.77062988 278.56222534]
[85.77926636 293.52941895]
[88.33799744 302.31732178]
[84.64576721 308.73526001]
[83.40708160 323.68402100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 189]
[7 188]
[8 186]
[9 185]
[10 184]
[18 180]
[19 179]
[20 178]
[21 177]
[22 176]
[23 175]
[26 68]
[27 67]
[28 65]
[29 64]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[38 57]
[39 56]
[41 54]
[42 53]
[44 51]
[45 50]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[84 166]
[85 165]
[86 164]
[87 163]
[88 162]
[89 161]
[90 160]
[91 159]
[92 158]
[93 157]
[94 156]
[102 149]
[103 148]
[104 147]
[113 137]
[114 136]
[115 135]
[116 134]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
