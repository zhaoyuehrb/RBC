%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCACUUCCGUCCAGACCGGAACCCAAGAUGGCUGCGCUGUUGCUGAGACACGUUGGUCGUCAUUGCCUCCGAGCCCACUUUAGCCCUCAGCUCUGUAUCAGAAAUGCUGUUCCUUUGGGAACCACGG\
) } def
/len { sequence length } bind def

/coor [
[59.09621048 138.25830078]
[47.02470016 147.16215515]
[35.06082153 156.21011353]
[23.20629311 165.40087891]
[11.35176277 174.59164429]
[-0.50276661 183.78240967]
[-12.24624157 193.11465454]
[-23.87697411 202.58703613]
[-35.50770569 212.05941772]
[-34.32854462 228.88499451]
[-43.29046249 242.97811890]
[-58.71897507 248.92713928]
[-74.50319672 244.58660889]
[-85.90344238 254.33515930]
[-97.30368805 264.08370972]
[-99.98130035 279.90176392]
[-114.08700562 287.54431152]
[-128.80010986 281.14868164]
[-132.83398438 265.62103271]
[-123.09418488 252.87287903]
[-107.05224609 252.68347168]
[-95.65200043 242.93492126]
[-84.25175476 233.18635559]
[-86.53576660 219.97683716]
[-81.93381500 207.27043152]
[-71.55532074 198.44638062]
[-58.06074524 195.90795898]
[-44.98009109 200.42868042]
[-33.34935760 190.95629883]
[-21.71862602 181.48391724]
[-18.48681831 174.75390625]
[-9.69353008 171.92787170]
[2.16099977 162.73712158]
[14.01552963 153.54635620]
[25.87005997 144.35559082]
[29.26231766 137.70500183]
[38.12084579 135.09065247]
[50.19235229 126.18679047]
[92.55239105 81.93737030]
[93.27156830 66.95462036]
[93.99073792 51.97187042]
[94.70991516 36.98912048]
[82.72480774 24.31190109]
[83.55020905 7.22250462]
[96.19422913 -3.79830170]
[96.55392456 -18.79398918]
[96.91361237 -33.78967667]
[97.27330017 -48.78536224]
[97.63298798 -63.78104782]
[97.99268341 -78.77673340]
[83.48384094 -86.03654480]
[73.60961151 -98.83627319]
[70.29412842 -114.59919739]
[74.14751434 -130.17959595]
[84.35437775 -142.49057007]
[98.84570312 -149.11553955]
[98.84570312 -164.11553955]
[98.84570312 -179.11553955]
[98.84570312 -194.11553955]
[87.95114899 -205.24865723]
[88.16483307 -220.46080017]
[98.84570312 -230.77847290]
[98.84570312 -245.77847290]
[90.18199921 -259.70227051]
[98.14613342 -274.03771973]
[114.54528046 -274.03771973]
[122.50940704 -259.70227051]
[113.84570312 -245.77847290]
[113.84570312 -230.77847290]
[124.52657318 -220.46080017]
[124.74025726 -205.24865723]
[113.84570312 -194.11553955]
[113.84570312 -179.11553955]
[113.84570312 -164.11553955]
[113.84570312 -149.11553955]
[126.67022705 -143.69030762]
[136.47616577 -133.74261475]
[141.74948120 -120.76106262]
[141.65791321 -106.70618439]
[136.18215942 -93.71437836]
[126.12384796 -83.77313995]
[112.98836517 -78.41704559]
[112.62867737 -63.42136002]
[112.26898956 -48.42567062]
[111.90929413 -33.42998505]
[111.54960632 -18.43429947]
[111.18991852 -3.43861175]
[121.33421326 4.59939671]
[125.02194977 17.20922852]
[120.68015289 29.81570816]
[109.69266510 37.70829391]
[108.97348785 52.69104385]
[108.25431824 67.67378998]
[107.53514099 82.65653992]
[117.41969299 93.93907928]
[132.36688232 95.19664001]
[147.31408691 96.45419312]
[162.26127625 97.71175385]
[178.55154419 93.01461029]
[187.57472229 107.36795807]
[176.28018188 120.01190186]
[161.00370789 112.65894318]
[146.05651855 111.40139008]
[131.10932922 110.14382935]
[116.16213989 108.88626862]
[112.38620758 115.36642456]
[125.34650421 122.91828156]
[138.30668640 130.47035217]
[130.75442505 143.43041992]
[117.79464722 135.87858582]
[104.83434296 128.32672119]
[101.05841827 134.80686951]
[109.52236176 147.19079590]
[117.98631287 159.57472229]
[126.45026398 171.95864868]
[134.91421509 184.34257507]
[149.92361450 190.94938660]
[151.43742371 207.27850342]
[137.89837646 216.53195190]
[123.23426819 209.19055176]
[122.53028870 192.80651855]
[114.06633759 180.42259216]
[105.60238647 168.03866577]
[97.13844299 155.65473938]
[88.67449188 143.27082825]
[81.27992249 142.01768494]
[86.50408936 156.07856750]
[76.93917847 167.63331604]
[62.14999390 165.12733459]
[56.92556381 151.06655884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 35]
[4 34]
[5 33]
[6 32]
[7 30]
[8 29]
[9 28]
[13 23]
[14 22]
[15 21]
[39 94]
[40 93]
[41 92]
[42 91]
[45 87]
[46 86]
[47 85]
[48 84]
[49 83]
[50 82]
[56 75]
[57 74]
[58 73]
[59 72]
[62 69]
[63 68]
[95 105]
[96 104]
[97 103]
[98 102]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
