%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:38:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGCCGGGCGCGGGCCCCGGGCGAUGGCCGCGGAGCUGGCGAUGGGCGCCGAGCUGCCCAGCAGCCCGCUGGCCAUCGAGUACGUCAACGACUUCGACCUGAUGAAGUUCGAGGUGAAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[97.47352600 115.87670135]
[88.47760773 127.87976074]
[86.39268494 143.56298828]
[72.56836700 149.10713196]
[63.57245636 161.11019897]
[54.57654190 173.11326599]
[53.94151306 178.51327515]
[51.48700714 182.66213989]
[48.02408218 185.06616211]
[44.44152451 185.63952637]
[34.58042908 196.94256592]
[24.71933365 208.24560547]
[22.09415245 224.43327332]
[6.66868687 229.99987793]
[-5.68866587 219.21897888]
[-2.26572108 203.18103027]
[13.41628933 198.38452148]
[23.27738380 187.08146667]
[33.13847733 175.77842712]
[42.57347870 164.11734009]
[51.56939316 152.11428833]
[60.56530762 140.11122131]
[62.00678253 125.28652954]
[76.47454834 118.88385010]
[85.47046661 106.88078308]
[86.39750671 91.90946198]
[78.95112610 78.88826752]
[71.50474548 65.86707306]
[64.05837250 52.84588242]
[56.61199188 39.82469177]
[49.16561127 26.80349922]
[41.71923065 13.78230762]
[34.11237335 0.85421032]
[26.34620094 -11.97881603]
[18.58002853 -24.81184196]
[10.81385517 -37.64486694]
[3.61461806 -43.44451904]
[3.01883125 -50.89275742]
[-4.42754793 -63.91395187]
[-11.87392712 -76.93514252]
[-18.92751122 -82.91108704]
[-19.33888817 -90.37178802]
[-26.46091652 -103.57317352]
[-32.02272415 -107.46166229]
[-34.35298157 -112.79401398]
[-33.59029770 -117.60826111]
[-40.05075455 -131.14570618]
[-46.51121140 -144.68315125]
[-52.97166824 -158.22059631]
[-59.43212509 -171.75805664]
[-66.05952454 -185.21455383]
[-72.85284424 -198.58807373]
[-85.41691589 -209.97140503]
[-77.95652771 -225.19569397]
[-61.26196671 -222.24136353]
[-59.47933197 -205.38139343]
[-52.68601227 -192.00787354]
[-46.78838730 -187.41993713]
[-45.89467621 -178.21850586]
[-39.43421936 -164.68106079]
[-32.97376251 -151.14361572]
[-26.51330566 -137.60617065]
[-20.05284882 -124.06871796]
[-13.25952721 -110.69520569]
[-6.13749743 -97.49381256]
[1.14726424 -84.38152313]
[8.59364319 -71.36032867]
[16.04002380 -58.33913803]
[23.64688110 -45.41104126]
[31.41305351 -32.57801437]
[39.17922592 -19.74498940]
[46.94540024 -6.91196251]
[53.16695404 -2.77391052]
[54.74042511 6.33592892]
[62.18680191 19.35712051]
[69.63317871 32.37831116]
[77.07955933 45.39950562]
[84.52593994 58.42069626]
[91.97232056 71.44188690]
[99.41870117 84.46308136]
[92.31307983 71.25284576]
[90.76038361 56.33342743]
[94.99354553 41.94314194]
[104.37748718 30.24093246]
[117.50434875 22.98245430]
[132.40473938 21.25667763]
[146.84320068 25.32251930]
[158.65353394 34.56999207]
[166.06390381 47.61171341]
[167.96252441 62.49106979]
[164.06454468 76.97574615]
[154.95480347 88.89263916]
[141.99996948 96.45388794]
[127.14124298 98.52495575]
[140.06933594 106.13181305]
[152.99743652 113.73867035]
[165.92553711 121.34552765]
[178.85363770 128.95239258]
[191.78172302 136.55924988]
[204.70982361 144.16610718]
[220.52758789 144.49592590]
[227.57312012 157.61880493]
[240.50122070 165.22566223]
[256.32949829 162.60942078]
[268.14675903 173.45985413]
[266.88781738 189.45343018]
[253.51838684 198.32125854]
[238.29438782 193.26068115]
[232.89436340 178.15376282]
[219.96626282 170.54690552]
[205.07319641 170.76116943]
[197.10296631 157.09420776]
[184.17486572 149.48735046]
[171.24678040 141.88049316]
[158.31867981 134.27362061]
[145.39057922 126.66677094]
[132.46247864 119.05991364]
[119.53438568 111.45305634]
[127.23293304 124.32675934]
[137.53466797 135.22972107]
[139.75393677 150.06463623]
[133.09393311 163.50503540]
[119.94592285 170.72512817]
[105.03070068 169.13255310]
[93.70359802 159.29910278]
[90.03160095 144.75549316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[4 22]
[5 21]
[6 20]
[10 19]
[11 18]
[12 17]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[33 72]
[34 71]
[35 70]
[36 69]
[38 68]
[39 67]
[40 66]
[42 65]
[43 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 57]
[52 56]
[94 118]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
