%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUCAUAUAUAAACAAGGGAUCACUUUCCUACAAAAGGAGAAUAACAAUACAAUUCACCUAAAUACCAUGUUUUUUCUCUCCCCUGCAGAAACUCAUC\
) } def
/len { sequence length } bind def

/coor [
[127.95687866 183.28350830]
[119.03065491 185.76458740]
[109.89278412 187.29182434]
[100.64488220 187.84823608]
[91.38981628 187.42764282]
[82.23050690 186.03472900]
[73.26882172 183.68496704]
[64.60442352 180.40449524]
[56.33368683 176.22979736]
[48.54858398 171.20730591]
[41.33570480 165.39288330]
[34.77526093 158.85119629]
[28.94021797 151.65498352]
[23.89547157 143.88427734]
[19.69712639 135.62551880]
[16.39187431 126.97055054]
[14.01647568 118.01562500]
[12.59734821 108.86034393]
[-2.40083814 109.09362030]
[-17.39902496 109.32689667]
[-32.39720917 109.56017303]
[-47.39539719 109.79344940]
[-59.54923248 120.26550293]
[-75.28706360 117.15099335]
[-82.53617859 102.83911133]
[-75.73567200 88.30870819]
[-60.10231018 84.70626068]
[-47.62867355 94.79526520]
[-32.63048553 94.56198883]
[-17.63230133 94.32871246]
[-2.63411522 94.09543610]
[12.36407089 93.86215210]
[17.81170845 68.97075653]
[30.17348671 46.68970871]
[48.40946198 28.89342117]
[70.98551941 17.07901764]
[96.00244141 12.24039268]
[121.35565948 14.78459549]
[144.91232300 24.49759483]
[153.65342712 12.30772686]
[162.39454651 0.11785815]
[171.13566589 -12.07201099]
[179.87678528 -24.26187897]
[188.61788940 -36.45174789]
[189.92149353 -54.73692322]
[206.03178406 -61.50154114]
[214.38957214 -73.95735931]
[222.74736023 -86.41317749]
[231.10513306 -98.86900330]
[221.29429626 -110.34288025]
[214.94392395 -124.03869629]
[212.52528381 -138.94012451]
[214.21781921 -153.94139099]
[219.89595032 -167.92929077]
[229.13833618 -179.86582947]
[241.25910950 -188.86524963]
[255.35884094 -194.25971985]
[270.39123535 -195.64892578]
[285.24075317 -192.92980957]
[298.80554199 -186.30412292]
[310.07891846 -176.26354980]
[318.22439575 -163.55314636]
[322.63745117 -149.11613464]
[322.99066162 -134.02383423]
[319.25781250 -119.39617157]
[311.71588135 -106.31863403]
[300.92456055 -95.76166534]
[287.68460083 -88.50864410]
[272.97851562 -85.09780884]
[257.89761353 -85.78226471]
[243.56095886 -90.51121521]
[235.20317078 -78.05539703]
[226.84539795 -65.59957886]
[218.48760986 -53.14375687]
[220.50360107 -41.10408401]
[213.49142456 -30.62295723]
[200.80776978 -27.71063232]
[192.06665039 -15.52076340]
[183.32553101 -3.33089495]
[174.58441162 8.85897350]
[165.84330750 21.04884148]
[157.10218811 33.23871231]
[163.81542969 39.62350845]
[169.81893921 46.67978287]
[175.04595947 54.32906342]
[179.43833923 62.48627853]
[182.94725037 71.06069946]
[185.53366089 79.95697784]
[187.16879272 89.07615662]
[187.83448792 98.31683350]
[187.52331543 107.57622528]
[186.23873901 116.75136566]
[183.99507141 125.74019623]
[180.81723022 134.44276428]
[176.74058533 142.76226807]
[171.81047058 150.60618591]
[166.08171082 157.88728333]
[159.61801147 164.52458191]
[152.49125671 170.44427490]
[144.78073120 175.58052063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[44 77]
[46 74]
[47 73]
[48 72]
[49 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
