%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCCCCCAGAUCACCAUGGCCAUGGCCAAGGCCAGAAAGCCCCGGGAGGCAUUGCUCUGGGCCUUGAGUGACCUUGAGGAGAACGAUUUCAAGAAGUUAAAGUUCUACUUACGGG\
) } def
/len { sequence length } bind def

/coor [
[102.22380066 185.41113281]
[92.41068268 197.58639526]
[77.05740356 200.55468750]
[63.41330719 192.91448975]
[57.92072296 178.27325439]
[63.17307663 163.54414368]
[76.69036865 155.68177795]
[79.07632446 140.87275696]
[81.46227264 126.06372833]
[78.67805481 119.09967041]
[69.48435974 130.95191956]
[60.29066849 142.80418396]
[49.82842255 153.55320740]
[34.92773438 151.82998657]
[27.19500542 138.97677612]
[32.65339661 125.00516510]
[47.05104446 120.79784393]
[60.90460587 115.04641724]
[74.75816345 109.29499817]
[71.97394562 102.33093262]
[57.05892563 100.73653412]
[42.14390182 99.14212799]
[27.99564552 111.58872223]
[9.54440022 109.90399170]
[-1.72471178 95.59701538]
[-16.70345306 94.79868317]
[-31.68219185 94.00035095]
[-46.66093445 93.20201874]
[-61.02610397 101.11238861]
[-74.91735077 92.39658356]
[-74.04455566 76.02067566]
[-59.30556870 68.83080292]
[-45.86260223 78.22328186]
[-30.88385963 79.02161407]
[-15.90511990 79.81994629]
[-0.92637914 80.61827850]
[5.80774975 71.22440338]
[16.37429237 66.24986267]
[28.14599037 67.06144714]
[38.13211823 73.57079315]
[43.73830414 84.22711182]
[58.65332794 85.82151031]
[73.56835175 87.41591644]
[83.14201355 75.86840057]
[78.81163025 61.50707245]
[67.41976929 50.52817917]
[71.15337372 36.10911179]
[66.82299042 21.74778175]
[62.49261475 7.38645172]
[58.16223526 -6.97487879]
[44.11975098 -14.22636986]
[39.39745712 -29.30866051]
[46.79700851 -43.27369308]
[61.92838287 -47.83626556]
[75.81439972 -40.28948212]
[80.21674347 -25.11071396]
[72.52356720 -11.30525780]
[76.85394287 3.05607271]
[81.18432617 17.41740417]
[85.51470184 31.77873421]
[96.59682465 41.73040771]
[93.17296600 57.17669296]
[97.50334167 71.53802490]
[112.16439056 74.70876312]
[122.04206085 63.42020035]
[131.91973877 52.13164139]
[141.79740906 40.84307861]
[151.67507935 29.55451775]
[161.55274963 18.26595497]
[171.43041992 6.97739410]
[174.07934570 -9.20639992]
[189.51296997 -14.75035954]
[201.85449219 -3.95133424]
[198.40800476 12.08156490]
[182.71897888 16.85506439]
[172.84130859 28.14362717]
[162.96363831 39.43218613]
[153.08596802 50.72074890]
[143.20829773 62.00931168]
[133.33062744 73.29787445]
[123.45295715 84.58643341]
[127.20650482 99.10920715]
[141.31701660 104.19778442]
[155.42752075 109.28636932]
[169.53802490 114.37495422]
[183.64852905 119.46353912]
[193.11543274 107.64590454]
[205.90791321 99.54460144]
[220.63832092 96.03837585]
[235.70883179 97.50757599]
[249.48469543 103.79282379]
[260.47161865 114.21234131]
[267.47781372 127.63590240]
[269.74328613 142.60742188]
[267.02233887 157.50289917]
[259.61007690 170.70657349]
[248.31053162 180.78622437]
[234.34942627 186.64848328]
[219.24111938 187.65744019]
[204.62446594 183.70367432]
[192.08497620 175.21604919]
[182.98283386 163.11523438]
[178.30535889 148.71385193]
[178.55993652 133.57403564]
[164.44943237 128.48545837]
[150.33892822 123.39687347]
[136.22842407 118.30828857]
[122.11792755 113.21971130]
[115.65626526 117.02719879]
[128.71264648 124.41172028]
[128.84553528 139.41113281]
[115.92206573 147.02583313]
[102.86585236 139.64103699]
[102.73295593 124.64218903]
[96.27130127 128.44967651]
[93.88535309 143.25871277]
[91.49939728 158.06773376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 117]
[8 116]
[9 115]
[20 43]
[21 42]
[22 41]
[25 36]
[26 35]
[27 34]
[28 33]
[44 63]
[45 62]
[47 60]
[48 59]
[49 58]
[50 57]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
