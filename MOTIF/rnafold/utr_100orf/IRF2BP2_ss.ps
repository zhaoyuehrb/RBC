%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:18:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCUCCGGCGUCGCGGGCUCCUCGGACAUGGCCGCGGCGGUGGCGGUGGCGGCCGCGUCCCGGCGGCAGUCGUGCUACCUGUGUGACCUGCCCCGCAUGCCCUGGGCCAUGAUCUGGGACUUCACCG\
) } def
/len { sequence length } bind def

/coor [
[11.86559010 572.75372314]
[-2.06321788 578.32043457]
[-17.05076599 578.93151855]
[-31.38652611 574.51721191]
[-43.43436050 565.58135986]
[-51.81925201 553.14379883]
[-55.58423233 538.62396240]
[-54.29896545 523.67663574]
[-63.84931946 535.24340820]
[-73.39967346 546.81024170]
[-82.95002747 558.37701416]
[-81.19842529 574.08392334]
[-91.13144684 586.37664795]
[-106.85601044 587.96209717]
[-119.04300690 577.89965820]
[-120.46211243 562.15924072]
[-110.27139282 550.07928467]
[-94.51682281 548.82666016]
[-84.96646881 537.25988770]
[-75.41611481 525.69311523]
[-65.86576080 514.12628174]
[-64.80173492 505.53439331]
[-57.45664597 499.15255737]
[-52.55062866 484.97753906]
[-47.64460754 470.80252075]
[-48.43750000 463.38049316]
[-42.44949341 456.35095215]
[-37.20753098 442.29672241]
[-31.96556664 428.24246216]
[-26.72360420 414.18823242]
[-21.64925385 400.07260132]
[-16.74323463 385.89758301]
[-11.83721447 371.72256470]
[-6.93119526 357.54754639]
[-2.02517581 343.37255859]
[2.88084364 329.19754028]
[7.78686333 315.02252197]
[6.99397135 307.60049438]
[12.98198032 300.57095337]
[18.22394180 286.51669312]
[23.46590614 272.46246338]
[22.84986496 265.02365112]
[29.00346565 258.13861084]
[34.57840347 244.21308899]
[40.15333939 230.28756714]
[36.68673325 213.12684631]
[51.14471817 201.79606628]
[56.38668060 187.74182129]
[61.62864304 173.68757629]
[66.87060547 159.63333130]
[66.25456238 152.19453430]
[72.40816498 145.30947876]
[77.98310089 131.38395691]
[83.55803680 117.45844269]
[89.13297272 103.53292084]
[91.09086609 88.66124725]
[89.31008148 73.76732635]
[87.52929688 58.87341309]
[85.74851227 43.97949219]
[83.96772003 29.08557510]
[71.39134216 19.51425171]
[69.34926605 3.84244609]
[79.05302429 -8.63203621]
[94.74554443 -10.50830650]
[107.11672974 -0.67320704]
[108.82698822 15.03827190]
[98.86164093 27.30478859]
[100.64242554 42.19870758]
[102.42321777 57.09262466]
[104.20400238 71.98654175]
[105.98478699 86.88046265]
[113.10098267 89.24896240]
[134.44956970 96.35444641]
[144.80075073 85.49843597]
[155.15193176 74.64242554]
[165.50311279 63.78641891]
[175.85430908 52.93040848]
[186.20549011 42.07439804]
[196.55667114 31.21838570]
[197.61389160 15.21020508]
[210.87043762 6.17452621]
[226.15702820 11.04274845]
[231.74710083 26.08038902]
[223.35243225 39.75185776]
[207.41268921 41.56957245]
[197.06149292 52.42558289]
[186.71031189 63.28159332]
[176.35913086 74.13760376]
[166.00794983 84.99361420]
[155.65675354 95.84962463]
[145.30557251 106.70563507]
[121.24429321 117.78085327]
[103.05849457 109.10785675]
[97.48355865 123.03337860]
[91.90862274 136.95889282]
[86.33368683 150.88441467]
[80.92485046 164.87528992]
[75.68288422 178.92953491]
[70.44092560 192.98377991]
[65.19895935 207.03802490]
[69.84789276 219.13737488]
[65.11975098 230.77301025]
[54.07885742 235.86251831]
[48.50392151 249.78802490]
[42.92898560 263.71356201]
[37.52014923 277.70443726]
[32.27818680 291.75866699]
[27.03622627 305.81292725]
[21.96187592 319.92852783]
[17.05585670 334.10354614]
[12.14983654 348.27856445]
[7.24381685 362.45358276]
[2.33779764 376.62860107]
[-2.56822181 390.80361938]
[-7.47424126 404.97860718]
[-7.33241129 414.21173096]
[-12.66935825 419.43017578]
[-17.91132164 433.48443604]
[-23.15328407 447.53866577]
[-28.39524651 461.59292603]
[-33.46959686 475.70855713]
[-38.37561417 489.88357544]
[-43.28163528 504.05859375]
[-31.18958473 495.18264771]
[-16.83208656 490.83956909]
[-1.84775686 491.52505493]
[12.05324173 497.16085815]
[23.28439140 507.10375977]
[30.56388283 520.21899414]
[33.06090927 535.00970459]
[30.49048042 549.78778076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 21]
[9 20]
[10 19]
[11 18]
[23 123]
[24 122]
[25 121]
[27 120]
[28 119]
[29 118]
[30 117]
[31 115]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[37 109]
[39 108]
[40 107]
[41 106]
[43 105]
[44 104]
[45 103]
[47 100]
[48 99]
[49 98]
[50 97]
[52 96]
[53 95]
[54 94]
[55 93]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
