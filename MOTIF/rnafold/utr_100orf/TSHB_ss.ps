%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCACCACAGCAUCUGCUCACCAAUGCAAAGUAAGCAUGACUGCUCUCUUUCUGAUGUCCAUGCUUUUUGGCCUUACAUGUGGGCAAGCGAUGUCUUUUUGUAUUCCAACUGAGUAUACAAUGCACAUCGAAAGGA\
) } def
/len { sequence length } bind def

/coor [
[103.38436890 120.71854401]
[100.35417938 135.40928650]
[106.02647400 150.79620361]
[95.33060455 163.22723389]
[79.26956177 159.91439819]
[74.36557007 144.26565552]
[85.66343689 132.37910461]
[88.69362640 117.68835449]
[86.56684875 116.13265228]
[84.65171051 114.32278442]
[82.97837830 112.28725433]
[68.48220825 116.14224243]
[53.98603439 119.99723053]
[39.48986053 123.85222626]
[25.03817558 127.87078094]
[10.63282490 132.05238342]
[-3.72435236 136.39651489]
[-18.03152275 140.90261841]
[-32.33869171 145.40870667]
[-46.64586258 149.91481018]
[-57.48428726 161.44039917]
[-71.94803619 157.88381958]
[-86.25520325 162.38992310]
[-90.21255493 177.30108643]
[-101.61866760 187.68878174]
[-116.83390808 190.23831177]
[-131.00314331 184.13613892]
[-139.60501099 171.32945251]
[-139.89469910 155.90480042]
[-131.77976990 142.78414917]
[-117.84966278 136.15425110]
[-102.54942322 138.13067627]
[-90.76129913 148.08274841]
[-76.45413208 143.57666016]
[-66.63905334 132.37338257]
[-51.15195847 135.60763550]
[-36.84478760 131.10154724]
[-22.53761864 126.59545135]
[-8.23044872 122.08935547]
[-2.74936891 117.03714752]
[6.45121336 117.64704132]
[20.85656357 113.46543121]
[26.45042038 108.53838348]
[35.63486862 109.35604858]
[50.13104248 105.50106049]
[64.62722015 101.64607239]
[79.12339020 97.79107666]
[92.13094330 80.53746796]
[113.47484589 83.90215302]
[126.57675934 76.59873199]
[139.67866516 69.29531097]
[152.78057861 61.99188995]
[165.88247681 54.68846512]
[178.98439026 47.38504410]
[185.01963806 40.41377640]
[192.46595764 40.06843948]
[205.72956848 33.06297684]
[218.99319458 26.05751610]
[232.25680542 19.05205536]
[245.52041626 12.04659462]
[254.10954285 -1.24014878]
[268.97708130 -0.34253702]
[282.24069214 -7.34799814]
[295.50430298 -14.35345840]
[308.35113525 -22.09678078]
[320.74017334 -30.55324936]
[333.12921143 -39.00971985]
[345.51824951 -47.46618652]
[353.06271362 -64.22103882]
[370.56045532 -64.95225525]
[382.75518799 -73.68654633]
[394.94995117 -82.42084503]
[407.14471436 -91.15513611]
[407.80978394 -104.65818024]
[416.03210449 -115.14294434]
[428.61340332 -118.89620209]
[440.86654663 -114.75479889]
[453.25555420 -123.21126556]
[465.64459229 -131.66773987]
[478.03363037 -140.12420654]
[478.61758423 -155.51788330]
[488.04364014 -167.47624207]
[502.53244019 -171.54309082]
[516.47082520 -166.36056519]
[528.85986328 -174.81703186]
[541.24890137 -183.27349854]
[553.63793945 -191.72996521]
[566.02697754 -200.18643188]
[570.40203857 -215.62139893]
[585.25256348 -221.69123840]
[599.18640137 -213.73968506]
[601.51477051 -197.86648560]
[590.45153809 -186.24821472]
[574.48345947 -187.79740906]
[562.09442139 -179.34094238]
[549.70538330 -170.88446045]
[537.31634521 -162.42799377]
[524.92730713 -153.97152710]
[524.67529297 -139.10295105]
[515.60919189 -127.09175110]
[501.03845215 -122.67046356]
[486.49011230 -127.73517609]
[474.10107422 -119.27870178]
[461.71203613 -110.82223511]
[449.32299805 -102.36576843]
[446.94454956 -85.75546265]
[433.03894043 -75.77526093]
[415.87899780 -78.96038055]
[403.68426514 -70.22608948]
[391.48950195 -61.49179459]
[379.29473877 -52.75749969]
[376.98822021 -40.82915878]
[366.82678223 -33.46173477]
[353.97470093 -35.07715607]
[341.58566284 -26.62068748]
[329.19665527 -18.16421700]
[316.80761719 -9.70774841]
[330.65960693 -3.95259762]
[335.01861572 10.40007782]
[326.70666504 22.88653374]
[311.78356934 24.40358734]
[301.12893677 13.84523582]
[302.50976562 -1.08984256]
[289.24615479 5.91561842]
[275.98254395 12.92107964]
[268.34213257 25.70674515]
[252.52587891 25.31021118]
[239.26226807 32.31567001]
[225.99865723 39.32113266]
[212.73503113 46.32659531]
[199.47142029 53.33205414]
[186.28781128 60.48695374]
[173.18591309 67.79037476]
[160.08399963 75.09379578]
[146.98208618 82.39721680]
[133.88017273 89.70064545]
[120.77826691 97.00406647]
[119.54073334 107.67279053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[11 47]
[12 46]
[13 45]
[14 44]
[15 42]
[16 41]
[17 39]
[18 38]
[19 37]
[20 36]
[22 34]
[23 33]
[49 137]
[50 136]
[51 135]
[52 134]
[53 133]
[54 132]
[56 131]
[57 130]
[58 129]
[59 128]
[60 127]
[62 125]
[63 124]
[64 123]
[65 117]
[66 116]
[67 115]
[68 114]
[70 111]
[71 110]
[72 109]
[73 108]
[77 105]
[78 104]
[79 103]
[80 102]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
