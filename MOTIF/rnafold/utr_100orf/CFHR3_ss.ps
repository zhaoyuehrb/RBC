%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUUGGUAACUAAUAAUGAAAGAUUUCAAACCCCAAACAGUGCAACUGAAACUUUUGUAUUAGCAUACUACUGAGAAUAUCUAACAUGUUGUUACUAAUCAAUGUCAUUCUGACCUUGUGGGUUUCCUGUGCUAAUGGACAAGUGAAACCUUGUGAUUUUCCAGACAUUAAACAUGGAGGUCUAU\
) } def
/len { sequence length } bind def

/coor [
[75.44671631 129.56712341]
[69.67330933 123.60869598]
[65.31319427 116.55004883]
[62.56955719 108.72013855]
[61.57026291 100.48384094]
[46.82296371 97.74209595]
[32.07566833 95.00034332]
[17.32836723 92.25859833]
[2.58106947 89.51685333]
[-12.16622925 86.77510071]
[-26.91352844 84.03335571]
[-41.66082764 81.29160309]
[-50.69033813 82.80101013]
[-56.63074493 78.37886810]
[-71.33016968 75.39107513]
[-86.02959442 72.40328217]
[-100.72901917 69.41549683]
[-109.78249359 70.77380371]
[-115.64817810 66.25301361]
[-130.29562378 63.02001953]
[-143.51522827 71.25895691]
[-158.32376099 67.77157593]
[-166.09686279 55.11793900]
[-180.74430847 51.88494110]
[-195.39175415 48.65194321]
[-210.03919983 45.41894531]
[-224.71315002 42.30844498]
[-239.41258240 39.32065582]
[-254.11199951 36.33286667]
[-244.88516235 48.15933609]
[-242.48464966 62.96600723]
[-247.50239563 77.10186005]
[-258.70111084 87.08127594]
[-273.31942749 90.44353485]
[-287.75277710 86.35958099]
[-298.44216919 75.83641815]
[-302.75183105 61.46885681]
[-299.61907959 46.79964066]
[-289.81640625 35.44589996]
[-275.76214600 30.20736313]
[-289.84796143 25.05089951]
[-303.93380737 19.89443398]
[-318.01965332 14.73796940]
[-332.10549927 9.58150482]
[-346.82907104 20.13504219]
[-364.78332520 19.75651932]
[-378.80172729 8.78530693]
[-383.40173340 -8.24872971]
[-397.65200806 -12.93163681]
[-411.90228271 -17.61454391]
[-426.15255737 -22.29745102]
[-441.67852783 -19.25520134]
[-451.35412598 -30.57915497]
[-465.60440063 -35.26206207]
[-481.53704834 -31.37830925]
[-492.66961670 -43.41981125]
[-487.54989624 -58.99930573]
[-471.44461060 -62.08993912]
[-460.92150879 -49.51233673]
[-446.67123413 -44.82942963]
[-432.16455078 -48.20663452]
[-421.46966553 -36.54772568]
[-407.21939087 -31.86482048]
[-392.96911621 -27.18191338]
[-378.71884155 -22.49900627]
[-370.01751709 -30.99638557]
[-358.45819092 -35.00420380]
[-346.22064209 -33.70156860]
[-335.64047241 -27.27523041]
[-328.76321411 -16.89566994]
[-326.94903564 -4.50433493]
[-312.86318970 0.65212983]
[-298.77734375 5.80859470]
[-284.69149780 10.96505928]
[-270.60568237 16.12152290]
[-260.27111816 14.12032890]
[-251.12420654 21.63344002]
[-236.42478943 24.62122917]
[-221.72535706 27.60901833]
[-214.52996826 25.85684204]
[-206.80619812 30.77149963]
[-192.15875244 34.00449753]
[-177.51130676 37.23749542]
[-162.86386108 40.47048950]
[-150.48660278 32.26445770]
[-135.58595276 35.33451843]
[-127.06262970 48.37257004]
[-112.41518402 51.60556793]
[-97.74123383 54.71606827]
[-83.04180908 57.70386124]
[-68.34237671 60.69165039]
[-53.64295578 63.67943954]
[-38.91907883 66.54431152]
[-24.17177963 69.28605652]
[-9.42448139 72.02780151]
[5.32281733 74.76955414]
[20.07011604 77.51129913]
[34.81741333 80.25304413]
[49.56471252 82.99479675]
[64.31201172 85.73654175]
[84.70114136 64.74346161]
[113.96072388 64.19250488]
[122.03195190 51.54911804]
[130.10319519 38.90573120]
[131.00711060 23.11036873]
[144.37713623 16.54595566]
[152.44837952 3.90257120]
[160.51960754 -8.74081326]
[168.59085083 -21.38419724]
[172.01719666 -37.98830795]
[188.92091370 -39.29234314]
[194.85339355 -23.41021538]
[181.23423767 -13.31296158]
[173.16299438 -0.66957766]
[165.09176636 11.97380638]
[157.02052307 24.61719131]
[156.69390869 39.50821304]
[142.74658203 46.97696686]
[134.67533875 59.62035370]
[126.60410309 72.26373291]
[132.56634521 79.59138489]
[136.56098938 88.15209198]
[151.45848083 86.40147400]
[166.35597229 84.65086365]
[181.25346375 82.90024567]
[196.15097046 81.14963531]
[211.04846191 79.39901733]
[225.94595337 77.64840698]
[240.82830811 75.77337646]
[255.69445801 73.77407837]
[270.54339600 71.65062714]
[285.37408447 69.40319061]
[292.39111328 55.56335831]
[306.21813965 48.52117538]
[321.53845215 50.98451233]
[332.46102905 62.00616455]
[334.78594971 77.34808350]
[327.61920166 91.11098480]
[313.71658325 98.00275421]
[298.42388916 95.37336731]
[287.62152100 84.23387146]
[272.79083252 86.48130798]
[266.63629150 90.60021973]
[257.69375610 88.64023590]
[242.82760620 90.63954163]
[236.60510254 94.65503693]
[227.69656372 92.54589844]
[212.79907227 94.29651642]
[197.90158081 96.04712677]
[183.00408936 97.79774475]
[168.10658264 99.54835510]
[153.20909119 101.29897308]
[138.31159973 103.04958344]
[137.17097473 109.76713562]
[134.86203003 116.17769623]
[131.45732117 122.07976532]
[127.06385803 127.28784180]
[135.34523010 139.79458618]
[143.62661743 152.30134583]
[151.90798950 164.80809021]
[160.18936157 177.31483459]
[167.55160522 182.75614929]
[168.50259399 190.10049438]
[176.57382202 202.74386597]
[184.64506531 215.38725281]
[199.88998413 214.02677917]
[214.01647949 219.91751099]
[223.77838135 231.70579529]
[226.93247986 246.68278503]
[222.75398254 261.40689087]
[212.20307922 272.49456787]
[197.70428467 277.39801025]
[182.58932495 274.99041748]
[170.33149719 265.82501221]
[163.74757385 252.00798035]
[164.35047913 236.71435547]
[172.00167847 223.45849609]
[163.93045044 210.81510925]
[155.85920715 198.17172241]
[147.68261719 185.59622192]
[139.40124512 173.08946228]
[131.11985779 160.58271790]
[122.83848572 148.07597351]
[114.55710602 135.56921387]
[106.58425140 137.86457825]
[98.30455780 138.39537048]
[90.10386658 137.13684082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[10 95]
[11 94]
[12 93]
[14 92]
[15 91]
[16 90]
[17 89]
[19 88]
[20 87]
[23 84]
[24 83]
[25 82]
[26 81]
[27 79]
[28 78]
[29 77]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[48 65]
[49 64]
[50 63]
[51 62]
[53 60]
[54 59]
[102 120]
[103 119]
[104 118]
[106 116]
[107 115]
[108 114]
[109 113]
[122 153]
[123 152]
[124 151]
[125 150]
[126 149]
[127 148]
[128 147]
[129 145]
[130 144]
[131 142]
[132 141]
[157 184]
[158 183]
[159 182]
[160 181]
[161 180]
[163 179]
[164 178]
[165 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
