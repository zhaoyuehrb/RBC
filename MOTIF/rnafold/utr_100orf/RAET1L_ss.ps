%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUCAUCUUCCAGGAUCCACCUUGAUUAAAUCUCUUGUCCCCAGCCCUCCUGGUCCCCAAUGGCAGCAGCCGCCAUCCCAGCUUUGCUUCUGUGCCUCCCGCUUCUGUUCCUGCUGUUCGGCUGGUCCCGGGCUAGGCGAGACGACCCUCACUCUCUUU\
) } def
/len { sequence length } bind def

/coor [
[9.93109512 350.49972534]
[0.51391315 362.17520142]
[-8.90326881 373.85067749]
[-18.32044983 385.52615356]
[-27.73763275 397.20162964]
[-30.37910461 412.80078125]
[-44.39188385 417.84967041]
[-53.80906677 429.52514648]
[-63.22624588 441.20059204]
[-60.96405029 450.44442749]
[-63.20515442 459.55126953]
[-69.31630707 466.48239136]
[-77.81304932 469.74722290]
[-86.71869659 468.72314453]
[-96.79882050 479.83129883]
[-106.87893677 490.93945312]
[-107.54076385 506.96887207]
[-120.57028198 516.32891846]
[-135.97236633 511.83947754]
[-141.93183899 496.94436646]
[-133.87712097 483.06988525]
[-117.98709869 480.85934448]
[-107.90697479 469.75119019]
[-97.82685852 458.64303589]
[-95.31928253 438.18362427]
[-74.90171814 431.78341675]
[-65.48454285 420.10794067]
[-56.06735611 408.43246460]
[-54.09946442 393.66845703]
[-39.41310501 387.78445435]
[-29.99592400 376.10897827]
[-20.57874298 364.43350220]
[-11.16156006 352.75802612]
[-1.74437869 341.08255005]
[5.50231028 327.94918823]
[10.35831928 313.75695801]
[15.21432877 299.56472778]
[20.07033730 285.37249756]
[24.92634773 271.18029785]
[29.78235626 256.98806763]
[34.63836670 242.79583740]
[29.31006622 234.00643921]
[29.73462868 223.51649475]
[36.01352310 214.82934570]
[46.25286865 210.98020935]
[51.65553665 196.98695374]
[57.05820084 182.99369812]
[62.46086884 169.00044250]
[67.86353302 155.00718689]
[62.95152283 147.50842285]
[62.05577469 138.45019531]
[65.50695038 129.87840271]
[72.63931274 123.78852844]
[81.91517639 121.66147614]
[88.12233734 108.00603485]
[86.96001434 94.07260132]
[98.22221375 85.78680420]
[104.42937469 72.13136292]
[110.37057495 58.35811996]
[116.04357147 44.47225952]
[111.23718262 34.64583206]
[112.63156128 24.01819038]
[119.52138519 16.09673119]
[129.42869568 13.36005402]
[135.63586426 -0.29538977]
[141.84301758 -13.95083427]
[148.05018616 -27.60627747]
[154.25733948 -41.26172256]
[160.46450806 -54.91716766]
[166.67166138 -68.57260895]
[172.87882996 -82.22805786]
[167.56782532 -96.87152100]
[174.05729675 -110.63166046]
[188.05033875 -115.60463715]
[194.25750732 -129.26008606]
[186.90502930 -138.16392517]
[183.44459534 -149.12641907]
[184.34466553 -160.53518677]
[189.43531799 -170.72731018]
[197.93865967 -178.23178101]
[208.58744812 -181.98170471]
[219.81388855 -181.46595764]
[226.80453491 -194.73738098]
[233.79519653 -208.00881958]
[225.30076599 -223.98141479]
[228.03297424 -241.70632935]
[240.71951294 -254.16007996]
[258.18157959 -256.52157593]
[264.65237427 -270.05410767]
[259.15554810 -284.87167358]
[265.82217407 -299.20108032]
[280.69705200 -304.54092407]
[294.95516968 -297.72317505]
[300.13745117 -282.79266357]
[293.16931152 -268.60745239]
[278.18487549 -263.58331299]
[271.71408081 -250.05079651]
[279.04241943 -240.30326843]
[281.52670288 -228.29005432]
[278.63165283 -216.29470825]
[270.85058594 -206.62434387]
[259.62258911 -201.16590881]
[247.06661987 -201.01815796]
[240.07595825 -187.74673462]
[233.08531189 -174.47531128]
[242.30967712 -158.27790833]
[239.94685364 -139.63801575]
[226.76512146 -126.04029083]
[207.91294861 -123.05291748]
[201.70578003 -109.39747620]
[207.15968323 -95.58477783]
[201.05926514 -81.64779663]
[186.53427124 -76.02089691]
[180.32710266 -62.36544800]
[174.11994934 -48.71000671]
[167.91278076 -35.05456161]
[161.70562744 -21.39911652]
[155.49845886 -7.74367285]
[149.29130554 5.91177130]
[143.08413696 19.56721497]
[146.40562439 38.58689880]
[129.92942810 50.14525986]
[124.25643158 64.03112030]
[125.26815796 68.74446106]
[123.29477692 74.14001465]
[118.08482361 78.33852386]
[111.87766266 91.99396515]
[113.03998566 105.92739868]
[101.77778625 114.21319580]
[95.57062531 127.86863708]
[99.01457214 148.98684692]
[81.85678864 160.40985107]
[76.45412445 174.40310669]
[71.05146027 188.39636230]
[65.64878845 202.38961792]
[60.24612427 216.38287354]
[64.29864502 236.09677124]
[48.83058929 247.65185547]
[43.97457886 261.84408569]
[39.11856842 276.03628540]
[34.26256180 290.22851562]
[29.40655136 304.42074585]
[24.55054092 318.61297607]
[19.69453239 332.80517578]
[31.13269424 323.10113525]
[44.97864532 317.33142090]
[59.92308807 316.04162598]
[74.55285645 319.35369873]
[87.48453522 326.95449829]
[97.49527740 338.12521362]
[103.63845825 351.80953979]
[105.33316040 366.71350098]
[102.41914368 381.42773438]
[95.17195129 394.56082153]
[84.27688599 404.87091064]
[70.76422119 411.38302612]
[55.91171265 413.48138428]
[41.12385559 410.96759033]
[27.79900551 404.07931519]
[17.19718552 393.46792603]
[10.32091713 380.13687134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[7 28]
[8 27]
[9 26]
[14 24]
[15 23]
[16 22]
[35 144]
[36 143]
[37 142]
[38 141]
[39 140]
[40 139]
[41 138]
[45 136]
[46 135]
[47 134]
[48 133]
[49 132]
[54 130]
[55 129]
[57 127]
[58 126]
[59 123]
[60 122]
[64 120]
[65 119]
[66 118]
[67 117]
[68 116]
[69 115]
[70 114]
[71 113]
[74 110]
[75 109]
[82 105]
[83 104]
[84 103]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
