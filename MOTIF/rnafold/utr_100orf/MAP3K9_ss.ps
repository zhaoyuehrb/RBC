%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:51:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCCUCCAGAGCGCUUCUCGGCUGCCUAGCGAGCGCCGCCGCUGCCGCCCCGCCGGGGGAGGAUGGAGCAGGGGCCGGGGCCGAGGAGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[15.76301003 490.16299438]
[7.95138073 503.57037354]
[-6.26256371 509.79479980]
[-21.41327095 506.44284058]
[-31.67498779 494.80340576]
[-33.10187149 479.35205078]
[-25.14525795 466.03021240]
[-10.86462593 459.96032715]
[-7.62435865 445.31451416]
[-4.38409138 430.66867065]
[-1.14382398 416.02282715]
[2.09644318 401.37698364]
[-5.40947580 395.15615845]
[-10.07282448 386.52835083]
[-11.17848015 376.72439575]
[-8.52243423 367.16156006]
[-2.44770932 359.23892212]
[6.19927406 354.13247681]
[16.18643761 352.62075806]
[21.21918869 338.49026489]
[26.25193787 324.35974121]
[31.28468895 310.22921753]
[36.31744003 296.09872437]
[41.35018921 281.96820068]
[46.38293839 267.83767700]
[51.41569138 253.70716858]
[56.44844055 239.57666016]
[61.48118973 225.44613647]
[65.84941101 211.09628296]
[69.54359436 196.55828857]
[73.23777771 182.02030945]
[76.93196106 167.48231506]
[71.21338654 150.97174072]
[83.95699310 137.79420471]
[87.19726562 123.14835358]
[73.80580139 103.69058990]
[81.29972839 81.29020691]
[74.13893127 68.10980225]
[66.97813416 54.92940521]
[59.81733704 41.74900436]
[45.55755997 33.65018463]
[45.71204376 17.25176430]
[60.12186813 9.42303181]
[73.96343994 18.21751595]
[72.99773407 34.58820343]
[80.15853119 47.76860428]
[87.31933594 60.94900513]
[94.48013306 74.12940979]
[100.00000000 73.54708862]
[105.51986694 74.12940979]
[112.68066406 60.94900513]
[112.46997070 45.12920380]
[125.34451294 37.63951492]
[132.50531006 24.45911598]
[139.66610718 11.27871513]
[146.82690430 -1.90168631]
[145.86120605 -18.27237511]
[159.70277405 -27.06685829]
[174.11259460 -19.23812675]
[174.26707458 -2.83970714]
[160.00730896 5.25911188]
[152.84651184 18.43951225]
[145.68571472 31.61991310]
[138.52491760 44.80031586]
[139.24780273 59.67736816]
[125.86106873 68.10980225]
[118.70027161 81.29020691]
[124.31779480 89.58840942]
[126.44566345 99.38069916]
[124.77850342 109.26186371]
[119.55557251 117.81392670]
[111.52636719 123.80964661]
[101.84310150 126.38862610]
[98.60283661 141.03446960]
[104.90197754 152.42207336]
[101.77970886 164.63992310]
[91.46994781 171.17649841]
[87.77576447 185.71449280]
[84.08158112 200.25247192]
[80.38739777 214.79046631]
[81.92282867 220.15606689]
[81.19561768 225.04039001]
[78.80905914 228.62634277]
[75.61170197 230.47889709]
[70.57895660 244.60940552]
[65.54620361 258.73992920]
[60.51345444 272.87042236]
[55.48070145 287.00094604]
[50.44795227 301.13146973]
[45.41520309 315.26196289]
[40.38245392 329.39248657]
[35.34970093 343.52301025]
[30.31695175 357.65350342]
[40.70195007 375.73059082]
[34.82569504 395.43707275]
[16.74228477 404.61724854]
[13.50201702 419.26309204]
[10.26175022 433.90893555]
[7.02148247 448.55477905]
[3.78121519 463.20062256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 100]
[9 99]
[10 98]
[11 97]
[12 96]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[28 84]
[29 80]
[30 79]
[31 78]
[32 77]
[34 74]
[35 73]
[37 48]
[38 47]
[39 46]
[40 45]
[50 67]
[51 66]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
