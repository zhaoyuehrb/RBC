%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUGACUCCACCUCUUCUGCCACAAACGUCAGCAUGGUGGUAUCAGCCGGCCCUUGGUCCAGUGAGAAGGCAGAGAUGAACAUUCUAGAAAUCAACGAGACAUUGCGCCCCCAGCUGGCAGAGAAGAAACAGC\
) } def
/len { sequence length } bind def

/coor [
[85.08670044 165.64782715]
[81.30133057 151.13331604]
[81.87008667 136.14410400]
[86.74446106 121.95818329]
[95.51206970 109.78176880]
[81.52498627 115.20039368]
[67.53790283 120.61901855]
[61.09214020 134.79963684]
[46.83005905 140.09564209]
[33.35073090 133.86320496]
[19.36364746 139.28182983]
[5.37656307 144.70045471]
[-8.61052036 150.11907959]
[-22.59760284 155.53770447]
[-25.14098930 169.13627625]
[-34.01909256 179.60423279]
[-46.81601334 184.25932312]
[-60.13090134 181.97889709]
[-70.48165131 173.46842957]
[-84.59016418 178.56254578]
[-98.69867706 183.65664673]
[-103.34595490 188.56182861]
[-108.93887329 190.08457947]
[-113.57810211 188.64372253]
[-127.90682220 193.08082581]
[-138.64472961 205.47555542]
[-154.69445801 202.10833740]
[-159.54542542 186.44308472]
[-148.20736694 174.59486389]
[-132.34391785 178.75210571]
[-118.01519012 174.31500244]
[-103.79278564 169.54814148]
[-89.68427277 164.45402527]
[-75.57575989 159.35992432]
[-71.54673004 143.48875427]
[-58.74394226 133.01652527]
[-42.05816650 132.19805908]
[-28.01622772 141.55061340]
[-14.02914524 136.13198853]
[-0.04206172 130.71336365]
[13.94502163 125.29473877]
[27.93210602 119.87611389]
[33.69467926 106.18932343]
[47.80238342 100.49481201]
[62.11927795 106.63193512]
[76.10636139 101.21331024]
[90.09344482 95.79468536]
[102.56549072 87.46112823]
[112.92427063 76.61236572]
[123.28305054 65.76361084]
[133.64183044 54.91484451]
[144.00061035 44.06608200]
[154.35940552 33.21731949]
[150.15911865 18.51001358]
[153.85993958 3.77228236]
[164.37083435 -7.06226397]
[178.79708862 -11.15358925]
[193.23701477 -7.49924564]
[203.59579468 -18.34800720]
[213.95457458 -29.19676971]
[217.88876343 -44.52102280]
[232.27404785 -48.38276672]
[242.63282776 -59.23152924]
[252.99160767 -70.08029175]
[263.35040283 -80.92905426]
[273.70916748 -91.77781677]
[282.18621826 -104.15277863]
[288.56036377 -117.73107910]
[294.93450928 -131.30937195]
[301.30865479 -144.88768005]
[294.17175293 -162.36091614]
[301.85617065 -179.25282288]
[319.11770630 -185.14886475]
[324.85797119 -199.00706482]
[322.18215942 -215.18643188]
[335.02597046 -225.38290405]
[350.17681885 -219.10722351]
[352.04879761 -202.81526184]
[338.71615601 -193.26681519]
[332.97589111 -179.40861511]
[339.57095337 -169.97109985]
[340.76269531 -158.39833069]
[336.13461304 -147.59339905]
[326.74484253 -140.32394409]
[314.88696289 -138.51353455]
[308.51281738 -124.93523407]
[302.13867188 -111.35693359]
[295.76452637 -97.77863312]
[308.76510620 -105.26095581]
[323.62365723 -107.31603241]
[338.16705322 -103.64329529]
[350.26831055 -94.77990723]
[358.15753174 -82.02215576]
[360.68090820 -67.23593140]
[357.46939087 -52.58375931]
[348.99264526 -40.20858765]
[336.49044800 -31.92033386]
[321.79129028 -28.93118286]
[307.04501343 -31.67831230]
[294.40826416 -39.75994492]
[285.72924805 -51.99410629]
[282.27731323 -66.59150696]
[284.55792236 -81.41902924]
[274.19915771 -70.57026672]
[263.84036255 -59.72150803]
[253.48159790 -48.87274551]
[243.12280273 -38.02398300]
[239.92955017 -23.47570610]
[224.80334473 -18.83798790]
[214.44456482 -7.98922586]
[204.08578491 2.85953593]
[208.40310669 17.11528015]
[204.98240662 31.71510124]
[194.64485168 42.71516037]
[180.09376526 47.09267044]
[165.20816040 43.57610321]
[154.84938049 54.42486572]
[144.49060059 65.27362823]
[134.13182068 76.12239075]
[123.77303314 86.97115326]
[113.41425323 97.81991577]
[128.01445007 94.37980652]
[142.98596191 95.30384827]
[157.05230713 100.51325226]
[169.01417542 109.56387329]
[177.85168457 121.68403625]
[182.81135559 135.84036255]
[183.47030640 150.82588196]
[179.77235413 165.36291504]
[172.03279114 178.21200562]
[160.91151428 188.27764893]
[147.35671997 194.70162964]
[132.52410889 196.93623352]
[117.67830658 194.79093933]
[104.08509827 188.44865417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[19 34]
[20 33]
[21 32]
[24 31]
[25 30]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
[58 111]
[59 110]
[60 109]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[67 88]
[68 87]
[69 86]
[70 85]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
