%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAAUUAUCACAUUGCACCAGGAUGGCUCUGAAAUGGACUACAGUUCUGCUGAUACAACUCAGUUUUUACUUUAGCUCUGGGAGUUGUGGAAAGGUGCUGGUAUGGGCCGCAGAAUACAGCC\
) } def
/len { sequence length } bind def

/coor [
[82.06657410 155.29423523]
[70.39751434 164.71936035]
[56.65336227 170.72755432]
[41.81035233 172.89205933]
[26.92276192 171.05914307]
[13.04802990 165.35897827]
[1.17165971 156.19645691]
[-7.86278725 144.22236633]
[-13.41360855 130.28721619]
[-15.08653545 115.38080597]
[-12.76274490 100.56189728]
[-6.60729074 86.88307190]
[2.94261336 75.31590271]
[15.20865250 66.68199921]
[29.31958771 61.59461212]
[44.27313995 60.41509247]
[59.00717926 63.22721481]
[72.47517395 69.83124542]
[83.72050476 79.75810242]
[91.94334412 92.30042267]
[90.10718536 77.41322327]
[88.27102661 62.52603149]
[86.43486786 47.63883972]
[84.59870148 32.75164795]
[68.53633118 24.53132629]
[60.61935043 8.49093914]
[63.80786514 -8.95193577]
[76.65960693 -20.94149971]
[74.09518433 -35.72066498]
[71.53075409 -50.49982834]
[68.96632385 -65.27899170]
[66.40189362 -80.05815887]
[63.83746719 -94.83731842]
[61.27304077 -109.61648560]
[58.70861053 -124.39565277]
[55.63183594 -127.79593658]
[54.02812576 -131.62536621]
[53.84520721 -135.34556580]
[54.85415268 -138.49537659]
[56.69226074 -140.74380493]
[55.58879089 -155.70315552]
[54.48532104 -170.66252136]
[53.38185501 -185.62187195]
[52.09489441 -200.56655884]
[50.62463760 -215.49433899]
[49.15438080 -230.42210388]
[40.10168457 -243.39744568]
[46.55423737 -256.82180786]
[45.08397675 -271.74957275]
[43.61371994 -286.67736816]
[28.93936539 -294.98721313]
[22.14109230 -310.23907471]
[25.69961166 -326.38439941]
[38.03032303 -337.14739990]
[36.19416428 -352.03460693]
[34.35800552 -366.92178345]
[32.52184296 -381.80899048]
[30.68568420 -396.69619751]
[18.07379913 -406.22067261]
[15.97345734 -421.88476562]
[25.63075447 -434.39526367]
[41.31618881 -436.32986450]
[53.72386932 -426.54083252]
[55.49253845 -410.83584595]
[45.57287598 -398.53234863]
[47.40903854 -383.64514160]
[49.24519730 -368.75796509]
[51.08135605 -353.87075806]
[52.91751862 -338.98358154]
[65.19589996 -333.59469604]
[73.25122070 -322.73953247]
[74.87701416 -309.21075439]
[69.53852081 -296.55603027]
[58.54149246 -288.14761353]
[60.01174927 -273.21984863]
[61.48200607 -258.29208374]
[70.42954254 -246.38447571]
[64.08215332 -231.89236450]
[65.55240631 -216.96459961]
[67.02266693 -202.03681946]
[70.84952545 -195.62103271]
[68.34120941 -186.72534180]
[69.44467926 -171.76599121]
[70.54814911 -156.80662537]
[71.65161896 -141.84727478]
[73.48777771 -126.96008301]
[76.05220795 -112.18091583]
[78.61663055 -97.40174866]
[81.18106079 -82.62258911]
[83.74549103 -67.84342194]
[86.30992126 -53.06425476]
[88.87434387 -38.28509140]
[91.43877411 -23.50592804]
[103.11627960 -19.77840424]
[112.12549591 -11.35954666]
[116.68810272 0.17392436]
[115.86719513 12.62262821]
[109.75891876 23.58389473]
[99.48590088 30.91548729]
[101.32205963 45.80268097]
[103.15821838 60.68987274]
[104.99437714 75.57706451]
[106.83053589 90.46425629]
[118.51737213 85.89390564]
[132.68188477 87.96701050]
[144.50708008 97.19548798]
[156.33227539 106.42395782]
[172.63923645 108.16032410]
[179.04074097 123.25843048]
[168.95146179 136.18663025]
[152.75039673 133.64552307]
[147.10379028 118.24915314]
[135.27859497 109.02068329]
[123.45340729 99.79220581]
[111.40528870 108.72769928]
[116.80371857 122.72258759]
[131.83268738 126.58389282]
[141.69580078 138.56298828]
[142.60047913 154.05366516]
[134.19886780 167.09944153]
[119.72154999 172.68395996]
[104.73534393 168.65985107]
[95.00276947 156.57447815]
[94.26618195 141.07489014]
[102.80882263 128.12101746]
[97.41040039 114.12612152]
[96.07035065 129.06614685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 80]
[45 79]
[46 78]
[48 76]
[49 75]
[50 74]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[105 114]
[106 113]
[107 112]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
