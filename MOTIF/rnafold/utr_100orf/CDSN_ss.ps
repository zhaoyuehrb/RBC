%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAGGACCCGGGUGUCCUUGAGCUGCCAUCAGUCAGGAGGCCGUGCAGUCCGAGAUGGGCUCGUCUCGGGCACCCUGGAUGGGGCGUGUGGGUGGGCACGGGAUGAUGGCACUGCUGCUGGCUGGUCUCCUCCUGCCAGGGACCUUGGCUAAGA\
) } def
/len { sequence length } bind def

/coor [
[97.53708649 724.54101562]
[82.40603638 723.63159180]
[68.49977112 717.59906006]
[57.49753952 707.17187500]
[50.72792053 693.60913086]
[49.00837708 678.54858398]
[52.54655075 663.80895996]
[60.91518784 651.17004395]
[73.10373688 642.15814209]
[87.64037323 637.86138916]
[88.54029083 622.88842773]
[89.44020844 607.91540527]
[90.34011841 592.94244385]
[91.24003601 577.96948242]
[88.48667908 571.06530762]
[92.31071472 562.70684814]
[93.51004028 547.75482178]
[94.70936584 532.80285645]
[95.90869904 517.85089111]
[97.10802460 502.89892578]
[98.30735016 487.94692993]
[99.50667572 472.99496460]
[96.89201355 466.03713989]
[100.88253021 457.75680542]
[102.38078308 442.83181763]
[89.79119873 422.70407104]
[103.49764252 402.47473145]
[102.89749146 387.48672485]
[102.29734802 372.49874878]
[101.69720459 357.51074219]
[100.94713593 342.52951050]
[100.04722595 327.55654907]
[99.14730835 312.58355713]
[98.24739075 297.61056519]
[94.68692780 291.08593750]
[97.48231506 282.32955933]
[96.88217163 267.34158325]
[96.28202820 252.35359192]
[88.04170990 239.94607544]
[95.22067261 225.84739685]
[94.62052917 210.85940552]
[93.87046051 195.87815857]
[92.97055054 180.90518188]
[92.07063293 165.93220520]
[91.17071533 150.95922852]
[90.27079773 135.98623657]
[86.71034241 129.46159363]
[89.50572205 120.70523834]
[88.90557861 105.71724701]
[83.61890411 91.67975616]
[74.18298340 80.01942444]
[64.74707031 68.35908508]
[55.31114960 56.69874954]
[45.87523270 45.03841019]
[36.43931580 33.37807465]
[27.00339699 21.71773720]
[17.56748009 10.05740070]
[8.13156223 -1.60293639]
[-1.30435526 -13.26327324]
[-16.79805946 -18.63702393]
[-19.62496185 -34.79067993]
[-6.87698984 -45.10674667]
[8.33183765 -38.97293854]
[10.35598183 -22.69919014]
[19.79189873 -11.03885365]
[29.22781754 0.62148291]
[38.66373444 12.28182030]
[48.09965134 23.94215775]
[57.53556824 35.60249329]
[66.97148895 47.26283264]
[76.40740204 58.92316818]
[85.84332275 70.58350372]
[95.27924347 82.24384308]
[102.42137909 79.95478058]
[123.84780884 73.08759308]
[124.74772644 58.11460876]
[125.64763641 43.14162827]
[116.12323761 30.23173904]
[120.41722870 14.77401638]
[135.23564148 8.62630463]
[149.21104431 16.50460052]
[151.62271118 32.36535263]
[140.62062073 44.04154587]
[139.72070312 59.01452637]
[138.82078552 73.98750305]
[145.86563110 76.56049347]
[167.00013733 84.27944183]
[175.96197510 72.25091553]
[184.92381287 60.22238922]
[193.88565063 48.19385910]
[202.84748840 36.16533279]
[200.31503296 20.56526184]
[209.62287903 7.79265118]
[225.24884033 5.42526340]
[237.92233276 14.86762714]
[240.12437439 30.51775551]
[230.54855347 43.09070587]
[214.87602234 45.12716675]
[205.91418457 57.15569687]
[196.95234680 69.18422699]
[187.99050903 81.21275330]
[179.02867126 93.24127960]
[160.25447083 110.10157776]
[139.19056702 117.38510132]
[119.33879089 115.28794098]
[103.89356995 105.11710358]
[104.49371338 120.10509491]
[105.24378204 135.08633423]
[106.14369965 150.05931091]
[107.04360962 165.03228760]
[107.94352722 180.00526428]
[108.84344482 194.97825623]
[112.49946594 203.41160583]
[109.60852051 210.25926208]
[110.20866394 225.24723816]
[118.49191284 238.72680664]
[111.27001953 251.75344849]
[111.87016296 266.74142456]
[112.47030640 281.72943115]
[113.22037506 296.71066284]
[114.12028503 311.68365479]
[115.02020264 326.65661621]
[115.92012024 341.62960815]
[119.57614136 350.06295776]
[116.68519592 356.91061401]
[117.28533936 371.89859009]
[117.88548279 386.88659668]
[118.48562622 401.87457275]
[124.29518890 404.76632690]
[129.01591492 409.15991211]
[132.27551270 414.67736816]
[133.82591248 420.85354614]
[133.56196594 427.17532349]
[131.52839661 433.12405396]
[127.91404724 438.21829224]
[123.03476715 442.05264282]
[117.30577087 444.33007812]
[115.80751801 459.25506592]
[114.45865631 474.19427490]
[113.25933075 489.14627075]
[112.05999756 504.09823608]
[110.86067200 519.05023193]
[109.66134644 534.00219727]
[108.46202087 548.95416260]
[107.26269531 563.90612793]
[106.21302032 578.86938477]
[105.31310272 593.84234619]
[104.41318512 608.81530762]
[103.51326752 623.78833008]
[102.61335754 638.76129150]
[116.53071594 644.76818848]
[127.55213928 655.17510986]
[134.34674072 668.72534180]
[136.09403992 683.78271484]
[132.58303833 698.52880859]
[124.23770142 711.18310547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 150]
[11 149]
[12 148]
[13 147]
[14 146]
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[24 138]
[25 137]
[27 128]
[28 127]
[29 126]
[30 125]
[31 123]
[32 122]
[33 121]
[34 120]
[36 119]
[37 118]
[38 117]
[40 115]
[41 114]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[48 107]
[49 106]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[75 85]
[76 84]
[77 83]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
