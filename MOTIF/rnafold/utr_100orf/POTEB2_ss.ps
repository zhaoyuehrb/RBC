%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUACCGGCCUCCCCUGGCUGUUAAAAGCAGAUGGUGGCUGAGGUUUGUUCAAUGCCCGCUGCCUCUGCUGUGAAGAAGCCAUUUGAUCUCAGGAGCAAGAUGGGCAAGUGGUGCCACCACCGCUUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[163.97746277 254.64054871]
[153.61257935 251.46174622]
[144.31869507 245.85466003]
[136.65534973 238.14953613]
[131.08566284 228.80314636]
[127.94838715 218.37171936]
[127.43730927 207.47779846]
[129.58926392 196.77317810]
[134.28160095 186.89978027]
[141.23912048 178.45127869]
[132.94215393 165.95487976]
[126.56203461 162.08638000]
[124.60117340 153.06683350]
[116.59943390 140.37934875]
[108.59769440 127.69187164]
[85.86473083 125.31707764]
[71.91506958 107.21087646]
[75.41668701 84.62401581]
[65.18956757 73.65104675]
[54.96245193 62.67807770]
[44.73533630 51.70510864]
[34.50821686 40.73213959]
[19.52787399 46.44974518]
[3.53817964 46.00131989]
[-11.02804852 39.48449326]
[-21.96582603 27.91796494]
[-27.63177490 13.08236027]
[-27.19099236 -2.75384188]
[-20.73994827 -17.18117905]
[-31.22148895 -27.91138268]
[-41.70302963 -38.64158630]
[-52.18457031 -49.37179184]
[-62.66611481 -60.10199738]
[-73.14765167 -70.83219910]
[-81.46493530 -74.83470154]
[-83.74546051 -81.93895721]
[-93.97257996 -92.91192627]
[-104.19969177 -103.88489532]
[-114.42681122 -114.85787201]
[-124.65393066 -125.83084106]
[-134.88104248 -136.80380249]
[-145.87306213 -136.56439209]
[-154.96730042 -142.34117126]
[-159.24314880 -151.98924255]
[-157.48922729 -162.17164612]
[-167.19078064 -173.61192322]
[-176.89233398 -185.05220032]
[-192.17131042 -182.91763306]
[-206.16925049 -189.40309143]
[-214.41946411 -202.43908691]
[-214.28933716 -217.86590576]
[-205.82038879 -230.76089478]
[-191.71504211 -237.00929260]
[-176.47424316 -234.61727905]
[-164.96128845 -224.34812927]
[-160.84991455 -209.47869873]
[-165.45205688 -194.75375366]
[-155.75050354 -183.31347656]
[-146.04895020 -171.87319946]
[-127.44318390 -166.81414795]
[-123.90808105 -147.03092957]
[-113.68096161 -136.05795288]
[-103.45384216 -125.08498383]
[-93.22672272 -114.11201477]
[-82.99961090 -103.13904572]
[-72.77249146 -92.16607666]
[-62.41744995 -81.31374359]
[-51.93590927 -70.58354187]
[-41.45436859 -59.85333252]
[-30.97282600 -49.12313080]
[-20.49128342 -38.39292526]
[-10.00974274 -27.66271973]
[2.85581279 -33.38579559]
[16.93311882 -34.36045074]
[30.52218437 -30.44842339]
[41.97493744 -22.10282326]
[49.89510345 -10.31573963]
[53.30841827 3.49965811]
[51.78242874 17.67853737]
[45.48118591 30.50502205]
[55.70830536 41.47799301]
[65.93542480 52.45096207]
[76.16253662 63.42393112]
[86.38965607 74.39690399]
[93.29030609 71.79113770]
[100.62516785 71.01087952]
[107.91957092 72.10662079]
[114.70146942 75.00746155]
[120.53197479 79.52567291]
[125.03376770 85.36885071]
[127.91553497 92.15888214]
[128.99076843 99.45633698]
[128.18989563 106.78897095]
[125.56473541 113.68226624]
[121.28517914 119.69013214]
[129.28691101 132.37760925]
[137.28865051 145.06509399]
[145.43856812 157.65789795]
[153.73553467 170.15431213]
[173.05139160 166.42495728]
[192.05317688 171.33602905]
[207.07186890 183.89813232]
[215.22518921 201.64849854]
[214.97076416 221.13380432]
[206.39765930 238.58192444]
[216.36473083 249.79162598]
[226.33180237 261.00134277]
[241.28381348 266.17318726]
[243.95852661 280.82565308]
[253.92559814 292.03536987]
[263.89266968 303.24505615]
[273.85974121 314.45477295]
[283.82681274 325.66445923]
[293.79388428 336.87417603]
[303.76095581 348.08389282]
[313.72802734 359.29357910]
[329.45449829 363.94226074]
[333.02828979 379.94726562]
[320.77297974 390.84402466]
[305.29580688 385.42288208]
[302.51834106 369.26065063]
[292.55126953 358.05096436]
[282.58419800 346.84124756]
[272.61712646 335.63153076]
[262.65005493 324.42184448]
[252.68296814 313.21212769]
[242.71589661 302.00244141]
[232.74882507 290.79272461]
[218.50971985 286.42266846]
[215.12210083 270.96841431]
[205.15502930 259.75869751]
[195.18795776 248.54899597]
[185.40602112 253.13285828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 99]
[11 98]
[13 97]
[14 96]
[15 95]
[18 84]
[19 83]
[20 82]
[21 81]
[22 80]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[45 59]
[46 58]
[47 57]
[105 132]
[106 131]
[107 130]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
