%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCCUCUCAGCCGCCCGAGGGCGCUGCGCUGAGCCUUACACUCUAUGAUUGCUCCUACCGACUCCCAUGAGGAAGUGCGAUCGGGAACCUCCUAUAUACUUCCGUUUGCCUCGCGGUUUCUUUCUUUCCGCGCCGAUAGCGCUC\
) } def
/len { sequence length } bind def

/coor [
[40.96009445 148.34736633]
[28.47693253 156.66426086]
[15.99376774 164.98114014]
[3.51060343 173.29803467]
[3.60233164 192.36183167]
[-7.65718460 207.56086731]
[-25.63577652 212.94163513]
[-43.11456680 206.52963257]
[-55.03921890 215.62922668]
[-66.96386719 224.72883606]
[-78.88851929 233.82843018]
[-90.81317139 242.92802429]
[-102.73782349 252.02761841]
[-114.26276398 261.62844849]
[-125.36693573 271.71295166]
[-136.47109985 281.79748535]
[-147.57527161 291.88198853]
[-152.05813599 307.65652466]
[-168.02464294 311.39859009]
[-179.04980469 299.25866699]
[-173.79188538 283.72525024]
[-157.65979004 280.77783203]
[-146.55561829 270.69329834]
[-135.45144653 260.60879517]
[-124.34727478 250.52427673]
[-124.11275482 247.66310120]
[-122.68994141 244.72689819]
[-120.04600525 242.18428040]
[-116.32386017 240.50619507]
[-111.83742523 240.10298157]
[-99.91277313 231.00337219]
[-87.98812103 221.90377808]
[-76.06346893 212.80418396]
[-64.13881683 203.70457458]
[-52.21416473 194.60498047]
[-54.59365845 183.58445740]
[-52.64674377 172.42700195]
[-46.62085724 162.77616882]
[-37.36716461 156.06832886]
[-26.22050285 153.31895447]
[-14.80687618 154.96903992]
[-4.80628347 160.81486511]
[7.67688084 152.49798584]
[20.16004562 144.18109131]
[32.64320755 135.86421204]
[27.13994217 122.68459320]
[24.18899155 108.71032715]
[23.89373016 94.43093109]
[26.26450157 80.34662628]
[31.21825600 66.95078278]
[38.58146286 54.71267319]
[48.09618378 44.06098938]
[59.42911911 35.36887360]
[72.18326569 28.94081306]
[85.91184235 25.00198364]
[100.13393402 23.69036293]
[114.35133362 25.05189896]
[128.06599426 29.03889465]
[140.79750061 35.51168823]
[150.02400208 23.68495178]
[159.25050354 11.85821438]
[168.47700500 0.03147708]
[161.79870605 -13.64923096]
[161.72285461 -28.81106567]
[168.21092224 -42.44649887]
[179.92768860 -51.87404251]
[194.51560974 -55.26551819]
[209.06912231 -52.00041580]
[218.29560852 -63.82715607]
[214.16543579 -78.66790771]
[219.50352478 -92.92827606]
[232.06646729 -101.21299744]
[246.92100525 -100.51983643]
[256.14749146 -112.34657288]
[265.37399292 -124.17330933]
[274.60049438 -136.00004578]
[283.82699585 -147.82678223]
[293.05349731 -159.65351868]
[302.27999878 -171.48025513]
[301.48309326 -184.40013123]
[309.47006226 -194.07102966]
[321.51092529 -195.62644958]
[330.98803711 -207.25332642]
[334.01519775 -215.94842529]
[340.79403687 -219.02455139]
[350.51748657 -230.44624329]
[360.24090576 -241.86793518]
[369.96432495 -253.28962708]
[375.62774658 -269.26968384]
[392.55108643 -268.25131226]
[396.25735474 -251.70742798]
[381.38601685 -243.56619263]
[371.66259766 -232.14451599]
[361.93917847 -220.72282410]
[352.21572876 -209.30113220]
[342.61489868 -197.77619934]
[333.13778687 -186.14932251]
[331.31091309 -168.72607422]
[314.10675049 -162.25375366]
[304.88024902 -150.42701721]
[295.65374756 -138.60028076]
[286.42724609 -126.77354431]
[277.20074463 -114.94680786]
[267.97424316 -103.12007141]
[258.74774170 -91.29333496]
[263.03424072 -77.05381775]
[258.05511475 -62.85268402]
[245.52203369 -54.20540619]
[230.12234497 -54.60065460]
[220.89585876 -42.77391815]
[227.60375977 -29.45215416]
[227.86349487 -14.47744274]
[221.56999207 -0.81901067]
[209.92288208 8.79165268]
[195.19819641 12.40701580]
[180.30374146 9.25797653]
[171.07723999 21.08471298]
[161.85073853 32.91144943]
[152.62423706 44.73818588]
[160.10218811 52.97972870]
[166.30192566 62.22126007]
[171.09161377 72.26624298]
[174.36938477 82.90103912]
[176.06552124 93.89948273]
[176.14395142 105.02767181]
[174.60301208 116.04893494]
[171.47549438 126.72888184]
[166.82788086 136.84037781]
[160.75901794 146.16838074]
[153.39799500 154.51451111]
[144.90133667 161.70127869]
[135.44976807 167.57583618]
[141.07876587 181.47958374]
[146.70777893 195.38333130]
[152.33677673 209.28707886]
[166.48861694 216.84387207]
[169.26222229 232.64533997]
[158.52989197 244.56997681]
[142.52458191 243.47021484]
[133.52418518 230.18968201]
[138.43302917 214.91609192]
[132.80401611 201.01234436]
[127.17501831 187.10858154]
[121.54601288 173.20483398]
[99.50563049 176.30815125]
[77.50730133 172.91952515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 25]
[15 24]
[16 23]
[17 22]
[59 119]
[60 118]
[61 117]
[62 116]
[68 110]
[69 109]
[73 105]
[74 104]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[82 97]
[83 96]
[85 95]
[86 94]
[87 93]
[88 92]
[132 144]
[133 143]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
