%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGCGGCAGCUACUACGGAAACUACUACGGCGACCAUGGCUAUGGGUGCUGUGGAUACGAAGGCCUAGGCUAUGGCUAUGGAAGCCUGCGCUGUGGCU\
) } def
/len { sequence length } bind def

/coor [
[86.30538940 278.04653931]
[70.56986237 276.57391357]
[60.54893112 264.35275269]
[62.18784714 248.63366699]
[74.51426697 238.74250793]
[75.91195679 223.80776978]
[69.39423370 210.41491699]
[78.38375854 197.39573669]
[79.78144836 182.46099854]
[81.17913818 167.52626038]
[82.57682800 152.59152222]
[83.97451782 137.65678406]
[78.63014221 132.39488220]
[74.86072540 146.91354370]
[60.40251541 150.90855408]
[49.71356201 140.38494873]
[53.48270416 125.86621857]
[67.94137573 121.87107849]
[62.59700012 116.60917664]
[47.68580246 118.23896027]
[37.98754120 130.71771240]
[22.29584694 132.60089111]
[9.92032909 122.77123260]
[8.20315933 107.06050873]
[18.16310501 94.78960419]
[33.89110565 93.23863220]
[46.05601883 103.32775879]
[60.96721649 101.69797516]
[70.49191284 80.12356567]
[89.24642181 69.76919556]
[108.29993439 72.63623047]
[116.26629639 59.92650986]
[124.23266602 47.21678925]
[120.91425323 31.99752808]
[129.17434692 19.22154808]
[143.70402527 16.15174103]
[151.67039490 3.44202113]
[159.63676453 -9.26769924]
[167.60313416 -21.97742081]
[175.56950378 -34.68714142]
[183.53585815 -47.39686203]
[191.50222778 -60.10658264]
[199.46859741 -72.81629944]
[207.43496704 -85.52602386]
[215.40133667 -98.23574066]
[223.36770630 -110.94546509]
[231.33406067 -123.65518188]
[225.67242432 -142.75474548]
[235.48547363 -159.74813843]
[254.27862549 -164.25259399]
[261.02606201 -177.64930725]
[267.77346802 -191.04603577]
[266.22900391 -209.31243896]
[281.09701538 -218.49087524]
[287.42456055 -232.09095764]
[285.44296265 -248.36994934]
[298.71099854 -258.00793457]
[313.57965088 -251.09020996]
[314.75332642 -234.73310852]
[301.02462769 -225.76342773]
[294.69711304 -212.16334534]
[298.55371094 -200.58125305]
[293.24966431 -189.14045715]
[281.17019653 -184.29861450]
[274.42279053 -170.90188599]
[267.67535400 -157.50515747]
[273.54864502 -148.71875000]
[275.16339111 -138.19146729]
[272.14767456 -127.89174652]
[265.00201416 -119.77511597]
[255.01770020 -115.41302490]
[244.04379272 -115.68881989]
[236.07742310 -102.97909546]
[228.11105347 -90.26937866]
[220.14468384 -77.55965424]
[212.17831421 -64.84993744]
[204.21194458 -52.14021301]
[196.24559021 -39.43049240]
[188.27922058 -26.72077370]
[180.31285095 -14.01105309]
[172.34648132 -1.30133247]
[164.38011169 11.40838814]
[156.41374207 24.11810875]
[159.98417664 38.53294754]
[152.08621216 51.53589630]
[136.94238281 55.18315506]
[128.97601318 67.89287567]
[121.00965118 80.60260010]
[130.81755066 95.04375458]
[130.80015564 113.99902344]
[119.30471039 130.91928101]
[98.90925598 139.05447388]
[97.51156616 153.98921204]
[96.11388397 168.92395020]
[94.71619415 183.85868835]
[93.31850433 198.79342651]
[99.73625183 213.25451660]
[90.84669495 225.20545959]
[89.44900513 240.14019775]
[99.72609711 252.14674377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[19 28]
[20 27]
[31 88]
[32 87]
[33 86]
[36 83]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[50 66]
[51 65]
[52 64]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
