%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:57:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCGACCGCUCGGGCAGCGCCACCGCCACGAGAGCCCGGGACGCGGGAAAGACCGAAAGGAAGAGGAAGAGGCACCGGUGGCCAUGGGGCUGGAGGCGGCGCGCGAGCUGGAGUGCGCGGCGCUGGGCACGCUGCUGCGGGAUCCGCGGGAGGCGGAACGCACGCUGCUGCUGGACUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[177.15193176 198.32409668]
[165.36132812 207.59672546]
[150.66514587 210.60043335]
[136.18170166 206.69789124]
[124.98416138 196.71714783]
[119.44847870 182.77598572]
[120.74922943 167.83248901]
[128.61042786 155.05744934]
[141.36404419 147.16154480]
[156.30374146 145.82011414]
[143.75350952 137.60479736]
[131.20326233 129.38948059]
[118.65303040 121.17415619]
[106.10279083 112.95883179]
[92.15494537 111.98459625]
[85.68188477 99.59140778]
[73.13164520 91.37608337]
[60.58140945 83.16075897]
[42.18648911 82.56630707]
[34.87570953 66.62241364]
[22.18922997 58.61908340]
[9.50275326 50.61575317]
[-3.18372416 42.61242294]
[-15.92682076 44.69293594]
[-26.33344269 37.74885559]
[-29.11806107 25.96373558]
[-41.66830063 17.74841309]
[-54.21853638 9.53309059]
[-66.76877594 1.31776798]
[-79.31901550 -6.89755440]
[-90.34087372 -0.94920063]
[-102.77429199 -0.26381838]
[-114.24922943 -4.91043854]
[-122.60456848 -13.94756985]
[-126.29505920 -25.61325455]
[-124.67688751 -37.66839600]
[-136.94406128 -46.30068970]
[-149.21122742 -54.93298340]
[-161.47840881 -63.56527710]
[-173.74557495 -72.19757080]
[-193.87138367 -73.07176971]
[-201.27592468 -90.92093658]
[-213.82615662 -99.13626099]
[-229.61015320 -100.22078705]
[-236.02120972 -113.66502380]
[-248.57144165 -121.88034821]
[-261.12167358 -130.09567261]
[-276.90567017 -131.18019104]
[-283.31674194 -144.62443542]
[-295.86697388 -152.83976746]
[-305.47052002 -148.10968018]
[-316.09054565 -147.80632019]
[-325.79949951 -151.91743469]
[-332.86312866 -159.63565063]
[-336.05032349 -169.51605225]
[-334.84716797 -179.74639893]
[-346.96759033 -188.58355713]
[-359.53479004 -180.10763550]
[-374.24380493 -176.44412231]
[-389.31838989 -178.03540039]
[-402.93826294 -184.68933105]
[-413.45877075 -195.60240173]
[-419.60946655 -209.45681763]
[-420.64764404 -224.57957458]
[-416.44793701 -239.14454651]
[-407.51748657 -251.39292908]
[-394.93469238 -259.84567261]
[-380.21896362 -263.48208618]
[-365.14733887 -261.86300659]
[-351.53973389 -255.18399048]
[-341.03936768 -244.25155640]
[-334.91421509 -230.38583374]
[-333.90390015 -215.26118469]
[-338.13043213 -200.70397949]
[-326.01000977 -191.86682129]
[-307.05923462 -196.30503845]
[-290.68356323 -185.23208618]
[-287.65164185 -165.38999939]
[-275.10140991 -157.17468262]
[-260.21508789 -156.67776489]
[-252.90635681 -142.64590454]
[-240.35612488 -134.43058777]
[-227.80587769 -126.21526337]
[-212.91957092 -125.71835327]
[-205.61083984 -111.68649292]
[-193.06059265 -103.47117615]
[-183.26091003 -106.45457458]
[-173.22952271 -103.47829437]
[-166.35971069 -95.29653168]
[-165.11328125 -84.46474457]
[-152.84611511 -75.83245087]
[-140.57893372 -67.20015717]
[-128.31176758 -58.56785965]
[-116.04459381 -49.93556595]
[-99.63607788 -56.42030716]
[-82.46435547 -51.73120117]
[-71.43611145 -37.55915451]
[-71.10369110 -19.44779205]
[-58.55345154 -11.23246956]
[-46.00321579 -3.01714730]
[-33.45297623 5.19817543]
[-20.90273857 13.41349792]
[-3.36265445 13.44028568]
[4.81960535 29.92594528]
[17.50608253 37.92927551]
[30.19256020 45.93260574]
[42.87903976 53.93593597]
[54.75593567 51.57320023]
[65.39555359 58.15472031]
[68.79673004 70.61052704]
[81.34696960 78.82584381]
[93.89720917 87.04116821]
[107.84505463 88.01540375]
[114.31811523 100.40859222]
[126.86835480 108.62391663]
[139.41859436 116.83924103]
[151.96882629 125.05455780]
[164.51907349 133.26988220]
[176.12530518 134.31367493]
[182.09776306 142.77294922]
[195.84500122 148.77407837]
[209.59223938 154.77520752]
[223.33946228 160.77635193]
[237.08670044 166.77748108]
[250.83393860 172.77861023]
[265.29165649 164.01884460]
[281.95712280 165.57939148]
[294.29003906 176.64915466]
[297.56890869 192.72438049]
[311.41500854 198.49372864]
[325.26110840 204.26306152]
[339.10720825 210.03240967]
[348.25360107 210.44758606]
[353.13616943 216.01672363]
[366.88339233 222.01785278]
[382.62652588 220.44786072]
[391.19534302 232.63082886]
[404.94256592 238.63195801]
[418.73971558 244.51739502]
[432.58581543 250.28674316]
[446.43194580 256.05609131]
[460.27804565 261.82543945]
[470.10424805 257.10025024]
[480.68951416 258.54507446]
[488.55905151 265.44125366]
[491.26446533 275.32131958]
[504.90893555 281.55252075]
[518.55340576 287.78375244]
[532.19787598 294.01498413]
[545.84240723 300.24621582]
[561.31591797 296.00952148]
[574.19042969 305.58166504]
[574.58972168 321.61975098]
[562.20745850 331.82070923]
[546.54229736 328.35925293]
[539.61114502 313.89068604]
[525.96667480 307.65945435]
[512.32220459 301.42822266]
[498.67770386 295.19702148]
[485.03323364 288.96578979]
[465.98629761 292.22680664]
[454.50869751 275.67153931]
[440.66259766 269.90219116]
[426.81649780 264.13284302]
[412.97036743 258.36352539]
[405.57135010 258.69369507]
[398.94143677 252.37919617]
[385.19421387 246.37806702]
[370.43438721 248.37728882]
[360.88226318 235.76509094]
[347.13504028 229.76396179]
[333.33789062 223.87850952]
[319.49176025 218.10917664]
[305.64566040 212.33982849]
[291.79956055 206.57049561]
[281.08511353 214.55493164]
[267.71667480 216.21051025]
[255.17813110 210.99787903]
[246.79060364 200.18173218]
[244.83280945 186.52583313]
[231.08557129 180.52470398]
[217.33833313 174.52357483]
[203.59111023 168.52244568]
[189.84387207 162.52131653]
[176.09663391 156.52018738]
[183.15664673 169.75485229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[16 112]
[17 111]
[18 110]
[20 107]
[21 106]
[22 105]
[23 104]
[26 102]
[27 101]
[28 100]
[29 99]
[30 98]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[42 86]
[43 85]
[45 83]
[46 82]
[47 81]
[49 79]
[50 78]
[56 75]
[57 74]
[120 185]
[121 184]
[122 183]
[123 182]
[124 181]
[125 180]
[129 175]
[130 174]
[131 173]
[132 172]
[134 171]
[135 170]
[137 168]
[138 167]
[139 165]
[140 164]
[141 163]
[142 162]
[146 160]
[147 159]
[148 158]
[149 157]
[150 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
