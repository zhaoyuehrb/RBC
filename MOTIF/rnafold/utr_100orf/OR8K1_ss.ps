%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUCAUGUGGUAAAACACAAUCACACGGCAGUGACCAAGGUGACUGAAUUUAUUCUCAUGGGGAUUACAGACAACCCUGGGCUGCAGGCUCCACUGU\
) } def
/len { sequence length } bind def

/coor [
[92.05242157 139.38731384]
[82.80090332 137.01553345]
[74.23258972 132.46907043]
[66.85861206 125.94021606]
[61.13683319 117.74130249]
[57.44374466 108.29003906]
[43.74689484 114.40529633]
[34.30000687 127.09650421]
[19.52406883 125.22010040]
[5.82721996 131.33535767]
[-7.86962891 137.45060730]
[-21.56647682 143.56585693]
[-35.26332474 149.68110657]
[-48.96017456 155.79637146]
[-52.03874588 171.00498962]
[-63.49150467 181.47465515]
[-78.91463470 183.17956543]
[-92.37762451 175.46415710]
[-98.70368195 161.29516602]
[-95.46030426 146.12083435]
[-83.89464569 135.77601624]
[-68.45392609 134.23851013]
[-55.07542801 142.09951782]
[-41.37858200 135.98426819]
[-27.68173218 129.86901855]
[-13.98488331 123.75375366]
[-0.28803447 117.63850403]
[13.40881443 111.52324677]
[21.87601089 99.26943970]
[37.63164139 100.70844269]
[51.32848740 94.59319305]
[55.24831772 80.11441040]
[46.50720215 67.92454529]
[37.76608658 55.73467636]
[29.02497101 43.54480743]
[14.69526672 36.83883286]
[13.56634140 21.98707008]
[4.82522535 9.79720211]
[-10.32937241 3.53060818]
[-12.21110630 -12.76022148]
[1.11579084 -22.31667709]
[15.94174957 -15.30789757]
[17.01509476 1.05608630]
[25.75621033 13.24595547]
[39.46069336 19.08003044]
[41.21483994 34.80369186]
[49.95595551 46.99356079]
[58.69707108 59.18342972]
[67.43818665 71.37329865]
[74.57263947 65.49455261]
[82.70377350 61.32284546]
[91.43605804 59.01057053]
[100.35518646 58.62091446]
[109.04772186 60.12692642]
[117.12027740 63.41481400]
[124.21727753 68.29120636]
[130.03663635 74.49398804]
[134.34249878 81.70605469]
[148.69236755 77.33783722]
[163.04223633 72.96961212]
[177.39210510 68.60139465]
[184.84712219 63.01431656]
[192.25656128 64.32795715]
[206.73533630 60.40813065]
[221.21411133 56.48830032]
[223.96215820 41.47460556]
[232.95919800 29.14512825]
[246.41885376 21.94789124]
[261.66873169 21.31191444]
[275.68090820 27.36346817]
[285.67330933 38.90101624]
[289.66189575 53.63376617]
[286.85473633 68.63652039]
[277.80920410 80.93047333]
[264.32131958 88.07465363]
[249.06906128 88.65057373]
[235.08081055 82.54388428]
[225.13394165 70.96707916]
[210.65516663 74.88690186]
[196.17639160 78.80673218]
[181.76033020 82.95126343]
[167.41046143 87.31948090]
[153.06059265 91.68769836]
[138.71072388 96.05592346]
[137.83500671 109.08782196]
[132.69625854 121.09575653]
[123.87348175 130.72674561]
[130.62091064 144.12347412]
[137.36833191 157.52020264]
[144.11575317 170.91693115]
[159.20025635 175.63217163]
[166.45831299 189.67126465]
[161.58384705 204.70506287]
[147.46879578 211.81428528]
[132.48736572 206.78114319]
[125.52777863 192.59172058]
[130.71902466 177.66435242]
[123.97160339 164.26762390]
[117.22418213 150.87089539]
[110.47675323 137.47416687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 31]
[7 30]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[32 49]
[33 48]
[34 47]
[35 46]
[37 44]
[38 43]
[58 84]
[59 83]
[60 82]
[61 81]
[63 80]
[64 79]
[65 78]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
