%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCUCAGCGCGUGACGCAGCACGCUUUGAUAUAAAUGCAGACCGCGCGGCCGUAGCUUCCUCUCUGCUCUCGCGGCCGACUCGCAAGAUGGCGCCGCAGAAAGACAGGAAGCCCAAGAGGUCAACCUGGAGGUUUAAUUUGGACCUUACUCAUCCAGUAGAAGAUGGAAUUUUUGAUUCUGGAAAUU\
) } def
/len { sequence length } bind def

/coor [
[97.85477448 185.49467468]
[89.34915161 184.85577393]
[80.94947052 183.37277222]
[72.73929596 181.06044006]
[64.80029297 177.94178772]
[57.21142960 174.04782104]
[48.59650040 186.32719421]
[39.98156738 198.60656738]
[31.36663818 210.88594055]
[29.77474976 226.62686157]
[16.13116646 232.60195923]
[7.51623726 244.88133240]
[-1.09869266 257.16070557]
[-9.71362305 269.44009399]
[-18.32855225 281.71945190]
[-15.35194302 297.24090576]
[-24.29150581 310.27392578]
[-39.84355545 313.08627319]
[-52.78134155 304.00939941]
[-55.42909622 288.42849731]
[-46.21596146 275.58740234]
[-30.60792542 273.10452271]
[-21.99299431 260.82513428]
[-13.37806511 248.54577637]
[-4.76313496 236.26640320]
[3.85179496 223.98703003]
[4.82748604 209.12442017]
[19.08726692 202.27101135]
[27.70219612 189.99163818]
[36.31712723 177.71226501]
[44.93205643 165.43289185]
[34.21969223 154.65248108]
[25.58465195 142.14614868]
[19.29962540 128.30885315]
[15.56309414 113.57758331]
[14.49305534 98.41753387]
[16.12330055 83.30744934]
[20.40234756 68.72451782]
[27.19506645 55.12926102]
[36.28694153 42.95100403]
[47.39085770 32.57433701]
[60.15615463 24.32695389]
[54.35866928 10.49260807]
[48.56118011 -3.34173822]
[42.76369476 -17.17608452]
[27.60441208 -19.21163559]
[15.57876492 -28.50037003]
[9.85517311 -42.46843719]
[11.87812328 -57.32655334]
[21.00510216 -69.09786987]
[15.20761395 -82.93221283]
[7.10824871 -70.30683136]
[-7.79415417 -68.59850311]
[-18.54047966 -79.06351471]
[-17.22795868 -94.00598145]
[-4.82181168 -102.43732452]
[9.55528164 -98.15655518]
[4.92002630 -112.42240143]
[0.28477141 -126.68825531]
[-4.35048342 -140.95410156]
[-8.98573875 -155.21995544]
[-13.62099361 -169.48579407]
[-18.25624847 -183.75164795]
[-29.87934685 -194.48542786]
[-26.45368004 -208.98074341]
[-31.08893394 -223.24659729]
[-35.72418976 -237.51243591]
[-46.85008240 -244.06077576]
[-50.41096497 -256.05209351]
[-45.01850128 -266.89276123]
[-49.41725159 -281.23330688]
[-53.81600189 -295.57385254]
[-59.33398438 -302.87634277]
[-58.16681290 -310.18795776]
[-62.32785797 -324.59927368]
[-66.48889923 -339.01058960]
[-70.64994812 -353.42187500]
[-74.81098938 -367.83319092]
[-89.63376617 -371.60577393]
[-100.50624847 -382.22116089]
[-104.57844543 -396.75674438]
[-100.85314941 -411.28182983]
[-90.42783356 -421.92034912]
[-94.58887482 -436.33166504]
[-106.77506256 -447.30566406]
[-103.10018921 -463.28778076]
[-87.34464264 -467.83694458]
[-75.71639252 -456.27337646]
[-80.17756653 -440.49270630]
[-76.01652527 -426.08139038]
[-61.52503967 -422.63720703]
[-50.63074875 -412.33331299]
[-46.32828522 -397.86419678]
[-49.86911392 -383.08721924]
[-60.39968491 -371.99423218]
[-56.23863983 -357.58291626]
[-52.07759476 -343.17163086]
[-47.91655350 -328.76031494]
[-43.75550842 -314.34899902]
[-39.47546387 -299.97259521]
[-35.07671356 -285.63204956]
[-30.67796516 -271.29153442]
[-17.20727539 -260.05590820]
[-21.45834160 -242.14768982]
[-16.82308578 -227.88185120]
[-12.18783188 -213.61599731]
[-0.89627838 -203.90260315]
[-3.99040055 -188.38690186]
[0.64485443 -174.12104797]
[5.28010941 -159.85520935]
[9.91536427 -145.58935547]
[14.55061913 -131.32350159]
[19.18587494 -117.05766296]
[23.82112885 -102.79180908]
[29.04195976 -88.72970581]
[34.83944702 -74.89535522]
[49.63172531 -73.14775848]
[61.64306641 -64.17092133]
[67.58770752 -50.29548645]
[65.77708435 -35.20845795]
[56.59803772 -22.97357178]
[62.39552689 -9.13922596]
[68.19301605 4.69512081]
[73.99050140 18.52946663]
[94.45935059 14.65808201]
[115.25694275 15.85032654]
[135.14929199 22.03546143]
[152.95610046 32.84650040]
[167.62084961 47.64198685]
[178.27342224 65.54405212]
[184.28176880 85.49050903]
[199.23052979 84.25181580]
[214.17930603 83.01313019]
[229.12806702 81.77443695]
[244.07684326 80.53575134]
[259.02560425 79.29705811]
[273.97436523 78.05836487]
[288.92312622 76.81967926]
[304.20886230 69.48600769]
[315.48745728 82.14420319]
[306.44616699 96.48614502]
[290.16183472 91.76844788]
[275.21307373 93.00713348]
[260.26428223 94.24582672]
[245.31552124 95.48451996]
[230.36676025 96.72320557]
[215.41799927 97.96189880]
[200.46922302 99.20058441]
[185.52046204 100.43927765]
[184.67030334 112.03670502]
[182.25471497 123.41159058]
[178.31838989 134.35362244]
[172.93406677 144.66052246]
[166.20132446 154.14172363]
[158.24461365 162.62193298]
[167.45780945 174.45904541]
[176.67100525 186.29614258]
[185.88418579 198.13325500]
[195.09738159 209.97036743]
[213.95970154 211.58180237]
[225.47189331 226.20643616]
[222.70498657 244.28915405]
[232.30451965 255.81517029]
[241.90405273 267.34118652]
[251.50357056 278.86721802]
[261.10311890 290.39321899]
[270.70263672 301.91925049]
[285.48519897 310.22058105]
[281.60049438 326.72348022]
[264.66714478 327.55905151]
[259.17660522 311.51876831]
[249.57708740 299.99276733]
[239.97755432 288.46673584]
[230.37803650 276.94070435]
[220.77850342 265.41470337]
[211.17897034 253.88868713]
[199.84143066 255.33964539]
[189.10330200 251.08587646]
[181.68238831 242.07929993]
[179.51690674 230.48991394]
[183.26026917 219.18354797]
[174.04708862 207.34645081]
[164.83389282 195.50933838]
[155.62069702 183.67222595]
[146.40751648 171.83512878]
[139.02105713 176.10058594]
[131.24644470 179.60905457]
[123.16102600 182.32562256]
[114.84521484 184.22328186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 31]
[7 30]
[8 29]
[9 28]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[42 124]
[43 123]
[44 122]
[45 121]
[50 116]
[51 115]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[62 109]
[63 108]
[65 106]
[66 105]
[67 104]
[70 102]
[71 101]
[72 100]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[83 90]
[84 89]
[131 149]
[132 148]
[133 147]
[134 146]
[135 145]
[136 144]
[137 143]
[138 142]
[155 185]
[156 184]
[157 183]
[158 182]
[159 181]
[162 176]
[163 175]
[164 174]
[165 173]
[166 172]
[167 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
