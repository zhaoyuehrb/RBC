%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGCCAUAUUCCCUCCCGCCGGCCGGCUCCGCGGCGCGCAGCCACCAUGAGCACCGCCGCCUUCCACAUCUCCAGCCUCCUGGAGAAGAUGACGUCCAGCGACAAGGACUUCAGGUUCAUGGCCACCAGCGACCUGAUGUCGGAGU\
) } def
/len { sequence length } bind def

/coor [
[121.48555756 227.84268188]
[120.81515503 242.96978760]
[115.26699829 257.05865479]
[105.44290161 268.58108521]
[92.40851593 276.28713989]
[77.57770538 279.34097290]
[62.55921555 277.41128540]
[48.98213196 270.70745850]
[38.31919861 259.95660400]
[31.72705078 246.32495117]
[29.92075539 231.29112244]
[33.09624481 216.48588562]
[40.90906525 203.51519775]
[52.51174164 193.78604126]
[66.64570618 188.35374451]
[81.77780151 187.80755615]
[86.11328125 173.44776917]
[90.44875336 159.08798218]
[94.78423309 144.72817993]
[81.16302490 139.90771484]
[70.03347015 131.15655518]
[62.45462036 119.54378510]
[59.07055283 106.39619446]
[60.05856323 93.14777374]
[45.99933243 87.91918945]
[31.76691818 94.24976349]
[17.58334351 88.74696350]
[11.63581944 75.13951874]
[-2.42341018 69.91093445]
[-16.48263931 64.68235779]
[-26.17094040 69.80719757]
[-36.85744476 68.73818970]
[-44.99730682 62.07477570]
[-48.02601242 52.23115158]
[-61.85395813 46.41841888]
[-75.68190765 40.60568619]
[-89.50985718 34.79294968]
[-105.23004913 36.57789993]
[-113.96453094 24.51315308]
[-127.79247284 18.70042038]
[-143.51266479 20.48537064]
[-152.24714661 8.42062187]
[-166.07508850 2.60788774]
[-179.89978027 9.91623974]
[-195.17687988 6.57790089]
[-204.69299316 -5.83086634]
[-203.95492554 -21.45102119]
[-193.31114197 -32.90720749]
[-177.78733826 -34.79015732]
[-164.71337891 -26.21080780]
[-160.26235962 -11.22005939]
[-146.43441772 -5.40732574]
[-131.70329285 -7.60804176]
[-121.97974396 4.87247229]
[-108.15179443 10.68520641]
[-93.42066956 8.48449039]
[-83.69712067 20.96500397]
[-69.86917114 26.77773857]
[-56.04122543 32.59047318]
[-42.21327972 38.40320587]
[-23.31014824 34.52162170]
[-11.25405884 50.62312698]
[2.80517054 55.85170746]
[16.86440086 61.08028793]
[30.25803185 54.66575241]
[44.59057236 59.76799774]
[51.22791290 73.85996246]
[65.28713989 79.08854675]
[70.60091400 68.90866852]
[78.94502258 60.16747284]
[89.90071869 53.77043533]
[102.77997589 50.49317551]
[106.20523834 35.88949203]
[109.63050079 21.28580856]
[113.05576324 6.68212605]
[116.48102570 -7.92155743]
[119.90628815 -22.52524185]
[123.33155060 -37.12892532]
[118.07626343 -52.66320801]
[129.10348511 -64.80126953]
[145.06935120 -61.05651093]
[149.54954529 -45.28121948]
[137.93524170 -33.70366287]
[134.50997925 -19.09997749]
[131.08471680 -4.49629450]
[127.65944672 10.10738945]
[124.23418427 24.71107292]
[120.80892181 39.31475449]
[117.38365936 53.91843796]
[123.26136017 58.57704926]
[132.57858276 46.82164764]
[137.80717468 32.76242447]
[152.79402161 33.39060974]
[156.82774353 47.83806610]
[144.33398438 56.13886261]
[135.01675415 67.89426422]
[140.89445496 72.55287170]
[154.33013916 65.88334656]
[167.76580811 59.21381760]
[176.38534546 45.26262283]
[192.76689148 46.02214813]
[200.05853271 60.71105957]
[190.75924683 74.21865845]
[174.43534851 72.64949036]
[160.99966431 79.31902313]
[147.56399536 85.98854828]
[148.43792725 99.09252930]
[145.84887695 111.65895081]
[140.14106750 122.81078339]
[131.87037659 131.81343079]
[144.18760681 140.37413025]
[156.50485229 148.93482971]
[172.25263977 150.45729065]
[178.28784180 164.07440186]
[190.60507202 172.63510132]
[202.92231750 181.19581604]
[215.23954773 189.75651550]
[227.55679321 198.31721497]
[239.87403870 206.87791443]
[252.19126892 215.43862915]
[267.55090332 212.84638977]
[279.92037964 221.70362854]
[282.29702759 236.36265564]
[294.61425781 244.92337036]
[306.93148804 253.48406982]
[323.38851929 257.55871582]
[324.02883911 274.50057983]
[307.92636108 279.80584717]
[298.37078857 265.80130005]
[286.05355835 257.24060059]
[273.73629761 248.67990112]
[259.16824341 251.56204224]
[246.55485535 243.05574036]
[243.63056946 227.75585938]
[231.31332397 219.19515991]
[218.99609375 210.63446045]
[206.67884827 202.07374573]
[194.36161804 193.51304626]
[182.04437256 184.95234680]
[169.72714233 176.39164734]
[154.86036682 175.48149109]
[147.94415283 161.25207520]
[135.62690735 152.69136047]
[123.30966949 144.13066101]
[109.14402771 149.06365967]
[104.80854797 163.42344666]
[100.47306824 177.78324890]
[96.13759613 192.14303589]
[108.43919373 200.97193909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 148]
[17 147]
[18 146]
[19 145]
[24 68]
[25 67]
[28 64]
[29 63]
[30 62]
[34 60]
[35 59]
[36 58]
[37 57]
[39 55]
[40 54]
[42 52]
[43 51]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
[97 106]
[98 105]
[99 104]
[110 144]
[111 143]
[112 142]
[114 140]
[115 139]
[116 138]
[117 137]
[118 136]
[119 135]
[120 134]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
