%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCUACGCUUGCGCGGCGCAACAGGGCCGACUGCAGCUGGAAGAUGGCGGCGUCCGUGGUCUGUCGGGCCGCUACCGCCGGGGCACAAGUGCUAUUGCGCGCCCGCCGCUCGCCGGCCCUGCUGCGGACGCCAGCCUUGCGGA\
) } def
/len { sequence length } bind def

/coor [
[-104.29621124 317.71615601]
[-113.76414490 315.59564209]
[-122.43064880 311.26483154]
[-129.78913879 304.98443604]
[-142.50225830 312.94540405]
[-155.21537781 320.90634155]
[-167.92848206 328.86727905]
[-173.59254456 336.12796021]
[-181.00189209 336.85934448]
[-193.88334656 344.54492188]
[-206.76481628 352.23049927]
[-212.58378601 359.36761475]
[-220.00715637 359.93942261]
[-233.05099487 367.34603882]
[-246.09483337 374.75268555]
[-258.97628784 382.43826294]
[-271.68939209 390.39920044]
[-284.40252686 398.36016846]
[-297.11563110 406.32110596]
[-298.04885864 421.81008911]
[-307.93402100 433.77099609]
[-322.97009277 437.60458374]
[-337.37536621 431.83679199]
[-345.61074829 418.68542480]
[-344.50955200 403.20748901]
[-334.49520874 391.35452271]
[-319.41845703 387.68426514]
[-305.07656860 393.60800171]
[-292.36346436 385.64703369]
[-279.65036011 377.68609619]
[-266.93725586 369.72512817]
[-265.00357056 365.28607178]
[-260.22177124 362.04885864]
[-253.50146484 361.70883179]
[-240.45762634 354.30221558]
[-227.41378784 346.89556885]
[-214.45037842 339.34902954]
[-201.56892395 331.66345215]
[-188.68746948 323.97790527]
[-175.88943481 316.15417480]
[-163.17633057 308.19323730]
[-150.46321106 300.23226929]
[-137.75009155 292.27133179]
[-140.12376404 271.75250244]
[-131.89935303 252.72598267]
[-115.21076202 240.31047058]
[-94.47943878 237.88543701]
[-75.24311066 246.17141724]
[-63.86852646 236.39292908]
[-52.49393845 226.61445618]
[-41.22521591 216.71415710]
[-30.06365585 206.69319153]
[-18.90209579 196.67224121]
[-7.74053717 186.65127563]
[3.42102170 176.63032532]
[14.58258057 166.60935974]
[25.74414062 156.58840942]
[36.90570068 146.56744385]
[48.06725693 136.54649353]
[59.22881699 126.52553558]
[70.39037323 116.50457764]
[81.55193329 106.48361969]
[80.49197388 98.65643311]
[82.61499023 91.04846954]
[87.57460022 84.90106201]
[94.56157684 81.21724701]
[102.43589783 80.59807587]
[109.91277313 83.14457703]
[121.89446259 74.12021637]
[133.87615967 65.09585571]
[145.85784912 56.07149506]
[157.83953857 47.04713440]
[169.72344971 37.89438629]
[181.50819397 28.61431694]
[181.04307556 13.21659470]
[189.63339233 0.64441007]
[203.81178284 -4.39912653]
[218.07060242 -0.17728172]
[229.85534668 -9.45735264]
[235.91059875 -24.07393456]
[250.69662476 -25.86912346]
[262.48138428 -35.14919662]
[274.26611328 -44.42926788]
[286.05087280 -53.70933533]
[297.73510742 -63.11565781]
[309.31744385 -72.64714050]
[315.05682373 -87.39062500]
[329.80078125 -89.50354004]
[341.38314819 -99.03502655]
[352.96548462 -108.56650543]
[354.24377441 -124.31901550]
[366.34030151 -134.49003601]
[382.07839966 -133.04527283]
[392.12097168 -120.84188843]
[390.50988770 -105.11992645]
[378.20101929 -95.20695496]
[362.49697876 -96.98416138]
[350.91461182 -87.45267487]
[339.33227539 -77.92118835]
[334.42135620 -63.85946274]
[318.84893799 -61.06479645]
[307.26657104 -51.53330994]
[304.07727051 -44.80562592]
[295.33093262 -41.92459106]
[283.54620361 -32.64451981]
[271.76144409 -23.36444664]
[259.97671509 -14.08437634]
[254.76437378 -0.13156806]
[239.13542175 2.32739496]
[227.35066223 11.60746574]
[228.11123657 26.45871353]
[219.88360596 39.05911636]
[205.64759827 44.46185303]
[190.78826904 40.39906311]
[179.00350952 49.67913437]
[175.67019653 56.33664322]
[166.86389160 59.02882385]
[154.88220215 68.05318451]
[142.90051270 77.07754517]
[130.91882324 86.10190582]
[118.93713379 95.12626648]
[112.42539978 115.09893799]
[91.57289124 117.64517975]
[80.41133118 127.66613770]
[69.24977875 137.68708801]
[58.08821487 147.70805359]
[46.92665863 157.72900391]
[35.76509857 167.74996948]
[24.60353851 177.77091980]
[13.44197941 187.79188538]
[2.28042054 197.81283569]
[-8.88113880 207.83380127]
[-20.04269791 217.85475159]
[-31.20425606 227.87571716]
[-35.54089737 235.99928284]
[-42.71545410 237.98904419]
[-54.09004211 247.76751709]
[-65.46463013 257.54602051]
[-61.66664124 266.61230469]
[-60.16478729 276.31228638]
[-61.04065704 286.07446289]
[-64.23597717 295.32546997]
[-69.55641174 303.52346802]
[-76.68340302 310.19015503]
[-85.19320679 314.93841553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[7 40]
[9 39]
[10 38]
[11 37]
[13 36]
[14 35]
[15 34]
[16 31]
[17 30]
[18 29]
[19 28]
[48 138]
[49 137]
[50 136]
[51 134]
[52 133]
[53 132]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[62 123]
[68 121]
[69 120]
[70 119]
[71 118]
[72 117]
[73 115]
[74 114]
[78 110]
[79 109]
[81 107]
[82 106]
[83 105]
[84 104]
[85 102]
[86 101]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
