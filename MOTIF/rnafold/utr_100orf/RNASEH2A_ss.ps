%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGAGACCCGCUCCUGCAGUAUUAGUUCUUGCAGCUGGUGGUGGCGGCUGAGGCGGCAUGGAUCUCAGCGAGCUGGAGAGAGACAAUACAGGCCGCUGUCGCCUGAGUUCGCCUGUGCCCGCGGUGUGCCGCAAGGAGCCUUGCGUCCUGGGCGUCG\
) } def
/len { sequence length } bind def

/coor [
[125.11854553 497.28900146]
[124.53330231 482.30041504]
[123.94805908 467.31182861]
[123.36282349 452.32327271]
[122.77758026 437.33468628]
[114.54959869 424.91897583]
[121.74258423 410.82742310]
[121.15734100 395.83886719]
[120.42589569 380.85668945]
[119.54830933 365.88238525]
[104.07984924 354.11074829]
[102.14660645 334.46426392]
[115.42545319 319.44906616]
[113.67329407 304.55175781]
[111.92113495 289.65444946]
[110.16896820 274.75711060]
[108.41680908 259.85980225]
[106.66464996 244.96249390]
[104.76722717 230.08299255]
[102.72473145 215.22270203]
[93.32646942 203.66752625]
[99.11257935 188.94233704]
[97.07007599 174.08204651]
[95.02758026 159.22175598]
[92.98507690 144.36146545]
[84.39261627 156.65657043]
[70.26422119 161.69526672]
[55.83066177 157.61207581]
[46.43568039 145.91873169]
[45.55759048 130.94445801]
[53.52148438 118.23318481]
[67.37888336 112.49102020]
[81.99935913 115.84388733]
[91.97064209 127.05197906]
[92.26331329 112.05484009]
[85.67877960 99.72051239]
[92.73954010 87.65248871]
[93.03221893 72.65534210]
[85.56565094 58.70682907]
[93.54981232 46.13294601]
[93.84249115 31.13580322]
[94.13516235 16.13865852]
[94.42784119 1.14151382]
[83.75258636 -10.20206356]
[84.26304626 -25.40713120]
[95.14320374 -35.51444626]
[95.43587494 -50.51158905]
[95.72855377 -65.50873566]
[96.02123260 -80.50588226]
[96.31390381 -95.50302124]
[96.46025085 -110.50231171]
[96.46025085 -125.50231171]
[88.72295380 -139.30247498]
[96.46025085 -152.02975464]
[96.46025085 -167.02975464]
[96.46025085 -182.02975464]
[96.46025085 -197.02975464]
[96.46025085 -212.02975464]
[96.46025085 -227.02975464]
[96.46025085 -242.02975464]
[96.46025085 -257.02975464]
[86.78842926 -245.56433105]
[72.49488831 -241.01521301]
[57.97538757 -244.78140259]
[47.69519806 -255.70466614]
[44.81584549 -270.42572021]
[50.22282791 -284.41729736]
[62.25330734 -293.37652588]
[77.20748901 -294.54809570]
[90.48641968 -287.57168579]
[98.00640106 -274.59271240]
[100.62713623 -289.36196899]
[103.24787140 -304.13125610]
[94.46601868 -316.99661255]
[97.33421326 -331.93740845]
[109.65346527 -340.23028564]
[112.27420044 -354.99957275]
[114.89493561 -369.76885986]
[102.25524139 -378.26345825]
[94.16886902 -391.16812134]
[92.03683472 -406.24703979]
[96.22851562 -420.88772583]
[106.01768494 -432.55358887]
[119.70831299 -439.22341919]
[134.92840576 -439.74163818]
[149.04100037 -434.01849365]
[159.60099792 -423.04550171]
[164.77882385 -408.72384644]
[163.67736816 -393.53479004]
[156.48748779 -380.10998535]
[144.45486450 -370.77532959]
[129.66421509 -367.14813232]
[127.04347992 -352.37884521]
[124.42274475 -337.60955811]
[133.13667297 -325.58444214]
[130.68927002 -310.56896973]
[118.01715851 -301.51052856]
[115.39642334 -286.74124146]
[112.77568817 -271.97195435]
[111.46025085 -257.02975464]
[111.46025085 -242.02975464]
[111.46025085 -227.02975464]
[111.46025085 -212.02975464]
[111.46025085 -197.02975464]
[111.46025085 -182.02975464]
[111.46025085 -167.02975464]
[111.46025085 -152.02975464]
[119.19755554 -139.30247498]
[111.46025085 -125.50231171]
[111.46025085 -110.50231171]
[114.62100220 -103.77947235]
[111.31105042 -95.21035004]
[111.01837158 -80.21320343]
[110.72570038 -65.21605682]
[110.43302155 -50.21891403]
[110.14034271 -35.22177124]
[120.61786652 -24.69764900]
[120.53469086 -9.48424339]
[109.42498779 1.43419027]
[109.13230896 16.43133545]
[108.83963013 31.42847824]
[108.54695892 46.42562485]
[116.03445435 59.30144119]
[108.02935791 72.94802094]
[107.73668671 87.94515991]
[114.32122040 100.27948761]
[107.26045990 112.34751129]
[106.96778107 127.34465790]
[107.84536743 142.31896973]
[109.88787079 157.17926025]
[111.93036652 172.03955078]
[113.97286987 186.89982605]
[123.51722717 199.51791382]
[117.58502197 213.18020630]
[119.62751770 228.04048157]
[123.91577148 236.16432190]
[121.56196594 243.21034241]
[123.31412506 258.10763550]
[125.06628418 273.00497437]
[126.81844330 287.90228271]
[128.57060242 302.79959106]
[130.32276917 317.69689941]
[140.15925598 322.05053711]
[147.22683716 330.05200195]
[150.28582764 340.19558716]
[148.84249878 350.60983276]
[143.22735596 359.40255737]
[134.52261353 365.00482178]
[135.40019226 379.97912598]
[139.04196167 388.41256714]
[136.14591980 395.25360107]
[136.73115540 410.24218750]
[145.00099182 423.72998047]
[137.76615906 436.74945068]
[138.35139465 451.73800659]
[138.93664551 466.72659302]
[139.52188110 481.71517944]
[140.10711670 496.70376587]
[146.76684570 512.29492188]
[133.62857056 523.01043701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[7 152]
[8 151]
[9 149]
[10 148]
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 135]
[20 134]
[22 132]
[23 131]
[24 130]
[25 129]
[34 128]
[35 127]
[37 125]
[38 124]
[40 122]
[41 121]
[42 120]
[43 119]
[46 116]
[47 115]
[48 114]
[49 113]
[50 112]
[51 110]
[52 109]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
[71 99]
[72 98]
[73 97]
[76 94]
[77 93]
[78 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
