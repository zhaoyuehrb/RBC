%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUUACAGAAACUCAUGGAGCCAGAAGCUGGGACCAAUAGGACCGCUGUUGCUGAGUUCAUUCUACUGGGCCUAGUGCAAACAGAAGAGAUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[72.54338837 119.85891724]
[69.23384857 114.20161438]
[67.07533264 108.01300812]
[52.07714462 108.24628448]
[37.07895660 108.47956085]
[22.08077240 108.71283722]
[7.08258629 108.94611359]
[4.60996246 115.86763000]
[0.63951606 122.03433990]
[-4.61563301 127.12828827]
[-10.87634850 130.88871765]
[-17.81229973 133.12547302]
[-25.05938911 133.72854614]
[-32.23886490 132.67349243]
[-38.97711563 130.02235413]
[-44.92510986 125.92005920]
[-49.77647400 120.58647156]
[-53.28328323 114.30465698]
[-55.26870346 107.40585327]
[-55.63591385 100.25202179]
[-69.98577881 95.88379669]
[-84.33564758 91.51557922]
[-98.15888977 98.69580841]
[-112.64946747 94.06139374]
[-119.40953064 80.83879089]
[-133.75939941 76.47056580]
[-148.10926819 72.10234833]
[-162.45912170 67.73413086]
[-179.37254333 68.90581512]
[-185.18054199 52.97774506]
[-171.48275757 42.98739624]
[-158.09091187 53.38426208]
[-143.74104309 57.75248337]
[-129.39117432 62.12070465]
[-115.04131317 66.48892212]
[-102.06039429 59.27564621]
[-87.44535828 63.50122452]
[-79.96742249 77.16571045]
[-65.61756134 81.53393555]
[-51.26769257 85.90215302]
[-32.14618683 71.28836823]
[-8.06583881 74.48880768]
[6.84930944 93.94792938]
[21.84749603 93.71465302]
[36.84568024 93.48137665]
[51.84386826 93.24810028]
[66.84205627 93.01482391]
[80.87939453 72.02421570]
[105.53496552 66.56938171]
[127.11680603 79.67954254]
[140.81365967 73.56429291]
[154.51051331 67.44903564]
[168.20735168 61.33378220]
[181.90420532 55.21852875]
[195.30093384 48.47110367]
[208.36837769 41.10619354]
[221.43582153 33.74127960]
[234.50326538 26.37636948]
[242.72648621 12.86011791]
[257.61297607 13.35155201]
[270.68041992 5.98664093]
[283.74786377 -1.37827039]
[296.81530762 -8.74318123]
[309.88275146 -16.10809326]
[313.88931274 -31.39609337]
[327.57461548 -39.30103683]
[342.81942749 -35.13306046]
[350.57922363 -21.36495018]
[346.25030518 -6.16508198]
[332.40090942 1.44873190]
[317.24768066 -3.04064918]
[304.18023682 4.32426214]
[291.11279297 11.68917274]
[278.04534912 19.05408478]
[264.97790527 26.41899490]
[257.68933105 39.40845871]
[241.86816406 39.44381332]
[228.80072021 46.80872345]
[215.73329163 54.17363739]
[202.66584778 61.53854752]
[201.38465881 65.00461578]
[198.25735474 67.96681213]
[193.56814575 69.51493073]
[188.01945496 68.91537476]
[174.32261658 75.03063202]
[160.62576294 81.14588928]
[146.92890930 87.26113892]
[133.23205566 93.37639618]
[133.88557434 99.89797211]
[133.27134705 106.42337036]
[131.41236877 112.70845795]
[128.37820435 118.51809692]
[124.28234100 123.63493347]
[119.27803040 127.86753845]
[113.55249023 131.05755615]
[107.31992340 133.08566284]
[100.81349945 133.87596130]
[94.27664185 133.39888000]
[87.95391083 131.67228699]
[82.08184814 128.76077271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[20 40]
[21 39]
[22 38]
[25 35]
[26 34]
[27 33]
[28 32]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[55 80]
[56 79]
[57 78]
[58 77]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
