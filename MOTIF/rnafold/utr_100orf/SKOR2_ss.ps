%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUUCCAGUCCGCUGCCAGGGCCCAACGACAUCCUGCUGGCGUCGCCGUCGAGCGCCUUCCAGCCCGACACGCUGAGCCAGCCGCGGCCAGGGCACG\
) } def
/len { sequence length } bind def

/coor [
[13.69790840 306.93896484]
[10.78470230 310.11196899]
[7.33897972 311.44689941]
[0.17818178 324.62728882]
[-6.98261642 337.80770874]
[-14.14341450 350.98809814]
[-16.39192390 367.79229736]
[-33.16184235 370.28350830]
[-40.19808197 354.85861206]
[-27.32381630 343.82730103]
[-20.16301727 330.64691162]
[-13.00221920 317.46649170]
[-5.84142113 304.28610229]
[0.69684517 290.78607178]
[6.59834909 276.99575806]
[6.33128786 269.47552490]
[12.90380955 262.87289429]
[19.23133469 249.27281189]
[25.55886078 235.67271423]
[31.88638687 222.07263184]
[26.55469131 208.21229553]
[32.77796173 194.32974243]
[47.35210037 188.83134460]
[53.67962265 175.23126221]
[60.00714874 161.63116455]
[66.33467865 148.03108215]
[61.91808701 138.57751465]
[63.56384277 128.04917908]
[70.95598602 120.06875610]
[81.75946808 117.52108765]
[88.92026520 104.34068298]
[74.23546600 107.39955139]
[60.89881516 100.53414917]
[54.85601044 86.80518341]
[58.80103302 72.33325195]
[70.97512817 63.57017899]
[85.95088196 64.42268372]
[97.05185699 74.51071167]
[99.32880402 89.33821869]
[109.16773224 78.01587677]
[119.00666046 66.69352722]
[128.84559631 55.37118530]
[138.68452454 44.04884338]
[148.52345276 32.72649765]
[151.87294006 24.03319550]
[158.84873962 21.21117210]
[169.03503418 10.20029449]
[179.04885864 -0.96766722]
[188.88778687 -12.29001141]
[191.88951111 -30.37416458]
[208.56004333 -35.60820770]
[218.04208374 -47.23106384]
[227.52412415 -58.85391998]
[237.00617981 -70.47677612]
[239.73446655 -86.06096649]
[253.77514648 -91.03175354]
[263.25717163 -102.65460968]
[259.16543579 -117.62248230]
[264.68450928 -132.12487793]
[277.69223022 -140.58532715]
[293.18682861 -139.75061035]
[305.21035767 -129.94171143]
[309.13949585 -114.93032837]
[303.46340942 -100.48865509]
[290.36468506 -92.16981506]
[274.88003540 -93.17256927]
[265.39801025 -81.54970551]
[263.34793091 -66.79685974]
[248.62902832 -60.99473190]
[239.14698792 -49.37187576]
[229.66493225 -37.74901581]
[220.18289185 -26.12616158]
[221.06826782 -13.95101833]
[213.10997009 -4.16888332]
[200.21012878 -2.45108223]
[190.37120056 8.87126160]
[188.32382202 16.11237526]
[180.04591370 20.38658714]
[169.85961914 31.39746475]
[159.84579468 42.56542587]
[150.00686646 53.88777161]
[140.16793823 65.21011353]
[130.32901001 76.53246307]
[120.49008179 87.85480499]
[110.65115356 99.17714691]
[102.10066986 111.50148010]
[94.93986511 124.68188477]
[96.53904724 144.65754700]
[79.93476105 154.35859680]
[73.60723877 167.95869446]
[67.27971649 181.55877686]
[60.95218658 195.15887451]
[66.13363647 209.84867859]
[59.52288818 223.55096436]
[45.48647690 228.40014648]
[39.15895081 242.00024414]
[32.83142471 255.60032654]
[26.50389862 269.20040894]
[20.38864517 282.89727783]
[14.48714066 296.68756104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[6 10]
[14 100]
[15 99]
[17 98]
[18 97]
[19 96]
[20 95]
[23 92]
[24 91]
[25 90]
[26 89]
[30 87]
[31 86]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[44 80]
[46 79]
[47 78]
[48 76]
[49 75]
[51 72]
[52 71]
[53 70]
[54 69]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
