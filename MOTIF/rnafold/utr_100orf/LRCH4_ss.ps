%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCAACUACGGCGGCUCCAAGGAGGGGGUGGGGGAAGGAGGGACGGCCGGUCCCGUCAGUCAGGCAGCGGGAGCCGCCGGGAGCGGAUGGCGGCGGCCGUAGCGGCUCCACUCGCCGCCGGGGGUGAGGAGGCGGCAGCCACGACCUCCGUGCCCGGGUCUCCAGGUCUGCCGGGGAGACGCAGUG\
) } def
/len { sequence length } bind def

/coor [
[76.07143402 188.10148621]
[71.09549713 173.40388489]
[75.74104309 158.59852600]
[88.22177887 149.37838745]
[87.97245789 134.38046265]
[79.96096802 128.94833374]
[73.92185211 121.80245972]
[70.17249298 113.58467102]
[68.83584595 104.97822571]
[69.84208679 96.65202332]
[72.94559479 89.20893097]
[60.91374969 80.25154877]
[48.88190079 71.29416656]
[36.85005188 62.33679199]
[24.81820488 53.37941360]
[12.78635693 44.42203522]
[0.75450945 35.46465302]
[0.52144396 42.32366180]
[-1.53482974 49.27541351]
[-11.91877651 60.10009003]
[-13.02436447 76.10500336]
[-26.30815887 85.10057831]
[-41.57997131 80.18618011]
[-47.12457275 65.13171387]
[-38.68862152 51.48567581]
[-22.74345398 49.71614456]
[-12.35950756 38.89146423]
[-12.35950756 23.89146614]
[-22.74345398 13.06678867]
[-33.12740326 2.24211097]
[-43.51134872 -8.58256626]
[-53.89529419 -19.40724373]
[-64.27924347 -30.23192215]
[-74.66319275 -41.05659866]
[-85.04713440 -51.88127518]
[-98.61529541 -58.27698898]
[-113.57334900 -59.39794159]
[-125.48949432 -49.36582947]
[-140.64312744 -50.71571732]
[-150.13377380 -62.13776398]
[-165.09182739 -63.25871658]
[-180.05868530 -64.25531006]
[-195.03330994 -65.12748718]
[-210.00793457 -65.99965668]
[-224.98255920 -66.87183380]
[-239.95716858 -67.74400330]
[-252.84939575 -58.19569397]
[-268.31506348 -62.46104050]
[-274.49020386 -77.26803589]
[-266.63781738 -91.25801086]
[-250.78155518 -93.69906616]
[-239.08500671 -82.71862793]
[-224.11038208 -81.84645081]
[-209.13575745 -80.97428131]
[-194.16113281 -80.10210419]
[-179.18650818 -79.22993469]
[-172.31314087 -81.98490143]
[-163.97087097 -78.21677399]
[-149.01281738 -77.09582520]
[-137.92581177 -86.97578430]
[-122.74024200 -86.05206299]
[-112.45240021 -74.35599518]
[-97.49433899 -73.23504639]
[-92.81816864 -79.09878540]
[-83.46582031 -90.82625580]
[-78.78964996 -96.68998718]
[-83.21097565 -111.02358246]
[-94.67220306 -121.93004608]
[-91.03007507 -136.37248230]
[-95.45140076 -150.70608521]
[-99.87273407 -165.03967285]
[-104.29405975 -179.37326050]
[-117.98614502 -186.80055237]
[-122.26580811 -201.39982605]
[-115.10064697 -214.40736389]
[-119.52198029 -228.74096680]
[-123.94330597 -243.07455444]
[-128.36463928 -257.40814209]
[-132.78596497 -271.74172974]
[-137.20729065 -286.07531738]
[-141.62861633 -300.40893555]
[-156.35581970 -305.29656982]
[-165.37011719 -317.92675781]
[-165.20532227 -333.44296265]
[-155.92478943 -345.87887573]
[-141.09710693 -350.45260620]
[-126.42378235 -345.40548706]
[-117.54703522 -332.67825317]
[-117.88014221 -317.16473389]
[-127.29502106 -304.83026123]
[-122.87369537 -290.49667358]
[-118.45236969 -276.16305542]
[-114.03104401 -261.82946777]
[-109.60971069 -247.49588013]
[-105.18838501 -233.16229248]
[-100.76705933 -218.82870483]
[-87.51951599 -212.11764526]
[-82.83147430 -197.64433289]
[-89.96046448 -183.79458618]
[-85.53913879 -169.46099854]
[-81.11781311 -155.12741089]
[-76.69648743 -140.79380798]
[-65.55149841 -130.91258240]
[-68.87738037 -115.44490814]
[-64.45605469 -101.11132050]
[-60.80821228 -84.07061005]
[-65.15431213 -70.11501312]
[-74.22245789 -62.26522446]
[-63.83851242 -51.44054794]
[-53.45456314 -40.61586761]
[-43.07061768 -29.79119110]
[-32.68667221 -18.96651268]
[-22.30272293 -8.14183617]
[-11.91877651 2.68284154]
[-1.53482974 13.50751877]
[9.71188831 23.43280602]
[21.74373627 32.39018631]
[33.77558517 41.34756470]
[45.80743027 50.30494308]
[57.83927917 59.26232147]
[69.87112427 68.21970367]
[81.90297699 77.17707825]
[108.58536530 72.16693878]
[127.80907440 91.33723450]
[142.79612732 90.71408081]
[157.78317261 90.09092712]
[172.77021790 89.46778107]
[187.75727844 88.84462738]
[201.22409058 80.54069519]
[214.26181030 87.74258423]
[229.24887085 87.11943054]
[244.23591614 86.49627686]
[259.22296143 85.87312317]
[274.21002197 85.24996948]
[289.19137573 84.50228119]
[304.16598511 83.63011169]
[313.35836792 70.97963715]
[328.54409790 67.24773407]
[342.55297852 74.19648743]
[348.77044678 88.54490662]
[344.26077271 103.51811218]
[331.15332031 112.04621887]
[315.63699341 110.10250092]
[305.03817749 98.60473633]
[290.06353760 99.47690582]
[283.55648804 103.01119232]
[274.83316040 100.23702240]
[259.84613037 100.86017609]
[244.85906982 101.48332977]
[229.87202454 102.10648346]
[214.88496399 102.72962952]
[202.49011230 110.98899078]
[188.38043213 103.83167267]
[173.39337158 104.45482635]
[158.40632629 105.07798004]
[143.41928101 105.70113373]
[128.43222046 106.32428741]
[129.62062073 110.89062500]
[130.05886841 115.87077332]
[129.66032410 121.14103699]
[138.11012268 133.53462219]
[146.55992126 145.92820740]
[155.00971985 158.32177734]
[163.45951843 170.71536255]
[171.90931702 183.10894775]
[188.67623901 190.70039368]
[189.32513428 208.22930908]
[197.97976685 220.48072815]
[213.08963013 226.85441589]
[214.85603333 243.15815735]
[201.46185303 252.62005615]
[186.68585205 245.50653076]
[185.72834778 229.13536072]
[177.07371521 216.88394165]
[165.19848633 214.51901245]
[157.88999939 204.36653137]
[159.51574707 191.55874634]
[151.06593323 179.16516113]
[142.61613464 166.77159119]
[134.16633606 154.37800598]
[125.71653748 141.98442078]
[117.26673889 129.59083557]
[102.97038269 134.13113403]
[103.21970367 149.12907410]
[116.00000000 157.92927551]
[121.13509369 172.57203674]
[116.65042114 187.42691040]
[104.27044678 196.78190613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 184]
[5 183]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[17 116]
[19 27]
[20 26]
[28 115]
[29 114]
[30 113]
[31 112]
[32 111]
[33 110]
[34 109]
[35 108]
[36 63]
[37 62]
[40 59]
[41 58]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[66 105]
[67 104]
[69 102]
[70 101]
[71 100]
[72 99]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[124 157]
[125 156]
[126 155]
[127 154]
[128 153]
[130 151]
[131 150]
[132 149]
[133 148]
[134 147]
[135 145]
[136 144]
[160 182]
[161 181]
[162 180]
[163 179]
[164 178]
[165 177]
[167 174]
[168 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
