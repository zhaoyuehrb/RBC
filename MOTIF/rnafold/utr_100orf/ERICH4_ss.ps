%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAGCCAUAGCUCAGAGACGAUGGAACUGUGGAGGCAGCUGAAUCAGGCUGGACUGGUGCCUCCGGGGCUGGGCCCACCCCCCCAGGCCCUGAGGGAGGUCUCCCCAGUGGAAAUCCCUG\
) } def
/len { sequence length } bind def

/coor [
[73.65200043 113.54706573]
[68.37821198 95.94818878]
[55.72157669 103.99863434]
[52.17478561 119.16629791]
[39.22447586 127.15029144]
[24.78628540 123.67549133]
[12.12965298 131.72593689]
[-0.52698082 139.77638245]
[-13.18361378 147.82682800]
[-25.84024811 155.87725830]
[-38.49687958 163.92770386]
[-45.98854828 177.86274719]
[-60.88008881 178.16488647]
[-73.53672028 186.21533203]
[-72.79759979 201.55642700]
[-79.84230804 215.20442200]
[-92.77587128 223.48805237]
[-108.11920929 224.17909241]
[-121.74504852 217.09162903]
[-129.98809814 204.13217163]
[-130.63104248 188.78674316]
[-123.50090790 175.18318176]
[-110.51567841 166.98078918]
[-95.16830444 166.38595581]
[-81.58716583 173.55870056]
[-68.93053436 165.50825500]
[-62.34415054 152.14903259]
[-46.54732513 151.27107239]
[-33.89068985 143.22062683]
[-21.23405647 135.17018127]
[-8.57742405 127.11974335]
[4.07920980 119.06930542]
[16.73584366 111.01885986]
[19.70926666 96.46913910]
[32.43021011 88.12454987]
[47.67113495 91.34200287]
[60.32777023 83.29155731]
[61.48540115 68.33629608]
[50.21842194 58.43401337]
[38.95144272 48.53173065]
[27.68446350 38.62944794]
[11.93102074 39.89616394]
[-0.04972873 29.58901978]
[-1.14981735 13.82306385]
[9.28341770 1.95195782]
[25.06012344 1.01861787]
[36.82025909 11.57677841]
[37.58674622 27.36246872]
[48.85372543 37.26475143]
[60.12070465 47.16703415]
[71.38768005 57.06931305]
[86.38768005 57.06931305]
[97.65466309 47.16703415]
[108.92163849 37.26475143]
[120.18862152 27.36246872]
[131.45559692 17.46018791]
[129.89228821 5.53249311]
[134.28889465 -5.53529739]
[143.42391968 -12.98636913]
[154.91198730 -15.02654839]
[165.82595825 -11.25525284]
[177.58775330 -20.56439400]
[189.34954834 -29.87353706]
[201.11134338 -39.18267822]
[207.13049316 -53.81416702]
[221.91204834 -55.64586258]
[233.67384338 -64.95500183]
[245.43563843 -74.26414490]
[251.45478821 -88.89563751]
[266.23632812 -90.72733307]
[277.99813843 -100.03647614]
[289.75991821 -109.34561157]
[301.52172852 -118.65475464]
[313.28350830 -127.96389771]
[312.50985718 -143.46166992]
[321.02148438 -156.43595886]
[335.54550171 -161.89785767]
[350.49713135 -157.74717712]
[360.12716675 -145.57992554]
[360.73266602 -130.07467651]
[352.08081055 -117.19349670]
[337.49838257 -111.88946533]
[322.59265137 -116.20210266]
[310.83087158 -106.89295959]
[299.06906128 -97.58381653]
[287.30728149 -88.27467346]
[275.54547119 -78.96553040]
[270.36761475 -64.99990082]
[254.74478149 -62.50234985]
[242.98298645 -53.19320679]
[231.22117615 -43.88406372]
[226.04331970 -29.91843033]
[210.42048645 -27.42088127]
[198.65869141 -18.11174011]
[186.89689636 -8.80259800]
[175.13510132 0.50654465]
[174.20169067 18.70187378]
[160.10227966 30.73377419]
[141.35787964 28.72716713]
[130.09089661 38.62944794]
[118.82392120 48.53173065]
[107.55694580 58.43401337]
[96.28996277 68.33629608]
[114.97771454 73.78722382]
[126.07005310 88.48504639]
[126.16443634 105.84622955]
[116.47270203 118.96401978]
[122.47950745 132.70877075]
[128.48631287 146.45352173]
[134.86523438 153.16059875]
[134.46577454 160.63037109]
[140.11668396 174.52522278]
[153.38757324 184.15931702]
[151.41076660 200.43888855]
[136.21984863 206.61691284]
[123.44191742 196.33795166]
[126.22183228 180.17614746]
[120.57091522 166.28128052]
[114.74156952 152.46034241]
[108.73475647 138.71557617]
[102.72795105 124.97082520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[13 26]
[14 25]
[38 51]
[39 50]
[40 49]
[41 48]
[52 103]
[53 102]
[54 101]
[55 100]
[56 99]
[61 96]
[62 95]
[63 94]
[64 93]
[66 91]
[67 90]
[68 89]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[107 121]
[108 120]
[109 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
