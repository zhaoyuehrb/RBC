%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCCAGCGGUGGAGACGUCACCGGCUGCGCCCUUCAGUAUCGCGGACGGAAGAUGGCGUCCGCCACCCGUCUCAUCCAGCGGCUGCGGAACUGGGCGUCCGGGCAUGACCUGCAGGGGAAGCUGCAGCUACGCUACCAGGAGAUCUCCAAGC\
) } def
/len { sequence length } bind def

/coor [
[80.25551605 317.33837891]
[75.69341278 332.07577515]
[63.87319565 341.98971558]
[48.56664658 343.91668701]
[34.65803909 337.24179077]
[26.58555222 324.09497070]
[26.92509079 308.67135620]
[35.56830978 295.89251709]
[49.75718689 289.83618164]
[52.16335678 275.03042603]
[45.33756638 265.00021362]
[47.26050949 252.61454773]
[57.43743134 244.62950134]
[60.14125824 229.87519836]
[62.84508133 215.12089539]
[65.54890442 200.36660767]
[68.25273132 185.61230469]
[70.95655823 170.85800171]
[62.31045532 158.78404236]
[64.84233856 143.78257751]
[77.56523895 134.79560852]
[80.26906586 120.04130554]
[80.58606720 102.47129059]
[90.55038452 94.33594513]
[82.79031372 81.49922943]
[75.03025055 68.66251373]
[67.27017975 55.82579041]
[61.59414291 52.25773239]
[59.00407410 47.11803436]
[59.46812820 42.31223297]
[52.23123550 29.17346001]
[44.99434280 16.03468513]
[37.75745392 2.89590955]
[30.52056122 -10.24286556]
[23.28367043 -23.38163948]
[15.78367043 -36.37202072]
[8.02360344 -49.20874023]
[0.26353577 -62.04545975]
[-13.49725151 -69.85259247]
[-13.46011448 -84.74714661]
[-21.22018242 -97.58386993]
[-28.98024940 -110.42058563]
[-36.86917496 -123.17852020]
[-44.88616180 -135.85636902]
[-52.90315247 -148.53422546]
[-60.92013931 -161.21206665]
[-69.06436920 -173.80856323]
[-77.33502960 -186.32240295]
[-85.60568237 -198.83624268]
[-98.09811401 -202.19331360]
[-104.72194672 -212.83413696]
[-102.37387848 -224.73721313]
[-110.39086151 -237.41506958]
[-117.66520691 -243.03631592]
[-118.43865967 -250.42991638]
[-126.19873047 -263.26663208]
[-133.95880127 -276.10336304]
[-141.71885681 -288.94006348]
[-149.47892761 -301.77679443]
[-156.63859558 -307.54339600]
[-157.26301575 -314.95108032]
[-164.76301575 -327.94143677]
[-179.82489014 -333.46585083]
[-184.75976562 -348.73107910]
[-175.78201294 -362.02691650]
[-159.77859497 -363.15396118]
[-149.02597046 -351.24761963]
[-151.77262878 -335.44143677]
[-144.27262878 -322.45108032]
[-136.64221191 -309.53686523]
[-128.88214111 -296.70013428]
[-121.12207794 -283.86343384]
[-113.36200714 -271.02670288]
[-105.60194397 -258.18997192]
[-97.71301270 -245.43205261]
[-89.69602966 -232.75419617]
[-73.75129700 -225.48268127]
[-73.09184265 -207.10690308]
[-64.82118988 -194.59306335]
[-56.55052948 -182.07920837]
[-50.20234680 -178.21086121]
[-48.24228668 -169.22906494]
[-40.22529984 -156.55120850]
[-32.20831299 -143.87335205]
[-24.19132423 -131.19551086]
[-17.92232513 -127.20009613]
[-16.14352989 -118.18065643]
[-8.38346195 -105.34393311]
[-0.62339520 -92.50721741]
[12.58234024 -85.61825562]
[13.10025501 -69.80552673]
[20.86032295 -56.96880722]
[28.62038994 -44.13208771]
[33.01436234 -42.13106918]
[36.17043304 -37.31815720]
[36.42244339 -30.61853218]
[43.65933609 -17.47975731]
[50.89622879 -4.34098148]
[58.13311768 8.79779339]
[65.37001038 21.93656731]
[72.60690308 35.07534409]
[80.10690308 48.06572342]
[87.86696625 60.90244293]
[95.62703705 73.73915863]
[103.38710022 86.57588196]
[115.81703186 94.97212219]
[130.62278748 97.37828827]
[138.91770935 86.07653809]
[151.22006226 79.49375916]
[165.09255981 78.86923218]
[177.81463623 84.26815033]
[186.91607666 94.58007050]
[190.65657043 107.74677277]
[205.41087341 110.45059204]
[220.16517639 113.15441895]
[234.91947937 115.85824585]
[249.67376709 118.56207275]
[264.42807007 121.26589966]
[277.29074097 112.08290100]
[292.86538696 114.76718903]
[301.91189575 127.72621918]
[299.06307983 143.27163696]
[286.00912476 152.18060303]
[270.49472046 149.16761780]
[261.72424316 136.02020264]
[246.96994019 133.31637573]
[232.21565247 130.61254883]
[217.46134949 127.90872192]
[202.70704651 125.20489502]
[187.95275879 122.50106812]
[177.81117249 135.04731750]
[162.64488220 140.81581116]
[146.54412842 138.14988708]
[133.90219116 127.68137360]
[128.21661377 112.18404388]
[113.41086578 109.77787781]
[127.63801575 114.53057861]
[135.00540161 127.59661865]
[131.70924377 142.22998047]
[119.45133209 150.87542725]
[104.56046295 149.06929016]
[94.72483063 137.74407959]
[95.02336121 122.74513245]
[92.31953430 137.49943542]
[101.02883148 150.41398621]
[98.07659149 165.33843994]
[85.71085358 173.56182861]
[83.00703430 188.31613159]
[80.30320740 203.07041931]
[77.59938049 217.82472229]
[74.89555359 232.57902527]
[72.19172668 247.33332825]
[78.78773499 264.49716187]
[66.96910858 277.43658447]
[64.56294250 292.24234009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 155]
[10 154]
[13 152]
[14 151]
[15 150]
[16 149]
[17 148]
[18 147]
[21 144]
[22 143]
[24 105]
[25 104]
[26 103]
[27 102]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[36 93]
[37 92]
[38 91]
[40 89]
[41 88]
[42 87]
[43 85]
[44 84]
[45 83]
[46 82]
[47 80]
[48 79]
[49 78]
[52 76]
[53 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[61 69]
[62 68]
[106 136]
[107 135]
[113 130]
[114 129]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
