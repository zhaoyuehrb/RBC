%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAAGAGCACAUAUUUCUCCGUGGGACACUCCUUGUAUUGGUGGGUGAGAAAUGGGCGACUGGAGUUUCCUGGGGAACAUCUUGGAGGAGGUGAAUGAGCACUCCACCGUCAUCGGCAGAGUCUGGCUCACCGUGCUUUUCAUCUUCCGGA\
) } def
/len { sequence length } bind def

/coor [
[118.99297333 284.79907227]
[116.85824585 269.95175171]
[104.81773376 261.25912476]
[102.44131470 246.23223877]
[111.64056396 233.66198730]
[109.50584412 218.81465149]
[107.37112427 203.96733093]
[105.23639679 189.12001038]
[103.10167694 174.27268982]
[100.96695709 159.42536926]
[98.83222961 144.57804871]
[96.69750977 129.73072815]
[84.28356934 126.60652924]
[73.94076538 118.38134003]
[67.72248840 106.25427246]
[67.03771973 92.22883606]
[72.34754181 78.78335571]
[58.46025467 73.11385345]
[44.57296371 67.44435120]
[30.68567657 61.77485275]
[16.79838943 56.10535431]
[2.91110134 50.43585205]
[-10.97618675 44.76635361]
[-20.16543579 44.41134262]
[-25.08702469 38.83695984]
[-38.85577393 32.88536072]
[-52.62452316 26.93375778]
[-66.39327240 20.98215675]
[-75.57336426 20.43977547]
[-80.38022614 14.76615810]
[-94.02470398 8.53493309]
[-107.66918182 2.30370760]
[-121.31365967 -3.92751765]
[-134.95814514 -10.15874290]
[-147.33366394 -6.38705826]
[-158.59004211 -11.90447426]
[-162.90319824 -23.24629211]
[-176.41772461 -29.75454712]
[-194.71324158 -27.92978287]
[-204.06987000 -42.74598312]
[-217.71435547 -48.97720718]
[-233.48161316 -47.67190933]
[-241.84455872 -59.99710464]
[-255.48904419 -66.22833252]
[-268.41149902 -57.80134964]
[-283.83865356 -57.72137070]
[-296.84774780 -66.01391602]
[-303.28768921 -80.03286743]
[-301.10345459 -95.30482483]
[-290.99203491 -106.95656586]
[-276.17999268 -111.27005768]
[-261.39373779 -106.86888123]
[-251.35153198 -95.15744019]
[-249.25781250 -79.87281036]
[-235.61334229 -73.64158630]
[-220.82202148 -75.39258575]
[-211.48312378 -62.62168884]
[-197.83865356 -56.39046097]
[-186.35992432 -60.32478333]
[-174.92100525 -55.19651031]
[-169.90946960 -43.26908112]
[-156.39492798 -36.76082611]
[-139.02023315 -39.03815460]
[-128.72691345 -23.80322266]
[-115.08243561 -17.57199669]
[-101.43795776 -11.34077263]
[-87.79347992 -5.10954714]
[-74.14899445 1.12167799]
[-60.44166946 7.21340799]
[-46.67292023 13.16500950]
[-32.90417099 19.11660957]
[-19.13542366 25.06821251]
[-5.30668592 30.87906456]
[8.58060169 36.54856491]
[22.46788979 42.21806717]
[36.35517883 47.88756561]
[50.24246597 53.55706787]
[64.12975311 59.22656631]
[78.01704407 64.89606476]
[91.96143341 59.36851120]
[98.19265747 45.72402954]
[104.42388153 32.07955170]
[110.65511322 18.43507004]
[116.88633728 4.79059029]
[123.11756134 -8.85388947]
[121.02093506 -25.11845779]
[134.22052002 -34.85000992]
[149.13771057 -28.03755760]
[150.42697144 -11.68916893]
[136.76203918 -2.62266445]
[130.53080750 11.02181530]
[124.29959106 24.66629601]
[118.06836700 38.31077576]
[111.83714294 51.95525360]
[105.60591125 65.59973145]
[117.07353210 71.51817322]
[125.08068848 80.84227753]
[128.79910278 91.91085815]
[143.79598999 91.60488129]
[158.79286194 91.29890442]
[173.78974915 90.99291992]
[188.78662109 90.68694305]
[203.76712036 89.92227936]
[218.71720886 88.69963837]
[233.66729736 87.47699738]
[248.61738586 86.25436401]
[258.82546997 74.48860168]
[274.00439453 73.46164703]
[285.15832520 83.26599121]
[300.10842896 82.04335022]
[315.05850220 80.82070923]
[328.22979736 71.05091858]
[343.16668701 77.82007599]
[344.50338745 94.16465759]
[330.86480713 103.27075958]
[316.28115845 95.77079773]
[301.33105469 96.99343872]
[286.38098145 98.21607971]
[276.96820068 109.70240021]
[261.82409668 111.15529633]
[249.84002686 101.20445251]
[234.88993835 102.42708588]
[219.93984985 103.64972687]
[204.98976135 104.87236786]
[202.41868591 107.36773682]
[198.48809814 108.71099854]
[193.76737976 108.26648712]
[189.09260559 105.68382263]
[174.09571838 105.98979950]
[159.09884644 106.29577637]
[144.10195923 106.60176086]
[129.10508728 106.90773773]
[125.55081177 115.55566406]
[119.50036621 122.68388367]
[111.54483032 127.59600830]
[113.67955017 142.44332886]
[115.81427765 157.29064941]
[117.94899750 172.13796997]
[120.08372498 186.98529053]
[122.21844482 201.83261108]
[124.35316467 216.67993164]
[126.48789215 231.52725220]
[138.85595703 240.99661255]
[140.80937195 256.08432007]
[131.70556641 267.81701660]
[133.84028625 282.66433716]
[147.62643433 289.78628540]
[154.56338501 303.66641235]
[151.98374939 318.96755981]
[140.87945557 329.80612183]
[125.52031708 332.01443481]
[111.81224823 324.74334717]
[105.02627563 310.78878784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[10 137]
[11 136]
[12 135]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[25 72]
[26 71]
[27 70]
[28 69]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[37 62]
[38 61]
[40 58]
[41 57]
[43 55]
[44 54]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[98 132]
[99 131]
[100 130]
[101 129]
[102 128]
[103 124]
[104 123]
[105 122]
[106 121]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
