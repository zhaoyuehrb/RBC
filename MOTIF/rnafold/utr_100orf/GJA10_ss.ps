%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGGACUGGAACUUAUUGGGUGGCAUCCUAGAGGAAGUUCACUCCCACUCAACCAUAGUGGGGAAAAUCUGGCUGACCAUCCUCUUCAUCUUCCGAA\
) } def
/len { sequence length } bind def

/coor [
[63.14949417 430.61779785]
[62.82502365 414.81683350]
[73.82867432 403.47244263]
[73.36217499 388.47970581]
[72.89568329 373.48696899]
[72.42918396 358.49420166]
[71.96268463 343.50146484]
[71.49618530 328.50872803]
[68.08174133 321.80297852]
[71.25565338 313.04403687]
[71.25565338 298.04403687]
[71.25565338 283.04403687]
[71.25565338 268.04403687]
[63.03938293 264.15103149]
[56.57476807 257.69543457]
[52.63243866 249.40499878]
[51.69631577 240.22850037]
[53.90438843 231.22715759]
[59.02930832 223.45195007]
[66.50141907 217.82084656]
[75.47196198 215.01055908]
[77.79543304 200.19160461]
[80.11890411 185.37263489]
[82.44238281 170.55368042]
[84.76585388 155.73472595]
[87.08932495 140.91577148]
[89.18205261 126.06246948]
[91.04353333 111.17842102]
[85.78678131 98.22241974]
[94.07241821 86.96009827]
[95.93389893 72.07604980]
[93.87149811 62.99094009]
[98.09172058 56.76075745]
[100.41519165 41.94179916]
[102.73866272 27.12284279]
[94.27440643 20.13291931]
[89.59922791 10.29130268]
[89.52944946 -0.52235597]
[94.00901031 -10.27491188]
[102.13300323 -17.16198158]
[112.32955170 -19.94171333]
[116.02373505 -34.47969818]
[119.71791840 -49.01768494]
[118.18248749 -54.38329315]
[118.90969849 -59.26761627]
[121.29625702 -62.85356140]
[124.49360657 -64.70611572]
[129.52635193 -78.83663177]
[134.55911255 -92.96714020]
[139.59185791 -107.09765625]
[144.62460327 -121.22817230]
[149.65736389 -135.35868835]
[141.58961487 -148.75440979]
[144.07102966 -164.19386292]
[155.92994690 -174.38699341]
[171.56695557 -174.52093506]
[183.59873962 -164.53242493]
[186.34425354 -149.13775635]
[178.50715637 -135.60578918]
[163.78787231 -130.32592773]
[158.75512695 -116.19541931]
[153.72236633 -102.06491089]
[148.68962097 -87.93439484]
[143.65687561 -73.80387878]
[138.62413025 -59.67336655]
[134.25590515 -45.32349777]
[130.56172180 -30.78551483]
[126.86753845 -16.24752998]
[138.09844971 -0.52049989]
[134.35910034 18.74316216]
[117.55761719 29.44631577]
[115.23414612 44.26527405]
[112.91067505 59.08422852]
[110.81794739 73.93753052]
[108.95646667 88.82157898]
[114.21321869 101.77758026]
[105.92758179 113.03990173]
[104.06610107 127.92395020]
[106.12850189 137.00906372]
[101.90827942 143.23924255]
[99.58480835 158.05819702]
[97.26133728 172.87715149]
[94.93786621 187.69610596]
[92.61438751 202.51507568]
[90.29091644 217.33403015]
[104.58872223 233.57771301]
[102.72917938 254.86489868]
[86.25565338 268.04403687]
[86.25565338 283.04403687]
[86.25565338 298.04403687]
[86.25565338 313.04403687]
[86.48892975 328.04223633]
[86.95542908 343.03497314]
[87.42192841 358.02770996]
[87.88842773 373.02044678]
[88.35491943 388.01321411]
[88.82141876 403.00595093]
[100.50906372 413.64428711]
[101.16755676 429.43487549]
[90.40623474 441.00936890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[8 92]
[10 91]
[11 90]
[12 89]
[13 88]
[21 85]
[22 84]
[23 83]
[24 82]
[25 81]
[26 80]
[27 78]
[28 77]
[30 75]
[31 74]
[33 73]
[34 72]
[35 71]
[41 68]
[42 67]
[43 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
