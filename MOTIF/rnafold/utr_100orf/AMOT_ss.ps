%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAAUUCUGAAGAACAGCCAAGUGGAGGGACCACGGUAUUGCAGCGUUUGCUACAAGAGCAGCUUCGCUAUGGCAAUCCUAGUGAGAAUCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[107.86085510 205.56488037]
[94.33642578 212.05253601]
[79.34098053 212.42240906]
[65.51314545 206.60940552]
[55.28607559 195.63639832]
[50.45932388 181.43418884]
[51.88221359 166.50183105]
[59.30437469 153.46682739]
[71.41864014 144.62332153]
[78.54881287 131.42633057]
[85.67898560 118.22933960]
[73.09469604 126.39240265]
[60.51040268 134.55546570]
[55.77389145 149.88337708]
[40.78490829 155.60263062]
[27.04171562 147.32591248]
[25.08691597 131.40238953]
[36.42006683 120.04724884]
[52.34733963 121.97117615]
[64.93163300 113.80811310]
[77.51592255 105.64505005]
[76.93329620 98.16770935]
[61.97860718 99.33271790]
[60.81384277 84.37801361]
[75.76803589 83.21304321]
[75.18540955 75.73570251]
[61.48855972 69.62045288]
[47.79170990 63.50519562]
[34.09486389 57.38994217]
[18.65783501 61.75775146]
[5.70258141 52.29514313]
[5.16726303 36.26102066]
[17.46253014 25.95539474]
[33.15650558 29.28385544]
[40.21011734 43.69309235]
[53.90696716 49.80834961]
[67.60381317 55.92360306]
[81.30066681 62.03885651]
[95.83864594 58.34467316]
[104.95463562 46.43254852]
[107.75719452 37.54782486]
[114.54405212 34.29757690]
[124.02610016 22.67472267]
[133.50814819 11.05186558]
[142.99018860 -0.57099122]
[152.47222900 -12.19384766]
[161.40187073 -24.24630165]
[169.75965881 -36.70212173]
[178.11743164 -49.15793991]
[186.47521973 -61.61376190]
[186.74430847 -81.65152740]
[204.18029785 -89.76320648]
[211.74754333 -102.71453094]
[219.31478882 -115.66585541]
[226.88203430 -128.61718750]
[234.44926453 -141.56851196]
[231.78459167 -157.38871765]
[242.59878540 -169.23913574]
[258.59616089 -168.02914429]
[267.50485229 -154.68693542]
[262.49090576 -139.44752502]
[247.40058899 -134.00126648]
[239.83335876 -121.04994202]
[232.26611328 -108.09860992]
[224.69886780 -95.14728546]
[217.13162231 -82.19596100]
[220.64811707 -72.37198639]
[218.02850342 -62.04281235]
[209.92491150 -54.78590775]
[198.93104553 -53.25597763]
[190.57325745 -40.80015945]
[182.21546936 -28.34433746]
[173.85768127 -15.88851833]
[174.27258301 -12.21661091]
[172.81202698 -8.16427517]
[169.32040405 -4.67228317]
[164.09509277 -2.71180153]
[154.61305237 8.91105556]
[145.13099670 20.53391266]
[135.64895630 32.15676880]
[126.16690826 43.77962494]
[116.86676025 55.54853821]
[107.75077057 67.46066284]
[123.39461517 80.63809204]
[127.25695038 98.75185394]
[119.97814941 113.66304779]
[128.71926880 125.85291290]
[137.46037292 138.04278564]
[146.20149231 150.23265076]
[160.34521484 159.58099365]
[155.27757263 175.75985718]
[138.32814026 175.36901855]
[134.01162720 158.97377014]
[125.27050781 146.78390503]
[116.52939606 134.59402466]
[107.78827667 122.40416718]
[109.61519623 137.29249573]
[111.44211578 152.18081665]
[119.49788666 164.83406067]
[121.65522003 179.67811584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 21]
[12 20]
[13 19]
[26 38]
[27 37]
[28 36]
[29 35]
[39 83]
[40 82]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[47 73]
[48 72]
[49 71]
[50 70]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
