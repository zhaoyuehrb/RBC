%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCCGGUCCCAGCCAUGUCCAACGUCCCCCACAAGUCCUCACUGCCCGAGGGCAUCCGCCCUGGCACGGUGCUGAGAAUUCGCGGCUUGGUUCCUCCCAAUGCCAGCAGGUUCC\
) } def
/len { sequence length } bind def

/coor [
[130.11795044 151.46333313]
[123.55702972 164.95237732]
[110.50039673 172.33644104]
[95.55937195 171.00764465]
[84.01079559 161.43525696]
[79.93337250 147.00007629]
[84.76737976 132.79997253]
[87.23991394 118.00515747]
[77.97705078 129.80343628]
[68.71417999 141.60169983]
[66.93033600 157.90354919]
[51.81365585 164.26106262]
[38.91487885 154.13418579]
[41.50316620 137.94058228]
[56.91590500 132.33883667]
[66.17877197 120.54056549]
[75.44164276 108.74228668]
[61.65631866 114.65539551]
[48.22661591 121.33694458]
[33.49890137 124.18200684]
[18.54688454 122.98317719]
[4.46062899 117.82785034]
[-7.73291779 109.09186554]
[-17.14479637 97.41211700]
[-23.08884239 83.64010620]
[-25.13171196 68.77986145]
[-23.12446785 53.91477203]
[-17.21344948 40.12855148]
[-7.82959318 28.42627716]
[4.34297895 19.66109085]
[18.41683578 14.47201157]
[33.36593628 13.23734474]
[48.10042953 16.04710197]
[61.54610825 22.69644165]
[72.72272491 32.70059967]
[80.81546783 45.33022690]
[85.23433685 59.66458130]
[85.65762329 74.65442657]
[93.19688416 87.62206268]
[92.79757690 72.62738037]
[81.61051178 61.78821564]
[81.41916656 46.57578659]
[91.82158661 35.97742844]
[91.42227936 20.98274612]
[91.02297211 5.98806190]
[90.62366486 -9.00662231]
[90.22435760 -24.00130653]
[80.22075653 -39.39020920]
[89.02993774 -54.50447845]
[88.23160553 -69.48322296]
[84.61089325 -78.01242828]
[87.61678314 -84.87028503]
[87.21747589 -99.86496735]
[86.81816864 -114.85964966]
[86.41886139 -129.85433960]
[86.01955414 -144.84901428]
[76.98826599 -158.53726196]
[84.56795502 -173.07962036]
[100.96128845 -173.51617432]
[109.30421448 -159.39782715]
[101.01423645 -145.24833679]
[101.41355133 -130.25364685]
[101.81285858 -115.25896454]
[102.21216583 -100.26427460]
[102.61147308 -85.26959229]
[103.21034241 -70.28155518]
[104.00867462 -55.30281067]
[112.83534241 -46.91453934]
[113.55125427 -34.35564041]
[105.21903992 -24.40061378]
[105.61834717 -9.40593052]
[106.01765442 5.58875370]
[106.41696167 20.58343887]
[106.81627655 35.57812119]
[117.76802063 45.60781860]
[118.38658142 60.80887222]
[107.79225922 72.22806549]
[108.19156647 87.22275543]
[116.14788055 99.93876648]
[129.45816040 106.85515594]
[142.76844788 113.77154541]
[156.07872009 120.68793488]
[169.38900757 127.60431671]
[185.20222473 127.10176849]
[192.92819214 139.83592224]
[206.23846436 146.75231934]
[219.63963318 153.49090576]
[233.12931824 160.05052185]
[246.61900330 166.61012268]
[260.19479370 172.98959351]
[273.85433960 179.18777466]
[287.51385498 185.38595581]
[301.17337036 191.58413696]
[315.87777710 185.79136658]
[330.33795166 192.16935730]
[335.97494507 206.93418884]
[329.44439697 221.32611084]
[314.62081909 226.80668640]
[300.29873657 220.12437439]
[294.97518921 205.24365234]
[281.31567383 199.04547119]
[267.65615845 192.84729004]
[253.99662781 186.64910889]
[246.50964355 186.75196838]
[240.05938721 180.09980774]
[226.56971741 173.54020691]
[213.08003235 166.98059082]
[205.59295654 166.88410950]
[199.32208252 160.06259155]
[186.01179504 153.14620972]
[171.15061951 154.14346313]
[162.47261047 140.91459656]
[149.16233826 133.99821472]
[135.85205078 127.08182526]
[122.54177094 120.16543579]
[109.23149109 113.24905396]
[117.59647369 125.70004272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 17]
[9 16]
[10 15]
[39 78]
[40 77]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[49 67]
[50 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[79 116]
[80 115]
[81 114]
[82 113]
[83 112]
[85 110]
[86 109]
[87 107]
[88 106]
[89 105]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
