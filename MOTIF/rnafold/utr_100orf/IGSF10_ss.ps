%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGGUAAAAGGCAGAGGAAUCACCUGCUUGCUGGUCUCCUUUGCUGUGAUCUGCCUGGUCGCCACCCCUGGGGGCAAGGCCUGUCCUCGCCGCUGUG\
) } def
/len { sequence length } bind def

/coor [
[49.11997986 145.02626038]
[55.22586441 131.32524109]
[64.58552551 119.60360718]
[76.59558105 110.61701965]
[90.48608398 104.94367981]
[76.13622284 100.57545471]
[61.78635406 96.20723724]
[47.43648911 91.83901978]
[37.00021362 100.99537659]
[23.50001907 103.73207092]
[10.52848530 99.43118286]
[1.48284304 89.33306885]
[-1.32467234 76.18109131]
[-15.53174591 71.36870575]
[-29.73881912 66.55632019]
[-43.94589233 61.74393082]
[-58.15296555 56.93154526]
[-72.36003876 52.11915970]
[-86.56711578 47.30677414]
[-100.77418518 42.49438477]
[-114.98126221 37.68199921]
[-124.64173889 43.14835358]
[-135.48739624 42.31016159]
[-143.84512329 35.69935989]
[-147.02287292 25.76064110]
[-160.90328979 20.07431602]
[-174.78369141 14.38799000]
[-187.91123962 22.66125870]
[-203.39230347 21.60470200]
[-215.27409363 11.62458420]
[-218.98782349 -3.44153237]
[-213.10546875 -17.80042076]
[-199.88894653 -25.93079376]
[-184.42025757 -24.70635796]
[-172.64743042 -14.59793472]
[-169.09736633 0.50758278]
[-155.21694946 6.19390869]
[-141.33654785 11.88023472]
[-122.56018066 7.72563744]
[-110.16887665 23.47492599]
[-95.96179962 28.28731155]
[-81.75473022 33.09969711]
[-67.54765320 37.91208649]
[-53.34057999 42.72447205]
[-39.13350677 47.53685760]
[-24.92643356 52.34924698]
[-10.71935940 57.16163254]
[3.48771429 61.97401810]
[16.48874092 52.08578491]
[32.98593140 51.82876968]
[46.55756378 61.49873352]
[51.80471039 77.48915100]
[66.15457916 81.85736847]
[80.50444031 86.22559357]
[94.85430908 90.59381104]
[109.83798218 89.89421082]
[123.71839142 84.20787811]
[137.59880066 78.52155304]
[151.47920227 72.83522797]
[161.31622314 60.44395065]
[176.02665710 62.77898407]
[189.90705872 57.09265518]
[203.78746033 51.40633011]
[213.62448120 39.01505280]
[228.33491516 41.35008240]
[242.21531677 35.66375732]
[256.09573364 29.97743225]
[265.69595337 16.68203163]
[281.98049927 18.61732483]
[288.19723511 33.79244614]
[277.95089722 46.59653473]
[261.78204346 43.85783768]
[247.90164185 49.54416656]
[234.02124023 55.23049164]
[225.17704773 67.21504211]
[209.47378540 65.28673553]
[195.59338379 70.97306061]
[181.71298218 76.65938568]
[172.86878967 88.64394379]
[157.16552734 86.71563721]
[143.28512573 92.40196228]
[129.40472412 98.08828735]
[115.52430725 103.77461243]
[129.87893677 108.12713623]
[142.67469788 115.95456696]
[153.08666992 126.75228882]
[160.44363403 139.82421875]
[164.27130127 154.32762146]
[164.32292175 169.32752991]
[160.59516907 183.85694885]
[153.32835388 196.97918701]
[142.99095154 207.84832764]
[130.24937439 215.76364136]
[115.92503357 220.21485901]
[100.94138336 220.91503906]
[86.26436615 217.81901550]
[72.84017944 211.12640381]
[61.53421783 201.26864624]
[53.07535934 188.88125610]
[48.00891113 174.76278687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[8 52]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[25 38]
[26 37]
[27 36]
[56 83]
[57 82]
[58 81]
[59 80]
[61 78]
[62 77]
[63 76]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
