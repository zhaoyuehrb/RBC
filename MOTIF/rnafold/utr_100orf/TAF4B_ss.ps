%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCUGCUCCCGGAACCGCAGCGCCAAAGCUGCCGCUGAGCCCCUGGGGGAUGCCCGCCGGCCUCACCGAACCCGCCGGCGCCGCUCCCCCGGCUGCUGUGAGCGCCUCGGGGACCGUGACCAUGGCCCCGGCCGGGGCGCUGCCGGUGC\
) } def
/len { sequence length } bind def

/coor [
[127.24849701 250.45187378]
[117.87660217 262.96994019]
[102.63916016 266.48480225]
[88.73083496 259.33691406]
[82.71870422 244.90124512]
[87.44152069 229.99389648]
[100.66931152 221.65365601]
[102.52470398 206.76884460]
[95.33027649 196.99516296]
[96.79640961 184.54344177]
[106.67697906 176.18862915]
[108.83959961 161.34535217]
[111.00221252 146.50205994]
[113.16483307 131.65878296]
[107.06096649 127.30069733]
[98.34461212 139.50828552]
[86.13716888 130.79173279]
[94.85323334 118.58454895]
[88.74936676 114.22647095]
[75.41253662 121.09151459]
[62.07570267 127.95656586]
[48.73886871 134.82160950]
[35.40203476 141.68666077]
[30.81970406 156.81205750]
[16.84501648 164.19335938]
[1.76890695 159.45137024]
[-5.46423769 145.39942932]
[-0.56312090 130.37429810]
[13.56451225 123.29012299]
[28.53698730 128.34982300]
[41.87382126 121.48477936]
[55.21065521 114.61972809]
[68.54748535 107.75468445]
[81.88432312 100.88964081]
[87.62457275 87.03144836]
[83.04833221 72.74655914]
[78.47208405 58.46167374]
[73.77006531 53.66940308]
[72.44276428 48.06157684]
[74.01512909 43.49102783]
[70.03311920 29.02923203]
[66.05110168 14.56743431]
[52.59196472 6.72591877]
[48.75965118 -7.99712515]
[56.31828308 -20.78003120]
[52.33626938 -35.24182892]
[48.35425568 -49.70362473]
[44.37224197 -64.16542053]
[40.39022827 -78.62722015]
[36.40821457 -93.08901215]
[32.42620468 -107.55081177]
[28.44418907 -122.01261139]
[23.11686325 -129.51216125]
[24.53263092 -136.81451416]
[20.85034752 -151.35551453]
[7.70932913 -164.21316528]
[13.06321716 -180.89723206]
[9.08120441 -195.35903931]
[5.09919071 -209.82083130]
[1.11717737 -224.28262329]
[-2.86483598 -238.74443054]
[-6.84684944 -253.20622253]
[-10.82886219 -267.66802979]
[-25.85422707 -270.35153198]
[-38.22225571 -279.29550171]
[-45.47726822 -292.72409058]
[-46.17877197 -307.97109985]
[-40.18748856 -322.00915527]
[-28.69299126 -332.05102539]
[-13.97751713 -336.10290527]
[1.03716338 -333.36022949]
[13.36987495 -324.36764526]
[20.57194901 -310.91055298]
[21.21340752 -295.66091919]
[15.16688919 -281.64657593]
[3.63293433 -271.65002441]
[7.61494780 -257.18823242]
[11.59696102 -242.72644043]
[15.57897377 -228.26464844]
[19.56098747 -213.80284119]
[23.54300117 -199.34104919]
[27.52501488 -184.87925720]
[37.91202164 -178.60273743]
[41.32256317 -166.53778076]
[35.39135361 -155.03779602]
[39.07363510 -140.49679565]
[42.90598679 -125.99462128]
[46.88800049 -111.53282928]
[50.87001419 -97.07102966]
[54.85202789 -82.60923004]
[58.83404160 -68.14743805]
[62.81605148 -53.68563843]
[66.79806519 -39.22384262]
[70.78008270 -24.76204491]
[83.81672668 -17.64998817]
[88.06107330 -3.04039526]
[80.51290131 10.58542156]
[84.49491119 25.04721832]
[88.47692871 39.50901413]
[92.75697327 53.88542557]
[97.33321381 68.17031097]
[101.90946198 82.45520020]
[112.18218994 93.38548279]
[126.15605164 98.83810425]
[140.12991333 104.29072571]
[154.10379028 109.74333954]
[168.07765198 115.19596100]
[182.05151367 120.64858246]
[196.02539062 126.10120392]
[210.21264648 130.97169495]
[224.58905029 135.25173950]
[238.96546936 139.53178406]
[253.34187317 143.81182861]
[267.71829224 148.09187317]
[276.90106201 147.54397583]
[282.34591675 152.61177063]
[296.63079834 157.18801880]
[310.91567993 161.76426697]
[325.20056152 166.34051514]
[341.10369873 162.33775330]
[352.32598877 174.29570007]
[347.32290649 189.91302490]
[331.24118042 193.12397766]
[320.62432861 180.62539673]
[306.33944702 176.04914856]
[292.05453491 171.47290039]
[277.76965332 166.89665222]
[263.43826294 162.46827698]
[249.06184387 158.18823242]
[234.68542480 153.90818787]
[220.30900574 149.62814331]
[205.93260193 145.34809875]
[203.36778259 146.62123108]
[200.12879944 146.92204285]
[196.59587097 145.98258972]
[193.24102783 143.68209839]
[190.57276917 140.07507324]
[176.59889221 134.62245178]
[162.62503052 129.16983032]
[148.65116882 123.71720886]
[134.67730713 118.26458740]
[120.70343018 112.81197357]
[106.72956848 107.35935211]
[117.68823242 120.32314301]
[128.00811768 133.82139587]
[125.84549713 148.66467285]
[123.68288422 163.50796509]
[121.52026367 178.35124207]
[128.74057007 195.25901794]
[117.40950775 208.62423706]
[115.55412292 223.50904846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 151]
[8 150]
[11 148]
[12 147]
[13 146]
[14 145]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[35 102]
[36 101]
[37 100]
[40 99]
[41 98]
[42 97]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[50 89]
[51 88]
[52 87]
[54 86]
[55 85]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[62 77]
[63 76]
[103 143]
[104 142]
[105 141]
[106 140]
[107 139]
[108 138]
[109 137]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
