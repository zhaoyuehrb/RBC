%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGCAGUGCGUGUGGUGAGGCAGGACAUGGCGGAGGCAGGAAAAGUGCCCUUGAGCCUCGGGCUUACCGGAGGAGAAGCGGCAGAGUGGCCUCUGCAGCGGUACGCCCGCUGCAUACCCUCAAACA\
) } def
/len { sequence length } bind def

/coor [
[86.08020782 115.64181519]
[75.03133392 125.78688812]
[63.98246384 135.93196106]
[52.93359375 146.07702637]
[56.69977188 162.12649536]
[51.91477203 177.80444336]
[39.96561813 188.88841248]
[24.15539360 192.44273376]
[8.79050922 187.59567261]
[-2.00804305 198.00677490]
[-12.80659485 208.41789246]
[-9.02522278 223.30401611]
[-13.20896435 238.08210754]
[-24.23241615 248.77693176]
[-39.13032150 252.51161194]
[-53.89522171 248.28157043]
[-64.55543518 237.22465515]
[-68.24340820 222.31510925]
[-63.96710968 207.56355286]
[-52.87682724 196.93804932]
[-37.95579910 193.29681396]
[-23.21770859 197.61933899]
[-12.41915607 187.20822144]
[-1.62060392 176.79711914]
[-5.78746080 163.73335266]
[-3.88812733 150.08631897]
[3.76092052 138.54620361]
[15.70411873 131.41285706]
[29.62350464 130.13757324]
[42.78852081 135.02815247]
[53.83739471 124.88308716]
[64.88626862 114.73801422]
[75.93513489 104.59294891]
[92.06253052 85.69343567]
[92.42779541 70.69788361]
[92.79306030 55.70233536]
[93.15832520 40.70678329]
[93.52359009 25.71123123]
[93.88885498 10.71567917]
[82.17162323 6.09264708]
[72.48294830 -1.91834414]
[65.76711273 -12.51672268]
[62.67251968 -24.65073776]
[63.48909378 -37.12182617]
[68.12120819 -48.70300674]
[76.09857178 -58.25957870]
[86.62398529 -64.86032867]
[98.65293884 -67.86822510]
[100.11183167 -82.79711151]
[101.57073212 -97.72599792]
[103.02962494 -112.65488434]
[104.30663300 -127.60042572]
[105.40156555 -142.56040955]
[106.49649048 -157.52040100]
[96.54076385 -166.68374634]
[93.75391388 -179.72489929]
[98.94075775 -191.79827881]
[109.98549652 -198.55038452]
[111.44438934 -213.47927856]
[112.90328979 -228.40815735]
[114.36218262 -243.33705139]
[108.00376892 -257.82431030]
[116.94223785 -269.73870850]
[118.40113068 -284.66760254]
[111.13272858 -299.36804199]
[120.45336151 -312.86090088]
[136.77476501 -311.26593018]
[143.30686951 -296.22387695]
[133.33001709 -283.20870972]
[131.87112427 -268.27981567]
[138.33389282 -254.86036682]
[129.29106140 -241.87814331]
[127.83216858 -226.94926453]
[126.37327576 -212.02037048]
[124.91438293 -197.09149170]
[136.13041687 -184.62281799]
[134.88363647 -167.56089783]
[121.45647430 -156.42546082]
[120.36154938 -141.46548462]
[119.26661682 -126.50549316]
[121.94365692 -119.53289795]
[117.95851135 -111.19598389]
[116.49961853 -96.26709747]
[115.04071808 -81.33821869]
[113.58182526 -66.40933228]
[128.95268250 -57.88858414]
[139.14187622 -43.50496292]
[142.09878540 -26.07475853]
[137.19435120 -9.03497219]
[125.35421753 4.23443079]
[108.88440704 11.08094501]
[108.51914215 26.07649612]
[108.15387726 41.07204819]
[107.78861237 56.06760025]
[107.42334747 71.06315613]
[107.05808258 86.05870819]
[114.87218475 98.86260223]
[128.37538147 105.39435577]
[141.87857056 111.92610931]
[155.38175964 118.45786285]
[168.88494873 124.98962402]
[182.38813782 131.52137756]
[195.89134216 138.05313110]
[211.45486450 134.16001892]
[224.11431885 144.01486206]
[224.15844727 160.05784607]
[211.55340576 169.98219299]
[195.96870422 166.17477417]
[189.35957336 151.55632019]
[175.85638428 145.02456665]
[162.35319519 138.49281311]
[148.85000610 131.96105957]
[135.34681702 125.42930603]
[121.84362030 118.89754486]
[108.34043121 112.36579132]
[117.05910492 124.57172394]
[129.73866272 132.58601379]
[138.23106384 144.95043945]
[141.16030884 159.66163635]
[138.05178833 174.33601379]
[129.40914917 186.59590149]
[116.63274384 194.45487976]
[101.79269409 196.63957214]
[87.29348755 192.79602051]
[75.48438263 183.54696655]
[68.27877045 170.39100647]
[66.84415436 155.45977783]
[71.41298676 141.17251587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[9 24]
[10 23]
[11 22]
[34 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[48 85]
[49 84]
[50 83]
[51 82]
[52 80]
[53 79]
[54 78]
[58 75]
[59 74]
[60 73]
[61 72]
[63 70]
[64 69]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
