%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGCGGGUUGGGGUUGGGGCUGUCUGGCAGCCAAUGGGAGCGUUACUCCUUCAUCCUUCGAGGAGGGGGCCGGCAGGUGUGGUUGCAAGCUGGACUAGCAGCCCAGCGGGGCGAGACGGGGGAGUAGGAAUUG\
) } def
/len { sequence length } bind def

/coor [
[-36.48955917 245.07116699]
[-37.90657043 230.13824463]
[-31.80589676 216.43408203]
[-45.23334503 223.12016296]
[-58.66079330 229.80624390]
[-72.08824158 236.49230957]
[-77.34298706 254.62066650]
[-93.85496521 263.09066772]
[-111.04691315 256.99468994]
[-124.15125275 264.29376221]
[-137.25558472 271.59283447]
[-150.35992432 278.89187622]
[-163.46426392 286.19094849]
[-172.49264526 302.19216919]
[-189.98260498 301.34112549]
[-202.91485596 308.94094849]
[-215.84710693 316.54074097]
[-228.77934265 324.14053345]
[-241.71159363 331.74035645]
[-254.64384460 339.34014893]
[-262.25875854 353.86410522]
[-278.65310669 354.26092529]
[-286.96179199 340.12240601]
[-278.63754272 325.99304199]
[-262.24365234 326.40789795]
[-249.31140137 318.80810547]
[-236.37915039 311.20831299]
[-223.44689941 303.60848999]
[-210.51466370 296.00869751]
[-197.58241272 288.40890503]
[-194.20845032 276.73394775]
[-183.41978455 270.31323242]
[-170.76332092 273.08660889]
[-157.65899658 265.78756714]
[-144.55465698 258.48849487]
[-131.45031738 251.18942261]
[-118.34598541 243.89035034]
[-117.65592957 232.39752197]
[-111.40451813 222.58584595]
[-101.06776428 216.98963928]
[-89.19363403 217.12136841]
[-78.77432251 223.06486511]
[-65.34687042 216.37878418]
[-51.91942215 209.69271851]
[-38.49197006 203.00663757]
[-25.92450905 194.81768799]
[-14.38449955 185.23498535]
[-2.84448981 175.65228271]
[8.69551945 166.06958008]
[20.23552895 156.48687744]
[31.77553940 146.90417480]
[43.31554794 137.32147217]
[54.85555649 127.73877716]
[66.39556885 118.15607452]
[60.29442978 95.53242493]
[68.62200928 72.50994873]
[89.49884033 57.81000519]
[86.06457520 43.20843124]
[82.63031769 28.60686111]
[79.19606018 14.00529099]
[75.76180267 -0.59627962]
[66.24968719 -14.63038063]
[77.10211945 -27.65578461]
[92.62273407 -20.83326530]
[90.36337280 -4.03053808]
[93.79763031 10.57103252]
[97.23188782 25.17260361]
[100.66615295 39.77417374]
[104.10041046 54.37574387]
[118.61875916 58.14635468]
[128.72419739 47.06121826]
[138.70092773 35.86011124]
[148.54762268 24.54451942]
[158.39431763 13.22892857]
[168.24101257 1.91333818]
[178.08770752 -9.40225220]
[177.17744446 -24.95246696]
[187.32460022 -36.28781509]
[202.15495300 -37.05977249]
[212.00164795 -48.37536240]
[221.84834290 -59.69095612]
[224.45291138 -75.88195038]
[239.87127686 -81.46818542]
[252.24235535 -70.70302582]
[248.83982849 -54.66073990]
[233.16394043 -49.84425735]
[223.31724548 -38.52866745]
[213.47055054 -27.21307755]
[214.75489807 -12.41828060]
[204.93014526 -0.80239272]
[189.40328979 0.44444299]
[179.55659485 11.76003361]
[169.70989990 23.07562447]
[159.86320496 34.39121628]
[150.01651001 45.70680618]
[147.98045349 52.88197708]
[139.80932617 57.16665268]
[129.70388794 68.25178528]
[134.16719055 74.85768127]
[137.24429321 82.00304413]
[138.89201355 89.40918732]
[139.12127686 96.80040741]
[137.99447632 103.91416168]
[152.32319641 108.35125732]
[166.65191650 112.78834534]
[180.98063660 117.22544098]
[196.84410095 113.06819916]
[208.18215942 124.91642761]
[203.33119202 140.58168030]
[187.28144836 143.94889832]
[176.54354858 131.55415344]
[162.21482849 127.11706543]
[147.88610840 122.67997742]
[133.55738831 118.24288177]
[126.88078308 127.13529205]
[117.92585754 133.72779846]
[107.45158386 137.46163940]
[96.34574127 138.02035522]
[85.54962158 135.35658264]
[75.97827148 129.69609070]
[64.43826294 139.27877808]
[52.89825058 148.86148071]
[41.35824203 158.44418335]
[29.81823158 168.02688599]
[18.27822113 177.60958862]
[6.73821259 187.19229126]
[-4.80179739 196.77499390]
[-16.34180641 206.35769653]
[-1.34187627 206.31204224]
[11.74649715 213.63969421]
[19.54827881 226.45111084]
[20.05166054 241.44265747]
[13.12683868 254.74855042]
[0.55948287 262.93765259]
[-14.40972424 263.89831543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[6 42]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[46 128]
[47 127]
[48 126]
[49 125]
[50 124]
[51 123]
[52 122]
[53 121]
[54 120]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[70 98]
[71 97]
[72 95]
[73 94]
[74 93]
[75 92]
[76 91]
[79 88]
[80 87]
[81 86]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
