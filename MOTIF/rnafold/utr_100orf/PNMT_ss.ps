%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGGCGGACCGCGGCGGCAGCAUGAGCGGCGCAGACCGUAGCCCCAAUGCGGGCGCAGCCCCUGACUCGGCCCCGGGCCAGGCGGCGGUGGCUUCGGCCUACCAGCGCUUCGAGCCGCGCG\
) } def
/len { sequence length } bind def

/coor [
[86.30084229 370.12442017]
[73.28823853 359.25665283]
[80.12905884 343.74407959]
[80.88879395 328.76333618]
[73.80605316 315.66052246]
[82.23239136 302.26995850]
[82.99212646 287.28921509]
[83.75186920 272.30844116]
[84.51160431 257.32769775]
[74.36701965 246.48228455]
[74.92409515 231.27885437]
[86.36855316 220.71182251]
[87.12828827 205.73107910]
[80.04554749 192.62825012]
[88.47187805 179.23768616]
[89.23162079 164.25692749]
[89.99135590 149.27618408]
[90.75109100 134.29544067]
[83.99547577 131.71080017]
[77.90350342 127.81122589]
[72.72779083 122.75843048]
[68.68296051 116.76192474]
[54.26170731 120.88836670]
[43.25848007 133.04818726]
[27.28525352 129.33496094]
[22.77391243 113.56854248]
[34.36533737 101.96807098]
[50.13526535 106.46711731]
[64.55651855 102.34067535]
[65.20642090 92.84973907]
[68.35198975 83.87167358]
[56.72675705 74.39253998]
[45.10152435 64.91341400]
[33.47628784 55.43428040]
[28.09340286 54.57762527]
[24.04109001 51.94657898]
[21.78193474 48.37730026]
[21.36422539 44.76696396]
[10.49233246 34.43246078]
[-0.37955910 24.09795570]
[-11.25145054 13.76345158]
[-22.12334251 3.42894745]
[-37.64052582 5.36571836]
[-50.74416733 -3.16824722]
[-55.24713135 -18.14347076]
[-49.02325439 -32.48910904]
[-35.01126099 -39.43159485]
[-19.82718658 -35.69289017]
[-10.64048672 -23.03830528]
[-11.78883934 -7.44294405]
[-0.91694713 2.89155960]
[9.95494461 13.22606373]
[20.82683563 23.56056786]
[31.69872856 33.89506912]
[42.95541763 43.80904770]
[54.58065414 53.28817749]
[66.20588684 62.76730728]
[77.83112335 72.24643707]
[100.06555176 61.85158539]
[125.55828094 68.22772980]
[134.12730408 55.91627884]
[142.69633484 43.60482788]
[151.10871887 31.18581772]
[159.36309814 18.66123962]
[167.61749268 6.13666296]
[175.87188721 -6.38791418]
[177.00558472 -22.16844940]
[190.46974182 -28.53758240]
[198.72413635 -41.06216049]
[206.97853088 -53.58673859]
[215.23291016 -66.11131287]
[215.66113281 -82.50486755]
[230.19964600 -90.09194946]
[243.89247131 -81.06761932]
[242.65361023 -64.71533203]
[227.75749207 -57.85692215]
[219.50309753 -45.33234787]
[211.24871826 -32.80776978]
[202.99432373 -20.28319168]
[202.45101929 -5.39849854]
[188.39646912 1.86647630]
[180.14207458 14.39105320]
[171.88768005 26.91563034]
[163.63328552 39.44020844]
[162.56742859 46.84084320]
[155.00778198 52.17385101]
[146.43876648 64.48530579]
[137.86973572 76.79675293]
[143.43397522 90.72654724]
[158.12692261 93.74602509]
[172.81988525 96.76550293]
[187.54989624 99.59861755]
[202.31462097 102.24491882]
[217.07934570 104.89121246]
[232.31320190 98.81983185]
[245.01875305 109.18810272]
[242.12562561 125.33002472]
[226.61001587 130.64018250]
[214.43304443 119.65593719]
[199.66831970 117.00964355]
[184.90359497 114.36334229]
[177.68240356 116.30234528]
[169.80039978 111.45845795]
[155.10745239 108.43898010]
[140.41450500 105.41950226]
[133.09587097 120.67768860]
[120.65064240 131.02891541]
[105.73184204 135.05517578]
[104.97210693 150.03591919]
[104.21236420 165.01666260]
[103.45262909 179.99742126]
[110.48103333 194.17176819]
[102.10903931 206.49081421]
[101.34929657 221.47155762]
[111.66598511 233.14219666]
[110.68209839 248.32398987]
[99.49234772 258.08743286]
[98.73261261 273.06820679]
[97.97287750 288.04895020]
[97.21313477 303.02969360]
[104.24153900 317.20404053]
[95.86954498 329.52307129]
[95.10980988 344.50384521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[6 120]
[7 119]
[8 118]
[9 117]
[12 114]
[13 113]
[15 111]
[16 110]
[17 109]
[18 108]
[22 29]
[23 28]
[31 58]
[32 57]
[33 56]
[34 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[60 88]
[61 87]
[62 86]
[63 84]
[64 83]
[65 82]
[66 81]
[68 79]
[69 78]
[70 77]
[71 76]
[89 105]
[90 104]
[91 103]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
