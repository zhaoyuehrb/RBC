%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAUGUUGUCCUCCCUGCGAGGAUCAAAGUAGGCAAGAUGGCGUCGAGCGGCGGGGAGCUAGGGAGUUUAUUUGAUCACCACGUCCAGAGGGCGGUAUGCGACACACGGGCCAAAUAUCGAGAGGGACGACGGCCUC\
) } def
/len { sequence length } bind def

/coor [
[239.45475769 309.85125732]
[231.73384094 295.70361328]
[230.93360901 279.54803467]
[237.26388550 264.59976196]
[227.25985718 253.42303467]
[213.00639343 249.10003662]
[209.56774902 233.65702820]
[199.56372070 222.48030090]
[189.55969238 211.30357361]
[179.55564880 200.12684631]
[169.55162048 188.95010376]
[159.54759216 177.77337646]
[149.54356384 166.59664917]
[139.53952026 155.41990662]
[129.53549194 144.24317932]
[119.53145599 133.06645203]
[109.52742767 121.88971710]
[94.90448761 123.32310486]
[82.21167755 115.92191315]
[76.25692749 102.48963928]
[79.29584503 88.11431122]
[69.29180908 76.93758392]
[59.28777695 65.76084900]
[40.40670776 65.48874664]
[27.87308502 51.79212189]
[29.22624969 33.59377289]
[18.73762512 22.87049294]
[8.24899960 12.14721298]
[-2.23962641 1.42393315]
[-12.72825146 -9.29934692]
[-23.21687698 -20.02262688]
[-33.70550156 -30.74590683]
[-42.01273727 -34.73512650]
[-44.30427551 -41.82434082]
[-54.55311203 -52.77702713]
[-64.80194855 -63.72971344]
[-75.05078888 -74.68239594]
[-85.29962158 -85.63508606]
[-100.21993256 -82.26882935]
[-114.72612762 -86.79287720]
[-124.95221710 -97.89663696]
[-128.22549438 -112.53021240]
[-123.76461029 -126.74169159]
[-134.01344299 -137.69438171]
[-144.26228333 -148.64706421]
[-154.51112366 -159.59974670]
[-169.58978271 -164.38978577]
[-172.63615417 -178.96952820]
[-182.88499451 -189.92222595]
[-198.04144287 -187.04379272]
[-212.33949280 -192.83769226]
[-221.21669006 -205.45510864]
[-221.84033203 -220.86985779]
[-214.01144409 -234.16316223]
[-200.22816467 -241.09317017]
[-184.88871765 -239.44854736]
[-172.88784790 -229.75407410]
[-168.05499268 -215.10324097]
[-171.93229675 -200.17105103]
[-161.68347168 -189.21836853]
[-147.33787537 -185.21173096]
[-143.55844116 -169.84858704]
[-133.30960083 -158.89590454]
[-123.06076050 -147.94320679]
[-112.81192017 -136.99052429]
[-98.33587646 -140.49905396]
[-83.95161438 -136.26243591]
[-73.55052185 -125.32242584]
[-69.99853516 -110.54811859]
[-74.34693909 -95.88392639]
[-64.09809875 -84.93123627]
[-53.84926224 -73.97855377]
[-43.60042572 -63.02586365]
[-33.35158920 -52.07317734]
[-22.98222351 -41.23453140]
[-12.49359703 -30.51125336]
[-2.00497174 -19.78797340]
[8.48365402 -9.06469250]
[18.97227859 1.65858757]
[29.46090508 12.38186741]
[39.94953156 23.10514832]
[51.20673752 20.74907875]
[62.30721664 24.18980598]
[70.42484283 32.67365646]
[73.43383026 44.14792633]
[70.46450806 55.75681686]
[80.46854401 66.93354797]
[90.47257233 78.11028290]
[105.09551239 76.67689514]
[117.78832245 84.07808685]
[123.74307251 97.51036072]
[120.70415497 111.88568878]
[130.70819092 123.06241608]
[140.71221924 134.23915100]
[150.71626282 145.41587830]
[160.72029114 156.59260559]
[170.72431946 167.76934814]
[180.72834778 178.94607544]
[190.73239136 190.12280273]
[200.73641968 201.29954529]
[210.74044800 212.47627258]
[220.74449158 223.65299988]
[235.71350098 228.77543640]
[238.43658447 243.41900635]
[248.44061279 254.59573364]
[261.90011597 250.14968872]
[275.99383545 251.18113708]
[288.58502197 257.50042725]
[297.77746582 268.11880493]
[302.20098877 281.40283203]
[301.21563721 295.32574463]
[295.00411987 307.77667236]
[304.75845337 319.17196655]
[314.51278687 330.56729126]
[324.26708984 341.96258545]
[334.02142334 353.35791016]
[347.66409302 350.08020020]
[361.31924438 353.00329590]
[372.31958008 361.49758911]
[378.54162598 373.85101318]
[378.81567383 387.61386108]
[373.14526367 400.08444214]
[382.64511108 411.69274902]
[398.39407349 413.01400757]
[408.53204346 425.13821411]
[407.04437256 440.87234497]
[394.81362915 450.88156128]
[379.09613037 449.22763062]
[369.21676636 436.89175415]
[371.03680420 421.19259644]
[361.53695679 409.58432007]
[345.69699097 412.58975220]
[330.40719604 407.18728638]
[319.85034180 394.75494385]
[316.96456909 378.60736084]
[322.62612915 363.11224365]
[312.87179565 351.71691895]
[303.11746216 340.32162476]
[293.36312866 328.92630005]
[283.60879517 317.53100586]
[268.28201294 321.92156982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 105]
[5 104]
[7 102]
[8 101]
[9 100]
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[21 88]
[22 87]
[23 86]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[43 65]
[44 64]
[45 63]
[46 62]
[48 60]
[49 59]
[112 140]
[113 139]
[114 138]
[115 137]
[116 136]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
