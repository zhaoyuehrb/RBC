%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:44:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAGUGGAGAAGGUGGCCAGUUCUCAGACAGAGGAAGAGUAGAAAUCAUAAAUGAGAGCUGUCUUCAUCCAAGGUGCUGAAGAGCACCCUGCGGCAUUCUGCUACCAGGUGAAUGGGUCUUGCCCCAGGACAGUACAUACUCUGGGCAUCC\
) } def
/len { sequence length } bind def

/coor [
[73.14620209 206.52917480]
[84.78839874 196.27056885]
[83.25110626 181.34954834]
[81.71381378 166.42854309]
[80.17652130 151.50752258]
[69.19571686 141.28881836]
[54.20283127 140.82688904]
[39.20994568 140.36495972]
[24.21706200 139.90303040]
[9.22022343 139.59506226]
[-5.77898645 139.44105530]
[-20.77819633 139.28706360]
[-35.77740479 139.13307190]
[-50.77661514 138.97906494]
[-54.59511185 141.32827759]
[-58.56299973 142.21110535]
[-62.18915176 141.76638794]
[-65.08130646 140.28158569]
[-66.98688507 138.14620972]
[-81.92289734 136.76219177]
[-96.85890961 135.37815857]
[-111.79492188 133.99414062]
[-126.73093414 132.61010742]
[-141.66694641 131.22608948]
[-156.60296631 129.84205627]
[-171.53897095 128.45803833]
[-186.47499084 127.07401276]
[-195.86384583 140.64878845]
[-210.72456360 147.61302185]
[-226.97761536 146.15902710]
[-240.21336365 136.77595520]
[-246.88850403 122.09133911]
[-261.84979248 121.01426697]
[-268.98968506 134.46572876]
[-280.98748779 143.84507751]
[-295.76455688 147.52729797]
[-310.76062012 144.87440491]
[-323.37753296 136.34603882]
[-331.42938232 123.41979218]
[-333.52105713 108.33520508]
[-329.29025269 93.70578003]
[-319.46990967 82.06616211]
[-305.76150513 75.43296814]
[-290.54006958 74.95545197]
[-276.44284058 80.71633911]
[-265.91223145 91.71752167]
[-260.77270508 106.05298615]
[-245.81143188 107.13005829]
[-238.89141846 95.31780243]
[-227.49501038 87.61343384]
[-213.82366943 85.57429504]
[-200.54830933 89.65663147]
[-190.28749084 99.11506653]
[-185.09095764 112.13800049]
[-170.15495300 113.52202606]
[-155.21893311 114.90605164]
[-140.28292847 116.29006958]
[-125.34690857 117.67409515]
[-110.41089630 119.05812073]
[-95.47488403 120.44214630]
[-80.53887177 121.82617188]
[-65.60285950 123.21019745]
[-50.62261963 123.97985840]
[-35.62340927 124.13385773]
[-20.62419891 124.28785706]
[-5.62498951 124.44184875]
[9.37421989 124.59584808]
[16.13671494 121.50054932]
[24.67898750 124.91014862]
[39.67187119 125.37207794]
[54.66475677 125.83399963]
[69.65764618 126.29592896]
[42.15982819 89.44819641]
[63.15798187 31.88733482]
[66.21637726 17.20243835]
[69.27477264 2.51753998]
[72.33316803 -12.16735744]
[75.39156342 -26.85225487]
[78.44995880 -41.53715134]
[72.80722046 -56.93492889]
[83.52694702 -69.34539032]
[99.58159637 -66.00171661]
[104.45552826 -50.34359741]
[93.13485718 -38.47875595]
[90.07646179 -23.79385948]
[87.01806641 -9.10896206]
[83.95967102 5.57593536]
[80.90127563 20.26083374]
[77.84288025 34.94573212]
[84.29923248 38.76221466]
[97.21192932 46.39518738]
[103.66827393 50.21166992]
[115.05934906 40.45239639]
[126.45042419 30.69312096]
[137.84149170 20.93384743]
[142.77853394 5.29550791]
[158.84654236 2.01661015]
[169.51612854 14.47020340]
[163.81134033 29.84509850]
[147.60076904 32.32492065]
[136.20970154 42.08419418]
[124.81862640 51.84347153]
[113.42755127 61.60274506]
[116.49214172 68.44805908]
[122.62131500 82.13867950]
[125.68589783 88.98399353]
[140.55250549 86.98793793]
[155.41909790 84.99188232]
[164.80749512 72.27835846]
[180.44810486 70.00978851]
[193.06166077 79.53206635]
[195.16474915 95.19580078]
[185.50964355 107.70797729]
[169.82455444 109.64533234]
[157.41516113 99.85848236]
[142.54855347 101.85453796]
[127.68195343 103.85059357]
[125.53337860 118.69591522]
[139.22399902 124.82508850]
[152.91462708 130.95426941]
[166.60525513 137.08343506]
[180.29588318 143.21261597]
[193.98651123 149.34178162]
[210.91362000 150.29528809]
[214.68325806 166.82484436]
[199.84323120 175.02301025]
[187.85733032 163.03240967]
[174.16670227 156.90324402]
[160.47607422 150.77406311]
[146.78546143 144.64489746]
[133.09483337 138.51571655]
[119.40420532 132.38653564]
[113.32753754 136.78247070]
[122.40370941 148.72496033]
[131.47987366 160.66744995]
[144.94004822 167.28741455]
[146.20735168 182.23377991]
[134.05395508 191.02552795]
[120.25485229 185.14465332]
[118.17943573 170.28912354]
[109.67681885 157.93171692]
[101.17420197 145.57431030]
[95.09753418 149.97023010]
[96.63482666 164.89125061]
[98.17211914 179.81225586]
[99.70941162 194.73327637]
[113.19869995 202.40261841]
[119.57316589 216.54991150]
[116.38169098 231.73522949]
[104.85146332 242.11952209]
[89.41609192 243.70980835]
[76.01079559 235.89459229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 146]
[3 145]
[4 144]
[5 143]
[6 72]
[7 71]
[8 70]
[9 69]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[32 48]
[33 47]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[92 103]
[93 102]
[94 101]
[95 100]
[106 117]
[107 116]
[108 115]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
