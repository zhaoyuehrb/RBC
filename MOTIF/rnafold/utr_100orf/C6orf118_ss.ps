%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:02:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGCCCAGCCCAGGCAGCUGGAGGGAAGGAAGCGAUGGCGGAGGAGCGGGAGCCUGAAUUGUACCUGAAGUGGAAGCACUGCGAGACGCCAGGCGUGAAGACCCUGUGUAAUCUGAAGCACUGCGAGACGCCAG\
) } def
/len { sequence length } bind def

/coor [
[53.37792969 192.07914734]
[38.57081223 189.68138123]
[32.95084763 175.77397156]
[41.93447113 163.76240540]
[44.73700333 149.02653503]
[47.53953934 134.29066467]
[40.13595581 133.09193420]
[30.61174965 144.68026733]
[21.08754349 156.26860046]
[11.56333733 167.85693359]
[2.03913116 179.44528198]
[5.08903837 194.78254700]
[-2.47848940 208.46708679]
[-17.09029770 214.03746033]
[-31.84713554 208.86352539]
[-39.78127670 195.38822937]
[-37.14646530 179.97421265]
[-25.18677139 169.89950562]
[-9.54920387 169.92106628]
[-0.02499749 158.33273315]
[9.49920845 146.74440002]
[19.02341461 135.15606689]
[28.54762077 123.56773376]
[92.57621002 90.57979584]
[90.51889038 75.72154999]
[88.46157837 60.86330414]
[86.40426636 46.00505829]
[72.75184631 42.17506027]
[61.63425446 33.44425964]
[54.71942520 21.16472626]
[53.02859497 7.21765661]
[56.78559875 -6.27479410]
[65.38787079 -17.27241325]
[77.50283051 -24.12542534]
[75.78674316 -39.02693558]
[74.07065582 -53.92844772]
[62.75475693 -68.40369415]
[70.24971008 -84.23014832]
[68.19239807 -99.08839417]
[66.13507843 -113.94664001]
[64.07776642 -128.80488586]
[62.02045059 -143.66313171]
[48.76341629 -148.27293396]
[38.84672546 -158.11166382]
[34.17700195 -171.20692444]
[35.61709213 -184.96839905]
[42.82723618 -196.70018005]
[54.34297943 -204.12887573]
[52.62689590 -219.03038025]
[50.91081238 -233.93190002]
[49.19472885 -248.83340454]
[39.55963898 -257.49432373]
[38.48008347 -270.00134277]
[45.99237823 -279.55255127]
[44.61842728 -294.48950195]
[30.77075386 -300.98483276]
[22.09080887 -313.45700073]
[20.82750893 -328.49929810]
[27.22034264 -342.06350708]
[39.46184158 -350.54943848]
[38.08788681 -365.48638916]
[36.71393585 -380.42333984]
[23.30936432 -388.23980713]
[17.09006882 -402.45599365]
[20.44749451 -417.60546875]
[32.09064484 -427.86300659]
[47.54248810 -429.28430176]
[60.86147690 -421.32290649]
[66.92619324 -407.04006958]
[63.40461731 -391.92788696]
[51.65087891 -381.79727173]
[53.02482986 -366.86035156]
[54.39878082 -351.92340088]
[67.98290253 -345.81298828]
[76.74289703 -333.64257812]
[78.24485779 -318.62225342]
[71.98577881 -304.77590942]
[59.55537033 -295.86346436]
[60.92932129 -280.92651367]
[71.82556915 -267.21801758]
[64.09623718 -250.54949951]
[65.81232452 -235.64797974]
[67.52840424 -220.74647522]
[69.24449158 -205.84495544]
[84.19163513 -199.81266785]
[94.13429260 -187.00740051]
[96.30011749 -170.84622192]
[90.00810242 -155.70204163]
[76.87869263 -145.72044373]
[78.93601227 -130.86219788]
[80.99332428 -116.00395203]
[83.05063629 -101.14570618]
[85.10795593 -86.28746033]
[94.59467316 -78.69389343]
[96.38633728 -66.26886749]
[88.97216797 -55.64453125]
[90.68825531 -40.74301910]
[92.40434265 -25.84150887]
[107.56301880 -20.91480255]
[119.11217499 -9.84559059]
[124.71797180 5.19916582]
[123.21726990 21.24234009]
[114.85856628 35.08575821]
[101.26251221 43.94774246]
[103.31982422 58.80598831]
[105.37713623 73.66423035]
[107.43445587 88.52247620]
[115.42533112 101.21680450]
[127.93309021 109.49665070]
[140.44085693 117.77650452]
[152.94860840 126.05635834]
[167.43566895 120.49715424]
[182.41481018 124.54744720]
[192.12625122 136.64982605]
[192.83573914 152.15068054]
[184.27047729 165.08959961]
[169.72396851 170.49131775]
[154.78964233 166.27876282]
[145.21005249 154.07174683]
[144.66876221 138.56411743]
[132.16099548 130.28427124]
[119.65324402 122.00441742]
[107.14548492 113.72456360]
[95.44819641 123.11569977]
[83.75193787 132.50599670]
[89.13281250 146.50764465]
[94.51367950 160.50929260]
[105.83948517 173.12525940]
[96.85185242 187.50088501]
[80.55000305 182.84407043]
[80.51203156 165.89016724]
[75.13115692 151.88851929]
[69.75028992 137.88685608]
[62.34670258 136.68812561]
[60.35611343 151.55546570]
[58.36552429 166.42279053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[24 107]
[25 106]
[26 105]
[27 104]
[34 98]
[35 97]
[36 96]
[38 93]
[39 92]
[40 91]
[41 90]
[42 89]
[48 84]
[49 83]
[50 82]
[51 81]
[54 79]
[55 78]
[60 73]
[61 72]
[62 71]
[108 123]
[109 122]
[110 121]
[111 120]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
