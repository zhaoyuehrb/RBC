%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACGCGGUGUUGCUGGAGCACUUCCCCGGGGGCCUAGACGCCUUUCCUUCUUCGUACUUCGACGAGGACGACUUCUUCACCGACCAGUCUUCACGGG\
) } def
/len { sequence length } bind def

/coor [
[56.53296280 144.29826355]
[66.97157288 133.52629089]
[81.13108063 128.57627869]
[66.17641449 127.41102600]
[51.22174072 126.24576569]
[41.97542572 136.18461609]
[28.87216187 138.88740540]
[16.80596161 133.57611084]
[10.15015602 122.42343903]
[-4.76104116 120.79365540]
[-19.67223930 119.16387939]
[-34.58343506 117.53409576]
[-49.49463272 115.90431213]
[-55.95992661 118.31659698]
[-61.75099564 117.14474487]
[-65.27180481 113.68141174]
[-80.05283356 111.12776184]
[-94.83386230 108.57410431]
[-109.61489105 106.02045441]
[-118.78630066 107.65687561]
[-124.81287384 103.15067291]
[-139.50733948 100.13856506]
[-148.72520447 101.48896790]
[-154.60871887 96.79751587]
[-169.20239258 93.32986450]
[-183.79606628 89.86222076]
[-198.38975525 86.39457703]
[-215.19760132 88.61550140]
[-221.98460388 73.07932281]
[-208.93441772 62.25671005]
[-194.92210388 71.80090332]
[-180.32843018 75.26854706]
[-165.73475647 78.73619080]
[-151.14106750 82.20383453]
[-136.49523926 85.44409943]
[-121.80076599 88.45620728]
[-107.06124115 91.23942566]
[-92.28021240 93.79307556]
[-77.49918365 96.34673309]
[-62.71815109 98.90038300]
[-47.86485291 100.99311066]
[-32.95365524 102.62289429]
[-18.04245567 104.25267792]
[-3.13125896 105.88246155]
[11.77993870 107.51224518]
[24.33653259 96.44556427]
[41.35335922 97.82625580]
[52.38700104 111.29109192]
[67.34166718 112.45635223]
[82.29634094 113.62161255]
[83.30206299 89.08326721]
[104.22695160 82.95418549]
[113.70899200 71.33132935]
[123.19104004 59.70846939]
[132.67308044 48.08561325]
[142.15513611 36.46275711]
[151.63717651 24.83990097]
[161.11923218 13.21704388]
[159.27513123 -2.47928762]
[169.13555908 -14.83029366]
[184.85050964 -16.50834084]
[197.09657288 -6.51787519]
[198.60838318 9.21393967]
[188.48899841 21.35369492]
[172.74208069 22.69909096]
[163.26004028 34.32194901]
[153.77798462 45.94480515]
[144.29594421 57.56766129]
[134.81390381 69.19051361]
[125.33184814 80.81337738]
[115.84980774 92.43623352]
[118.71199036 106.91790771]
[109.05331421 120.42070770]
[122.75016022 126.53596497]
[136.44700623 132.65121460]
[150.14385986 138.76646423]
[164.02426147 144.45278931]
[178.07479858 149.70469666]
[192.34976196 142.92228699]
[207.21136475 148.29896545]
[213.84246826 162.64483643]
[208.30895996 177.44874573]
[193.89378357 183.92781067]
[179.14920044 178.23809814]
[172.82290649 163.75523376]
[158.77236938 158.50332642]
[153.98524475 159.71746826]
[148.39392090 157.80776978]
[144.02861023 152.46331787]
[130.33175659 146.34806824]
[116.63491058 140.23280334]
[102.93806458 134.11755371]
[113.01695251 145.22682190]
[117.04681396 159.67536926]
[114.17255402 174.39741516]
[105.00405121 186.26916504]
[91.48673248 192.77163696]
[76.48876190 192.52507019]
[63.19247818 185.58180237]
[54.41915512 173.41510010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[5 48]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[16 40]
[17 39]
[18 38]
[19 37]
[21 36]
[22 35]
[24 34]
[25 33]
[26 32]
[27 31]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[73 92]
[74 91]
[75 90]
[76 89]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
