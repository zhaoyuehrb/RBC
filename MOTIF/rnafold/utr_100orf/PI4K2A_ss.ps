%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCGAGCGCAGUGGUGUGGAGCGCGCCGGGUCCCGGAGCCGGCUGUCUGAGGGAUGGACGAGACGAGCCCACUAGUGUCCCCCGAGCGGGCCCAACCCCCGGACUACACCUUCCCGUCGGGCUCGGGCGCUCACUUUCCGCAGGUGCCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[87.27414703 597.37713623]
[70.90416718 596.39947510]
[63.80881119 581.61474609]
[73.28717804 568.23223877]
[74.18140411 553.25891113]
[67.21659851 540.09301758]
[75.76284027 526.77862549]
[76.65706635 511.80529785]
[69.69226837 498.63940430]
[78.23850250 485.32504272]
[79.13272858 470.35171509]
[80.02695465 455.37838745]
[80.92118073 440.40509033]
[72.22325897 425.19006348]
[82.42116547 409.88793945]
[83.01751709 394.89981079]
[83.61386108 379.91165161]
[84.21021271 364.92352295]
[70.35841370 356.65133667]
[62.50948715 342.44821167]
[62.88057709 326.13116455]
[71.46507263 312.13980103]
[86.00880432 304.32849121]
[86.30703735 289.33145142]
[86.60527039 274.33441162]
[86.90350342 259.33737183]
[87.20173645 244.34034729]
[87.49996948 229.34330750]
[84.47217560 222.55621338]
[87.95617676 214.05186462]
[88.55252075 199.06373596]
[89.14887238 184.07559204]
[89.74521637 169.08744812]
[90.34156036 154.09930420]
[90.93791199 139.11116028]
[91.53425598 124.12302399]
[92.13060760 109.13488007]
[92.42884064 94.13784790]
[92.42884064 79.13784790]
[92.42884064 64.13784790]
[80.68231201 56.86728287]
[74.12670135 44.83058929]
[74.38677216 31.23536682]
[81.28704071 19.64454842]
[92.92585754 13.04263210]
[93.22409058 -1.95440269]
[79.59125519 -15.04810905]
[79.79742432 -33.63142014]
[93.24931335 -45.98915100]
[92.95108032 -60.98618698]
[92.65284729 -75.98322296]
[92.35461426 -90.98025513]
[92.05638123 -105.97729492]
[84.04623413 -119.62090302]
[91.52895355 -132.49949646]
[91.23072052 -147.49652100]
[90.93248749 -162.49356079]
[82.92234039 -176.13717651]
[90.40506744 -189.01576233]
[90.10683441 -204.01280212]
[89.80860138 -219.00982666]
[80.33811951 -207.37754822]
[66.12688446 -202.57746887]
[51.54271698 -206.08489990]
[41.06806564 -216.82183838]
[37.92231369 -231.48826599]
[43.07230759 -245.57647705]
[54.93519974 -254.75643921]
[69.86492920 -256.20669556]
[83.27283478 -249.48152161]
[91.03804779 -236.64773560]
[93.41401672 -251.45835876]
[95.78998566 -266.26898193]
[98.16596222 -281.07962036]
[92.71225739 -295.93115234]
[102.36785126 -307.27215576]
[104.74382019 -322.08279419]
[92.45111084 -331.20132446]
[85.81450653 -344.99316406]
[86.35904694 -360.28897095]
[93.95960236 -373.57391357]
[106.86962891 -381.79522705]
[122.12248230 -383.06372070]
[136.21318054 -377.08786011]
[145.90377808 -365.24087524]
[148.96743774 -350.24511719]
[144.70018005 -335.54650879]
[134.08256531 -324.52267456]
[119.55445099 -319.70681763]
[117.17848206 -304.89617920]
[122.80213165 -291.10403442]
[112.97658539 -278.70364380]
[110.60061646 -263.89300537]
[108.22464752 -249.08238220]
[105.84867859 -234.27175903]
[104.80563354 -219.30805969]
[105.10386658 -204.31103516]
[105.40209961 -189.31399536]
[113.39092255 -176.74307251]
[105.92952728 -162.79179382]
[106.22776031 -147.79475403]
[106.52599335 -132.79772949]
[114.51480865 -120.22680664]
[107.05341339 -106.27552795]
[107.35164642 -91.27848816]
[107.64987946 -76.28145599]
[107.94811249 -61.28442001]
[108.24634552 -46.28738403]
[118.04024506 -40.31236267]
[123.77117157 -30.23512268]
[123.90208435 -18.52278519]
[118.28372192 -8.10833645]
[108.22112274 -1.65616977]
[107.92288971 13.34086514]
[121.30616760 22.80368423]
[126.48255157 38.53029633]
[121.23200226 54.40708542]
[107.42884064 64.13784790]
[107.42884064 79.13784790]
[107.42884064 94.13784790]
[110.23758698 98.63757324]
[110.29381561 104.39416504]
[107.11875153 109.73123169]
[106.52239990 124.71937561]
[105.92605591 139.70751953]
[105.32970428 154.69564819]
[104.73336029 169.68379211]
[104.13700867 184.67193604]
[103.54066467 199.66007996]
[102.94431305 214.64822388]
[102.49700165 229.64154053]
[102.19876862 244.63858032]
[101.90053558 259.63562012]
[101.60230255 274.63265991]
[101.30406952 289.62969971]
[101.00583649 304.62670898]
[113.36140442 311.24734497]
[121.61006927 322.49896240]
[124.18215179 336.14370728]
[120.63003540 349.49813843]
[111.70481110 359.96099854]
[99.19834900 365.51986694]
[98.60200500 380.50799561]
[98.00565338 395.49615479]
[97.40930939 410.48428345]
[105.58735657 420.50442505]
[104.75001526 433.00869751]
[95.89450836 441.29931641]
[95.00027466 456.27261353]
[94.10604858 471.24594116]
[93.21182251 486.21926880]
[100.11266327 500.45614624]
[91.63038635 512.69952393]
[90.73616028 527.67285156]
[97.63700104 541.90972900]
[89.15472412 554.15313721]
[88.26049805 569.12646484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 157]
[5 156]
[7 154]
[8 153]
[10 151]
[11 150]
[12 149]
[13 148]
[15 145]
[16 144]
[17 143]
[18 142]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[28 131]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[37 123]
[38 120]
[39 119]
[40 118]
[45 114]
[46 113]
[49 108]
[50 107]
[51 106]
[52 105]
[53 104]
[55 102]
[56 101]
[57 100]
[59 98]
[60 97]
[61 96]
[71 95]
[72 94]
[73 93]
[74 92]
[76 90]
[77 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
