%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCGUACUAAGCAGACGGCUCGUAAAUCCACAGGCGGUAAAGCACCGCGCAAACAGCUGGCCACUAAGGCAGCUCGCAAGAGCGCUCCGGCCACGG\
) } def
/len { sequence length } bind def

/coor [
[200.00694275 165.63789368]
[189.00184631 155.32246399]
[182.17732239 141.83921814]
[180.37428284 126.80677795]
[165.78060913 123.33913422]
[151.18692017 119.87148285]
[136.59324646 116.40383911]
[121.99956512 112.93619537]
[115.60465240 120.19458008]
[106.96775055 124.55151367]
[97.32975006 125.38101959]
[88.07540131 122.56391144]
[80.53431702 116.50495148]
[75.78995514 108.07464600]
[74.52396393 98.48422241]
[60.47342300 93.23232269]
[44.78958511 100.78614044]
[28.77847099 94.85968781]
[22.06206131 79.52902222]
[7.85498857 74.71663666]
[-7.69800758 77.61747742]
[-17.27016830 66.20594788]
[-31.47724152 61.39356232]
[-45.68431473 56.58117676]
[-61.23731232 59.48201752]
[-70.80947113 48.07048798]
[-85.01654816 43.25810242]
[-99.07366943 50.48117828]
[-114.09528351 45.56929779]
[-121.16933441 31.43659210]
[-116.09891510 16.46774483]
[-101.89221191 9.54350853]
[-86.97780609 14.77190876]
[-80.20415497 29.05102730]
[-65.99708557 33.86341476]
[-51.46027374 30.61835861]
[-40.87192917 42.37410355]
[-26.66485596 47.18648911]
[-12.45778179 51.99887466]
[2.07902956 48.75381851]
[12.66737461 60.50956345]
[26.87444878 65.32195282]
[37.61367416 58.01777267]
[50.79425812 58.29211807]
[61.53449249 66.27008820]
[65.72531891 79.18178558]
[79.77585602 84.43368530]
[97.25060272 74.62743378]
[116.42029572 80.46285248]
[125.46721649 98.34252167]
[140.06089783 101.81016541]
[154.65457153 105.27780914]
[169.24824524 108.74545288]
[183.84191895 112.21309662]
[192.21426392 99.59845734]
[204.37449646 90.62622833]
[218.84349060 86.36377716]
[233.86947632 87.30702972]
[247.64013672 93.32289124]
[258.50115967 103.66759491]
[265.15496826 117.07862091]
[266.81585693 131.92877197]
[281.40951538 135.39640808]
[296.00320435 138.86405945]
[310.59689331 142.33169556]
[325.19055176 145.79934692]
[332.81689453 137.90367126]
[342.99194336 134.00715637]
[353.77835083 134.77763367]
[363.15344238 140.00128174]
[369.38861084 148.63572693]
[371.36782837 159.01741028]
[385.57492065 163.82978821]
[399.78198242 168.64218140]
[409.09616089 168.44613647]
[414.35198975 173.83146667]
[428.40252686 179.08335876]
[442.45306396 184.33525085]
[456.50360107 189.58715820]
[472.57946777 186.34693909]
[483.21905518 198.82617188]
[477.47726440 214.18728638]
[461.26077271 216.62809753]
[451.25170898 203.63769531]
[437.20117188 198.38578796]
[423.15063477 193.13389587]
[409.10009766 187.88200378]
[394.96960449 182.84924316]
[380.76251221 178.03686523]
[366.55545044 173.22447205]
[350.00347900 183.19972229]
[331.08853149 177.97518921]
[321.72290039 160.39302063]
[307.12924194 156.92538452]
[292.53555298 153.45773315]
[277.94189453 149.99008179]
[263.34820557 146.52244568]
[255.18484497 159.03822327]
[243.20954895 168.02273560]
[228.85606384 172.37614441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[15 47]
[16 46]
[19 42]
[20 41]
[22 39]
[23 38]
[24 37]
[26 35]
[27 34]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[72 90]
[73 89]
[74 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
