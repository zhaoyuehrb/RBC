%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCCUGCCCGUGGUGCUCCCGGGCUCCUGCUGCCCCGUGGCUGGGCUUUCGGGUGGGCCGCAGGCCGGGGGCCCGGGCGCCGCUGCCGCCGCCGCUC\
) } def
/len { sequence length } bind def

/coor [
[87.24835968 324.88272095]
[72.11355591 323.46630859]
[58.67519760 316.36148071]
[48.98253250 304.65161133]
[44.51362228 290.12243652]
[45.94993973 274.98950195]
[53.07246399 261.56051636]
[64.79505920 251.88325500]
[79.33010864 247.43345642]
[80.72779846 232.49871826]
[73.20878601 222.88194275]
[74.36679077 210.32472229]
[84.12152863 201.71067810]
[85.98300934 186.82662964]
[87.84449005 171.94258118]
[89.70597076 157.05853271]
[91.56745911 142.17448425]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[92.50000000 12.79650021]
[92.50000000 -2.20349932]
[92.50000000 -17.20349884]
[92.50000000 -32.20349884]
[92.50000000 -47.20349884]
[92.50000000 -62.20349884]
[92.50000000 -77.20349884]
[89.39952850 -83.36841583]
[89.93522644 -89.25252533]
[92.99551392 -93.12879181]
[93.92805481 -108.09976959]
[94.86060333 -123.07075500]
[86.87356567 -133.34519958]
[88.06563568 -145.89921570]
[97.23845673 -153.95387268]
[98.63614655 -168.88861084]
[100.03383636 -183.82334900]
[101.43151855 -198.75808716]
[102.82920837 -213.69282532]
[104.22689819 -228.62756348]
[96.56326294 -239.14543152]
[98.14517975 -251.65631104]
[107.56406403 -259.42178345]
[109.42554474 -274.30584717]
[111.28702545 -289.18988037]
[104.41822052 -304.08120728]
[114.09979248 -317.31750488]
[130.37217712 -315.28237915]
[136.49572754 -300.06942749]
[126.17107391 -287.32839966]
[124.30959320 -272.44436646]
[122.44811249 -257.56030273]
[130.17141724 -241.88702393]
[119.16163635 -227.22987366]
[117.76395416 -212.29513550]
[116.36626434 -197.36039734]
[114.96857452 -182.42565918]
[113.57088470 -167.49092102]
[112.17319489 -152.55618286]
[120.38020325 -137.13066101]
[109.83158875 -122.13821411]
[108.89904022 -107.16722870]
[107.96649933 -92.19624329]
[107.50000000 -77.20349884]
[107.50000000 -62.20349884]
[107.50000000 -47.20349884]
[107.50000000 -32.20349884]
[107.50000000 -17.20349884]
[107.50000000 -2.20349932]
[107.50000000 12.79650021]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[110.05449677 131.21661377]
[110.98178864 135.41210938]
[110.44270325 139.21792603]
[108.77880096 142.18447876]
[106.45149994 144.03596497]
[104.59001923 158.92001343]
[102.72853851 173.80406189]
[100.86705780 188.68811035]
[99.00557709 203.57215881]
[106.58921051 220.26153564]
[95.66253662 233.89640808]
[94.26484680 248.83114624]
[107.72185516 255.90061951]
[117.44529724 267.58493042]
[121.95241547 282.10229492]
[120.55591583 297.23895264]
[113.46875000 310.68664551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 95]
[10 94]
[13 92]
[14 91]
[15 90]
[16 89]
[17 88]
[18 83]
[19 82]
[21 80]
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[35 68]
[36 67]
[37 66]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
