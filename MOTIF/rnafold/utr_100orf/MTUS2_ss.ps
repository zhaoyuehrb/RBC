%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCUCUUAAUCUGAUUGCAGCUUGAAGGCAGCCCAUUUCCAUUAAGUAGGACUGCAUGGCAAGCAGCCCCACCAAAGGGUUGACAAUGAGCGUCCCAGUGGCUCCUAAGAAAUCAUGUUACACUCAGUUGCGGGACAACAGAAAUGCAGCAAGAA\
) } def
/len { sequence length } bind def

/coor [
[97.79256439 279.19976807]
[94.53423309 294.04739380]
[85.83788300 306.51501465]
[73.02965546 314.70144653]
[58.06270599 317.35830688]
[43.21939087 314.08044434]
[30.76320267 305.36770630]
[22.59362411 292.54873657]
[19.95645523 277.57830811]
[23.25384331 262.73931885]
[31.98296165 250.29458618]
[44.81268311 242.14187622]
[59.78657150 239.52441406]
[63.02110672 224.87730408]
[66.25564575 210.23019409]
[58.05091476 197.85206604]
[61.12253952 182.95173645]
[74.16148376 174.42979431]
[77.39602661 159.78268433]
[80.63056183 145.13557434]
[83.86509705 130.48846436]
[87.09963226 115.84136200]
[78.96736908 103.23714447]
[64.28902435 100.14746094]
[49.61067200 97.05778503]
[34.93232727 93.96810913]
[20.25397873 90.87842560]
[7.88805056 102.38150787]
[-8.73051262 104.24848938]
[-23.05357933 95.94233704]
[-29.55545044 80.89562988]
[-44.29197693 78.09655762]
[-59.02849960 75.29748535]
[-73.76502991 72.49841309]
[-88.52848816 69.84505463]
[-103.31743622 67.33768463]
[-118.21679688 72.65930176]
[-129.47163391 62.90339661]
[-144.26058960 60.39602280]
[-159.04954529 57.88864517]
[-173.83850098 55.38127136]
[-187.69912720 63.45978165]
[-202.60443115 57.52586365]
[-207.12033081 42.13150787]
[-197.78262329 29.08594894]
[-181.75437927 28.39662170]
[-171.33111572 40.59231949]
[-156.54216003 43.09969711]
[-141.75321960 45.60707092]
[-126.96426392 48.11444473]
[-113.12271118 42.61347961]
[-100.81005859 52.54872894]
[-86.02111053 55.05610657]
[-78.86257935 53.06300735]
[-70.96595001 57.76188660]
[-56.22942734 60.56095886]
[-41.49290085 63.36003494]
[-26.75637627 66.15910339]
[-17.89804268 56.13129044]
[-5.13479948 51.76781464]
[8.22155666 54.31431961]
[18.64892578 63.20853424]
[23.34365845 76.20008087]
[38.02200699 79.28975677]
[52.70035172 82.37944031]
[67.37870026 85.46911621]
[82.05704498 88.55879211]
[93.02398682 78.32521057]
[90.95595551 63.46844864]
[88.88792419 48.61169434]
[86.81990051 33.75493622]
[84.75186920 18.89817619]
[71.40618134 10.74792671]
[66.47069550 -4.09036827]
[72.27579498 -18.61051941]
[86.08049774 -25.95655441]
[101.36663818 -22.65990067]
[110.91657257 -10.27713871]
[110.22110748 5.34497261]
[99.60862732 16.83014870]
[101.67665863 31.68690681]
[103.74468231 46.54366302]
[105.81271362 61.40042114]
[107.88074493 76.25717926]
[113.18858337 62.22768402]
[113.23842621 47.22776413]
[121.24607086 34.54400635]
[134.76681519 28.04868317]
[149.67288208 29.72477722]
[161.41352844 39.06058502]
[166.40440369 53.20594406]
[163.12182617 67.84236145]
[152.56794739 78.50142670]
[137.96490479 81.92900085]
[125.49172974 90.26085663]
[140.43247986 88.92892456]
[155.37322998 87.59698486]
[170.31398010 86.26504517]
[185.25471497 84.93310547]
[193.57630920 81.03599548]
[200.50334167 83.72543335]
[215.46749878 82.68894196]
[230.43164062 81.65245056]
[245.39578247 80.61595917]
[260.35992432 79.57946777]
[275.32406616 78.54297638]
[278.20236206 63.73156738]
[284.81692505 50.17022324]
[294.71676636 38.78358459]
[307.22689819 30.34800911]
[321.49438477 25.43864822]
[336.54638672 24.39023018]
[351.35668945 27.27423859]
[364.91546631 33.89403534]
[376.29827881 43.79827499]
[384.72903442 56.31166458]
[389.63287354 70.58102417]
[390.67550659 85.63344574]
[387.78576660 100.44262695]
[381.16073608 113.99886322]
[371.25210571 125.37785339]
[358.73544312 133.80375671]
[344.46420288 138.70210266]
[329.41137695 139.73889160]
[314.60330200 136.84346008]
[301.04965210 130.21319580]
[289.67446899 120.30016327]
[281.25338745 107.78026581]
[276.36056519 93.50712585]
[261.39642334 94.54361725]
[246.43228149 95.58010864]
[231.46812439 96.61660004]
[216.50398254 97.65309143]
[201.53984070 98.68958282]
[186.58665466 99.87385559]
[171.64591980 101.20579529]
[156.70516968 102.53772736]
[141.76441956 103.86966705]
[126.82366943 105.20160675]
[140.91717529 110.33709717]
[149.99099731 122.28137207]
[151.15940857 137.23579407]
[144.05079651 150.44442749]
[130.92594910 157.70651245]
[115.95891571 156.71252441]
[103.90967560 147.77854919]
[98.61023712 133.74588013]
[101.74674225 119.07589722]
[98.51220703 133.72300720]
[95.27767181 148.37011719]
[92.04312897 163.01722717]
[88.80859375 177.66432190]
[97.04614258 190.88479614]
[93.55720520 205.69296265]
[80.90275574 213.46473694]
[77.66821289 228.11183167]
[74.43367767 242.75894165]
[86.91274261 251.43888855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 157]
[14 156]
[15 155]
[18 152]
[19 151]
[20 150]
[21 149]
[22 148]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[31 58]
[32 57]
[33 56]
[34 55]
[35 53]
[36 52]
[38 50]
[39 49]
[40 48]
[41 47]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[95 139]
[96 138]
[97 137]
[98 136]
[99 135]
[101 134]
[102 133]
[103 132]
[104 131]
[105 130]
[106 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
