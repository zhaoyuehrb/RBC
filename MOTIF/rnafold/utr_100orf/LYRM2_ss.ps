%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCUGCGCGCUGAGGCUCCGGCGGACCUCUGGUGGACAUGGCUGCUUCCCGCUUACCCCCAGCGACGCUAACGUUAAAGCAGUUCGUAAGAAGGCAACAAGUUCUUCUCCUCUACAGAAGGAUUUUGCAAACAAUUC\
) } def
/len { sequence length } bind def

/coor [
[107.09943390 172.06333923]
[104.09059143 157.36820984]
[85.07689667 155.54408264]
[67.70918274 147.59356689]
[53.90308380 134.39356995]
[45.18136978 117.40005493]
[42.50603485 98.48734283]
[27.69071198 96.14082336]
[12.87538624 93.79430389]
[-1.96533334 91.61415863]
[-16.82958031 89.60066223]
[-31.69382668 87.58716583]
[-46.55807114 85.57366180]
[-61.42231750 83.56016541]
[-70.43081665 85.51880646]
[-76.59605408 81.33110046]
[-91.41138458 78.98458099]
[-101.11663055 90.80640411]
[-115.34216309 96.14784241]
[-130.23234558 93.66814423]
[-141.80465698 84.13203430]
[-147.01487732 70.17784882]
[-161.83021545 67.83133698]
[-176.64553833 65.48481750]
[-191.46086121 63.13830185]
[-206.27618408 60.79178238]
[-212.25323486 68.66837311]
[-220.66363525 73.75577545]
[-230.29985046 75.37377930]
[-239.79666138 73.33670044]
[-247.82464600 67.97366333]
[-253.27619934 60.07624054]
[-255.41836548 50.78188705]
[-269.96371460 47.11678314]
[-284.50906372 43.45167542]
[-299.05438232 39.78657150]
[-313.59973145 36.12146378]
[-327.03665161 44.44160843]
[-342.40188599 40.74222565]
[-350.57949829 27.21809387]
[-346.71786499 11.89284039]
[-333.10803223 3.85866690]
[-317.82446289 7.88210535]
[-309.93463135 21.57612038]
[-295.38928223 25.24122810]
[-280.84393311 28.90633392]
[-266.29861450 32.57143784]
[-251.75326538 36.23654556]
[-235.28417969 24.25077629]
[-215.00671387 28.19769478]
[-203.92967224 45.97645950]
[-189.11434937 48.32297516]
[-174.29901123 50.66949081]
[-159.48368835 53.01601028]
[-144.66836548 55.36252594]
[-135.40107727 43.70135880]
[-121.44831848 38.20802307]
[-106.52064514 40.45100403]
[-94.64196014 49.92694855]
[-89.06486511 64.16925812]
[-74.24954224 66.51576996]
[-59.40882111 68.69591522]
[-44.54457474 70.70941925]
[-29.68032646 72.72291565]
[-14.81608105 74.73641205]
[0.04816562 76.74991608]
[7.15731192 74.51225281]
[15.22190380 78.97898102]
[30.03722954 81.32550049]
[44.85255432 83.67201233]
[48.72552872 73.94673920]
[54.29710388 65.08454132]
[61.38270950 57.37900925]
[69.74761200 51.08541107]
[79.11470795 46.41223526]
[89.17367554 43.51429749]
[99.59130096 42.48759460]
[110.02246094 43.36613846]
[120.12160492 46.12083054]
[129.55416870 50.66040802]
[138.00765991 56.83448792]
[149.30374146 46.96540833]
[150.96638489 34.12051773]
[160.64753723 26.13424301]
[172.77191162 26.89467430]
[184.28657532 17.28153992]
[195.80125427 7.66840601]
[200.93742371 -7.90566540]
[217.04595947 -10.97927475]
[227.55578613 1.60944486]
[221.65527344 16.91029739]
[205.41438293 19.18307686]
[193.89971924 28.79621124]
[182.38504028 38.40934372]
[177.28585815 55.16434479]
[159.17282104 58.26147842]
[147.87673950 68.13056183]
[153.57604980 79.08466339]
[156.80577087 91.00285339]
[157.41703796 103.33576202]
[155.38168335 115.51490784]
[169.17460632 121.41028595]
[182.96752930 127.30566406]
[196.76043701 133.20103455]
[210.55335999 139.09640503]
[224.34626770 144.99179077]
[238.13919067 150.88716125]
[251.93209839 156.78253174]
[265.72503662 162.67791748]
[279.51794434 168.57328796]
[293.38610840 161.34779358]
[308.64294434 164.77749634]
[318.08465576 177.24298096]
[317.25311279 192.85844421]
[306.54098511 204.25073242]
[291.00619507 206.04075623]
[277.98379517 197.38331604]
[273.62255859 182.36621094]
[259.82965088 176.47082520]
[246.03672791 170.57545471]
[232.24382019 164.68008423]
[218.45089722 158.78469849]
[204.65797424 152.88932800]
[190.86506653 146.99395752]
[177.07214355 141.09857178]
[163.27923584 135.20320129]
[149.48631287 129.30783081]
[136.36155701 144.56098938]
[118.78572845 154.35935974]
[121.79456329 169.05448914]
[136.39099121 173.83358765]
[146.63037109 185.28132629]
[149.75836182 200.31832886]
[144.93353271 214.89970398]
[133.45375061 225.10314941]
[118.40702057 228.18399048]
[103.84083557 223.31347656]
[93.67342377 211.80177307]
[90.63977814 196.74545288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[7 70]
[8 69]
[9 68]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[16 61]
[17 60]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[81 97]
[82 96]
[85 94]
[86 93]
[87 92]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
