%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCGCCUUUGCCUCCAAGGCUUUGCUGGCUUGUGCGGCAUCCUGCUCCGUCUGCAGGUUGUGCUUCCGGUGCGGAGGUCAGGGACAAGAUGGUGCCACCGGUGCAGGUCUCUCCGCUCAUCAAGCUCGGCCGCUACUCCGCCCUGUUCCUCGGUGUGGCCUACGGAGCCACGCGCUACAAUUACCUAA\
) } def
/len { sequence length } bind def

/coor [
[119.98543549 218.26675415]
[132.67231750 210.09941101]
[128.08377075 195.81846619]
[123.49522400 181.53753662]
[118.90667725 167.25659180]
[114.31813049 152.97564697]
[109.72958374 138.69471741]
[102.30200958 137.65496826]
[104.91460419 152.42568970]
[91.67405701 159.47465515]
[80.87866974 149.06025696]
[87.44685364 135.57546997]
[80.01927185 134.53572083]
[71.68572235 147.00776672]
[63.35216522 159.47981262]
[55.01861191 171.95185852]
[51.24620819 188.48077393]
[34.31893921 189.43147278]
[28.71946907 173.42889404]
[42.54656982 163.61830139]
[50.88012314 151.14625549]
[59.21367645 138.67420959]
[67.54722595 126.20217133]
[62.95748901 111.85944366]
[63.98477173 97.85306549]
[69.74962616 86.16574860]
[78.74979401 78.19356537]
[71.24979401 65.20318604]
[63.74979401 52.21280289]
[56.24979401 39.22242355]
[48.64376831 26.29383469]
[40.93222809 13.42790604]
[33.22068787 0.56197655]
[25.50914764 -12.30395222]
[17.79760551 -25.16988182]
[-1.53419685 -34.39214706]
[-1.05710363 -55.01703262]
[-9.39065742 -67.48907471]
[-17.72421074 -79.96112061]
[-26.05776405 -92.43316650]
[-44.17539978 -92.59672546]
[-58.45051575 -103.49764252]
[-63.29352951 -120.63057709]
[-56.95054626 -137.09844971]
[-65.68771362 -149.29115295]
[-74.42488098 -161.48385620]
[-83.16204071 -173.67655945]
[-91.89920807 -185.86924744]
[-106.22673798 -192.57987976]
[-107.35085297 -207.43200684]
[-116.08802032 -219.62469482]
[-124.82518768 -231.81739807]
[-140.22817993 -232.04968262]
[-152.39866638 -241.20022583]
[-156.79530334 -255.59236145]
[-151.93240356 -269.64547729]
[-160.66957092 -281.83819580]
[-169.40673828 -294.03088379]
[-189.36286926 -296.22921753]
[-201.10861206 -312.13452148]
[-197.45272827 -331.25576782]
[-206.77764893 -343.00506592]
[-216.10255432 -354.75436401]
[-225.42745972 -366.50366211]
[-235.22505188 -377.86178589]
[-245.47894287 -388.80975342]
[-255.73281860 -399.75772095]
[-265.98669434 -410.70568848]
[-276.24060059 -421.65362549]
[-286.49447632 -432.60159302]
[-296.74835205 -443.54956055]
[-311.98886108 -450.97674561]
[-309.07095337 -467.67770386]
[-292.21490479 -469.49710083]
[-285.80038452 -453.80343628]
[-275.54650879 -442.85546875]
[-265.29263306 -431.90753174]
[-255.03874207 -420.95956421]
[-244.78486633 -410.01159668]
[-234.53097534 -399.06362915]
[-224.27708435 -388.11566162]
[-221.09394836 -402.77404785]
[-207.72422791 -409.57479858]
[-194.00259399 -403.51538086]
[-190.02256775 -389.05303955]
[-198.71183777 -376.82617188]
[-213.67816162 -375.82855225]
[-204.35325623 -364.07925415]
[-195.02833557 -352.32995605]
[-185.70343018 -340.58065796]
[-175.53897095 -342.20007324]
[-165.54370117 -339.42443848]
[-157.54598999 -332.69165039]
[-153.03768921 -323.16983032]
[-152.89608765 -312.55471802]
[-157.21403503 -302.76806641]
[-148.47686768 -290.57534790]
[-139.73970032 -278.38265991]
[-124.86925507 -278.47024536]
[-112.65415955 -269.68072510]
[-107.90130615 -255.21478271]
[-112.63248444 -240.55456543]
[-103.89531708 -228.36186218]
[-95.15814972 -216.16915894]
[-81.45555878 -210.33064270]
[-79.70650482 -194.60641479]
[-70.96934509 -182.41372681]
[-62.23217773 -170.22102356]
[-53.49501038 -158.02832031]
[-44.75784683 -145.83561707]
[-32.72243118 -147.55703735]
[-21.02991676 -143.97076416]
[-11.92244053 -135.70019531]
[-7.17372417 -124.27300262]
[-7.74382353 -111.83921051]
[-13.58572006 -100.76671600]
[-5.25216627 -88.29467773]
[3.08138704 -75.82263184]
[11.41494083 -63.35058594]
[20.31687927 -63.05715561]
[28.20088577 -58.62483978]
[33.22876358 -50.94149780]
[34.16178513 -41.66835785]
[30.66353416 -32.88142395]
[38.37507629 -20.01549339]
[46.08661652 -7.14956474]
[53.79815674 5.71636438]
[61.50970078 18.58229446]
[67.65498352 22.70986176]
[69.24017334 31.72242355]
[76.74017334 44.71280289]
[84.24017334 57.70318604]
[91.74017334 70.69356537]
[117.12265778 74.82250214]
[130.29110718 96.91119385]
[145.12875366 99.11215210]
[159.96640015 101.31311035]
[174.80404663 103.51406860]
[189.64169312 105.71502686]
[204.42779541 100.08637238]
[215.88201904 109.60740662]
[230.71966553 111.80836487]
[245.55731201 114.00932312]
[255.04235840 101.92919159]
[269.30267334 96.22490692]
[284.50231934 98.43089294]
[296.55267334 107.95374298]
[302.21221924 122.23187256]
[299.95858765 137.42453003]
[290.39801025 149.44496155]
[276.10223389 155.05973816]
[260.91671753 152.75851440]
[248.92630005 143.16029358]
[243.35635376 128.84696960]
[228.51870728 126.64601135]
[213.68106079 124.44506073]
[199.95625305 130.23114014]
[187.44073486 120.55267334]
[172.60308838 118.35171509]
[157.76544189 116.15075684]
[142.92779541 113.94979858]
[128.09014893 111.74884796]
[128.59095764 117.00084686]
[128.12731934 122.59557343]
[126.61762238 128.36012268]
[124.01052856 134.10617065]
[128.59907532 148.38710022]
[133.18762207 162.66804504]
[137.77616882 176.94898987]
[142.36471558 191.22993469]
[146.95324707 205.51086426]
[162.02304077 204.75984192]
[176.77349854 207.93569946]
[190.19894409 214.82191467]
[201.38398743 224.94897461]
[209.56602478 237.62637329]
[214.18719482 251.98977661]
[214.93238831 267.05984497]
[211.75083923 281.80908203]
[204.85943604 295.23187256]
[194.72807312 306.41302490]
[182.04750061 314.59014893]
[167.68231201 319.20574951]
[152.61195374 319.94515991]
[137.86395264 316.75790405]
[124.44383240 309.86132812]
[113.26660919 299.72564697]
[105.09436035 287.04190063]
[100.48429871 272.67495728]
[99.75073242 257.60430908]
[102.94367218 242.85752869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 171]
[3 170]
[4 169]
[5 168]
[6 167]
[7 166]
[13 23]
[14 22]
[15 21]
[16 20]
[27 133]
[28 132]
[29 131]
[30 130]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[37 119]
[38 118]
[39 117]
[40 116]
[44 110]
[45 109]
[46 108]
[47 107]
[48 106]
[50 104]
[51 103]
[52 102]
[56 98]
[57 97]
[58 96]
[61 90]
[62 89]
[63 88]
[64 87]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
[135 162]
[136 161]
[137 160]
[138 159]
[139 158]
[141 156]
[142 155]
[143 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
