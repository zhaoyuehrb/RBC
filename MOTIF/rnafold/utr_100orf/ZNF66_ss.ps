%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGGCACGCAGCUGGAAUGAACAGGACGGCUUCCGGAUUUGGCGGGGUCUUUGUCUCUCCCUGCAGCUGGAGCUCCAGGUCGUCUGUUCACUGCUCUCUGUCUUCUUCUCCUAGAG\
) } def
/len { sequence length } bind def

/coor [
[102.62844086 296.44769287]
[97.99279022 282.18197632]
[104.58610535 268.70874023]
[118.69509888 263.61599731]
[132.37449646 269.77270508]
[128.87281799 255.18714905]
[125.37113190 240.60159302]
[121.86945343 226.01605225]
[118.36777496 211.43049622]
[104.55932617 205.91101074]
[96.55407715 193.16816711]
[97.59948730 177.97737122]
[107.50374603 166.17855835]
[104.00205994 151.59300232]
[100.50038147 137.00746155]
[95.82176971 131.16615295]
[97.10325623 121.99431610]
[93.98458099 107.32210541]
[90.24472809 103.45538330]
[89.00656891 97.74607849]
[91.10793304 91.80112457]
[88.76142120 76.98579407]
[86.41490173 62.17047119]
[84.06838226 47.35514832]
[81.72187042 32.53982162]
[79.37535095 17.72449684]
[77.02883148 2.90917110]
[72.54557037 -5.19422388]
[74.82009888 -12.32422352]
[72.86220551 -27.19589615]
[70.90431213 -42.06756973]
[68.94641876 -56.93924332]
[66.98852539 -71.81091309]
[65.03063202 -86.68258667]
[61.91195679 -101.35480499]
[57.65172958 -115.73709869]
[53.39149857 -130.11940002]
[49.13126755 -144.50169373]
[44.87103653 -158.88398743]
[34.31586456 -161.53814697]
[25.92070580 -168.33602905]
[21.20119476 -177.96220398]
[20.97210693 -188.59916687]
[25.20747375 -198.27040100]
[33.05810928 -205.20764160]
[29.93943405 -219.87985229]
[26.82075882 -234.55207825]
[23.70208359 -249.22428894]
[20.58340836 -263.89648438]
[17.46473312 -278.56872559]
[2.71256709 -282.64697266]
[-8.44663143 -293.12222290]
[-13.44856167 -307.58734131]
[-11.14381504 -322.71832275]
[-2.06200719 -335.03817749]
[11.70993042 -341.71594238]
[27.00730515 -341.21707153]
[40.31489563 -333.65618896]
[48.57471085 -320.77078247]
[49.88871002 -305.52178955]
[43.95494461 -291.41329956]
[32.13694763 -281.68737793]
[35.25562286 -267.01516724]
[38.37429810 -252.34295654]
[41.49297333 -237.67074585]
[44.61164856 -222.99853516]
[47.73032379 -208.32632446]
[64.77497864 -199.11531067]
[69.81549835 -180.09761047]
[59.25333405 -163.14421082]
[63.51356506 -148.76191711]
[67.77379608 -134.37962341]
[72.03402710 -119.99732971]
[76.29425049 -105.61503601]
[85.06166077 -117.78600311]
[99.82664490 -120.43086243]
[112.27371216 -112.06005096]
[115.39279175 -97.38792419]
[107.42726135 -84.67768097]
[92.86321259 -81.08760834]
[79.90230560 -88.64048004]
[81.86019897 -73.76880646]
[83.81809235 -58.89713669]
[85.77598572 -44.02546310]
[87.73387909 -29.15378952]
[89.69177246 -14.28211689]
[91.84416199 0.56265408]
[94.19067383 15.37797928]
[96.53719330 30.19330406]
[98.88371277 45.00862885]
[101.23022461 59.82395554]
[103.57674408 74.63928223]
[105.92326355 89.45460510]
[108.65679169 104.20343018]
[111.77546692 118.87564087]
[115.08592987 133.50578308]
[118.58760834 148.09132385]
[122.08929443 162.67687988]
[136.27059937 168.69325256]
[144.09854126 181.75375366]
[142.75094604 196.74200439]
[132.95332336 207.92881775]
[136.45500183 222.51437378]
[139.95668030 237.09991455]
[143.45835876 251.68547058]
[146.96005249 266.27102661]
[151.59530640 280.53686523]
[157.33555603 294.39505005]
[163.07580566 308.25323486]
[177.77113342 314.06896973]
[183.97322083 328.60546875]
[178.00244141 343.23849487]
[163.40118408 349.28652954]
[148.83210754 343.16140747]
[142.93878174 328.49700928]
[149.21760559 313.99349976]
[143.47735596 300.13531494]
[137.73710632 286.27709961]
[130.28994751 299.29785156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 106]
[6 105]
[7 104]
[8 103]
[9 102]
[13 98]
[14 97]
[15 96]
[17 95]
[18 94]
[21 93]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[34 81]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
