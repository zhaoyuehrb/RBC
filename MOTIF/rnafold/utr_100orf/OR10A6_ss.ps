%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAGACAAAAUCAAAGCUGUGUGGUUGAAUUCAUCCUCUUGGGCUUUUCUAACUAUCCUGAGCUCCAGGGGCAGCUCUUUGUGGCUUUCCUGGUUA\
) } def
/len { sequence length } bind def

/coor [
[104.27618408 396.24282837]
[108.97014618 381.54690552]
[120.87871552 371.73928833]
[119.01723480 356.85522461]
[117.15575409 341.97119141]
[115.29427338 327.08712769]
[113.43279266 312.20309448]
[111.57131195 297.31903076]
[102.31438446 285.65036011]
[108.27928925 270.99667358]
[106.41780853 256.11260986]
[93.63199615 252.92399597]
[82.69475555 245.51644897]
[74.95155334 234.77445984]
[71.36410522 221.99429321]
[72.39098358 208.72761536]
[77.92913055 196.59306335]
[87.32372284 187.07881165]
[99.44551849 181.36001587]
[98.51296997 166.38903809]
[97.58042908 151.41806030]
[96.64788055 136.44706726]
[95.71533966 121.47608948]
[94.78279114 106.50510406]
[89.35021973 107.73587799]
[83.17626190 106.36342621]
[77.29179382 102.16381073]
[64.22434998 94.79889679]
[48.40318680 94.76354218]
[41.11462784 81.77407837]
[28.04718399 74.40916443]
[11.66345692 75.12015533]
[3.08529806 61.14348984]
[11.13718224 46.85716248]
[27.53602219 46.95772171]
[35.41209412 61.34172440]
[48.47953796 68.70663452]
[63.36603546 68.21520233]
[71.58926392 81.73145294]
[84.65670776 89.09636688]
[98.93690491 84.50550842]
[105.26442719 70.90541840]
[111.59195709 57.30532837]
[117.91947937 43.70523834]
[124.24700928 30.10514832]
[130.57453918 16.50506020]
[136.68978882 2.80821109]
[142.59129333 -10.98208427]
[148.49279785 -24.77238083]
[154.39430237 -38.56267548]
[144.01005554 -49.70212936]
[139.06054688 -64.10429382]
[140.40330505 -79.27389526]
[147.80566406 -92.58271790]
[159.98515320 -101.72492981]
[174.83158875 -105.11657715]
[189.77273560 -102.17004395]
[202.21995544 -93.39583588]
[210.01667786 -80.31413269]
[211.81208801 -65.19142151]
[207.29512024 -50.64780045]
[197.24835205 -39.20304489]
[183.41246033 -32.84002304]
[168.18460083 -32.66117096]
[162.28309631 -18.87087631]
[156.38159180 -5.08058071]
[150.48008728 8.70971489]
[150.74714661 16.22996521]
[144.17462158 22.83258438]
[137.84709167 36.43267441]
[131.51957703 50.03276443]
[125.19204712 63.63285065]
[118.86451721 77.23294067]
[112.53699493 90.83303070]
[109.75377655 105.57255554]
[110.68632507 120.54354095]
[111.61886597 135.51452637]
[112.55141449 150.48550415]
[113.48395538 165.45649719]
[114.41650391 180.42747498]
[130.31399536 186.49829102]
[141.98599243 198.80659485]
[147.17167664 214.89973450]
[144.89634705 231.59884644]
[135.65417480 245.62675476]
[121.30185699 254.25112915]
[123.16333771 269.13519287]
[132.55340576 281.86849976]
[126.45536041 295.45755005]
[128.31683350 310.34161377]
[130.17831421 325.22564697]
[132.03981018 340.10971069]
[133.90129089 354.99374390]
[135.76277161 369.87780762]
[149.71995544 376.45050049]
[157.88862610 389.53778076]
[157.66220093 404.96347046]
[149.11293030 417.80532837]
[134.96885681 423.96557617]
[119.74328613 421.47845459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[10 87]
[11 86]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[27 40]
[28 39]
[30 37]
[31 36]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 67]
[48 66]
[49 65]
[50 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
