%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:44:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUGAUUGACAGCCCUCAGGAAUGAUGCCCUUUUGCCACAAUAUAAUUAAUAUUUCCUGUGUGAAAAACAACUGGUCAAAUGAUGUCCGUGCUUCCCUGUACAGUUUAAUGGUGCUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[102.80229187 284.62609863]
[89.18852234 291.22311401]
[74.20219421 293.28833008]
[59.31151962 290.61947632]
[45.97532654 283.47796631]
[35.50016022 272.56347656]
[28.91227722 258.94528198]
[26.85708427 243.95756531]
[29.53593254 229.06867981]
[36.68637466 215.73727417]
[47.60788345 205.26942444]
[61.23048019 198.69067383]
[76.21955872 196.64552307]
[78.86585999 181.88079834]
[81.51215363 167.11607361]
[83.97120667 152.31901550]
[86.24262238 137.49198914]
[60.38687515 114.45449066]
[61.45501328 77.96382904]
[47.98794556 71.35791016]
[34.52087784 64.75199890]
[21.05381012 58.14608765]
[7.58674240 51.54017639]
[-5.88032579 44.93426514]
[-20.67359352 49.81248093]
[-34.23701096 42.92130280]
[-38.79647827 28.78812027]
[-52.26354599 22.18220711]
[-62.05678940 33.65143585]
[-74.39511108 42.32418442]
[-88.50292206 47.65527725]
[-103.49338531 49.30959320]
[-118.42419434 47.18314362]
[-132.35678101 41.40959930]
[-144.41534424 32.35189056]
[-153.84184265 20.57938957]
[-160.04374695 6.83212852]
[-162.63119507 -8.02572918]
[-161.44152832 -23.06020737]
[-156.54953003 -37.32622528]
[-148.26274109 -49.92700577]
[-137.10203552 -60.07045746]
[-123.76901245 -67.11895752]
[-109.10179138 -70.62941742]
[-94.02236176 -70.38118744]
[-79.47863007 -66.38985443]
[-66.38482666 -58.90631866]
[-55.56404877 -48.40101242]
[-47.69648743 -35.53429794]
[-43.27671051 -21.11499214]
[-42.58255005 -6.04950285]
[-45.65763474 8.71513939]
[-32.19056702 15.32105160]
[-18.22351265 10.27556324]
[-4.47188616 16.78305435]
[0.72558647 31.46719551]
[14.19265461 38.07310867]
[27.65972328 44.67901993]
[41.12678909 51.28493118]
[54.59386063 57.89084625]
[68.06092834 64.49675751]
[81.69101715 58.23412323]
[85.45080566 43.71296692]
[89.21059418 29.19180870]
[82.34389496 14.69256973]
[89.52765656 0.34777802]
[105.25112152 -2.83846903]
[117.45259094 7.57804441]
[116.77214050 23.60666084]
[103.73175049 32.95159531]
[99.97196198 47.47275543]
[96.21217346 61.99391174]
[102.14299011 66.58470917]
[116.02529144 60.90299606]
[114.00463104 75.76629639]
[119.93544769 80.35709381]
[133.05064392 73.07756042]
[141.36184692 59.61522675]
[156.24482727 60.20373917]
[169.36003113 52.92420959]
[175.13804626 37.95777893]
[190.48442078 33.28143311]
[203.62673950 42.48246765]
[204.48333740 58.50263596]
[192.39709473 69.05263519]
[176.63955688 66.03940582]
[163.52435303 73.31893921]
[156.15122986 86.26058960]
[140.33016968 86.19275665]
[127.21497345 93.47229004]
[129.29838562 108.32689667]
[143.91014099 111.71762085]
[158.52188110 115.10833740]
[173.13362122 118.49906158]
[186.41157532 109.92751312]
[201.84370422 113.33707428]
[210.27438354 126.70491028]
[206.70185852 142.10012817]
[193.24563599 150.38900757]
[177.88905334 146.65391541]
[169.74290466 133.11080933]
[155.13114929 129.72007751]
[140.51940918 126.32936096]
[125.90766907 122.93863678]
[119.69816589 127.14482880]
[130.89558411 137.12571716]
[142.96101379 146.03781128]
[142.65528870 161.03468323]
[130.23667908 169.44766235]
[116.19586182 164.16981506]
[112.39425659 149.65812683]
[107.27915192 135.55720520]
[101.06964874 139.76339722]
[98.79823303 154.59042358]
[100.60314178 163.66409302]
[96.27687836 169.76237488]
[93.63058472 184.52709961]
[90.98428345 199.29182434]
[104.33003998 206.41545105]
[114.81981659 217.31588745]
[121.42594910 230.92523193]
[123.50122070 245.91017151]
[120.84233093 260.80264282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 118]
[14 117]
[15 116]
[16 114]
[17 113]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[27 53]
[28 52]
[62 72]
[63 71]
[64 70]
[76 90]
[77 89]
[79 87]
[80 86]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
