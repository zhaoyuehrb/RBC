%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCUUGGGGAAUCACAGCACCAUCACCGAGUUCCUCCUCCUUGGGCUGUCUGCCGACCCCAACAUCCGGGCUCUGCUCUUUGUGCUGUUCCUGGGGA\
) } def
/len { sequence length } bind def

/coor [
[62.98767853 390.34826660]
[47.25215149 388.87564087]
[37.23122406 376.65447998]
[38.87014008 360.93539429]
[51.19655609 351.04425049]
[52.59424591 336.10949707]
[53.99193573 321.17477417]
[55.38962173 306.24002075]
[56.78731155 291.30529785]
[58.18500137 276.37054443]
[59.58269119 261.43579102]
[60.98038101 246.50106812]
[59.10798264 244.19055176]
[58.12419891 240.93461609]
[58.41996384 237.10220337]
[60.23166275 233.20606995]
[63.59275055 229.83952332]
[66.83301544 215.19369507]
[70.07328796 200.54785156]
[73.31355286 185.90200806]
[76.55381775 171.25616455]
[79.79409027 156.61032104]
[83.03435516 141.96447754]
[69.76776123 133.68772888]
[60.10904312 121.39071655]
[55.21086502 106.54096222]
[55.65776062 90.91062164]
[61.39640427 76.36499786]
[71.74195099 64.63993835]
[85.45977783 57.13471222]
[100.91281891 54.74497223]
[103.69603729 40.00544357]
[106.47925568 25.26591301]
[109.26246643 10.52638435]
[112.04568481 -4.21314430]
[114.82890320 -18.95267296]
[103.51050568 -26.13155556]
[95.36923981 -36.73811722]
[91.37978363 -49.46614075]
[92.00722504 -62.75770187]
[97.15294647 -74.99388123]
[106.16935730 -84.69190979]
[117.94132233 -90.68489838]
[131.02400208 -92.26216125]
[134.71818542 -106.80014801]
[138.41236877 -121.33813477]
[142.10655212 -135.87611389]
[145.80073547 -150.41410828]
[144.31404114 -157.15270996]
[146.28237915 -162.72366333]
[150.20304871 -165.72683716]
[154.79389954 -180.00703430]
[159.38476562 -194.28723145]
[155.39828491 -210.19447327]
[167.36770630 -221.40451050]
[182.97990417 -216.38543701]
[186.17440796 -200.30043030]
[173.66496277 -189.69638062]
[169.07409668 -175.41618347]
[164.48324585 -161.13598633]
[160.33871460 -146.71992493]
[156.64453125 -132.18193054]
[152.95034790 -117.64395142]
[149.25616455 -103.10596466]
[145.56198120 -88.56797791]
[158.73307800 -78.22916412]
[166.16297913 -63.16274643]
[166.34837341 -46.31035614]
[159.20562744 -30.98515511]
[146.09642029 -20.22047424]
[129.56843567 -16.16945648]
[126.78521729 -1.42992818]
[124.00199890 13.30960083]
[121.21878052 28.04912949]
[118.43556213 42.78865814]
[115.65235138 57.52818680]
[128.05950928 64.48219299]
[137.69618225 74.94309235]
[143.61087036 87.87801361]
[145.21958923 102.00981903]
[142.36349487 115.94317627]
[135.32460022 128.30236816]
[124.79786682 137.86709595]
[111.82270050 143.69296265]
[97.68019867 145.20475769]
[94.43992615 159.85058594]
[91.19966125 174.49642944]
[87.95939636 189.14227295]
[84.71912384 203.78811646]
[81.47885895 218.43395996]
[78.23859406 233.07980347]
[75.91512299 247.89875793]
[74.51743317 262.83349609]
[73.11974335 277.76824951]
[71.72205353 292.70297241]
[70.32436371 307.63772583]
[68.92667389 322.57244873]
[67.52898407 337.50720215]
[66.13129425 352.44192505]
[76.40838623 364.44848633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
