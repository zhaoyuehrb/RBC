%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCCUCAGAGACCUAUCAAUUGCAUCUGAGUUGCAGGGGCCAUGGCUUCCAAAUGCCUCAAGGCCGGCUUCUCUUCUGGGUCUCUCAAGAGCCCAGGAGGGGCCAGUGGGGGCUCCACUCGUGUGUCCGCAAUGUACUCCA\
) } def
/len { sequence length } bind def

/coor [
[92.30571747 136.65447998]
[81.02812195 146.54466248]
[69.75051880 156.43484497]
[68.94913483 173.87359619]
[56.06200409 185.14431763]
[39.34291458 183.67399597]
[28.28375435 193.80784607]
[17.22459412 203.94169617]
[6.16543388 214.07554626]
[-4.89372635 224.20941162]
[-15.95288658 234.34326172]
[-10.40642262 248.47128296]
[-10.34204292 263.64892578]
[-15.76845455 277.82348633]
[-25.95177841 289.07800293]
[-39.51480484 295.89041138]
[-54.62324524 297.33935547]
[-69.23381042 293.22888184]
[-81.37053680 284.11492920]
[-89.39202881 271.23004150]
[-92.21345520 256.31683350]
[-89.45323944 241.39216614]
[-81.48466492 228.47448730]
[-69.38543701 219.31082153]
[-54.79185867 215.14045715]
[-39.67760086 216.52740479]
[-26.08673859 223.28410339]
[-15.02757931 213.15023804]
[-3.96841931 203.01638794]
[7.09074068 192.88253784]
[18.14990044 182.74868774]
[29.20906067 172.61483765]
[27.97066498 159.74516296]
[34.48852539 148.35386658]
[46.56479645 142.73553467]
[59.86033630 145.15725708]
[71.13793182 135.26705933]
[82.41552734 125.37687683]
[69.62007141 102.14657593]
[79.59030914 77.96161652]
[68.75485229 67.58892059]
[57.91939163 57.21622086]
[47.08393097 46.84352875]
[28.23523331 48.02499771]
[14.68552589 35.32894135]
[14.64142799 17.07793617]
[3.36383080 7.18774796]
[-7.91376638 -2.70243907]
[-23.01793671 0.85335547]
[-37.31445694 -5.17898750]
[-45.30602264 -18.47990799]
[-43.91971207 -33.93493271]
[-33.68859482 -45.60128784]
[-18.54673958 -48.99302292]
[-4.31650019 -42.80594254]
[3.53030539 -29.41911316]
[1.97642088 -13.98003578]
[13.25401783 -4.08984900]
[24.53161430 5.80033827]
[35.57189941 2.59126639]
[46.89953232 5.17052460]
[55.64141083 13.00368595]
[59.52237320 24.20890236]
[57.45662689 36.00806808]
[68.29208374 46.38076401]
[79.12754822 56.75345993]
[89.96300507 67.12615204]
[104.91929626 65.98189545]
[114.05072021 54.08159637]
[123.18214417 42.18129349]
[132.31356812 30.28099442]
[141.44497681 18.38069534]
[150.57640076 6.48039484]
[159.70782471 -5.41990519]
[168.83924866 -17.32020569]
[170.10192871 -23.93497276]
[173.97087097 -28.22735214]
[178.63774109 -29.52886581]
[188.27954102 -41.01953125]
[197.92135620 -52.51020050]
[207.56317139 -64.00086212]
[217.20498657 -75.49153137]
[220.35791016 -84.14714813]
[227.18464661 -87.12471771]
[237.07482910 -98.40231323]
[246.96501160 -109.67990875]
[249.63189697 -125.86075592]
[265.07165527 -131.38758850]
[277.40118408 -120.57488251]
[273.93692017 -104.54581451]
[258.24261475 -99.78971863]
[248.35243225 -88.51212311]
[238.46223450 -77.23452759]
[228.69566345 -65.84971619]
[219.05384827 -54.35905075]
[209.41203308 -42.86838531]
[199.77021790 -31.37771797]
[190.12840271 -19.88705063]
[180.73954773 -8.18878365]
[171.60812378 3.71151614]
[162.47669983 15.61181641]
[153.34529114 27.51211548]
[144.21386719 39.41241837]
[135.08244324 51.31271744]
[125.95101929 63.21301651]
[116.81959534 75.11331940]
[130.29113770 96.83853912]
[122.19737244 121.45870972]
[135.18775940 128.95870972]
[148.17813110 136.45870972]
[161.16851807 143.95870972]
[174.15888977 151.45870972]
[189.97885132 151.65809631]
[197.13233948 164.72242737]
[210.12272644 172.22242737]
[223.78768921 165.06196594]
[239.15258789 166.44879150]
[251.31454468 175.94038391]
[256.39273071 190.50801086]
[252.76667786 205.50318909]
[241.59349060 216.14102173]
[226.43847656 219.02699280]
[212.13752747 213.24023438]
[203.25405884 200.62724304]
[202.62272644 185.21281433]
[189.63233948 177.71281433]
[174.74154663 178.04986572]
[166.65888977 164.44908142]
[153.66851807 156.94908142]
[140.67813110 149.44908142]
[127.68775177 141.94908142]
[114.69737244 134.44908142]
[122.50181580 147.25888062]
[133.84416199 157.07473755]
[139.56663513 170.94027710]
[138.44883728 185.89857483]
[130.72918701 198.75962830]
[118.05393219 206.78073120]
[103.12619019 208.25129700]
[89.12942505 202.85772705]
[79.04856873 191.75022888]
[75.03344727 177.29759216]
[77.94030762 162.58195496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[40 67]
[41 66]
[42 65]
[43 64]
[46 59]
[47 58]
[48 57]
[68 106]
[69 105]
[70 104]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[84 93]
[85 92]
[86 91]
[108 132]
[109 131]
[110 130]
[111 129]
[112 128]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
