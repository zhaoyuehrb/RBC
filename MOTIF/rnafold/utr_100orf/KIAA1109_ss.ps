%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUCUUUUAGGCCUUUAGAUGUUGUUCUGGAAAAACUUUAGUAAUGGAUCAAAGGAAGAAUGAGAGUAUUGUUCCUAGUAUAACUCAAUUAGAAGAUUUUCUUACAGAACACAAUUCCAAUGUUGUUUGGCUCCUUGUUGCUA\
) } def
/len { sequence length } bind def

/coor [
[242.27360535 216.54685974]
[230.29191589 207.52249146]
[218.31022644 198.49813843]
[206.32853699 189.47377014]
[194.34684753 180.44941711]
[182.36515808 171.42504883]
[170.38346863 162.40069580]
[158.40177917 153.37632751]
[146.42007446 144.35197449]
[134.43838501 135.32760620]
[122.45670319 126.30324554]
[110.47501373 117.27888489]
[87.63044739 121.31052399]
[70.93532562 99.24346924]
[55.94921494 99.88880157]
[40.96310425 100.53413391]
[25.97699356 101.17946625]
[10.99088097 101.82479858]
[2.48033619 105.34182739]
[-4.32389832 102.31928253]
[-19.32042503 102.64202118]
[-34.31695175 102.96476746]
[-42.90119934 106.29785919]
[-49.63882828 103.12961578]
[-64.63882446 103.12961578]
[-79.63882446 103.12961578]
[-94.63882446 103.12961578]
[-109.63882446 103.12961578]
[-124.63796234 103.29100037]
[-139.63449097 103.61373901]
[-154.63101196 103.93647766]
[-169.62754822 104.25922394]
[-184.62406921 104.58196259]
[-196.71522522 115.12632751]
[-212.47135925 112.10575867]
[-219.80570984 97.83737183]
[-213.09199524 83.26666260]
[-197.48040771 79.57102203]
[-184.94680786 89.58543396]
[-169.95028687 89.26269531]
[-154.95375061 88.93994904]
[-139.95722961 88.61721039]
[-124.96070099 88.29447174]
[-118.29280090 84.98199463]
[-109.63882446 88.12961578]
[-94.63882446 88.12961578]
[-79.63882446 88.12961578]
[-64.63882446 88.12961578]
[-49.63882828 88.12961578]
[-34.63969421 87.96823883]
[-19.64316750 87.64549255]
[-4.64663982 87.32275391]
[10.34554768 86.83869171]
[25.33165932 86.19335175]
[40.31777191 85.54801941]
[55.30388260 84.90268707]
[70.28999329 84.25735474]
[56.06509781 79.49791718]
[49.98468399 65.78556061]
[56.00743866 52.04779053]
[70.21221924 47.22863388]
[83.35093689 54.46562958]
[86.86964417 69.04666138]
[88.80086517 54.17150116]
[90.73209381 39.29634094]
[92.66331482 24.42118263]
[85.17873383 7.63345337]
[96.28965759 -5.91019487]
[97.90038300 -20.82346344]
[99.51110077 -35.73673248]
[101.12181854 -50.65000153]
[102.73254395 -65.56327057]
[104.34326172 -80.47653961]
[97.22480774 -95.25015259]
[106.68224335 -108.64749908]
[122.98657227 -106.88653564]
[129.36529541 -91.77879333]
[119.25653076 -78.86581421]
[117.64580536 -63.95254898]
[116.03508759 -49.03927994]
[114.42436981 -34.12601089]
[112.81365204 -19.21274376]
[111.20292664 -4.29947472]
[118.55908966 5.36036253]
[117.29148865 17.83982277]
[107.53847504 26.35240555]
[105.60725403 41.22756577]
[103.67602539 56.10272598]
[101.74480438 70.97788239]
[120.01483154 85.62812042]
[119.49937439 105.29719543]
[131.48106384 114.32155609]
[143.46275330 123.34591675]
[155.44444275 132.37028503]
[167.42613220 141.39463806]
[179.40782166 150.41900635]
[191.38951111 159.44335938]
[203.37120056 168.46772766]
[215.35289001 177.49208069]
[227.33457947 186.51644897]
[239.31628418 195.54080200]
[251.29797363 204.56517029]
[261.27691650 200.44769287]
[271.98208618 200.88026428]
[281.45175171 205.71563721]
[287.97900391 214.00602722]
[290.41943359 224.18806458]
[288.39120483 234.37742615]
[299.76577759 244.15589905]
[311.24490356 253.81144714]
[322.82727051 263.34292603]
[334.40960693 272.87442017]
[345.99194336 282.40591431]
[359.84201050 276.08630371]
[375.00067139 276.40545654]
[388.46246338 283.24658203]
[397.58154297 295.20498657]
[400.59179688 309.87631226]
[396.94866943 324.33981323]
[408.53100586 333.87127686]
[420.11337280 343.40277100]
[431.69570923 352.93426514]
[447.39974976 351.15704346]
[459.70864868 361.07003784]
[461.31970215 376.79199219]
[451.27716064 388.99536133]
[435.53903198 390.44012451]
[423.44250488 380.26910400]
[422.16421509 364.51660156]
[410.58187866 354.98510742]
[398.99954224 345.45364380]
[387.41717529 335.92214966]
[373.92517090 342.28073120]
[358.94879150 342.15023804]
[345.45895386 335.50302124]
[336.15499878 323.60949707]
[332.92446899 308.79562378]
[336.46047974 293.98825073]
[324.87811279 284.45675659]
[313.29577637 274.92529297]
[301.71343994 265.39379883]
[294.49771118 263.55886841]
[289.98730469 255.53048706]
[278.61270142 245.75201416]
[259.42004395 248.70994568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[20 52]
[21 51]
[22 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[63 89]
[64 88]
[65 87]
[66 86]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[108 144]
[109 143]
[110 141]
[111 140]
[112 139]
[113 138]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
