%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGUCGGUGCCGCCGCCGCCGCCGAUAUGGCGCGUACGGCCCCUGUGGAGCCCCCGCUGCGGCAUUCCGCGCCCCCCUCGCCGGCCGCGGGUGAGCCCCGCACCUCGGUCGAGGCGGCGGUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[81.85504150 342.64678955]
[72.19462585 354.94354248]
[56.87958527 358.10321045]
[43.14120483 350.63388062]
[37.46633148 336.06234741]
[42.53446579 321.26882935]
[55.95259094 313.23837280]
[58.15354538 298.40072632]
[56.00027847 291.24737549]
[60.59490204 283.22775269]
[63.15933228 268.44857788]
[65.72376251 253.66941833]
[68.28818512 238.89025879]
[70.85261536 224.11108398]
[73.41704559 209.33192444]
[75.98147583 194.55276489]
[78.54589844 179.77359009]
[81.11032867 164.99443054]
[83.67475891 150.21527100]
[86.23918915 135.43609619]
[88.80361176 120.65693665]
[79.25682068 111.03578949]
[76.61258698 97.74233246]
[81.75082397 85.20014954]
[73.72585297 72.52734375]
[65.70088959 59.85454559]
[48.85719299 59.02972794]
[35.92740631 48.46298981]
[31.84683800 32.44163895]
[38.02175522 17.28382111]
[29.68820381 4.81177711]
[21.35465050 -7.66026688]
[13.02109623 -20.13231087]
[4.68754292 -32.60435486]
[-3.64601040 -45.07640076]
[-18.91496849 -44.17851639]
[-32.49361038 -50.99887466]
[-40.78017426 -63.61629105]
[-41.63289261 -78.58722687]
[-34.92272949 -91.88531494]
[-43.25628281 -104.35736084]
[-51.58983612 -116.82940674]
[-66.97698212 -117.56552887]
[-78.84156036 -127.10939026]
[-82.76493835 -141.63768005]
[-77.44484711 -155.52416992]
[-85.77839661 -167.99620056]
[-94.11195374 -180.46824646]
[-102.44550323 -192.94029236]
[-117.83645630 -197.46778870]
[-123.75915527 -212.37754822]
[-115.67021179 -226.23210144]
[-99.77477264 -228.40341187]
[-88.26645660 -217.22583008]
[-89.97346497 -201.27384949]
[-81.63990784 -188.80180359]
[-73.30635834 -176.32975769]
[-64.97280121 -163.85771179]
[-50.10744476 -163.45870972]
[-38.18647385 -154.27424622]
[-33.90947723 -139.66053772]
[-39.11779404 -125.16295624]
[-30.78423882 -112.69091797]
[-22.45068550 -100.21887207]
[-7.59698057 -101.32929230]
[5.90803719 -94.81235504]
[14.39387989 -82.32809448]
[15.49874496 -67.17302704]
[8.82603359 -53.40995407]
[17.15958786 -40.93790817]
[25.49314117 -28.46586418]
[33.82669449 -15.99382019]
[42.16024780 -3.52177644]
[50.49380112 8.95026779]
[63.88405228 8.24324989]
[75.95986176 14.31758499]
[83.49475098 25.67081833]
[84.41598511 39.37457275]
[78.37369537 51.82957840]
[86.39865875 64.50238037]
[94.42362213 77.17518616]
[112.07942200 79.84669495]
[122.75837708 94.15837860]
[137.71772766 95.26184845]
[152.67709351 96.36531830]
[167.63644409 97.46878815]
[182.59579468 98.57225800]
[197.55516052 99.67572021]
[206.45083618 97.16740417]
[212.86663818 100.99427032]
[227.79440308 102.46452332]
[242.72218323 103.93478394]
[257.64996338 105.40504456]
[272.57772827 106.87529755]
[283.62783813 95.81053925]
[299.20947266 94.48881531]
[311.96542358 103.53421783]
[315.87277222 118.67577362]
[309.08654785 132.76411438]
[294.81100464 139.14714050]
[279.78662109 134.81098938]
[271.10745239 121.80307007]
[256.17968750 120.33280945]
[241.25192261 118.86255646]
[226.32414246 117.39229584]
[211.39637756 115.92204285]
[196.45169067 114.63507843]
[181.49234009 113.53160858]
[166.53297424 112.42814636]
[151.57362366 111.32467651]
[136.61425781 110.22120667]
[121.65490723 109.11773682]
[114.45555878 118.52308655]
[103.58277893 123.22136688]
[101.01834869 138.00053406]
[98.45391846 152.77969360]
[95.88949585 167.55885315]
[93.32506561 182.33802795]
[90.76063538 197.11718750]
[88.19620514 211.89634705]
[85.63178253 226.67552185]
[83.06735229 241.45468140]
[80.50292206 256.23385620]
[77.93849182 271.01300049]
[75.37406921 285.79217529]
[72.99119568 300.60168457]
[70.79023743 315.43933105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 127]
[8 126]
[10 125]
[11 124]
[12 123]
[13 122]
[14 121]
[15 120]
[16 119]
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[24 81]
[25 80]
[26 79]
[30 74]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[40 64]
[41 63]
[42 62]
[46 58]
[47 57]
[48 56]
[49 55]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
