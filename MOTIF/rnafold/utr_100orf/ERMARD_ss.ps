%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUUCACGCGCGCCGCAGCGGGGCACCGGAAGUUAUGGAGGUAUUAAUAGGGGACCCUAUUACCACAUGUCUUUCUCCCUCAGUGUAUGAUAUAAUUUGUAAUCUUGGGUUUCAACUCAGAGAAAAUUGUGAUA\
) } def
/len { sequence length } bind def

/coor [
[226.80490112 192.93637085]
[214.29714966 184.65650940]
[201.78938293 176.37666321]
[189.28163147 168.09681702]
[176.77386475 159.81695557]
[161.89030457 159.24339294]
[154.65393066 145.17407227]
[142.14617920 136.89422607]
[129.63841248 128.61436462]
[112.40574646 139.28504944]
[92.17014313 140.44639587]
[73.82982635 131.81729126]
[62.35145569 141.47373962]
[56.77220917 156.27854919]
[42.05199432 158.55113220]
[30.57361984 168.20756531]
[19.09524536 177.86401367]
[10.86715698 192.68746948]
[-5.65475559 188.88447571]
[-6.57410765 171.95547485]
[9.43880081 166.38563538]
[20.91717529 156.72920227]
[32.39554977 147.07275391]
[37.15378571 132.95863342]
[52.69501114 129.99536133]
[64.17338562 120.33892059]
[59.72765732 108.68080902]
[58.97587967 96.22646332]
[61.98700714 84.11823273]
[68.48484802 73.46675110]
[58.96064377 61.87841797]
[49.43643570 50.29008102]
[39.91223145 38.70174789]
[30.38802528 27.11341286]
[15.64815044 21.36478806]
[13.54450226 6.61948586]
[4.02029610 -4.96884871]
[-5.50391006 -16.55718422]
[-15.02811623 -28.14551735]
[-27.82041168 -30.19575500]
[-35.51110458 -40.11767960]
[-34.38035202 -52.21650314]
[-43.63634109 -64.02017212]
[-52.89233017 -75.82384491]
[-62.14831924 -87.62751770]
[-67.16007233 -89.62979889]
[-70.51402283 -93.04621124]
[-71.94741058 -96.98316193]
[-71.60123444 -100.57579803]
[-80.02394867 -112.98780060]
[-88.44666290 -125.39981079]
[-96.86937714 -137.81181335]
[-105.29209137 -150.22381592]
[-120.27943420 -156.88052368]
[-121.73892975 -173.21458435]
[-108.16918182 -182.42294312]
[-93.52957153 -175.03282166]
[-92.88008881 -158.64653015]
[-84.45737457 -146.23452759]
[-76.03466034 -133.82252502]
[-67.61194611 -121.41051483]
[-59.18923187 -108.99851227]
[-50.34465027 -96.88350677]
[-41.08865738 -85.07983398]
[-31.83267021 -73.27616119]
[-22.57668114 -61.47249222]
[-5.98708010 -55.86570358]
[-3.43978119 -37.66972351]
[6.08442450 -26.08138847]
[15.60863113 -14.49305439]
[25.13283730 -2.90471983]
[39.19147491 2.01502967]
[41.97636032 17.58920670]
[51.50056458 29.17754173]
[61.02477264 40.76587677]
[70.54898071 52.35420990]
[80.07318115 63.94254684]
[92.00923157 59.58507919]
[104.70544434 59.07229614]
[116.95403290 62.45297623]
[127.58977509 69.40551758]
[135.60089111 79.26851654]
[140.22529602 91.10370636]
[141.02304077 103.78520203]
[137.91827393 116.10661316]
[150.42602539 124.38646698]
[162.93379211 132.66632080]
[178.71199036 133.83212280]
[185.05371094 147.30920410]
[197.56147766 155.58905029]
[210.06922913 163.86891174]
[222.57699585 172.14875793]
[235.08476257 180.42860413]
[248.04637146 187.97819519]
[261.41928101 194.77273560]
[274.79217529 201.56726074]
[288.16506958 208.36178589]
[301.53796387 215.15631104]
[314.91085815 221.95085144]
[328.28375244 228.74537659]
[338.74880981 222.88728333]
[350.62142944 222.85055542]
[360.91162109 228.52749634]
[367.08462524 238.38615417]
[367.68508911 249.88186646]
[380.73242188 257.28234863]
[393.77975464 264.68283081]
[402.87545776 266.21878052]
[407.03860474 272.40554810]
[419.91281128 280.10327148]
[432.78701782 287.80096436]
[445.66122437 295.49868774]
[462.05780029 295.20822144]
[470.27459717 309.40032959]
[461.85888672 323.47540283]
[445.46801758 322.95419312]
[437.96353149 308.37289429]
[425.08932495 300.67517090]
[412.21508789 292.97747803]
[399.34088135 285.27975464]
[386.37927246 277.73016357]
[373.33193970 270.32968140]
[360.28460693 262.92919922]
[343.04421997 268.89093018]
[326.59863281 260.28964233]
[321.48922729 242.11827087]
[308.11633301 235.32374573]
[294.74343872 228.52922058]
[281.37054443 221.73468018]
[267.99765015 214.94015503]
[254.62474060 208.14562988]
[241.25184631 201.35110474]
[242.84805298 216.26593018]
[232.34883118 226.97883606]
[217.40487671 225.68344116]
[208.90568542 213.32368469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[7 87]
[8 86]
[9 85]
[12 26]
[13 25]
[15 23]
[16 22]
[17 21]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[36 71]
[37 70]
[38 69]
[39 68]
[42 66]
[43 65]
[44 64]
[45 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[94 132]
[95 131]
[96 130]
[97 129]
[98 128]
[99 127]
[100 126]
[105 123]
[106 122]
[107 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
