%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCGGUGCAUGCCGGGACGGCGGUGGGUGGUGCAUGCGCUCGCAUCAUGGCGGCUGAGUGGGCUUCUCGUUUCUGGCUUUGGGCUACGCUGCUGAUUCCUGCGGCCGCGGUCUACGAAGACCAAGUGGGCAAGUUUGAUUGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[393.75289917 247.03428650]
[380.22869873 240.54612732]
[366.70449829 234.05795288]
[353.18032837 227.56979370]
[339.65612793 221.08163452]
[326.13192749 214.59346008]
[311.31015015 216.06440735]
[302.21444702 203.11917114]
[288.69027710 196.63099670]
[275.16607666 190.14283752]
[260.34429932 191.61376953]
[251.24859619 178.66854858]
[237.72441101 172.18037415]
[220.35527039 174.48533630]
[210.03587341 159.27053833]
[196.37963867 153.06513977]
[182.72338867 146.85972595]
[169.06715393 140.65432739]
[155.41091919 134.44891357]
[141.75466919 128.24351501]
[128.09843445 122.03810120]
[114.37837982 115.97509003]
[100.59599304 110.05513000]
[86.02329254 106.50036621]
[71.06304169 105.40905762]
[56.73652267 112.12183380]
[44.60589981 103.47907257]
[29.64565086 102.38776398]
[14.68540192 101.29645538]
[-0.27484682 100.20514679]
[-15.24563789 99.26951599]
[-30.22535324 98.48966980]
[-45.20506668 97.70982361]
[-60.18478012 96.92997742]
[-68.98281860 99.62187958]
[-75.46704102 95.97488403]
[-90.42728424 94.88357544]
[-104.94451141 102.51130676]
[-118.66252899 93.52532196]
[-117.46942902 77.16963196]
[-102.59255981 70.26956940]
[-89.33597565 79.92332458]
[-74.37572479 81.01464081]
[-59.40493774 81.95026398]
[-44.42522049 82.73011017]
[-29.44550705 83.50995636]
[-14.46579361 84.28980255]
[-7.57795382 81.47851562]
[0.81646371 85.24489594]
[15.77671242 86.33620453]
[30.73696136 87.42751312]
[45.69720840 88.51882935]
[58.95367432 81.72798920]
[72.15435028 90.44880676]
[87.11460114 91.54011536]
[94.83868408 78.68171692]
[86.84877014 65.98678589]
[78.85885620 53.29185486]
[70.86894226 40.59692383]
[55.60734177 35.65089417]
[50.09394455 20.58497429]
[58.55815125 6.95644617]
[74.50695038 5.21995258]
[85.70578003 16.70758247]
[83.56386566 32.60700989]
[91.55378723 45.30193710]
[99.54370117 57.99686813]
[107.53361511 70.69179535]
[110.72136688 77.88993835]
[111.44931030 84.98294830]
[109.92467499 91.30429077]
[106.51596069 96.27274323]
[120.29833984 102.19271088]
[129.48416138 102.71472931]
[134.30383301 108.38185883]
[147.96008301 114.58726501]
[161.61631775 120.79267883]
[175.27256775 126.99808502]
[188.92880249 133.20349121]
[202.58503723 139.40888977]
[216.24128723 145.61430359]
[228.61257935 141.81893921]
[239.88085938 147.31848145]
[244.21257019 158.65618896]
[257.73675537 165.14434814]
[273.52590942 164.13749695]
[281.65423584 176.61865234]
[295.17843628 183.10681152]
[308.70263672 189.59498596]
[324.49176025 188.58811951]
[332.62011719 201.06927490]
[346.14428711 207.55743408]
[359.66848755 214.04560852]
[373.19268799 220.53376770]
[386.71685791 227.02194214]
[400.24105835 233.51010132]
[412.92352295 224.96011353]
[428.08270264 223.91305542]
[441.64050293 230.55026245]
[449.99981689 242.99926758]
[450.99877930 257.86087036]
[464.52297974 264.34902954]
[478.04718018 270.83721924]
[492.11868286 276.03262329]
[506.61428833 279.88977051]
[521.10986328 283.74694824]
[527.68438721 282.37445068]
[533.12316895 284.28521729]
[536.12176514 288.07781982]
[550.44433594 292.53463745]
[564.76696777 296.99145508]
[579.08953857 301.44827271]
[593.50177002 305.60617065]
[607.99737549 309.46331787]
[622.49298096 313.32049561]
[636.98852539 317.17764282]
[651.48413086 321.03479004]
[667.16754150 316.24285889]
[678.97302246 327.62545776]
[674.75604248 343.47314453]
[658.85473633 347.48318481]
[647.62701416 335.53039551]
[633.13140869 331.67324829]
[618.63580322 327.81607056]
[604.14019775 323.95892334]
[589.64459229 320.10177612]
[585.08660889 321.71429443]
[579.46582031 320.43441772]
[574.63275146 315.77087402]
[560.31011963 311.31405640]
[545.98754883 306.85723877]
[531.66491699 302.40042114]
[517.25274658 298.24255371]
[502.75714111 294.38537598]
[488.26153564 290.52822876]
[496.74902344 302.89602661]
[497.35076904 317.88394165]
[489.88214111 330.89239502]
[476.63516235 337.92922974]
[461.67510986 336.83493042]
[449.59310913 327.94534302]
[444.09689331 313.98855591]
[446.87326050 299.24774170]
[457.07012939 288.24664307]
[471.55899048 284.36138916]
[458.03482056 277.87322998]
[444.51062012 271.38507080]
[432.29376221 279.90646362]
[417.35250854 281.17709351]
[403.69104004 274.75601196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[8 89]
[9 88]
[10 87]
[12 85]
[13 84]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 73]
[23 72]
[24 55]
[25 54]
[27 52]
[28 51]
[29 50]
[30 49]
[31 47]
[32 46]
[33 45]
[34 44]
[36 43]
[37 42]
[56 68]
[57 67]
[58 66]
[59 65]
[101 147]
[102 146]
[103 145]
[104 135]
[105 134]
[106 133]
[109 132]
[110 131]
[111 130]
[112 129]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
