%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCUUGAAAGCAACGCGCCUAUUCACAUGGAGAAUCUUCCCUUUCCUUUAAAAUUACUUAGUGCCUCAUCGCUAAACGCCCCCAGUUCCACACCAUGGGUGUUGGAUAUCUUCCUCACUUUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[108.03824615 113.72924042]
[100.73503113 115.43598938]
[94.08715820 128.88240051]
[87.43928528 142.32879639]
[80.79141235 155.77520752]
[74.14353943 169.22160339]
[67.49566650 182.66801453]
[69.09112549 198.98936462]
[55.59852600 208.31039429]
[40.89788818 201.04243469]
[40.11197281 184.66212463]
[54.04925919 176.02014160]
[60.69713211 162.57373047]
[67.34500885 149.12733459]
[73.99288177 135.68092346]
[80.64075470 122.23451996]
[87.28862762 108.78811646]
[85.30078888 93.92041779]
[75.35395050 82.69275665]
[65.40710449 71.46509552]
[70.82308960 85.45320129]
[69.39429474 100.38499451]
[61.42387772 113.09217834]
[48.60305405 120.87847900]
[33.65220261 122.09175873]
[19.74366951 116.47457886]
[9.82863522 105.21882629]
[6.01091909 90.71279144]
[9.10058308 76.03443909]
[18.44204903 64.29829407]
[32.05319595 57.99459457]
[47.04575729 58.46083069]
[33.15313721 52.80440903]
[19.26051712 47.14798737]
[5.36789846 41.49156189]
[-8.52472115 35.83514023]
[-21.63442802 44.13666153]
[-37.11772919 43.11344147]
[-49.02098083 33.15893555]
[-52.76714325 18.10085106]
[-46.91573334 3.72932839]
[-33.71674347 -4.42948675]
[-18.24545097 -3.23836470]
[-6.45088577 6.84468412]
[-2.86829877 21.94252205]
[11.02432060 27.59894371]
[24.91694069 33.25536728]
[38.80955887 38.91178894]
[52.70217896 44.56821060]
[59.34310150 41.08278656]
[49.86301422 29.45833397]
[40.38292694 17.83387947]
[28.70728111 8.41690922]
[27.20603561 -6.50777721]
[36.77228546 -18.06142807]
[51.71503448 -19.37073135]
[63.14478302 -9.65677834]
[64.26206970 5.30113697]
[68.44350433 19.70653915]
[72.62493896 34.11194229]
[79.26586151 30.62651634]
[82.50262451 15.97990036]
[85.73938751 1.33328438]
[88.97615051 -13.31333160]
[92.21291351 -27.95994759]
[95.44967651 -42.60656357]
[86.73886871 -55.79357910]
[89.98583984 -71.26073456]
[103.26421356 -79.83162689]
[118.69617462 -76.42131042]
[127.12620544 -63.05306244]
[123.55292511 -47.65802383]
[110.09629059 -39.36980057]
[106.85952759 -24.72318459]
[103.62276459 -10.07656860]
[100.38600159 4.57004738]
[97.14923859 19.21666336]
[93.91247559 33.86328125]
[88.69393921 52.24407959]
[76.63476562 61.51825333]
[86.58161163 72.74591827]
[96.52845001 83.97357941]
[91.35881042 69.89256287]
[92.71873474 54.95433807]
[100.34607697 42.03831482]
[112.77062988 33.63412476]
[127.59750366 31.36171913]
[141.96873474 35.65911484]
[153.11421204 45.69796753]
[158.88555908 59.54323578]
[158.17034912 74.52617645]
[151.10641479 87.75875092]
[139.05534363 96.69033051]
[150.97401428 105.79776764]
[162.89266968 114.90520477]
[174.81134033 124.01264191]
[186.73001099 133.12007141]
[198.64866638 142.22750854]
[207.46347046 144.99266052]
[210.74176025 151.70184326]
[222.43687439 161.09461975]
[234.13198853 170.48741150]
[245.82710266 179.88018799]
[257.52221680 189.27296448]
[270.47216797 188.66198730]
[280.03317261 196.81028748]
[281.39196777 208.89411926]
[292.85671997 218.56674194]
[304.32144165 228.23937988]
[320.36428833 228.32223511]
[330.18853760 241.00544739]
[326.25787354 256.55953979]
[311.58755493 263.05273438]
[297.43142700 255.50401306]
[294.64880371 239.70411682]
[283.18408203 230.03147888]
[271.71932983 220.35885620]
[254.34080505 218.25305176]
[248.12944031 200.96807861]
[236.43432617 191.57530212]
[224.73921204 182.18252563]
[213.04409790 172.78974915]
[201.34898376 163.39695740]
[189.54122925 154.14617920]
[177.62255859 145.03874207]
[165.70390320 135.93130493]
[153.78523254 126.82386780]
[141.86657715 117.71643066]
[129.94790649 108.60899353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[18 82]
[19 81]
[20 80]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[93 129]
[94 128]
[95 127]
[96 126]
[97 125]
[98 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
