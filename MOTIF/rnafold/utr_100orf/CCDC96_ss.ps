%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCCCCGGGAAACCUAACAGCGUCCUGCCGGGGUCCGCUGCGCUGGCCGAGCCGGGAGGAGAUGGACGUCAGCUCUGAGCACACUAAGGACCCCGGCGGGGAAGGCGGAGACGGGGAAAGCCUGGCCGCGCGGCCGUCCAAGAUCAAGGCCAGCUCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[472.43719482 535.53173828]
[462.03570557 524.72387695]
[451.63421631 513.91607666]
[434.55001831 509.99169922]
[430.22262573 492.11541748]
[419.61602783 481.50881958]
[409.00942993 470.90222168]
[398.40283203 460.29562378]
[387.79623413 449.68902588]
[376.16796875 453.35397339]
[364.01562500 451.69924927]
[353.66931152 444.97979736]
[347.13931274 434.42767334]
[345.72570801 422.02642822]
[349.75991821 410.13836670]
[339.56738281 399.13327026]
[336.13085938 413.73431396]
[322.65786743 420.32815552]
[309.01937866 414.08386230]
[305.20751953 399.57629395]
[314.01510620 387.43435669]
[328.98901367 386.55371094]
[319.89562988 374.62429810]
[301.56744385 368.54837036]
[299.18698120 348.56182861]
[289.64334106 336.98947144]
[280.09970093 325.41714478]
[270.55606079 313.84481812]
[261.01242065 302.27246094]
[251.46879578 290.70013428]
[241.92515564 279.12780762]
[232.38151550 267.55545044]
[222.83787537 255.98312378]
[213.29425049 244.41078186]
[203.75061035 232.83843994]
[194.20697021 221.26609802]
[184.66333008 209.69377136]
[175.11968994 198.12142944]
[156.85778809 197.50350952]
[144.60150146 183.52534485]
[146.43737793 164.70606995]
[136.45748901 153.50776672]
[122.21340942 149.15400696]
[118.80810547 133.70361328]
[108.82821655 122.50531769]
[98.84833527 111.30702209]
[86.57939148 102.67723846]
[72.66685486 97.06998444]
[58.75432205 91.46273041]
[41.80326080 91.14978790]
[37.41145325 74.77455139]
[51.93096924 66.02126312]
[64.36157990 77.55019379]
[78.27411652 83.15744781]
[92.18665314 88.76470184]
[97.01367188 83.02450562]
[111.49472809 65.80390930]
[103.58387756 53.05955505]
[95.67302704 40.31520462]
[87.76218414 27.57085419]
[72.63441467 23.85756874]
[64.79323578 10.82029057]
[68.42652130 -3.57883716]
[60.51567078 -16.32318878]
[52.60482025 -29.06753922]
[37.90066528 -36.32838058]
[37.10681152 -52.70830154]
[51.03990936 -61.35704422]
[65.36678314 -53.37752533]
[65.34917450 -36.97838593]
[73.26001740 -24.23403549]
[81.17086792 -11.48968506]
[95.68702698 -8.35652542]
[103.89130402 4.45536566]
[100.50653076 19.66000557]
[108.41738129 32.40435791]
[116.32822418 45.14870834]
[124.23907471 57.89305878]
[126.32638550 87.00360107]
[110.04663086 101.32713318]
[120.02651978 112.52543640]
[130.00640869 123.72373199]
[144.96432495 128.87847900]
[147.65579224 143.52787781]
[157.63568115 154.72618103]
[169.46624756 153.08360291]
[180.50009155 157.33309937]
[188.01815796 166.30281067]
[190.22842407 177.67352295]
[186.69203186 188.57778931]
[196.23567200 200.15013123]
[205.77931213 211.72247314]
[215.32295227 223.29479980]
[224.86657715 234.86714172]
[234.41021729 246.43948364]
[243.95385742 258.01181030]
[253.49749756 269.58416748]
[263.04113770 281.15649414]
[272.58477783 292.72882080]
[282.12838745 304.30117798]
[291.67202759 315.87350464]
[301.21566772 327.44583130]
[310.75930786 339.01818848]
[321.68692017 339.43789673]
[330.38540649 345.69555664]
[334.10137939 355.51104736]
[331.82504272 365.53094482]
[340.91842651 377.46032715]
[350.57244873 388.94073486]
[360.76501465 399.94580078]
[378.65536499 397.24545288]
[394.46417236 405.71865845]
[401.98818970 421.82791138]
[398.40283203 439.08239746]
[409.00942993 449.68902588]
[419.61602783 460.29562378]
[430.22262573 470.90222168]
[440.82922363 481.50881958]
[453.73379517 482.29736328]
[462.35174561 491.38919067]
[462.44201660 503.51458740]
[472.84350586 514.32238770]
[483.24499512 525.13024902]
[496.13211060 526.16583252]
[504.57431030 535.42102051]
[504.43231201 547.54595947]
[514.62487793 558.55102539]
[524.81744385 569.55615234]
[535.01000977 580.56121826]
[545.20257568 591.56628418]
[562.89996338 596.57519531]
[566.16711426 613.79718018]
[576.56860352 624.60498047]
[587.07312012 635.31268311]
[597.67968750 645.91931152]
[608.28631592 656.52587891]
[618.89288330 667.13250732]
[633.28240967 662.04284668]
[648.45428467 663.70910645]
[661.39617920 671.80041504]
[669.53845215 684.71038818]
[671.26446533 699.87561035]
[666.23144531 714.28503418]
[655.43884277 725.07769775]
[641.02935791 730.11065674]
[625.86419678 728.38464355]
[612.95422363 720.24237061]
[604.86285400 707.30053711]
[603.19659424 692.12860107]
[608.28631592 677.73913574]
[597.67968750 667.13250732]
[587.07312012 656.52587891]
[576.46649170 645.91931152]
[569.48052979 643.40142822]
[565.76074219 635.00646973]
[555.35925293 624.19866943]
[543.24621582 623.64404297]
[534.49114990 614.68414307]
[534.19744873 601.75885010]
[524.00488281 590.75378418]
[513.81237793 579.74865723]
[503.61981201 568.74359131]
[493.42724609 557.73852539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[5 118]
[6 117]
[7 116]
[8 115]
[9 114]
[15 110]
[16 109]
[22 108]
[23 107]
[25 103]
[26 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[41 85]
[42 84]
[44 82]
[45 81]
[46 80]
[47 55]
[48 54]
[49 53]
[57 78]
[58 77]
[59 76]
[60 75]
[63 72]
[64 71]
[65 70]
[126 163]
[127 162]
[128 161]
[129 160]
[130 159]
[132 156]
[133 155]
[134 153]
[135 152]
[136 151]
[137 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
