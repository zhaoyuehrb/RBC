%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAACUCCUCCAAGCAACCUAACUCUUAACCCAACUUCUGACACCAUGACCUGCUGCCAGACCAGCUUCUGUGGAUAUCCCAGCUUCUCCAUCAGUGGGACCUGUGGCUCCAGCUGCUGCCAGCCAAGCUGCUGUGAGACCAGCU\
) } def
/len { sequence length } bind def

/coor [
[64.20880890 137.14460754]
[52.34089279 146.31806946]
[40.47297287 155.49153137]
[28.60505104 164.66500854]
[16.73713112 173.83847046]
[23.59701538 187.22714233]
[27.87970734 201.64842224]
[29.43933868 216.61111450]
[28.22278786 231.60560608]
[24.27149200 246.12117004]
[17.72002983 259.66345215]
[8.79154110 271.77114868]
[-2.20987153 282.03192139]
[-14.90950584 290.09628296]
[-28.87481499 295.68957520]
[-43.63014984 298.62127686]
[-58.67294312 298.79150391]
[-73.49084473 296.19451904]
[-87.57917023 290.91873169]
[-100.45806122 283.14385986]
[-111.68888092 273.13470459]
[-120.88910675 261.23214722]
[-127.74538422 247.84164429]
[-132.02418518 233.41920471]
[-133.57978821 218.45610046]
[-132.35919189 203.46192932]
[-128.40399170 188.94741821]
[-121.84887695 175.40692139]
[-112.91712189 163.30162048]
[-101.91294098 153.04380798]
[-89.21113586 144.98286438]
[-75.24431610 139.39335632]
[-60.48819733 136.46563721]
[-45.44535828 136.29945374]
[-30.62815475 138.90043640]
[-16.54125595 144.18000793]
[-3.66445613 151.95835876]
[7.56366539 161.97055054]
[19.43158531 152.79708862]
[31.29950523 143.62361145]
[43.16742706 134.45014954]
[55.03534698 125.27668762]
[49.12548065 108.51552582]
[49.25507355 90.74346161]
[55.40874481 74.07026672]
[66.85597229 60.47526932]
[58.99136353 47.70233154]
[51.12675476 34.92939377]
[43.26214600 22.15645790]
[35.26241684 9.46770859]
[27.12846756 -3.13542128]
[16.29592514 -4.82908583]
[8.37302303 -12.08543205]
[5.84266853 -22.29992867]
[9.31390858 -32.00035095]
[1.72218144 -44.93733978]
[-5.86954546 -57.87432861]
[-13.46127224 -70.81131744]
[-28.81683350 -74.55060577]
[-36.95928955 -88.09593201]
[-33.05786133 -103.41110229]
[-19.42720032 -111.40989685]
[-4.15413570 -107.34676361]
[3.70009542 -93.63229370]
[-0.52428365 -78.40304565]
[7.06744337 -65.46605682]
[14.65917015 -52.52906418]
[22.25089645 -39.59207535]
[39.71290588 -31.38216209]
[39.73159790 -11.26936913]
[47.86554718 1.33376086]
[54.17901993 5.27553701]
[56.03508377 14.29184818]
[63.89969254 27.06478500]
[71.76429749 39.83772278]
[79.62891388 52.61066055]
[91.75457001 49.08100891]
[104.37448120 48.60355377]
[116.73217773 51.20691299]
[128.08691406 56.73504257]
[137.99702454 45.47495651]
[147.90715027 34.21487427]
[157.81727600 22.95478821]
[167.72738647 11.69470406]
[171.08052063 3.12176061]
[177.96934509 0.30366579]
[188.11622620 -10.74353600]
[184.90867615 -25.92547417]
[191.26815796 -40.07950592]
[204.74932861 -47.76311874]
[220.16838074 -46.02180481]
[231.59640503 -35.52513885]
[234.63906860 -20.30929756]
[228.12641907 -6.22508621]
[214.56269836 1.31182957]
[199.16343689 -0.59664810]
[189.01654053 10.45055389]
[178.98747253 21.60482597]
[169.07736206 32.86491013]
[159.16723633 44.12499237]
[149.25711060 55.38507843]
[139.34698486 66.64516449]
[146.02185059 76.70363617]
[150.17611694 88.03803253]
[151.58226013 100.02757263]
[150.16329956 112.01560974]
[145.99691772 123.34555817]
[158.24346924 132.00706482]
[170.49003601 140.66857910]
[182.82783508 149.19963074]
[195.25547791 157.59924316]
[207.68312073 165.99887085]
[220.19920349 174.26611328]
[232.80233765 182.40007019]
[245.40547180 190.53401184]
[258.00860596 198.66796875]
[273.79928589 199.65034485]
[280.29718018 213.05282593]
[292.90032959 221.18676758]
[305.50344849 229.32070923]
[319.92492676 223.59353638]
[334.95013428 227.46949768]
[344.80154419 239.45822144]
[345.69110107 254.94976807]
[337.27676392 267.98736572]
[322.79400635 273.55773926]
[307.81173706 269.51901245]
[298.09097290 257.42413330]
[297.36950684 241.92384338]
[284.76635742 233.78990173]
[272.16323853 225.65594482]
[257.27401733 225.25537109]
[249.87464905 211.27108765]
[237.27153015 203.13714600]
[224.66839600 195.00320435]
[212.06526184 186.86924744]
[204.68862915 185.87791443]
[199.28349304 178.42651367]
[186.85585022 170.02688599]
[174.42820740 161.62727356]
[167.07426453 160.47958374]
[161.82852173 152.91514587]
[149.58195496 144.25363159]
[137.33540344 135.59211731]
[124.46096802 145.41355896]
[109.17593384 150.75956726]
[92.98662567 151.10325623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[46 76]
[47 75]
[48 74]
[49 73]
[50 71]
[51 70]
[55 68]
[56 67]
[57 66]
[58 65]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[86 97]
[87 96]
[107 144]
[108 143]
[109 142]
[110 140]
[111 139]
[112 138]
[113 136]
[114 135]
[115 134]
[116 133]
[118 131]
[119 130]
[120 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
