%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCCUCUUGGGUGGCCUGGGCGGCGUUGGUCCGGUGCGUCCUGUUCUACAGCUAUGGCCGGGCCAGCUGCAGCUUUCCGCCGCUUGGGCGCCUUGUCCGGAGCUGCGGCCUUAGGCUUCGCUUCCUACGGGGCGCACGGCGCCCAAUUCCCAG\
) } def
/len { sequence length } bind def

/coor [
[93.61468506 283.47833252]
[93.31068420 268.48141479]
[93.00667572 253.48449707]
[81.36354065 246.88549805]
[74.45896149 235.29454041]
[74.19625854 221.69702148]
[80.75167847 209.65753174]
[92.50000000 202.38536072]
[92.50000000 187.38536072]
[92.50000000 172.38536072]
[92.50000000 157.38536072]
[92.50000000 142.38536072]
[92.50000000 127.38536072]
[92.50000000 112.38536072]
[85.22047424 99.27015686]
[72.49080658 91.33570099]
[59.76114273 83.40123749]
[47.03147888 75.46678162]
[34.30181503 67.53231812]
[21.57215118 59.59785843]
[8.84248734 51.66339874]
[-3.88717651 43.72893906]
[-16.61684036 35.79447937]
[-29.34650421 27.86001968]
[-42.07616806 19.92555809]
[-55.60948944 13.45646095]
[-69.77846527 8.53303337]
[-83.94744110 3.60960484]
[-98.11641693 -1.31382322]
[-112.28539276 -6.23725128]
[-126.45436096 -11.16067982]
[-140.62333679 -16.08410835]
[-154.79231262 -21.00753593]
[-168.96128845 -25.93096352]
[-183.13026428 -30.85439110]
[-197.29924011 -35.77782059]
[-208.09828186 -25.04739189]
[-222.42695618 -20.08997345]
[-237.42575073 -21.83822250]
[-250.12594604 -29.89217949]
[-258.03720093 -42.60915375]
[-259.63583374 -57.43851089]
[-273.80480957 -62.36193848]
[-287.97378540 -67.28536987]
[-302.14276123 -72.20879364]
[-319.08895874 -71.69628906]
[-324.27261353 -87.83834839]
[-310.19638062 -97.28798676]
[-297.21932983 -86.37776947]
[-283.05035400 -81.45434570]
[-268.88137817 -76.53091431]
[-254.71241760 -71.60748291]
[-244.26271057 -82.25028992]
[-230.17044067 -87.32148743]
[-215.21257019 -85.76483917]
[-202.36146545 -77.83581543]
[-194.19419861 -65.06151581]
[-192.37580872 -49.94679642]
[-178.20683289 -45.02336884]
[-164.03785706 -40.09993744]
[-149.86888123 -35.17650986]
[-135.69990540 -30.25308228]
[-121.53093719 -25.32965469]
[-107.36196136 -20.40622711]
[-93.19298553 -15.48279858]
[-79.02400970 -10.55937004]
[-64.85503387 -5.63594198]
[-50.68606186 -0.71251404]
[-59.10204697 -13.12908363]
[-60.90801620 -28.01996994]
[-55.70413208 -42.08835983]
[-44.64252090 -52.21953964]
[-30.17220688 -56.17048645]
[-15.49688435 -53.06647110]
[-3.86564207 -43.59471130]
[2.14638686 -29.85224152]
[1.20815122 -14.88161278]
[-6.47262573 -1.99729419]
[-19.19543457 5.94815207]
[-34.14170837 7.19589520]
[-21.41204453 15.13035488]
[-8.68237972 23.06481552]
[4.04728365 30.99927521]
[16.77694702 38.93373489]
[29.50661087 46.86819458]
[42.23627472 54.80265427]
[54.96593857 62.73711777]
[67.69560242 70.67157745]
[80.42527008 78.60603333]
[93.15493011 86.54049683]
[119.88446045 80.48627472]
[134.71148682 78.21485901]
[149.53851318 75.94344330]
[164.36553955 73.67202759]
[179.19256592 71.40061188]
[194.01959229 69.12919617]
[208.84661865 66.85778046]
[218.20161438 54.40299225]
[233.27069092 52.31066895]
[245.08676147 61.30598831]
[259.91378784 59.03457260]
[274.74081421 56.76315689]
[289.56784058 54.49174118]
[304.39486694 52.22032166]
[311.08749390 40.49121857]
[323.14562988 34.85770416]
[336.05233765 37.18185043]
[345.11428833 46.38998795]
[359.98431396 44.41953659]
[374.85430908 42.44908524]
[389.72433472 40.47863388]
[404.63192749 32.40400696]
[416.51785278 44.49374008]
[408.19091797 59.26190948]
[391.69479370 55.34864807]
[376.82476807 57.31909943]
[361.95474243 59.28955078]
[347.08474731 61.26000214]
[337.46734619 75.02419281]
[320.54214478 77.65379333]
[306.66629028 67.04734802]
[291.83926392 69.31876373]
[277.01223755 71.59017944]
[262.18521118 73.86159515]
[247.35818481 76.13301086]
[238.77687073 88.25310516]
[223.77250671 90.76786041]
[211.11802673 81.68479919]
[196.29100037 83.95621490]
[181.46397400 86.22763824]
[166.63696289 88.49905396]
[151.80993652 90.77046967]
[136.98291016 93.04188538]
[122.15588379 95.31330109]
[137.11346436 96.44054413]
[147.45384216 107.30684662]
[147.83825684 122.30191803]
[138.06822205 133.68377686]
[123.18804932 135.57592773]
[110.88038635 127.00146484]
[107.50000000 112.38536072]
[107.50000000 127.38536072]
[107.50000000 142.38536072]
[107.50000000 157.38536072]
[107.50000000 172.38536072]
[107.50000000 187.38536072]
[107.50000000 202.38536072]
[121.30200958 212.11425781]
[126.55422211 227.98840332]
[121.38217163 243.71438599]
[108.00359344 253.18049622]
[108.30760193 268.17742920]
[108.61160278 283.17434692]
[111.19229126 302.38345337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[13 142]
[14 141]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[42 52]
[43 51]
[44 50]
[45 49]
[91 134]
[92 133]
[93 132]
[94 131]
[95 130]
[96 129]
[97 128]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
