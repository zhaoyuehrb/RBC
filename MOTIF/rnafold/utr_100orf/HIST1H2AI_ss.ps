%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUUUUGCCAUGUCUGGGCGUGGCAAGCAGGGAGGCAAAGCUCGCGCCAAGGCCAAGACCCGCUCUUCUCGGGCCGGGCUUCAGUUUCCCGUAGGCCGAGUGCAUCGCC\
) } def
/len { sequence length } bind def

/coor [
[116.48891449 190.24778748]
[111.53472900 176.08953857]
[106.58053589 161.93127441]
[101.62635040 147.77302551]
[96.67216492 133.61477661]
[82.44583130 128.85964966]
[69.97378540 137.19319153]
[57.50174332 145.52674866]
[45.02969742 153.86030579]
[32.55765152 162.19386292]
[20.08560944 170.52742004]
[7.61356497 178.86096191]
[-4.85847902 187.19451904]
[-17.33052254 195.52807617]
[-29.80256844 203.86163330]
[-36.56649017 218.80088806]
[-52.91060257 220.14329529]
[-62.02148056 206.50790405]
[-54.52663422 191.92163086]
[-38.13611984 191.38958740]
[-25.66407776 183.05603027]
[-13.19203281 174.72247314]
[-0.71998847 166.38891602]
[11.75205612 158.05537415]
[24.22410011 149.72181702]
[36.69614410 141.38825989]
[49.16819000 133.05470276]
[61.64023209 124.72115326]
[74.11227417 116.38760376]
[71.98666382 95.69555664]
[83.19077301 80.10474396]
[100.36326599 76.25376892]
[105.31745911 62.09551620]
[110.27164459 47.93726349]
[115.22583008 33.77901459]
[120.18001556 19.62076569]
[125.13420105 5.46251535]
[130.08837891 -8.69573402]
[126.20001221 -26.62623596]
[139.78805542 -37.63407135]
[144.34320068 -51.92569733]
[148.89836121 -66.21732330]
[153.45350647 -80.50894928]
[158.00865173 -94.80057526]
[162.56381226 -109.09220886]
[167.11895752 -123.38383484]
[166.75262451 -132.65852356]
[172.00747681 -138.00920105]
[176.96165466 -152.16744995]
[181.91584778 -166.32569885]
[175.30969238 -180.43231201]
[180.53562927 -194.72023010]
[194.02484131 -200.93124390]
[198.97903442 -215.08949280]
[198.09603882 -221.87797546]
[200.50666809 -227.22529602]
[204.62841797 -229.88929749]
[210.36866760 -243.74748230]
[216.10891724 -257.60568237]
[221.84916687 -271.46386719]
[217.06288147 -286.77630615]
[226.16943359 -299.98428345]
[242.18304443 -300.95574951]
[252.81944275 -288.94549561]
[249.91931152 -273.16674805]
[235.70736694 -265.72363281]
[229.96710205 -251.86543274]
[224.22685242 -238.00723267]
[218.48660278 -224.14903259]
[213.13728333 -210.13529968]
[208.18309021 -195.97705078]
[214.85687256 -182.71069336]
[210.03431702 -168.28164673]
[196.07409668 -161.37152100]
[191.11990356 -147.21327209]
[186.16572571 -133.05502319]
[181.41058350 -118.82868195]
[176.85543823 -104.53705597]
[172.30027771 -90.24542999]
[167.74513245 -75.95380402]
[163.18998718 -61.66217422]
[158.63482666 -47.37054825]
[154.07968140 -33.07891846]
[159.36759949 -22.09947968]
[155.57995605 -10.09354973]
[144.24662781 -3.74154854]
[139.29244995 10.41670132]
[134.33825684 24.57495117]
[129.38407898 38.73320007]
[124.42989349 52.89145279]
[119.47570801 67.04969788]
[114.52152252 81.20795441]
[125.49790955 94.68700409]
[124.84485626 113.63849640]
[110.83042145 128.66059875]
[115.78460693 142.81884766]
[120.73879242 156.97709656]
[125.69297791 171.13534546]
[130.64715576 185.29359436]
[145.82797241 186.50315857]
[159.20124817 193.78843689]
[168.44999695 205.88720703]
[171.97181702 220.70330811]
[169.15653992 235.66973877]
[160.49191284 248.19348145]
[147.47914124 256.10470581]
[132.37277222 258.03277588]
[117.79007721 253.64363098]
[106.25758362 243.69770813]
[99.77336884 229.91819763]
[99.46086884 214.69248962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[40 83]
[41 82]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[48 76]
[49 75]
[50 74]
[53 71]
[54 70]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
