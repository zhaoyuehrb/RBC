%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCCCGGCAGCAUGGCGGCGGCGGCGGGCGCCCCUCCGCCGGGUCCCCCGCAACCGCCUCCGCCGCCGCCGCCCGAGGAGUCGUCCGACAGCGAGCCCGAGGCGGAGCCCG\
) } def
/len { sequence length } bind def

/coor [
[85.41519928 157.00163269]
[93.68849945 142.84237671]
[93.27153015 127.84818268]
[92.85455322 112.85397339]
[83.89235687 97.90919495]
[95.61524963 82.77015686]
[82.55592346 75.39086151]
[69.49659729 68.01156616]
[56.43727112 60.63227463]
[40.61615372 60.57949829]
[33.34190369 47.58201981]
[20.28257561 40.20272446]
[3.59279108 45.21302414]
[-11.29914284 36.82914352]
[-15.50295448 20.61125183]
[-28.76236534 13.59783363]
[-42.02177429 6.58441496]
[-55.28118515 -0.42900318]
[-68.54059601 -7.44242144]
[-83.47570801 -3.01748228]
[-96.82273102 -10.31897068]
[-100.94919586 -24.58459091]
[-114.20860291 -31.59800911]
[-127.46801758 -38.61142731]
[-140.72743225 -45.62484360]
[-149.91773987 -46.90563965]
[-154.25393677 -53.02198029]
[-167.31326294 -60.40127563]
[-180.37258911 -67.78057098]
[-189.52375793 -69.31634521]
[-193.68826294 -75.55085754]
[-206.53739929 -83.29032898]
[-219.38655090 -91.02979279]
[-232.23570251 -98.76926422]
[-246.96711731 -93.52335358]
[-261.60592651 -99.02234650]
[-269.24017334 -112.66978455]
[-266.26513672 -128.02177429]
[-254.08560181 -137.82955933]
[-238.45233154 -137.46220398]
[-226.74690247 -127.09318542]
[-224.49623108 -111.61841583]
[-211.64709473 -103.87894440]
[-198.79794312 -96.13947296]
[-185.94879150 -88.40000916]
[-172.99330139 -80.83989716]
[-159.93397522 -73.46060181]
[-146.87464905 -66.08130646]
[-133.71400452 -58.88425446]
[-120.45459747 -51.87083817]
[-107.19518280 -44.85741806]
[-93.93577576 -37.84400177]
[-79.82138824 -42.46132278]
[-66.27455139 -35.53760529]
[-61.52717972 -20.70183182]
[-48.26776886 -13.68841362]
[-35.00835800 -6.67499542]
[-21.74894714 0.33842304]
[-8.48953629 7.35184145]
[3.25481915 1.85534561]
[16.20576286 4.20512772]
[25.54392815 13.75660229]
[27.66187096 27.14339638]
[40.72119522 34.52269363]
[55.60822296 34.04764938]
[63.81656647 47.57294846]
[76.87589264 54.95224380]
[89.93521881 62.33153534]
[102.99454498 69.71083069]
[117.09783936 74.81935883]
[131.85359192 77.51529694]
[146.60932922 80.21122742]
[161.36506653 82.90716553]
[176.12081909 85.60310364]
[190.91259766 88.09366608]
[205.73757935 90.37837982]
[214.84059143 88.57904053]
[220.94059753 92.93818665]
[235.69633484 95.63412476]
[246.82032776 88.92568207]
[259.12707520 91.56928253]
[266.05590820 101.59226990]
[280.73101807 104.69734192]
[295.40609741 107.80242157]
[310.08120728 110.90750122]
[323.18945312 102.07859802]
[338.68515015 105.18650818]
[347.37496948 118.38736725]
[344.10339355 133.84933472]
[330.81140137 142.39909363]
[315.38488770 138.96423340]
[306.97613525 125.58259583]
[292.30102539 122.47751617]
[277.62594604 119.37244415]
[262.95083618 116.26736450]
[246.66349792 122.63686371]
[233.00041199 110.38986969]
[218.24465942 107.69393158]
[203.45286560 105.20336151]
[188.62788391 102.91864777]
[181.43673706 105.03990173]
[173.42488098 100.35884857]
[158.66912842 97.66291046]
[143.91339111 94.96697235]
[129.15765381 92.27103424]
[114.40190887 89.57509613]
[115.94850922 103.07778931]
[107.84875488 112.43700409]
[108.26573181 127.43120575]
[108.68270111 142.42541504]
[117.73011017 156.10299683]
[110.16755676 170.65428162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 110]
[3 109]
[4 108]
[6 69]
[7 68]
[8 67]
[9 66]
[11 64]
[12 63]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[22 52]
[23 51]
[24 50]
[25 49]
[27 48]
[28 47]
[29 46]
[31 45]
[32 44]
[33 43]
[34 42]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[75 100]
[76 99]
[78 98]
[79 97]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
