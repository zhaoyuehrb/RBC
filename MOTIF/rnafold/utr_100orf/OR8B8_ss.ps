%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGCUGAGAAUUCCUCCUUCGUGACACAGUUUAUCCUCGCAGGCUUAACUGACCAACCGGGAGUCCAGAUCCCCCUCUUCUUCCUGUUUCUAGGCU\
) } def
/len { sequence length } bind def

/coor [
[160.46897888 239.89143372]
[161.71929932 221.59031677]
[170.70971680 205.54406738]
[161.59371948 193.63194275]
[146.73336792 194.18678284]
[134.24810791 185.78546143]
[129.04301453 171.47599792]
[133.31118774 156.67434692]
[124.19519043 144.76222229]
[115.07920074 132.85009766]
[108.39671326 129.39035034]
[105.87182617 120.42277527]
[97.13070679 108.23290253]
[93.96496582 107.50727844]
[91.01993561 105.52959442]
[88.79246521 102.39081573]
[87.73355865 98.37652588]
[88.17381287 93.94286346]
[81.01301575 80.76246643]
[73.85221863 67.58206177]
[66.69141388 54.40166473]
[59.53062057 41.22126389]
[47.30641937 36.75742340]
[41.64914703 25.48711777]
[45.14366150 13.79069328]
[38.39623642 0.39396799]
[23.13195992 -0.58027714]
[10.48827076 -9.00843906]
[3.80524254 -22.54370880]
[4.78790379 -37.50667191]
[13.07242393 -49.88537598]
[6.32499838 -63.28210449]
[-0.42242703 -76.67882538]
[-7.16985273 -90.07555389]
[-13.91727829 -103.47227478]
[-29.09923172 -106.08272552]
[-39.70896530 -117.00458527]
[-41.82804489 -131.90336609]
[-34.85129547 -145.03587341]
[-41.59872055 -158.43260193]
[-48.34614563 -171.82933044]
[-60.87111664 -183.25567627]
[-53.35856628 -198.45429993]
[-36.67423630 -195.44273376]
[-34.94942093 -178.57675171]
[-28.20199585 -165.18002319]
[-21.45457077 -151.78329468]
[-6.74931335 -149.57119751]
[3.96030021 -138.99914551]
[6.41991043 -123.97238159]
[-0.52055305 -110.21970367]
[6.22687244 -96.82297516]
[12.97429848 -83.42625427]
[19.72172356 -70.02952576]
[26.46914864 -56.63280487]
[41.34724808 -55.92023849]
[53.95493317 -47.80221558]
[60.85201645 -34.37475967]
[60.09711456 -19.19823265]
[51.79296112 -6.35345745]
[58.54038620 7.04326773]
[73.68666077 15.75485992]
[72.71102142 34.06046295]
[79.87181854 47.24086380]
[87.03261566 60.42126465]
[94.19341278 73.60166931]
[101.35420990 86.78206635]
[109.32057953 99.49179077]
[118.06169128 111.68165588]
[126.99132538 123.73411560]
[136.10731506 135.64624023]
[145.22331238 147.55836487]
[160.62599182 147.30650330]
[173.07801819 156.07009888]
[177.92472839 170.31697083]
[173.50584412 184.51596069]
[182.62184143 196.42808533]
[194.12818909 192.57887268]
[206.23539734 192.18585205]
[217.92936707 195.27075195]
[228.23385620 201.56445312]
[236.29191589 210.53042603]
[241.43721008 221.41052246]
[243.24903870 233.28897095]
[241.58677673 245.16952515]
[236.60069275 256.05902100]
[228.71841431 265.05035400]
[236.28565979 278.00167847]
[243.85290527 290.95300293]
[251.42013550 303.90432739]
[265.92489624 311.55575562]
[266.28045654 327.95104980]
[252.12109375 336.22415161]
[238.01271057 327.86437988]
[238.46881104 311.47158813]
[230.90158081 298.52026367]
[223.33433533 285.56890869]
[215.76708984 272.61758423]
[197.77633667 274.98696899]
[180.45671082 269.40951538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[4 76]
[8 72]
[9 71]
[10 70]
[12 69]
[13 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[25 61]
[26 60]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[39 47]
[40 46]
[41 45]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
