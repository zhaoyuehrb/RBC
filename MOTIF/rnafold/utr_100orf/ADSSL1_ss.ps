%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGAGGAGCGUGGCGUCGGCGUCGUGGGGAGGAGCGUGGCGUCGGCAUGGUGGGGAGGAGCUGUGGGGUGGCAACCCAGAGGCAAGGAGGUGGGCAGAGGCCCACGAACCUGGCCCUGACCCUCAGCUCGUCCCCAGCUCACAGCA\
) } def
/len { sequence length } bind def

/coor [
[109.93286133 244.50202942]
[103.83194733 258.49279785]
[92.25923920 268.44442749]
[77.51251984 272.38107300]
[62.51975632 269.52102661]
[50.25777054 260.43222046]
[43.16118622 246.91921997]
[42.63904190 231.66503906]
[48.79500961 217.69841003]
[60.40681076 207.79240417]
[75.16892242 203.91389465]
[77.97963715 189.17958069]
[80.63591003 174.41664124]
[83.13744354 159.62670898]
[85.63896942 144.83676147]
[87.98548889 130.02143860]
[90.17673492 115.18235779]
[79.45964813 104.68740845]
[64.66970062 107.18893433]
[49.87976456 109.69046783]
[35.08982468 112.19200134]
[20.29988289 114.69352722]
[5.50994158 117.19506073]
[-9.27999878 119.69659424]
[-24.06993866 122.19812775]
[-38.85987854 124.69965363]
[-53.64982224 127.20118713]
[-68.43975830 129.70271301]
[-83.22969818 132.20425415]
[-90.00825500 146.16242981]
[-103.71246338 153.44078064]
[-119.07276917 151.24063110]
[-130.18281555 140.40798950]
[-132.77058411 125.10820770]
[-125.84101105 111.22438812]
[-112.05865479 104.09512329]
[-96.72312164 106.46177673]
[-85.73123169 117.41430664]
[-70.94129181 114.91278076]
[-56.15135193 112.41124725]
[-41.36141205 109.90971375]
[-26.57147026 107.40818024]
[-11.78153038 104.90665436]
[3.00841045 102.40512085]
[17.79835129 99.90358734]
[32.58829117 97.40206146]
[47.37823105 94.90052795]
[62.16817093 92.39899445]
[76.95811462 89.89746857]
[83.75459290 85.56108093]
[90.73084259 84.20948792]
[96.78904724 85.46502686]
[101.09822845 88.59194183]
[103.19860077 92.62781525]
[114.95400238 83.31060028]
[126.70940399 73.99338531]
[138.46481323 64.67617035]
[150.22021484 55.35895157]
[161.97561646 46.04173660]
[167.98471069 31.40611649]
[182.76499939 29.56427193]
[194.52040100 20.24705505]
[206.27580261 10.92983818]
[218.03120422 1.61262178]
[229.78660583 -7.70459509]
[241.54200745 -17.02181244]
[246.36499023 -24.85885429]
[253.64256287 -26.40796471]
[265.59051514 -35.47695160]
[277.53845215 -44.54593658]
[289.48641968 -53.61492538]
[301.43435669 -62.68391037]
[286.63388062 -65.12241364]
[276.73049927 -76.38842773]
[276.20962524 -91.37937927]
[285.30712891 -103.30561829]
[299.90264893 -106.76555634]
[313.38558960 -100.19213104]
[319.64932251 -86.56254578]
[315.85708618 -72.05014801]
[329.00170898 -79.27645111]
[342.14630127 -86.50276184]
[348.20870972 -93.42572784]
[355.64270020 -93.73947144]
[368.93576050 -100.68891144]
[382.22882080 -107.63835144]
[390.87393188 -120.88874054]
[405.73754883 -119.92841339]
[419.03057861 -126.87785339]
[432.32363892 -133.82730103]
[437.22161865 -150.58801270]
[452.41186523 -158.49472046]
[468.31207275 -153.10780334]
[481.45666504 -160.33412170]
[494.60125732 -167.56042480]
[507.74588013 -174.78672791]
[520.89044189 -182.01303101]
[534.03509521 -189.23933411]
[542.06280518 -203.53924561]
[558.46179199 -203.46636963]
[566.36212158 -189.09568787]
[557.63665771 -175.21052551]
[541.26135254 -176.09474182]
[528.11676025 -168.86842346]
[514.97216797 -161.64212036]
[501.82757568 -154.41581726]
[488.68298340 -147.18951416]
[475.53836060 -139.96321106]
[473.69558716 -127.17166138]
[464.67227173 -117.64920044]
[451.61593628 -115.04461670]
[439.27307129 -120.53424072]
[425.98004150 -113.58480072]
[412.68698120 -106.63536072]
[404.99267578 -93.88204193]
[389.17825317 -94.34529877]
[375.88519287 -87.39585876]
[362.59216309 -80.44641876]
[349.37258911 -73.35816193]
[336.22799683 -66.13185120]
[323.08340454 -58.90554810]
[310.50335693 -50.73596191]
[298.55538940 -41.66697693]
[286.60745239 -32.59798813]
[274.65948486 -23.52900314]
[262.71154785 -14.46001530]
[250.85922241 -5.26640987]
[239.10382080 4.05080700]
[227.34841919 13.36802387]
[215.59301758 22.68523979]
[203.83761597 32.00245667]
[192.08221436 41.31967545]
[186.91394043 55.28886032]
[171.29283142 57.79713821]
[159.53742981 67.11435699]
[147.78202820 76.43157196]
[136.02662659 85.74878693]
[124.27122498 95.06600189]
[112.51582336 104.38321686]
[105.01582336 117.37360382]
[102.82457733 132.21269226]
[104.67359161 141.22720337]
[100.42890930 147.33830261]
[97.92738342 162.12823486]
[95.42584991 176.91818237]
[97.08567810 185.96945190]
[92.71395111 191.99029541]
[89.90322876 206.72460938]
[102.20091248 215.76506042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 148]
[12 147]
[13 145]
[14 144]
[15 143]
[16 141]
[17 140]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[54 139]
[55 138]
[56 137]
[57 136]
[58 135]
[59 134]
[61 132]
[62 131]
[63 130]
[64 129]
[65 128]
[66 127]
[68 126]
[69 125]
[70 124]
[71 123]
[72 122]
[80 121]
[81 120]
[82 119]
[84 118]
[85 117]
[86 116]
[88 114]
[89 113]
[90 112]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
