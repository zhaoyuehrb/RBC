%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCUUUUCCGGUUAGCGCGGCGUGAGAAGCCAUGAGCAGCAAAGUCUCUCGCGACACCCUGUACGAGGCGGUGCGGGAAGUCCUGCACGGGAACCAGCGCAAGCGCCGCAAGUUCCUGGAGACGGUGGAGU\
) } def
/len { sequence length } bind def

/coor [
[127.67179871 217.67330933]
[139.60215759 208.00056458]
[137.16949463 193.19914246]
[134.73681641 178.39772034]
[132.30415344 163.59629822]
[129.87149048 148.79487610]
[127.43881226 133.99345398]
[113.08182526 140.80769348]
[97.53652954 141.94850159]
[82.92195892 137.48088074]
[71.15131378 128.21960449]
[60.48318863 138.76432800]
[49.81505966 149.30903625]
[51.26755905 164.87901306]
[42.32958221 177.71047974]
[27.22136497 181.74481201]
[13.07654762 175.07711792]
[6.57388115 160.85568237]
[10.78372478 145.79542542]
[23.71831894 137.00735474]
[39.27034378 138.64091492]
[49.93847275 128.09619141]
[60.60660172 117.55148315]
[56.97777176 102.99704742]
[42.60792923 98.69499207]
[28.23808670 94.39294434]
[13.86824512 90.09089661]
[-0.50159770 85.78884888]
[-14.87143993 81.48680115]
[-29.24128342 77.18475342]
[-44.68078613 80.63906860]
[-54.65429688 69.57659912]
[-69.02413940 65.27454376]
[-82.81414795 72.51840210]
[-97.32592773 67.95080566]
[-104.14685059 54.75949860]
[-118.51669312 50.45745087]
[-133.26339722 56.77523041]
[-147.32850647 49.05823135]
[-149.92248535 33.22627640]
[-139.05545044 21.42428398]
[-123.06365967 22.70573425]
[-114.21464539 36.08760834]
[-99.84480286 40.38965607]
[-86.89726257 33.11663437]
[-72.26291656 37.27482224]
[-64.72209167 50.90470505]
[-50.35224915 55.20675278]
[-35.94057083 51.44472504]
[-24.93923378 62.81491089]
[-10.56939220 67.11695862]
[3.80045080 71.41900635]
[18.17029381 75.72105408]
[32.54013443 80.02310181]
[46.90997696 84.32514954]
[61.27982330 88.62719727]
[65.28382874 81.69086456]
[70.46198273 75.87035370]
[76.53562164 71.34853363]
[83.20152283 68.24315643]
[90.14645386 66.60465240]
[89.10010529 51.64119339]
[88.05376434 36.67773056]
[76.93797302 25.10972595]
[79.19436646 9.22614193]
[93.09203339 1.21150708]
[107.96987152 7.21396255]
[112.41487885 22.62893867]
[103.01721954 35.63138580]
[104.06356812 50.59484482]
[105.10991669 65.55830383]
[117.66849518 66.61246490]
[129.95045471 72.39733124]
[140.14842224 82.77945709]
[149.79023743 71.28879547]
[159.43205261 59.79812622]
[169.07386780 48.30746078]
[178.71568298 36.81679153]
[188.35749817 25.32612610]
[197.99931335 13.83545971]
[200.31257629 -2.39971352]
[215.62809753 -8.26204967]
[228.19056702 2.27911878]
[225.07681274 18.37994194]
[209.48997498 23.47727394]
[199.84815979 34.96794128]
[190.20634460 46.45860672]
[180.56452942 57.94927216]
[170.92272949 69.43994141]
[161.28091431 80.93060303]
[151.63909912 92.42127228]
[156.44001770 106.63222504]
[171.07495117 109.92140198]
[185.70988464 113.21057892]
[200.34481812 116.49976349]
[214.97976685 119.78894043]
[229.61470032 123.07811737]
[242.86579895 114.88996887]
[257.66085815 118.43415070]
[265.38534546 131.11752319]
[280.02026367 134.40669250]
[294.69247437 137.52537537]
[309.39999390 140.47312927]
[324.75485229 134.71461487]
[337.24566650 145.34060669]
[334.02297974 161.41996765]
[318.40197754 166.41165161]
[306.45223999 155.18063354]
[291.74475098 152.23287964]
[284.50189209 154.01918030]
[276.73110962 149.04162598]
[262.09616089 145.75245667]
[249.68750000 153.91093445]
[234.79873657 150.78372192]
[226.32551575 137.71305847]
[211.69058228 134.42387390]
[197.05564880 131.13468933]
[182.42071533 127.84551239]
[167.78578186 124.55633545]
[153.15084839 121.26715851]
[142.24023438 131.56077576]
[144.67291260 146.36219788]
[147.10557556 161.16363525]
[149.53823853 175.96505737]
[151.97091675 190.76647949]
[154.40357971 205.56790161]
[168.80224609 210.91337585]
[178.58674622 222.75224304]
[181.12512207 237.89993286]
[175.73454285 252.28176880]
[163.86505127 262.02911377]
[148.70948792 264.51998901]
[134.34461975 259.08435059]
[124.63452148 247.18437195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[7 121]
[11 23]
[12 22]
[13 21]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[32 48]
[33 47]
[36 44]
[37 43]
[61 71]
[62 70]
[63 69]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[97 115]
[100 112]
[101 111]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
