%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:12:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGACGGCUAGGUCACAGAAGCAGUGGGUCAGAAGCCAGAGGGGACGUGGGGAGUGCCACCCUGGAGCCUACCGGCACACCUGCUGAGAUGGAGGCCUCAGAUGGGCAAGGGGGUGAAGGGGACAAGCCACUAGAGCAGGUGACAAAUGUGUCAUGCCUGGAGACAAGCUCCAGCGCCAGCCCUGCUA\
) } def
/len { sequence length } bind def

/coor [
[465.26562500 238.29093933]
[450.40762329 240.35020447]
[437.62857056 232.49554443]
[432.75613403 218.30895996]
[438.01229858 204.26000977]
[450.99929810 196.75567627]
[436.52117920 192.83348083]
[422.21356201 196.97366333]
[410.91665649 185.89707947]
[396.43850708 181.97488403]
[381.92846680 178.17251587]
[367.38745117 174.49023438]
[352.84643555 170.80795288]
[338.30545044 167.12567139]
[323.76443481 163.44338989]
[307.16943359 169.12709045]
[294.06781006 156.19949341]
[279.46789551 152.75813293]
[270.19555664 162.37744141]
[257.27600098 166.18513489]
[244.05795288 163.08262634]
[234.02288818 153.77711487]
[229.86813354 140.62382507]
[215.32713318 136.94154358]
[200.78611755 133.25926208]
[186.24511719 129.57696533]
[171.70411682 125.89469147]
[157.16311646 122.21240997]
[142.62211609 118.53012848]
[128.08110046 114.84784698]
[120.95133209 123.87568665]
[111.07370758 129.77214050]
[99.74371338 131.76383972]
[88.44732666 129.58956909]
[78.66613007 123.53450775]
[71.68296814 114.39279175]
[68.41369629 103.36339569]
[53.54473877 101.38501740]
[38.67577744 99.40663147]
[23.80681419 97.42824554]
[14.86901665 99.40058899]
[8.70914555 95.29226685]
[-6.12507248 93.06831360]
[-20.97716904 90.96707153]
[-35.84613037 88.98868561]
[-50.73093796 87.13330078]
[-65.63057709 85.40103149]
[-76.87336731 96.26996613]
[-92.47580719 97.31774902]
[-105.07090759 88.04965973]
[-108.71163940 72.84179688]
[-101.67897034 58.87485123]
[-87.29350281 52.74358749]
[-72.34761810 57.34300232]
[-63.89830780 70.50138855]
[-48.99866867 72.23365784]
[-41.97886276 69.87895203]
[-33.86774826 74.11972809]
[-18.99878693 76.09810638]
[-11.94100761 73.85978699]
[-3.90111756 78.23409271]
[10.93310070 80.45804596]
[25.78519821 82.55928802]
[40.65415955 84.53767395]
[55.52312088 86.51605225]
[70.39208221 88.49443817]
[71.81748199 85.34555817]
[73.57658386 82.37020111]
[63.41735840 71.33434296]
[53.25813675 60.29848099]
[37.45370865 55.92217255]
[33.60398102 39.98129272]
[45.66922760 28.87445259]
[61.23775101 34.02741623]
[64.29399109 50.13925552]
[74.45321655 61.17511749]
[84.61244202 72.21097565]
[105.98925018 68.80487823]
[124.58472443 79.88537598]
[131.76338196 100.30683899]
[146.30439758 103.98912048]
[160.84539795 107.67140198]
[175.38639832 111.35368347]
[189.92739868 115.03597260]
[204.46841431 118.71825409]
[219.00941467 122.40053558]
[233.55041504 126.08281708]
[246.39006042 115.08510590]
[263.08865356 113.91241455]
[277.05932617 122.82898712]
[282.90927124 138.15823364]
[297.50915527 141.59959412]
[308.88061523 135.48764038]
[320.97869873 138.66696167]
[327.44671631 148.90238953]
[341.98773193 152.58467102]
[356.52871704 156.26695251]
[371.06973267 159.94923401]
[385.61074829 163.63151550]
[394.71652222 162.70454407]
[400.36071777 167.49674988]
[414.83883667 171.41894531]
[430.18203735 167.55931091]
[440.44338989 178.35534668]
[454.92150879 182.27754211]
[469.60226440 185.35577393]
[484.43649292 187.57972717]
[499.27069092 189.80368042]
[514.10491943 192.02763367]
[523.07409668 190.20335388]
[529.16522217 194.41294861]
[543.96063232 196.88186646]
[558.75604248 199.35079956]
[573.59027100 201.57475281]
[588.45922852 203.55313110]
[603.32818604 205.53150940]
[618.19714355 207.50988770]
[630.66992188 198.17889404]
[645.72094727 200.39706421]
[654.53979492 212.34544373]
[669.40875244 214.32383728]
[684.27770996 216.30221558]
[699.14666748 218.28059387]
[705.49060059 205.42300415]
[715.48211670 195.17037964]
[728.13391113 188.51704407]
[742.20123291 186.10249329]
[756.30499268 188.15000916]
[769.06652832 194.44604492]
[779.24261475 204.36242676]
[785.84637451 216.91900635]
[788.24316406 230.88053894]
[803.07739258 233.10449219]
[817.91162109 235.32844543]
[832.74578857 237.55239868]
[841.71502686 235.72810364]
[847.80609131 239.93771362]
[862.60150146 242.40663147]
[877.39691162 244.87554932]
[883.73992920 242.91007996]
[889.28509521 244.25390625]
[892.63732910 247.67848206]
[907.34307861 250.63523865]
[922.04876709 253.59199524]
[936.75445557 256.54873657]
[951.46014404 259.50549316]
[966.81854248 253.75639343]
[979.30285645 264.39004517]
[976.07031250 280.46743774]
[960.44622803 285.44955444]
[948.50341797 274.21121216]
[933.79766846 271.25445557]
[919.09197998 268.29769897]
[904.38629150 265.34094238]
[889.68060303 262.38418579]
[874.92803955 259.67095947]
[860.13262939 257.20205688]
[845.33715820 254.73313904]
[830.52185059 252.38661194]
[815.68762207 250.16265869]
[800.85339355 247.93870544]
[786.01922607 245.71475220]
[778.68060303 259.63504028]
[767.00134277 270.22131348]
[752.37951660 276.18148804]
[736.57409668 276.77871704]
[721.49310303 271.92260742]
[708.96356201 262.18206787]
[700.50976562 248.71902466]
[697.16827393 233.14955139]
[682.29931641 231.17117310]
[667.43035889 229.19279480]
[652.56140137 227.21441650]
[640.92517090 236.44114685]
[625.81774902 234.64660645]
[616.21875000 222.37886047]
[601.34979248 220.40046692]
[586.48083496 218.42208862]
[571.61187744 216.44371033]
[567.32928467 218.59425354]
[561.64825439 218.06475830]
[556.28710938 214.14620972]
[541.49169922 211.67729187]
[526.69628906 209.20837402]
[511.88095093 206.86186218]
[497.04675293 204.63790894]
[482.21252441 202.41395569]
[467.37829590 200.18998718]
[476.25723267 212.27986145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 105]
[7 104]
[9 102]
[10 101]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[17 92]
[18 91]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[37 66]
[38 65]
[39 64]
[40 63]
[42 62]
[43 61]
[44 59]
[45 58]
[46 56]
[47 55]
[68 77]
[69 76]
[70 75]
[106 188]
[107 187]
[108 186]
[109 185]
[111 184]
[112 183]
[113 182]
[114 179]
[115 178]
[116 177]
[117 176]
[120 173]
[121 172]
[122 171]
[123 170]
[132 162]
[133 161]
[134 160]
[135 159]
[137 158]
[138 157]
[139 156]
[142 155]
[143 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
