%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGCCGCGGUAAGGGCGGAAAGGGUCUAGGUAAGGGUGGCGCCAAGCGUCACCGUAAGGUAUUGCGUGACAAUAUCCAAGGAAUCACCAAGCCCG\
) } def
/len { sequence length } bind def

/coor [
[-17.42743492 249.08566284]
[-26.75100327 254.40072632]
[-37.36640549 255.26338196]
[-47.27257538 251.58039856]
[-58.74656296 261.24206543]
[-70.22055054 270.90371704]
[-81.69453430 280.56536865]
[-87.26705933 295.37271118]
[-101.98624420 297.65197754]
[-113.46022797 307.31362915]
[-113.25228119 322.94982910]
[-123.18372345 335.02874756]
[-138.56523132 337.84710693]
[-152.13414001 330.07415771]
[-157.48361206 315.38003540]
[-152.08779907 300.70285034]
[-138.49443054 292.97274780]
[-123.12188721 295.83963013]
[-111.64789581 286.17797852]
[-106.89607239 272.06170654]
[-91.35619354 269.09136963]
[-79.88220978 259.42971802]
[-68.40821838 249.76806641]
[-56.93423080 240.10641479]
[-56.89633942 220.78100586]
[-42.63179779 207.30531311]
[-22.74077415 208.39822388]
[-12.21697235 197.70945740]
[-1.69316971 187.02070618]
[0.80042869 179.92088318]
[9.32804871 176.16957092]
[20.17918015 165.81326294]
[24.04421234 151.42887878]
[39.36936569 147.49818420]
[50.22049713 137.14189148]
[61.07162857 126.78559113]
[53.10059738 105.77339172]
[55.73760223 83.45532990]
[68.38618469 64.87945557]
[88.18540192 54.24739075]
[86.78771210 39.31264877]
[85.39002991 24.37791061]
[83.99234009 9.44316959]
[82.59465027 -5.49157047]
[81.19696045 -20.42631149]
[79.79927063 -35.36104965]
[78.40158081 -50.29579163]
[70.90567017 -65.50261688]
[83.44313049 -76.91526031]
[97.88047791 -68.02709198]
[93.33631897 -51.69348145]
[94.73400879 -36.75873947]
[96.13169861 -21.82399940]
[97.52938843 -6.88925982]
[98.92707825 8.04548073]
[100.32476807 22.98022079]
[101.72245789 37.91496277]
[103.12014771 52.84970093]
[113.44364929 54.69929123]
[123.10488892 58.78046799]
[131.62794495 64.89218903]
[138.59297180 72.73337555]
[143.65682983 81.91776276]
[158.25050354 78.45011902]
[172.84417725 74.98246765]
[187.43786621 71.51482391]
[202.03153992 68.04718018]
[216.62521362 64.57953644]
[231.21890259 61.11189270]
[240.82362366 48.26165009]
[256.86267090 47.90296936]
[267.03225708 60.31100082]
[263.53112793 75.96736145]
[249.04507446 82.86183929]
[234.68653870 75.70556641]
[220.09286499 79.17321777]
[205.49919128 82.64086151]
[190.90550232 86.10850525]
[176.31182861 89.57614899]
[161.71815491 93.04379272]
[147.12446594 96.51143646]
[146.68321228 107.31873322]
[143.79597473 117.74255371]
[138.61404419 127.23676300]
[131.40893555 135.30389404]
[122.55815125 141.52127075]
[112.52542114 145.56314087]
[101.83642578 147.21772766]
[91.05121613 146.39833069]
[80.73487091 143.14788818]
[71.42792511 137.63671875]
[60.57679749 147.99302673]
[49.72566605 158.34931946]
[45.08448792 173.47447205]
[30.53548050 176.66439819]
[19.68434906 187.02070618]
[8.99558926 197.54449463]
[-1.52821290 208.23326111]
[-12.05201530 218.92202759]
[-9.24678612 229.53491211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[7 21]
[9 19]
[10 18]
[27 99]
[28 98]
[29 97]
[31 96]
[32 95]
[34 93]
[35 92]
[36 91]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
