%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGAGCUAGCGGCGAGCGCGGCGAGCAACGGAGAGGAGCGCGAGCAGCAGCAUGGCGGGGCUCCGACGCCCGCAGCCCGGCUGCUACUGCCGCACCGCGGCGGCCGUGAACCUCCUGCUGGGCGUCUUCCAGGUCCUGCUGCCCUGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[-13.25001621 712.77655029]
[-16.93360329 715.90393066]
[-20.89021301 730.37268066]
[-12.84172153 743.97406006]
[-16.84907532 759.26190186]
[-30.53478050 767.16613770]
[-45.77935410 762.99737549]
[-53.53845596 749.22882080]
[-49.20875549 734.02917480]
[-35.35898209 726.41607666]
[-31.40237045 711.94732666]
[-27.74366379 697.40039062]
[-24.38440514 682.78137207]
[-21.02514648 668.16235352]
[-22.60206223 660.89422607]
[-17.44392586 653.27917480]
[-13.78522015 638.73217773]
[-10.12651443 624.18524170]
[-6.46780825 609.63830566]
[-10.86706257 595.40820312]
[0.00259915 583.91204834]
[3.66130495 569.36511230]
[7.32001066 554.81817627]
[5.89265585 547.51916504]
[11.20605564 540.01165771]
[15.16266632 525.54284668]
[19.11927605 511.07409668]
[23.07588768 496.60531616]
[21.49629021 492.03869629]
[22.81275558 486.43023682]
[27.50337029 481.63015747]
[32.05066299 467.33602905]
[36.59794998 453.04190063]
[28.23737144 438.48156738]
[33.06054688 422.04779053]
[48.56196213 414.00457764]
[52.81480789 399.62008667]
[57.06765366 385.23562622]
[61.32049942 370.85113525]
[57.50917435 356.45242310]
[68.84164429 345.41223145]
[73.09449005 331.02774048]
[77.34733582 316.64328003]
[70.03005219 303.72070312]
[74.13813019 289.07220459]
[87.74212646 281.48477173]
[91.99497223 267.10028076]
[96.24782562 252.71582031]
[100.50067139 238.33132935]
[104.75351715 223.94685364]
[109.00636292 209.56237793]
[112.36562347 194.94335938]
[114.81855011 180.14527893]
[117.27147675 165.34719849]
[119.72440338 150.54913330]
[122.17733002 135.75105286]
[124.63026428 120.95297241]
[85.67473602 130.34573364]
[65.76740265 93.86943817]
[59.21953201 80.37405396]
[52.67166138 66.87866974]
[46.12379074 53.38328552]
[31.11093140 48.44469833]
[24.06202316 34.29943848]
[29.15905762 19.33963203]
[43.37805176 12.44066906]
[58.28313446 17.69558144]
[65.03137970 31.98672295]
[59.61917496 46.83541489]
[66.16704559 60.33079910]
[72.71491241 73.82617950]
[79.26278687 87.32156372]
[94.03490448 84.71684265]
[95.57219696 69.79582977]
[97.10948944 54.87480927]
[98.64678192 39.95379257]
[100.18407440 25.03277779]
[95.79286194 8.65738106]
[110.31269073 -0.09538037]
[122.74288177 11.43400574]
[115.10508728 26.57007027]
[113.56779480 41.49108505]
[112.03050232 56.41210175]
[110.49320984 71.33312225]
[108.95591736 86.25413513]
[115.70361328 89.52806854]
[128.12174988 81.11440277]
[129.19898987 96.07594299]
[135.94668579 99.34987640]
[146.71536255 88.90786743]
[157.48403931 78.46585846]
[168.25271606 68.02384949]
[179.02140808 57.58184052]
[189.79008484 47.13983154]
[196.95211792 31.77293396]
[213.70112610 34.40109634]
[215.81225586 51.22309113]
[200.23208618 57.90850830]
[189.46340942 68.35051727]
[178.69473267 78.79252625]
[167.92605591 89.23453522]
[157.15737915 99.67654419]
[146.38870239 110.11855316]
[139.42834473 123.40589905]
[136.97541809 138.20397949]
[134.52249146 153.00205994]
[132.06954956 167.80014038]
[129.61662292 182.59820557]
[127.16369629 197.39628601]
[140.16931152 189.92274475]
[154.69863892 193.65083313]
[162.49913025 206.46302795]
[159.14016724 221.08209229]
[146.52960205 229.20452881]
[131.83015442 226.21682739]
[123.39084625 213.81521606]
[119.13799286 228.19969177]
[114.88514709 242.58418274]
[110.63230133 256.96865845]
[106.37945557 271.35314941]
[102.12660980 285.73760986]
[109.41761017 299.50277710]
[104.89970398 314.03009033]
[91.73181915 320.89611816]
[87.47897339 335.28060913]
[83.22612762 349.66506958]
[86.73326111 365.09268188]
[75.70497894 375.10397339]
[71.45213318 389.48846436]
[67.19928741 403.87292480]
[62.94644165 418.25741577]
[70.71420288 429.30603027]
[70.68076324 442.61691284]
[63.08335876 453.30841064]
[50.89208221 457.58920288]
[46.34479141 471.88333130]
[41.79750061 486.17745972]
[37.54465485 500.56192017]
[33.58804321 515.03070068]
[29.63143349 529.49945068]
[25.67482376 543.96826172]
[21.86696434 558.47686768]
[18.20825958 573.02380371]
[14.54955292 587.57080078]
[18.68711281 602.84136963]
[8.07914543 613.29699707]
[4.42043972 627.84393311]
[0.76173395 642.39093018]
[-2.89697194 656.93786621]
[-6.40613890 671.52160645]
[-9.76539803 686.14062500]
[-13.12465668 700.75964355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[12 152]
[13 151]
[14 150]
[16 149]
[17 148]
[18 147]
[19 146]
[21 144]
[22 143]
[23 142]
[25 141]
[26 140]
[27 139]
[28 138]
[31 137]
[32 136]
[33 135]
[36 131]
[37 130]
[38 129]
[39 128]
[41 126]
[42 125]
[43 124]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[51 116]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[59 72]
[60 71]
[61 70]
[62 69]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
