%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGGAGCAGCCGCUUCCGGUUCCGGUAGCAGCUAGUCACGCUCGGUACCAGGCGCAGAUCAUGGCAGGCAGCCGGCUGGAAACCGUAGGGAGCAUCUUCUCUCGGACUCGGGACCUGGUUCGGGCCGGGGUGCUGAAGGAGAAGCCCCUGUGGUUUGACG\
) } def
/len { sequence length } bind def

/coor [
[91.67623901 135.01672363]
[85.24250031 148.56689453]
[78.80876160 162.11706543]
[79.87909698 177.90202332]
[67.43072510 186.08047485]
[60.99698639 199.63064575]
[54.56324768 213.18081665]
[48.12951279 226.73098755]
[41.69577408 240.28114319]
[43.54994202 256.57513428]
[30.20689774 266.10903931]
[15.39281845 259.07519531]
[14.34716129 242.70941162]
[28.14560699 233.84741211]
[34.57934570 220.29724121]
[41.01308060 206.74708557]
[47.44681931 193.19691467]
[53.88055420 179.64674377]
[52.35003662 164.83097839]
[65.25859833 155.68331909]
[71.69232941 142.13316345]
[78.12606812 128.58299255]
[66.51976776 113.21099854]
[64.50183868 94.05551910]
[50.54881668 88.54978180]
[36.59579468 83.04404449]
[22.64277077 77.53830719]
[8.68974686 72.03256989]
[-6.98716402 74.16448212]
[-15.98612309 62.29569626]
[-29.93914604 56.78995895]
[-48.05948639 59.93939972]
[-58.46322250 45.83219528]
[-72.51976013 40.59638977]
[-86.57630157 35.36058426]
[-100.63284302 30.12477875]
[-114.78768158 25.16084671]
[-129.03555298 20.47063637]
[-143.28343201 15.78042507]
[-161.19148254 19.97174835]
[-172.39306641 6.48933649]
[-186.72868347 2.07458687]
[-201.06431580 -2.34016252]
[-215.39993286 -6.75491190]
[-227.73010254 2.66562843]
[-243.24343872 3.00585699]
[-255.97476196 -5.86505079]
[-261.02862549 -20.53605080]
[-256.46166992 -35.36584473]
[-244.03004456 -44.65206909]
[-228.51391602 -44.82398987]
[-215.87957764 -35.81549072]
[-210.98518372 -21.09053230]
[-196.64956665 -16.67578125]
[-182.31393433 -12.26103210]
[-167.97831726 -7.84628296]
[-157.11250305 -13.23025322]
[-145.11195374 -9.63335133]
[-138.59321594 1.53255093]
[-124.34534454 6.22276211]
[-110.09747314 10.91297340]
[-105.46726227 9.57546711]
[-99.94860077 11.16658688]
[-95.39704132 16.06823730]
[-81.34049988 21.30404282]
[-67.28395844 26.53984833]
[-53.22741699 31.77565575]
[-42.06861877 27.02860260]
[-30.29598808 31.31298637]
[-24.43341064 42.83693695]
[-10.48038673 48.34267426]
[4.19851065 45.81695938]
[14.19548321 58.07954788]
[28.14850616 63.58528519]
[42.10153198 69.09101868]
[56.05455399 74.59675598]
[70.00757599 80.10249329]
[81.70511627 69.00397491]
[97.07460022 64.12663269]
[113.03124237 66.44940186]
[126.37239838 75.50606537]
[134.42037964 89.47888184]
[149.36399841 88.17954254]
[164.30761719 86.88020325]
[179.25123596 85.58087158]
[194.19485474 84.28153229]
[209.13845825 82.98220062]
[224.08207703 81.68286133]
[239.02569580 80.38352966]
[253.96931458 79.08419037]
[268.91293335 77.78485870]
[283.85656738 76.48551941]
[292.18145752 72.60836029]
[299.10025024 75.30798340]
[314.06613159 74.29689026]
[327.31335449 65.64696503]
[340.53323364 72.50877380]
[355.49911499 71.49767303]
[370.46499634 70.48657990]
[385.43087769 69.47548676]
[400.39675903 68.46438599]
[415.36267090 67.45329285]
[423.76074219 63.73729706]
[430.62622070 66.56975555]
[445.60879517 65.84728241]
[460.59140015 65.12480164]
[475.57397461 64.40232086]
[490.54891968 63.53549194]
[505.51480103 62.52439880]
[520.48065186 61.51330185]
[535.44653320 60.50220871]
[548.69378662 51.85228348]
[561.91369629 58.71408844]
[576.87957764 57.70299149]
[585.27764893 53.98699570]
[592.14312744 56.81945801]
[607.12567139 56.09698105]
[622.10827637 55.37450027]
[637.09088135 54.65201950]
[652.62042236 47.84980392]
[663.45581055 60.88938522]
[653.92535400 74.91103363]
[637.81335449 69.63461304]
[622.83074951 70.35709381]
[607.84820557 71.07956696]
[592.86560059 71.80204773]
[577.89062500 72.66887665]
[562.92474365 73.67996979]
[550.74798584 82.25757599]
[536.45764160 75.46809387]
[521.49176025 76.47918701]
[506.52587891 77.49028015]
[491.55999756 78.50138092]
[485.06723022 82.10708618]
[476.29644775 79.38491058]
[461.31387329 80.10739136]
[446.33126831 80.82987213]
[431.34869385 81.55235291]
[416.37374878 82.41917419]
[401.40786743 83.43027496]
[386.44198608 84.44136810]
[371.47610474 85.45246124]
[356.51022339 86.46356201]
[341.54434204 87.47465515]
[329.36755371 96.05225372]
[315.07720947 89.26277161]
[300.11132812 90.27387238]
[285.15588379 91.42913818]
[270.21228027 92.72847748]
[255.26866150 94.02780914]
[240.32504272 95.32714844]
[225.38142395 96.62648010]
[210.43780518 97.92581940]
[195.49418640 99.22515106]
[180.55056763 100.52449036]
[165.60694885 101.82382202]
[150.66333008 103.12316132]
[135.71971130 104.42249298]
[133.10411072 114.12706757]
[127.90704346 122.73000336]
[120.53378296 129.56044006]
[111.55928802 134.08575439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[30 71]
[31 70]
[33 67]
[34 66]
[35 65]
[36 64]
[37 61]
[38 60]
[39 59]
[41 56]
[42 55]
[43 54]
[44 53]
[82 158]
[83 157]
[84 156]
[85 155]
[86 154]
[87 153]
[88 152]
[89 151]
[90 150]
[91 149]
[92 148]
[94 147]
[95 146]
[97 144]
[98 143]
[99 142]
[100 141]
[101 140]
[102 139]
[104 138]
[105 137]
[106 136]
[107 135]
[108 133]
[109 132]
[110 131]
[111 130]
[113 128]
[114 127]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
