%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACCCGGCCCGGAACCACGUGAUGCAGGAGGUGCCCGAGGCGGCGGGGCUCGCGCGGGUGGAGCCGCCUCGGCGUUCGAGCGGGGUGGGGGCUGCCCGGUUGAGAUUUCCCGGCGGGUCCC\
) } def
/len { sequence length } bind def

/coor [
[232.94689941 243.99443054]
[229.82498169 240.30699158]
[228.29512024 235.07545471]
[217.42323303 224.74095154]
[206.55133057 214.40644836]
[195.67944336 204.07194519]
[184.80755615 193.73744202]
[170.25218201 190.57672119]
[165.58065796 175.46090698]
[154.70875549 165.12640381]
[140.15338135 161.96568298]
[135.48185730 146.84988403]
[124.60997009 136.51538086]
[113.73807526 126.18087006]
[102.86618805 115.84636688]
[110.81153870 128.56922913]
[111.65736389 143.54536438]
[105.19510651 157.08195496]
[93.01822662 165.84115601]
[78.12928772 167.66311646]
[64.19960785 162.09858704]
[54.66395187 150.51968384]
[51.87362671 135.78149414]
[56.51666641 121.51817322]
[67.44819641 111.24677277]
[81.97149658 107.50000000]
[66.97149658 107.50000000]
[51.97149277 107.50000000]
[39.65626907 117.78176880]
[23.96877480 114.42288971]
[16.94311523 100.00000000]
[23.96877480 85.57711029]
[39.65626907 82.21823120]
[51.97149277 92.50000000]
[66.97149658 92.50000000]
[81.97149658 92.50000000]
[90.69578552 80.29808044]
[85.84421539 66.10433960]
[80.99264526 51.91060257]
[76.14107513 37.71686172]
[71.28950500 23.52312088]
[66.43793488 9.32938099]
[61.58636475 -4.86435986]
[56.73479462 -19.05809975]
[51.88322449 -33.25184250]
[47.03165436 -47.44558334]
[32.34945679 -52.10811996]
[23.33336258 -64.37854767]
[23.27209282 -79.42714691]
[31.97956657 -91.48193359]
[27.12799644 -105.67567444]
[22.27642632 -119.86941528]
[17.42485619 -134.06315613]
[4.72334719 -144.43637085]
[7.62277508 -160.57717896]
[23.14045715 -165.88128662]
[35.31313324 -154.89228821]
[31.61859703 -138.91471863]
[36.47016907 -124.72098541]
[41.32173538 -110.52724457]
[46.17330551 -96.33350372]
[60.43777466 -92.13076782]
[69.60065460 -80.19319916]
[69.98175049 -64.97123718]
[61.22539520 -52.29714966]
[66.07696533 -38.10341263]
[70.92853546 -23.90966988]
[75.78010559 -9.71592999]
[80.63167572 4.47781086]
[85.48324585 18.67155075]
[90.33481598 32.86529160]
[95.18638611 47.05903244]
[100.03795624 61.25277328]
[104.88952637 75.44651031]
[114.96527100 84.71315765]
[117.33034515 96.16416168]
[113.20069122 104.97447205]
[124.07257843 115.30897522]
[134.94447327 125.64347839]
[145.81636047 135.97798157]
[161.14936829 139.87791443]
[165.04325867 154.25451660]
[175.91516113 164.58901978]
[191.24816895 168.48893738]
[195.14205933 182.86555481]
[206.01394653 193.20005798]
[216.88584900 203.53456116]
[227.75773621 213.86906433]
[238.62962341 224.20356750]
[249.88632202 234.11753845]
[261.51153564 243.59667969]
[273.13677979 253.07580566]
[284.76202393 262.55493164]
[296.38726807 272.03405762]
[308.01248169 281.51318359]
[323.52557373 280.10522461]
[335.18017578 289.88403320]
[336.42684937 304.68203735]
[348.05206299 314.16119385]
[359.67730713 323.64031982]
[371.30255127 333.11944580]
[385.63113403 327.58883667]
[400.80282593 329.97933960]
[412.73657227 339.64791870]
[418.22222900 353.99374390]
[415.78421021 369.15789795]
[406.07827759 381.06127930]
[391.71530151 386.50195312]
[376.55886841 384.01638794]
[364.68597412 374.27319336]
[359.29034424 359.89324951]
[361.82342529 344.74468994]
[350.19818115 335.26553345]
[338.57293701 325.78640747]
[326.94772339 316.30728149]
[312.20166016 318.06494141]
[300.27697754 308.61737061]
[298.53335571 293.13842773]
[286.90811157 283.65930176]
[275.28289795 274.18017578]
[263.65765381 264.70104980]
[252.03242493 255.22190857]
[240.40718079 245.74278259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[9 83]
[10 82]
[12 80]
[13 79]
[14 78]
[15 77]
[26 36]
[27 35]
[28 34]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[50 61]
[51 60]
[52 59]
[53 58]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
