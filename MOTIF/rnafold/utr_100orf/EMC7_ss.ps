%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGCUGCUGUCAUGGCGGCCGCUCUGUGGGGCUUCUUUCCCGUCCUGCUGCUGCUGCUGCUAUCGGGGGAUGUCCAGAGCUCGGAGGUGCCCGGGGCUGCUGCUGAGGGAU\
) } def
/len { sequence length } bind def

/coor [
[79.49622345 130.40980530]
[68.74448395 140.86926270]
[57.99274826 151.32870483]
[47.24101257 161.78816223]
[36.48927307 172.24761963]
[25.73753548 182.70706177]
[21.24100876 197.87583923]
[6.72312784 201.20457458]
[-4.02860975 211.66401672]
[-14.78034782 222.12347412]
[-25.53208542 232.58293152]
[-36.28382111 243.04237366]
[-40.22298813 258.96139526]
[-56.05173874 263.24890137]
[-67.48681641 251.49427795]
[-62.76478577 235.78967285]
[-46.74327469 232.29063416]
[-35.99153900 221.83119202]
[-25.23979950 211.37173462]
[-14.48806190 200.91227722]
[-3.73632407 190.45283508]
[-0.00883284 176.03218079]
[15.27808380 171.95532227]
[26.02982140 161.49588013]
[36.78155899 151.03642273]
[47.53329849 140.57696533]
[58.28503418 130.11752319]
[69.03677368 119.65806580]
[63.33302689 99.16684723]
[69.96160889 78.95584869]
[86.69311523 65.82270050]
[84.22419739 51.02727890]
[81.75527191 36.23186111]
[79.28635406 21.43644142]
[69.38314819 9.09800339]
[74.92008209 -4.72920322]
[72.45116425 -19.52462196]
[69.98224640 -34.32004166]
[65.94725037 -39.83921051]
[65.48466492 -45.67959976]
[67.80840302 -49.99666977]
[66.15827942 -64.90563202]
[64.50815582 -79.81459045]
[62.85803223 -94.72354889]
[50.34393692 -100.68572998]
[42.50191116 -111.98400116]
[41.31199646 -125.57643890]
[46.98059845 -137.86799622]
[57.91438675 -145.66139221]
[56.67569351 -160.61016846]
[47.82521057 -173.72425842]
[54.48507690 -187.04701233]
[53.24638367 -201.99577332]
[43.46245575 -215.15657043]
[50.21557236 -230.10072327]
[66.55870819 -231.45495605]
[75.67944336 -217.82615662]
[68.19515228 -203.23446655]
[69.43384552 -188.28569031]
[78.19572449 -176.24082947]
[71.62445831 -161.84886169]
[72.86315155 -146.90008545]
[87.12000275 -138.89176941]
[93.90772247 -123.83348846]
[90.39706421 -107.52433777]
[77.76699066 -96.37367249]
[79.41711426 -81.46471405]
[81.06723785 -66.55575562]
[82.71736145 -51.64679337]
[84.77766418 -36.78895950]
[87.24658203 -21.99354172]
[89.71549988 -7.19812202]
[99.44211578 4.08204889]
[94.08177948 18.96752167]
[96.55069733 33.76294327]
[99.01961517 48.55836105]
[101.48853302 63.35378265]
[114.81036377 66.44684601]
[126.07288361 74.20531464]
[133.71009827 85.55040741]
[136.66007996 98.90465546]
[134.51264954 112.41120148]
[147.29144287 120.26629639]
[160.07023621 128.12138367]
[172.84902954 135.97648621]
[185.62782288 143.83157349]
[201.43626404 144.46679688]
[208.22706604 157.72328186]
[221.00585938 165.57836914]
[233.78463745 173.43347168]
[246.67045593 181.11174011]
[259.66082764 188.61174011]
[272.65121460 196.11174011]
[289.39147949 198.79502869]
[291.44723511 215.62387085]
[275.84512329 222.25796509]
[265.15121460 209.10212708]
[252.16082764 201.60212708]
[239.17045593 194.10212708]
[231.70132446 193.47434998]
[225.92955017 186.21224976]
[213.15075684 178.35716248]
[200.37196350 170.50207520]
[185.47753906 170.42869568]
[177.77272034 156.61036682]
[164.99392700 148.75526428]
[152.21514893 140.90017700]
[139.43635559 133.04508972]
[126.65756226 125.18998718]
[120.07525635 130.69438171]
[112.39417267 134.51876831]
[104.03470612 136.45384216]
[95.45441437 136.39366150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[31 77]
[32 76]
[33 75]
[34 74]
[36 72]
[37 71]
[38 70]
[41 69]
[42 68]
[43 67]
[44 66]
[49 62]
[50 61]
[52 59]
[53 58]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[88 103]
[89 102]
[90 101]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
