%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUGACGGCGGCGGCAUGGAGUUCCCUGAGCACGGCGGACGGCUGCUGGGCCGCCUGAGACAGCAGCGCGAGCUGGGCUUCCUAUGCGACUGCACCGUGCUGGUGGGCGACGCGC\
) } def
/len { sequence length } bind def

/coor [
[98.48153687 408.80651855]
[98.48153687 393.80651855]
[98.48153687 378.80651855]
[95.29415131 372.03112793]
[98.68653107 363.40853882]
[99.08583832 348.41384888]
[91.69008636 335.48513794]
[99.79200745 321.89581299]
[100.19131470 306.90112305]
[90.98291016 292.02673340]
[100.57330322 276.37698364]
[100.57330322 261.37698364]
[92.83600616 248.64970398]
[100.57330322 234.84953308]
[100.57330322 219.84953308]
[100.57330322 204.84953308]
[100.57330322 189.84953308]
[100.57330322 174.84953308]
[100.57330322 159.84953308]
[100.57330322 144.84953308]
[100.57330322 129.84953308]
[76.17234039 117.33921814]
[72.50436401 90.52493286]
[57.69533920 88.13897705]
[42.88631058 85.75302124]
[28.07728767 83.36707306]
[13.22209167 88.81076050]
[1.88758087 79.14752197]
[-12.92144489 76.76157379]
[-27.73047066 74.37561798]
[-42.85507965 80.71424866]
[-55.74119949 70.57127380]
[-53.13269043 54.38091278]
[-37.71296692 48.79842758]
[-25.34451675 59.56659317]
[-10.53549194 61.95254517]
[4.27353334 64.33850098]
[18.06948853 58.72415161]
[30.46323967 68.55804443]
[45.27226639 70.94400024]
[60.08129120 73.32994843]
[74.89031219 75.71590424]
[87.39002228 67.42390442]
[90.94992828 52.85245514]
[83.00881958 39.45183563]
[86.82663727 24.72502708]
[99.65101624 17.23698044]
[103.21092224 2.66553116]
[106.77082062 -11.90591717]
[102.52972412 -27.14808464]
[113.06649017 -37.67546844]
[116.62638855 -52.24691772]
[120.18629456 -66.81836700]
[123.55191040 -81.43591309]
[126.72264862 -96.09696198]
[129.89338684 -110.75801086]
[132.86868286 -125.45996857]
[135.64802551 -140.20024109]
[138.42735291 -154.94049072]
[129.31033325 -167.85000610]
[132.07432556 -183.41072083]
[145.07949829 -192.39074707]
[160.61012268 -189.46238708]
[169.45214844 -176.36299133]
[166.35975647 -160.86419678]
[153.16761780 -152.16116333]
[150.38827515 -137.42089844]
[147.60894775 -122.68064117]
[149.48573303 -115.43196869]
[144.55444336 -107.58727264]
[141.38369751 -92.92622375]
[138.21296692 -78.26517487]
[139.89611816 -70.96910858]
[134.75773621 -63.25846481]
[131.19784546 -48.68701553]
[127.63793945 -34.11557007]
[132.13366699 -19.91564941]
[121.34226990 -8.34601688]
[117.78237152 6.22543192]
[114.22246552 20.79688072]
[122.14952850 33.35464096]
[118.74685669 48.18287277]
[105.52136993 56.41235733]
[101.96147156 70.98380280]
[117.24385071 76.26221466]
[127.46631622 88.97216034]
[129.37831116 105.31398010]
[144.18733215 107.69992828]
[158.99635315 110.08588409]
[174.12097168 103.74725342]
[187.00708008 113.89022827]
[184.39857483 130.08058167]
[168.97885132 135.66307068]
[156.61039734 124.89490509]
[141.80137634 122.50895691]
[126.99235535 120.12300110]
[115.57330322 129.84953308]
[115.57330322 144.84953308]
[115.57330322 159.84953308]
[115.57330322 174.84953308]
[115.57330322 189.84953308]
[115.57330322 204.84953308]
[115.57330322 219.84953308]
[115.57330322 234.84953308]
[123.31060791 248.64970398]
[115.57330322 261.37698364]
[115.57330322 276.37698364]
[124.16757202 286.10665894]
[123.78623962 298.68017578]
[115.18600464 307.30044556]
[114.78669739 322.29513550]
[122.15388489 336.29638672]
[114.08052063 348.81317139]
[113.68121338 363.80786133]
[113.48153687 378.80651855]
[113.48153687 393.80651855]
[113.48153687 408.80651855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[2 116]
[3 115]
[5 114]
[6 113]
[8 111]
[9 110]
[11 107]
[12 106]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 99]
[20 98]
[21 97]
[23 42]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[43 84]
[44 83]
[47 80]
[48 79]
[49 78]
[51 76]
[52 75]
[53 74]
[54 72]
[55 71]
[56 70]
[57 68]
[58 67]
[59 66]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
