%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUCCCUCUGGCUCCAGAGCUCAGAGCCACCCACAGCCGCAGCCAUGCUGUGCCUCCUGCUCACCCUGGGCGUGGCCCUGGUCUGUGGUGUCCCGGCCAUGGACAUCCCCCAGACCAAGCAGGACCUGGAGCUCCCAAAGUUGG\
) } def
/len { sequence length } bind def

/coor [
[77.56325531 276.50241089]
[63.13993454 280.62161255]
[48.31902695 278.31060791]
[35.83454895 269.99566650]
[27.98950958 257.21072388]
[26.23107910 242.31413269]
[30.88363838 228.05392456]
[41.08892822 217.06065369]
[54.96438217 211.36224365]
[69.95039368 212.00990295]
[83.28249359 218.88412476]
[92.50000000 230.71409607]
[92.50000000 215.71409607]
[92.50000000 200.71409607]
[92.50000000 185.71409607]
[92.50000000 170.71409607]
[92.50000000 155.71409607]
[92.50000000 140.71409607]
[92.50000000 125.71409607]
[85.07386017 129.48851013]
[76.10181427 131.21932983]
[62.95412445 138.44000244]
[49.80643845 145.66069031]
[38.83382034 158.58502197]
[23.37706566 151.61901855]
[25.79197121 134.83793640]
[42.58575058 132.51300049]
[55.73344040 125.29232025]
[68.88112640 118.07163239]
[68.16095734 110.60629272]
[53.23024368 112.04640961]
[51.79035950 97.11567688]
[66.72061157 95.67560577]
[66.00043488 88.21025848]
[51.71490479 83.63602448]
[37.42937469 79.06179047]
[23.14384651 74.48754883]
[8.85831642 69.91331482]
[-5.42721272 65.33908081]
[-17.26263046 75.23485565]
[-32.57211685 77.13832855]
[-46.47046661 70.44210815]
[-54.52276993 57.28293228]
[-54.15956497 41.85984421]
[-45.49674988 29.09429741]
[-31.29859734 23.05973244]
[-16.09568405 25.68175507]
[-4.73920774 36.12368774]
[-0.85297638 51.05355072]
[13.43255329 55.62778473]
[27.71808243 60.20202255]
[42.00361252 64.77626038]
[56.28914261 69.35049438]
[70.57466888 73.92473602]
[86.25356293 67.66101074]
[101.29448700 69.06462860]
[112.50122833 76.31067657]
[122.93646240 65.53543854]
[133.37170410 54.76019669]
[143.80694580 43.98495865]
[154.24217224 33.20971680]
[164.67741394 22.43447685]
[175.11265564 11.65923691]
[160.46583557 14.89504623]
[147.43026733 7.47384739]
[142.73626709 -6.77277756]
[148.80734253 -20.48926544]
[162.50898743 -26.59376335]
[176.76701355 -21.93450356]
[184.22027588 -8.91504765]
[185.18133545 -23.88422775]
[186.14239502 -38.85340881]
[187.10343933 -53.82258987]
[182.08433533 -70.01657104]
[196.25602722 -79.32246399]
[209.12135315 -68.28073883]
[202.07261658 -52.86153793]
[201.11157227 -37.89235687]
[200.15051270 -22.92317581]
[199.18946838 -7.95399427]
[211.58303833 0.49580660]
[225.16635132 -5.86766863]
[238.74964905 -12.23114395]
[252.33296204 -18.59461975]
[265.91625977 -24.95809364]
[279.49957275 -31.32156944]
[293.08288574 -37.68504333]
[303.77285767 -54.72049332]
[322.92919922 -52.41331863]
[336.22821045 -59.35139084]
[349.52719116 -66.28946686]
[362.82617188 -73.22753906]
[376.12515259 -80.16561890]
[389.42416382 -87.10369110]
[402.72314453 -94.04176331]
[405.91723633 -109.34966278]
[418.23568726 -118.98239899]
[433.86212158 -118.39169312]
[445.41818237 -107.85645294]
[447.44747925 -92.35109711]
[438.99182129 -79.19678497]
[424.04373169 -74.60457611]
[409.66122437 -80.74277496]
[396.36224365 -73.80470276]
[383.06323242 -66.86662292]
[369.76425171 -59.92855072]
[356.46527100 -52.99047852]
[343.16625977 -46.05240250]
[329.86727905 -39.11432648]
[327.66229248 -29.04827881]
[320.09579468 -21.73199844]
[309.52774048 -19.78646660]
[299.44635010 -24.10173988]
[285.86303711 -17.73826408]
[272.27975464 -11.37478828]
[258.69644165 -5.01131344]
[245.11312866 1.35216165]
[231.52983093 7.71563673]
[217.94651794 14.07911205]
[185.88789368 22.09447479]
[175.45265198 32.86971664]
[165.01742554 43.64495468]
[154.58218384 54.42019653]
[144.14694214 65.19543457]
[133.71170044 75.97067261]
[123.27646637 86.74591827]
[124.82795715 110.05172729]
[107.50000000 125.71409607]
[107.50000000 140.71409607]
[107.50000000 155.71409607]
[107.50000000 170.71409607]
[107.50000000 185.71409607]
[107.50000000 200.71409607]
[107.50000000 215.71409607]
[107.50000000 230.71409607]
[112.76260376 240.32676697]
[109.72604370 249.56495667]
[113.21992493 264.15237427]
[116.71381378 278.73977661]
[128.38243103 290.26260376]
[123.97644806 306.05880737]
[108.02837372 309.87857056]
[96.94420624 297.79251099]
[102.12639618 282.23367310]
[98.63250732 267.64627075]
[95.13862610 253.05883789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[21 29]
[22 28]
[23 27]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[57 126]
[58 125]
[59 124]
[60 123]
[61 122]
[62 121]
[63 120]
[70 80]
[71 79]
[72 78]
[73 77]
[81 119]
[82 118]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
