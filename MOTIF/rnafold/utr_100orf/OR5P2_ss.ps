%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUUCCCUGAAGGACGGGAAUCACACCGCUCUGACGGGGUUCAUCCUAUUGGGCUUAACAGAUGAUCCAAUCCUUCGAGUCAUCCUCUUCAUGAUCA\
) } def
/len { sequence length } bind def

/coor [
[122.35291290 321.79483032]
[107.38040161 320.88714600]
[93.97686768 314.15322876]
[84.31108856 302.68273926]
[79.94702911 288.33160400]
[81.59083557 273.42193604]
[88.97652435 260.36621094]
[100.90904236 251.27694702]
[115.45764923 247.62481689]
[130.26828003 250.00074768]
[142.94636536 258.02209473]
[138.35551453 243.74191284]
[133.76464844 229.46171570]
[129.17379761 215.18151855]
[124.58293915 200.90132141]
[119.99208069 186.62112427]
[115.40122223 172.34092712]
[102.07508850 165.78732300]
[97.21587372 151.37055969]
[104.18025970 137.43733215]
[99.58940125 123.15713501]
[94.99854279 108.87693787]
[89.64000702 102.64949036]
[90.49445343 94.08073425]
[86.34992981 79.66467285]
[82.20540619 65.24861145]
[73.05567169 77.13483429]
[58.22066116 79.35350800]
[45.99374771 70.66428375]
[43.21026611 55.92480469]
[51.42630386 43.37503433]
[66.04875183 40.03080368]
[78.90351105 47.76224136]
[77.50582123 32.82750320]
[76.10813141 17.89276314]
[74.71044159 2.95802236]
[63.34255981 -4.46129084]
[58.44847107 -16.91314125]
[61.62803268 -29.70741272]
[71.48479462 -38.16472626]
[70.55225372 -53.13571167]
[69.61970520 -68.10669708]
[68.68716431 -83.07768250]
[67.75461578 -98.04866028]
[66.82207489 -113.01964569]
[65.88952637 -127.99063110]
[53.87668991 -138.26036072]
[52.72742844 -154.02279663]
[63.12358093 -165.92639160]
[78.89730072 -166.90893555]
[90.69031525 -156.38751221]
[91.50603485 -140.60429382]
[80.86051178 -128.92317200]
[81.79306030 -113.95219421]
[82.72560120 -98.98120880]
[83.65814972 -84.01022339]
[84.59069061 -69.03923798]
[85.52323914 -54.06825638]
[86.45578003 -39.09727097]
[99.49858856 -28.60800934]
[101.03505707 -11.60454082]
[89.64518738 1.56033337]
[91.04286957 16.49507332]
[92.44055939 31.42981339]
[93.83824921 46.36455536]
[96.62146759 61.10408401]
[100.76599121 75.52014923]
[104.91052246 89.93621063]
[109.27873993 104.28607941]
[113.86959839 118.56627655]
[118.46045685 132.84646606]
[132.23959351 140.11099243]
[136.69194031 154.65853882]
[129.68141174 167.75007629]
[134.27227783 182.03025818]
[138.86312866 196.31045532]
[143.45399475 210.59065247]
[148.04484558 224.87084961]
[152.63571167 239.15104675]
[157.22656250 253.43124390]
[164.32913208 259.84542847]
[165.31042480 268.31066895]
[174.79248047 279.93353271]
[184.27452087 291.55636597]
[193.75656128 303.17922974]
[203.23861694 314.80209351]
[218.87615967 314.83734131]
[230.79916382 324.95541382]
[233.37797546 340.37890625]
[225.39492798 353.82528687]
[210.61940002 358.94558716]
[196.02792358 353.32217407]
[188.51014709 339.61022949]
[191.61575317 324.28414917]
[182.13371277 312.66128540]
[172.65165710 301.03842163]
[163.16961670 289.41555786]
[153.68757629 277.79269409]
[153.51820374 292.79174805]
[147.45243835 306.51058960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[17 74]
[20 71]
[21 70]
[22 69]
[24 68]
[25 67]
[26 66]
[33 65]
[34 64]
[35 63]
[36 62]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
