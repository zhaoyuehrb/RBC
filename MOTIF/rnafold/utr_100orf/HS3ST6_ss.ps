%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGGUAGCGGCGGCCUGGGCGGCGGGGCCGGGGGCGGCCAGGGCGCAGGGGCCGGGCAAGGGGCCGCUCUGCGGGCGUCCCGCGCGCCGAUGCUGC\
) } def
/len { sequence length } bind def

/coor [
[49.02833176 268.00048828]
[44.78191757 276.46057129]
[37.16964340 281.84942627]
[28.05568504 283.00778198]
[20.89488602 296.18817139]
[24.05028534 311.91787720]
[13.60985947 324.09887695]
[-2.41739082 323.38699341]
[-11.73673058 310.32830811]
[-7.19916010 294.94030762]
[7.71448517 289.02737427]
[14.87528324 275.84698486]
[12.25320435 255.47692871]
[30.21330643 244.01060486]
[36.11481094 230.22030640]
[42.01631165 216.43000793]
[47.91781616 202.63972473]
[53.81932068 188.84942627]
[46.03962326 176.17605591]
[47.22835159 161.17436218]
[57.13855362 149.61402893]
[72.12885284 146.06477356]
[78.03035736 132.27447510]
[83.93185425 118.48417664]
[89.83335876 104.69387817]
[95.51968384 90.81347656]
[100.98946381 76.84631348]
[106.45923615 62.87915039]
[111.92900848 48.91199112]
[117.39878082 34.94482803]
[122.86855316 20.97766876]
[127.68093872 6.77059507]
[131.82546997 -7.64546871]
[135.96998596 -22.06153297]
[139.88981628 -36.54030991]
[143.58399963 -51.07829285]
[147.27818298 -65.61627960]
[150.97236633 -80.15426636]
[154.66654968 -94.69224548]
[158.36073303 -109.23023224]
[162.05491638 -123.76821899]
[165.74909973 -138.30619812]
[169.44328308 -152.84419250]
[156.08988953 -170.74594116]
[159.70449829 -192.52066040]
[177.69546509 -204.85282898]
[178.62802124 -219.82380676]
[179.56056213 -234.79479980]
[168.91503906 -246.47590637]
[169.73075867 -262.25912476]
[181.52377319 -272.78054810]
[197.29748535 -271.79800415]
[207.69364929 -259.89440918]
[206.54438782 -244.13197327]
[194.53153992 -233.86224365]
[193.59899902 -218.89126587]
[192.66645813 -203.92028809]
[200.26028442 -199.97766113]
[206.31396484 -193.88252258]
[210.23577881 -186.20094299]
[211.63343811 -177.65544128]
[210.35313416 -169.05694580]
[206.49620056 -161.22789001]
[200.41145325 -154.92355347]
[192.66368103 -150.75918579]
[183.98127747 -149.15000916]
[180.28709412 -134.61201477]
[176.59291077 -120.07403564]
[172.89872742 -105.53604889]
[169.20454407 -90.99806213]
[165.51036072 -76.46008301]
[161.81617737 -61.92209625]
[158.12199402 -47.38410950]
[154.42781067 -32.84612656]
[155.85652161 -25.45800781]
[150.38604736 -17.91700745]
[146.24153137 -3.50094295]
[142.09700012 10.91512108]
[143.61579895 14.28384495]
[143.46557617 18.58873558]
[141.21025085 22.98179436]
[136.83570862 26.44744110]
[131.36593628 40.41460419]
[125.89616394 54.38176346]
[120.42639160 68.34892273]
[114.95661926 82.31608582]
[109.48684692 96.28324890]
[109.70235443 104.49595642]
[103.62365723 110.59538269]
[97.72215271 124.38568115]
[91.82064819 138.17597961]
[85.91914368 151.96627808]
[93.70117950 165.26086426]
[92.18054199 180.41146851]
[82.14890289 191.62887573]
[67.60961914 194.75093079]
[61.70811081 208.54122925]
[55.80661011 222.33151245]
[49.90510559 236.12181091]
[44.00360107 249.91210938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 12]
[5 11]
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[22 92]
[23 91]
[24 90]
[25 89]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[32 78]
[33 77]
[34 76]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
