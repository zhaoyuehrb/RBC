%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGGUGCUGAGGGCCUGGCUCCUGUGCCUGCUGAUGCUGGGCCUGGCCCUGCGGGGAGCUGCAAGUCGUACCCAUCGGCACUCCAUGGAGAUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[165.81774902 319.09936523]
[160.78498840 304.96884155]
[155.75224304 290.83834839]
[144.87826538 285.29086304]
[140.63111877 273.41708374]
[145.84176636 261.49206543]
[141.25091553 247.21186829]
[136.66004944 232.93167114]
[132.06919861 218.65147400]
[127.47834015 204.37127686]
[122.88748169 190.09107971]
[118.29662323 175.81088257]
[113.70576477 161.53068542]
[108.89337158 147.32362366]
[103.86062622 133.19309998]
[98.82787323 119.06259155]
[85.78390503 112.75377655]
[80.92243195 99.10415649]
[87.04161072 85.97016144]
[82.00885773 71.83964539]
[76.97611237 57.70912933]
[71.94335938 43.57861710]
[66.91061401 29.44810295]
[63.15771866 26.52469444]
[60.87652206 22.88351250]
[60.10744476 19.11742592]
[60.67956543 15.76456833]
[62.25075912 13.23955631]
[59.01049042 -1.40628505]
[55.77022171 -16.05212593]
[45.25526810 -23.71975899]
[42.93223190 -36.11443710]
[49.52244949 -46.38999176]
[46.73923492 -61.12952042]
[43.95601654 -75.86904907]
[29.37206650 -85.37438202]
[26.15063477 -102.14044952]
[35.78749466 -115.82512665]
[32.54722595 -130.47096252]
[29.30695724 -145.11680603]
[18.77125740 -156.91975403]
[23.57655716 -171.01792908]
[20.33629036 -185.66377258]
[17.09602356 -200.30961609]
[13.85575581 -214.95544434]
[4.53063869 -229.11450195]
[15.55489254 -241.99479675]
[30.98364449 -234.96699524]
[28.50159645 -218.19572449]
[31.74186325 -203.54988098]
[34.98213196 -188.90403748]
[38.22239685 -174.25819397]
[48.52633286 -163.50282288]
[43.95280075 -148.35707092]
[47.19306564 -133.71124268]
[50.43333435 -119.06539917]
[62.24315262 -113.66075897]
[68.83402252 -102.24307251]
[67.57092285 -88.92371368]
[58.69554520 -78.65226746]
[61.47876358 -63.91273499]
[64.26197815 -49.17320633]
[76.41159058 -36.61580658]
[70.41606140 -19.29239464]
[73.65633392 -4.64655256]
[76.89659882 9.99928856]
[81.04112244 24.41535378]
[86.07387543 38.54586792]
[91.10662842 52.67638016]
[96.13937378 66.80689240]
[101.17212677 80.93740845]
[114.21609497 87.24622345]
[119.07756805 100.89584351]
[112.95838928 114.02983856]
[117.99114227 128.16035461]
[123.02388763 142.29086304]
[128.95259094 149.47718811]
[127.98595428 156.93983459]
[132.57681274 171.22003174]
[137.16767883 185.50022888]
[141.75852966 199.78042603]
[146.34939575 214.06062317]
[150.94024658 228.34082031]
[155.53111267 242.62101746]
[160.12196350 256.90121460]
[174.03800964 268.83398438]
[169.88275146 285.80557251]
[174.91551208 299.93609619]
[179.94825745 314.06661987]
[185.84976196 327.85690308]
[192.59718323 341.25363159]
[206.59819031 349.79202271]
[205.93379211 366.17770386]
[191.28747559 373.55450439]
[177.72610474 364.33380127]
[179.20045471 348.00106812]
[172.45303345 334.60433960]
[169.63943481 333.64102173]
[167.07666016 331.40469360]
[165.29190063 328.00033569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 76]
[15 75]
[16 74]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[28 66]
[29 65]
[30 64]
[33 62]
[34 61]
[35 60]
[38 56]
[39 55]
[40 54]
[42 52]
[43 51]
[44 50]
[45 49]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
