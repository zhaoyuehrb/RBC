%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCAAGUUCCUGCCAAUCCUCAAUGCAUAACAGAUCUCAAGGCUUUUUUUUCAGUAGUUGCCACCCCCAAAACCAUGUCUCUUAUGGCUGUCAAUCACCGAGCUUUAUUUUUUGUCGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[-19.01707268 411.87179565]
[-23.67515755 426.17907715]
[-30.95697212 439.34616089]
[-40.59928894 450.89700317]
[-52.25353622 460.41409302]
[-65.49842834 467.55337524]
[-79.85516357 472.05679321]
[-94.80476379 473.76150513]
[-109.80680084 472.60592651]
[-124.31896210 468.63180542]
[-137.81665039 461.98281860]
[-149.81192017 452.89932251]
[-159.87115479 441.70968628]
[-167.63073730 428.81838989]
[-172.81013489 414.69143677]
[-175.22212219 399.83953857]
[-174.77952576 384.79959106]
[-171.49832153 370.11523438]
[-165.49714661 356.31732178]
[-156.99291992 343.90463257]
[-146.29307556 333.32589722]
[-133.78439331 324.96350098]
[-119.91906738 319.11978149]
[-105.19831848 316.00592041]
[-90.15428925 315.73455811]
[-75.33081055 318.31546021]
[-61.26374435 323.65530396]
[-53.38612366 310.89038086]
[-56.65020370 301.06344604]
[-53.84948730 290.86520386]
[-45.69048691 283.79397583]
[-34.75924683 282.41546631]
[-26.25021172 270.06246948]
[-17.74117851 257.70950317]
[-9.23214436 245.35650635]
[-0.72310984 233.00350952]
[-7.24461174 219.61189270]
[-6.18033934 204.65451050]
[2.28376508 192.15550232]
[15.95746899 185.52778625]
[31.21220779 186.64141846]
[39.72124100 174.28843689]
[48.23027420 161.93544006]
[56.73931122 149.58245850]
[65.24834442 137.22946167]
[73.75737762 124.87648010]
[82.26641083 112.52349091]
[79.42420197 106.92490387]
[78.30300140 100.74710083]
[78.99659729 94.50681305]
[81.44698334 88.72598267]
[85.44918823 83.88814545]
[90.66846466 80.39794922]
[96.66825867 78.54732513]
[102.94672394 78.49105835]
[108.97872162 80.23385620]
[119.51847076 69.56082153]
[123.70979309 54.30488968]
[138.15797424 50.68559647]
[148.69772339 40.01256180]
[159.23747253 29.33952713]
[169.77722168 18.66649246]
[173.96855164 3.41056299]
[188.41673279 -0.20873117]
[198.95648193 -10.88176632]
[183.95654297 -10.83910561]
[171.10899353 -18.58123589]
[164.13882446 -31.86342812]
[165.06692505 -46.83469009]
[173.62422180 -59.15429688]
[187.32962036 -65.25035095]
[202.20944214 -63.35536957]
[213.94947815 -54.01878738]
[219.14584351 -39.94762039]
[216.29302979 -25.22380638]
[228.75196838 -33.57693863]
[241.21090698 -41.93007278]
[253.66984558 -50.28320694]
[266.12878418 -58.63634491]
[270.63211060 -74.03438568]
[285.53253174 -79.98049927]
[299.39978027 -71.91332245]
[301.59603882 -56.02131653]
[290.43655396 -44.49545670]
[274.48193359 -46.17740631]
[262.02297974 -37.82427216]
[249.56404114 -29.47113609]
[237.10510254 -21.11800194]
[224.64616394 -12.76486778]
[220.44587708 -3.64564300]
[209.62951660 -0.34201679]
[199.08976746 10.33101845]
[195.65231323 24.82353973]
[180.45025635 29.20624161]
[169.91050720 39.87927628]
[159.37075806 50.55231094]
[148.83100891 61.22534561]
[145.39356995 75.71786499]
[130.19151306 80.10057068]
[119.65175629 90.77360535]
[116.72772980 113.83838654]
[94.61940002 121.03252411]
[86.11036682 133.38551331]
[77.60133362 145.73849487]
[69.09230042 158.09149170]
[60.58326340 170.44447327]
[52.07423019 182.79747009]
[43.56519699 195.15045166]
[50.04267502 209.00648499]
[48.72367859 224.14442444]
[40.06219864 236.50747681]
[26.46640205 242.83283997]
[11.62987900 241.51254272]
[3.12084484 253.86553955]
[-5.38818932 266.21853638]
[-13.89722347 278.57150269]
[-22.40625763 290.92449951]
[-22.98587418 311.00030518]
[-40.62120819 318.76800537]
[-48.49882889 331.53292847]
[-37.41839981 341.71234131]
[-28.46489143 353.80496216]
[-21.96197128 367.37362671]
[-18.14471054 381.92782593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 120]
[28 119]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
[56 100]
[57 99]
[59 97]
[60 96]
[61 95]
[62 94]
[64 92]
[65 91]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
