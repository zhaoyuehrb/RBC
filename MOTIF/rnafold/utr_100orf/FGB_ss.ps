%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAUAUAUAGGAUUGAAGAUCUCUCAGUUAAGUCUACAUGAAAAGGAUGGUUUCUUGGAGCUUCCACAAACUUAAAACCAUGAAACAUCUAUUAUUGCUACUAUUGUGUGUUUUUCUAGUUAAGUCCCAAGGUGUCA\
) } def
/len { sequence length } bind def

/coor [
[105.01681519 488.34448242]
[111.06315613 472.50534058]
[111.06315613 457.50534058]
[111.06315613 442.50534058]
[111.06315613 427.50534058]
[111.06315613 412.50534058]
[98.77545929 406.44461060]
[90.27092743 395.61804199]
[87.26374817 382.11511230]
[90.40005493 368.57348633]
[99.12014771 357.66384888]
[111.75733948 351.56311035]
[112.09391022 336.56689453]
[112.43048096 321.57067871]
[112.76705170 306.57443237]
[113.10362244 291.57821655]
[112.43064880 276.59332275]
[110.75118256 261.68765259]
[109.07171631 246.78195190]
[107.39225006 231.87626648]
[105.71277618 216.97058105]
[91.60044098 212.14282227]
[80.93985748 201.62324524]
[75.88311768 187.46025085]
[77.48364258 172.44497681]
[85.47724152 159.56127930]
[98.32393646 151.39282227]
[96.64447021 136.48713684]
[94.96500397 121.58145905]
[93.28553772 106.67578125]
[89.96965027 102.49671173]
[89.27822113 96.74677277]
[91.88060760 91.06573486]
[90.87157440 76.09970856]
[89.86254120 61.13368607]
[76.17749786 54.30237198]
[67.80449677 41.62208557]
[66.90865326 26.55344963]
[73.63058472 13.14928818]
[86.07552338 4.96459675]
[85.06649017 -10.00142670]
[84.05744934 -24.96744919]
[83.04841614 -39.93347168]
[74.38058472 -46.67491913]
[70.96869659 -56.87985992]
[73.72389984 -67.05294037]
[81.48763275 -73.85041046]
[81.15106201 -88.84663391]
[80.81449127 -103.84285736]
[80.47792053 -118.83908081]
[80.14134979 -133.83529663]
[76.79757690 -142.42648315]
[79.96927643 -149.17092896]
[79.96927643 -164.17092896]
[79.96927643 -179.17092896]
[79.96927643 -194.17092896]
[72.23197174 -207.97109985]
[79.96927643 -220.69837952]
[79.96927643 -235.69837952]
[79.96927643 -250.69837952]
[65.52024841 -255.13876343]
[53.02291489 -263.64218140]
[43.58852768 -275.45248413]
[38.05598450 -289.51956177]
[36.91724014 -304.59252930]
[40.27354813 -319.33114624]
[47.82646561 -332.42483521]
[58.90439987 -342.70935059]
[72.52230072 -349.27014160]
[87.46927643 -351.52389526]
[102.41625214 -349.27014160]
[116.03414917 -342.70935059]
[127.11208344 -332.42483521]
[134.66500854 -319.33114624]
[138.02131653 -304.59252930]
[136.88256836 -289.51956177]
[131.35002136 -275.45248413]
[121.91563416 -263.64218140]
[109.41830444 -255.13876343]
[94.96927643 -250.69837952]
[94.96927643 -235.69837952]
[94.96927643 -220.69837952]
[102.70657349 -207.97109985]
[94.96927643 -194.17092896]
[94.96927643 -179.17092896]
[94.96927643 -164.17092896]
[94.96927643 -149.17092896]
[95.13757324 -134.17187500]
[95.47414398 -119.17565155]
[95.81071472 -104.17942810]
[96.14728546 -89.18320465]
[96.48385620 -74.18698120]
[107.75035858 -58.53172684]
[98.01444244 -40.94250870]
[99.02347565 -25.97648430]
[100.03250885 -11.01046181]
[101.04154205 3.95556140]
[114.47251129 10.39565563]
[122.93289185 22.77619743]
[124.06787109 37.82871246]
[117.47276306 51.51817703]
[104.82855988 60.12464905]
[105.83760071 75.09067535]
[106.84663391 90.05669403]
[108.19122314 104.99630737]
[109.87068939 119.90199280]
[111.55015564 134.80767822]
[113.22962189 149.71336365]
[127.57188416 154.81835938]
[138.23194885 165.60028076]
[143.13356018 179.88294983]
[141.35516357 194.81607056]
[133.30268860 207.44410706]
[120.61846161 215.29112244]
[122.29792786 230.19680786]
[123.97739410 245.10249329]
[125.65686035 260.00817871]
[127.33633423 274.91384888]
[137.90664673 264.27108765]
[152.90441895 264.01248169]
[163.83534241 274.28451538]
[164.50848389 289.26940918]
[154.54258728 300.48016357]
[139.58203125 301.56732178]
[128.09983826 291.91479492]
[127.76327515 306.91101074]
[127.42670441 321.90722656]
[127.09013367 336.90347290]
[126.75356293 351.89968872]
[140.94461060 360.30874634]
[148.93403625 374.63311768]
[148.63536072 390.93856812]
[140.22378540 404.80065918]
[126.06315613 412.50534058]
[126.06315613 427.50534058]
[126.06315613 442.50534058]
[126.06315613 457.50534058]
[126.06315613 472.50534058]
[132.10949707 488.34448242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 138]
[3 137]
[4 136]
[5 135]
[6 134]
[12 129]
[13 128]
[14 127]
[15 126]
[16 125]
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[27 108]
[28 107]
[29 106]
[30 105]
[33 104]
[34 103]
[35 102]
[40 97]
[41 96]
[42 95]
[43 94]
[47 92]
[48 91]
[49 90]
[50 89]
[51 88]
[53 87]
[54 86]
[55 85]
[56 84]
[58 82]
[59 81]
[60 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
