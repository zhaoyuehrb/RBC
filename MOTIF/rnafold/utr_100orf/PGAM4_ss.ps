%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGCCUACAAACUGGUGCUGAUCCGGCACGGCGAGAGCACAUGGAACCUGGAGAACCGCUUCAGCUGCUGGUACGACGCCGAUCUGAGCCCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[33.90693283 373.55709839]
[18.72365952 378.73858643]
[5.28414011 369.97738647]
[3.89802051 353.99432373]
[15.62861443 343.05023193]
[17.49009514 328.16619873]
[19.35157776 313.28216553]
[21.21305847 298.39810181]
[23.07453918 283.51406860]
[10.95411301 292.35119629]
[-4.04356670 292.61505127]
[-16.46732330 284.20968628]
[-21.80151939 270.19018555]
[-18.10734558 255.65219116]
[-6.72751617 245.87980652]
[8.20176601 244.42497253]
[21.25418472 251.81648254]
[27.68560982 265.36776733]
[33.15538406 251.40061951]
[32.65457153 243.89230347]
[39.01857376 237.08848572]
[44.92007828 223.29818726]
[50.82158279 209.50788879]
[56.29135513 195.54072571]
[61.32410431 181.41021729]
[66.35685730 167.27969360]
[71.38960266 153.14918518]
[70.65553284 145.66007996]
[76.80485535 138.66162109]
[82.27462769 124.69446564]
[87.74440002 110.72730255]
[84.74369049 94.29740143]
[97.78553772 83.86399078]
[102.81829071 69.73347473]
[107.63067627 55.52640152]
[112.22153473 41.24620438]
[109.07916260 25.74020195]
[120.34045410 15.99172878]
[124.93131256 1.71153235]
[129.29953003 -12.63833332]
[133.44406128 -27.05439758]
[137.58857727 -41.47046280]
[136.22076416 -46.88122940]
[137.09953308 -51.74057007]
[139.59645081 -55.25056076]
[142.84986877 -57.00278091]
[148.31964111 -70.96994019]
[153.78941345 -84.93710327]
[159.25918579 -98.90426636]
[154.24935913 -108.80918121]
[155.59248352 -119.60394287]
[162.58589172 -127.64424133]
[172.66200256 -130.35499573]
[178.98953247 -143.95507812]
[185.31706238 -157.55517578]
[183.33546448 -173.83415222]
[196.60351562 -183.47215271]
[211.47216797 -176.55441284]
[212.64584351 -160.19732666]
[198.91714478 -151.22764587]
[192.58963013 -137.62756348]
[186.26210022 -124.02746582]
[189.53643799 -105.07775879]
[173.22634888 -93.43449402]
[167.75657654 -79.46733093]
[162.28680420 -65.50016785]
[156.81703186 -51.53300858]
[152.00465393 -37.32593536]
[147.86012268 -22.90987206]
[143.71559143 -8.49380779]
[144.91384888 -1.06483114]
[139.21150208 6.30239105]
[134.62065125 20.58258820]
[138.09138489 35.06717300]
[126.50173187 45.83706284]
[121.91087341 60.11725998]
[122.87750244 67.57991028]
[116.94879913 74.76622772]
[111.91605377 88.89673615]
[116.28617096 99.81166077]
[112.16963959 110.82472992]
[101.71156311 116.19707489]
[96.24179077 130.16423035]
[90.77201843 144.13139343]
[85.52011871 158.18193054]
[80.48737335 172.31245422]
[75.45462036 186.44296265]
[70.42186737 200.57347107]
[71.27418518 207.42129517]
[68.79531860 212.78459167]
[64.61187744 215.40939331]
[58.71037292 229.19969177]
[52.80886841 242.98997498]
[47.12254333 256.87039185]
[41.65277100 270.83755493]
[37.95858765 285.37554932]
[36.09710693 300.25958252]
[34.23562622 315.14364624]
[32.37414551 330.02767944]
[30.51266289 344.91171265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[18 95]
[19 94]
[21 93]
[22 92]
[23 91]
[24 88]
[25 87]
[26 86]
[27 85]
[29 84]
[30 83]
[31 82]
[33 79]
[34 78]
[35 76]
[36 75]
[38 73]
[39 72]
[40 70]
[41 69]
[42 68]
[46 67]
[47 66]
[48 65]
[49 64]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
