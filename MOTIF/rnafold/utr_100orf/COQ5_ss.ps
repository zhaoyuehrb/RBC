%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUCACUCGACUACCAAGAUGGCGGCCCCCGGGAGCUGUGCUCUAUGGAGCUAUUGCGGCCGUGGGUGGUCGCGGGCGAUGCGGGGCUGCCAGCUCCUCGGGCUUCGUAGCUCUUGGC\
) } def
/len { sequence length } bind def

/coor [
[-21.36943626 471.23873901]
[-26.70251083 485.25866699]
[-32.03558731 499.27859497]
[-37.36866379 513.29852295]
[-32.13722610 528.46466064]
[-40.85414886 541.93292236]
[-56.83256149 543.37164307]
[-67.81518555 531.67718506]
[-65.37709808 515.82043457]
[-51.38858795 507.96542358]
[-46.05551147 493.94552612]
[-40.72243500 479.92559814]
[-35.38935852 465.90567017]
[-41.70402908 452.46466064]
[-36.49525070 438.17050171]
[-22.35427666 431.63821411]
[-17.02120018 417.61828613]
[-11.68812466 403.59835815]
[-6.35504818 389.57843018]
[-1.02197194 375.55853271]
[4.31110430 361.53860474]
[-3.23269367 346.56896973]
[2.44064665 330.43841553]
[18.30602264 323.20788574]
[23.27333450 309.05426025]
[28.24064636 294.90060425]
[33.20795822 280.74694824]
[26.54648018 267.47439575]
[31.38241768 253.04983521]
[45.34904480 246.15264893]
[50.31635666 231.99900818]
[55.28366852 217.84535217]
[60.25098038 203.69169617]
[65.03414154 189.47476196]
[69.63233948 175.19692993]
[74.23053741 160.91909790]
[78.82874298 146.64126587]
[83.42694092 132.36341858]
[88.02513885 118.08559418]
[92.62334442 103.80775452]
[76.78278351 103.57833099]
[61.88077164 93.43013763]
[52.50669098 81.72003174]
[43.13261032 70.00992584]
[33.75852966 58.29981613]
[18.29348183 52.84415054]
[15.55210209 36.67575836]
[28.35448837 26.42729759]
[43.53064346 32.64150238]
[45.46863937 48.92573547]
[54.84272003 60.63584518]
[64.21679688 72.34595490]
[73.59088135 84.05606079]
[81.08518982 84.34807587]
[81.66947174 69.35945892]
[96.65808105 69.94399261]
[96.07381439 84.93210602]
[103.56813049 85.22412109]
[113.82497406 74.27893829]
[124.08181763 63.33375168]
[134.33866882 52.38856125]
[144.59550476 41.44337463]
[154.85235596 30.49818802]
[158.64302063 15.13780308]
[172.99154663 11.14166355]
[183.24839783 0.19647646]
[187.03906250 -15.16390800]
[201.38758850 -19.16004753]
[211.64442444 -30.10523415]
[215.43510437 -45.46561813]
[229.78363037 -49.46175766]
[240.04046631 -60.40694427]
[250.29731750 -71.35213470]
[256.71606445 -87.04404449]
[273.57162476 -85.22009277]
[276.48501587 -68.51834869]
[261.24249268 -61.09528732]
[250.98565674 -50.15010071]
[240.72880554 -39.20491409]
[237.67178345 -24.62740135]
[222.58961487 -19.84838867]
[212.33277893 -8.90320206]
[209.27574158 5.67430925]
[194.19358826 10.45332146]
[183.93673706 21.39850807]
[180.87969971 35.97602081]
[165.79754639 40.75503159]
[155.54069519 51.70021820]
[145.28385925 62.64540863]
[135.02700806 73.59059143]
[124.77016449 84.53578186]
[114.51332092 95.48097229]
[106.90117645 108.40596008]
[102.30297852 122.68379211]
[97.70477295 136.96162415]
[93.10657501 151.23945618]
[88.50837708 165.51728821]
[83.91017151 179.79513550]
[79.31197357 194.07296753]
[79.65191650 203.32521057]
[74.40463257 208.65901184]
[69.43731689 222.81266785]
[64.47000885 236.96630859]
[59.50269318 251.11996460]
[66.09575653 265.23269653]
[60.85657501 279.51574707]
[47.36161041 285.71426392]
[42.39429855 299.86791992]
[37.42698288 314.02154541]
[32.45967102 328.17520142]
[39.67787552 339.63232422]
[38.95072556 352.95849609]
[30.77163887 363.25616455]
[18.33102989 366.87167358]
[12.99795341 380.89160156]
[7.66487694 394.91152954]
[2.33180046 408.93145752]
[-3.00127578 422.95138550]
[-8.33435154 436.97128296]
[-2.10988426 451.25042725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[16 119]
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[24 110]
[25 109]
[26 108]
[27 107]
[30 104]
[31 103]
[32 102]
[33 101]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[39 94]
[40 93]
[42 53]
[43 52]
[44 51]
[45 50]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[65 85]
[66 84]
[68 82]
[69 81]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
