%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCCAACCGCCUCGUCGCACUCCUCAGGCUGAGAGCACCGCUGCACUCGCGGCCGGCGAUGCGGGACCCCGGCGCGGCCGCUCCGCUUUCGUCCCUGGGCCUCUGUGCCCUGGUGCUGGCGCUGCUGGGCGCACUGUCCGCGGGCGCCGGGGCGCAGC\
) } def
/len { sequence length } bind def

/coor [
[187.14404297 181.26232910]
[176.97439575 176.12692261]
[169.43957520 167.51316833]
[165.66893005 156.65347290]
[166.24951172 145.12089539]
[153.11613464 137.87420654]
[139.98275757 130.62751770]
[126.84938812 123.38082886]
[115.37569427 132.11137390]
[101.38050842 135.57592773]
[87.15893555 133.20631409]
[75.04319000 125.39114380]
[62.51087189 133.63377380]
[50.05906677 141.99754333]
[37.68894196 150.48164368]
[25.31881523 158.96574402]
[13.03153419 167.56939697]
[0.82825333 176.29177856]
[-11.37502766 185.01416016]
[-9.80827999 200.29292297]
[-16.10546303 214.30152893]
[-28.57266426 223.27172852]
[-43.85627365 224.79057312]
[-57.84507370 218.44952393]
[-66.77614594 205.95425415]
[-68.24707794 190.66596985]
[-61.86220169 176.69711304]
[-49.33901215 167.80525208]
[-34.04618073 166.38224792]
[-20.09740829 172.81088257]
[-7.89412785 164.08850098]
[4.30915308 155.36611938]
[7.94011927 148.88629150]
[16.83471107 146.59562683]
[29.20483780 138.11152649]
[41.57496262 129.62741089]
[45.33089828 123.21921539]
[54.26823807 121.10146332]
[66.80055237 112.85882568]
[65.44278717 108.56455231]
[64.63802338 104.13322449]
[64.39915466 99.63574982]
[64.73000336 95.14410400]
[50.63460922 90.01380157]
[36.53922272 84.88349915]
[22.44383240 79.75319672]
[8.34844208 74.62289429]
[-7.69881344 78.00189209]
[-18.44582367 65.61505127]
[-12.83698463 50.20489120]
[3.35781050 47.62406540]
[13.47874451 60.52750397]
[27.57413483 65.65780640]
[41.66952515 70.78810883]
[55.76491165 75.91841125]
[69.86029816 81.04871368]
[77.38053894 72.50613403]
[87.21224213 66.77311707]
[84.89445496 51.95326996]
[82.57667542 37.13341904]
[80.25889587 22.31357193]
[77.94110870 7.49372482]
[66.04959869 -6.53607845]
[72.94467163 -22.65095901]
[70.33995056 -37.42307281]
[67.73522949 -52.19519043]
[65.13050079 -66.96730804]
[62.52578354 -81.73942566]
[54.07370377 -86.11302185]
[48.68585968 -93.78948975]
[47.48193359 -102.95120239]
[50.60886002 -111.49965668]
[57.23610306 -117.53614044]
[55.49470901 -132.43470764]
[53.75331497 -147.33328247]
[52.01192093 -162.23185730]
[44.16765594 -177.26196289]
[56.43885803 -188.96041870]
[71.07714081 -180.40722656]
[66.91049957 -163.97325134]
[68.65189362 -149.07467651]
[70.39328766 -134.17610168]
[72.13468170 -119.27753448]
[85.90073395 -103.93573761]
[77.29789734 -84.34414673]
[79.90261841 -69.57202911]
[82.50734711 -54.79991531]
[85.11206818 -40.02779770]
[87.71678925 -25.25568008]
[97.46214294 -18.03757477]
[99.72987366 -5.71568060]
[92.76095581 5.17594337]
[95.07874298 19.99579048]
[97.39652252 34.81563950]
[99.71430206 49.63548660]
[102.03208923 64.45533752]
[121.80020142 71.85210419]
[133.90647888 89.14166260]
[134.09606934 110.24745178]
[147.22944641 117.49414062]
[160.36282349 124.74082947]
[173.49620056 131.98751831]
[190.40190125 123.12602234]
[209.09527588 126.16149139]
[222.12152100 139.70199585]
[224.39485168 158.20271301]
[237.92736816 164.67350769]
[251.45988464 171.14430237]
[264.99240112 177.61509705]
[278.52490234 184.08587646]
[292.05740356 190.55667114]
[305.58993530 197.02746582]
[319.12243652 203.49826050]
[332.65493774 209.96903992]
[346.18746948 216.43983459]
[359.71997070 222.91062927]
[373.25247192 229.38142395]
[386.78500366 235.85220337]
[400.31750488 242.32299805]
[413.85000610 248.79379272]
[429.63784790 247.76664734]
[437.78219604 260.23736572]
[451.31472778 266.70816040]
[447.67172241 252.15725708]
[455.23028564 239.20085144]
[469.68981934 235.21066284]
[482.82339478 242.45697021]
[487.15847778 256.81689453]
[480.22857666 270.12011719]
[465.97537231 274.79754639]
[478.66516113 282.79562378]
[491.35494995 290.79370117]
[504.04476929 298.79174805]
[519.94555664 296.66006470]
[531.42596436 307.86627197]
[529.67926025 323.81393433]
[516.04528809 332.26940918]
[500.98291016 326.74630737]
[496.04669189 311.48156738]
[483.35690308 303.48348999]
[470.66711426 295.48541260]
[457.97729492 287.48736572]
[444.84393311 280.24066162]
[431.31143188 273.76986694]
[416.49151611 275.25985718]
[407.37921143 262.32629395]
[393.84671021 255.85551453]
[380.31420898 249.38471985]
[366.78167725 242.91392517]
[353.24917603 236.44314575]
[339.71667480 229.97235107]
[326.18414307 223.50155640]
[312.65164185 217.03076172]
[299.11914062 210.55998230]
[285.58660889 204.08918762]
[272.05410767 197.61839294]
[258.52160645 191.14759827]
[244.98908997 184.67681885]
[231.45657349 178.20602417]
[217.92405701 171.73522949]
[209.22706604 178.85289001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 102]
[6 101]
[7 100]
[8 99]
[12 39]
[13 38]
[14 36]
[15 35]
[16 34]
[17 32]
[18 31]
[19 30]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[58 96]
[59 95]
[60 94]
[61 93]
[62 92]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[73 83]
[74 82]
[75 81]
[76 80]
[106 160]
[107 159]
[108 158]
[109 157]
[110 156]
[111 155]
[112 154]
[113 153]
[114 152]
[115 151]
[116 150]
[117 149]
[118 148]
[119 147]
[120 146]
[122 144]
[123 143]
[130 142]
[131 141]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
