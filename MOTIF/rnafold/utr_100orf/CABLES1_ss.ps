%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCGGCGGCGGCGGCCGCCACCACGGCCGCCUGCAGCAGCGGCAGCGCCGGCACCGACGCCGCGGGCGCCAGCGGAUUGCAGCAGCCGCCGCCGC\
) } def
/len { sequence length } bind def

/coor [
[97.39642334 297.43441772]
[81.06862640 295.90634155]
[74.47490692 280.89120483]
[84.39833069 267.83523560]
[85.79602051 252.90051270]
[87.19371033 237.96577454]
[88.59140015 223.03102112]
[89.98908234 208.09628296]
[91.38677216 193.16154480]
[92.78446198 178.22680664]
[94.18215179 163.29206848]
[95.57984161 148.35733032]
[96.97753143 133.42259216]
[98.37522125 118.48784637]
[88.36139679 107.31988525]
[73.36321259 107.08660889]
[58.36502457 106.85333252]
[43.36684036 106.62005615]
[28.36865425 106.38677216]
[13.37046814 106.15349579]
[-1.62771761 105.92021942]
[-16.62590408 105.68694305]
[-27.79779434 116.86569214]
[-43.60188675 116.78699493]
[-54.66189575 105.49753571]
[-54.41610718 89.69515991]
[-43.01035309 78.75512695]
[-27.21145630 79.16797638]
[-16.39262581 90.68875885]
[-1.39444041 90.92203522]
[13.60374546 91.15531158]
[28.60193062 91.38858795]
[43.60011673 91.62186432]
[58.59830475 91.85514069]
[73.59648895 92.08841705]
[88.59467316 92.32170105]
[102.47508240 86.63536835]
[112.99888611 75.94660950]
[123.52268982 65.25785065]
[127.69123077 49.99568176]
[142.13398743 46.35482025]
[152.65779114 35.66606140]
[163.18159485 24.97730255]
[173.70539856 14.28854275]
[173.20187378 -3.11230397]
[185.14093018 -15.31630516]
[201.87788391 -15.19915295]
[212.06417847 -26.21003151]
[215.62687683 -44.19208527]
[232.45210266 -48.90514374]
[242.29103088 -60.22748566]
[252.12995911 -71.54983521]
[261.96890259 -82.87217712]
[271.80783081 -94.19451904]
[275.01947021 -109.68632507]
[289.20794678 -114.21804047]
[299.04687500 -125.54039001]
[294.62280273 -140.31980896]
[298.91336060 -155.13853455]
[310.54940796 -165.26797485]
[325.81796265 -167.47584534]
[339.84686279 -161.05764771]
[348.15954590 -148.06138611]
[348.10345459 -132.63412476]
[339.69650269 -119.69864655]
[325.62130737 -113.38261414]
[310.36920166 -115.70146179]
[300.53027344 -104.37911224]
[298.02239990 -89.69715881]
[283.13015747 -84.35559082]
[273.29122925 -73.03324890]
[263.45230103 -61.71090317]
[253.61338806 -50.38855743]
[243.77445984 -39.06621552]
[244.28074646 -26.86942673]
[236.02207947 -17.33952522]
[223.07505798 -16.02373886]
[212.88876343 -5.01286030]
[215.18017578 7.77116919]
[209.55615234 19.69482040]
[197.89266968 26.24949074]
[184.39416504 24.81234550]
[173.87036133 35.50110626]
[163.34655762 46.18986511]
[152.82275391 56.87862396]
[149.40693665 71.37625885]
[134.21144104 75.78165436]
[123.68764496 86.47041321]
[113.16384125 97.15917206]
[113.30995941 119.88553619]
[111.91226959 134.82028198]
[110.51457977 149.75502014]
[109.11688995 164.68975830]
[107.71920776 179.62449646]
[106.32151794 194.55923462]
[104.92382812 209.49397278]
[103.52613831 224.42871094]
[102.12844849 239.36344910]
[100.73075867 254.29820251]
[99.33306885 269.23294067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[14 90]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[37 89]
[38 88]
[39 87]
[41 85]
[42 84]
[43 83]
[44 82]
[47 78]
[48 77]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[56 68]
[57 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
