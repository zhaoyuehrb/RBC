%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACGGCAAGUCGGAGGUAGCAAGAUGGCCGCCGCUGAGGAAGGCUGUAGUGUCGGGGCCGAAGCGGACAGGGAAUUGGAGGAGCUUCUGGAAAGUGCUCUUGAUGAUUUCGAUAAAGCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[19.09477615 235.60656738]
[12.02382374 248.83538818]
[4.95287323 262.06420898]
[-2.11807799 275.29302979]
[-1.79974449 291.11102295]
[-14.62302876 298.68814087]
[-21.69397926 311.91696167]
[-18.43162537 327.62481689]
[-28.78892899 339.87658691]
[-44.82065201 339.27374268]
[-54.22863007 326.27877808]
[-49.79586792 310.86026001]
[-34.92279816 304.84600830]
[-27.85184669 291.61718750]
[-28.67594337 276.74539185]
[-15.34689713 268.22207642]
[-8.27594566 254.99325562]
[-1.20499480 241.76443481]
[5.86595631 228.53561401]
[-1.36961401 220.64263916]
[-6.08878231 211.00743103]
[-7.89597893 200.41038513]
[-6.63202143 189.71353149]
[-2.38805652 179.79048157]
[4.50089979 171.45507812]
[13.48237991 165.39462280]
[23.83075714 162.11320496]
[34.70586395 161.88984680]
[45.22121429 164.75473022]
[53.85833359 152.49095154]
[62.49545670 140.22718811]
[71.13258362 127.96341705]
[60.96268082 109.55867004]
[61.47872543 88.53736877]
[72.53945160 70.65380859]
[64.51448822 57.98100662]
[56.48952484 45.30820465]
[48.46456146 32.63540268]
[40.43959427 19.96259689]
[25.27909851 16.38529778]
[17.32117271 3.41895366]
[20.82501030 -11.01221752]
[12.80004597 -23.68502045]
[-5.76033306 -27.04481506]
[-15.89101887 -42.57884598]
[-11.62981510 -60.30285263]
[-20.26693726 -72.56662750]
[-28.90406036 -84.83039856]
[-44.51656342 -87.28504944]
[-53.75290680 -100.10945892]
[-51.13333130 -115.69513702]
[-38.21198273 -124.79537201]
[-22.65487289 -122.01116180]
[-13.69175434 -108.99432373]
[-16.64028931 -93.46752167]
[-8.00316620 -81.20375061]
[0.63395691 -68.93997955]
[12.15403748 -69.46107483]
[22.58101845 -64.25947571]
[29.22977066 -54.54368973]
[30.32478142 -42.70071030]
[25.47284889 -31.70998573]
[33.49781418 -19.03718185]
[48.04152298 -16.03449249]
[56.36050415 -3.29678702]
[53.11240005 11.93763351]
[61.13736343 24.61043739]
[69.16233063 37.28324127]
[77.18729401 49.95604324]
[85.21225739 62.62884521]
[98.41111755 59.84086990]
[111.78898621 61.57734680]
[123.83866882 67.64264679]
[133.20260620 77.35343170]
[138.82583618 89.61565399]
[153.78520203 88.51219177]
[168.74455261 87.40872192]
[183.70390320 86.30525208]
[198.66326904 85.20178223]
[213.62261963 84.09831238]
[228.58198547 82.99485016]
[243.49809265 72.28083801]
[259.00637817 80.39740753]
[273.93414307 78.92714691]
[288.86193848 77.45689392]
[303.78970337 75.98663330]
[318.71746826 74.51638031]
[333.64523315 73.04611969]
[342.47335815 63.54829407]
[355.00836182 62.68389511]
[364.43258667 70.37232208]
[379.39193726 69.26885223]
[392.64068604 59.60432434]
[407.52313232 66.49229431]
[408.72955322 82.84700775]
[395.01882935 91.84413910]
[380.49539185 84.22821045]
[365.53604126 85.33168030]
[351.64370728 95.98007202]
[335.11550903 87.97389221]
[320.18771362 89.44414520]
[305.25994873 90.91440582]
[290.33218384 92.38465881]
[275.40441895 93.85491943]
[260.47665405 95.32517242]
[252.50559998 104.51158905]
[240.00735474 105.80292511]
[229.68545532 97.95420074]
[214.72608948 99.05767059]
[199.76673889 100.16114044]
[184.80737305 101.26461029]
[169.84802246 102.36808014]
[154.88867188 103.47154236]
[139.92930603 104.57501221]
[137.27830505 115.02024841]
[131.94718933 124.38560486]
[124.31921387 131.99775696]
[114.94281006 137.30941772]
[104.49209595 139.93872070]
[93.71841431 139.69662476]
[83.39635468 136.60054016]
[74.75923157 148.86430359]
[66.12210846 161.12808228]
[57.48498535 173.39186096]
[66.78688049 190.81556702]
[66.12591553 210.47869873]
[55.75646210 227.10774231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[6 14]
[7 13]
[29 124]
[30 123]
[31 122]
[32 121]
[35 70]
[36 69]
[37 68]
[38 67]
[39 66]
[42 63]
[43 62]
[46 57]
[47 56]
[48 55]
[75 114]
[76 113]
[77 112]
[78 111]
[79 110]
[80 109]
[81 108]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
