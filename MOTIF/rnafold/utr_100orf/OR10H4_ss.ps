%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUAGUCAGAACUAUAGCAUCAUAUCUGAAUUUAACCUCUUUGGCUUCUCAGCCUUCCCCCAGCACCUCCUGCCCAUCUUGUUCCUGCUGUACCUCC\
) } def
/len { sequence length } bind def

/coor [
[74.48799133 295.85278320]
[68.35793304 309.79342651]
[57.08329391 320.03076172]
[42.61748505 324.79101562]
[27.46678734 323.24951172]
[14.25615215 315.67330933]
[5.27440262 303.37500000]
[2.07768154 288.48538208]
[5.21983957 273.58413696]
[14.15647888 261.25302124]
[27.33927155 253.62847900]
[42.48422241 252.03147888]
[47.07508087 237.75128174]
[40.06455231 224.65975952]
[44.51690674 210.11221313]
[58.29603958 202.84768677]
[62.88689804 188.56748962]
[67.47775269 174.28729248]
[72.06861877 160.00709534]
[76.65947723 145.72689819]
[81.25033569 131.44670105]
[85.84119415 117.16650391]
[77.87482452 104.45678711]
[63.02152634 102.36405945]
[48.16822815 100.27132416]
[33.17188263 106.90771484]
[20.08776665 97.02146149]
[22.37569809 80.78269958]
[37.68204880 74.89646912]
[50.26095581 85.41802979]
[65.11425781 87.51075745]
[79.96755219 89.60348511]
[85.77898407 84.86246490]
[73.74729919 75.90486908]
[61.71560669 66.94727325]
[47.28926468 62.83867264]
[37.96817017 51.08634567]
[37.25249863 36.10342789]
[45.41099930 23.51617622]
[59.38005447 18.05124474]
[73.91413116 21.76078033]
[83.55551147 33.25180817]
[84.68366241 48.20969772]
[91.04275513 61.79505920]
[97.40184021 75.38041687]
[103.21326447 70.63939667]
[104.14581299 55.66841125]
[105.07835388 40.69742584]
[106.01090240 25.72644234]
[98.22959900 11.29095459]
[107.06954956 -2.52162218]
[123.43697357 -1.50209308]
[130.49446106 13.30073833]
[120.98188782 26.65898705]
[120.04933929 41.62997055]
[119.11679840 56.60095596]
[118.18424988 71.57193756]
[124.06871033 76.22200775]
[132.06455994 63.53082275]
[135.42796326 48.91276550]
[149.57958984 43.93969727]
[161.34826660 53.24014282]
[159.78067017 68.15800476]
[146.33657837 74.80899048]
[135.83761597 85.52215576]
[141.72207642 90.17222595]
[156.07194519 85.80400848]
[170.42181396 81.43578339]
[179.20906067 68.01327515]
[195.19477844 66.65814972]
[206.11608887 78.40993500]
[203.59509277 94.25367737]
[189.56568909 102.03540802]
[174.79003906 95.78565216]
[160.44017029 100.15386963]
[146.09030151 104.52209473]
[160.77772522 107.56830597]
[172.01792908 117.50098419]
[178.62658691 130.96670532]
[179.60700989 145.93463135]
[174.81134033 160.14735413]
[164.96284485 171.46136475]
[151.54681396 178.17034912]
[136.58662415 179.26246643]
[122.33850098 174.57299805]
[110.95129395 164.80921936]
[104.14237213 151.44364929]
[102.93881989 136.49038696]
[100.12139130 121.75736237]
[95.53053284 136.03756714]
[90.93967438 150.31776428]
[86.34880829 164.59796143]
[81.75794983 178.87815857]
[77.16709137 193.15835571]
[72.57623291 207.43855286]
[79.54061890 221.37178040]
[74.68141174 235.78852844]
[61.35527802 242.34214783]
[56.76441956 256.62234497]
[68.14144897 266.74572754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 99]
[13 98]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 32]
[24 31]
[25 30]
[46 57]
[47 56]
[48 55]
[49 54]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
