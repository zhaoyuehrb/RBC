%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUCGGCGCCCUGCUCGCCGGGCAGAGGGGAAGGCGGCGGCCGGCUGGGGAUGGGCGGCCCGGCUGCGCCGAGGGGCGCCGGGAGGCUCCGCGCGCUGCUGCUGGCGCUGGUGGUCGCGGGGAUCCCCGCGGGCGCCUACAACCUCGACC\
) } def
/len { sequence length } bind def

/coor [
[188.12800598 181.87820435]
[202.97634888 183.98924255]
[191.84284973 173.93713379]
[180.70933533 163.88502502]
[169.57582092 153.83291626]
[162.46067810 151.67176819]
[158.32040405 143.46040344]
[147.39425659 133.18327332]
[136.46810913 122.90615082]
[125.54196167 112.62902832]
[106.62724304 131.23124695]
[77.39936066 127.19415283]
[65.86510468 136.78376770]
[54.42926025 146.49055481]
[43.09301758 156.31346130]
[31.75677299 166.13636780]
[20.42053032 175.95927429]
[9.08428574 185.78219604]
[-2.25195765 195.60510254]
[-10.26286507 210.54704285]
[-26.83851242 206.98554993]
[-28.00479698 190.07176208]
[-12.07486916 184.26885986]
[-0.73862517 174.44595337]
[10.59761810 164.62303162]
[21.93386269 154.80012512]
[33.27010727 144.97721863]
[44.60634995 135.15429688]
[47.62005234 128.35626221]
[56.27548218 125.24951935]
[67.80973816 115.65988922]
[67.65675354 108.16145325]
[52.65986633 108.46718597]
[52.35438538 93.47029114]
[67.35076904 93.16457367]
[67.19778442 85.66613770]
[55.28197861 76.55495453]
[43.36616898 67.44377899]
[31.45036507 58.33259964]
[22.67541885 55.58148575]
[19.38694191 48.91202545]
[7.65946865 39.55967712]
[-4.06800365 30.20733070]
[-15.79547596 20.85498428]
[-27.52294731 11.50263691]
[-39.25041962 2.15028954]
[-50.97789383 -7.20205736]
[-62.80014801 -16.43429947]
[-74.71595001 -25.54547882]
[-86.63175964 -34.65665436]
[-101.46329498 -30.09539413]
[-116.13236237 -35.15485382]
[-124.99839783 -47.88956833]
[-124.65223694 -63.40278244]
[-115.22698212 -75.72934723]
[-100.34683990 -80.12944794]
[-85.73352051 -74.91115570]
[-77.00614929 -62.08100891]
[-77.52058411 -46.57246017]
[-65.60477448 -37.46128464]
[-53.68896866 -28.35010719]
[-46.42134857 -26.77609444]
[-41.62554550 -18.92952919]
[-29.89807320 -9.57718277]
[-18.17060089 -0.22483565]
[-6.44312859 9.12751102]
[5.28434372 18.47985840]
[17.01181602 27.83220482]
[28.73928833 37.18455124]
[40.56154251 46.41679382]
[52.47734833 55.52797318]
[64.39315796 64.63915253]
[76.30895996 73.75032806]
[100.81398010 68.08372498]
[120.14411926 79.84811401]
[127.19819641 66.61029053]
[126.85969543 50.79270554]
[139.67330933 43.19924927]
[146.72738647 29.96142578]
[153.78146362 16.72360229]
[160.83554077 3.48577833]
[167.88961792 -9.75204563]
[174.80831909 -23.06113052]
[181.59089661 -36.44009399]
[188.37347412 -49.81905365]
[195.15605164 -63.19801712]
[193.72457886 -79.53456879]
[207.31010437 -88.71962738]
[221.93701172 -81.30439758]
[222.55838013 -64.91702271]
[208.53500366 -56.41543961]
[201.75242615 -43.03647614]
[194.96984863 -29.65751457]
[188.18727112 -16.27855110]
[187.96656799 -8.84571362]
[181.12744141 -2.69796681]
[174.07336426 10.53985691]
[167.01928711 23.77768135]
[159.96520996 37.01550293]
[152.91113281 50.25332642]
[153.75419617 65.12405396]
[140.43601990 73.66436768]
[133.38194275 86.90219116]
[135.81909180 101.70288086]
[146.74523926 111.98000336]
[157.67138672 122.25713348]
[168.59751892 132.53425598]
[179.62792969 142.69940186]
[190.76144409 152.75151062]
[201.89495850 162.80361938]
[213.02845764 172.85572815]
[223.20970154 175.18450928]
[228.16073608 183.02270508]
[241.67527771 189.53096008]
[255.18980408 196.03921509]
[268.70434570 202.54747009]
[284.49496460 201.56408691]
[292.60473633 214.05729675]
[306.11926270 220.56555176]
[319.63381958 227.07382202]
[333.14834595 233.58207703]
[346.66287231 240.09033203]
[360.17739868 246.59858704]
[373.69192505 253.10684204]
[389.99588013 251.34242249]
[399.45617676 264.73776245]
[392.34085083 279.51287842]
[375.96954346 280.46841431]
[367.18368530 266.62136841]
[353.66915894 260.11312866]
[340.15460205 253.60485840]
[326.64007568 247.09660339]
[313.12554932 240.58834839]
[299.61102295 234.08009338]
[286.09649658 227.57183838]
[271.27252197 229.02075195]
[262.19607544 216.06201172]
[248.68154907 209.55375671]
[235.16702271 203.04550171]
[221.65248108 196.53724670]
[229.21992493 209.48844910]
[231.75718689 224.27230835]
[228.94108582 239.00558472]
[221.13034058 251.81152344]
[209.31988525 261.05886841]
[195.01419067 265.56967163]
[180.03556824 264.76928711]
[166.29200745 258.75973511]
[155.53424072 248.30650330]
[149.13258362 234.74114990]
[147.90254211 219.79167175]
[152.00076294 205.36236572]
[160.90522766 193.29130554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[5 108]
[7 107]
[8 106]
[9 105]
[10 104]
[12 31]
[13 30]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[36 73]
[37 72]
[38 71]
[39 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 61]
[49 60]
[50 59]
[75 103]
[76 102]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[83 94]
[84 93]
[85 92]
[86 91]
[113 140]
[114 139]
[115 138]
[116 137]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
