%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUCUCUCCACUUCCUGCUACUGCAGGCCUCUCCUCCGAGAACAGAGGCCAGGUCAUGACUCACUGGCUUCCUGCAACCUGACGAUGGCCCAGCCAGAAGACAAGGCACCUGAAGUCCCCACAGAGGGGGUGAGGCUGGUCCCACCACAGGUGAACAAAGCAGACAGGACCCCUCUAGGGGUCC\
) } def
/len { sequence length } bind def

/coor [
[124.05516052 170.33154297]
[121.33285522 185.08244324]
[118.61054230 199.83334351]
[115.88823700 214.58424377]
[113.16592407 229.33514404]
[117.12271118 243.80386353]
[109.13309479 256.49899292]
[94.37655640 259.19055176]
[82.41941071 250.13369751]
[81.01319885 235.19975281]
[91.07062531 224.06956482]
[95.29371643 209.67631531]
[99.51680756 195.28308105]
[103.73990631 180.88983154]
[107.96299744 166.49658203]
[112.18608856 152.10334778]
[104.89039612 150.36470032]
[94.28379822 160.97129822]
[83.67719269 171.57789612]
[73.07059479 182.18449402]
[62.46399307 192.79110718]
[58.74454117 208.76287842]
[42.97636795 213.26806641]
[31.38041878 201.67211914]
[35.88561249 185.90394592]
[51.85739136 182.18449402]
[62.46399307 171.57789612]
[73.07059479 160.97129822]
[83.67719269 150.36470032]
[94.28379822 139.75808716]
[90.46166992 133.30508423]
[82.81742096 120.39905548]
[78.99530029 113.94604492]
[64.59650421 118.15016174]
[50.19770432 122.35428619]
[35.79890442 126.55840302]
[24.86138535 138.77734375]
[8.86837387 135.15028381]
[4.27210951 119.40841675]
[15.80083466 107.74563599]
[31.59478569 112.15960693]
[45.99358368 107.95548248]
[60.39237976 103.75136566]
[74.79117584 99.54724884]
[75.47952271 92.07890320]
[63.23213196 83.41856384]
[76.85620880 77.14221191]
[77.54454803 69.67386627]
[64.15676880 62.90871048]
[50.76898193 56.14356232]
[37.38119888 49.37841034]
[23.99341774 42.61325836]
[10.60563564 35.84810638]
[-2.78214717 29.08295250]
[-16.16992950 22.31780243]
[-28.59336281 31.25742722]
[-43.74983597 33.38813019]
[-58.15650177 28.22029305]
[-68.50281525 16.94144821]
[-72.41127014 2.14338779]
[-68.98372650 -12.77340031]
[-59.00782013 -24.38114548]
[-44.77592850 -30.01247597]
[-29.55844307 -28.37335205]
[-16.85223007 -19.84043312]
[-9.57708263 -6.37451935]
[-9.40477753 8.93001938]
[3.98300457 15.69517040]
[17.37078667 22.46032333]
[30.75856972 29.22547531]
[44.14635086 35.99062729]
[57.53413391 42.75577927]
[70.92192078 49.52093124]
[84.30970001 56.28608322]
[99.22129822 54.65999985]
[110.83631134 45.16834259]
[122.45131683 35.67668533]
[134.06632996 26.18502426]
[130.63734436 5.02622509]
[142.23329163 -14.32658958]
[164.63612366 -22.02104759]
[165.13734436 -37.01266861]
[165.63858032 -52.00429535]
[150.29042053 -59.66810608]
[139.86187744 -73.21992493]
[136.40742493 -89.91082001]
[140.57302856 -106.38157654]
[151.47596741 -119.33876801]
[166.89138794 -126.21328735]
[166.89138794 -141.21328735]
[166.89138794 -156.21328735]
[166.89138794 -171.21328735]
[160.84504700 -187.05241394]
[174.39138794 -197.24717712]
[187.93772888 -187.05241394]
[181.89138794 -171.21328735]
[181.89138794 -156.21328735]
[181.89138794 -141.21328735]
[181.89138794 -126.21328735]
[194.03480530 -121.54089355]
[203.88786316 -112.99432373]
[210.26039124 -101.57711792]
[212.37286377 -88.64127350]
[209.95170593 -75.72710419]
[203.26448059 -64.37986755]
[193.09053040 -55.96483612]
[180.63020325 -51.50307083]
[180.12896729 -36.51144409]
[179.62774658 -21.51982307]
[191.39973450 -12.22357368]
[205.86677551 -16.18650436]
[220.33381653 -20.14943504]
[234.80085754 -24.11236763]
[249.26788330 -28.07529831]
[263.73492432 -32.03822708]
[264.33642578 -40.36849594]
[267.93161011 -48.38936615]
[274.35513306 -55.01464844]
[283.04711914 -59.24483109]
[293.09658813 -60.30962753]
[303.33605957 -57.78946304]
[316.49032593 -64.99819183]
[329.64456177 -72.20691681]
[335.50317383 -87.14198303]
[350.87454224 -91.73553467]
[363.96707153 -82.46379089]
[364.73730469 -66.43923950]
[352.59436035 -55.95454407]
[336.85330200 -59.05266953]
[323.69903564 -51.84394073]
[310.54479980 -44.63521576]
[314.38671875 -30.13557243]
[329.38461304 -30.38621902]
[344.38253784 -30.63686562]
[359.38043213 -30.88751411]
[367.92834473 -34.16522217]
[374.63055420 -31.01493645]
[389.63055420 -31.01493645]
[401.94577026 -41.29670334]
[417.63327026 -37.93782425]
[424.65893555 -23.51493645]
[417.63327026 -9.09204865]
[401.94577026 -5.73316669]
[389.63055420 -16.01493645]
[374.63055420 -16.01493645]
[359.63107300 -15.88960743]
[344.63317871 -15.63896084]
[329.63525391 -15.38831329]
[314.63735962 -15.13766575]
[288.31478882 -3.20527053]
[267.69784546 -17.57119179]
[253.23081970 -13.60826015]
[238.76377869 -9.64532948]
[224.29675293 -5.68239832]
[209.82971191 -1.71946716]
[195.36267090 2.24346375]
[196.38919067 14.80900288]
[192.97108459 26.68030167]
[185.72329712 36.36919022]
[175.72837830 42.72760391]
[164.37785339 45.08259201]
[153.17965698 43.30422592]
[143.55798340 37.80003357]
[131.94297791 47.29169083]
[120.32796478 56.78335190]
[108.71295929 66.27500916]
[131.22650146 69.01875305]
[151.55717468 87.11283112]
[159.66943359 117.90857697]
[148.32344055 152.63638306]
[153.00634766 166.88667297]
[157.68925476 181.13694763]
[162.37216187 195.38722229]
[167.05506897 209.63749695]
[171.73797607 223.88777161]
[176.42088318 238.13804626]
[188.99847412 248.66116333]
[185.90785217 264.76644897]
[170.32835388 269.88616943]
[158.28684998 258.75357056]
[162.17060852 242.82095337]
[157.48770142 228.57067871]
[152.80479431 214.32040405]
[148.12188721 200.07012939]
[143.43898010 185.81985474]
[138.75607300 171.56958008]
[134.07316589 157.31929016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[33 44]
[34 43]
[35 42]
[36 41]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[75 166]
[76 165]
[77 164]
[78 163]
[81 109]
[82 108]
[83 107]
[89 99]
[90 98]
[91 97]
[92 96]
[110 156]
[111 155]
[112 154]
[113 153]
[114 152]
[115 151]
[121 131]
[122 130]
[123 129]
[132 149]
[133 148]
[134 147]
[135 146]
[137 145]
[138 144]
[170 187]
[171 186]
[172 185]
[173 184]
[174 183]
[175 182]
[176 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
