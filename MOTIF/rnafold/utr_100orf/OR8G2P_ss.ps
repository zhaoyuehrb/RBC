%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGGGAUACCCUCCUCCAAAAGUAGAAUAGCAACUCAAUCCCUACAAACACCAUGGUUUUUCUUUCCUCCGUAGAAACUGACCAAAGGAAAAUGUCAGCAGGAAACCAUUCCUCAGUGACUGAGUUCAUUCUGGCUGGGCUCUCAGAACAGC\
) } def
/len { sequence length } bind def

/coor [
[68.45455933 331.76574707]
[56.50025558 340.82635498]
[44.18912506 332.25686646]
[48.53438568 317.90072632]
[41.03592682 318.05273438]
[35.68406677 332.06549072]
[30.33220863 346.07824707]
[30.32934952 363.03219604]
[14.03717899 367.72277832]
[5.01979256 353.36578369]
[16.31944275 340.72637939]
[21.67130089 326.71362305]
[27.02315903 312.70086670]
[15.60838413 322.43240356]
[2.59521818 314.97201538]
[-6.23365784 302.84555054]
[-9.33690357 288.17007446]
[-6.17275572 273.50759888]
[2.70639062 261.41790771]
[15.75041771 254.01158142]
[30.68210602 252.58166504]
[44.89468765 257.37774658]
[55.90694046 267.56256104]
[61.79693985 281.36108398]
[67.61967468 295.18481445]
[69.13719940 280.26177979]
[70.65472412 265.33874512]
[72.17224884 250.41571045]
[73.68977356 235.49266052]
[75.20729828 220.56962585]
[68.02079773 213.20492554]
[66.06452179 202.87826538]
[70.23017883 192.98918152]
[79.35260010 186.93070984]
[81.47364044 172.08142090]
[83.59468842 157.23213196]
[85.71572876 142.38285828]
[87.83677673 127.53357697]
[89.95781708 112.68429565]
[86.12995148 127.18765259]
[78.23207092 139.94004822]
[66.95324707 149.82882690]
[53.27754593 155.99124146]
[38.39815521 157.88960266]
[23.61328506 155.35827637]
[10.21289062 148.61814880]
[-0.63385826 138.25724792]
[-7.98059750 125.17958832]
[-11.18633366 110.52614594]
[-9.97137070 95.57543182]
[-4.44171238 81.63187408]
[4.92018604 69.91202545]
[17.29751015 61.43842697]
[31.61035728 56.95039368]
[46.60994720 56.83950043]
[60.98758698 61.11541748]
[73.48884583 69.40508270]
[83.02085114 80.98164368]
[82.41296387 65.99396515]
[81.80508423 51.00628662]
[81.19719696 36.01860809]
[80.58931732 21.03092957]
[79.98143005 6.04325247]
[79.37355042 -8.94442558]
[78.76566315 -23.93210220]
[78.15778351 -38.91978073]
[77.54989624 -53.90745926]
[66.21311951 -64.58992767]
[65.81014252 -79.79822540]
[76.06410980 -90.54027557]
[75.45622253 -105.52795410]
[67.16602325 -119.00323486]
[74.38118744 -132.03361511]
[73.77330017 -147.02128601]
[64.55244446 -160.58255005]
[71.92908478 -175.22895813]
[88.31475830 -175.89353943]
[96.85329437 -161.89263916]
[88.76097870 -147.62916565]
[89.36886597 -132.64149475]
[97.61558533 -120.23823547]
[90.44390106 -106.13584137]
[91.05178833 -91.14816284]
[102.14201355 -81.27180481]
[102.97200012 -66.08082581]
[92.53757477 -54.51534271]
[93.14545441 -39.52766418]
[93.75334167 -24.53998566]
[94.36122131 -9.55230904]
[94.96910858 5.43536854]
[95.57699585 20.42304611]
[96.18487549 35.41072464]
[96.79276276 50.39839935]
[97.40064240 65.38607788]
[98.00852966 80.37375641]
[110.23250580 89.06710052]
[124.58937073 84.72192383]
[138.94622803 80.37674713]
[153.30308533 76.03157043]
[161.24789429 60.47793198]
[177.65226746 55.55101395]
[192.26541138 63.82164001]
[206.53125000 59.18638611]
[220.79710388 54.55113220]
[235.06295776 49.91587830]
[249.32879639 45.28062057]
[259.89389038 32.73825836]
[275.98873901 35.88270187]
[281.05636597 51.47921753]
[269.88360596 63.48344803]
[253.96405029 59.54647064]
[239.69821167 64.18172455]
[225.43235779 68.81697845]
[211.16650391 73.45223236]
[196.90066528 78.08748627]
[192.69598389 90.30345154]
[182.05363464 97.96665192]
[168.74493408 98.08433533]
[157.64826965 90.38842773]
[143.29141235 94.73361206]
[128.93453979 99.07878876]
[114.57768250 103.42396545]
[104.80709839 114.80533600]
[102.68605804 129.65461731]
[100.56501007 144.50390625]
[98.44396973 159.35317993]
[96.32292938 174.20246887]
[94.20188141 189.05174255]
[102.58555603 207.34161377]
[90.13034058 222.08715820]
[88.61281586 237.01019287]
[87.09529114 251.93322754]
[85.57776642 266.85626221]
[84.06024170 281.77929688]
[82.54271698 296.70236206]
[84.81413269 311.52938843]
[90.72946930 325.31375122]
[96.64480591 339.09811401]
[102.56014252 352.88247681]
[116.96218872 358.81701660]
[122.76482391 372.88058472]
[117.01838684 386.57415771]
[122.93372345 400.35855103]
[134.73631287 412.52963257]
[126.30815887 427.24026489]
[109.83928680 423.21377563]
[109.14936066 406.27386475]
[103.23402405 392.48950195]
[89.34991455 387.22006226]
[83.15455627 373.32501221]
[88.77577972 358.79782104]
[82.86044312 345.01345825]
[76.94509888 331.22906494]
[71.02976227 317.44470215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 13]
[6 12]
[7 11]
[25 135]
[26 134]
[27 133]
[28 132]
[29 131]
[30 130]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
[58 95]
[59 94]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[70 83]
[71 82]
[73 80]
[74 79]
[96 122]
[97 121]
[98 120]
[99 119]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
[136 154]
[137 153]
[138 152]
[139 151]
[142 148]
[143 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
