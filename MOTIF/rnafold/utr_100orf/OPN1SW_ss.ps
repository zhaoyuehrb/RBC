%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAAAAUGUCGGAGGAAGAGUUUUAUCUGUUCAAAAAUAUCUCUUCAGUGGGGCCGUGGGAUGGGCCUCAGUACCACAUUGCCCCUGUCUGGGCCU\
) } def
/len { sequence length } bind def

/coor [
[90.10260773 271.18569946]
[76.56323242 264.72927856]
[67.42343903 252.83540344]
[64.67050934 238.09017944]
[68.90301514 223.69970703]
[79.20066833 212.79290771]
[93.32444763 207.74127197]
[108.20337677 209.64320374]
[120.60114288 218.08384705]
[116.90695953 203.54585266]
[113.21277618 189.00787354]
[109.51859283 174.46989441]
[105.82440948 159.93190002]
[101.04202271 154.12205505]
[102.24890900 144.88430786]
[99.00864410 130.23846436]
[81.59986115 124.01630402]
[71.06150055 108.82670593]
[71.32845306 90.34132385]
[58.74415970 82.17826080]
[46.15987015 74.01519775]
[33.57557678 65.85213470]
[20.99128532 57.68907166]
[8.40699291 49.52600861]
[-3.04185653 59.37996674]
[-16.80369759 65.60800171]
[-31.76291847 67.70523071]
[-46.70684433 65.50164795]
[-60.42403412 59.17588043]
[-71.80249786 49.24073029]
[-79.91983795 36.50160217]
[-84.11801910 21.99119186]
[-84.05670929 6.88579750]
[-79.74087524 -7.59005404]
[-71.52039337 -20.26287079]
[-60.06164551 -30.10532379]
[-46.29355621 -36.31953049]
[-31.33223724 -38.40173340]
[-16.39053345 -36.18313599]
[-2.67970324 -29.84359169]
[8.68877697 -19.89701653]
[16.79331589 -7.14973736]
[20.97691345 7.36488247]
[20.90042686 22.47020721]
[16.57005501 36.94171524]
[29.15434837 45.10477829]
[41.73863983 53.26784134]
[54.32293320 61.43090439]
[66.90722656 69.59396362]
[79.49151611 77.75702667]
[90.75634003 71.19197083]
[103.73787689 69.97707367]
[116.02522278 74.33796692]
[126.87635803 63.98167038]
[137.72749329 53.62537003]
[148.57861328 43.26906967]
[159.42974854 32.91276932]
[170.28088379 22.55646706]
[181.13201904 12.20016766]
[178.92938232 -3.15978241]
[186.20553589 -16.86515999]
[200.16261292 -23.64596748]
[215.43386841 -20.89484596]
[226.14715576 -9.66965771]
[228.18302917 5.71328259]
[220.75863647 19.33892059]
[206.72882080 25.96792221]
[191.48831177 23.05129814]
[180.63717651 33.40760040]
[169.78605652 43.76390076]
[158.93492126 54.12020111]
[148.08378601 64.47650146]
[137.23265076 74.83280182]
[126.38152313 85.18910217]
[130.07833862 96.73784637]
[128.94340515 108.81061554]
[123.15905762 119.46807098]
[113.65447998 126.99819946]
[116.89475250 141.64404297]
[120.36239624 156.23771667]
[124.05657959 170.77571106]
[127.75076294 185.31369019]
[131.44494629 199.85166931]
[135.13912964 214.38966370]
[141.25437927 228.08650208]
[149.61216736 240.54232788]
[157.96995544 252.99815369]
[166.32772827 265.45397949]
[181.88078308 268.26080322]
[190.82496643 281.29064941]
[187.85385132 296.81314087]
[174.73016357 305.61907959]
[159.23994446 302.48400879]
[150.57325745 289.26797485]
[153.87191772 273.81173706]
[145.51412964 261.35592651]
[137.15634155 248.90011597]
[128.79856873 236.44429016]
[126.80564880 251.31130981]
[118.28801727 263.65838623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 84]
[10 83]
[11 82]
[12 81]
[13 80]
[15 79]
[16 78]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
