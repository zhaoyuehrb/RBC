%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAUGGCGACGAGCGGCGGCGAAGAGGCGGCGGCAGCGGCUCCGGCGCCGGGGACCCCGGCAACGGGGGCGGACACGACCCCGGGCUGGGAGGUGGCUGUGC\
) } def
/len { sequence length } bind def

/coor [
[153.51852417 131.50460815]
[148.57336426 145.66601562]
[137.42599487 155.70274353]
[122.82511139 159.13995361]
[108.37101746 155.13009644]
[97.62777710 144.66191101]
[93.24446869 130.31665039]
[96.30138397 115.63264465]
[86.43230438 126.92871857]
[86.07254791 142.96774292]
[73.22165680 152.57159424]
[57.73773956 148.37304688]
[51.49872971 133.59284973]
[59.29066086 119.56910706]
[75.13623047 117.05963898]
[85.00531006 105.76356506]
[78.49675751 92.24843597]
[71.98880005 78.73449707]
[57.00390244 79.40747070]
[43.56475830 87.75612640]
[30.50317001 80.59761810]
[15.51827431 81.27059174]
[5.04192352 93.10366821]
[-10.73807240 93.97960663]
[-22.45972252 83.37873840]
[-23.16877937 67.59036255]
[-12.44457150 55.98144531]
[3.35041738 55.43935394]
[14.84530163 66.28569794]
[29.83019829 65.61272430]
[42.19752121 57.31220627]
[56.33092880 64.42257690]
[71.31582642 63.74960327]
[95.46400452 70.99687195]
[104.38788605 88.31141663]
[116.65367889 79.67716217]
[128.91946411 71.04290771]
[141.18525696 62.40864944]
[153.45104980 53.77439117]
[160.28199768 39.50383759]
[175.14305115 38.50474167]
[187.40884399 29.87048721]
[199.67463684 21.23623085]
[211.67663574 12.23890209]
[223.40411377 2.88655496]
[235.13157654 -6.46579218]
[246.85905457 -15.81813908]
[258.58651733 -25.17048645]
[263.44750977 -33.10241699]
[270.80761719 -34.62088013]
[282.80960083 -43.61820984]
[294.81161499 -52.61553955]
[306.81362915 -61.61286545]
[318.81561279 -70.61019897]
[330.81762695 -79.60752106]
[328.45538330 -100.51377869]
[349.18997192 -118.18153381]
[358.36584473 -130.04760742]
[367.54171753 -141.91366577]
[376.71759033 -153.77973938]
[385.89343262 -165.64579773]
[387.55737305 -181.96031189]
[402.62689209 -188.42880249]
[415.59979248 -178.39704895]
[413.13064575 -162.18486023]
[397.75949097 -156.46994019]
[388.58364868 -144.60386658]
[379.40777588 -132.73780823]
[370.23190308 -120.87173462]
[361.05606079 -109.00567627]
[368.94165039 -96.24491119]
[376.82656860 -83.48526764]
[391.54379272 -86.38410950]
[403.53079224 -97.57534790]
[419.13510132 -92.53176117]
[422.30432129 -76.44176483]
[409.77825928 -65.85736084]
[394.44262695 -71.66688538]
[379.72540283 -68.76804352]
[356.96469116 -58.69828415]
[339.81494141 -67.60552216]
[327.81295776 -58.60819244]
[315.81094360 -49.61086273]
[303.80895996 -40.61353683]
[291.80694580 -31.61620712]
[279.80493164 -22.61887741]
[267.93887329 -13.44301414]
[256.21139526 -4.09066677]
[244.48393250 5.26168013]
[232.75645447 14.61402702]
[221.02899170 23.96637344]
[219.60981750 28.68420982]
[215.11361694 32.49174118]
[208.30889893 33.50202179]
[196.04310608 42.13627625]
[183.77731323 50.77053452]
[177.82369995 64.42350769]
[162.08531189 66.04018402]
[149.81951904 74.67443848]
[137.55372620 83.30869293]
[125.28793335 91.94294739]
[113.02214050 100.57720947]
[127.94644165 99.07212067]
[141.75469971 104.93146515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 16]
[9 15]
[18 33]
[19 32]
[21 30]
[22 29]
[35 102]
[36 101]
[37 100]
[38 99]
[39 98]
[41 96]
[42 95]
[43 94]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
