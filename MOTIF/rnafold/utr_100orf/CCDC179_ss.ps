%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCAUGUGCCUGUAUUGCUGGGACAUCGAGCCUUCCCAAGUCAACCCUGAAGGACCAAGACAACAUCAUCCUUCAGAGGUCACUGAGCGGCAGCUUGCAAAUA\
) } def
/len { sequence length } bind def

/coor [
[73.85713959 217.31904602]
[61.84896851 221.91006470]
[49.04489899 221.56343079]
[42.59392166 235.10540771]
[36.14294434 248.64736938]
[37.97637177 264.94369507]
[24.62120438 274.46060181]
[9.81608868 267.40789795]
[8.79126263 251.04081726]
[22.60097694 242.19639587]
[29.05195618 228.65441895]
[35.50293350 215.11245728]
[25.26736832 201.43527222]
[23.26252747 184.38169861]
[30.11686325 168.54225159]
[44.06211853 158.22515869]
[61.38854218 156.28469849]
[67.02595520 142.38435364]
[72.66336823 128.48400879]
[78.30078125 114.58366394]
[71.45134735 101.23880768]
[56.87100220 97.71552277]
[42.29065704 94.19223022]
[27.71031380 90.66893768]
[13.12996960 87.14564514]
[2.59937286 98.32608032]
[-12.11521530 102.72795105]
[-27.05564499 99.16717529]
[-38.20301437 88.60158539]
[-42.55874252 73.87326813]
[-38.95115280 58.94407654]
[-28.35067177 47.82987976]
[-13.60877609 43.52033997]
[1.30903745 47.17470932]
[12.38995361 57.80997467]
[16.65326118 72.56530762]
[31.23360443 76.08859253]
[45.81394958 79.61188507]
[60.39429092 83.13517761]
[74.97463226 86.65847015]
[103.80850220 82.68334961]
[112.55319214 70.49604797]
[121.29788208 58.30874634]
[119.98967743 45.37143326]
[127.65676880 35.37229156]
[139.69506836 33.40935135]
[148.79707336 21.48653412]
[157.89907837 9.56371784]
[166.82341003 -2.49266553]
[175.56809998 -14.67996883]
[184.31278992 -26.86727142]
[193.05747986 -39.05457306]
[201.80216980 -51.24187851]
[210.54687500 -63.42918015]
[219.29156494 -75.61648560]
[228.03625488 -87.80378723]
[219.98739624 -100.69891357]
[217.49089050 -115.69344330]
[220.92745972 -130.50082397]
[229.77304077 -142.86303711]
[242.67874146 -150.89491272]
[257.67654419 -153.37168884]
[272.47940063 -149.91564941]
[284.82995605 -141.05381775]
[292.84484863 -128.13755798]
[295.30191040 -113.13650513]
[291.82638550 -98.33821869]
[282.94830322 -85.99932861]
[270.02151489 -78.00141907]
[255.01725769 -75.56411743]
[240.22355652 -79.05909729]
[231.47886658 -66.87179565]
[222.73417664 -54.68449020]
[213.98947144 -42.49718475]
[205.24478149 -30.30988312]
[196.50009155 -18.12257957]
[187.75540161 -5.93527651]
[179.01071167 6.25202656]
[177.64665222 13.63992214]
[169.82189941 18.66571999]
[160.71989441 30.58853722]
[151.61788940 42.51135254]
[150.39193726 59.94814301]
[133.48518372 67.05343628]
[124.74049377 79.24074554]
[115.99580383 91.42804718]
[117.32774353 106.36878967]
[128.09034729 116.81705475]
[138.85295105 127.26532745]
[149.61557007 137.71359253]
[165.64070129 141.19595337]
[170.37905884 156.89564514]
[158.95622253 168.66215515]
[143.12301636 164.39111328]
[139.16729736 148.47619629]
[128.40469360 138.02793884]
[117.64208221 127.57966614]
[106.87947845 117.13140106]
[92.20112610 120.22108459]
[86.56371307 134.12142944]
[80.92630005 148.02177429]
[75.28888702 161.92211914]
[84.26596069 171.45094299]
[88.90201569 183.64364624]
[88.52655029 196.63545227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[17 102]
[18 101]
[19 100]
[20 99]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[41 86]
[42 85]
[43 84]
[46 82]
[47 81]
[48 80]
[49 78]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
