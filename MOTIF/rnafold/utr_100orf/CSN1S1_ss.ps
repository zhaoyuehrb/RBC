%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACACAACUUGCUUCUCUCCAGACUUGGGCUUAAGGCUCUGAUAACCAUGAGGCUUCUCAUUCUCACCUGUCUUGUGGCUGUUGCUCUUGCCAGGCCUAAACUUCCUCUUAGAUACCCAGAACGCCUUCAGAAUCCAUCAGAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[7.48449993 519.93945312]
[7.42751217 535.20245361]
[0.74607426 548.92547607]
[-11.23320961 558.38372803]
[-26.13184357 561.69940186]
[-40.99169159 558.21405029]
[-52.86232376 548.61975098]
[-59.38681412 534.82141113]
[-59.26972198 519.55871582]
[-52.53429413 505.86215210]
[-40.51785660 496.45108032]
[-25.60628128 493.19415283]
[-22.18101883 478.59045410]
[-18.75575447 463.98678589]
[-15.33049202 449.38308716]
[-16.87536240 442.10461426]
[-11.67755413 434.51098633]
[-7.94720602 419.98223877]
[-4.21685743 405.45349121]
[-0.48650929 390.92474365]
[-2.00937533 387.67532349]
[-1.99369860 383.51385498]
[-0.02257639 379.19055176]
[3.96125698 375.61544800]
[8.59651184 361.34957886]
[7.23200512 356.70986938]
[8.81501675 351.16482544]
[13.73612976 346.59060669]
[18.96471024 332.53140259]
[24.19329071 318.47216797]
[29.42187119 304.41293335]
[34.35486984 290.24728394]
[38.99012756 275.98144531]
[35.56446075 261.48611450]
[47.18755722 250.75233459]
[51.82281113 236.48649597]
[56.45806885 222.22064209]
[61.09332275 207.95480347]
[65.72857666 193.68894958]
[70.06405640 179.32916260]
[74.09785461 164.88171387]
[78.13164520 150.43428040]
[82.16544342 135.98684692]
[67.45134735 125.18695831]
[58.74731445 108.64034271]
[58.15515900 89.50910187]
[66.18235016 71.64519501]
[81.56198883 58.81486893]
[74.89245605 45.37919235]
[68.22293091 31.94351768]
[61.55340576 18.50784111]
[54.88387680 5.07216454]
[48.21434784 -8.36351204]
[41.54482269 -21.79918861]
[34.87529373 -35.23486328]
[28.20576668 -48.67053986]
[13.09373569 -47.25952530]
[-1.50646353 -51.40664673]
[-13.62027359 -60.55104446]
[-21.60940170 -73.45601654]
[-24.39338303 -88.37626648]
[-21.59570885 -103.29395294]
[-13.59474087 -116.19158936]
[-1.47254288 -125.32486725]
[13.13145638 -129.45858765]
[28.24218559 -128.03370667]
[41.81604385 -121.24291229]
[52.01727676 -110.00461578]
[57.46625137 -95.83870697]
[57.42604065 -80.66099548]
[51.90208054 -66.52415466]
[41.64144135 -55.34006882]
[48.31097031 -41.90439224]
[54.98049927 -28.46871567]
[61.65002441 -15.03303909]
[68.31954956 -1.59736300]
[74.98908234 11.83831310]
[81.65860748 25.27399063]
[88.32813263 38.70966721]
[94.99766541 52.14534378]
[109.97710419 52.93038177]
[118.01451111 40.26546478]
[126.05191040 27.60054398]
[126.72009277 20.91517448]
[130.17980957 16.30172729]
[134.70046997 14.58342361]
[143.26116943 2.26618576]
[144.09347534 -14.11182690]
[158.81465149 -21.33812141]
[172.28079224 -11.97890472]
[170.63909912 4.33786201]
[155.57839966 10.82688904]
[147.01770020 23.14412689]
[138.71682739 35.63794708]
[130.67942810 48.30286407]
[122.64202881 60.96778488]
[128.91273499 67.53858185]
[133.51235962 74.98809814]
[136.35244751 82.92301178]
[150.88119507 79.19265747]
[165.40994263 75.46231079]
[179.93869019 71.73196411]
[185.52548218 57.25552368]
[198.57258606 48.85595703]
[214.06312561 49.76307297]
[226.04066467 59.62806320]
[229.89961243 74.65763855]
[224.15609741 89.07262421]
[211.01864624 97.33016205]
[195.53886414 96.25505829]
[183.66903687 86.26071167]
[169.14028931 89.99105835]
[154.61154175 93.72140503]
[140.08279419 97.45175934]
[139.16950989 108.88105011]
[135.06408691 119.58657837]
[128.10107422 128.69587708]
[118.84795380 135.46658325]
[108.05879974 139.34692383]
[96.61288452 140.02064514]
[92.57908630 154.46807861]
[88.54528809 168.91551208]
[84.51148987 183.36296082]
[85.80410767 189.95611572]
[83.82549286 195.37261963]
[79.99442291 198.32420349]
[75.35916901 212.59005737]
[70.72391510 226.85589600]
[66.08866119 241.12174988]
[61.45340347 255.38758850]
[64.54752350 270.90328979]
[53.25597382 280.61669922]
[48.62071991 294.88253784]
[49.63610840 301.52404785]
[47.43241119 306.85293579]
[43.48110199 309.64151001]
[38.25252151 323.70074463]
[33.02394104 337.75997925]
[27.79535866 351.81921387]
[22.86236000 365.98486328]
[18.22710419 380.25070190]
[14.04223824 394.65509033]
[10.31188965 409.18383789]
[6.58154154 423.71258545]
[2.85119319 438.24133301]
[-0.72680867 452.80834961]
[-4.15207195 467.41204834]
[-7.57733488 482.01571655]
[-11.00259781 496.61941528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 149]
[13 148]
[14 147]
[15 146]
[17 145]
[18 144]
[19 143]
[20 142]
[24 141]
[25 140]
[28 139]
[29 138]
[30 137]
[31 136]
[32 133]
[33 132]
[35 130]
[36 129]
[37 128]
[38 127]
[39 126]
[40 123]
[41 122]
[42 121]
[43 120]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[81 96]
[82 95]
[83 94]
[86 93]
[87 92]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
