%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGGCUCUCGCCCUCCGGCCGGGAAGCAUGGGGCUUCCCAGGCUGGUCUGCGCCUUCUUGCUCGCCGCCUGCUGCUGCUGUCCUCGCGUCGCGGGUGUGCCCGGAGAGGCUGAGCAGCCUGCGCCUG\
) } def
/len { sequence length } bind def

/coor [
[111.64521027 383.11788940]
[108.62129974 368.19223022]
[111.93598175 353.32843018]
[121.01496124 341.10171509]
[134.28524780 333.63049316]
[132.83753967 318.70053101]
[131.38983154 303.77053833]
[129.94212341 288.84057617]
[128.31413269 273.92916870]
[126.50607300 259.03854370]
[124.69802856 244.14791870]
[122.71018982 229.28021240]
[120.54285431 214.43762207]
[118.37551880 199.59501648]
[116.02899933 184.77969360]
[113.50363922 169.99380493]
[110.97828674 155.20791626]
[108.45293427 140.42202759]
[105.92757416 125.63613129]
[103.40222168 110.85024261]
[98.29557800 117.90100098]
[88.34564972 121.65596771]
[75.70381165 119.57957458]
[60.70819092 119.94203186]
[45.71257401 120.30448914]
[30.71695137 120.66694641]
[15.72133160 121.02939606]
[0.72571152 121.39185333]
[-14.26990891 121.75431061]
[-26.33309174 132.33065796]
[-42.09716797 129.35182190]
[-49.46928787 115.10292053]
[-42.79418945 100.51447296]
[-27.19244003 96.77750397]
[-14.63236523 106.75868988]
[0.36325535 106.39623260]
[15.35887527 106.03377533]
[30.35449600 105.67132568]
[45.35011673 105.30886841]
[60.34573746 104.94641113]
[75.34135437 104.58395386]
[81.16522980 90.76069641]
[70.94998932 79.77666473]
[60.73475266 68.79263306]
[50.51951218 57.80860519]
[35.13238907 59.81259537]
[21.52216339 52.35998154]
[14.92224884 38.31645203]
[17.87044716 23.08202553]
[29.23311424 12.51465130]
[44.64107513 10.67770004]
[58.16965103 18.27751732]
[64.61682892 32.39181900]
[61.50354385 47.59336472]
[71.71878052 58.57739639]
[81.93402100 69.56142426]
[92.14925385 80.54545593]
[82.13178253 69.38076782]
[80.11849213 54.51649475]
[86.80511475 41.08931732]
[99.88093567 33.73929977]
[114.82732391 35.00640488]
[126.47920990 44.45275497]
[130.81002808 58.81395340]
[126.32315826 73.12716675]
[114.56882477 82.44626617]
[126.48748779 73.33882904]
[138.29524231 64.08805084]
[149.99035645 54.69527054]
[161.68547058 45.30249023]
[173.38058472 35.90971375]
[185.07569885 26.51693535]
[196.77081299 17.12415695]
[208.46592712 7.73137951]
[214.38058472 -6.94265890]
[229.14869690 -8.87971306]
[240.84381104 -18.27249146]
[245.63812256 -26.16940308]
[252.93690491 -27.74682426]
[264.85556030 -36.85426331]
[265.38833618 -52.48276520]
[275.88067627 -64.07781219]
[291.37838745 -66.16458130]
[304.56396484 -57.75775146]
[309.21154785 -42.82678223]
[303.12673950 -28.42161560]
[289.18252563 -21.34393120]
[273.96301270 -24.93559647]
[262.04434204 -15.82815933]
[250.23658752 -6.57737589]
[238.54147339 2.81540179]
[233.46333313 16.81760597]
[217.85870361 19.42649460]
[206.16358948 28.81927299]
[194.46847534 38.21205139]
[182.77336121 47.60482788]
[171.07824707 56.99760818]
[159.38313293 66.39038086]
[147.68801880 75.78316498]
[144.40971375 82.49235535]
[135.59492493 85.25749207]
[123.67626190 94.36493683]
[118.18811035 108.32488251]
[120.71347046 123.11077881]
[123.23882294 137.89666748]
[125.76417542 152.68255615]
[128.28953552 167.46844482]
[130.81489563 182.25433350]
[135.38658142 190.28218079]
[133.21810913 197.42768860]
[135.38545227 212.27027893]
[137.55278015 227.11288452]
[141.92915344 235.24884033]
[139.58865356 242.33985901]
[141.39671326 257.23049927]
[143.20475769 272.12112427]
[147.38325500 280.36047363]
[144.87210083 287.39285278]
[146.31980896 302.32284546]
[147.76751709 317.25280762]
[149.21522522 332.18280029]
[163.67372131 336.96524048]
[174.93263245 347.21984863]
[181.04129028 361.16989136]
[180.94134521 376.39849854]
[174.65010071 390.26715088]
[163.25755310 400.37307739]
[148.73753357 404.96536255]
[133.60571289 403.24832153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 121]
[6 120]
[7 119]
[8 118]
[9 116]
[10 115]
[11 114]
[12 112]
[13 111]
[14 110]
[15 108]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[42 57]
[43 56]
[44 55]
[45 54]
[66 102]
[67 101]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[73 94]
[74 93]
[76 91]
[77 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
