%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGGAGGUGAGGGGCGGGCCGGGCGGGUGUCCGAGGCGGCGGCGGCGGCAUGGCAGGGCGGCGGGUGAACGUGAACGUGGGCGUGCUGGGCCACAUCGACAGCGGCAAGACGGCGCUGGCGCGGGCGCUAAGCACCACAGCCUCCACCG\
) } def
/len { sequence length } bind def

/coor [
[118.89842224 522.65887451]
[118.89842224 507.65890503]
[108.21755219 497.34121704]
[108.00386810 482.12908936]
[118.89842224 470.99594116]
[118.89842224 455.99594116]
[118.89842224 440.99594116]
[118.89842224 425.99594116]
[118.89842224 410.99594116]
[118.89842224 395.99594116]
[106.51746368 384.65609741]
[106.13056183 367.53421021]
[118.46231079 355.16934204]
[118.15231323 340.17254639]
[117.06816864 325.21176147]
[115.21277618 310.32696533]
[113.35739136 295.44213867]
[111.50199890 280.55734253]
[102.12842560 272.84884644]
[100.49297333 260.41824341]
[108.02021790 249.89353943]
[106.47284698 234.97357178]
[104.92547607 220.05358887]
[95.91653442 208.19238281]
[102.18895721 193.66767883]
[100.64158630 178.74769592]
[91.63264465 166.88648987]
[97.90506744 152.36178589]
[96.35770416 137.44180298]
[94.81033325 122.52183533]
[93.26296234 107.60186005]
[89.34327698 100.49559784]
[91.84106445 92.35800934]
[90.60237122 77.40924072]
[89.36368561 62.46047211]
[76.39122009 57.13709641]
[67.03282928 46.78388214]
[63.08031845 33.46846771]
[65.25352478 19.81699562]
[73.06996155 8.49620152]
[84.95049286 1.69248116]
[84.02101135 -13.27869320]
[75.44345093 -26.57290077]
[82.37722778 -39.75516129]
[81.44774628 -54.72633362]
[68.13703156 -66.03063965]
[67.10869598 -83.12597656]
[78.51093292 -95.44951630]
[77.27223969 -110.39828491]
[76.03355408 -125.34705353]
[64.25684357 -135.54248047]
[63.21358490 -150.72030640]
[73.00595093 -161.88476562]
[71.76725769 -176.83354187]
[70.52857208 -191.78230286]
[69.28987885 -206.73107910]
[61.25394821 -211.87527466]
[56.58842468 -220.03942871]
[56.24611664 -229.29812622]
[60.17709351 -237.53498840]
[67.36918640 -242.92651367]
[67.05918884 -257.92330933]
[66.74918365 -272.92010498]
[66.43917847 -287.91690063]
[66.12917328 -302.91369629]
[58.10832214 -316.55102539]
[65.58093262 -329.43548584]
[65.27093506 -344.43228149]
[54.14862061 -355.33786011]
[54.04786682 -370.55117798]
[64.51322174 -381.08737183]
[64.20321655 -396.08416748]
[63.89321518 -411.08099365]
[54.94360352 -424.82275391]
[62.60976028 -439.31973267]
[79.00540924 -439.65863037]
[87.26409912 -425.49087524]
[78.89001465 -411.39099121]
[79.20001221 -396.39419556]
[79.51001740 -381.39739990]
[90.40184784 -371.30264282]
[90.92987061 -356.09817505]
[80.26773071 -344.74227905]
[80.57773590 -329.74548340]
[88.57641602 -317.18084717]
[81.12596893 -303.22369385]
[81.43597412 -288.22689819]
[81.74597931 -273.23010254]
[82.05598450 -258.23330688]
[82.36598969 -243.23652649]
[94.61814880 -226.67022705]
[84.23864746 -207.96975708]
[85.47734070 -193.02099609]
[86.71602631 -178.07223511]
[87.95471954 -163.12345886]
[99.45113373 -153.72303772]
[100.92029572 -138.58050537]
[90.98232269 -126.58574677]
[92.22100830 -111.63697815]
[93.45970154 -96.68820953]
[104.38698578 -89.79119110]
[109.40331268 -77.67146301]
[106.46060944 -64.68898010]
[96.41892242 -55.65581512]
[97.34840393 -40.68463898]
[105.85948944 -28.46127129]
[98.99218750 -14.20817375]
[99.92166901 0.76300025]
[114.53924561 7.58212280]
[123.79148865 20.90880775]
[125.08618927 37.17461777]
[117.97745514 51.96598816]
[104.31244659 61.22178268]
[105.55113983 76.17054749]
[106.78983307 91.11931610]
[108.18293762 106.05448914]
[109.73030853 120.97446442]
[111.27767181 135.89443970]
[112.82504272 150.81440735]
[121.94466400 163.74279785]
[115.56156158 177.20033264]
[117.10893250 192.12030029]
[126.22855377 205.04869080]
[119.84545135 218.50622559]
[121.39282227 233.42619324]
[122.94019318 248.34617615]
[134.09017944 262.96408081]
[126.38681030 278.70196533]
[128.24220276 293.58676147]
[130.09757996 308.47155762]
[131.95297241 323.35638428]
[143.32620239 313.57632446]
[158.10168457 316.16192627]
[165.47784424 329.22302246]
[160.06239319 343.21133423]
[145.81427002 347.90078735]
[133.14910889 339.86254883]
[133.45910645 354.85934448]
[144.21244812 363.03240967]
[148.21719360 375.72753906]
[144.21884155 388.22012329]
[133.89842224 395.99594116]
[133.89842224 410.99594116]
[133.89842224 425.99594116]
[133.89842224 440.99594116]
[133.89842224 455.99594116]
[133.89842224 470.99594116]
[144.79296875 482.12908936]
[144.57929993 497.34121704]
[133.89842224 507.65890503]
[133.89842224 522.65887451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[13 138]
[14 137]
[15 131]
[16 130]
[17 129]
[18 128]
[21 126]
[22 125]
[23 124]
[25 122]
[26 121]
[28 119]
[29 118]
[30 117]
[31 116]
[33 115]
[34 114]
[35 113]
[41 108]
[42 107]
[44 105]
[45 104]
[48 100]
[49 99]
[50 98]
[53 95]
[54 94]
[55 93]
[56 92]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[67 84]
[68 83]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
