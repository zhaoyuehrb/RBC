%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGCUCCUCUUUCUGGGAAGGGGUUGCCCGGCUGUGCUGCCACCAUGUCUUUUCGACUUUCUGGUGGAUCCAGGAGGAUCUGCUCGCGAACUGGGUCUGGUAGGCUGUCCGGUGGAGGAACAGGCUUCGUGGCUGGGAAUGUGU\
) } def
/len { sequence length } bind def

/coor [
[-3.08808398 369.99240112]
[-9.39465046 372.27972412]
[-16.03320885 373.13238525]
[-22.68231392 372.51583862]
[-29.02149200 370.46664429]
[-38.24799347 382.29336548]
[-47.47449112 394.12011719]
[-56.70098877 405.94683838]
[-65.92749023 417.77359009]
[-75.15399170 429.60031128]
[-84.25358582 441.52496338]
[-93.22524261 453.54617310]
[-102.19689941 465.56738281]
[-106.82483673 481.87747192]
[-123.77864838 481.94546509]
[-128.53727722 465.67303467]
[-114.21810913 456.59573364]
[-105.24645233 444.57452393]
[-96.27478790 432.55331421]
[-94.78422546 425.25991821]
[-86.98072815 420.37380981]
[-77.75422668 408.54708862]
[-68.52772522 396.72033691]
[-59.30122757 384.89361572]
[-50.07472992 373.06686401]
[-40.84822845 361.24014282]
[-47.11596680 338.04092407]
[-34.47382736 317.32150269]
[-10.50606155 312.18246460]
[-3.99780536 298.66793823]
[2.51045060 285.15341187]
[9.01870632 271.63885498]
[15.52696323 258.12432861]
[22.03521919 244.60980225]
[28.54347420 231.09526062]
[35.05173111 217.58073425]
[41.55998611 204.06620789]
[48.06824493 190.55166626]
[42.92178345 176.62150574]
[49.32956314 162.82313538]
[63.97569656 157.51950073]
[70.48395538 144.00497437]
[76.99221039 130.49043274]
[67.08249664 119.37686920]
[62.17493439 105.31878662]
[63.01528168 90.45245361]
[69.47583771 77.03697968]
[80.57485199 67.11096954]
[94.62571716 62.18278122]
[109.49325562 63.00130844]
[116.00151062 49.48677826]
[122.50977325 35.97224426]
[113.97863007 23.27709007]
[112.95411682 8.11637783]
[119.61145782 -5.43154335]
[132.07287598 -13.77236176]
[146.93595886 -14.74924755]
[153.44421387 -28.26378059]
[159.95246887 -41.77831268]
[154.96730042 -56.53588104]
[161.76011658 -70.14882660]
[175.85992432 -74.81047821]
[182.36817932 -88.32501221]
[188.87643433 -101.83954620]
[195.38468933 -115.35408020]
[194.40129089 -131.14469910]
[206.89451599 -139.25448608]
[213.40277100 -152.76901245]
[219.91102600 -166.28355408]
[226.41928101 -179.79808044]
[232.92753601 -193.31260681]
[239.43579102 -206.82714844]
[245.94404602 -220.34167480]
[252.45230103 -233.85621643]
[258.96057129 -247.37074280]
[264.73782349 -261.21356201]
[269.76757812 -275.34512329]
[274.79733276 -289.47671509]
[267.79074097 -303.64297485]
[272.93249512 -318.58749390]
[287.17205811 -325.44390869]
[302.06134033 -320.14443970]
[308.76684570 -305.83319092]
[303.31027222 -291.00076294]
[288.92892456 -284.44696045]
[283.89913940 -270.31536865]
[278.86938477 -256.18380737]
[293.43478394 -259.76843262]
[305.45111084 -250.79025269]
[306.14257812 -235.80621338]
[295.00421143 -225.75947571]
[280.17059326 -227.98741150]
[272.47509766 -240.86248779]
[265.96682739 -227.34796143]
[259.45858765 -213.83341980]
[252.95033264 -200.31889343]
[246.44207764 -186.80435181]
[239.93380737 -173.28982544]
[233.42555237 -159.77528381]
[226.91729736 -146.26075745]
[220.40904236 -132.74623108]
[221.85795593 -117.92225647]
[208.89921570 -108.84582520]
[202.39096069 -95.33129120]
[195.88270569 -81.81675720]
[189.37445068 -68.30222321]
[194.52090454 -54.37205887]
[188.11312866 -40.57368469]
[173.46699524 -35.27005768]
[166.95874023 -21.75552368]
[160.45048523 -8.24099064]
[168.95370483 3.98851442]
[170.20214844 18.93165207]
[163.76074219 32.58356094]
[151.26884460 41.23511124]
[136.02430725 42.48049927]
[129.51605225 55.99503326]
[123.00778961 69.50956726]
[132.91751099 80.62313080]
[137.82507324 94.68121338]
[136.98472595 109.54754639]
[130.52416992 122.96302032]
[119.42514801 132.88903809]
[105.37428284 137.81721497]
[90.50674438 136.99868774]
[83.99848938 150.51322937]
[77.49022675 164.02775574]
[82.47540283 178.78532410]
[75.68258667 192.39826965]
[61.58277512 197.05992126]
[55.07452011 210.57446289]
[48.56626511 224.08898926]
[42.05800629 237.60351562]
[35.54975128 251.11805725]
[29.04149628 264.63259888]
[22.53323936 278.14712524]
[16.02498436 291.66165161]
[9.51672745 305.17617798]
[3.00847149 318.69073486]
[7.72063398 323.65930176]
[11.22583675 329.52389526]
[13.36060905 335.99780273]
[14.02827454 342.76626587]
[13.20331192 349.50183105]
[10.93226337 355.87997437]
[7.33116531 361.59497070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 19]
[12 18]
[13 17]
[29 139]
[30 138]
[31 137]
[32 136]
[33 135]
[34 134]
[35 133]
[36 132]
[37 131]
[38 130]
[41 127]
[42 126]
[43 125]
[50 118]
[51 117]
[52 116]
[57 111]
[58 110]
[59 109]
[62 106]
[63 105]
[64 104]
[65 103]
[67 101]
[68 100]
[69 99]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[75 93]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
