%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGUCAGUUGAACCGCUCGCGAGGAGGGUUGCUAGUGGAGAAGCAACCUUGGCCAUGGACCAGCCGGCUGGCCUGCAGGUGGACUACGUCUUCCGGGGUGUGGAGCAUGCCGUGCGGGUGAUGGUUUCUGGGCAGGUGCUGGAGCUGGAGGUGG\
) } def
/len { sequence length } bind def

/coor [
[128.36558533 439.37149048]
[138.14312744 426.65222168]
[137.53913879 411.66439819]
[129.29563904 399.25900269]
[136.47097778 385.15847778]
[135.86698914 370.17062378]
[135.26300049 355.18280029]
[134.65901184 340.19497681]
[134.05502319 325.20712280]
[133.45103455 310.21929932]
[118.20003510 298.17675781]
[116.60773468 278.50588989]
[130.13197327 263.72012329]
[128.62413025 248.79609680]
[127.11630249 233.87207031]
[125.45828247 218.96398926]
[123.65023041 204.07334900]
[121.84217834 189.18272400]
[120.03413391 174.29208374]
[118.22608185 159.40145874]
[114.27515411 153.10432434]
[116.53466797 144.19314575]
[115.02684021 129.26913452]
[113.51900482 114.34510803]
[97.31291962 117.59342957]
[86.15277863 107.78041840]
[71.15581512 108.08247375]
[56.15885925 108.38452911]
[41.16189957 108.68658447]
[26.16494179 108.98863983]
[11.16798401 109.29069519]
[-3.82897449 109.59275818]
[-18.82593346 109.89481354]
[-33.82289124 110.19686890]
[-42.57810593 123.00802612]
[-57.20272064 128.19456482]
[-72.07327271 123.76216125]
[-81.47174072 111.41516113]
[-81.78420258 95.90122986]
[-72.89053345 83.18579865]
[-58.21051025 78.15821075]
[-43.38891602 82.75167084]
[-34.12494659 95.19990540]
[-19.12798882 94.89785004]
[-4.13103056 94.59579468]
[10.86592770 94.29373932]
[25.86288643 93.99168396]
[40.85984421 93.68962860]
[55.85680389 93.38757324]
[70.85375977 93.08551788]
[85.85072327 92.78346252]
[100.16989899 82.20336151]
[117.72733307 91.38099670]
[124.42931366 77.96147919]
[131.13128662 64.54196167]
[137.83326721 51.12244034]
[144.53524780 37.70292282]
[141.19633484 25.20562172]
[147.09963989 14.14880371]
[158.58204651 10.23075485]
[165.55290222 -3.05108500]
[172.52374268 -16.33292580]
[172.08596802 -32.14807510]
[184.85165405 -39.82181168]
[191.82250977 -53.10365295]
[198.65927124 -66.45500946]
[205.36123657 -79.87452698]
[212.06321716 -93.29404449]
[218.76519775 -106.71356964]
[213.99281311 -121.54131317]
[220.98074341 -135.05514526]
[235.14614868 -139.51350403]
[241.84811401 -152.93302917]
[248.41464233 -166.41934204]
[254.84501648 -179.97109985]
[261.27542114 -193.52285767]
[267.70581055 -207.07461548]
[274.13619995 -220.62637329]
[280.01568604 -234.42605591]
[285.33474731 -248.45130920]
[282.99386597 -264.09838867]
[294.74151611 -273.25488281]
[300.06060791 -287.28015137]
[305.37966919 -301.30538940]
[310.69873047 -315.33062744]
[310.66195679 -332.28454590]
[326.94311523 -337.01318359]
[335.99404907 -322.67733765]
[324.72399902 -310.01156616]
[319.40490723 -295.98629761]
[314.08584595 -281.96105957]
[308.76675415 -267.93582153]
[311.48812866 -253.29193115]
[299.36001587 -243.13223267]
[294.04092407 -229.10699463]
[295.11798096 -226.45985413]
[295.18048096 -223.21493530]
[293.99078369 -219.76811218]
[291.46331787 -216.59533691]
[287.68795776 -214.19598389]
[281.25756836 -200.64422607]
[274.82717896 -187.09246826]
[268.39678955 -173.54071045]
[261.96640015 -159.98895264]
[261.94006348 -152.55505371]
[255.26763916 -146.23104858]
[248.56565857 -132.81152344]
[253.51121521 -118.80876923]
[246.90562439 -105.10399628]
[232.18472290 -100.01158905]
[225.48274231 -86.59207153]
[218.78076172 -73.17255402]
[212.07878113 -59.75303268]
[211.90278625 -52.32116318]
[205.10435486 -46.13280487]
[198.13349915 -32.85096359]
[199.06988525 -17.98582077]
[185.80558777 -9.36207771]
[178.83473206 3.91976237]
[171.86389160 17.20160294]
[173.53892517 34.64590073]
[157.95475769 44.40489960]
[151.25279236 57.82441711]
[144.55081177 71.24393463]
[137.84883118 84.66345978]
[131.14685059 98.08297729]
[128.44302368 112.83727264]
[129.95086670 127.76129913]
[131.45869446 142.68531799]
[133.11671448 157.59339905]
[134.92475891 172.48403931]
[136.73281860 187.37466431]
[138.54086304 202.26530457]
[140.34890747 217.15592957]
[144.51113892 225.35290527]
[142.04032898 232.36424255]
[143.54815674 247.28826904]
[145.05598450 262.21228027]
[154.83039856 266.73202515]
[161.77038574 274.85998535]
[164.65838623 285.06588745]
[163.03143311 295.46496582]
[157.25395203 304.16601562]
[148.43887329 309.61529541]
[149.04286194 324.60314941]
[149.64685059 339.59097290]
[150.25083923 354.57879639]
[150.85482788 369.56665039]
[151.45881653 384.55447388]
[159.74552917 398.03192139]
[152.52697754 411.06039429]
[153.13096619 426.04824829]
[163.90028381 437.93948364]
[161.17579651 453.74948120]
[147.04750061 461.35021973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[13 138]
[14 137]
[15 136]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
[24 127]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[53 126]
[54 125]
[55 124]
[56 123]
[57 122]
[60 120]
[61 119]
[62 118]
[64 116]
[65 115]
[66 113]
[67 112]
[68 111]
[69 110]
[72 107]
[73 106]
[74 104]
[75 103]
[76 102]
[77 101]
[78 100]
[79 95]
[80 94]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
