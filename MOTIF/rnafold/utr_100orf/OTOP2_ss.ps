%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAGACGCUCGCCGUCCCCUGACCCCCAGCUCAGCGCCGGCUCCAAGCCCAGCCAGUGAUCCCUCUAGCCUUCUCCAGUCGCCUCCGCCAUGUCCGAGGAGCUGGCCCAGGGCCCCAAGGAGAGCCCCCCGGCGCCGCGUGCGGGCCCCAGGGAGGUGUGGAAGAAGGGUGGCCGCCUGCUGUCGGUGC\
) } def
/len { sequence length } bind def

/coor [
[-228.38952637 549.47338867]
[-245.46145630 565.04827881]
[-268.34011841 567.29016113]
[-274.50057983 580.96667480]
[-280.66107178 594.64324951]
[-279.27410889 610.40356445]
[-291.55584717 618.83026123]
[-297.71630859 632.50683594]
[-303.87680054 646.18334961]
[-310.03726196 659.85992432]
[-305.72048950 675.31134033]
[-315.22583008 688.23522949]
[-331.26162720 688.71759033]
[-341.52658081 676.38830566]
[-338.14630127 660.70544434]
[-323.71383667 653.69946289]
[-317.55334473 640.02288818]
[-311.39288330 626.34631348]
[-305.23242188 612.66973877]
[-307.05999756 597.88769531]
[-294.33764648 588.48278809]
[-288.17715454 574.80621338]
[-282.01669312 561.12963867]
[-287.62115479 556.14270020]
[-292.08981323 550.10284424]
[-295.22885132 543.26434326]
[-296.90045166 535.91625977]
[-297.02896118 528.37030029]
[-295.60427856 520.94738770]
[-292.68249512 513.96429443]
[-288.38366699 507.72003174]
[-282.88693237 502.48287964]
[-276.42294312 498.47906494]
[-269.26437378 495.88287354]
[-261.71426392 494.80917358]
[-254.09321594 495.30819702]
[-246.72584534 497.36337280]
[-238.43038940 484.86596680]
[-230.13494873 472.36853027]
[-221.83949280 459.87112427]
[-213.54403687 447.37368774]
[-205.24859619 434.87628174]
[-196.95314026 422.37884521]
[-188.65769958 409.88143921]
[-191.85060120 395.37829590]
[-183.61585999 382.58596802]
[-168.38198853 379.33529663]
[-160.08654785 366.83786011]
[-159.49440002 351.95504761]
[-145.41607666 344.73623657]
[-137.12062073 332.23880005]
[-140.04020691 322.42718506]
[-137.00578308 312.42059326]
[-128.79043579 305.60211182]
[-117.95920563 304.41503906]
[-109.26136780 292.19427490]
[-100.56352234 279.97348022]
[-91.86568451 267.75268555]
[-105.97872925 272.83422852]
[-120.95227051 271.94369507]
[-134.36349487 265.22512817]
[-144.04240417 253.76570129]
[-148.42288208 239.41957092]
[-146.79614258 224.50804138]
[-139.42541504 211.44387817]
[-127.50330353 202.34095764]
[-112.95888519 198.67216492]
[-98.14554596 201.03114319]
[-85.46015167 209.03619385]
[-76.95528412 221.39205933]
[-74.00708008 236.09947205]
[-77.09361267 250.78108215]
[-66.18921661 240.48088074]
[-55.28481674 230.18067932]
[-44.38042068 219.88047791]
[-33.47602463 209.58027649]
[-22.57162666 199.28007507]
[-11.75142288 188.89146423]
[-1.01612628 178.41514587]
[9.71916962 167.93881226]
[10.67120934 163.24472046]
[14.59156895 159.10404968]
[20.97854805 157.30329895]
[32.04915619 147.18196106]
[43.11976242 137.06060791]
[54.19037247 126.93926239]
[65.26097870 116.81791687]
[76.33158875 106.69657135]
[87.40219879 96.57522583]
[94.11397552 83.16060638]
[95.57663727 68.23209381]
[97.03929901 53.30357361]
[98.50196075 38.37505722]
[88.74493408 26.23265076]
[90.44094086 11.11384869]
[102.07700348 1.88683748]
[103.53966522 -13.04167938]
[96.27497101 -27.74393272]
[105.59900665 -41.23446274]
[121.92000580 -39.63536835]
[128.44831848 -24.59165955]
[118.46817780 -11.57901573]
[117.00551605 3.34950089]
[126.62940216 14.65951443]
[125.35871887 29.81999016]
[113.43048096 39.83772278]
[111.96781921 54.76623917]
[110.50515747 69.69475555]
[109.04248810 84.62327576]
[115.11728668 89.02178192]
[128.81039429 82.89814758]
[127.26687622 97.81879425]
[133.34167480 102.21730042]
[147.06793213 96.16834259]
[160.79418945 90.11938477]
[174.52043152 84.07041931]
[188.24668884 78.02146149]
[201.97294617 71.97250366]
[215.64952087 65.81202698]
[229.27549744 59.54045105]
[228.75498962 44.37454224]
[234.06623840 30.20295906]
[244.37071228 19.17429924]
[258.07543945 12.94789410]
[273.07913208 12.44419956]
[287.09445190 17.70884895]
[297.99661255 27.91043663]
[311.62258911 21.63885689]
[325.24856567 15.36727810]
[334.27456665 1.67556679]
[350.62670898 2.91644859]
[357.48327637 17.81340981]
[347.79083252 31.04173470]
[331.52014160 28.99325562]
[317.89416504 35.26483536]
[304.26818848 41.53641510]
[304.92694092 56.45269394]
[299.81082153 70.52289581]
[289.67016602 81.59230804]
[276.02728271 87.95308685]
[260.94796753 88.60771942]
[246.72875977 83.42535400]
[235.54707336 73.16642761]
[221.92109680 79.43801117]
[217.15220642 85.09915161]
[208.02191162 85.69876099]
[194.29565430 91.74771881]
[180.56939697 97.79667664]
[166.84313965 103.84563446]
[153.11688232 109.89459229]
[139.39062500 115.94355774]
[124.57042694 123.32759857]
[110.68126678 122.89709473]
[101.02548218 116.61979675]
[97.52354431 107.64583588]
[86.45293427 117.76718140]
[75.38232422 127.88852692]
[64.31171417 138.00987244]
[53.24110794 148.13122559]
[42.17050171 158.25256348]
[31.09989357 168.37391663]
[20.19549561 178.67411804]
[9.46020031 189.15043640]
[-1.27509618 199.62677002]
[-5.23938036 207.87335205]
[-12.27142715 210.18447876]
[-23.17582321 220.48466492]
[-34.08021927 230.78486633]
[-44.98461914 241.08506775]
[-55.88901520 251.38526917]
[-66.79341125 261.68548584]
[-70.36505127 272.47885132]
[-79.64490509 276.45053101]
[-88.34274292 288.67132568]
[-97.04058075 300.89208984]
[-105.73841858 313.11288452]
[-106.72625732 333.23718262]
[-124.62319946 340.53424072]
[-132.91865540 353.03167725]
[-134.10414124 368.80841064]
[-147.58912659 375.13330078]
[-155.88456726 387.63073730]
[-152.96459961 402.93142700]
[-161.55540466 415.48742676]
[-176.16027832 418.17687988]
[-184.45571899 430.67431641]
[-192.75117493 443.17172241]
[-201.04663086 455.66912842]
[-209.34207153 468.16656494]
[-217.63752747 480.66397095]
[-225.93296814 493.16140747]
[-234.22842407 505.65881348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[10 16]
[37 192]
[38 191]
[39 190]
[40 189]
[41 188]
[42 187]
[43 186]
[44 185]
[47 182]
[48 181]
[50 179]
[51 178]
[55 176]
[56 175]
[57 174]
[58 173]
[72 171]
[73 170]
[74 169]
[75 168]
[76 167]
[77 166]
[78 164]
[79 163]
[80 162]
[83 161]
[84 160]
[85 159]
[86 158]
[87 157]
[88 156]
[89 155]
[90 109]
[91 108]
[92 107]
[93 106]
[96 103]
[97 102]
[113 151]
[114 150]
[115 149]
[116 148]
[117 147]
[118 146]
[119 144]
[120 143]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
