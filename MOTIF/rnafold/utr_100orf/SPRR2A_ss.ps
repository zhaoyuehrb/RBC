%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCUGGUACCUGAGCACUGAUCUGCCUUGGAGAACCUGAUCCUGAGACUCCAGCAGGAUGUCUUAUCAACAGCAGCAGUGCAAGCAGCCCUGCCAGCCACCUCCUGUGUGCCCCACGCCAAAGUGCCCAGAGCCAUGUCCACCCCCGAAGUGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[94.28364563 128.31880188]
[86.96640015 125.78288269]
[80.58570099 121.39431000]
[75.60002136 115.46843719]
[72.36761475 108.43107605]
[71.12075806 100.78788757]
[71.94902802 93.08808899]
[58.81565475 85.84140015]
[45.68228149 78.59471130]
[32.54890442 71.34802246]
[19.41553307 64.10133362]
[6.28215933 56.85464478]
[-13.79881001 58.20198059]
[-23.15427208 41.31245804]
[-36.55876160 34.58046722]
[-49.96324921 27.84848022]
[-69.97687531 29.97344780]
[-79.98020172 13.45938873]
[-93.63564301 7.25222731]
[-107.29108429 1.04506660]
[-120.94653320 -5.16209412]
[-134.60197449 -11.36925507]
[-148.25741577 -17.57641602]
[-154.94338989 -17.31406212]
[-159.97790527 -20.08173180]
[-162.31475830 -24.29816246]
[-175.71925354 -31.03014946]
[-189.12373352 -37.76213837]
[-202.52822876 -44.49412537]
[-218.11123657 -31.93058205]
[-238.71334839 -29.47283173]
[-258.13882446 -38.63948441]
[-270.13195801 -57.33450317]
[-285.12066650 -56.75287247]
[-300.10937500 -56.17124176]
[-308.62420654 -43.19906235]
[-323.14956665 -37.74073792]
[-338.10018921 -41.89510345]
[-347.72723389 -54.06472015]
[-348.32891846 -69.57012939]
[-339.67385864 -82.44917297]
[-325.09014893 -87.74960327]
[-310.18548584 -83.43329620]
[-300.69100952 -71.15995789]
[-285.70230103 -71.74159241]
[-270.71356201 -72.32321930]
[-265.99539185 -86.56185913]
[-277.67086792 -95.97904205]
[-289.34634399 -105.39622498]
[-301.02182007 -114.81340790]
[-312.69729614 -124.23059082]
[-324.37277222 -133.64776611]
[-336.13900757 -142.95130920]
[-347.99490356 -152.14031982]
[-359.85079956 -161.32931519]
[-376.16345215 -163.01132202]
[-382.61523438 -178.08801270]
[-372.56912231 -191.04977417]
[-356.35964966 -188.56266785]
[-350.66177368 -173.18521118]
[-338.80587769 -163.99620056]
[-326.95001221 -154.80718994]
[-319.70101929 -153.18719482]
[-314.95559692 -145.32324219]
[-303.28012085 -135.90606689]
[-291.60464478 -126.48888397]
[-279.92916870 -117.07170105]
[-268.25369263 -107.65451813]
[-256.57821655 -98.23733521]
[-243.57174683 -104.76844025]
[-229.36726379 -106.25436401]
[-215.81736755 -102.69419861]
[-204.62179565 -94.73290253]
[-197.11445618 -83.55438232]
[-194.10531616 -70.70875549]
[-195.79623413 -57.89861298]
[-182.39175415 -51.16662598]
[-168.98725891 -44.43463898]
[-155.58276367 -37.70265198]
[-142.05026245 -31.23185921]
[-128.39482117 -25.02470016]
[-114.73937225 -18.81753922]
[-101.08392334 -12.61037731]
[-87.42848206 -6.40321684]
[-73.77304077 -0.19605580]
[-64.50908661 -4.64841700]
[-54.10951996 -3.21030879]
[-46.07104111 3.88010240]
[-43.23126221 14.44399166]
[-29.82677269 21.17597961]
[-16.42228317 27.90796661]
[-6.99265862 23.81816673]
[3.34332418 25.65844154]
[11.10082436 33.05521393]
[13.52884865 43.72127151]
[26.66222191 50.96796036]
[39.79559708 58.21464920]
[52.92897034 65.46134186]
[66.06233978 72.70803070]
[79.19571686 79.95471954]
[103.90972137 71.37578583]
[125.41783905 86.26809692]
[140.01350403 82.80886078]
[154.60917664 79.34962463]
[157.93070984 65.73423767]
[166.76069641 54.93657303]
[179.32583618 49.03475952]
[193.14138794 49.13270950]
[205.50244141 55.15404892]
[214.01356506 65.86830139]
[228.67356873 62.69274521]
[243.33357239 59.51718903]
[257.99359131 56.34162903]
[272.65359497 53.16607285]
[286.85366821 43.90357208]
[299.68518066 54.98460007]
[292.58929443 70.38216400]
[275.82913208 67.82608032]
[261.16912842 71.00164032]
[246.50912476 74.17719269]
[231.84912109 77.35275269]
[217.18911743 80.52831268]
[212.64726257 96.01226807]
[200.85839844 107.16743469]
[184.96484375 110.89046478]
[169.26893616 106.07662964]
[158.06842041 93.94529724]
[143.47274780 97.40453339]
[128.87707520 100.86376953]
[127.95135498 107.30432129]
[125.60777283 113.37435913]
[121.96520996 118.76596069]
[130.44931030 131.13609314]
[138.93341064 143.50621033]
[153.11964417 150.51060486]
[153.93751526 165.38273621]
[162.42161560 177.75285339]
[169.89419556 183.09341431]
[170.94757080 190.44613647]
[179.19021606 202.97845459]
[193.23794556 210.25660706]
[193.76727295 225.14179993]
[202.00991821 237.67411804]
[217.56172180 239.30970764]
[228.38652039 250.59500122]
[229.37316895 266.20141602]
[220.05580139 278.76010132]
[204.83378601 282.34121704]
[190.89450073 275.25387573]
[184.81965637 260.84451294]
[189.47760010 245.91676331]
[181.23495483 233.38444519]
[167.77679443 227.00267029]
[166.65789795 211.22108459]
[158.41525269 198.68876648]
[150.05149841 186.23695374]
[141.56739807 173.86683655]
[127.98799896 167.74723816]
[126.56328583 151.99031067]
[118.07918549 139.62019348]
[109.59507751 127.25006104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[12 95]
[14 91]
[15 90]
[16 89]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[26 79]
[27 78]
[28 77]
[29 76]
[33 46]
[34 45]
[35 44]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 62]
[54 61]
[55 60]
[102 129]
[103 128]
[104 127]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
[132 161]
[133 160]
[134 159]
[136 157]
[137 156]
[139 155]
[140 154]
[142 152]
[143 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
