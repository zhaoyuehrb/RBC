%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCUGAAAGCAGGGGCGGGACCGGGGCGGUCUUCCAGCAGGGAAAAUGGCGCUGGCCAUGCUGGUCUUGGUGGUUUCGCCGUGGUCUGCGGCCCGGGGAGUGCUUCGAAACUACUGGGAGCGACUGCUACGGAAGCUUCCGCAGA\
) } def
/len { sequence length } bind def

/coor [
[82.19882965 151.87236023]
[81.40319824 136.89347839]
[73.91374969 137.29130554]
[68.91665649 151.43446350]
[63.91955948 165.57762146]
[58.92246246 179.72077942]
[59.34677505 196.66941833]
[43.17795563 201.76899719]
[33.80169678 187.64376831]
[44.77930069 174.72369385]
[49.77639771 160.58052063]
[54.77349472 146.43736267]
[59.77059174 132.29420471]
[56.29988098 117.70125580]
[45.47053909 107.32217407]
[34.64119720 96.94309235]
[19.32433891 92.98020172]
[15.48954582 78.58771515]
[4.66020489 68.20863342]
[-6.27868271 57.94507217]
[-17.32588387 47.79818344]
[-28.37308693 37.65129471]
[-39.42028809 27.50440788]
[-50.46749115 17.35752106]
[-61.51469040 7.21063280]
[-76.91220856 3.57374740]
[-81.05162811 -10.73410034]
[-92.09883118 -20.88098907]
[-103.14602661 -31.02787590]
[-114.19322968 -41.17476273]
[-125.24043274 -51.32165146]
[-136.87493896 -48.50339890]
[-148.29994202 -51.65098572]
[-156.67771912 -59.86157608]
[-159.98631287 -70.99018860]
[-157.50679016 -82.20917511]
[-168.11340332 -92.81577301]
[-178.72000122 -103.42237854]
[-193.94929504 -107.70947266]
[-197.47773743 -122.18011475]
[-208.08433533 -132.78671265]
[-218.69093323 -143.39331055]
[-229.29754639 -153.99992371]
[-239.90414429 -164.60652161]
[-257.65737915 -161.21592712]
[-273.77468872 -169.04402161]
[-281.94195557 -184.81626892]
[-279.08419800 -202.18783569]
[-290.13140869 -212.33473206]
[-301.17858887 -222.48161316]
[-312.22579956 -232.62849426]
[-323.27301025 -242.77539062]
[-339.38824463 -245.81362915]
[-344.55859375 -261.37637329]
[-333.46524048 -273.45404053]
[-317.52008057 -269.62213135]
[-313.12612915 -253.82258606]
[-302.07891846 -243.67570496]
[-291.03170776 -233.52880859]
[-279.98449707 -223.38192749]
[-268.93731689 -213.23503113]
[-257.45013428 -217.39572144]
[-245.21434021 -216.24359131]
[-234.58108521 -209.93789673]
[-227.62010193 -199.63406372]
[-225.71693420 -187.27246094]
[-229.29754639 -175.21311951]
[-218.69093323 -164.60652161]
[-208.08433533 -153.99992371]
[-197.47773743 -143.39331055]
[-186.87113953 -132.78671265]
[-172.40049744 -129.25827026]
[-168.11340332 -114.02897644]
[-157.50679016 -103.42237854]
[-146.90019226 -92.81577301]
[-128.68038940 -93.96139526]
[-115.12931061 -81.25960541]
[-115.09354401 -62.36885452]
[-104.04634094 -52.22196579]
[-92.99914551 -42.07507706]
[-81.95194244 -31.92819023]
[-70.90473938 -21.78130150]
[-56.29738998 -18.87018967]
[-51.36780548 -3.83656883]
[-40.32060242 6.31031895]
[-29.27339935 16.45720673]
[-18.22619820 26.60409546]
[-7.17899656 36.75098419]
[3.86820507 46.89786911]
[10.97120380 49.12160110]
[15.03928757 57.37929535]
[25.86862946 67.75837708]
[40.41090012 70.97888184]
[45.02027893 86.11374664]
[55.84962082 96.49282837]
[66.67896271 106.87191010]
[93.79466248 73.85083771]
[119.05207062 94.87847137]
[133.93057251 96.78373718]
[148.60174561 90.86197662]
[160.24316406 100.15319824]
[175.12167358 102.05846405]
[190.00016785 103.96372986]
[204.89807129 105.71098328]
[219.81365967 107.30001831]
[234.72924805 108.88905334]
[249.64485168 110.47808838]
[264.56045532 112.06712341]
[273.54077148 99.60722351]
[287.55450439 93.32143402]
[302.83200073 94.90061188]
[315.26367188 103.91996002]
[321.50552368 117.95331573]
[319.87844849 133.22578430]
[310.82019043 145.62915039]
[296.76733398 151.82695007]
[281.50003052 150.15203857]
[269.12515259 141.05493164]
[262.97140503 126.98271942]
[248.05581665 125.39368439]
[233.14021301 123.80464935]
[218.22462463 122.21561432]
[203.30902100 120.62657166]
[196.27593994 123.06237793]
[188.09490967 118.84223938]
[173.21640015 116.93696594]
[158.33789062 115.03170013]
[144.73092651 121.08974457]
[132.02531433 111.66224670]
[117.14680481 109.75697327]
[119.19010925 118.81553650]
[117.40572357 129.23277283]
[123.87297058 142.76698303]
[130.34020996 156.30119324]
[136.80746460 169.83540344]
[150.62779236 178.66322327]
[149.62263489 195.03153992]
[134.82600403 202.10202026]
[121.45940399 192.60116577]
[123.27325439 176.30264282]
[116.80600739 162.76843262]
[110.33876801 149.23423767]
[103.87152100 135.70002747]
[96.38208008 136.09783936]
[97.17771912 151.07672119]
[102.56296539 165.07669067]
[90.91222382 174.52445984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[6 10]
[14 96]
[15 95]
[16 94]
[18 92]
[19 91]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[36 75]
[37 74]
[38 73]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[98 130]
[99 129]
[101 127]
[102 126]
[103 125]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
