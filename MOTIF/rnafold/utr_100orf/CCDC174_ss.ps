%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGACACUUCCGGUUGCGACGGAGGUAGGCUUACGAGGCCUGUGUCGGGUAGAAAGGGUCCUUCCUGGACCGGGACCCUCUGCCACGACCAUGGACCGUAGGAAAAAGCCUUUGGACGUCACGGCCUCCUCGUUGGUAGAUCUUAAGGCUGAACUCUUCCGAAAGCAAGAAGAAUUCAAACAAGAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[148.21273804 449.85366821]
[145.04606628 435.19171143]
[141.87939453 420.52978516]
[131.16189575 416.56369019]
[123.61733246 407.82119751]
[121.21245575 396.40399170]
[124.65962219 385.13156128]
[133.21116638 376.84515381]
[130.52590942 362.08749390]
[127.84066010 347.32980347]
[125.15541077 332.57211304]
[122.46382141 330.27102661]
[120.76053619 326.54507446]
[120.70611572 321.87649536]
[122.71915436 317.02560425]
[120.76126099 302.15393066]
[118.80336761 287.28225708]
[116.84547424 272.41058350]
[103.08091736 262.76010132]
[100.49629211 245.80786133]
[111.17153931 231.95904541]
[108.97058105 217.12139893]
[106.76963043 202.28375244]
[104.56867218 187.44610596]
[102.36771393 172.60845947]
[100.16675568 157.77081299]
[96.06880951 151.60574341]
[98.05323792 142.67259216]
[96.09534454 127.80091858]
[75.92031097 114.43280792]
[73.64113617 90.33834076]
[61.44843674 81.60117340]
[49.25573349 72.86400604]
[37.06303406 64.12683868]
[24.87033463 55.38967514]
[18.31340599 54.35878754]
[13.92919159 50.71099854]
[12.42796516 46.16178513]
[0.52766520 37.03036499]
[-11.44694233 27.99660683]
[-23.49505424 19.06111717]
[-35.61586761 10.22449303]
[-47.80856705 1.48732793]
[-56.62235260 -0.97361982]
[-60.12770462 -7.49388266]
[-72.17581940 -16.42937279]
[-84.22393036 -25.36486244]
[-96.27204132 -34.30035019]
[-108.39285278 -43.13697433]
[-120.58555603 -51.87414169]
[-132.77825928 -60.61130524]
[-144.97096252 -69.34847260]
[-157.16365051 -78.08563995]
[-169.35635376 -86.82279968]
[-175.91328430 -87.85369110]
[-180.29750061 -91.50148010]
[-181.79872131 -96.05068970]
[-193.69902039 -105.18211365]
[-205.59931946 -114.31353760]
[-217.49961853 -123.44495392]
[-229.39993286 -132.57637024]
[-241.30023193 -141.70779419]
[-253.20053101 -150.83921814]
[-267.68322754 -145.52365112]
[-282.73565674 -148.90412903]
[-293.55465698 -159.90197754]
[-296.68792725 -175.00781250]
[-291.13565063 -189.40141296]
[-278.66952515 -198.48983765]
[-263.26748657 -199.37300110]
[-249.84420776 -191.76910400]
[-242.68304443 -178.10449219]
[-244.06910706 -162.73951721]
[-232.16880798 -153.60809326]
[-220.26850891 -144.47668457]
[-208.36820984 -135.34526062]
[-196.46791077 -126.21383667]
[-184.56761169 -117.08241272]
[-172.66729736 -107.95098877]
[-160.61918640 -99.01550293]
[-148.42648315 -90.27833557]
[-136.23379517 -81.54116821]
[-124.04109192 -72.80400848]
[-111.84838867 -64.06684113]
[-99.65569305 -55.32967377]
[-92.37569427 -53.98693085]
[-87.33655548 -46.34846497]
[-75.28843689 -37.41297531]
[-63.24032593 -28.47748566]
[-51.19221497 -19.54199600]
[-39.07140350 -10.70537281]
[-26.87870216 -1.96820688]
[-19.59870529 -0.62546235]
[-14.55956554 7.01300383]
[-2.51145244 15.94849300]
[4.74559927 17.41017151]
[9.65908623 25.13006401]
[21.55938721 34.26148605]
[33.60749817 43.19697571]
[45.80020142 51.93413925]
[57.99290085 60.67130661]
[70.18560028 69.40847015]
[82.37830353 78.14563751]
[89.64688110 73.90497589]
[97.84571075 72.00899506]
[106.23810577 72.62805176]
[114.06999207 75.70652771]
[120.63767242 80.96781921]
[133.98040771 74.11425781]
[147.32315063 67.26070404]
[160.66589355 60.40714264]
[174.00863647 53.55358505]
[187.35137939 46.70002747]
[196.09164429 33.51222229]
[210.94796753 34.57953644]
[224.29071045 27.72597694]
[237.63345337 20.87241936]
[241.54632568 15.51094055]
[246.79425049 13.27780151]
[251.52676392 14.02098942]
[265.08660889 7.60766363]
[268.16021729 -2.84714270]
[276.31838989 -9.73575115]
[286.70388794 -10.96230412]
[295.84951782 -6.36095619]
[309.61193848 -12.32718277]
[323.37435913 -18.29340935]
[326.61782837 -33.46771622]
[338.18356323 -43.81245804]
[353.62426758 -45.34986877]
[367.00274658 -37.48878860]
[373.17462158 -23.25195694]
[369.76675415 -8.11372948]
[358.08947754 2.10493779]
[342.63299561 3.47475767]
[329.34060669 -4.53099298]
[315.57818604 1.43523431]
[301.81576538 7.40146160]
[291.48364258 23.73469162]
[271.49993896 21.16750336]
[257.94009399 27.58082962]
[244.48699951 34.21516037]
[231.14427185 41.06871796]
[217.80152893 47.92227554]
[210.01560974 60.61986923]
[194.20494080 60.04276657]
[180.86219788 66.89632416]
[167.51945496 73.74988556]
[154.17671204 80.60343933]
[140.83396912 87.45700073]
[127.49123383 94.31056213]
[127.80181122 103.89830780]
[124.86631012 113.03089142]
[119.02746582 120.64202118]
[110.96701813 125.84302521]
[112.92491150 140.71470642]
[115.00440216 155.56985474]
[117.20536041 170.40750122]
[119.40631866 185.24514771]
[121.60727692 200.08279419]
[123.80823517 214.92044067]
[126.00918579 229.75810242]
[137.68672180 236.48931885]
[143.26911926 248.54339600]
[140.91941833 261.42004395]
[131.71714783 270.45266724]
[133.67504883 285.32434082]
[135.63293457 300.19601440]
[137.59083557 315.06768799]
[139.91310120 329.88684082]
[142.59835815 344.64453125]
[145.28359985 359.40222168]
[147.96885681 374.15991211]
[163.94187927 384.32369995]
[167.37130737 402.61856079]
[156.54132080 417.36312866]
[159.70800781 432.02505493]
[162.87467957 446.68698120]
[177.83627319 449.37377930]
[190.62811279 457.58581543]
[199.29949951 470.07080078]
[202.52813721 484.92489624]
[199.82167053 499.88296509]
[191.59281921 512.66400146]
[179.09642029 521.31896973]
[164.23808289 524.52801514]
[149.28359985 521.80187988]
[136.51341248 513.55621338]
[127.87490082 501.04846191]
[124.68535614 486.18591309]
[127.43116760 471.23504639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 178]
[2 177]
[3 176]
[8 173]
[9 172]
[10 171]
[11 170]
[15 169]
[16 168]
[17 167]
[18 166]
[21 162]
[22 161]
[23 160]
[24 159]
[25 158]
[26 157]
[28 156]
[29 155]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[38 98]
[39 97]
[40 95]
[41 94]
[42 92]
[43 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[108 151]
[109 150]
[110 149]
[111 148]
[112 147]
[113 146]
[115 144]
[116 143]
[117 142]
[120 141]
[121 140]
[125 138]
[126 137]
[127 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
