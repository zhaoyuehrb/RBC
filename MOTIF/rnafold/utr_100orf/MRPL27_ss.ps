%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCGAGACCGGAAGUGAGUGAUCGAAAGCAUGGCGUCGGUGGUGUUGGCGCUGAGGACCCGGACAGCCGUUACAUCCUUGCUAAGCCCCACUCCGGCUACAGCUCUUGCUGUCAGAUACGCAUCCAAGA\
) } def
/len { sequence length } bind def

/coor [
[83.22647858 498.63442993]
[70.16264343 506.32287598]
[55.25649261 509.07647705]
[40.30801010 506.56277466]
[27.12230492 499.08526611]
[17.29161072 487.54693604]
[12.00303364 473.34106445]
[11.89519405 458.18310547]
[16.98111343 443.90341187]
[26.64664459 432.22637939]
[39.72462845 424.56201172]
[54.63582993 421.83587646]
[57.12327957 407.04357910]
[59.61072922 392.25125122]
[54.09112167 378.41711426]
[64.00977325 366.09109497]
[66.49722290 351.29879761]
[68.98467255 336.50646973]
[57.48128128 322.35763550]
[59.91664124 303.96640015]
[75.21977234 292.92852783]
[77.00055695 278.03460693]
[78.78134155 263.14068604]
[80.56212616 248.24678040]
[81.98796844 233.31469727]
[83.05805969 218.35292053]
[84.12814331 203.39112854]
[77.31851196 190.14431763]
[86.02059174 176.93127441]
[87.09068298 161.96949768]
[88.16076660 147.00772095]
[85.47393036 140.04380798]
[89.43852234 131.70397949]
[90.86436462 116.77189636]
[81.72020721 105.53220367]
[83.09751892 91.10829163]
[94.20355988 81.80226898]
[95.62940216 66.87018585]
[97.05523682 51.93810654]
[98.48107910 37.00603104]
[99.90692139 22.07394981]
[97.59229279 13.13453007]
[101.54850769 6.80495071]
[103.32929230 -8.08896732]
[105.11007690 -22.98288536]
[106.89086914 -37.87680435]
[99.52045441 -48.53905869]
[101.37210846 -60.96141434]
[110.90187836 -68.51043701]
[113.03660583 -83.35775757]
[115.17132568 -98.20507812]
[116.77475739 -113.11913300]
[117.84484100 -128.08091736]
[115.31813812 -136.96272278]
[119.12259674 -143.38465881]
[120.54843903 -158.31674194]
[121.97428131 -173.24880981]
[123.40011597 -188.18089294]
[124.82595825 -203.11297607]
[111.21482086 -217.76649475]
[112.58947754 -237.41703796]
[127.64096069 -249.65270996]
[127.99792480 -264.64846802]
[128.35488892 -279.64422607]
[120.02499390 -293.77026367]
[128.32801819 -307.91210938]
[144.72251892 -307.52185059]
[152.34324646 -293.00094604]
[143.35064697 -279.28726196]
[142.99368286 -264.29150391]
[142.63671875 -249.29574585]
[151.59648132 -243.95263672]
[157.53340149 -235.27609253]
[159.29537964 -224.82905579]
[156.48995972 -214.52835083]
[149.56913757 -206.29310608]
[139.75804138 -201.68713379]
[138.33219910 -186.75505066]
[136.90635681 -171.82296753]
[135.48051453 -156.89089966]
[134.05467224 -141.95881653]
[132.80662537 -127.01082611]
[131.73654175 -112.04904938]
[133.84497070 -109.10847473]
[134.57836914 -104.97079468]
[133.37652588 -100.32015991]
[130.01864624 -96.07035828]
[127.88392639 -81.22303772]
[125.74920654 -66.37571716]
[133.16387939 -50.51599884]
[121.78478241 -36.09601974]
[120.00399780 -21.20209885]
[118.22321320 -6.30818129]
[116.44242859 8.58573723]
[114.83899689 23.49979210]
[113.41316223 38.43186951]
[111.98731995 53.36394882]
[110.56147766 68.29602814]
[109.13563538 83.22810364]
[118.27979279 94.46779633]
[116.90248108 108.89170837]
[105.79644012 118.19773102]
[104.37059784 133.12980652]
[103.12255096 148.07780457]
[102.05245972 163.03958130]
[100.98237610 178.00135803]
[107.71546936 192.31834412]
[99.08992767 204.46122742]
[98.01983643 219.42300415]
[96.94975281 234.38478088]
[99.55160522 240.63438416]
[98.66692352 246.37281799]
[95.45604706 250.02755737]
[93.67526245 264.92147827]
[91.89447784 279.81539917]
[90.11369324 294.70932007]
[99.22141266 302.52944946]
[103.33779144 313.67767334]
[101.53459930 325.30203247]
[94.38230133 334.48910522]
[83.77699280 338.99392700]
[81.28954315 353.78622437]
[78.80209351 368.57855225]
[84.14378357 383.47073364]
[74.40304565 394.73870850]
[71.91559601 409.53100586]
[69.42814636 424.32333374]
[82.62760925 431.77651978]
[92.47954559 443.29672241]
[97.79429626 457.49282837]
[97.93006897 472.65057373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 127]
[13 126]
[14 125]
[16 123]
[17 122]
[18 121]
[21 116]
[22 115]
[23 114]
[24 113]
[25 110]
[26 109]
[27 108]
[29 106]
[30 105]
[31 104]
[33 103]
[34 102]
[37 99]
[38 98]
[39 97]
[40 96]
[41 95]
[43 94]
[44 93]
[45 92]
[46 91]
[49 89]
[50 88]
[51 87]
[52 83]
[53 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
