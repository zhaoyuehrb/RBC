%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCAGAGGGCUGGGGCUGCCAUGCUGCCUUCAGCUCUGCUCCUUCUCUGUGUCCCAGGCUGUCUGACUGUGAGUGGCCCCAGCACCGUGAUGGGCG\
) } def
/len { sequence length } bind def

/coor [
[98.26885223 421.98120117]
[83.94561005 415.70596313]
[77.05340576 401.66915894]
[80.84651184 386.49859619]
[93.53394318 377.35729980]
[94.46649170 362.38632202]
[95.39903259 347.41534424]
[96.33158112 332.44436646]
[83.42098999 319.65133667]
[83.78818512 301.16510010]
[97.66048431 288.47009277]
[97.66048431 273.47009277]
[97.42720795 258.47189331]
[96.96070862 243.47915649]
[96.49421692 228.48640442]
[96.02771759 213.49366760]
[95.56121826 198.50091553]
[95.09471893 183.50817871]
[94.62821960 168.51542664]
[94.16172791 153.52268982]
[93.69522858 138.52993774]
[93.22872925 123.53720093]
[92.76222992 108.54445648]
[92.06262207 93.56078339]
[91.13008118 78.58979797]
[90.19753265 63.61881256]
[76.28148651 59.84851837]
[64.24252319 51.95462799]
[55.26391220 40.72902298]
[50.22314453 27.29023743]
[49.60619354 12.97202969]
[53.46069336 -0.80900550]
[61.39255142 -12.69357872]
[72.60619354 -21.51378059]
[85.98434448 -26.40785217]
[85.51784515 -41.40059662]
[85.05134583 -56.39334106]
[84.58484650 -71.38608551]
[81.14006805 -80.04207611]
[84.34431458 -86.85076904]
[84.34431458 -101.85076904]
[84.34431458 -116.85076904]
[70.09164429 -122.01189423]
[58.46571350 -131.73884583]
[50.87041473 -144.85704041]
[48.22290802 -159.78240967]
[50.84290314 -174.71263123]
[58.41401672 -187.84480286]
[70.02200317 -197.59317017]
[84.26513672 -202.78054810]
[99.42349243 -202.78054810]
[113.66662598 -197.59317017]
[125.27461243 -187.84480286]
[132.84571838 -174.71263123]
[135.46571350 -159.78240967]
[132.81822205 -144.85704041]
[125.22291565 -131.73884583]
[113.59698486 -122.01189423]
[99.34431458 -116.85076904]
[99.34431458 -101.85076904]
[99.34431458 -86.85076904]
[99.57759094 -71.85258484]
[100.04409027 -56.85984039]
[100.51058960 -41.86709595]
[100.97708893 -26.87434959]
[115.92058563 -22.18219566]
[128.39430237 -12.66551304]
[136.89613342 0.55254513]
[140.39454651 15.90176392]
[138.45362854 31.55138588]
[131.28736877 45.62847519]
[119.73620605 56.44206238]
[105.16851807 62.68626785]
[106.10106659 77.65724945]
[107.03360748 92.62823486]
[110.69341278 99.98356628]
[107.75497437 108.07795715]
[108.22147369 123.07070160]
[108.68797302 138.06344604]
[109.15446472 153.05619812]
[109.62096405 168.04893494]
[110.08746338 183.04168701]
[110.55396271 198.03442383]
[111.02046204 213.02717590]
[111.48696136 228.01991272]
[111.95345306 243.01264954]
[112.41995239 258.00540161]
[115.86473083 266.66137695]
[112.66048431 273.47009277]
[112.66048431 288.47009277]
[122.70535278 295.21459961]
[128.11645508 305.90078735]
[127.61801910 317.74737549]
[121.45545959 327.73526001]
[111.30255890 333.37689209]
[110.37001801 348.34786987]
[109.43746948 363.31887817]
[108.50492859 378.28985596]
[119.95986938 388.93496704]
[121.84100342 404.45898438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 98]
[6 97]
[7 96]
[8 95]
[11 90]
[12 89]
[13 87]
[14 86]
[15 85]
[16 84]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 75]
[25 74]
[26 73]
[35 65]
[36 64]
[37 63]
[38 62]
[40 61]
[41 60]
[42 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
