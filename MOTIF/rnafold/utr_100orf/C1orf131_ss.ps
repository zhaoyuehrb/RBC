%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCGCAGUCGCGGAACCCGGAAGCGGGGGUGCAGCGCGGCAGAAUGAGGGUUGAUUCCUCGGCUGACCCCACAAUGUCGCAGGAGCAAGGGCCGGGGUCCUCCACGCCUCCCAGUUCUCCGACACUUCUUGACGCUCUGCUCC\
) } def
/len { sequence length } bind def

/coor [
[8.51529884 229.40235901]
[13.58063316 237.94081116]
[15.94087410 248.81437683]
[14.80227661 261.14462280]
[8.87743759 274.92492676]
[2.95259809 288.70520020]
[-2.97224116 302.48550415]
[-0.51277441 318.69915771]
[-13.49164867 328.72317505]
[-28.55731201 322.24569702]
[-30.21150017 305.93017578]
[-16.75252724 296.56063843]
[-10.82768822 282.78036499]
[-4.90284824 269.00009155]
[1.02199090 255.21978760]
[-4.58365583 250.23715210]
[-18.81939507 254.96406555]
[-15.79494953 240.27186584]
[-21.40059662 235.28923035]
[-34.39097977 242.78923035]
[-47.38135910 250.28923035]
[-60.37173843 257.78921509]
[-68.09825897 272.25411987]
[-84.49517059 272.52468872]
[-92.69474792 258.32260132]
[-84.26195526 244.25776672]
[-67.87174225 244.79884338]
[-54.88135910 237.29884338]
[-41.89097977 229.79884338]
[-28.90059662 222.29884338]
[-17.68930244 212.33355713]
[-8.71764469 200.31236267]
[-7.30610752 185.48478699]
[7.14869881 179.05290222]
[16.12035751 167.03169250]
[25.09201431 155.01049805]
[34.06367111 142.98928833]
[35.47520828 128.16171265]
[49.93001556 121.72983551]
[58.90167618 109.70862579]
[58.10062790 94.73003387]
[47.89803696 83.73425293]
[37.57853317 72.84812164]
[27.14329529 62.07288361]
[16.70805740 51.29764557]
[3.80229044 50.29788589]
[-4.66951323 41.04874039]
[-4.54267979 28.90851402]
[-14.74527073 17.91273499]
[-24.94786263 6.91695738]
[-35.15045166 -4.07882071]
[-45.35304260 -15.07459927]
[-55.55563354 -26.07037735]
[-71.46918488 -28.10469627]
[-79.67715454 -41.88906479]
[-73.88309479 -56.84929276]
[-58.53170776 -61.50917435]
[-45.39926910 -52.29404449]
[-44.55985641 -36.27296829]
[-34.35726547 -25.27718925]
[-24.15467453 -14.28141212]
[-13.95208359 -3.28563380]
[-3.74949265 7.71014452]
[6.45309830 18.70592308]
[23.45554352 22.92776489]
[27.48329735 40.86240768]
[37.91853714 51.63764572]
[48.35377502 62.41288757]
[55.31578445 65.04837036]
[58.89381409 73.53166199]
[69.09640503 84.52744293]
[75.49513245 76.55523682]
[83.80640411 70.94036102]
[93.22272491 68.09152985]
[102.86802673 68.15538788]
[111.87902832 71.01287842]
[119.48246002 76.29990387]
[125.06140137 83.44947052]
[139.24591064 78.57099915]
[153.43043518 73.69252777]
[167.61495972 68.81405640]
[181.79946899 63.93558884]
[188.17984009 52.67285156]
[200.14944458 48.92495728]
[211.08926392 54.19008255]
[225.37480164 49.61584473]
[239.66032410 45.04161072]
[253.94586182 40.46737289]
[268.23138428 35.89313507]
[274.85098267 24.76931953]
[286.89794922 21.27807045]
[297.72274780 26.77577209]
[312.10278320 22.50785828]
[326.48278809 18.23994446]
[333.33859253 7.26012754]
[345.45739746 4.02711535]
[356.16226196 9.75488663]
[370.63018799 5.79524469]
[381.89840698 -5.31052351]
[396.21667480 -1.20736706]
[410.68463135 -5.16700888]
[419.84887695 -18.33500099]
[435.86657715 -19.23638535]
[446.45034790 -7.17969513]
[443.48117065 8.58620644]
[429.23681641 15.96707058]
[414.64425659 9.30092907]
[400.17633057 13.26057148]
[389.94296265 24.08311844]
[374.58984375 20.26318359]
[360.12188721 24.22282410]
[348.51452637 37.34441757]
[330.75070190 32.61996460]
[316.37069702 36.88787842]
[301.99066162 41.15579224]
[290.66635132 54.52243042]
[272.80563354 50.17866516]
[258.52008057 54.75290298]
[244.23455811 59.32714081]
[229.94903564 63.90137482]
[215.66349792 68.47560883]
[204.62742615 82.08119965]
[186.67793274 78.12010193]
[172.49342346 82.99857330]
[158.30889893 87.87704468]
[144.12438965 92.75551605]
[129.93986511 97.63398743]
[129.95967102 105.64012909]
[127.84489441 113.48569489]
[123.68363190 120.60355377]
[117.71401215 126.46249390]
[110.31120300 130.60665894]
[101.96414185 132.69067383]
[93.24333954 132.50759888]
[84.76190948 130.00776672]
[77.13245392 125.30650330]
[70.92288208 118.68029022]
[61.95122147 130.70149231]
[59.89796829 146.38890076]
[46.08487701 151.96095276]
[37.11322021 163.98214722]
[28.14156151 176.00335693]
[19.16990280 188.02456665]
[17.11665344 203.71195984]
[3.30355930 209.28401184]
[-5.66809845 221.30522156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[19 30]
[20 29]
[21 28]
[22 27]
[31 146]
[32 145]
[34 143]
[35 142]
[36 141]
[37 140]
[39 138]
[40 137]
[41 71]
[42 70]
[43 68]
[44 67]
[45 66]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[78 127]
[79 126]
[80 125]
[81 124]
[82 123]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[92 115]
[93 114]
[94 113]
[97 111]
[98 110]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
