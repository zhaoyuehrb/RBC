%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCGCCGGCCGCGUCCUCCGGGCAUGGAAGGAGGCGGCAAGCCCAACUCUUCGUCUAACAGCCGGGACGAUGGCAACAGCGUCUUCCCCGCCAAGGCGUCCGCGACGGGCGCGGGGCCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[98.95037842 441.56875610]
[83.47669220 440.40917969]
[71.66160583 430.35018921]
[68.04825592 415.25967407]
[74.02605438 400.94024658]
[87.29641724 392.89804077]
[88.41737366 377.94000244]
[89.53832245 362.98193359]
[90.65927124 348.02386475]
[91.78022766 333.06582642]
[92.90117645 318.10775757]
[94.02212524 303.14971924]
[94.76981354 288.16836548]
[95.14377594 273.17300415]
[95.51773834 258.17767334]
[95.89169312 243.18234253]
[96.26565552 228.18699646]
[96.63961792 213.19166565]
[96.82661438 198.19282532]
[96.82661438 183.19282532]
[96.63961792 168.19400024]
[96.26565552 153.19865417]
[95.89169312 138.20332336]
[95.51773834 123.20798492]
[95.14377594 108.21264648]
[91.63896942 108.23165894]
[87.90435791 106.90002441]
[84.42098999 104.13139343]
[81.69032288 100.00061798]
[68.51700592 92.82680511]
[55.34367752 85.65299988]
[42.17035675 78.47918701]
[28.99703217 71.30538177]
[7.73587322 73.31701660]
[-2.61180568 55.52956390]
[-16.28439331 49.36026001]
[-29.95698166 43.19095230]
[-45.41114044 47.49775314]
[-58.32891846 37.98404694]
[-58.80089951 21.94793701]
[-46.46502304 11.69095516]
[-30.78431511 15.08137798]
[-23.78767395 29.51836395]
[-10.11508656 35.68767166]
[3.55750084 41.85697556]
[11.41157532 37.32117462]
[20.61317444 36.96706390]
[29.04280472 41.00555801]
[34.69850159 48.62087631]
[36.17084122 58.13205719]
[49.34416580 65.30586243]
[62.51748657 72.47967529]
[75.69081116 79.65348816]
[88.86413574 86.82729340]
[103.60263062 84.03862000]
[113.24444580 72.54795074]
[122.88626099 61.05728912]
[132.52807617 49.56661987]
[129.18278503 38.02245712]
[131.84945679 26.42660522]
[139.74003601 17.68253899]
[150.77384949 13.92095947]
[162.12519836 15.98127460]
[172.32778931 4.98549652]
[176.04244995 -10.39344597]
[190.37103271 -14.46049595]
[200.57362366 -25.45627403]
[210.77621460 -36.45205307]
[220.97880554 -47.44783020]
[224.69346619 -62.82677460]
[239.02204895 -66.89382172]
[249.22463989 -77.88960266]
[259.42724609 -88.88537598]
[269.62982178 -99.88115692]
[267.50598145 -115.37384033]
[275.88125610 -128.57948303]
[290.80105591 -133.26278687]
[305.22073364 -127.21243286]
[312.33175659 -113.28521729]
[308.77651978 -98.05714417]
[296.23367310 -88.71844482]
[280.62561035 -89.67856598]
[270.42300415 -78.68278503]
[260.22042847 -67.68701172]
[250.01783752 -56.69123077]
[247.03292847 -42.09878159]
[231.97457886 -37.24523926]
[221.77198792 -26.24946022]
[211.56939697 -15.25368309]
[201.36680603 -4.25790501]
[198.38191223 10.33454609]
[183.32356262 15.18808746]
[173.12097168 26.18386650]
[174.97123718 44.31559753]
[162.85801697 58.35430527]
[144.01873779 59.20843506]
[134.37692261 70.69910431]
[124.73511505 82.18976593]
[115.09329987 93.68043518]
[110.13911438 107.83868408]
[110.51307678 122.83402252]
[110.88703156 137.82936096]
[111.26099396 152.82469177]
[111.63495636 167.82003784]
[115.00765228 176.42994690]
[111.82661438 183.19282532]
[111.82661438 198.19282532]
[114.98361206 206.88415527]
[111.63495636 213.56562805]
[111.26099396 228.56095886]
[110.88703156 243.55630493]
[110.51307678 258.55163574]
[110.13911438 273.54696655]
[109.76515198 288.54232788]
[112.66320801 294.68258667]
[112.03607941 300.47073364]
[108.98018646 304.27066040]
[107.85923004 319.22872925]
[106.73828125 334.18676758]
[105.61733246 349.14483643]
[104.49637604 364.10287476]
[103.37542725 379.06094360]
[102.25447845 394.01901245]
[114.17798615 403.94921875]
[117.95482635 418.99966431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[12 117]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[18 109]
[19 107]
[20 106]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[35 45]
[36 44]
[37 43]
[55 99]
[56 98]
[57 97]
[58 96]
[63 93]
[64 92]
[66 90]
[67 89]
[68 88]
[69 87]
[71 85]
[72 84]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
