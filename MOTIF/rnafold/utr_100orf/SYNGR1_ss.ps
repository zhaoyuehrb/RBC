%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCACGCGCACGGGCCGGCGGCGCGCGCCGAGCGGGGGGCACCGCGCGGGUGCAGCCACGAUGGAAGGGGGUGCGUACGGAGCGGGCAAAGCCGGGGGCGCCUUCGACCCCUACACCCUGGUCCGGCAGCCGCACACCAUCCUGCGCGUCGUGUCUUGGC\
) } def
/len { sequence length } bind def

/coor [
[19.48181343 622.83544922]
[17.46422195 607.97174072]
[15.44662952 593.10803223]
[13.42903805 578.24438477]
[9.39387417 572.00939941]
[11.51865292 563.07507324]
[9.78789520 548.17523193]
[8.05713654 533.27545166]
[6.32637835 518.37561035]
[4.59562063 503.47583008]
[2.86486220 488.57598877]
[1.13410413 473.67617798]
[-2.78014755 467.36459351]
[-0.48357797 458.47290039]
[-1.92685974 443.54251099]
[-3.37014151 428.61209106]
[-19.97327042 420.13684082]
[-28.23016739 403.25778198]
[-24.67363167 384.65512085]
[-10.55188179 371.81149292]
[-12.85555744 356.98944092]
[-15.15923214 342.16738892]
[-17.46290779 327.34536743]
[-19.76658440 312.52331543]
[-31.29844093 302.93078613]
[-46.29217148 303.36437988]
[-61.28590393 303.79797363]
[-76.27964020 304.23156738]
[-84.81468964 307.62118530]
[-91.56589508 304.52624512]
[-106.56520081 304.67077637]
[-121.56450653 304.81533813]
[-135.28947449 312.68527222]
[-148.09071350 305.07098389]
[-163.09001160 305.21551514]
[-178.08932495 305.36007690]
[-193.08862305 305.50460815]
[-203.97541809 316.96121216]
[-219.77647400 317.28057861]
[-231.11732483 306.27325439]
[-231.26962280 290.46972656]
[-220.14302063 279.24588013]
[-204.33874512 279.26068115]
[-193.23316956 290.50531006]
[-178.23387146 290.36077881]
[-163.23457336 290.21621704]
[-148.23526001 290.07165527]
[-135.58314514 282.21206665]
[-121.70905304 289.81604004]
[-106.70974731 289.67147827]
[-91.71044922 289.52694702]
[-76.71323395 289.23785400]
[-61.71950150 288.80426025]
[-46.72576904 288.37066650]
[-31.73203659 287.93707275]
[-23.05893707 268.95977783]
[-5.03558683 264.43856812]
[1.39815009 250.88839722]
[7.83188677 237.33822632]
[-7.00240421 239.56169128]
[-18.12351418 229.49586487]
[-17.38513374 214.51405334]
[-5.32813311 205.59056091]
[9.21563053 209.26191711]
[15.59272099 222.83973694]
[23.30038643 209.97148132]
[31.00805283 197.10324097]
[27.14679337 182.76356506]
[34.78015137 169.60353088]
[49.84709930 165.65071106]
[57.55476761 152.78245544]
[65.26243591 139.91421509]
[72.97010040 127.04595947]
[80.67776489 114.17770386]
[88.38542938 101.30945587]
[92.24443817 86.81435394]
[91.95535278 71.81713867]
[91.66626740 56.81992340]
[81.14906311 44.70513916]
[84.20498657 28.95582581]
[98.48979950 21.65350914]
[113.04540253 28.39990044]
[116.70600128 44.01974487]
[106.66348267 56.53083801]
[106.95256805 71.52805328]
[107.24165344 86.52526855]
[122.01654816 89.11417389]
[127.38757324 75.10874176]
[132.75859070 61.10330582]
[132.78463745 44.14937973]
[149.08320618 39.48109436]
[158.08094788 53.85039902]
[146.76402283 66.47432709]
[141.39300537 80.47975922]
[136.02198792 94.48519135]
[148.08891296 103.39526367]
[159.89323425 94.14010620]
[171.69755554 84.88494873]
[183.50187683 75.62978363]
[195.30619812 66.37462616]
[207.02078247 57.00614548]
[218.64454651 47.52520752]
[223.95834351 32.01083755]
[240.10095215 29.12149048]
[250.46623230 41.82947540]
[244.39128113 57.06190872]
[228.12548828 59.14896774]
[216.50172424 68.62990570]
[213.29066467 75.32666779]
[204.56135559 78.17894745]
[192.75703430 87.43410492]
[180.95271301 96.68927002]
[169.14839172 105.94442749]
[157.34407043 115.19958496]
[122.68654633 125.61099243]
[101.25368500 109.01712036]
[93.54601288 121.88537598]
[85.83834839 134.75363159]
[78.13068390 147.62187195]
[70.42301941 160.49012756]
[62.71535110 173.35838318]
[66.34091187 188.50740051]
[58.34093094 201.44784546]
[43.87630463 204.81089783]
[36.16863632 217.67915344]
[28.46097183 230.54740906]
[21.38205338 243.77195740]
[14.94831753 257.32214355]
[8.51458073 270.87228394]
[14.93328094 293.23504639]
[-4.94453669 310.21963501]
[-2.64086103 325.04168701]
[-0.33718556 339.86370850]
[1.96649003 354.68576050]
[4.27016544 369.50781250]
[15.30050278 372.91635132]
[24.20751190 380.18032837]
[29.71534157 390.20947266]
[31.05379295 401.52108765]
[28.06581879 412.45938110]
[21.22485161 421.43771362]
[11.56026173 427.16882324]
[13.00354385 442.09921265]
[14.44682503 457.02963257]
[16.03391838 471.94543457]
[17.76467705 486.84524536]
[19.49543571 501.74505615]
[21.22619247 516.64489746]
[22.95695114 531.54467773]
[24.68770981 546.44451904]
[26.41846848 561.34429932]
[28.29273033 576.22674561]
[30.31032181 591.09045410]
[32.32791138 605.95416260]
[34.34550476 620.81781006]
[48.07506180 628.04827881]
[54.90235901 641.98266602]
[52.20216370 657.26300049]
[41.01275253 668.01367188]
[25.63668633 670.10076904]
[11.98637199 662.72186279]
[5.31063700 648.71423340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 146]
[12 145]
[14 144]
[15 143]
[16 142]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 55]
[26 54]
[27 53]
[28 52]
[30 51]
[31 50]
[32 49]
[34 47]
[35 46]
[36 45]
[37 44]
[57 129]
[58 128]
[59 127]
[65 126]
[66 125]
[67 124]
[70 121]
[71 120]
[72 119]
[73 118]
[74 117]
[75 116]
[76 86]
[77 85]
[78 84]
[87 95]
[88 94]
[89 93]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
