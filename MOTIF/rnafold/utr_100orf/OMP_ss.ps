%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGAGGACAGGCCGCAGCAGCCGCAGCUGGACAUGCCGCUGGUCCUGGACCAGGGCCUGACCAGGCAGAUGCGGCUACGCGUGGAGAGCCUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[78.97650146 465.66180420]
[62.64870071 464.13375854]
[56.05498886 449.11859131]
[65.97840881 436.06265259]
[67.37609863 421.12789917]
[56.11547852 408.74493408]
[57.23136139 391.70870972]
[70.52297974 380.46697998]
[71.45552063 365.49600220]
[72.38806915 350.52502441]
[60.46198654 343.67901611]
[52.64290619 332.28625488]
[50.52295303 318.56466675]
[54.57787704 305.21609497]
[64.06181335 294.89413452]
[77.14374542 289.67684937]
[78.54143524 274.74209595]
[79.93912506 259.80737305]
[81.33680725 244.87263489]
[78.78093719 237.79498291]
[83.01728821 229.49763489]
[84.87876892 214.61358643]
[86.27645874 199.67884827]
[87.20899963 184.70787048]
[88.14154053 169.73687744]
[89.07408905 154.76589966]
[90.00662994 139.79492188]
[90.93917847 124.82393646]
[91.87171936 109.85295105]
[92.10500336 94.85475922]
[91.63850403 79.86202240]
[90.93889618 64.87834167]
[90.00634766 49.90736008]
[89.07380676 34.93637466]
[80.49352264 21.64392281]
[87.42460632 8.46024513]
[86.49205780 -6.51073885]
[77.91177368 -19.80319023]
[84.84285736 -32.98686981]
[83.91031647 -47.95785141]
[82.97776794 -62.92883682]
[79.26545715 -71.47350311]
[82.25640106 -78.37855530]
[81.78990936 -93.37129974]
[81.32341003 -108.36404419]
[80.85691071 -123.35678864]
[80.39041138 -138.34953308]
[79.92391205 -153.34228516]
[73.38790131 -168.98571777]
[86.61063385 -179.59681702]
[100.46747589 -169.82829285]
[94.91665649 -153.80877686]
[95.38315582 -138.81604004]
[95.84965515 -123.82328796]
[96.31615448 -108.83054352]
[96.78264618 -93.83779907]
[97.24914551 -78.84505463]
[97.94875336 -63.86138153]
[98.88130188 -48.89039612]
[99.81384277 -33.91941452]
[108.32742310 -21.69778633]
[101.46304321 -7.44328356]
[102.39559174 7.52770042]
[110.90917206 19.74932861]
[104.04479218 34.00382996]
[104.97733307 48.97481537]
[105.90988159 63.94579697]
[109.53121948 70.54211426]
[106.63124847 79.39552307]
[107.09774017 94.38826752]
[109.66817474 97.52725220]
[110.75658417 101.82670593]
[109.86067200 106.55707550]
[106.84270477 110.78549194]
[105.91016388 125.75647736]
[104.97761536 140.72746277]
[104.04507446 155.69844055]
[103.11252594 170.66943359]
[102.17998505 185.64041138]
[101.24743652 200.61140442]
[103.95864105 206.95713806]
[103.05816650 212.79656982]
[99.76281738 216.47506714]
[97.90132904 231.35911560]
[96.27155304 246.27032471]
[94.87386322 261.20504761]
[93.47617340 276.13980103]
[92.07848358 291.07455444]
[105.60977936 300.42929077]
[112.58432770 315.22463989]
[111.20536804 331.42965698]
[101.93809509 344.68096924]
[87.35904694 351.45758057]
[86.42650604 366.42855835]
[85.49395752 381.39953613]
[95.57540131 390.49017334]
[98.48165131 403.54980469]
[93.35865784 415.69714355]
[82.31083679 422.52560425]
[80.91314697 437.46032715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[8 95]
[9 94]
[10 93]
[16 88]
[17 87]
[18 86]
[19 85]
[21 84]
[22 83]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[30 70]
[31 69]
[32 67]
[33 66]
[34 65]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
