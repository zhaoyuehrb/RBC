%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGGCAUGUCGUGACCCCAAACCUGGGGCAAAGAGACUGGUGAGAGCCCAGACCCUCCAGAAGCAGCGGAGAGCCCCAGUUGGGCCAAGGGCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[-27.86785126 161.28718567]
[-35.68092346 162.08801270]
[-43.41238022 160.83876038]
[-50.53501892 157.63629150]
[-56.56618881 152.71031189]
[-61.10049438 146.40681458]
[-63.83703232 139.16387939]
[-78.83522034 138.93060303]
[-90.13642883 149.65069580]
[-105.34339905 149.20046997]
[-115.49372101 138.36042786]
[-130.49191284 138.12715149]
[-145.49009705 137.89387512]
[-154.02548218 153.08030701]
[-168.94622803 161.90077209]
[-186.19061279 162.05638123]
[-201.11535645 153.59321594]
[-209.74581909 138.86627197]
[-224.72949219 139.56587219]
[-239.71316528 140.26548767]
[-254.69683838 140.96508789]
[-269.68051147 141.66470337]
[-283.18508911 150.96838379]
[-297.87637329 143.68153381]
[-298.64123535 127.30023193]
[-284.69284058 118.67615509]
[-270.38012695 126.68102264]
[-255.39645386 125.98141479]
[-240.41278076 125.28180695]
[-225.42909241 124.58219910]
[-210.44541931 123.88259888]
[-205.79518127 111.92923737]
[-196.89215088 102.63109589]
[-185.06552124 97.42853546]
[-172.10107422 97.14656067]
[-159.97151184 101.86416626]
[-150.53636169 110.89685059]
[-145.25682068 122.89569092]
[-130.25863647 123.12896729]
[-115.26044464 123.36224365]
[-104.77790833 112.84312439]
[-89.56429291 112.86604309]
[-78.60194397 123.93241882]
[-63.60375595 124.16569519]
[-49.52705002 105.93610382]
[-26.41279030 103.21441650]
[-8.11004257 117.97951508]
[6.48363590 114.51187134]
[21.07731438 111.04421997]
[35.67099380 107.57657623]
[50.26467133 104.10893250]
[64.85834503 100.64128876]
[67.24964142 87.24221039]
[74.55220795 75.75630188]
[85.67093658 67.90599823]
[98.93846893 64.86853027]
[112.36518097 67.09940338]
[123.93760681 74.26407623]
[136.26194763 65.71359253]
[148.58627319 57.16310883]
[160.91061401 48.61262512]
[160.26268005 33.19887161]
[168.07060242 19.89324760]
[181.84294128 12.94152451]
[197.18496704 14.56197357]
[209.20109558 24.23751450]
[214.05703735 38.88071823]
[210.20326233 53.81899261]
[198.86950684 64.28558350]
[183.67233276 66.94065094]
[169.46109009 60.93695831]
[157.13676453 69.48744202]
[144.81242371 78.03792572]
[132.48809814 86.58840942]
[134.93942261 96.18114471]
[134.61817932 106.07692719]
[148.49858093 111.76325226]
[162.37898254 117.44957733]
[176.25939941 123.13590240]
[191.55311584 118.29012299]
[204.79638672 127.34524536]
[205.83010864 143.35496521]
[193.86129761 154.03797913]
[178.07139587 151.19921875]
[170.57307434 137.01631165]
[156.69265747 131.32998657]
[142.81225586 125.64366150]
[128.93185425 119.95733643]
[115.11656189 131.73068237]
[97.26960754 135.04129028]
[80.15086365 129.00617981]
[68.32599640 115.23497009]
[53.73231506 118.70261383]
[39.13863754 122.17025757]
[24.54495811 125.63790131]
[9.95128059 129.10554504]
[-4.64239740 132.57319641]
[-5.88752794 140.44062805]
[-9.12132740 147.69564819]
[-14.11196613 153.84649658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[11 40]
[12 39]
[13 38]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[58 74]
[59 73]
[60 72]
[61 71]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
