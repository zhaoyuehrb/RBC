%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCAUGAGCCGCGCGCGUGGGGCGCUGUGCCGGGCCUGCCUCGCGCUGGCCGCGGCCCUGGCCGCGCUGCUGUUACUGCCGCUGCCGCUGCCCCGCGCGCCCG\
) } def
/len { sequence length } bind def

/coor [
[38.67679214 311.91534424]
[31.23928070 324.94158936]
[23.80176735 337.96786499]
[16.36425591 350.99411011]
[8.92674255 364.02038574]
[14.51499462 378.62536621]
[9.35910988 393.38851929]
[-4.10645962 401.33914185]
[-19.52368355 398.72320557]
[-29.61302185 386.77584839]
[-29.61059570 371.13824463]
[-19.51755142 359.19403076]
[-4.09951591 356.58285522]
[3.33799648 343.55661011]
[10.77550888 330.53033447]
[18.21302223 317.50408936]
[25.65053368 304.47784424]
[32.32522583 291.04470825]
[38.21492004 277.24938965]
[44.10461426 263.45404053]
[49.99431229 249.65869141]
[55.88400650 235.86334229]
[61.77370453 222.06800842]
[67.66339874 208.27265930]
[73.55309296 194.47732544]
[79.44278717 180.68197632]
[85.33248901 166.88662720]
[91.22218323 153.09129333]
[96.91246796 139.21250916]
[102.40216827 125.25316620]
[87.94422913 121.00482178]
[79.06730652 109.69826508]
[78.44042969 96.03180695]
[85.49595642 85.12855530]
[79.60625458 71.33321381]
[73.71656036 57.53786850]
[67.82686615 43.74252701]
[61.73898315 30.03348923]
[55.45418167 16.41360474]
[49.16937637 2.79372001]
[42.88457489 -10.82616425]
[30.07707405 -20.11478615]
[31.76992226 -34.91287994]
[25.48511887 -48.53276443]
[10.98943424 -55.40696716]
[7.46641922 -71.05841827]
[17.61862946 -83.48065948]
[33.65815735 -83.14441681]
[43.28085327 -70.30762482]
[39.10500336 -54.81756592]
[45.38980865 -41.19768143]
[57.74777603 -32.88324356]
[56.50445938 -17.11096764]
[62.78926086 -3.49108338]
[69.07406616 10.12880135]
[75.35887146 23.74868584]
[81.10613251 28.57658005]
[81.62220764 37.85282898]
[87.51190186 51.64817429]
[93.40160370 65.44351196]
[99.29129791 79.23886108]
[109.14742279 80.07799530]
[117.99980927 85.56945038]
[123.68048859 94.92269897]
[124.55733490 106.35845184]
[139.20825195 103.14117432]
[153.85916138 99.92389679]
[165.67861938 89.40673828]
[179.76922607 94.23416138]
[194.42013550 91.01688385]
[209.07104492 87.79960632]
[214.39569092 83.47507477]
[220.22381592 82.72343445]
[224.65800476 84.84485626]
[239.46992493 82.47698975]
[247.34880066 68.96930695]
[262.08432007 63.73494339]
[276.71881104 69.24540710]
[284.34234619 82.89882660]
[281.35531616 98.24846649]
[269.16809082 108.04670715]
[253.53511047 107.66711426]
[241.83779907 97.28891754]
[227.02586365 99.65678406]
[212.28833008 102.45051575]
[197.63742065 105.66779327]
[182.98651123 108.88506317]
[172.21496582 119.17211151]
[157.07643127 114.57480621]
[142.42552185 117.79208374]
[127.77461243 121.00936127]
[116.36151123 130.74285889]
[110.87181091 144.70220947]
[110.62327576 153.98947144]
[105.01752472 158.98098755]
[99.12783051 172.77633667]
[93.23813629 186.57167053]
[87.34843445 200.36701965]
[81.45874023 214.16235352]
[75.56904602 227.95770264]
[69.67935181 241.75303650]
[63.78965378 255.54838562]
[57.89995956 269.34371948]
[52.01026154 283.13906860]
[46.12056732 296.93441772]
[46.87922668 301.56967163]
[46.10470200 305.74426270]
[44.15673828 309.00933838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 93]
[30 92]
[34 61]
[35 60]
[36 59]
[37 58]
[38 56]
[39 55]
[40 54]
[41 53]
[43 51]
[44 50]
[65 91]
[66 90]
[67 89]
[69 87]
[70 86]
[71 85]
[74 84]
[75 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
