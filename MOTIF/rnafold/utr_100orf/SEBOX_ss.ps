%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCAGCCCUGUGGAUGCAUCCUCAGCAGACGGUGGCAGCGGGUUGGGUUCCCACCGGAGAAAGCGGACCACCUUCAGCAAAGGGCAGCUACUGGAGC\
) } def
/len { sequence length } bind def

/coor [
[71.40685272 359.92276001]
[63.59522247 373.33016968]
[49.38127518 379.55456543]
[34.23056793 376.20260620]
[23.96885300 364.56317139]
[22.54196930 349.11184692]
[30.49858284 335.78997803]
[44.77921295 329.72012329]
[48.01948166 315.07427979]
[51.03158951 300.37982178]
[53.81480408 285.64028931]
[48.57337570 271.69836426]
[58.73691177 259.57348633]
[61.52013016 244.83395386]
[64.30334473 230.09442139]
[67.08656311 215.35488892]
[61.84513474 201.41299438]
[72.00866699 189.28808594]
[74.79188538 174.54856873]
[77.57510376 159.80903625]
[75.56372070 155.29847717]
[76.49364471 149.46366882]
[81.01691437 144.25222778]
[84.71109772 129.71423340]
[88.40528107 115.17625427]
[81.08890533 102.66957855]
[84.65736389 88.62635040]
[97.05673218 81.12956238]
[100.75091553 66.59157562]
[96.65062714 51.31092834]
[107.28407288 40.88120270]
[110.97825623 26.34321976]
[106.87796021 11.06257153]
[117.51140594 0.63284653]
[121.20558929 -13.90513802]
[124.89977264 -28.44312286]
[128.59394836 -42.98110962]
[132.28813171 -57.51909256]
[123.07495117 -72.28934479]
[127.22668457 -88.84959412]
[141.73683167 -97.19194794]
[144.97709656 -111.83779144]
[133.62315369 -124.26010895]
[131.86264038 -140.83110046]
[140.18656921 -155.07666016]
[155.18424988 -161.54760742]
[157.96746826 -176.28712463]
[152.92510986 -191.28330994]
[162.88957214 -202.35392761]
[165.67279053 -217.09346008]
[168.45600891 -231.83299255]
[162.52627563 -247.12254333]
[173.01202393 -259.73132324]
[189.12640381 -256.68847656]
[194.29232788 -241.12426758]
[183.19554138 -229.04977417]
[180.41232300 -214.31024170]
[177.62910461 -199.57070923]
[182.87052917 -185.62881470]
[172.70700073 -173.50390625]
[169.92378235 -158.76438904]
[180.00282288 -149.86103821]
[184.35856628 -137.02268982]
[181.73638916 -123.61066437]
[172.72377014 -113.19349670]
[159.62294006 -108.59751892]
[156.38267517 -93.95167542]
[164.81045532 -84.06964874]
[165.96983337 -70.93728638]
[159.20603943 -59.39381027]
[146.82612610 -53.82490921]
[143.13194275 -39.28692627]
[139.43775940 -24.74893951]
[135.74357605 -10.21095467]
[132.04939270 4.32703018]
[136.41390991 18.56782341]
[125.51623535 30.03740311]
[121.82205200 44.57538605]
[126.18657684 58.81618118]
[115.28890228 70.28575897]
[111.59471893 84.82374573]
[118.91109467 97.33042145]
[115.34263611 111.37364960]
[102.94326782 118.87043762]
[99.24908447 133.40841675]
[95.55489349 147.94641113]
[92.31462860 162.59225464]
[89.53141022 177.33177185]
[86.74819946 192.07130432]
[91.79055023 207.06747437]
[81.82608795 218.13810730]
[79.04286957 232.87763977]
[76.25965881 247.61717224]
[73.47644043 262.35668945]
[78.51879120 277.35287476]
[68.55433655 288.42349243]
[65.77111816 303.16302490]
[67.26470947 312.35876465]
[62.66532135 318.31454468]
[59.42505646 332.96038818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 100]
[9 99]
[10 97]
[11 96]
[13 94]
[14 93]
[15 92]
[16 91]
[18 89]
[19 88]
[20 87]
[23 86]
[24 85]
[25 84]
[28 81]
[29 80]
[31 78]
[32 77]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[41 67]
[42 66]
[46 61]
[47 60]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
