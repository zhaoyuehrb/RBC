%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGCACGGAGGGACGCGGCCGGCGCCCAUGGCGUUCGCGCUGCUGCGGCCCGUCGGCGCGCACGUGCUGUACCCGGACGUGCGGCUGCUGAGCGAGGACGAGGAGAACCGCAGCGAGAGCGACGCGU\
) } def
/len { sequence length } bind def

/coor [
[-82.96397400 334.22903442]
[-97.53017426 331.11596680]
[-107.47701263 342.34362793]
[-117.42385101 353.57128906]
[-127.37069702 364.79895020]
[-137.31753540 376.02661133]
[-140.71391296 384.61795044]
[-147.64294434 387.40164185]
[-157.85816956 398.38568115]
[-168.07341003 409.36972046]
[-163.48655701 424.02767944]
[-166.85887146 439.01177979]
[-177.28320312 450.29135132]
[-191.95549011 454.83224487]
[-206.92893982 451.41299438]
[-218.17578125 440.95333862]
[-222.67065430 426.26687622]
[-219.20448303 411.30422974]
[-208.70962524 400.09024048]
[-194.00917053 395.64141846]
[-179.05744934 399.15447998]
[-168.84220886 388.17044067]
[-158.62696838 377.18640137]
[-148.54519653 366.07974243]
[-138.59835815 354.85208130]
[-128.65151978 343.62442017]
[-118.70467377 332.39675903]
[-108.75783539 321.16909790]
[-113.60399628 307.08435059]
[-110.73033905 292.36709595]
[-100.81035614 280.98901367]
[-86.43270874 276.07171631]
[-71.42627716 279.03048706]
[-61.47943878 267.80282593]
[-51.53260040 256.57516479]
[-41.58575821 245.34751892]
[-39.48379517 238.18215942]
[-31.26035309 233.97245789]
[-21.04511452 222.98843384]
[-10.82987785 212.00439453]
[-7.82818604 197.41539001]
[7.23573256 192.57917786]
[17.45097160 181.59515381]
[27.53274536 170.48849487]
[37.47958374 159.26083374]
[47.42642593 148.03317261]
[57.37326431 136.80551147]
[67.32010651 125.57785034]
[77.26694489 114.35018921]
[87.21378326 103.12252808]
[96.60655975 91.42741394]
[105.42333984 79.29216003]
[114.09284973 67.05126190]
[122.61382294 54.70650101]
[131.13479614 42.36174393]
[139.65576172 30.01698494]
[137.01405334 14.66579056]
[145.83139038 2.26783538]
[160.48268127 -0.15602316]
[169.00366211 -12.50078106]
[177.52462769 -24.84553909]
[178.99635315 -40.59814453]
[192.59393311 -46.67719650]
[201.11489868 -59.02195740]
[203.45094299 -67.96005249]
[209.99391174 -71.55866241]
[218.81069946 -83.69391632]
[227.48020935 -95.93482208]
[236.00117493 -108.27957916]
[244.52214050 -120.62433624]
[253.04312134 -132.96908569]
[261.56408691 -145.31384277]
[270.08505249 -157.65861511]
[278.60601807 -170.00337219]
[275.51104736 -185.50164795]
[284.35089111 -198.60250854]
[299.88104248 -201.53346252]
[312.88772583 -192.55560303]
[315.65429688 -176.99534607]
[306.53942871 -164.08430481]
[290.95077515 -161.48239136]
[282.42980957 -149.13763428]
[273.90884399 -136.79287720]
[265.38787842 -124.44812012]
[256.86691284 -112.10336304]
[248.34593201 -99.75860596]
[239.82496643 -87.41384888]
[238.60200500 -80.04737854]
[230.94595337 -74.87713623]
[222.12916565 -62.74188614]
[213.45967102 -50.50098419]
[204.93869019 -38.15622711]
[204.07644653 -23.28660011]
[189.86938477 -16.32456779]
[181.34841919 -3.97981000]
[172.82743835 8.36494827]
[175.75651550 22.92366028]
[167.29089355 35.56438446]
[152.00051880 38.53795624]
[143.47955322 50.88271332]
[134.95857239 63.22747040]
[126.43760681 75.57222748]
[125.21465302 82.93869781]
[117.55859375 88.10894012]
[108.74182129 100.24419403]
[109.01054382 103.39405060]
[108.09017944 106.71189117]
[105.91660309 109.73889160]
[102.60305786 111.99952698]
[98.44144440 113.06936646]
[88.49460602 124.29702759]
[78.54776764 135.52468872]
[68.60092926 146.75234985]
[58.65408707 157.98001099]
[48.70724487 169.20767212]
[38.76040649 180.43533325]
[35.36403275 189.02668762]
[28.43500137 191.81039429]
[18.21976280 202.79441833]
[14.48740959 218.16908264]
[0.15415256 222.21963501]
[-10.06108570 233.20365906]
[-20.27632332 244.18769836]
[-30.35809898 255.29435730]
[-40.30493927 266.52200317]
[-50.25177765 277.74966431]
[-60.19861603 288.97732544]
[-55.45257950 303.51770020]
[-58.60100555 318.38323975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[8 23]
[9 22]
[10 21]
[33 127]
[34 126]
[35 125]
[36 124]
[38 123]
[39 122]
[40 121]
[42 119]
[43 118]
[44 116]
[45 115]
[46 114]
[47 113]
[48 112]
[49 111]
[50 110]
[51 105]
[52 104]
[53 102]
[54 101]
[55 100]
[56 99]
[59 96]
[60 95]
[61 94]
[63 92]
[64 91]
[66 90]
[67 89]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
