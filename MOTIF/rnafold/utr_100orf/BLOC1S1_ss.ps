%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAGCGGUCACGUGACAUGGCCCCGGGGAGCCGAGGUGAGCGUUCCAGCUUCCGGAGCCGGAGGGGGCCCGGCGUACCCAGCCCCCAGCCCGACGUGACCAUGCUGUCCCGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[116.89187622 319.85150146]
[124.09140778 306.39306641]
[136.42242432 297.39813232]
[133.66618347 282.65353394]
[130.90994263 267.90893555]
[128.15370178 253.16435242]
[125.39745331 238.41975403]
[122.25296021 223.75305176]
[118.72240448 209.17446899]
[115.19184875 194.59587097]
[111.66130066 180.01728821]
[108.13074493 165.43870544]
[104.60019684 150.86010742]
[101.06964111 136.28152466]
[97.53908539 121.70294189]
[88.91203308 119.83067322]
[81.41651154 114.54370880]
[76.39212036 106.46080780]
[74.85926056 96.71858215]
[77.32332611 86.81346130]
[83.65455627 78.37184906]
[71.22391510 69.97666168]
[58.79327774 61.58147430]
[43.02653885 60.26977921]
[36.80973434 46.73461914]
[24.37909508 38.33943176]
[11.94845390 29.94424248]
[-0.48218659 21.54905510]
[-12.91282749 13.15386772]
[-21.89786720 10.90009785]
[-25.55677605 4.36939383]
[-37.76147842 -4.35099840]
[-49.96618271 -13.07139111]
[-60.73148346 -10.64559746]
[-70.82252502 -14.53335285]
[-76.92250824 -23.19358253]
[-77.17366028 -33.56227493]
[-88.90113068 -42.91461945]
[-103.82262421 -38.65684891]
[-118.38543701 -44.01448441]
[-126.98986053 -56.92740631]
[-126.32732391 -72.43032837]
[-116.65258026 -84.56206512]
[-101.68577576 -88.65771484]
[-87.18194580 -83.14241791]
[-78.71810913 -70.13691711]
[-79.54878235 -54.64209366]
[-67.82131195 -45.28974533]
[-48.60585403 -43.95297623]
[-41.24578857 -25.27609253]
[-29.04108620 -16.55570030]
[-16.83638382 -7.83530855]
[-4.51763964 0.72322696]
[7.91300106 9.11841488]
[20.34364128 17.51360130]
[32.77428055 25.90879059]
[45.20492172 34.30397797]
[60.08253860 35.01519394]
[67.18846130 49.15083694]
[79.61910248 57.54602432]
[92.04974365 65.94120789]
[107.04843903 65.74321747]
[119.25314331 57.02282333]
[126.61320496 38.34593964]
[145.82865906 37.00917053]
[157.55613708 27.65682411]
[169.28361511 18.30447769]
[181.01107788 8.95213032]
[192.73855591 -0.40021655]
[204.46601868 -9.75256348]
[206.37760925 -25.21165848]
[218.40415955 -34.52920532]
[233.13026428 -32.61153412]
[244.85774231 -41.96387863]
[250.34207153 -57.41878510]
[266.51553345 -60.13017654]
[276.74023438 -47.30880356]
[270.49789429 -32.14419937]
[254.21008301 -30.23640633]
[242.48262024 -20.88405991]
[241.07533264 -6.10044861]
[229.31524658 3.55122352]
[213.81837463 1.97490871]
[202.09089661 11.32725525]
[190.36343384 20.67960358]
[178.63595581 30.03195000]
[166.90847778 39.38429642]
[155.18101501 48.73664474]
[154.92985535 59.10533524]
[148.82987976 67.76556396]
[138.73883057 71.65332031]
[127.97353363 69.22752380]
[115.76882935 77.94792175]
[124.47272491 100.39971161]
[112.11767578 118.17238617]
[115.64823151 132.75097656]
[119.17877960 147.32955933]
[122.70933533 161.90814209]
[126.23988342 176.48674011]
[129.77044678 191.06532288]
[133.30099487 205.64390564]
[136.83154297 220.22250366]
[141.24093628 225.42019653]
[142.12994385 231.19465637]
[140.14204407 235.66351318]
[142.89828491 250.40811157]
[145.65454102 265.15270996]
[148.41078186 279.89730835]
[151.16702271 294.64190674]
[165.91468811 298.57495117]
[177.48980713 308.52380371]
[183.59410095 322.51309204]
[183.01557922 337.76522827]
[175.86911011 351.25192261]
[163.57360840 360.29534912]
[148.57037354 363.09994507]
[133.83830261 359.10882568]
[122.30246735 349.11447144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[21 61]
[22 60]
[23 59]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[31 52]
[32 51]
[33 50]
[37 48]
[38 47]
[62 93]
[63 92]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
