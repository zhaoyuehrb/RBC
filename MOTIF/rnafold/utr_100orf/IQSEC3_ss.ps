%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAGCCUGCUGGAGAAUCCGGUGCGCGCCGUGCUCUACCUCAAGGAGCUCACGGCCAUCGUGCAGAACCAGCAGAGCCUCAUCCACACCCAGCGAG\
) } def
/len { sequence length } bind def

/coor [
[163.95285034 324.75936890]
[175.32987976 314.63598633]
[170.73902893 300.35580444]
[166.14816284 286.07559204]
[161.55731201 271.79541016]
[156.74491882 257.58831787]
[151.71217346 243.45780945]
[146.46026611 229.40727234]
[140.99049377 215.44010925]
[135.30416870 201.55970764]
[129.40266418 187.76940918]
[123.50116730 173.97911072]
[117.59966278 160.18881226]
[111.69815826 146.39852905]
[105.79665375 132.60823059]
[99.89514923 118.81793213]
[91.16725922 116.61650085]
[84.46025848 110.61328888]
[81.30868530 102.18180847]
[82.43360138 93.25112915]
[87.57763672 85.86457062]
[82.98677826 71.58437347]
[71.80310822 64.92987061]
[68.33525085 52.80557632]
[73.93933105 41.96065903]
[69.79479980 27.54459572]
[65.65027618 13.12853050]
[61.50574875 -1.28753328]
[57.36122513 -15.70359707]
[42.20700836 -28.81596947]
[47.23282242 -47.37813568]
[42.20007324 -61.50865173]
[37.16732407 -75.63916779]
[32.13457108 -89.76967621]
[27.10182190 -103.90019226]
[21.63204956 -117.86735535]
[15.73054600 -131.65765381]
[9.82904148 -145.44793701]
[3.92753816 -159.23823547]
[-1.97396576 -173.02853394]
[-16.99301720 -177.38308716]
[-25.65623283 -190.40164185]
[-23.87311172 -205.93722534]
[-12.48558521 -216.65441895]
[3.12950301 -217.49288940]
[15.59918594 -208.05673218]
[19.03566170 -192.80142212]
[11.81632996 -178.93003845]
[17.71783447 -165.13973999]
[23.61933708 -151.34944153]
[29.52084160 -137.55915833]
[35.42234421 -123.76885986]
[39.60578918 -121.14406586]
[42.08465576 -115.78076935]
[41.23233795 -108.93294525]
[46.26508713 -94.80242920]
[51.29783630 -80.67191315]
[56.33058548 -66.54139709]
[61.36333847 -52.41088867]
[71.14302826 -48.77304459]
[77.35682678 -40.11608505]
[77.68826294 -29.24313736]
[71.77729034 -19.84812355]
[75.92181396 -5.43205929]
[80.06633759 8.98400497]
[84.21086884 23.40006828]
[88.35539246 37.81613159]
[101.62223816 49.18680954]
[97.26697540 66.99351501]
[101.85783386 81.27371216]
[117.62707520 93.41123962]
[113.68544769 112.91642761]
[119.58695221 126.70672607]
[125.48845673 140.49702454]
[131.38995361 154.28730774]
[137.29145813 168.07760620]
[143.19296265 181.86790466]
[149.09446716 195.65820312]
[155.45846558 202.46203613]
[154.95765686 209.97033691]
[160.42742920 223.93750000]
[166.57675171 230.93595886]
[165.84268188 238.42506409]
[170.87542725 252.55557251]
[176.80413818 259.74188232]
[175.83750916 267.20452881]
[180.42835999 281.48474121]
[185.01922607 295.76492310]
[189.61007690 310.04513550]
[204.75503540 311.64212036]
[217.93782043 319.26669312]
[226.87446594 331.59777832]
[230.01661682 346.49902344]
[226.81990051 361.38864136]
[217.83815002 373.68695068]
[204.62751770 381.26315308]
[189.47682190 382.80465698]
[175.01100159 378.04440308]
[163.73637390 367.80709839]
[157.60630798 353.86642456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 84]
[7 83]
[8 81]
[9 80]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[21 70]
[22 69]
[25 67]
[26 66]
[27 65]
[28 64]
[29 63]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
