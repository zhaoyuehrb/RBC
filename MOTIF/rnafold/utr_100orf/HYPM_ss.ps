%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGCCAAACCCAGCAAACAUCAUGUCAGAGAAAAAGAACUGUAAGAACUCGUCUACAAAUAACAACCAGACUCAAGACCCUUCUAGAAAUGAGCUACAGGUCCCUAGGAGCUUCGUGGACC\
) } def
/len { sequence length } bind def

/coor [
[-24.90021133 143.12419128]
[-39.51195526 146.51490784]
[-54.12369537 149.90563965]
[-59.30572128 169.44351196]
[-82.04622650 179.93554688]
[-89.65566254 192.86213684]
[-83.34098816 207.03620911]
[-86.59654999 222.20793152]
[-98.17051697 232.54344177]
[-113.61246490 234.06854248]
[-126.98464966 226.19679260]
[-133.14518738 211.95504761]
[-129.72523499 196.81954956]
[-118.03982544 186.61018372]
[-102.58224487 185.25270081]
[-94.97280884 172.32611084]
[-98.01753998 165.47195435]
[-109.17331696 175.49935913]
[-122.15716553 167.98806763]
[-119.02555084 153.31860352]
[-104.10701752 151.76362610]
[-107.15175629 144.90945435]
[-121.84470367 141.88998413]
[-136.91989136 146.69094849]
[-147.82913208 136.55004883]
[-162.52207947 133.53056335]
[-171.67552185 134.87358093]
[-177.54684448 130.24400330]
[-192.15858459 126.85327911]
[-206.77032471 123.46256256]
[-217.19894409 134.73817444]
[-231.87295532 139.27351379]
[-246.84510803 135.84857178]
[-258.08798218 125.38465881]
[-262.57730103 110.69651794]
[-259.10543823 95.73516846]
[-248.60633850 84.52515411]
[-233.90419006 80.08190155]
[-218.95381165 83.60063171]
[-207.77674866 94.13481903]
[-203.37960815 108.85081482]
[-188.76786804 112.24153900]
[-174.15612793 115.63226318]
[-159.50260925 118.83761597]
[-144.80964661 121.85709381]
[-130.78540039 116.84015656]
[-118.82522583 127.19702911]
[-104.13227844 130.21650696]
[-75.95297241 119.71339417]
[-57.51441574 135.29388428]
[-42.90267563 131.90316772]
[-28.29093361 128.51245117]
[-13.76977634 124.75266266]
[0.65147489 120.62622070]
[15.07272625 116.49977875]
[29.49397659 112.37333679]
[43.91522598 108.24689484]
[58.33647919 104.12045288]
[58.41610336 95.14133453]
[60.40860748 86.38571930]
[64.22233582 78.25636292]
[69.68184662 71.12722778]
[76.53601837 65.32625580]
[84.46953583 61.12028885]
[93.11746216 58.70281219]
[102.08199310 58.18502045]
[110.95075226 59.59074020]
[119.31576538 62.85530472]
[126.79225159 67.82854462]
[133.03627014 74.28168488]
[146.33168030 67.33673859]
[152.57702637 60.51143265]
[160.05302429 60.38909531]
[173.52009583 53.78318405]
[186.98715210 47.17726898]
[200.45422363 40.57135773]
[213.47616577 33.12627792]
[226.00073242 24.87188721]
[238.52531433 16.61749649]
[245.38372803 1.72138131]
[261.73602295 0.48251924]
[270.76034546 14.17534542]
[263.17324829 28.71385384]
[246.77970886 29.14207268]
[234.25512695 37.39646530]
[221.73054504 45.65085602]
[235.41807556 51.78694153]
[239.40551758 66.24724579]
[230.79739380 78.53138733]
[215.84449768 79.71921539]
[205.40490723 68.94818878]
[207.06013489 54.03842545]
[193.59306335 60.64433670]
[180.12600708 67.25025177]
[166.65893555 73.85616302]
[153.27662659 80.63214111]
[139.98123169 87.57708740]
[141.85430908 98.97795868]
[140.53991699 110.45667267]
[136.13818359 121.13903809]
[147.51954651 130.90962219]
[163.03041077 134.02793884]
[167.64746094 148.18887329]
[179.02883911 157.95945740]
[190.41021729 167.73004150]
[206.36669922 173.45951843]
[205.27833557 190.37849426]
[188.71926880 194.01629639]
[180.63961792 179.11141968]
[169.25825500 169.34083557]
[157.87687683 159.57025146]
[143.18009949 157.15078735]
[137.74896240 142.29100037]
[126.36759186 132.52041626]
[103.49307251 141.72080994]
[79.40712738 136.45217896]
[62.46292114 118.54170227]
[48.04166794 122.66814423]
[33.62041855 126.79458618]
[19.19916725 130.92103577]
[4.77791643 135.04747009]
[-9.64333439 139.17391968]
[-14.64155769 143.78012085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[5 16]
[6 15]
[22 48]
[23 47]
[25 45]
[26 44]
[28 43]
[29 42]
[30 41]
[53 122]
[54 121]
[55 120]
[56 119]
[57 118]
[58 117]
[70 97]
[71 96]
[73 95]
[74 94]
[75 93]
[76 92]
[77 86]
[78 85]
[79 84]
[100 114]
[101 113]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
