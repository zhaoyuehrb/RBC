%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCCUUAGGUGUUUAAGUUCCGCGCGCAGGCCAGGCUGCAACCUGACGGCCAGAUCCCUCGCUGUCCUAGUCGCUGCUCCUUGGAGUCAUGUUCCCAGCCGCCCCUUCUCCGCGGACCCCGGGUACCGGGUCCCGAAGGGGCCCGCUGGCCGGACUCGGGCCCGGCUCCACGCCCCGGACGGCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[166.97741699 110.44754791]
[173.33612061 124.03308868]
[174.10511780 139.01336670]
[169.17095947 153.17860413]
[159.26148987 164.43927002]
[145.83848572 171.13426208]
[130.88200378 172.27601624]
[116.59830475 167.69607544]
[105.09440613 158.07005310]
[98.06726837 144.81790161]
[96.55371857 129.89199829]
[84.26254272 138.49008179]
[71.97137451 147.08816528]
[59.68020630 155.68626404]
[61.10617447 168.12281799]
[57.12649536 179.91519165]
[48.55630875 188.84027100]
[37.06991959 193.24317932]
[24.87393379 192.34391785]
[14.28339767 186.37484741]
[1.71887684 194.56831360]
[-10.84564400 202.76177979]
[-23.41016579 210.95523071]
[-26.78471756 226.16215515]
[-39.64365005 234.29249573]
[-54.12031937 230.98165894]
[-66.68483734 239.17512512]
[-69.69570923 254.68995667]
[-82.84191895 263.46221924]
[-98.32405853 260.28750610]
[-106.95684814 247.04927063]
[-103.61860657 231.60156250]
[-90.28984833 223.10922241]
[-74.87830353 226.61059570]
[-62.31377792 218.41714478]
[-59.50555038 203.83464050]
[-46.88005829 195.34631348]
[-31.60362625 198.39071655]
[-19.03910637 190.19725037]
[-6.47458410 182.00379944]
[6.08993721 173.81033325]
[6.15225554 156.16249084]
[16.88100052 141.95289612]
[34.13908768 136.97348022]
[51.08211517 143.39509583]
[63.37328720 134.79699707]
[75.66445923 126.19891357]
[87.95562744 117.60082245]
[86.12892914 102.71246338]
[72.12377167 97.34074402]
[58.11860275 91.96902466]
[44.11343765 86.59730530]
[30.10827446 81.22558594]
[16.10311127 75.85386658]
[0.44735831 78.13596344]
[-8.66496944 66.35399628]
[-22.67013359 60.98227692]
[-38.77307510 64.08506775]
[-49.30567932 51.51540756]
[-43.43290329 36.20389175]
[-27.19615936 33.90169144]
[-17.29841423 46.97711563]
[-3.29325008 52.34883499]
[11.36075974 49.68251419]
[21.47483063 61.84870148]
[35.47999573 67.22042084]
[49.48516083 72.59214020]
[63.49032211 77.96385956]
[77.49549103 83.33557892]
[91.50064850 88.70729828]
[106.48277283 87.97509766]
[119.89739227 81.26332092]
[133.31201172 74.55154419]
[146.72663879 67.83976746]
[160.14125061 61.12798691]
[173.55587769 54.41621017]
[186.97048950 47.70443344]
[200.33004761 40.88370132]
[213.63363647 33.95446396]
[226.93724060 27.02522659]
[226.54095459 11.80667496]
[232.76615906 -2.01843691]
[244.32929993 -11.72997284]
[258.90243530 -15.44272137]
[273.58184814 -12.47218418]
[285.46658325 -3.46004796]
[298.77020264 -10.38928509]
[312.07379150 -17.31852150]
[325.37738037 -24.24775887]
[338.68096924 -31.17699623]
[351.98458862 -38.10623169]
[365.28817749 -45.03546906]
[363.52825928 -59.92362976]
[367.83816528 -74.55686188]
[377.72171021 -86.51987457]
[391.74621582 -93.75453186]
[407.74789429 -94.91237640]
[423.16516113 -89.60111237]
[435.44854736 -78.48067474]
[447.73971558 -87.07876587]
[460.03088379 -95.67685699]
[472.32205200 -104.27494049]
[484.61322021 -112.87303162]
[492.00485229 -129.73089600]
[509.52651978 -130.58615112]
[521.67608643 -139.38316345]
[533.82568359 -148.18017578]
[545.97528076 -156.97718811]
[558.12487793 -165.77420044]
[570.27447510 -174.57121277]
[582.42407227 -183.36822510]
[584.56427002 -188.16236877]
[587.99188232 -191.33027649]
[591.86779785 -192.65373230]
[595.38836670 -192.28092957]
[607.95288086 -200.47439575]
[613.44238281 -207.79472351]
[620.78924561 -208.69702148]
[633.48547363 -216.68489075]
[646.18170166 -224.67274475]
[658.87792969 -232.66061401]
[671.57415771 -240.64848328]
[684.27038574 -248.63633728]
[689.87829590 -255.86634827]
[697.23889160 -256.64895630]
[710.06347656 -264.42910767]
[720.46936035 -277.81393433]
[736.21173096 -271.51998901]
[734.52166748 -254.65048218]
[717.84362793 -251.60453796]
[705.01904297 -243.82438660]
[692.25823975 -235.94012451]
[679.56201172 -227.95225525]
[666.86578369 -219.96438599]
[654.16955566 -211.97653198]
[641.47332764 -203.98866272]
[628.77716064 -196.00080872]
[616.14636230 -187.90986633]
[603.58184814 -179.71641541]
[591.22106934 -171.21864319]
[579.07147217 -162.42163086]
[566.92187500 -153.62461853]
[554.77233887 -144.82759094]
[542.62274170 -136.03057861]
[530.47314453 -127.23357391]
[518.32354736 -118.43655396]
[516.09844971 -106.53674316]
[506.03518677 -99.10990143]
[493.21130371 -100.58186340]
[480.92013550 -91.98377228]
[468.62896729 -83.38568115]
[456.33779907 -74.78759766]
[444.04663086 -66.18950653]
[445.26611328 -51.23915863]
[458.78820801 -44.74662018]
[472.31030273 -38.25408173]
[488.61218262 -40.03745270]
[498.08804321 -26.65311432]
[490.98989868 -11.86973095]
[474.61972046 -10.89517689]
[465.81774902 -24.73199081]
[452.29565430 -31.22452927]
[438.77359009 -37.71706772]
[428.22338867 -24.89808655]
[413.79348755 -17.46313858]
[397.96832275 -16.36465263]
[383.34722900 -21.49109268]
[372.21740723 -31.73187447]
[358.91381836 -24.80263710]
[345.61022949 -17.87339973]
[332.30661011 -10.94416237]
[319.00302124 -4.01492596]
[305.69943237 2.91431141]
[292.39584351 9.84354877]
[292.96807861 24.74784279]
[286.98785400 38.47905731]
[275.59216309 48.29228592]
[261.00634766 52.20054245]
[246.10957336 49.37691498]
[233.86647034 40.32882309]
[220.56288147 47.25806046]
[207.25927734 54.18729782]
[202.77241516 60.07448196]
[193.68226624 61.11905670]
[180.26765442 67.83083344]
[166.85302734 74.54261017]
[153.43841553 81.25438690]
[140.02378845 87.96616364]
[126.60916901 94.67794037]
[113.19454956 101.38971710]
[126.93419647 95.37123108]
[141.92897034 94.97546387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 48]
[12 47]
[13 46]
[14 45]
[20 41]
[21 40]
[22 39]
[23 38]
[26 35]
[27 34]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[56 63]
[57 62]
[71 190]
[72 189]
[73 188]
[74 187]
[75 186]
[76 185]
[77 184]
[78 182]
[79 181]
[80 180]
[86 174]
[87 173]
[88 172]
[89 171]
[90 170]
[91 169]
[92 168]
[99 153]
[100 152]
[101 151]
[102 150]
[103 149]
[105 146]
[106 145]
[107 144]
[108 143]
[109 142]
[110 141]
[111 140]
[115 139]
[116 138]
[118 137]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[125 131]
[126 130]
[154 163]
[155 162]
[156 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
