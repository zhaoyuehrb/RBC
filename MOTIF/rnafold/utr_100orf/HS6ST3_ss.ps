%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGCCGGCCUGAGAGCGGGACCAUGGAUGAAAGGUUCAACAAGUGGCUGCUGACGCCGGUGCUCACUCUCCUCUUCGUGGUCAUCAUGUACCAGUACGUGUCCCCCUCCUGCACCAGCUCCU\
) } def
/len { sequence length } bind def

/coor [
[66.68620300 237.65353394]
[62.59192657 252.08395386]
[58.49764633 266.51437378]
[63.03183746 282.27423096]
[51.45724106 293.89147949]
[35.68080902 289.41531372]
[31.93198013 273.45040894]
[44.06723022 262.42010498]
[48.16151047 247.98966980]
[52.25579071 233.55926514]
[43.03528214 223.81883240]
[39.83373642 210.68226624]
[43.59876633 197.58293152]
[53.44256973 187.99960327]
[66.84844208 184.53273010]
[71.30406952 170.20976257]
[75.75968933 155.88677979]
[80.21531677 141.56381226]
[84.49060059 127.18598938]
[88.58488464 112.75557709]
[86.89203644 97.85140991]
[79.66573334 84.70681000]
[72.43942261 71.56221008]
[65.21311951 58.41760635]
[57.98681641 45.27300644]
[50.76050949 32.12840652]
[43.53420639 18.98380661]
[36.30789948 5.83920574]
[29.08159447 -7.30539417]
[22.12648964 -13.40241146]
[21.84358978 -20.87236977]
[14.94989204 -34.19441605]
[9.45010662 -38.18220901]
[7.21256161 -43.56010437]
[8.06361294 -48.36355972]
[1.84797883 -62.01514816]
[-7.36960506 -62.31037521]
[-15.92695618 -65.62940979]
[-22.86635971 -71.56960297]
[-27.42155457 -79.43678284]
[-29.10229492 -88.32621765]
[-27.74697113 -97.22669983]
[-23.53767586 -105.13555145]
[-16.97634506 -111.17154694]
[-21.43196869 -125.49451447]
[-25.88759232 -139.81747437]
[-30.34321594 -154.14045715]
[-34.97846985 -168.40629578]
[-39.79262543 -182.61277771]
[-45.57325745 -189.83297729]
[-44.54437256 -197.23715210]
[-48.99999619 -211.56011963]
[-53.45561981 -225.88308716]
[-57.91124344 -240.20605469]
[-70.31985474 -250.92791748]
[-66.97341156 -266.98199463]
[-51.31444931 -271.85321045]
[-39.45156479 -260.53051758]
[-43.58827591 -244.66168213]
[-39.13265228 -230.33871460]
[-34.67702866 -216.01574707]
[-30.22140503 -201.69277954]
[-25.58615112 -187.42692566]
[-20.77199745 -173.22045898]
[-15.58755302 -167.83511353]
[-16.02024841 -158.59606934]
[-11.56462479 -144.27310181]
[-7.10900116 -129.95013428]
[-2.65337729 -115.62716675]
[16.99634361 -107.78853607]
[24.82047653 -87.83596039]
[15.49956799 -68.23078156]
[21.71520233 -54.57919312]
[28.27193832 -41.08811569]
[35.16563797 -27.76606750]
[42.22619629 -14.53169918]
[49.45249939 -1.38709927]
[56.67880630 11.75750065]
[63.90510941 24.90210152]
[71.13141632 38.04669952]
[78.35771942 51.19130325]
[85.58402252 64.33589935]
[92.81033325 77.48049927]
[100.03663635 90.62509918]
[105.16667938 86.51604462]
[112.97702789 85.43849182]
[121.78353119 88.63534546]
[136.77287292 89.20069885]
[151.76222229 89.76605225]
[166.75155640 90.33140564]
[181.74090576 90.89675903]
[196.73023987 91.46211243]
[210.97068787 83.32935333]
[224.99577332 91.82812500]
[224.37768555 108.21562195]
[209.75225830 115.63378906]
[196.16488647 106.45145416]
[181.17555237 105.88610077]
[166.18620300 105.32074738]
[151.19686890 104.75539398]
[136.20751953 104.19004059]
[121.21817780 103.62468719]
[134.10151672 111.30710602]
[149.01214600 112.94208527]
[161.82878113 120.73529053]
[170.14140320 133.22129822]
[172.38691711 148.05226135]
[168.14309692 162.43940735]
[158.20794678 173.67741394]
[144.44963074 179.65309143]
[129.45524597 179.24279785]
[116.04428864 172.52368164]
[106.73854828 160.75920105]
[103.28784180 146.16149902]
[106.34053802 131.47663879]
[103.01529694 116.84985352]
[98.92102051 131.28027344]
[99.58575439 140.50552368]
[94.53828430 146.01943970]
[90.08265686 160.34240723]
[85.62703705 174.66537476]
[81.17140961 188.98834229]
[91.45362854 202.35105896]
[91.78340149 219.04310608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[15 122]
[16 121]
[17 120]
[18 119]
[19 117]
[20 116]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[31 75]
[32 74]
[35 73]
[36 72]
[44 69]
[45 68]
[46 67]
[47 66]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
