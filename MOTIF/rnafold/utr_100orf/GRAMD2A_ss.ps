%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGCUGGGUGCAGGCGCCGGGAUGACCGCUUUAAGCCGGAGCGAGGCCACCGAGGAGGGCGGCAACCAACAAAUGCACAGAAAGACAGCUUCUCUGAACAGUCCUGUGUCCUGCAAAGAGA\
) } def
/len { sequence length } bind def

/coor [
[119.30010986 405.09722900]
[105.71864319 412.60211182]
[90.32392120 410.65731812]
[79.03553772 400.01062012]
[76.19409180 384.75592041]
[82.89218903 370.75897217]
[96.55426788 363.40185547]
[98.43426514 348.52011108]
[87.46823883 338.47601318]
[84.48404694 323.72613525]
[90.83154297 309.88552856]
[104.26699829 302.34930420]
[106.14699554 287.46759033]
[108.02699280 272.58584595]
[109.90699768 257.70413208]
[111.78699493 242.82241821]
[113.66699219 227.94070435]
[115.35984039 213.03652954]
[116.86526489 198.11225891]
[118.37068939 183.18800354]
[115.88385010 176.13845825]
[120.10607910 167.90925598]
[121.98607635 153.02754211]
[123.86607361 138.14581299]
[125.74607086 123.26409149]
[127.62607574 108.38237000]
[114.63339996 123.26574707]
[96.01425171 125.79431915]
[81.13992310 115.97394562]
[76.67057800 99.71952057]
[62.52572250 94.72722626]
[48.38086319 89.73493958]
[34.23600388 84.74264526]
[20.09114838 79.75035095]
[5.94628954 74.75805664]
[-9.08882523 80.35491943]
[-22.76408195 71.96642303]
[-24.58899307 56.02750015]
[-13.16364479 44.76512909]
[2.74741530 46.81884003]
[10.93858242 60.61320114]
[25.08344078 65.60549164]
[39.22829819 70.59778595]
[53.37315750 75.59008026]
[67.51801300 80.58237457]
[81.66287231 85.57466888]
[90.17490387 76.81885529]
[102.76396179 73.11816406]
[116.43915558 76.26777649]
[112.70880890 61.73903275]
[108.97845459 47.21028519]
[98.05227661 35.76785660]
[102.38134766 21.51624870]
[98.65100098 6.98750162]
[84.92171478 -0.84079421]
[80.82972717 -16.10615158]
[88.80273438 -29.75190735]
[104.11050415 -33.68227386]
[117.67120361 -25.56543541]
[121.43950653 -10.21696949]
[113.17974854 3.25715303]
[116.91009521 17.78590012]
[127.56945801 28.18913269]
[123.50720215 43.47993469]
[127.23755646 58.00868225]
[130.96789551 72.53742981]
[134.65966797 57.99883270]
[133.16284180 43.07369995]
[139.81004333 29.62696266]
[152.57723999 21.75304031]
[167.57693481 21.84947586]
[180.24183655 29.88690948]
[186.71557617 43.41800308]
[185.02697754 58.32265472]
[175.69018555 70.06251526]
[161.54832458 75.06288910]
[149.96528625 84.59353638]
[164.69958496 81.78281403]
[173.59408569 68.99509430]
[188.57679749 66.35452271]
[200.71311951 74.91286469]
[215.44743347 72.10214233]
[230.18174744 69.29142761]
[244.91604614 66.48070526]
[259.61389160 63.48505402]
[274.27288818 60.30495071]
[288.93191528 57.12484360]
[300.70245361 45.70613480]
[316.40045166 50.45001221]
[319.87719727 66.47637939]
[307.55609131 77.29868317]
[292.11203003 71.78386688]
[277.45300293 74.96397400]
[262.79397583 78.14408112]
[256.85797119 82.68762970]
[247.72677612 81.21501160]
[232.99246216 84.02573395]
[218.25814819 86.83645630]
[203.52384949 89.64717102]
[195.39031982 102.07219696]
[180.48767090 105.13256073]
[167.51031494 96.51712036]
[152.77600098 99.32784271]
[142.50779724 110.26237488]
[140.62779236 125.14409637]
[138.74780273 140.02581787]
[136.86779785 154.90753174]
[134.98779297 169.78926086]
[133.29495239 184.69342041]
[131.78953552 199.61769104]
[130.28410339 214.54196167]
[132.55320740 223.50846863]
[128.54870605 229.82069397]
[126.66871643 244.70242310]
[124.78871155 259.58413696]
[122.90871429 274.46585083]
[121.02871704 289.34756470]
[119.14871979 304.22930908]
[130.28790283 314.87002563]
[132.99394226 329.85437012]
[126.43536377 343.39871216]
[113.31598663 350.40011597]
[111.43598938 365.28182983]
[122.83921051 375.80545044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 123]
[8 122]
[12 118]
[13 117]
[14 116]
[15 115]
[16 114]
[17 113]
[18 111]
[19 110]
[20 109]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[49 66]
[50 65]
[51 64]
[53 62]
[54 61]
[77 103]
[78 102]
[81 99]
[82 98]
[83 97]
[84 96]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
