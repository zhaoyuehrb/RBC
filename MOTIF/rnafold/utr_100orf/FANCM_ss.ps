%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGCGAAGGAAACCGAUGGGGAUCGGAACCGUAGCGGUUGAGCUGCUGCUGCUACGGAUAUCUGACAGAAGCCUUCGGUGGUUGUCGGCCUAAUGAGCGGACGGCAAAGAACGCUUUUUCAGACGUGGGGCUCAAGUAUCUCCCGAUCAUCUGGGACUCCGGGUUGCAGCUCCGGAACUGAGCGACCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[106.23746490 157.45812988]
[110.89369965 143.19911194]
[122.44632721 133.63162231]
[137.32341003 131.71397400]
[124.54015350 123.86614990]
[111.75690460 116.01831818]
[123.62690735 125.18908691]
[127.39951324 139.70692444]
[121.49594879 153.49633789]
[108.38675690 160.78668213]
[93.55792999 158.52708435]
[83.21508026 147.66311646]
[81.68653107 132.74121094]
[89.61293030 120.00511169]
[80.36950684 131.81861877]
[71.12607574 143.63214111]
[61.88265228 155.44564819]
[52.63922501 167.25915527]
[50.88222885 183.56391907]
[35.77603912 189.94631958]
[22.86060333 179.84069824]
[25.42221832 163.64285278]
[40.82571030 158.01573181]
[50.06913757 146.20222473]
[59.31256485 134.38871765]
[68.55599213 122.57519531]
[77.79942322 110.76168823]
[74.03190613 104.27664185]
[66.49687195 91.30654907]
[62.72935486 84.82150269]
[47.88838196 86.99993134]
[33.04740906 89.17835999]
[18.20643806 91.35678864]
[3.36546564 93.53521729]
[-11.47550678 95.71364594]
[-26.31647873 97.89207458]
[-41.15745163 100.07050323]
[-55.99842072 102.24893188]
[-70.83939362 104.42736053]
[-77.11300659 118.52152252]
[-90.02310181 126.96739960]
[-105.45012665 127.06995392]
[-118.47136688 118.79644775]
[-124.93179321 104.78693390]
[-122.76990509 89.51179504]
[-112.67556000 77.84527588]
[-97.86981964 73.51011658]
[-83.07714081 77.88965607]
[-73.01782227 89.58638763]
[-58.17684937 87.40795898]
[-43.33588028 85.22953033]
[-28.49490738 83.05110168]
[-13.65393448 80.87267303]
[1.18703699 78.69424438]
[16.02800941 76.51581573]
[30.86898041 74.33738708]
[45.70995331 72.15895844]
[60.55092621 69.98052979]
[71.90769196 72.62965393]
[81.92472839 77.48795319]
[90.24716949 84.25634766]
[96.57443237 92.58401489]
[94.63661194 77.70971680]
[92.69879150 62.83541107]
[90.76096344 47.96111298]
[88.82314301 33.08681107]
[84.60591888 24.96772385]
[86.97639465 17.95619011]
[85.27968597 3.05246043]
[83.58297729 -11.85126972]
[81.88626862 -26.75500107]
[80.18955994 -41.65872955]
[78.49285126 -56.56246185]
[69.24422455 -69.39887238]
[75.49223328 -82.91965485]
[73.79552460 -97.82338715]
[72.09881592 -112.72711182]
[59.62415695 -118.60894775]
[51.75028992 -129.80001831]
[50.44842529 -143.31263733]
[55.95240402 -155.60343933]
[66.72541046 -163.50248718]
[65.27026367 -178.43173218]
[63.81511307 -193.36097717]
[62.35996628 -208.29023743]
[60.90481949 -223.21948242]
[59.44966888 -238.14874268]
[50.41011047 -251.13322449]
[56.87624741 -264.55105591]
[55.42110062 -279.48031616]
[42.42196274 -288.17263794]
[38.10102844 -303.20138550]
[44.49850082 -317.47045898]
[58.59369659 -324.24243164]
[73.73129272 -320.31976318]
[82.76377869 -307.55465698]
[81.42629242 -291.97436523]
[70.35034943 -280.93545532]
[71.80549622 -266.00622559]
[80.74097443 -254.08956909]
[74.37892151 -239.60388184]
[75.83406830 -224.67463684]
[77.28921509 -209.74537659]
[78.74436188 -194.81613159]
[80.19951630 -179.88688660]
[81.65466309 -164.95762634]
[96.06351471 -157.10598755]
[103.02758026 -142.06455994]
[99.62532806 -125.67244720]
[87.00254822 -114.42382050]
[88.69925690 -99.52008820]
[90.39596558 -84.61636353]
[99.52323914 -72.84597015]
[93.39658356 -58.25917053]
[95.09329224 -43.35543823]
[96.79000092 -28.45170784]
[98.48670959 -13.54797745]
[100.18341064 1.35575306]
[101.88011932 16.25948334]
[103.69744873 31.14898682]
[105.63526917 46.02328873]
[107.57308960 60.89759064]
[109.51091003 75.77188873]
[111.44873810 90.64619446]
[119.60473633 103.23506165]
[132.38798523 111.08289337]
[145.17123413 118.93072510]
[158.49194336 125.82701111]
[172.27940369 131.73515320]
[190.50094604 129.12466431]
[200.46789551 143.56121826]
[214.34921265 149.24531555]
[228.23052979 154.92942810]
[242.11184692 160.61352539]
[255.99316406 166.29762268]
[265.13519287 166.65559387]
[270.05203247 172.18778992]
[283.83950806 178.09593201]
[284.58639526 168.27503967]
[290.21984863 158.43820190]
[300.63522339 150.58190918]
[314.99493408 146.59269714]
[329.86926270 148.53051758]
[344.74356079 150.46833801]
[359.61785889 152.40615845]
[374.49215698 154.34397888]
[386.86312866 144.50860596]
[402.55569458 146.38453674]
[412.25970459 158.85879517]
[410.21798706 174.53065491]
[397.64181519 184.10224915]
[381.99243164 181.89494324]
[372.55432129 169.21829224]
[357.68002319 167.28047180]
[342.80572510 165.34265137]
[327.93142700 163.40481567]
[313.05712891 161.46699524]
[306.81558228 175.10749817]
[300.57458496 188.74678040]
[311.76501465 198.73550415]
[322.95541382 208.72422791]
[334.14581299 218.71296692]
[345.33624268 228.70169067]
[356.60714722 238.59948730]
[367.95785522 248.40570068]
[384.15805054 250.95240784]
[389.79931641 266.35073853]
[379.07843018 278.76016235]
[363.02407837 275.41497803]
[358.15164185 259.75637817]
[346.80093384 249.95018005]
[339.67395020 247.95352173]
[335.34750366 239.89210510]
[324.15710449 229.90338135]
[312.96667480 219.91464233]
[301.77627563 209.92591858]
[290.58587646 199.93719482]
[277.93136597 191.88339233]
[264.14392090 185.97525024]
[250.30906677 180.17893982]
[236.42774963 174.49484253]
[222.54643250 168.81074524]
[208.66511536 163.12664795]
[194.78379822 157.44253540]
[183.50022888 161.82702637]
[171.88362122 157.19381714]
[166.37126160 145.52261353]
[152.58381653 139.61447144]
[159.60577393 152.86935425]
[158.46221924 167.82569885]
[149.50674438 179.85896301]
[135.50839233 185.24842834]
[120.79550171 182.32763672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 127]
[5 126]
[6 125]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[62 124]
[63 123]
[64 122]
[65 121]
[66 120]
[68 119]
[69 118]
[70 117]
[71 116]
[72 115]
[73 114]
[75 112]
[76 111]
[77 110]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[89 99]
[90 98]
[128 188]
[129 187]
[131 184]
[132 183]
[133 182]
[134 181]
[135 180]
[137 179]
[138 178]
[142 157]
[143 156]
[144 155]
[145 154]
[146 153]
[159 177]
[160 176]
[161 175]
[162 174]
[163 173]
[164 171]
[165 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
