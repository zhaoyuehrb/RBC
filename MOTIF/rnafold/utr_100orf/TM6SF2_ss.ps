%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCUGGAGAACGCGUCGGGGCUGAGCCGGGGUCCAGCAGCCGCCGCUAUGGACAUCCCGCCGCUGGCCGGCAAGAUCGCGGCGCUGUCGCUGAGCGCCCUCCCGGUGUCCUACGCGCUCAACCACGUCUCGGCGCUCUCGCACCCCC\
) } def
/len { sequence length } bind def

/coor [
[227.29695129 515.42626953]
[223.59078979 500.89132690]
[219.88462830 486.35641479]
[216.17846680 471.82147217]
[212.47230530 457.28652954]
[195.02239990 443.16525269]
[201.03373718 420.77890015]
[195.83831787 406.70739746]
[190.64291382 392.63586426]
[176.56669617 382.20223999]
[179.74612427 364.09503174]
[174.25909424 350.13464355]
[162.40238953 341.11978149]
[164.55529785 325.44573975]
[159.06826782 311.48535156]
[153.58123779 297.52496338]
[148.09420776 283.56457520]
[142.60717773 269.60418701]
[137.19828796 264.49639893]
[137.15454102 255.29586792]
[131.95912170 241.22434998]
[126.76370239 227.15283203]
[121.56828308 213.08131409]
[116.37287140 199.00979614]
[113.27371979 197.20349121]
[110.92066193 193.77349854]
[110.08219910 189.09916687]
[111.32239532 183.89517212]
[107.01480865 169.52699280]
[102.70722198 155.15881348]
[98.39963531 140.79061890]
[94.09205627 126.42243958]
[89.78446960 112.05426025]
[79.23317719 101.39263153]
[64.91058350 96.93581390]
[50.58798218 92.47900391]
[36.26538467 88.02218628]
[21.94278908 83.56536865]
[10.14030361 88.87151337]
[-1.72502375 84.81775665]
[-7.43466330 74.10760498]
[-21.66144180 69.35379028]
[-35.88822174 64.59997559]
[-51.83998871 68.40433502]
[-62.91246033 56.30754089]
[-57.71522522 40.75373840]
[-41.59475708 37.74334717]
[-31.13440704 50.37319565]
[-16.90762711 55.12701035]
[-2.68084860 59.88082504]
[14.26615334 55.43120956]
[26.39960480 69.24277496]
[40.72220230 73.69958496]
[55.04479980 78.15640259]
[69.36739349 82.61322021]
[83.68999481 87.07003784]
[94.24128723 76.40840912]
[89.63571930 62.13294601]
[85.03015900 47.85748672]
[71.24355316 40.60715866]
[66.77621460 26.06420326]
[73.77325439 12.96546364]
[69.16768646 -1.30999696]
[64.56212616 -15.58545780]
[59.95655823 -29.86091805]
[46.39019012 -38.42439651]
[44.77017975 -54.38544464]
[56.33926010 -65.50011444]
[72.22262573 -63.24218369]
[80.23591614 -49.34373856]
[74.23201752 -34.46648407]
[78.83758545 -20.19102287]
[83.44314575 -5.91556168]
[88.04871368 8.35989952]
[101.38159180 14.89978027]
[106.25564575 29.31151962]
[99.30561829 43.25192261]
[103.91117859 57.52738190]
[108.51674652 71.80284119]
[115.88565063 73.19900513]
[125.67253876 61.83164978]
[130.62345886 75.99133301]
[137.99235535 77.38748932]
[147.50071716 65.78614807]
[157.00907898 54.18481064]
[166.51742554 42.58346939]
[176.02578735 30.98212814]
[185.53414917 19.38078690]
[182.46328735 4.04769182]
[190.01210022 -9.64717484]
[204.61628723 -15.23751640]
[219.38017273 -10.08374405]
[227.33273315 3.38068795]
[224.71897888 18.79828644]
[212.77307129 28.88933372]
[197.13549805 28.88914490]
[187.62713623 40.49048615]
[178.11877441 52.09182739]
[168.61041260 63.69316864]
[159.10205078 75.29450989]
[149.59370422 86.89585114]
[136.47727966 106.91535187]
[118.50971222 113.58204651]
[104.15264893 107.74667358]
[108.46023560 122.11486053]
[112.76782227 136.48304749]
[117.07540894 150.85122681]
[121.38298798 165.21940613]
[125.69057465 179.58760071]
[130.44439697 193.81437683]
[135.63980103 207.88589478]
[140.83522034 221.95741272]
[146.03063965 236.02893066]
[151.22605896 250.10044861]
[156.56756592 264.11715698]
[162.05459595 278.07754517]
[167.54162598 292.03793335]
[173.02865601 305.99832153]
[178.51568604 319.95870972]
[190.76487732 329.97210693]
[188.21948242 344.64761353]
[193.70651245 358.60800171]
[205.23130798 364.49301147]
[209.49491882 376.28454590]
[204.71443176 387.44046021]
[209.90983582 401.51196289]
[215.10525513 415.58349609]
[222.62554932 417.14553833]
[229.05937195 421.21411133]
[233.61175537 427.22952271]
[235.74031067 434.39544678]
[235.21961975 441.78399658]
[232.16407776 448.45602417]
[227.00723267 453.58038330]
[230.71339417 468.11529541]
[234.41955566 482.65023804]
[238.12571716 497.18518066]
[241.83187866 511.72012329]
[256.85034180 514.24322510]
[269.54055786 522.66210938]
[277.70388794 535.51824951]
[279.92596436 550.58416748]
[275.82183838 565.24963379]
[266.10253906 576.97375488]
[252.45199585 583.72528076]
[237.23527527 584.33441162]
[223.08874512 578.69567871]
[212.46336365 567.78601074]
[207.20007324 553.49554443]
[208.21075439 538.30017090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 135]
[5 134]
[7 127]
[8 126]
[9 125]
[11 122]
[12 121]
[14 119]
[15 118]
[16 117]
[17 116]
[18 115]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[28 109]
[29 108]
[30 107]
[31 106]
[32 105]
[33 104]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[41 50]
[42 49]
[43 48]
[57 79]
[58 78]
[59 77]
[62 74]
[63 73]
[64 72]
[65 71]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
