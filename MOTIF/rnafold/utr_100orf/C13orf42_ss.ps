%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAAGAAAUCGAGCACUAUGUUCAGAAAGAUCCACUCCAUCUUUAACUCCAGCCCACAGAGAAAGACGGCGGCCGAGAGCCCCUUCUACGAAGGAGCCAGCCCCGCAGUGAAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[153.28411865 121.42266846]
[148.86053467 130.17907715]
[143.01113892 138.05482483]
[135.90664673 144.82009888]
[127.75435638 150.27748108]
[118.79216003 154.26770020]
[109.28159332 156.67433167]
[99.50017548 157.42715454]
[89.73334503 156.50419617]
[80.26610565 153.93238831]
[71.37472534 149.78677368]
[63.31865692 144.18832397]
[56.33298874 137.30041504]
[43.75292969 145.47000122]
[31.17287254 153.63958740]
[18.59281349 161.80917358]
[6.01275492 169.97875977]
[-3.97798634 183.67625427]
[-19.90589142 177.86779785]
[-18.73371696 160.95442200]
[-2.15683031 157.39869690]
[10.42322826 149.22911072]
[23.00328636 141.05952454]
[35.58334351 132.88993835]
[48.16340256 124.72035217]
[43.93167877 112.42868042]
[42.57283783 99.50017548]
[44.15650558 86.59728241]
[30.15280151 81.22175598]
[16.14909363 75.84623718]
[2.14538789 70.47071838]
[-11.85831833 65.09519958]
[-25.86202431 59.71968079]
[-39.45033264 67.45867157]
[-54.82474518 64.60184479]
[-64.72593689 52.49811172]
[-64.47886658 36.86248016]
[-54.20019531 25.07761955]
[-38.74319458 22.70798111]
[-25.40619087 30.87243462]
[-20.48650551 45.71597672]
[-6.48279953 51.09149551]
[7.52090693 56.46701431]
[21.52461433 61.84253311]
[35.52832031 67.21805573]
[49.53202438 72.59357452]
[63.08717728 56.00485992]
[81.77867126 45.53797913]
[103.00562286 42.64936829]
[123.81434631 47.74097443]
[141.30935669 60.10431290]
[153.05625916 78.01905060]
[167.54515076 74.13676453]
[182.03402710 70.25447845]
[196.52291870 66.37219238]
[209.16029358 53.05790710]
[225.91160583 58.10861969]
[240.29389954 53.84838867]
[254.67619324 49.58815765]
[255.67343140 41.48379135]
[258.85995483 33.99528503]
[263.97396851 27.69953537]
[270.60583496 23.07702827]
[278.23080444 20.47517014]
[286.25064087 20.08222580]
[294.04049683 21.91376495]
[300.99752808 25.81262016]
[306.58770752 31.46225548]
[310.38662720 38.41242218]
[325.30444336 36.84449387]
[340.22225952 35.27656937]
[348.54919434 31.22354698]
[355.55038452 33.86811066]
[370.50415039 32.69122696]
[385.45791626 31.51433945]
[390.24859619 21.74165344]
[398.64340210 14.94330883]
[409.04046631 12.32832623]
[419.49261475 14.31579304]
[428.07189941 20.46936607]
[433.22531128 29.59078217]
[448.22531128 29.59078217]
[462.02548218 21.85348129]
[474.75277710 29.59078217]
[489.75277710 29.59078217]
[504.75277710 29.59078217]
[519.75274658 29.59078217]
[534.75274658 29.59078217]
[550.59191895 23.54444313]
[560.78668213 37.09078217]
[550.59191895 50.63712311]
[534.75274658 44.59078217]
[519.75274658 44.59078217]
[504.75277710 44.59078217]
[489.75277710 44.59078217]
[474.75277710 44.59078217]
[462.02548218 52.32808304]
[448.22531128 44.59078217]
[433.22531128 44.59078217]
[420.67181396 59.34789276]
[401.02169800 60.32426453]
[386.63479614 46.46809769]
[371.68103027 47.64498520]
[356.72726440 48.82187271]
[341.79019165 50.19439697]
[326.87237549 51.76232529]
[311.95452881 53.33024979]
[300.10507202 72.43852997]
[277.84036255 77.06622314]
[258.93643188 63.97045517]
[244.55413818 68.23068237]
[230.17184448 72.49091339]
[224.06878662 83.02429962]
[212.02459717 86.64346313]
[200.40519714 80.86107635]
[185.91632080 84.74336243]
[171.42742920 88.62564850]
[156.93853760 92.50793457]
[157.38293457 102.30820465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[52 118]
[53 117]
[54 116]
[55 115]
[57 112]
[58 111]
[59 110]
[69 107]
[70 106]
[71 105]
[73 104]
[74 103]
[75 102]
[81 99]
[82 98]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
