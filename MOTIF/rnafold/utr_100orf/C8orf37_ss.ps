%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGGAGCCUUGGCGAUUGGAGGGGAAAAGGCCAGGCGAUUCAAGAUGGCGGAGGACCUGGACGAGCUCUUGGAUGAAGUCGAGUCCAAGUUUUGCACACCUGACCUUCUAAGACGGGGUAUGGUCGAGCAGCCCAAAGGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[220.64157104 475.42849731]
[214.38366699 461.79623413]
[208.12576294 448.16397095]
[201.86785889 434.53170776]
[190.60124207 430.00527954]
[185.29568481 418.63888550]
[189.30961609 406.33142090]
[183.34648132 392.56765747]
[177.38333130 378.80392456]
[171.42019653 365.04016113]
[165.45704651 351.27639771]
[159.49391174 337.51266479]
[148.14562988 335.69186401]
[139.01170349 328.51895142]
[134.45886230 317.70413208]
[135.73846436 305.91900635]
[142.64509583 296.13671875]
[137.27961731 282.12915039]
[131.91413879 268.12158203]
[126.54866791 254.11404419]
[121.18319702 240.10647583]
[115.81772614 226.09892273]
[110.45224762 212.09136963]
[105.08677673 198.08380127]
[93.82733917 195.77647400]
[85.01045990 188.21725464]
[80.92710876 177.21658325]
[82.71254730 165.49739075]
[90.03363800 156.02130127]
[85.27577209 141.79588318]
[80.51790619 127.57045746]
[70.49694824 116.40889740]
[56.86468124 110.15099335]
[43.23241425 103.89308929]
[29.60015106 97.63518524]
[15.96788597 91.37728119]
[2.47554231 98.81118011]
[-12.63043213 96.89730072]
[-23.58334160 86.57752991]
[-26.32647514 71.96201324]
[-39.95874023 65.70410919]
[-53.59100342 59.44620514]
[-67.05083466 67.16712189]
[-82.47466278 65.46851349]
[-93.93170166 55.00352859]
[-97.01649475 39.79617310]
[-90.54286957 25.69397926]
[-77.00006866 18.11953354]
[-61.59558105 19.98536110]
[-50.25273895 30.57401466]
[-47.33309937 45.81394196]
[-33.70083618 52.07184601]
[-20.06857109 58.32975006]
[-7.19729710 50.88204575]
[7.76843929 52.46025085]
[19.06731224 62.66754150]
[22.22579002 77.74501801]
[35.85805511 84.00292206]
[49.49031830 90.26082611]
[63.12258530 96.51873016]
[76.75485229 102.77663422]
[83.10845947 87.05548096]
[97.24851990 81.04690552]
[101.07881927 66.54418182]
[104.90911865 52.04146957]
[108.73941803 37.53874969]
[102.92412567 25.97294807]
[106.46401978 13.93912506]
[116.92386627 7.77332211]
[121.06532288 -6.64362478]
[125.20677185 -21.06057167]
[129.34823608 -35.47751999]
[133.48968506 -49.89446640]
[137.63113403 -64.31140900]
[141.77259827 -78.72835541]
[132.11938477 -90.87722778]
[131.48432922 -106.38130188]
[140.11163330 -119.27895355]
[154.68391418 -124.61075592]
[169.59783936 -120.32653809]
[179.11869812 -108.07366943]
[179.58551025 -92.56361389]
[170.81880188 -79.76031494]
[156.18954468 -74.58690643]
[152.04808044 -60.16995621]
[147.90663147 -45.75300980]
[143.76518250 -31.33606339]
[139.62371826 -16.91911697]
[135.48226929 -2.50217032]
[131.34082031 11.91477680]
[136.51315308 28.65186119]
[123.24213409 41.36904907]
[119.41183472 55.87176895]
[115.58153534 70.37448120]
[111.75123596 84.87720490]
[118.65913391 92.79051208]
[120.54468536 103.58559418]
[116.40099335 114.21967316]
[106.98947144 121.44857025]
[94.74332428 122.81258392]
[99.50119781 137.03800964]
[104.25906372 151.26342773]
[121.49060059 158.99913025]
[127.56399536 176.54881287]
[119.09433746 192.71833801]
[124.45980835 206.72589111]
[129.82528687 220.73344421]
[135.19075012 234.74101257]
[140.55622864 248.74856567]
[145.92170715 262.75613403]
[151.28717041 276.76367188]
[156.65264893 290.77124023]
[174.20103455 297.75845337]
[181.02383423 315.03057861]
[173.25765991 331.54949951]
[179.22080994 345.31326294]
[185.18394470 359.07702637]
[191.14709473 372.84075928]
[197.11022949 386.60452271]
[203.07337952 400.36828613]
[218.10241699 410.95010376]
[215.50013733 428.27380371]
[221.75804138 441.90606689]
[228.01594543 455.53833008]
[234.27384949 469.17059326]
[247.39794922 472.38638306]
[256.12857056 482.44256592]
[257.43084717 495.50006104]
[251.05068970 506.74313354]
[257.01382446 520.50689697]
[262.97695923 534.27062988]
[268.94012451 548.03442383]
[274.90325928 561.79815674]
[280.86639404 575.56188965]
[294.35137939 584.89398193]
[292.74255371 601.21398926]
[277.69497681 607.73339844]
[264.68826294 597.74548340]
[267.10263062 581.52508545]
[261.13949585 567.76129150]
[255.17636108 553.99755859]
[249.21321106 540.23376465]
[243.25007629 526.47003174]
[237.28692627 512.70629883]
[221.42135620 507.22695923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[23 106]
[24 105]
[29 102]
[30 101]
[31 100]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[40 53]
[41 52]
[42 51]
[63 95]
[64 94]
[65 93]
[66 92]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[129 144]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
