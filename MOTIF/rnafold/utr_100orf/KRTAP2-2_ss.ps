%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCGGCUCCUGCUGCGGCUCCACCUUCUCCUCCCUGAGCUACGGGGGAGGCUGCUGCCAGCCCUGCUGCUGCCGCGACCCCUGCUGCUGCCGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[-6.01580429 309.68011475]
[-16.56154060 320.34722900]
[-30.79774475 325.07275391]
[-45.62900925 322.82919312]
[-57.83055115 314.10437012]
[-64.74935913 300.79534912]
[-64.88146973 285.79763794]
[-74.72039795 297.11999512]
[-84.55932617 308.44232178]
[-87.15278625 324.63510132]
[-102.56731415 330.23193359]
[-114.94576263 319.47525024]
[-111.55425262 303.43063354]
[-95.88166809 298.60339355]
[-86.04273987 287.28106689]
[-76.20381165 275.95870972]
[-68.43606567 263.12664795]
[-62.96629333 249.15946960]
[-57.49652100 235.19232178]
[-52.02674866 221.22515869]
[-46.55697250 207.25799561]
[-59.52746201 214.79234314]
[-74.16374969 218.07550049]
[-89.10969543 216.80325317]
[-102.98048401 211.09349060]
[-114.49089050 201.47526550]
[-122.57442474 188.83973694]
[-126.48208618 174.35766602]
[-125.85182190 159.37092590]
[-120.74201965 145.26808167]
[-111.62613678 133.35588074]
[-99.34880829 124.73803711]
[-85.04759979 120.21304321]
[-70.04760742 120.20018005]
[-55.73865891 124.70062256]
[-43.44656372 133.29739380]
[-34.31025696 145.19393921]
[-29.17626572 159.28799438]
[-28.52028847 174.27363586]
[-32.40345383 188.76318359]
[-20.35100174 179.83355713]
[-8.29854679 170.90391541]
[-6.36673927 156.17967224]
[5.72895718 146.95205688]
[21.16001320 149.07815552]
[33.21246719 140.14851379]
[45.26492310 131.21888733]
[57.31737518 122.28925323]
[69.36982727 113.35961914]
[81.42228699 104.42998505]
[83.65906525 90.11415100]
[95.30134583 81.48841095]
[109.64807892 83.51756287]
[121.70053864 74.58792877]
[128.18284607 60.15566635]
[143.01525879 58.79590607]
[155.06771851 49.86627197]
[161.55001831 35.43400955]
[176.38243103 34.07424927]
[188.43489075 25.14461708]
[193.58320618 17.38011932]
[201.00390625 16.13162231]
[213.32823181 7.58113766]
[225.65257263 -0.96934617]
[235.21975708 -14.96597004]
[251.31784058 -9.64733410]
[250.66345215 7.29397964]
[234.20306396 11.35498810]
[221.87872314 19.90547180]
[209.55438232 28.45595551]
[197.36451721 37.19707108]
[185.31207275 46.12670517]
[179.69181824 59.92026138]
[163.99734497 61.91872787]
[151.94488525 70.84835815]
[146.32464600 84.64191437]
[130.63017273 86.64038086]
[118.57771301 95.57001495]
[116.34093475 109.88584900]
[104.69865417 118.51158905]
[90.35192108 116.48243713]
[78.29946136 125.41207123]
[66.24700928 134.34170532]
[54.19455338 143.27133179]
[42.14210129 152.20097351]
[30.08964539 161.13059998]
[27.62983894 176.51199341]
[15.27972984 185.39620972]
[0.63108587 182.95637512]
[-11.42136860 191.88600159]
[-23.47382355 200.81564331]
[-32.58981323 212.72776794]
[-38.05958557 226.69493103]
[-43.52935791 240.66209412]
[-48.99913025 254.62924194]
[-54.46890640 268.59640503]
[-41.11780548 261.75915527]
[-26.11785698 261.71920776]
[-12.73052979 268.48526001]
[-3.86665154 280.58615112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[9 14]
[17 96]
[18 95]
[19 94]
[20 93]
[21 92]
[40 91]
[41 90]
[42 89]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[53 78]
[54 77]
[56 75]
[57 74]
[59 72]
[60 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
