%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCUGUACCUCGGCGCCUGCUCCAAGCCUGCCAAAGUCGCCGUCACCAAGACGGUCGCCAGCGUCCUGGCCGCGGACACCCAGCAGUGCAGAGACG\
) } def
/len { sequence length } bind def

/coor [
[16.98467064 218.33569336]
[11.47921658 215.47743225]
[-0.57323766 224.40705872]
[-12.62569237 233.33670044]
[-24.67814636 242.26632690]
[-36.73060226 251.19595337]
[-48.78305435 260.12557983]
[-55.62041473 277.13433838]
[-73.02797699 278.64367676]
[-84.79689026 287.94381714]
[-84.03507996 303.44216919]
[-92.55662537 316.40994263]
[-107.08481598 321.86074829]
[-122.03327942 317.69863892]
[-131.65400696 305.52401733]
[-132.24765015 290.01831055]
[-123.58593750 277.14373779]
[-108.99946594 271.85086060]
[-94.09703827 276.17489624]
[-82.32812500 266.87475586]
[-80.56254578 254.79582214]
[-70.67903900 246.96379089]
[-57.71268845 248.07313538]
[-45.66023254 239.14350891]
[-33.60778046 230.21386719]
[-21.55532455 221.28424072]
[-9.50287056 212.35461426]
[2.54958367 203.42497253]
[8.28816700 179.70793152]
[32.75597000 174.37728882]
[42.23801422 162.75442505]
[51.53815842 150.98551941]
[60.65414810 139.07339478]
[69.77014160 127.16127014]
[78.88613129 115.24914551]
[74.10636139 102.80202484]
[76.11278534 89.62055969]
[84.37955475 79.15932465]
[96.74012756 74.16001129]
[109.95504761 75.93282318]
[119.43709564 64.30996704]
[118.03302765 48.79654312]
[127.81474304 37.14439011]
[142.61306763 35.90142822]
[152.09512329 24.27857208]
[161.57716370 12.65571499]
[171.05921936 1.03285837]
[169.65515137 -14.48056602]
[179.43685913 -26.13272095]
[194.23519897 -27.37568092]
[203.71723938 -38.99853897]
[213.19927979 -50.62139511]
[215.92756653 -66.20558167]
[229.96824646 -71.17637634]
[239.45030212 -82.79923248]
[248.93234253 -94.42208862]
[258.41439819 -106.04494476]
[254.32263184 -121.01281738]
[259.84170532 -135.51521301]
[272.84942627 -143.97566223]
[288.34402466 -143.14094543]
[300.36755371 -133.33203125]
[304.29669189 -118.32065582]
[298.62060547 -103.87899017]
[285.52188110 -95.56014252]
[270.03723145 -96.56289673]
[260.55520630 -84.94004059]
[251.07315063 -73.31718445]
[241.59111023 -61.69432449]
[239.54103088 -46.94147873]
[224.82214355 -41.13934708]
[215.34008789 -29.51649094]
[205.85804749 -17.89363480]
[207.61201477 -3.14713693]
[198.16143799 8.77516747]
[182.68206787 10.51490498]
[173.20002747 22.13776207]
[163.71797180 33.76061630]
[154.23593140 45.38347626]
[155.98989868 60.12997055]
[146.53932190 72.05227661]
[131.05995178 73.79201508]
[121.57790375 85.41487122]
[126.02680206 100.96821594]
[120.43460846 116.14802551]
[106.95877075 125.09795380]
[90.79825592 124.36513519]
[81.68226624 136.27725220]
[72.56627655 148.18937683]
[63.45028305 160.10151672]
[60.64772415 168.98623657]
[53.86087036 172.23648071]
[44.37882614 183.85932922]
[46.98238373 189.81440735]
[47.87593842 196.21879578]
[47.01065063 202.59385681]
[44.46847153 208.46798706]
[40.45473099 213.41143799]
[35.28167343 217.06784058]
[29.34420967 219.17984009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[9 20]
[10 19]
[30 93]
[31 92]
[32 90]
[33 89]
[34 88]
[35 87]
[40 83]
[41 82]
[44 79]
[45 78]
[46 77]
[47 76]
[50 73]
[51 72]
[52 71]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
