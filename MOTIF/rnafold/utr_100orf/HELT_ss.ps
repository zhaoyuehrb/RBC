%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGGGACACUCGAGGAGGCACACGAGGCGGAAAAGUGGACGGGUGCCCCGCGCCACCGCCUCUCCCGAGGGCGCGUACUGACCAGGAUGUCAGACAAGCUCAAGGAACGCAAAAGAACCCCCGUUUCUCAUAAAGUGAUAGAAAAGCGGAGGAGGGACAGGAUCAACCGCUGCUUGAACGAGCUGG\
) } def
/len { sequence length } bind def

/coor [
[102.20877838 355.55575562]
[93.06285095 367.89462280]
[78.96643066 373.99270630]
[63.71139145 372.20965576]
[51.40125656 363.02508545]
[45.34739304 348.90963745]
[47.17826080 333.66024780]
[56.40136337 321.37896729]
[70.53573608 315.36938477]
[72.27713013 300.47079468]
[73.89463806 285.55825806]
[75.38816071 270.63281250]
[76.88167572 255.70733643]
[78.37519073 240.78187561]
[67.15243530 231.02546692]
[63.78681183 216.35792542]
[69.77331543 202.35739136]
[83.00885773 194.47534180]
[84.50238037 179.54988098]
[85.99589539 164.62442017]
[87.48941040 149.69895935]
[88.98293304 134.77349854]
[80.86116028 131.05281067]
[73.88732147 125.46958923]
[68.47969818 118.35872650]
[64.96264648 110.14672089]
[50.00458527 111.26766968]
[35.04652786 112.38861847]
[20.08847237 113.50957489]
[5.13041496 114.63052368]
[-9.82764149 115.75147247]
[-24.78569794 116.87242889]
[-15.37697029 128.55471802]
[-18.47734261 143.23080444]
[-31.80713844 150.10951233]
[-45.56508255 144.13296509]
[-49.63508224 129.69569397]
[-41.02302551 117.41242218]
[-56.02251053 117.28775787]
[-71.02198792 117.16309357]
[-86.81852722 126.60919952]
[-101.58901215 117.14786530]
[-116.58849335 117.27252960]
[-131.58798218 117.39719391]
[-146.58746338 117.52185822]
[-162.37579346 123.69963074]
[-172.68278503 110.23848724]
[-162.60096741 96.60788727]
[-146.71212769 102.52237701]
[-131.71264648 102.39771271]
[-116.71316528 102.27304840]
[-101.71367645 102.14838409]
[-92.99995422 93.74095917]
[-80.49234009 93.52544403]
[-70.89732361 102.16361237]
[-55.89784241 102.28827667]
[-40.89836121 102.41294098]
[-25.90665054 101.91436768]
[-10.94859314 100.79341888]
[4.00946379 99.67246246]
[18.96751976 98.55151367]
[33.92557907 97.43056488]
[48.88363647 96.30960846]
[63.84169006 95.18865967]
[69.03476715 77.30269623]
[82.90289307 63.49679565]
[102.62528229 57.85707855]
[98.92391968 43.32092285]
[85.61907959 35.22037506]
[82.07244110 20.42591476]
[89.87706757 7.79169893]
[86.17571259 -6.74446011]
[82.47434998 -21.28061867]
[78.77298737 -35.81678009]
[65.46813965 -43.91732407]
[61.92150879 -58.71178436]
[69.72613525 -71.34600067]
[66.02477264 -85.88215637]
[60.86526871 -93.44336700]
[62.38483810 -100.69070435]
[58.92559814 -115.28637695]
[55.46636200 -129.88204956]
[52.00712204 -144.47772217]
[48.54788589 -159.07339478]
[34.96670532 -167.15591431]
[31.15960121 -182.49479675]
[39.38525772 -195.98977661]
[54.76354218 -199.63449097]
[68.17078400 -191.26661682]
[71.65271759 -175.85066223]
[63.14355850 -162.53263855]
[66.60279846 -147.93696594]
[70.06203461 -133.34129333]
[73.52127075 -118.74561310]
[76.98050690 -104.14994049]
[80.56093597 -89.58351898]
[84.26229095 -75.04736328]
[97.15885162 -67.68431854]
[101.11962891 -52.99530792]
[93.30914307 -39.51813889]
[97.01050568 -24.98198128]
[100.71186829 -10.44582081]
[104.41323090 4.09033823]
[117.30978394 11.45338440]
[121.27056122 26.14238930]
[113.46008301 39.61956024]
[117.16143799 54.15571976]
[120.88219452 39.62451172]
[124.60295105 25.09330559]
[124.58473969 10.09331703]
[131.50135803 -3.21684813]
[143.78663635 -11.82333565]
[158.65882874 -13.77735901]
[172.75035095 -8.63646317]
[182.87045288 2.43528652]
[186.72760010 16.93088722]
[183.44841003 31.56806374]
[173.77540588 43.03248596]
[159.89628601 48.72862244]
[147.87638855 57.70204926]
[135.85650635 66.67547607]
[150.70704651 64.56319427]
[165.53950500 62.32756042]
[180.35287476 59.96873093]
[195.16624451 57.60990143]
[209.97961426 55.25107193]
[224.79298401 52.89224243]
[239.60635376 50.53341293]
[252.01809692 40.72222900]
[265.80374146 46.36183167]
[280.61712646 44.00300217]
[285.44976807 29.48047256]
[296.48590088 18.87562370]
[311.18942261 14.62537289]
[326.18161011 17.70639610]
[338.01739502 27.41069603]
[343.97692871 41.50829697]
[342.69079590 56.75967407]
[334.45455933 69.66017151]
[321.16082764 77.24534607]
[305.86437988 77.77218628]
[292.08026123 71.11962891]
[282.97595215 58.81637192]
[268.16256714 61.17520142]
[256.81039429 70.81766510]
[241.96517944 65.34678650]
[227.15180969 67.70561218]
[212.33843994 70.06444550]
[197.52507019 72.42327118]
[182.71170044 74.78209686]
[167.89833069 77.14093018]
[161.77551270 81.30554962]
[152.81932068 79.41372681]
[137.96879578 81.52600861]
[139.34016418 100.91524506]
[132.02282715 117.46742249]
[143.43296814 127.20439911]
[157.61694336 121.45345306]
[172.84768677 122.96440887]
[185.62528992 131.39006042]
[193.01353455 144.79425049]
[193.31468201 160.09680176]
[186.45951843 173.78128052]
[174.02330017 182.70312500]
[158.86378479 184.81213379]
[144.46453857 179.62368774]
[134.13436890 168.33004761]
[130.24710083 153.52639771]
[133.69598389 138.61453247]
[122.28585052 128.87754822]
[116.64868164 132.45602417]
[110.45367432 134.94700623]
[103.90839386 136.26701355]
[102.41487122 151.19247437]
[100.92135620 166.11795044]
[99.42784119 181.04341125]
[97.93431854 195.96887207]
[109.34564209 206.31719971]
[112.43929291 221.22634888]
[106.23409271 234.93617249]
[93.30065155 242.27539062]
[91.80713654 257.20086670]
[90.31362152 272.12631226]
[88.82009888 287.05178833]
[91.08236694 295.92163086]
[87.17570496 302.21218872]
[85.43431091 317.11077881]
[97.80178070 326.21798706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 187]
[10 186]
[11 184]
[12 183]
[13 182]
[14 181]
[18 177]
[19 176]
[20 175]
[21 174]
[22 173]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[38 57]
[39 56]
[40 55]
[42 52]
[43 51]
[44 50]
[45 49]
[67 107]
[68 106]
[71 103]
[72 102]
[73 101]
[74 100]
[77 97]
[78 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[121 154]
[122 153]
[123 151]
[124 150]
[125 149]
[126 148]
[127 147]
[128 146]
[130 144]
[131 143]
[156 170]
[157 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
