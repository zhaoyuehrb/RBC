%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGUUGGAGAACCAGACACGAGUCACCAAGUUCAUUCUGGUGGGAUUCCCUGGGAGCUUGAGUAUGCGGGCAGCCAUGUUUCUGAUAUUCCUUGUGG\
) } def
/len { sequence length } bind def

/coor [
[98.28250885 285.83734131]
[102.97647095 271.14141846]
[114.88504028 261.33377075]
[113.02355957 246.44973755]
[111.16207886 231.56568909]
[108.83860779 216.74673462]
[106.05538940 202.00720215]
[103.27217102 187.26766968]
[100.48896027 172.52815247]
[97.70574188 157.78862000]
[94.92252350 143.04908752]
[92.13931274 128.30955505]
[89.35609436 113.57003021]
[78.99979401 102.71890259]
[64.40611267 99.25125122]
[49.81243515 95.78360748]
[35.21875763 92.31596375]
[20.62508011 88.84832001]
[6.03140211 85.38067627]
[-4.64282274 93.76732635]
[-18.00659561 94.40782928]
[-29.10445404 87.29161072]
[-33.95239639 75.24256897]
[-48.43117142 71.32273865]
[-62.90994644 67.40291595]
[-74.90931702 77.24134064]
[-90.40183258 78.11412811]
[-103.43029022 69.68567657]
[-108.98499298 55.19689178]
[-104.93003845 40.21900940]
[-92.82464600 30.51132965]
[-77.32357788 29.80665398]
[-64.38732147 38.37594604]
[-58.99011993 52.92413712]
[-44.51134491 56.84396744]
[-30.03256798 60.76379395]
[-15.91331768 51.77568054]
[0.68425530 55.77558517]
[9.49904728 70.78699493]
[24.09272575 74.25463867]
[38.68640137 77.72229004]
[53.28008270 81.18993378]
[67.87375641 84.65757751]
[82.46743774 88.12522125]
[93.78977966 78.28629303]
[92.39208984 63.35155106]
[90.99440002 48.41681290]
[83.49848938 33.20998383]
[96.03595734 21.79734421]
[110.47329712 30.68550682]
[105.92914581 47.01912308]
[107.32683563 61.95386124]
[108.72452545 76.88860321]
[122.22456360 83.42687225]
[134.80885315 75.26380920]
[147.39314270 67.10074615]
[150.80444336 51.90203476]
[163.68299866 43.80279541]
[178.15162659 47.14862061]
[190.73591614 38.98555756]
[203.32020569 30.82249260]
[215.90449524 22.65943146]
[228.48878479 14.49636745]
[231.53715515 -1.01114666]
[244.70452881 -9.75160885]
[260.17895508 -6.53945732]
[268.77972412 6.71959496]
[265.40414429 22.15918732]
[252.05490112 30.61928558]
[236.65185547 27.08065987]
[224.06756592 35.24372101]
[211.48326111 43.40678406]
[198.89897156 51.56984711]
[186.31468201 59.73291016]
[183.47120667 74.30858612]
[170.82524109 82.76635742]
[155.55621338 79.68503571]
[142.97192383 87.84809875]
[130.38761902 96.01116180]
[123.07895660 107.53630066]
[112.95860291 112.36037445]
[104.09561920 110.78681183]
[106.87883759 125.52634430]
[109.66205597 140.26586914]
[112.44526672 155.00540161]
[115.22848511 169.74493408]
[118.01170349 184.48445129]
[120.79492188 199.22398376]
[123.57813263 213.96351624]
[127.76865387 219.44609070]
[128.33404541 225.32742310]
[126.04612732 229.70420837]
[127.90760803 244.58825684]
[129.76908875 259.47229004]
[143.72627258 266.04501343]
[151.89495850 279.13226318]
[151.66853333 294.55798340]
[143.11926270 307.39984131]
[128.97517395 313.56005859]
[113.74961090 311.07296753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 89]
[7 88]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[23 36]
[24 35]
[25 34]
[45 53]
[46 52]
[47 51]
[54 79]
[55 78]
[56 77]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
