%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCGGCCCGGGAGCCCCCCUCGCGGGCCCGGCCGCCGCCGCCCCUCGCCGCGCGCCCCGCGCCCGCCCCCGCCGCCCCCAGGCCGCGUUCGCCCG\
) } def
/len { sequence length } bind def

/coor [
[100.15648651 398.60171509]
[97.07179260 383.48587036]
[102.67031860 369.11019897]
[115.16558838 360.06188965]
[114.23303986 345.09091187]
[113.30049896 330.11993408]
[112.36795044 315.14895630]
[111.20269775 300.19427490]
[109.80500793 285.25955200]
[108.40731812 270.32479858]
[107.00962830 255.39006042]
[105.61193848 240.45532227]
[96.72238159 228.50437927]
[103.14012909 214.04328918]
[101.74243927 199.10855103]
[100.34475708 184.17381287]
[91.45520020 172.22285461]
[97.87294769 157.76177979]
[96.47525787 142.82702637]
[82.04888916 139.04273987]
[69.78492737 130.55532837]
[61.16070938 118.38717651]
[57.21512222 104.00408173]
[58.42344666 89.13865662]
[64.64012909 75.58159637]
[75.11631012 64.96601105]
[88.59000397 58.57065582]
[87.19231415 43.63591766]
[85.79462433 28.70117569]
[84.39693451 13.76643562]
[82.99924469 -1.16830492]
[81.60155487 -16.10304451]
[72.61203003 -29.12222099]
[79.12975311 -42.51507950]
[77.73206329 -57.44981766]
[76.33437347 -72.38455963]
[66.85224152 -81.29781342]
[66.08532715 -93.88496399]
[73.89978790 -103.26324463]
[72.96723938 -118.23423004]
[71.80198669 -133.18890381]
[70.40429688 -148.12364197]
[69.00660706 -163.05838013]
[60.01707840 -176.07756042]
[66.53479767 -189.47041321]
[65.13710785 -204.40515137]
[53.75254822 -215.70875549]
[55.63506699 -231.64097595]
[69.34056091 -239.97998047]
[84.35534668 -234.32879639]
[89.16136169 -219.02253723]
[80.07184601 -205.80284119]
[81.46953583 -190.86810303]
[90.35909271 -178.91716003]
[83.94134521 -164.45606995]
[85.33903503 -149.52133179]
[86.73672485 -134.58659363]
[90.56145477 -128.10609436]
[87.93822479 -119.16677856]
[88.87077332 -104.19579315]
[99.36811066 -90.22770691]
[91.26911163 -73.78224945]
[92.66680145 -58.84750748]
[94.06449127 -43.91276550]
[102.95404816 -31.96182251]
[96.53630066 -17.50073433]
[97.93399048 -2.56599379]
[99.33167267 12.36874676]
[100.72936249 27.30348587]
[102.12705231 42.23822784]
[103.52474213 57.17296600]
[117.95111084 60.95725250]
[130.21507263 69.44467163]
[138.83929443 81.61282349]
[142.78488159 95.99591827]
[141.57655334 110.86134338]
[135.35986328 124.41840363]
[124.88368988 135.03399658]
[111.40999603 141.42933655]
[112.80768585 156.36408997]
[121.79721069 169.38325500]
[115.27949524 182.77612305]
[116.67718506 197.71086121]
[118.07487488 212.64559937]
[127.06439972 225.66477966]
[120.54667664 239.05763245]
[121.94436646 253.99237061]
[123.34205627 268.92712402]
[124.73974609 283.86184692]
[126.13743591 298.79660034]
[130.11369324 307.22167969]
[127.33893585 314.21640015]
[128.27148438 329.18737793]
[129.20402527 344.15838623]
[130.13656616 359.12936401]
[143.65812683 366.55706787]
[150.99737549 380.12686157]
[149.81239319 395.50863647]
[140.48127747 407.79415894]
[125.98157501 413.06314087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[7 92]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[14 84]
[15 83]
[16 82]
[18 80]
[19 79]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[39 60]
[40 59]
[41 57]
[42 56]
[43 55]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
