%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGGGACAACAGCUCCAGCCUGACCCCAGGAUUCUUUAUCUUGAAUGGCGUUCCUGGGCUGGAAGCCACACACAUCUGGAUCUCCCUGCCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[111.32451630 144.56617737]
[91.59329224 145.20747375]
[73.41162872 137.51596069]
[60.13084030 122.90935516]
[46.08030319 128.16125488]
[32.02976608 133.41314697]
[17.97923088 138.66503906]
[3.92869449 143.91694641]
[-10.12184238 149.16883850]
[-24.17237854 154.42073059]
[-34.38999939 166.50009155]
[-49.02070236 163.70869446]
[-63.07123566 168.96058655]
[-67.10124969 179.30297852]
[-76.03493500 185.50942993]
[-86.68990326 185.67022705]
[-95.43483734 179.97792053]
[-109.78469849 184.34613037]
[-120.58201599 196.68914795]
[-136.61538696 193.24488831]
[-141.39106750 177.55651855]
[-129.99623108 165.76289368]
[-114.15292358 169.99627686]
[-99.80305481 165.62805176]
[-87.88032532 150.53959656]
[-68.32313538 154.91004944]
[-54.27259827 149.65815735]
[-45.05996323 137.95445251]
[-29.42427635 140.37019348]
[-15.37373924 135.11830139]
[-1.32320225 129.86640930]
[12.72733402 124.61450958]
[26.77787018 119.36260986]
[40.82840729 114.11071014]
[54.87894440 108.85881805]
[54.05309296 98.19172668]
[55.71471405 87.62252808]
[59.77385712 77.72342682]
[66.01076508 69.03033447]
[74.08779144 62.01387787]
[83.56764221 57.05391693]
[93.93711853 54.41897583]
[104.63482666 54.25170135]
[115.08161163 56.56115341]
[124.71190643 61.22230148]
[133.00434875 67.98279572]
[139.50999451 76.47664642]
[143.87664795 86.24399567]
[158.72994995 84.15126801]
[173.58325195 82.05854034]
[188.43655396 79.96580505]
[203.28984070 77.87307739]
[218.14314270 75.78034973]
[232.99644470 73.68762207]
[247.84974670 71.59488678]
[250.96397400 68.77785492]
[254.44926453 67.15094757]
[257.91735840 66.69214630]
[261.02203369 67.26452637]
[263.49057007 68.63772583]
[265.14672852 70.51745605]
[280.14492798 70.75073242]
[295.14309692 70.98400879]
[301.35549927 67.97978973]
[307.23056030 68.60693359]
[311.05877686 71.72713470]
[326.01342773 72.89238739]
[340.96810913 74.05764771]
[351.36550903 66.23136139]
[363.89947510 67.61852264]
[371.81048584 76.91549683]
[386.72171021 78.54528046]
[401.63290405 80.17506409]
[411.96350098 68.59670258]
[427.13381958 65.33467865]
[441.31057739 71.64332581]
[449.04254150 85.09682465]
[447.35656738 100.52203369]
[436.90097046 111.98764801]
[421.69616699 115.08490753]
[407.58865356 108.62284851]
[400.00311279 95.08625793]
[385.09191895 93.45648193]
[370.18072510 91.82669830]
[354.62942505 99.79282379]
[339.80285645 89.01232147]
[324.84817505 87.84706116]
[309.89349365 86.68180084]
[294.90982056 85.98219299]
[279.91165161 85.74891663]
[264.91345215 85.51564026]
[249.94247437 86.44818878]
[235.08917236 88.54091644]
[220.23587036 90.63364410]
[205.38258362 92.72637939]
[190.52928162 94.81910706]
[175.67597961 96.91183472]
[160.82267761 99.00457001]
[145.96939087 101.09729767]
[141.27262878 120.27209473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[12 27]
[13 26]
[17 24]
[18 23]
[48 99]
[49 98]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[61 91]
[62 90]
[63 89]
[66 88]
[67 87]
[68 86]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
