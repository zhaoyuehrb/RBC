%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGAGCGCAGUCCGGGUGCGUAGGGGCCGCUCGGCGGGGGCCGCGCGGGCAAGAUGGUGUGCGCUCGGGCGGCCCUCGGUCCCGGCGCGCUCUGGGCCGCGGCCUGGGGCGUCCUGCUGCUCACAGCCCCUGCGGGGGCGCAGCGUGGCCGGA\
) } def
/len { sequence length } bind def

/coor [
[421.64346313 348.68612671]
[409.47280884 339.91827393]
[397.30215454 331.15045166]
[385.13146973 322.38262939]
[370.51672363 325.01794434]
[358.04904175 316.29946899]
[355.38397217 300.95233154]
[343.21331787 292.18450928]
[331.04263306 283.41665649]
[326.21594238 283.29806519]
[321.42593384 280.10736084]
[318.56805420 274.04260254]
[306.76028442 264.79183960]
[294.95254517 255.54104614]
[283.14477539 246.29026794]
[271.33703613 237.03947449]
[259.52929688 227.78869629]
[247.62898254 218.65727234]
[235.63734436 209.64614868]
[223.64570618 200.63500977]
[211.65406799 191.62387085]
[199.66241455 182.61274719]
[187.67077637 173.60160828]
[172.84793091 172.14132690]
[166.46360779 157.66545105]
[154.47196960 148.65431213]
[142.48031616 139.64318848]
[130.48867798 130.63204956]
[118.49703979 121.62091827]
[106.50539398 112.60977936]
[91.87193298 109.31404877]
[77.17507935 112.31443787]
[62.86546707 121.40682220]
[50.16712570 110.17345428]
[57.44623566 94.86166382]
[74.17469025 97.61757660]
[88.87155151 94.61719513]
[93.18967438 80.25217438]
[82.58306885 69.64556885]
[71.97647095 59.03896713]
[61.36986923 48.43236542]
[50.76326752 37.82576370]
[40.15666580 27.21916389]
[29.55006409 16.61256218]
[18.94346237 6.00595999]
[8.33685970 -4.60064173]
[-6.89243317 -8.88773918]
[-10.42087555 -23.35837746]
[-21.02747726 -33.96497726]
[-31.63407898 -44.57157898]
[-42.24068069 -55.17818069]
[-52.84728241 -65.78478241]
[-67.23678589 -60.69509506]
[-82.40868378 -62.36135483]
[-95.35057068 -70.45272064]
[-103.49283600 -83.36264801]
[-105.21883392 -98.52786255]
[-100.18584442 -112.93729401]
[-89.39319611 -123.72994995]
[-74.98375702 -128.76293945]
[-59.81854630 -127.03694153]
[-46.90861511 -118.89467621]
[-38.81724930 -105.95278168]
[-37.15099335 -90.78089142]
[-42.24068069 -76.39138794]
[-31.63407898 -65.78478241]
[-21.02747726 -55.17818069]
[-10.42087555 -44.57157898]
[0.18572576 -33.96497726]
[14.65636349 -30.43653679]
[18.94346237 -15.20724297]
[29.55006409 -4.60064173]
[40.15666580 6.00595999]
[50.76326752 16.61256218]
[61.36986923 27.21916389]
[71.97647095 37.82576370]
[82.58306885 48.43236542]
[93.18967438 59.03896713]
[103.79627228 69.64556885]
[115.51653290 100.61814117]
[127.50817108 109.62927246]
[139.49981689 118.64040375]
[151.49145508 127.65154266]
[163.48309326 136.66267395]
[175.47473145 145.67381287]
[191.15530396 147.77862549]
[196.68191528 161.60997009]
[208.67355347 170.62109375]
[220.66519165 179.63223267]
[232.65682983 188.64337158]
[244.64848328 197.65449524]
[256.64010620 206.66563416]
[265.43505859 209.34207153]
[268.78005981 215.98094177]
[280.58782959 225.23173523]
[292.39556885 234.48251343]
[304.20333862 243.73329163]
[316.01107788 252.98408508]
[327.81881714 262.23486328]
[339.81045532 271.24600220]
[351.98114014 280.01382446]
[364.15179443 288.78164673]
[379.55307007 286.44961548]
[391.77096558 295.51483154]
[393.89929199 310.21194458]
[406.06997681 318.97979736]
[418.24063110 327.74761963]
[430.41131592 336.51544189]
[451.78967285 337.27178955]
[459.64889526 356.32229614]
[472.32675171 364.33929443]
[485.00460815 372.35629272]
[495.93756104 367.51525879]
[507.72714233 368.56930542]
[517.42877197 375.13824463]
[522.67626953 385.47909546]
[522.25823975 396.94735718]
[534.60302734 405.46835327]
[546.94775391 413.98931885]
[559.29254150 422.51028442]
[571.63726807 431.03125000]
[583.98205566 439.55221558]
[584.21771240 424.55407715]
[595.96325684 415.22445679]
[610.62567139 418.38888550]
[617.47790527 431.73226929]
[611.50695801 445.49264526]
[597.08007812 449.60272217]
[608.50579834 459.32144165]
[619.93145752 469.04019165]
[631.35717773 478.75891113]
[642.78283691 488.47766113]
[659.00213623 490.89984131]
[664.76153564 506.25436401]
[654.13623047 518.74578857]
[638.05670166 515.52404785]
[633.06408691 499.90332031]
[621.63842773 490.18460083]
[610.21270752 480.46588135]
[598.78704834 470.74713135]
[587.36138916 461.02841187]
[575.46105957 451.89697266]
[563.11633301 443.37600708]
[550.77154541 434.85504150]
[538.42681885 426.33407593]
[526.08203125 417.81311035]
[513.73730469 409.29214478]
[496.01199341 413.69750977]
[480.39682007 403.62426758]
[476.98760986 385.03414917]
[464.30975342 377.01715088]
[451.63189697 369.00015259]
[443.30856323 372.36703491]
[434.23516846 371.47973633]
[426.49050903 366.41299438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[7 102]
[8 101]
[9 100]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[31 37]
[32 36]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[110 152]
[111 151]
[112 150]
[117 147]
[118 146]
[119 145]
[120 144]
[121 143]
[122 142]
[128 141]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
