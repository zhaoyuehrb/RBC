%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGAGGCGGCUUGUGUCCACGGGACGCGGGCGGAUCUUCUCCGGCCAUGAGGAAGCCAGCCGCUGGCUUCCUUCCCUCACUCCUGAAGGUGCUGCUCCUGCCUCUGGCACCUGCCGCAGCCCAGGAUUCGACUCAGGCCUCCACUC\
) } def
/len { sequence length } bind def

/coor [
[88.47498322 373.14328003]
[73.78347015 368.85165405]
[62.77726364 358.21575928]
[57.98550415 343.67968750]
[60.50930405 328.58367920]
[69.76871490 316.39672852]
[83.63598633 309.91928101]
[84.26833344 294.93261719]
[77.07444763 281.89047241]
[85.38663483 268.42874146]
[86.01898193 253.44209290]
[86.65132904 238.45541382]
[87.28368378 223.46875000]
[87.91603088 208.48208618]
[88.54837799 193.49542236]
[81.35449219 180.45329285]
[89.66667938 166.99156189]
[90.29902649 152.00489807]
[90.93138123 137.01823425]
[76.54067230 130.03746033]
[66.28151703 117.76663971]
[61.96070862 102.36682892]
[64.33921051 86.55017853]
[51.62035370 78.59841156]
[38.90149307 70.64664459]
[26.18263435 62.69487381]
[1.33169138 73.48529816]
[-13.62748337 72.37937164]
[-27.96055794 79.07814026]
[-40.08272934 70.42353058]
[-55.04190445 69.31759644]
[-69.37497711 76.01637268]
[-81.49714661 67.36176300]
[-96.45632172 66.25582886]
[-111.41549683 65.14989471]
[-126.37467194 64.04396057]
[-139.41444397 73.38976288]
[-154.81159973 68.88339996]
[-160.75474548 53.98177338]
[-152.68482971 40.11613464]
[-136.79238892 37.92301559]
[-125.26873779 49.08478928]
[-110.30956268 50.19071960]
[-95.35038757 51.29665375]
[-80.39121246 52.40258408]
[-67.12812042 45.62471008]
[-53.93597031 54.35842133]
[-38.97679520 55.46435547]
[-25.71370125 48.68648148]
[-12.52155113 57.42019272]
[2.43762398 58.52612686]
[10.65577698 45.97774124]
[3.66339660 32.70722198]
[-3.32898355 19.43670654]
[-10.32136345 6.16618967]
[-17.31374359 -7.10432720]
[-24.30612373 -20.37484360]
[-31.29850388 -33.64536285]
[-38.29088211 -46.91587830]
[-45.28326416 -60.18639374]
[-52.27564240 -73.45690918]
[-65.00839233 -84.65126038]
[-57.77630615 -99.98531342]
[-41.03947067 -97.28074646]
[-39.00512695 -80.44929504]
[-32.01274490 -67.17877197]
[-25.02036667 -53.90825653]
[-18.02798653 -40.63774109]
[-11.03560638 -27.36722374]
[-4.04322672 -14.09670734]
[2.94915342 -0.82619035]
[9.94153309 12.44432640]
[16.93391418 25.71484375]
[23.92629433 38.98535919]
[34.13440323 49.97601700]
[46.85326385 57.92778397]
[59.57212067 65.87955475]
[72.29097748 73.83132172]
[84.13433838 65.34642792]
[98.29605865 61.92525864]
[112.70676422 64.06773376]
[125.26070404 71.46079254]
[134.12344360 83.02412415]
[148.60548401 79.11638641]
[163.08752441 75.20864868]
[177.56956482 71.30091095]
[192.05160522 67.39317322]
[197.06262207 62.91388702]
[202.73228455 61.85042191]
[207.22680664 63.63976288]
[221.86071777 60.34601212]
[236.45909119 56.89817429]
[251.02029419 53.29663086]
[265.58151245 49.69508743]
[277.12023926 38.87065887]
[291.33294678 43.32576752]
[305.89416504 39.72422409]
[311.81323242 25.50202560]
[324.81979370 17.58476448]
[339.81692505 18.82963181]
[351.07061768 28.55036354]
[365.63180542 24.94881821]
[380.19302368 21.34727287]
[394.75424194 17.74572945]
[408.67828369 8.07323837]
[421.82733154 18.77552223]
[415.18331909 34.37338638]
[398.35577393 32.30694199]
[383.79458618 35.90848541]
[369.23336792 39.51002884]
[354.67214966 43.11157227]
[349.24740601 56.95751953]
[336.55972290 65.04990387]
[321.36212158 64.10860443]
[309.49572754 54.28543472]
[294.93450928 57.88697815]
[284.43728638 68.45379639]
[269.18304443 64.25629425]
[254.62184143 67.85784149]
[240.06063843 71.45938873]
[234.28352356 76.15033722]
[225.15446472 74.97991943]
[210.52055359 78.27367401]
[195.95935059 81.87521362]
[181.47731018 85.78295135]
[166.99526978 89.69068909]
[152.51321411 93.59842682]
[138.03117371 97.50616455]
[136.35826111 111.43093872]
[129.76200867 123.80782318]
[119.13562012 132.96084595]
[105.91804504 137.65057373]
[105.28569794 152.63725281]
[104.65335083 167.62391663]
[111.80200195 181.73799133]
[103.53504181 194.12777710]
[102.90269470 209.11444092]
[102.27034760 224.10110474]
[101.63800049 239.08776855]
[101.00565338 254.07443237]
[100.37329865 269.06109619]
[107.52195740 283.17517090]
[99.25499725 295.56497192]
[98.62265015 310.55163574]
[111.89498138 318.17419434]
[120.09487152 331.09783936]
[121.33804321 346.35278320]
[115.33882904 360.43353271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 144]
[8 143]
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[17 134]
[18 133]
[19 132]
[23 78]
[24 77]
[25 76]
[26 75]
[27 51]
[28 50]
[30 48]
[31 47]
[33 45]
[34 44]
[35 43]
[36 42]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
[90 123]
[91 122]
[92 120]
[93 119]
[94 118]
[96 116]
[97 115]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
