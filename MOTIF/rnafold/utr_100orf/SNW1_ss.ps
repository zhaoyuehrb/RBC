%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCGCGCUGGAAGAAGCGGAAGAAGAUGGCGCUCACCAGCUUUUUACCUGCACCUACUCAGCUAUCUCAGGACCAGCUUGAGGCUGAAGAAAAGGCAAGAUCCCAGAGAUCACGGCAGACCUCAC\
) } def
/len { sequence length } bind def

/coor [
[92.81370544 177.60449219]
[104.75799561 168.03410339]
[101.83164215 153.32232666]
[97.39434814 147.31251526]
[99.01866150 138.21380615]
[96.45423126 123.43464661]
[83.19969177 121.26161194]
[71.72059631 111.41088867]
[62.49211884 123.23608398]
[53.26364517 135.06127930]
[55.44676590 150.71406555]
[45.85573578 163.27542114]
[30.18074989 165.29292297]
[17.72149467 155.56962585]
[15.86982727 139.87419128]
[25.72430801 127.51843262]
[41.43844986 125.83280945]
[50.66692352 114.00761414]
[59.89539719 102.18241882]
[54.32563782 88.25482178]
[39.48799133 86.05387115]
[24.62445259 84.03515625]
[9.73725891 82.19899750]
[-5.14993382 80.36283875]
[-20.03712654 78.52667999]
[-34.92432022 76.69051361]
[-49.81151199 74.85435486]
[-64.45503235 80.84417725]
[-76.13945770 71.60711670]
[-91.02664948 69.77095795]
[-105.91384125 67.93479156]
[-118.21733856 77.85445404]
[-133.92234802 76.08578491]
[-143.71136475 63.67810440]
[-141.77676392 47.99267197]
[-129.26628113 38.33537292]
[-113.60217285 40.43571472]
[-104.07768250 53.04759979]
[-89.19049072 54.88376236]
[-74.30329895 56.71992111]
[-60.72461319 50.59876251]
[-47.97535324 59.96716309]
[-33.08816147 61.80332565]
[-18.20096588 63.63948441]
[-3.31377363 65.47564697]
[11.57341957 67.31180573]
[26.46061325 69.14796448]
[33.55898666 66.81979370]
[41.68894958 71.21621704]
[56.52659607 73.41717529]
[70.08643341 67.00385284]
[77.79797363 54.13792038]
[85.50952148 41.27199173]
[75.86927795 28.46627426]
[71.86977386 12.98417950]
[74.09082031 -2.81239629]
[82.16555023 -16.52516747]
[94.84063721 -26.08357239]
[110.17073822 -30.05739594]
[125.81705475 -27.87072182]
[133.21052551 -40.92202759]
[140.60400391 -53.97333145]
[147.99746704 -67.02463531]
[155.39094543 -80.07594299]
[155.33314514 -85.50852966]
[157.23663330 -89.93350220]
[160.36152649 -92.75890350]
[163.83905029 -93.78634644]
[172.17260742 -106.25839233]
[180.50614929 -118.73043823]
[188.83970642 -131.20248413]
[197.17326355 -143.67453003]
[205.50682068 -156.14657593]
[203.79980469 -172.09855652]
[215.30812073 -183.27612305]
[231.20356750 -181.10482788]
[239.29251099 -167.25027466]
[233.36981201 -152.34051514]
[217.97886658 -147.81301880]
[209.64530945 -135.34097290]
[201.31175232 -122.86892700]
[192.97819519 -110.39688110]
[184.64465332 -97.92484283]
[176.31109619 -85.45279694]
[168.44224548 -72.68246460]
[161.04878235 -59.63116455]
[153.65530396 -46.57985687]
[146.26182556 -33.52855301]
[138.86836243 -20.47724915]
[147.94558716 -9.70452785]
[152.79460144 3.55367589]
[152.80957031 17.70073891]
[147.96817017 31.02549553]
[138.83673096 41.90921783]
[126.50402069 49.02225113]
[112.45153046 51.48644638]
[98.37545013 48.98353577]
[90.66390991 61.84946442]
[82.95236206 74.71539307]
[115.25110626 77.60111237]
[123.14046478 105.12583160]
[136.00639343 112.83737946]
[148.87231445 120.54891968]
[161.73825073 128.26045227]
[177.58724976 125.77278137]
[189.31605530 136.71878052]
[187.92732239 152.70161438]
[174.48637390 161.46061707]
[159.30393982 156.27664185]
[154.02670288 141.12638855]
[141.16078186 133.41484070]
[128.29484558 125.70330811]
[115.42892456 117.99176025]
[113.40862274 119.54389954]
[111.23339081 120.87021637]
[113.79782104 135.64938354]
[116.54341888 150.39596558]
[119.46977234 165.10774231]
[134.16729736 169.37875366]
[145.18841553 179.99917603]
[150.00057983 194.52851868]
[147.49797058 209.62803650]
[138.25567627 221.82798767]
[124.39751434 228.32489014]
[109.10797882 227.62582397]
[95.90049744 219.89141846]
[87.81005096 206.89898682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[5 116]
[6 115]
[8 19]
[9 18]
[10 17]
[20 50]
[21 49]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[29 40]
[30 39]
[31 38]
[51 99]
[52 98]
[53 97]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
