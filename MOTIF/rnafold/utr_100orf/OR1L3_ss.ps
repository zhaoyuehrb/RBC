%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAAUGUCCAACCUGACAAGACUCUCUGAAUUUAUUCUCUUGGGACUCUCCUCUCGGUCUGAAGACCAGAGGCCACUCUUUGCCCUCUUUCUUAUCA\
) } def
/len { sequence length } bind def

/coor [
[85.02958679 170.02030945]
[92.60039520 156.86557007]
[104.41445923 147.33706665]
[99.82360077 133.05686951]
[95.23274231 118.77667236]
[93.31098938 119.13101959]
[91.29276276 119.28655243]
[89.19868469 119.22930908]
[77.42977142 128.52944946]
[65.66085815 137.82958984]
[53.89194107 147.12973022]
[52.30181503 162.85382080]
[40.00615311 172.78318787]
[24.29975319 171.02690125]
[14.50094318 158.62695312]
[16.42318344 142.94000244]
[28.92604446 133.27284241]
[44.59179688 135.36082458]
[56.36071396 126.06067657]
[68.12962341 116.76053619]
[79.89854431 107.46039581]
[80.36503601 92.46765137]
[69.19707489 82.45382690]
[58.02911377 72.44000244]
[42.58913040 68.98783112]
[38.27861786 54.73059845]
[27.11065483 44.71677399]
[15.94269371 34.70295334]
[4.77473164 24.68913078]
[-13.26055241 21.40652084]
[-18.23470497 4.65661716]
[-29.70869255 -5.00503874]
[-44.73838806 -1.14656091]
[-59.15319824 -6.89050913]
[-67.41033173 -20.02821922]
[-66.33474731 -35.50797272]
[-56.34003830 -47.37748718]
[-41.26936722 -51.07269287]
[-26.91772079 -45.17271042]
[-18.80359459 -31.94620132]
[-20.04703712 -16.47902679]
[-8.57304859 -6.81737041]
[3.61438990 -7.51328993]
[13.27157688 0.59616834]
[14.78855419 13.52116966]
[25.95651627 23.53499222]
[37.12447739 33.54881287]
[48.29243851 43.56263733]
[62.93361282 46.29855347]
[68.04293823 61.27204132]
[79.21089935 71.28586578]
[90.37886047 81.29969025]
[105.37886047 81.29969025]
[116.54682159 71.28586578]
[127.71478271 61.27204132]
[138.88275146 51.25822067]
[150.05070496 41.24440002]
[154.45314026 33.03396606]
[161.72521973 31.09944344]
[173.19920349 21.43778610]
[184.67318726 11.77613068]
[196.14718628 2.11447453]
[201.21757507 -13.48114014]
[217.31298828 -16.62272072]
[227.87585449 -4.07847977]
[222.03999329 11.24714375]
[205.80883789 13.58846283]
[194.33485413 23.25011826]
[182.86085510 32.91177368]
[171.38687134 42.57343292]
[160.06452942 52.41236115]
[148.89656067 62.42618179]
[137.72860718 72.44000244]
[126.56064606 82.45382690]
[115.39268494 92.46765137]
[127.11382294 83.10736847]
[141.89233398 80.53920746]
[156.08415222 85.39642334]
[166.18984985 96.48132324]
[169.71755981 111.06059265]
[165.79743958 125.53929138]
[155.39610291 136.34725952]
[141.07830811 140.81947327]
[126.37452698 137.85317993]
[114.91041565 128.17979431]
[109.51293945 114.18581390]
[114.10379791 128.46600342]
[118.69465637 142.74620056]
[133.84809875 143.60507202]
[147.66638184 149.88356018]
[158.28070068 160.73255920]
[164.25556946 174.68481445]
[164.78289795 189.85340881]
[159.79141235 204.18692017]
[149.95614624 215.74684143]
[136.60723877 222.96981812]
[121.55003357 224.87896729]
[106.82087708 221.21611023]
[94.41178131 212.47662354]
[86.00096893 199.84243774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[8 21]
[9 20]
[10 19]
[11 18]
[22 52]
[23 51]
[24 50]
[26 48]
[27 47]
[28 46]
[29 45]
[31 42]
[32 41]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
