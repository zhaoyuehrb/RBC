%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGUAGAGGUGAUGCAGUGCUGAAGACCUGGGCCCCUGCUCAGUGCCUUUGCUCUAGAAUGGGUCCAGCUUGGCUUUGGCUACUGGGAACAGGGAUCCUGGCCUCUGUCCACUGUCAGCCCCUUCUUGCCCAUGGAGAUAAAAGUCUGCAGGGGCCUC\
) } def
/len { sequence length } bind def

/coor [
[258.10787964 217.25988770]
[246.38040161 207.90754700]
[234.65293884 198.55519104]
[222.92546082 189.20285034]
[211.19798279 179.85050964]
[199.47052002 170.49815369]
[187.74304199 161.14581299]
[176.01556396 151.79345703]
[164.28810120 142.44111633]
[152.56062317 133.08877563]
[140.83316040 123.73641968]
[129.10568237 114.38407898]
[116.12860870 126.92171478]
[99.02165222 130.28475952]
[83.39788055 124.04269409]
[74.02502441 110.81131744]
[73.37331390 95.21977997]
[59.92292023 88.57997894]
[46.47252655 81.94018555]
[33.02213287 75.30038452]
[19.50760078 68.79212952]
[5.93021393 62.41603470]
[-7.64717293 56.03993988]
[-21.22455978 49.66384506]
[-34.80194473 43.28775024]
[-48.37933350 36.91165924]
[-61.95671844 30.53556442]
[-80.40220642 38.38081741]
[-98.42744446 30.33015823]
[-104.69950867 11.93162537]
[-118.62667084 6.36080599]
[-132.55383301 0.78998643]
[-146.48100281 -4.78083324]
[-160.40817261 -10.35165215]
[-174.33534241 -15.92247200]
[-188.26251221 -21.49329185]
[-202.18966675 -27.06411171]
[-215.29481506 -18.96711159]
[-230.47740173 -20.12586403]
[-241.93093872 -29.88702393]
[-245.39897156 -44.34768677]
[-259.32614136 -49.91850662]
[-268.50778198 -50.20696640]
[-273.46896362 -55.73628616]
[-287.28479004 -61.57778931]
[-303.00866699 -59.82556152]
[-311.71801758 -71.90846252]
[-325.53384399 -77.74996948]
[-341.73236084 -75.19261932]
[-351.83456421 -88.11071777]
[-345.44821167 -103.21522522]
[-329.14297485 -104.96792603]
[-319.69232178 -91.56578827]
[-305.87652588 -85.72428131]
[-291.14083862 -87.89433289]
[-281.44329834 -75.39360809]
[-267.62747192 -69.55210114]
[-253.75532532 -63.84567261]
[-239.82815552 -58.27485275]
[-227.34399414 -66.35469055]
[-212.31820679 -65.52420807]
[-200.52473450 -55.89262772]
[-196.61885071 -40.99127579]
[-182.69168091 -35.42045975]
[-168.76452637 -29.84963799]
[-154.83735657 -24.27882004]
[-140.91018677 -18.70800018]
[-126.98301697 -13.13718033]
[-113.05585480 -7.56636095]
[-99.12868500 -1.99554121]
[-91.05986023 -8.48026943]
[-80.94213104 -11.02459526]
[-70.60630798 -9.09837914]
[-61.95189667 -2.98681879]
[-56.59799576 6.24950266]
[-55.58062363 16.95817757]
[-42.00323868 23.33427048]
[-28.42585182 29.71036530]
[-14.84846592 36.08646011]
[-1.27107882 42.46255112]
[12.30630779 48.83864594]
[25.88369370 55.21474075]
[33.31247711 55.21145630]
[39.66193390 61.84999084]
[53.11232376 68.48979187]
[66.56272125 75.12958527]
[80.01311493 81.76938629]
[86.67380524 75.22104645]
[95.47373962 71.13488770]
[105.49471283 70.20181274]
[115.60025024 72.76870728]
[124.56446075 78.77195740]
[133.56959534 66.77581024]
[142.57472229 54.77966309]
[151.57986450 42.78351593]
[156.25323486 26.48640251]
[173.20716858 26.46565628]
[177.92042542 42.75128174]
[163.57600403 51.78864670]
[154.57087708 63.78479767]
[145.56573486 75.78094482]
[136.56060791 87.77709198]
[138.45802307 102.65660095]
[150.18550110 112.00894928]
[161.91297913 121.36129761]
[173.64044189 130.71363831]
[185.36791992 140.06599426]
[197.09538269 149.41833496]
[208.82286072 158.77069092]
[220.55033875 168.12303162]
[232.27780151 177.47537231]
[244.00527954 186.82772827]
[255.73275757 196.18006897]
[267.46023560 205.53242493]
[274.23504639 200.59783936]
[281.80770874 197.02316284]
[289.90875244 194.93246460]
[298.25057983 194.39707947]
[306.53759766 195.43315125]
[314.47662354 198.00123596]
[321.78735352 202.00770569]
[328.21218872 207.30818176]
[333.52539062 213.71279907]
[337.54095459 220.99293518]
[340.11904907 228.88938904]
[341.17108154 237.12162781]
[340.66253662 245.39772034]
[338.61428833 253.42474365]
[335.10150146 260.91906738]
[330.25119019 267.61648560]
[339.71752930 279.25216675]
[349.18383789 290.88784790]
[358.65014648 302.52349854]
[373.36117554 308.34555054]
[375.39129639 323.10113525]
[384.85763550 334.73681641]
[399.56866455 340.55883789]
[401.59878540 355.31445312]
[411.06509399 366.95010376]
[420.53140259 378.58578491]
[429.99774170 390.22146606]
[445.50540161 395.55474854]
[448.37445068 411.70098877]
[435.65347290 422.05029297]
[420.42868042 415.95617676]
[418.36206055 399.68777466]
[408.89575195 388.05209351]
[399.42941284 376.41644287]
[389.96310425 364.78076172]
[375.92916870 359.79098511]
[373.22195435 344.20312500]
[363.75564575 332.56747437]
[349.72171021 327.57769775]
[347.01449585 311.98980713]
[337.54815674 300.35415649]
[328.08184814 288.71847534]
[318.61553955 277.08282471]
[296.86312866 282.82736206]
[275.05288696 277.04721069]
[258.90780640 261.19250488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[17 87]
[18 86]
[19 85]
[20 84]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[41 59]
[42 58]
[44 57]
[45 56]
[47 54]
[48 53]
[92 102]
[93 101]
[94 100]
[95 99]
[130 157]
[131 156]
[132 155]
[133 154]
[135 152]
[136 151]
[138 149]
[139 148]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
