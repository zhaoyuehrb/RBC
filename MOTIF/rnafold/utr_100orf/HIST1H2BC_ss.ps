%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGAGCCAGCCAAGUCUGCUCCCGCCCCGAAGAAGGGCUCCAAGAAGGCAGUGACCAAAGCGCAGAAGAAAGAUGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[189.01062012 420.34228516]
[200.43635559 410.15841675]
[196.74217224 395.62042236]
[193.04798889 381.08242798]
[189.12815857 366.60366821]
[184.98362732 352.18759155]
[168.52914429 344.46786499]
[162.67262268 326.92999268]
[171.48141479 310.31646729]
[166.44865417 296.18594360]
[161.41590881 282.05541992]
[156.38316345 267.92492676]
[140.62707520 267.39074707]
[126.23249054 260.86810303]
[115.39047241 249.31771851]
[109.76354218 234.46803284]
[110.23078918 218.55656433]
[116.75072479 203.99275208]
[128.36306763 192.99314880]
[122.89328766 179.02598572]
[117.42351532 165.05883789]
[111.95374298 151.09167480]
[106.48397064 137.12451172]
[88.34272003 137.66461182]
[71.24652863 129.46284485]
[59.33062363 113.68175507]
[55.84174728 93.39200592]
[62.28679276 72.98481750]
[49.96245575 64.43433380]
[37.63812256 55.88384628]
[25.31378746 47.33336258]
[10.27525997 51.62017059]
[-3.97924852 45.19031906]
[-10.71919537 31.07978630]
[-6.76218462 15.95113564]
[6.02340555 6.94765282]
[21.60060883 8.32050705]
[32.61434937 19.42147827]
[33.86426926 35.00902939]
[46.18860626 43.55951309]
[58.51293945 52.10999680]
[70.83727264 60.66048050]
[77.94081116 58.25428772]
[71.22451019 44.84193039]
[61.04387665 33.82582092]
[64.74164581 19.28874588]
[78.94862366 14.47606850]
[90.72021484 23.77282524]
[89.33045197 38.70887375]
[92.14788818 53.44190216]
[99.25141907 51.03570557]
[103.84227753 36.75551224]
[96.40146637 22.81241798]
[101.07913971 7.71622992]
[115.10012054 0.42324436]
[130.14601135 5.26026154]
[137.29034424 19.35756493]
[132.29452515 34.35147476]
[118.12247467 41.34637070]
[113.53161621 55.62656403]
[128.07087708 64.90532684]
[137.79536438 78.48640442]
[141.63429260 94.18342590]
[139.42596436 109.64225769]
[131.88645935 122.69304657]
[120.45112610 131.65473938]
[125.92090607 145.62190247]
[131.39067078 159.58906555]
[136.86044312 173.55621338]
[142.33021545 187.52337646]
[156.66326904 187.39561462]
[170.14097595 192.18566895]
[181.13232422 201.29200745]
[188.31472778 213.59207153]
[190.83314514 227.58070374]
[188.40180969 241.55426025]
[181.33648682 253.81811523]
[170.51367188 262.89218140]
[175.54641724 277.02267456]
[180.57917786 291.15319824]
[185.61192322 305.28372192]
[197.33743286 308.26705933]
[206.02026367 316.51828003]
[209.52545166 327.84539795]
[207.07121277 339.32199097]
[199.39970398 348.04306030]
[203.54421997 362.45913696]
[209.01467896 370.00012207]
[207.58596802 377.38824463]
[211.28015137 391.92623901]
[214.97433472 406.46423340]
[229.87570190 409.95825195]
[241.43884277 419.98580933]
[247.00666809 434.24267578]
[245.29971313 449.45269775]
[236.71022034 462.12072754]
[223.21200562 469.33575439]
[207.90684509 469.43981934]
[194.31176758 462.40902710]
[185.55081177 449.85894775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 87]
[6 86]
[9 81]
[10 80]
[11 79]
[12 78]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[28 42]
[29 41]
[30 40]
[31 39]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
