%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCACAAACAUUACAAAGUCCACUUCGCCAAGGAUGCCCAGAGCCCCAACGGGCACUACUUCUGGGACCCAGAGUUGGGGCACCGAAAAGGAUGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[44.91848373 349.47216797]
[40.72841263 364.06011963]
[31.54840469 376.14697266]
[18.61997986 384.09808350]
[3.69160080 386.83813477]
[-11.21779060 383.99658203]
[-24.09182358 375.95770264]
[-33.18938828 363.80865479]
[-37.28011322 349.19256592]
[-35.81076813 334.08609009]
[-28.98006058 320.53228760]
[-17.71179390 310.36416626]
[-3.52990651 304.95690918]
[11.64761734 305.04177856]
[17.11738968 291.07461548]
[22.58716393 277.10745239]
[16.40409088 263.60540771]
[21.75225067 249.36280823]
[35.95635986 242.96897888]
[41.42613220 229.00181580]
[46.89590454 215.03465271]
[52.36567688 201.06748962]
[46.18260574 187.56544495]
[51.53076553 173.32284546]
[65.73487854 166.92901611]
[71.20465088 152.96185303]
[76.67442322 138.99468994]
[82.14419556 125.02753448]
[75.90577698 119.09648132]
[71.55612183 111.66845703]
[69.43618774 103.32572937]
[69.71216583 94.72230530]
[72.36241150 86.53259277]
[60.88842773 76.87094116]
[44.65727615 74.52961731]
[38.82141495 59.20399475]
[49.38427734 46.65975571]
[65.47969055 49.80133438]
[70.55007935 65.39694977]
[82.02407074 75.05860901]
[89.87542725 70.97070312]
[98.56607819 69.28923798]
[107.37559509 70.15359497]
[115.57369995 73.49213409]
[126.09750366 62.80337524]
[136.62130737 52.11461639]
[147.14511108 41.42585754]
[157.66891479 30.73709679]
[168.19271851 20.04833603]
[178.71652222 9.35957718]
[189.24032593 -1.32918203]
[199.25413513 -12.49714375]
[208.73619080 -24.12000084]
[218.21823120 -35.74285507]
[216.81416321 -51.25628281]
[226.59588623 -62.90843582]
[241.39421082 -64.15139771]
[250.87626648 -75.77425385]
[260.35830688 -87.39710999]
[262.44692993 -103.66271210]
[277.67993164 -109.73620605]
[290.38693237 -99.36970520]
[287.49603271 -83.22737885]
[271.98117065 -77.91506195]
[262.49911499 -66.29220581]
[253.01707458 -54.66934967]
[254.77104187 -39.92285156]
[245.32046509 -28.00054741]
[229.84109497 -26.26081085]
[220.35903931 -14.63795376]
[210.87699890 -3.01509714]
[210.94793701 0.67949456]
[209.11613464 4.57810497]
[205.31433105 7.72955847]
[199.92907715 9.19462013]
[189.40527344 19.88338089]
[178.88146973 30.57213974]
[168.35766602 41.26089859]
[157.83386230 51.94965744]
[147.31005859 62.63841629]
[136.78627014 73.32717896]
[126.26245880 84.01593781]
[130.12292480 106.14952087]
[117.89588928 124.99888611]
[96.11135864 130.49729919]
[90.64157867 144.46446228]
[85.17180634 158.43162537]
[79.70203400 172.39878845]
[85.78672028 186.73805237]
[80.04062653 200.82481384]
[66.33283997 206.53726196]
[60.86306763 220.50442505]
[55.39329529 234.47158813]
[49.92351913 248.43875122]
[56.00820923 262.77801514]
[50.26211166 276.86477661]
[36.55432510 282.57723999]
[31.08455086 296.54437256]
[25.61477852 310.51153564]
[36.81360626 320.75610352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 99]
[15 98]
[16 97]
[19 94]
[20 93]
[21 92]
[22 91]
[25 88]
[26 87]
[27 86]
[28 85]
[33 40]
[34 39]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[51 75]
[52 71]
[53 70]
[54 69]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
