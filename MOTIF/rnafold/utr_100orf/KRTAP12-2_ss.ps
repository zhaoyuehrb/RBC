%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUGCCCUCUGCCUCGACCUUAUCCAGCCACACGCCACCAUGUGUCAUACCAGCUGCUCCUCGGGCUGCCAGCCAGCCUGCUGCGCGCCCAGCCCCUGCCAGCCAGCCUGUUGUGUGCCCAGCUCCUGCCAGGCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[126.81779480 200.71571350]
[125.77068329 215.67910767]
[122.21138763 230.25071716]
[116.24217987 244.01184082]
[108.03456879 256.56710815]
[97.82435608 267.55581665]
[85.90489960 276.66223145]
[72.61865997 283.62469482]
[58.34738159 288.24319458]
[43.50107956 290.38500977]
[28.50631905 289.98861694]
[13.79391479 287.06539917]
[-0.21342427 281.69934082]
[-13.11324883 274.04464722]
[-24.53492928 264.32119751]
[-34.15030670 252.80841064]
[-41.68311691 239.83702087]
[-46.91693497 225.77973938]
[-49.70138168 211.04045105]
[-49.95646286 196.04261780]
[-47.67484283 181.21716309]
[-42.92207718 166.99003601]
[-35.83472061 153.76998901]
[-26.61640549 141.93687439]
[-15.53198051 131.83065796]
[-2.89991856 123.74172211]
[10.91684437 117.90245056]
[25.52133369 114.48062134]
[40.49394226 113.57455444]
[55.41309738 115.21197510]
[69.63736725 110.45065308]
[83.86163330 105.68933868]
[69.09596252 103.04830933]
[54.33029556 100.40727997]
[39.56462860 97.76625061]
[24.79895973 95.12522125]
[11.97548294 104.36286163]
[-3.61046052 101.74486542]
[-12.71200562 88.82444000]
[-9.92936802 73.26704407]
[3.08656287 64.30261230]
[18.61366653 67.24957275]
[27.43998718 80.35955811]
[42.20565796 83.00057983]
[56.97132492 85.64160919]
[71.73699188 88.28263855]
[86.50266266 90.92366791]
[100.05806732 84.50096893]
[107.36565399 71.40138245]
[114.67324829 58.30179977]
[121.98084259 45.20221710]
[121.94688416 29.38104630]
[134.90429688 22.03565216]
[142.21188354 8.93606758]
[149.51948547 -4.16351604]
[156.68171692 -17.34313202]
[163.69773865 -30.60116959]
[170.71374512 -43.85920715]
[177.58267212 -57.19404221]
[184.30368042 -70.60404205]
[175.07511902 -84.27833557]
[173.98481750 -100.64547729]
[181.23478699 -115.25531769]
[194.77223206 -124.18293762]
[210.86964417 -125.08298492]
[217.29234314 -138.63838196]
[223.71504211 -152.19378662]
[230.13774109 -165.74919128]
[236.56044006 -179.30459595]
[242.98313904 -192.86000061]
[235.71334839 -206.44146729]
[237.81021118 -221.52313232]
[248.26200867 -232.35012817]
[262.90969849 -234.91589355]
[269.33239746 -248.47129822]
[275.60476685 -262.09692383]
[281.72601318 -275.79107666]
[287.84725952 -289.48526001]
[285.61987305 -305.73242188]
[298.74072266 -315.56985474]
[313.71224976 -308.87762451]
[315.13299561 -292.54013062]
[301.54144287 -283.36398315]
[295.42016602 -269.66983032]
[289.29891968 -255.97566223]
[289.44207764 -248.52665710]
[282.88778687 -242.04859924]
[276.46508789 -228.49319458]
[283.75622559 -215.53257751]
[281.99670410 -200.58706665]
[271.65319824 -189.41276550]
[256.53854370 -186.43730164]
[250.11584473 -172.88189697]
[243.69314575 -159.32649231]
[237.27044678 -145.77108765]
[230.84774780 -132.21568298]
[224.42504883 -118.66028595]
[232.93339539 -107.92355347]
[235.98382568 -94.50022125]
[232.92190552 -81.01148987]
[224.29257202 -70.11676788]
[211.74414062 -63.98935699]
[197.71368408 -63.88304138]
[190.99267578 -50.47304153]
[190.80619812 -43.02499771]
[183.97178650 -36.84319305]
[176.95576477 -23.58515549]
[169.93975830 -10.32711792]
[169.58856201 -2.88502431]
[162.61906433 3.14407682]
[155.31146240 16.24365997]
[148.00387573 29.34324455]
[148.56051636 44.22744370]
[135.08042908 52.50980759]
[127.77283478 65.60939026]
[120.46524048 78.70897675]
[113.15764618 91.80856323]
[114.15248871 106.77553558]
[123.12957764 118.79268646]
[132.10665894 130.80982971]
[141.08374023 142.82699585]
[156.47471619 145.22613525]
[165.40756226 157.54112244]
[163.02549744 172.19926453]
[172.00257874 184.21641541]
[187.27645874 190.18640137]
[189.47541809 206.43743896]
[176.33734131 216.25187683]
[161.37757874 209.53344727]
[159.98542786 193.19349670]
[151.00834656 181.17634583]
[136.27659607 179.30261230]
[127.00135803 167.24339294]
[129.06658936 151.80407715]
[120.08950806 139.78692627]
[111.11242676 127.76976776]
[102.13533783 115.75261688]
[104.25214386 130.60250854]
[106.36894989 145.45239258]
[114.94920349 157.75601196]
[121.32819366 171.33204651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[48 117]
[49 116]
[50 115]
[51 114]
[53 112]
[54 111]
[55 110]
[56 108]
[57 107]
[58 106]
[59 104]
[60 103]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[74 88]
[75 87]
[76 85]
[77 84]
[78 83]
[118 137]
[119 136]
[120 135]
[121 134]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
