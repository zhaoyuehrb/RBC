%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGAGAGCCAGAGAAGCCGAAAUGAUGAAAAGUCAGGUACUGUUUCCCUUCCUGCUGUCUUUGUUCUGCGGGGCCAUCUCCCAGCAGAUCCGAUACA\
) } def
/len { sequence length } bind def

/coor [
[158.14776611 177.94145203]
[171.03558350 170.26654053]
[185.95921326 168.76580811]
[173.63488770 160.21533203]
[161.31054688 151.66484070]
[148.98620605 143.11436462]
[136.66188049 134.56387329]
[124.33754730 126.01339722]
[112.01320648 117.46291351]
[95.93169403 120.80190277]
[82.29298401 111.65041351]
[79.28644562 95.50344086]
[66.70215607 87.34037781]
[54.11786270 79.17731476]
[45.04227448 77.07342529]
[41.27462006 70.55957031]
[28.95028496 62.00908661]
[16.62594986 53.45860291]
[4.30161619 44.90811920]
[-8.62395954 46.42018890]
[-18.74626160 38.89931107]
[-20.88664055 26.88112831]
[-32.93909454 17.95149422]
[-44.99155045 9.02186203]
[-57.04400253 0.09222908]
[-69.09645844 -8.83740425]
[-89.41428375 -4.16682196]
[-106.55539703 -15.52720833]
[-110.07152557 -35.50024033]
[-123.13896942 -42.86515427]
[-136.20640564 -50.23006439]
[-152.59013367 -49.51907349]
[-161.16830444 -63.49573898]
[-153.11640930 -77.78206635]
[-136.71757507 -77.68151093]
[-128.84150696 -63.29750824]
[-115.77405548 -55.93259811]
[-102.70661163 -48.56768417]
[-94.56958008 -53.93668365]
[-84.95770264 -55.88537598]
[-75.25667572 -54.08804703]
[-66.88181305 -48.76228714]
[-61.07159424 -40.64366150]
[-58.70458984 -30.88438416]
[-60.16682434 -20.88985825]
[-48.11436844 -11.96022511]
[-36.06191635 -3.03059220]
[-24.00946236 5.89904070]
[-11.95700741 14.82867336]
[5.48907948 15.79590416]
[12.85210037 32.58378601]
[25.17643547 41.13426971]
[37.50077057 49.68475342]
[49.82510376 58.23523712]
[62.28092194 66.59301758]
[74.86521912 74.75608063]
[87.44950867 82.91914368]
[99.54760742 78.80883026]
[111.81010437 82.39909363]
[119.78096771 92.38529205]
[120.56369019 105.13857269]
[132.88803101 113.68905640]
[145.21235657 122.23954010]
[157.53669739 130.79002380]
[169.86103821 139.34051514]
[182.18536377 147.89099121]
[194.50970459 156.44148254]
[208.20654297 162.55673218]
[222.80023193 166.02438354]
[237.39390564 169.49201965]
[251.98757935 172.95967102]
[266.58126831 176.42730713]
[281.22711182 179.66757202]
[295.92156982 182.67968750]
[310.61602783 185.69178772]
[325.31048584 188.70390320]
[339.43951416 181.10453796]
[354.13299561 187.54516602]
[358.11932373 203.08506775]
[348.34054565 215.80337524]
[332.29809570 215.94367981]
[322.29837036 203.39836121]
[307.60391235 200.38626099]
[292.90945435 197.37414551]
[278.21499634 194.36204529]
[270.90155029 196.13378906]
[263.11361694 191.02099609]
[248.51994324 187.55334473]
[233.92625427 184.08569336]
[219.33258057 180.61805725]
[204.73890686 177.15040588]
[213.58485413 189.26441956]
[216.47392273 203.98356628]
[212.86334229 218.54254150]
[203.43142700 230.20611572]
[189.95016479 236.78302002]
[174.95233154 237.03765869]
[161.25558472 230.92219543]
[151.43315125 219.58552551]
[147.33041382 205.15751648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[12 57]
[13 56]
[14 55]
[16 54]
[17 53]
[18 52]
[19 51]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[29 38]
[30 37]
[31 36]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
