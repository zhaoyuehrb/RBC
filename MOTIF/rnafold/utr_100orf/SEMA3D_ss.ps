%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAAUUAACACCAUUUGAAAGAGAACAUUGUUUUCAUCAUGAAUGCUAAUAAAGAUGAAAGACUUAAAGCCAGAAGCCAAGAUUUUCACCUUUUUCCUGCUUUGAUGAUGCUAAGCAUGACCAUGUUGUUUCUUCCAG\
) } def
/len { sequence length } bind def

/coor [
[35.78820038 495.13058472]
[36.06362915 510.24398804]
[31.87046432 524.76672363]
[23.58155632 537.40734863]
[11.93395042 547.04187012]
[-2.03665590 552.81365967]
[-17.08800697 554.20947266]
[-31.88174438 551.10516357]
[-45.10242081 543.77679443]
[-55.57446671 532.87597656]
[-62.36670685 519.37200928]
[-64.87518311 504.46566772]
[-62.87684631 489.48242188]
[-56.54938507 475.75454712]
[-46.45543289 464.50271606]
[-33.49253464 456.72744751]
[-18.81334877 453.12011719]
[-3.72313237 454.00149536]
[1.51171291 439.94458008]
[-1.29743016 425.31729126]
[10.76951694 415.08502197]
[16.00436211 401.02810669]
[21.23920822 386.97122192]
[26.47405243 372.91430664]
[31.70889854 358.85742188]
[36.94374466 344.80050659]
[41.86411667 330.63049316]
[46.46757507 316.35433960]
[51.07103348 302.07821655]
[55.67449188 287.80206299]
[59.47600937 273.29177856]
[62.46379852 258.59234619]
[65.45159149 243.89292908]
[68.43937683 229.19349670]
[71.42716980 214.49407959]
[64.94447327 198.22346497]
[77.15729523 184.49208069]
[79.81685638 169.72973633]
[82.47641754 154.96739197]
[85.13597870 140.20504761]
[87.79553986 125.44271088]
[90.45510101 110.68036652]
[85.90299988 97.46030426]
[94.78256226 86.66007233]
[97.44211578 71.89772797]
[92.27423096 56.94435120]
[102.14553833 45.79058075]
[104.80509949 31.02824020]
[92.09038544 20.51818085]
[86.42098999 5.12650585]
[89.24769592 -10.93565845]
[99.71034241 -23.32402420]
[114.89654541 -28.73611259]
[117.22656250 -43.55404282]
[119.55657196 -58.37197113]
[121.88658142 -73.18990326]
[116.38683319 -88.02443695]
[126.00719452 -99.39535522]
[128.33720398 -114.21328735]
[130.66722107 -129.03121948]
[132.99722290 -143.84915161]
[135.32723999 -158.66708374]
[137.65724182 -173.48500061]
[132.15750122 -188.31953430]
[141.77786255 -199.69046021]
[144.10787964 -214.50839233]
[146.43788147 -229.32632446]
[139.47926331 -237.81796265]
[138.41085815 -248.52281189]
[143.34748840 -257.83233643]
[152.42039490 -262.74349976]
[155.40818787 -277.44293213]
[147.78547668 -291.55935669]
[154.20178223 -306.26345825]
[169.73506165 -310.27551270]
[182.46952820 -300.51779175]
[182.63638306 -284.47561646]
[170.10762024 -274.45513916]
[167.11982727 -259.75573730]
[174.64437866 -241.99504089]
[161.25581360 -226.99630737]
[158.92581177 -212.17837524]
[156.59579468 -197.36044312]
[162.26220703 -183.58580017]
[152.47517395 -171.15499878]
[150.14517212 -156.33706665]
[147.81515503 -141.51913452]
[145.48515320 -126.70120239]
[143.15513611 -111.88327789]
[140.82511902 -97.06534576]
[146.49153137 -83.29068756]
[136.70451355 -70.85989380]
[134.37449646 -56.04196167]
[132.04449463 -41.22402954]
[129.71447754 -26.40610123]
[140.91093445 -18.51091957]
[147.63052368 -6.49579859]
[148.50460815 7.30937004]
[143.30444336 20.19906998]
[132.99739075 29.62238693]
[119.56744385 33.68780136]
[116.90788269 48.45014191]
[122.26599884 62.34761810]
[112.20446014 74.55728912]
[109.54489899 89.31963348]
[114.09700012 102.53969574]
[105.21743774 113.33992767]
[102.55788422 128.10226440]
[99.89832306 142.86460876]
[97.23876190 157.62695312]
[94.57920074 172.38929749]
[91.91963959 187.15164185]
[98.64209747 198.22117615]
[96.06922913 210.50360107]
[86.12659454 217.48185730]
[83.13880157 232.18128967]
[80.15101624 246.88070679]
[77.16322327 261.58013916]
[74.17543793 276.27957153]
[88.11140442 270.73080444]
[101.25025940 277.96752930]
[104.00911713 292.71163940]
[94.37580109 304.20944214]
[79.37640381 304.07492065]
[69.95063019 292.40551758]
[65.34717560 306.68167114]
[60.74371338 320.95779419]
[56.14025497 335.23394775]
[57.17417908 341.89666748]
[54.96629715 347.24389648]
[51.00064087 350.03536987]
[45.76579666 364.09225464]
[40.53095245 378.14916992]
[35.29610443 392.20605469]
[30.06126022 406.26296997]
[24.82641602 420.31985474]
[27.26112747 435.95260620]
[15.56861115 445.17944336]
[10.33376598 459.23632812]
[22.32468414 468.44009399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 139]
[19 138]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[27 128]
[28 127]
[29 126]
[30 125]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[37 112]
[38 111]
[39 110]
[40 109]
[41 108]
[42 107]
[44 105]
[45 104]
[47 102]
[48 101]
[53 95]
[54 94]
[55 93]
[56 92]
[58 90]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[65 83]
[66 82]
[67 81]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
