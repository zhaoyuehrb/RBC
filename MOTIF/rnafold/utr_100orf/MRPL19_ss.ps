%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUCUUGACGUGAGCUAGCUGGCAUGGCGGCCUGCAUUGCAGCGGGGCACUGGGCUGCAAUGGGCCUAGGCCGGAGUUUCCAAGCCGCCAGGACUCUGCUCCCCCCGCCGGCCUCUAUCGCCU\
) } def
/len { sequence length } bind def

/coor [
[83.80217743 467.02993774]
[75.01806641 479.43588257]
[62.15238953 487.53173828]
[47.16706467 490.08291626]
[32.34724808 486.70037842]
[19.95285416 477.89996338]
[11.87393570 465.02365112]
[9.34247112 450.03497314]
[12.74448967 435.21963501]
[21.56120872 422.83682251]
[34.44813919 414.77484131]
[49.44012451 412.26309204]
[52.77793884 397.63919067]
[56.11575317 383.01525879]
[59.45356750 368.39135742]
[47.36888885 357.74053955]
[42.24499893 342.37023926]
[45.55945587 326.41549683]
[56.50618362 314.21856689]
[72.18898773 309.14712524]
[75.16117859 294.44454956]
[78.13336945 279.74194336]
[81.10556030 265.03936768]
[84.07775879 250.33677673]
[87.04994965 235.63418579]
[88.51435089 210.40328979]
[104.47496796 199.18122864]
[101.87024689 184.40910339]
[99.26552582 169.63699341]
[96.66080475 154.86488342]
[94.05608368 140.09275818]
[91.45135498 125.32064819]
[88.84663391 110.54853058]
[79.78956604 98.59154510]
[66.27503967 92.08328247]
[52.76050186 85.57502747]
[39.24597168 79.06677246]
[24.41322136 84.52251434]
[10.10234547 77.81621552]
[4.80373335 62.92661285]
[11.66095734 48.68743896]
[26.60574722 43.54654694]
[40.77162552 50.55393219]
[45.75422668 65.55223846]
[59.26876068 72.06049347]
[72.78329468 78.56875610]
[86.29782867 85.07701111]
[98.58510590 76.47336578]
[97.09159088 61.54790115]
[95.59806824 46.62244034]
[91.59138489 38.28864288]
[94.25814056 31.30695152]
[93.13719177 16.34889603]
[92.01623535 1.39083815]
[90.89528656 -13.56721878]
[89.77433014 -28.52527618]
[88.65338135 -43.48333359]
[87.53243256 -58.44139099]
[75.39125061 -68.55905914]
[74.04363251 -84.30578613]
[84.28910065 -96.33932495]
[100.04920197 -97.52037811]
[111.97373962 -87.14825439]
[112.98810577 -71.37655640]
[102.49048615 -59.56233978]
[103.61144257 -44.60428238]
[104.73239136 -29.64622688]
[105.85334015 -14.68817043]
[106.97429657 0.26988676]
[108.09524536 15.22794342]
[109.21619415 30.18600082]
[110.52352905 45.12892151]
[112.01705170 60.05438232]
[113.51056671 74.97984314]
[127.60595703 80.11014557]
[138.34396362 69.63659668]
[149.08197021 59.16304016]
[156.19889832 43.77520370]
[172.95553589 46.35422516]
[175.11599731 63.16995239]
[159.55551147 69.90104675]
[148.81750488 80.37459564]
[138.07951355 90.84815216]
[128.29479980 106.44242096]
[114.63307953 111.92076111]
[103.61875153 107.94380951]
[106.22347260 122.71591949]
[108.82819366 137.48803711]
[111.43292236 152.26016235]
[114.03764343 167.03227234]
[116.64236450 181.80438232]
[119.24708557 196.57650757]
[129.72064209 207.31451416]
[144.42323303 210.28669739]
[159.12580872 213.25889587]
[172.15365601 204.31176758]
[187.67681885 207.27937317]
[196.48570251 220.40107727]
[193.35415649 235.89201355]
[180.14004517 244.56166077]
[164.68309021 241.26651001]
[156.15362549 227.96147156]
[141.45103455 224.98928833]
[126.74845123 222.01708984]
[120.49947357 226.16441345]
[128.79391479 238.66250610]
[116.29570770 246.95675659]
[108.00151062 234.45906067]
[101.75253296 238.60638428]
[98.78034210 253.30895996]
[95.80815125 268.01156616]
[92.83596039 282.71414185]
[89.86376953 297.41671753]
[86.89157104 312.11932373]
[97.88623047 320.86285400]
[103.99031830 333.44104004]
[104.05521393 347.35562134]
[98.12556458 359.87023926]
[87.41920471 368.54870605]
[74.07748413 371.72915649]
[70.73966980 386.35308838]
[67.40185547 400.97698975]
[64.06404114 415.60092163]
[76.48154449 424.36871338]
[84.59431458 437.22372437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 123]
[13 122]
[14 121]
[15 120]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[32 87]
[33 86]
[34 47]
[35 46]
[36 45]
[37 44]
[48 74]
[49 73]
[50 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[75 83]
[76 82]
[77 81]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
