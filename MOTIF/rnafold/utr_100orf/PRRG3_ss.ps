%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGGGGGUGCCGAGAGAAGUGAGACCCUGCAGCUGAGGGAGCAUCAUGGCAGUGUUUCUGGAGGCCAAGGAUGCCCAUUCGGUCCUGAAACGAUUCCCUCGUGCCAAUGAGUUCCUGGAGGAGCUGCGCCAGGGCACCAUCGAGC\
) } def
/len { sequence length } bind def

/coor [
[95.34985352 139.10850525]
[86.46440125 136.98495483]
[78.30726624 132.87133789]
[67.81231689 143.58842468]
[57.31736755 154.30551147]
[46.82241821 165.02259827]
[36.32746506 175.73968506]
[25.83251572 186.45678711]
[28.27183533 201.66717529]
[21.36776352 215.23872375]
[7.95476341 222.06188965]
[-6.72826767 219.70675659]
[-17.22321701 230.42384338]
[-27.71816826 241.14094543]
[-24.99772263 256.41769409]
[-31.80654716 270.36111450]
[-45.52650833 277.60971069]
[-60.88200378 275.37625122]
[-71.96852875 264.51953125]
[-74.52309418 249.21417236]
[-67.56340790 235.34541321]
[-53.76562119 228.24607849]
[-38.43525696 230.64599609]
[-27.94030762 219.92889404]
[-17.44535828 209.21180725]
[-20.10746193 194.58131409]
[-13.56670475 181.02836609]
[-0.14271130 173.84159851]
[15.11542606 175.96183777]
[25.61037636 165.24473572]
[36.10532761 154.52764893]
[46.60027695 143.81056213]
[57.09522629 133.09347534]
[67.59017944 122.37638092]
[60.83175659 95.88325500]
[72.95072174 71.37421417]
[64.91331482 58.70929718]
[56.87591553 46.04437637]
[48.83851624 33.37945938]
[40.80111313 20.71454048]
[32.76371002 8.04962158]
[24.59412575 -4.53043699]
[16.29325294 -17.02425575]
[8.88727283 -22.48611641]
[7.95256615 -29.86778641]
[-0.08483572 -42.53270340]
[-8.12223721 -55.19762421]
[-16.15963936 -67.86254120]
[-24.19704056 -80.52745819]
[-40.69435501 -88.63872528]
[-40.81951523 -106.15904236]
[-49.12038803 -118.65286255]
[-57.42126083 -131.14668274]
[-65.72212982 -143.64050293]
[-80.73069000 -141.05918884]
[-95.48999786 -144.81187439]
[-107.44292450 -154.24836731]
[-114.51855469 -167.73374939]
[-115.49098206 -182.93157959]
[-110.19173431 -197.20877075]
[-99.53894043 -208.09167480]
[-85.37825775 -213.69479370]
[-70.16311646 -213.04734802]
[-56.52961731 -206.26150513]
[-46.83985901 -194.51295471]
[-42.77265167 -179.83720398]
[-45.03265381 -164.77691650]
[-53.22831345 -151.94137573]
[-44.92744064 -139.44755554]
[-36.62656784 -126.95373535]
[-28.32569504 -114.45991516]
[-16.49598694 -111.74176788]
[-9.48722649 -101.34366608]
[-11.53212261 -88.56486511]
[-3.49472070 -75.89994049]
[4.54268122 -63.23502350]
[12.58008289 -50.57010651]
[20.61748505 -37.90518570]
[28.78707123 -25.32512856]
[37.08794403 -12.83131027]
[43.45125580 -8.97501755]
[45.42863083 0.01221958]
[53.46603012 12.67713833]
[61.50343323 25.34205818]
[69.54083252 38.00697708]
[77.57823944 50.67189407]
[85.61563873 63.33681488]
[95.56450653 60.86656952]
[105.81385803 61.04748917]
[115.66934204 63.86731720]
[124.46327972 69.13501740]
[131.59991455 76.49372864]
[136.59574890 85.44490814]
[139.11233521 95.38214874]
[138.97918701 105.63224030]
[153.14483643 110.56523895]
[167.31047058 115.49823761]
[181.47612000 120.43123627]
[202.17308044 115.04692078]
[215.16241455 131.03959656]
[229.60984802 135.07339478]
[244.05729675 139.10719299]
[258.50473022 143.14099121]
[273.87725830 139.39984131]
[284.05496216 150.27474976]
[298.50241089 154.30853271]
[312.94985962 158.34233093]
[327.39727783 162.37612915]
[322.78161621 148.10394287]
[330.88229370 135.47940063]
[345.77969360 133.72798157]
[356.58746338 144.12953186]
[355.40771484 159.08306885]
[343.10189819 167.66131592]
[357.04852295 173.18318176]
[370.99517822 178.70504761]
[384.94183350 184.22691345]
[398.88848877 189.74879456]
[412.83511353 195.27066040]
[428.97045898 192.34104919]
[439.36743164 205.02313232]
[433.33050537 220.27067566]
[417.06994629 222.39830017]
[407.31326294 209.21730042]
[393.36660767 203.69543457]
[379.41995239 198.17356873]
[365.47329712 192.65170288]
[351.52667236 187.12983704]
[337.58001709 181.60795593]
[323.36349487 176.82357788]
[308.91604614 172.78977966]
[294.46862793 168.75598145]
[280.02117920 164.72218323]
[265.68203735 168.75184631]
[254.47093201 157.58842468]
[240.02349854 153.55462646]
[225.57604980 149.52082825]
[211.12861633 145.48703003]
[204.11201477 151.11343384]
[195.15026855 152.86894226]
[186.26435852 150.22708130]
[179.51901245 143.66801453]
[176.54312134 134.59687805]
[162.37747192 129.66387939]
[148.21183777 124.73088837]
[134.04618835 119.79788208]
[128.56880188 127.10945129]
[121.55420685 132.96232605]
[113.37982941 137.04158020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[12 25]
[13 24]
[14 23]
[36 87]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 80]
[43 79]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[51 71]
[52 70]
[53 69]
[54 68]
[95 146]
[96 145]
[97 144]
[98 143]
[100 138]
[101 137]
[102 136]
[103 135]
[105 133]
[106 132]
[107 131]
[108 130]
[114 129]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
