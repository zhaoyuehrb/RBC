%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGCUGGCUUCAGGGAACAGCUCUUCUCAUCCUGUGUCCUUCAUCCUGCUUGGAAUCCCAGGCCUGGAGAGUUUCCAGUUGUGGAUUGCCUUUCCGU\
) } def
/len { sequence length } bind def

/coor [
[86.17797089 127.41492462]
[75.88770294 119.00588989]
[70.11488342 107.03607941]
[55.11669540 106.80280304]
[40.11851120 106.56952667]
[25.12032509 106.33625031]
[13.81911659 117.05635071]
[-1.38785386 116.60611725]
[-11.53818035 105.76607513]
[-26.53636742 105.53279877]
[-35.88857269 117.77381134]
[-50.48480988 122.11009216]
[-64.66783142 117.07959747]
[-73.06852722 104.80905151]
[-88.06671143 104.57577515]
[-103.06489563 104.34249878]
[-118.06308746 104.10922241]
[-123.44523621 118.27989960]
[-133.35182190 129.75315857]
[-146.58654785 137.14352417]
[-161.55128479 139.55859375]
[-176.43894958 136.70672607]
[-189.45179749 128.93229675]
[-199.01844788 117.17411041]
[-203.98370361 102.85202789]
[-203.74795532 87.69550323]
[-198.33970642 73.53475952]
[-188.41198730 62.07978821]
[-175.16366577 54.71381760]
[-160.19450378 52.32633209]
[-145.31211853 55.20563507]
[-132.31361389 63.00402832]
[-122.76865387 74.77982330]
[-117.82980347 89.11103821]
[-102.83161926 89.34431458]
[-87.83343506 89.57759094]
[-72.83525085 89.81086731]
[-64.05700684 77.80751801]
[-49.72439575 73.22055054]
[-35.27007675 78.00866699]
[-26.30308914 90.53461456]
[-11.30490398 90.76789093]
[-0.82236284 80.24877167]
[14.39125347 80.27169037]
[25.35360146 91.33806610]
[40.35178757 91.57134247]
[55.34997559 91.80461884]
[70.34815979 92.03789520]
[78.21918488 78.36154175]
[91.84362793 70.40100861]
[107.62258911 70.25907135]
[114.78338623 57.07867050]
[121.94418335 43.89826965]
[129.10498047 30.71786880]
[136.26577759 17.53746796]
[143.42657471 4.35706615]
[142.46087646 -12.01362228]
[156.30244446 -20.80810547]
[170.71226501 -12.97937393]
[170.86676025 3.41904569]
[156.60697937 11.51786423]
[149.44618225 24.69826508]
[142.28538513 37.87866592]
[135.12458801 51.05906677]
[127.96379089 64.23947144]
[120.80299377 77.41986847]
[129.37152100 91.05905914]
[129.85588074 107.15914154]
[143.14604187 114.11409760]
[156.43621826 121.06904602]
[169.72639465 128.02400208]
[183.01655579 134.97895813]
[196.30673218 141.93391418]
[209.59689331 148.88885498]
[227.27691650 142.48406982]
[243.82617188 150.73011780]
[249.17475891 168.10069275]
[262.87161255 174.21594238]
[276.56845093 180.33120728]
[290.26531982 186.44645691]
[306.51150513 184.21192932]
[316.35467529 197.32849121]
[309.66900635 212.30293274]
[293.33215332 213.73083496]
[284.15005493 200.14331055]
[270.45321655 194.02804565]
[256.75634766 187.91279602]
[243.05950928 181.79754639]
[233.35342407 188.17730713]
[221.64668274 189.00637817]
[210.91937256 183.95516968]
[203.96022034 174.20608521]
[202.64195251 162.17903137]
[189.35177612 155.22407532]
[176.06159973 148.26911926]
[162.77143860 141.31417847]
[149.48126221 134.35922241]
[136.19110107 127.40426636]
[122.90092468 120.44931030]
[112.11416626 128.21122742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[6 45]
[9 42]
[10 41]
[14 37]
[15 36]
[16 35]
[17 34]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[73 94]
[74 93]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
