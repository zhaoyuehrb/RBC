%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGGAAAAUCAGACAAUGGUCACAGAGUUCCUCCUACUGGGAUUUCUCCUGGGCCCAAGGAUUCAGAUGCUCCUCUUUGGGCUCUUCUCCCUGUUCU\
) } def
/len { sequence length } bind def

/coor [
[100.57222748 269.24047852]
[105.26618958 254.54454041]
[117.17475891 244.73690796]
[115.31327820 229.85287476]
[113.45179749 214.96882629]
[111.59031677 200.08477783]
[109.72883606 185.20072937]
[107.86735535 170.31668091]
[106.00587463 155.43263245]
[99.58983612 151.54875183]
[96.16741943 166.15310669]
[81.22025299 167.41099548]
[75.40516663 153.58404541]
[86.75775909 143.78100586]
[80.34172058 139.89714050]
[66.29118347 145.14903259]
[52.24065018 150.40092468]
[42.23157883 163.39134216]
[26.01509094 160.95053101]
[20.27331543 145.58941650]
[30.91290092 133.11016846]
[46.98875046 136.35038757]
[61.03928757 131.09849548]
[75.08982849 125.84660339]
[69.38631439 111.44296265]
[70.64693451 97.39740753]
[77.40876007 86.62424469]
[67.22246552 75.61336517]
[57.03617096 64.60248566]
[46.84988022 53.59160614]
[31.79874039 48.71576691]
[28.83545685 34.11891174]
[18.64916420 23.10803223]
[8.46287155 12.09715462]
[-1.72342157 1.08627665]
[-17.52352333 0.72246414]
[-28.37805367 -10.76469040]
[-27.84721184 -26.56006241]
[-16.24593925 -37.29253769]
[-0.45706320 -36.59472656]
[10.15215588 -24.88063240]
[9.28745651 -9.10001659]
[19.47374916 1.91086149]
[29.66004181 12.92173958]
[39.84633636 23.93261719]
[54.16888046 28.02088547]
[57.86075592 43.40531540]
[68.04705048 54.41619110]
[78.23334503 65.42707062]
[88.41963959 76.43795013]
[107.34976959 72.29360199]
[125.72830963 82.57217407]
[133.24218750 104.03294373]
[124.04389954 126.65435028]
[138.25097656 121.84196472]
[152.45805359 117.02957916]
[166.66511536 112.21719360]
[180.87219238 107.40480804]
[195.07926941 102.59242249]
[209.28634644 97.78002930]
[223.49340820 92.96764374]
[237.70048523 88.15525818]
[251.90756226 83.34287262]
[266.11462402 78.53048706]
[267.92398071 63.37498856]
[276.13708496 50.51001740]
[289.12326050 42.48992157]
[304.30407715 40.90709686]
[318.66540527 46.07581329]
[329.35574341 56.96981812]
[334.25253296 71.42610168]
[332.38354492 86.57435608]
[324.11981201 99.40688324]
[311.10217285 107.37577820]
[295.91522217 108.89881134]
[281.57437134 103.67357635]
[270.92703247 92.73755646]
[256.71994019 97.54994965]
[242.51287842 102.36233521]
[228.30580139 107.17472076]
[214.09872437 111.98710632]
[199.89164734 116.79949188]
[185.68458557 121.61187744]
[171.47750854 126.42426300]
[157.27043152 131.23664856]
[143.06335449 136.04904175]
[128.85629272 140.86141968]
[120.88992310 153.57115173]
[122.75140381 168.45520020]
[124.61288452 183.33924866]
[126.47436523 198.22329712]
[128.33584595 213.10733032]
[130.19732666 227.99137878]
[132.05880737 242.87542725]
[146.01599121 249.44815063]
[154.18467712 262.53540039]
[153.95825195 277.96109009]
[145.40898132 290.80297852]
[131.26489258 296.96319580]
[116.03932953 294.47610474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[15 24]
[16 23]
[17 22]
[27 50]
[28 49]
[29 48]
[30 47]
[32 45]
[33 44]
[34 43]
[35 42]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
