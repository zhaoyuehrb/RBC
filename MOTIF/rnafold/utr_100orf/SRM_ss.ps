%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCGGCGGGCGGAGCUGGUCCCGUUGUGCUGCGGCGCCGCGCGGCCUGCAGUCCCGGGCCCGCGCCCCGCGCCGCCCGCCCGCCCGCCAUGGAGCCCGGCCCCGACGGCCCCGCCGCCUCCGGCCCCGCCGCCAUCCGCGAGGGCUGGUUCCGCGAGACCUGCAGCCUGUGGCCCGGCCAGGCCCUGU\
) } def
/len { sequence length } bind def

/coor [
[371.95046997 82.60111237]
[357.00064087 83.82692719]
[342.05081177 85.05274200]
[327.10098267 86.27855682]
[312.15115356 87.50437164]
[297.20132446 88.73019409]
[282.25149536 89.95600891]
[267.30166626 91.18182373]
[252.36238098 92.52990723]
[237.43460083 94.00016022]
[222.50683594 95.47042084]
[207.57905579 96.94067383]
[192.65129089 98.41093445]
[177.72352600 99.88118744]
[162.79574585 101.35144806]
[150.88815308 110.29898071]
[136.39604187 103.95159149]
[121.46826935 105.42185211]
[108.94948578 124.87609863]
[81.82698059 124.78251648]
[69.22025299 132.91088867]
[56.61352921 141.03926086]
[49.20797348 155.02026367]
[34.31858063 155.41426086]
[21.71185303 163.54263306]
[9.10512733 171.67100525]
[-3.50159883 179.79939270]
[-6.59266329 195.29844666]
[-19.78406334 204.00260925]
[-35.24957657 200.74784851]
[-43.81378937 187.46516418]
[-40.39570236 172.03492737]
[-27.02321053 163.61163330]
[-11.62997246 167.19265747]
[0.97675347 159.06428528]
[13.58347988 150.93591309]
[26.19020462 142.80754089]
[32.69404221 129.40792847]
[48.48515320 128.43254089]
[61.09188080 120.30416870]
[73.69860840 112.17578888]
[71.13417816 97.39662933]
[56.52602386 93.99048615]
[41.91786957 90.58434296]
[27.30971336 87.17819214]
[12.70155811 83.77204895]
[-1.90659606 80.36590576]
[-16.54212761 77.07939148]
[-31.20405769 73.91271973]
[-45.86598587 70.74604034]
[-60.52791595 67.57936859]
[-73.67311859 76.35314941]
[-89.15562439 73.18019104]
[-97.78993225 59.94296265]
[-94.45346069 44.49487305]
[-81.12568665 36.00099564]
[-65.71373749 39.50060654]
[-57.36124420 52.91743851]
[-42.69931412 56.08411407]
[-28.03738403 59.25078583]
[-13.37545490 62.41746140]
[-6.16202402 60.75381470]
[1.49954784 65.75775146]
[16.10770226 69.16389465]
[30.71585655 72.57003784]
[45.32401276 75.97618866]
[59.93216705 79.38233185]
[74.54032135 82.78847504]
[87.55428314 74.26741791]
[101.99052429 73.63806915]
[113.73934174 79.96957397]
[119.99801636 90.49407959]
[134.92578125 89.02381897]
[147.90112305 79.97112274]
[161.32548523 86.42367554]
[176.25326538 84.95342255]
[191.18103027 83.48316193]
[206.10881042 82.01290894]
[221.03657532 80.54264832]
[235.96434021 79.07238770]
[250.89212036 77.60213470]
[259.14129639 73.64103699]
[266.07586670 76.23199463]
[281.02569580 75.00617981]
[295.97552490 73.78036499]
[310.92535400 72.55455017]
[325.87518311 71.32872772]
[340.82501221 70.10291290]
[355.77484131 68.87709808]
[370.72467041 67.65128326]
[385.65243530 66.18102264]
[400.55413818 64.46672058]
[408.73739624 60.37118530]
[415.71343994 62.84833145]
[430.64120483 61.37807465]
[438.89038086 57.41698074]
[445.82495117 60.00793457]
[460.77478027 58.78211975]
[475.72460938 57.55630493]
[488.84631348 48.71711731]
[502.16333008 55.38845062]
[517.11315918 54.16263580]
[532.06298828 52.93682098]
[547.01281738 51.71100235]
[561.92803955 50.11867142]
[576.79974365 48.16077805]
[584.91485596 43.93189621]
[591.93048096 46.29457474]
[606.83221436 44.58026886]
[621.71942139 42.74411011]
[636.59106445 40.78621674]
[651.46276855 38.82832336]
[657.58721924 29.81492043]
[667.46148682 25.75213623]
[677.72436523 27.76134109]
[685.02404785 34.93979263]
[699.95178223 33.46953583]
[714.78942871 31.26857758]
[729.50122070 28.34222221]
[744.21301270 25.41586876]
[754.11407471 9.27869415]
[772.35040283 5.55038738]
[787.27014160 16.13766861]
[801.87829590 12.73152447]
[816.48651123 9.32538033]
[831.09466553 5.91923618]
[845.70281982 2.51309228]
[860.31097412 -0.89305162]
[874.91912842 -4.29919577]
[889.49890137 -7.82473707]
[904.04937744 -11.46943951]
[918.59985352 -15.11414242]
[924.27178955 -29.55742455]
[937.36816406 -37.87998962]
[952.85308838 -36.88164520]
[964.77233887 -26.94626999]
[968.54266357 -11.89422226]
[962.71435547 2.48667979]
[949.52844238 10.66668606]
[934.05529785 9.50041676]
[922.24456787 -0.56367350]
[907.69409180 3.08102918]
[893.14361572 6.72573185]
[887.40991211 11.40822983]
[878.32525635 10.30895901]
[863.71710205 13.71510315]
[849.10894775 17.12124634]
[834.50079346 20.52739143]
[819.89263916 23.93353462]
[805.28448486 27.33967972]
[790.67633057 30.74582291]
[786.88610840 41.52678299]
[778.26824951 49.21337891]
[766.89184570 51.80474091]
[755.56457520 48.54247284]
[747.13934326 40.12764740]
[732.42761230 43.05400085]
[717.71582031 45.98035812]
[729.48754883 55.27688599]
[731.38824463 70.15598297]
[722.33142090 82.11315918]
[707.49377441 84.31402588]
[695.35601807 75.50062561]
[692.85589600 60.71045685]
[701.42205811 48.39730453]
[686.49426270 49.86756134]
[671.66107178 62.25719452]
[653.42065430 53.69999695]
[638.54895020 55.65789032]
[623.67730713 57.61577988]
[617.44598389 61.61230850]
[608.54650879 59.48198700]
[593.64483643 61.19628906]
[578.75762939 63.03245163]
[563.88592529 64.99034119]
[561.45556641 67.56578064]
[557.65051270 69.08419800]
[552.98492432 68.90946960]
[548.23864746 66.66083527]
[533.28881836 67.88665009]
[518.33898926 69.11246490]
[503.38912964 70.33827972]
[491.33673096 79.08979034]
[476.95040894 72.50613403]
[462.00057983 73.73194885]
[447.05075073 74.95776367]
[432.11145020 76.30584717]
[417.18368530 77.77610016]
[402.26846313 79.36843872]
[387.36672974 81.08274078]
[383.74032593 84.21294403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[17 73]
[18 72]
[20 41]
[21 40]
[22 39]
[24 37]
[25 36]
[26 35]
[27 34]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 61]
[49 60]
[50 59]
[51 58]
[91 190]
[92 189]
[94 188]
[95 187]
[97 186]
[98 185]
[99 184]
[101 182]
[102 181]
[103 180]
[104 179]
[105 175]
[106 174]
[108 173]
[109 172]
[110 170]
[111 169]
[112 168]
[116 166]
[117 165]
[118 158]
[119 157]
[120 156]
[123 151]
[124 150]
[125 149]
[126 148]
[127 147]
[128 146]
[129 145]
[130 143]
[131 142]
[132 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
