%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACACACUGCACAGCGACCACUGAGCAUGCCUGCAGGCUCCAUGUCUACUACAGGCUAUCCUGGUGUCUGCAGUACCACAUCAUACAGAACUCACUGUUAUAUCCCAGUGACCUCUUCUGUUACUC\
) } def
/len { sequence length } bind def

/coor [
[97.18632507 146.98956299]
[89.95151520 145.98873901]
[82.95860291 143.88082886]
[76.37593079 140.71656799]
[70.36195374 136.57214355]
[59.18173981 146.57228088]
[54.80961990 154.71780396]
[47.59909821 156.67730713]
[36.17495728 166.39785767]
[24.75081253 176.11839294]
[19.25452042 190.95420837]
[4.54725790 193.30914307]
[-6.87688541 203.02967834]
[-18.30102921 212.75022888]
[-19.32026482 228.52160645]
[-31.24800682 238.89004517]
[-47.00774002 237.70413208]
[-57.24948883 225.66743469]
[-55.89701080 209.92111206]
[-43.75270462 199.80720520]
[-28.02157211 201.32608032]
[-16.59742737 191.60554504]
[-5.17328501 181.88499451]
[-0.49412337 167.74446106]
[15.03027058 164.69424438]
[26.45441437 154.97370911]
[37.87855530 145.25317383]
[49.18160248 135.39207458]
[60.36181641 125.39193726]
[53.36127853 93.61521149]
[68.64459229 64.88911438]
[60.56337738 52.25210953]
[52.48216248 39.61510086]
[44.40094757 26.97809410]
[36.31973267 14.34108543]
[28.23851776 1.70407724]
[20.15730286 -10.93293095]
[12.07608891 -23.56993866]
[-1.87714303 -31.02767944]
[-2.21550894 -45.91844177]
[-10.29672337 -58.55545044]
[-18.37793732 -71.19245911]
[-39.02141571 -79.76342773]
[-39.74899292 -101.35482025]
[-49.03904724 -113.13169861]
[-58.32909775 -124.90857697]
[-67.61914825 -136.68545532]
[-83.31890106 -139.98658752]
[-90.39759827 -154.38351440]
[-83.42507172 -168.83215332]
[-67.75004578 -172.24876404]
[-55.39706039 -162.01239014]
[-55.84226608 -145.97550964]
[-46.55221558 -134.19863892]
[-37.26216507 -122.42175293]
[-27.97211266 -110.64486694]
[-19.89619064 -111.42738342]
[-12.09819603 -108.86394501]
[-5.92070627 -103.31564331]
[-2.45934582 -95.66403198]
[-2.36891103 -87.17162323]
[-5.74092960 -79.27367401]
[2.34028482 -66.63666534]
[10.42149925 -53.99965668]
[23.79670906 -47.44579697]
[24.71309662 -31.65115356]
[32.79431152 -19.01414490]
[40.87552643 -6.37713718]
[48.95674133 6.25987101]
[57.03795624 18.89687920]
[65.11917114 31.53388786]
[73.20038605 44.17089462]
[81.28160095 56.80790329]
[89.48162842 54.11645508]
[98.03520966 52.96729279]
[106.65483093 53.39904404]
[115.05076599 55.39719391]
[122.94080353 58.89458084]
[130.05972290 63.77364349]
[136.16824341 69.87038422]
[141.06105042 76.97987366]
[144.57366943 84.86314392]
[146.58801270 93.25520325]
[147.03640747 101.87397766]
[145.90376282 110.42976379]
[159.81460571 116.04121399]
[173.72544861 121.65267181]
[187.63630676 127.26412201]
[201.54714966 132.87557983]
[215.45799255 138.48703003]
[236.34899902 134.04713440]
[248.66738892 150.53277588]
[262.95599365 155.09739685]
[277.24459839 159.66201782]
[291.53320312 164.22663879]
[305.82180786 168.79125977]
[320.11041260 173.35586548]
[332.53854370 164.06495667]
[348.05459595 163.88719177]
[360.69235229 172.89093018]
[365.59228516 187.61404419]
[360.87033081 202.39520264]
[348.34213257 211.55075073]
[332.82504272 211.56018066]
[320.28573608 202.41987610]
[315.54580688 187.64447021]
[301.25720215 183.07986450]
[286.96856689 178.51524353]
[272.67996216 173.95062256]
[258.39135742 169.38600159]
[244.10276794 164.82138062]
[236.82231140 170.22390747]
[227.72558594 171.62931824]
[218.89193726 168.58563232]
[212.40170288 161.67298889]
[209.84654236 152.39787292]
[195.93569946 146.78642273]
[182.02484131 141.17497253]
[168.11399841 135.56350708]
[154.20315552 129.95205688]
[140.29231262 124.34060669]
[136.04216003 130.28033447]
[130.92436218 135.49111938]
[125.06213379 139.84751892]
[118.59658051 143.24468994]
[111.68334961 145.60083008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[8 27]
[9 26]
[10 25]
[12 23]
[13 22]
[14 21]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[40 64]
[41 63]
[42 62]
[44 56]
[45 55]
[46 54]
[47 53]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[92 111]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
