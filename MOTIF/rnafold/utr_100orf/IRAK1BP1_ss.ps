%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGUUACUAUGGAAACCCAGCUGCCAUCGCUAUGUCUCUGCAAAAGACCCCUCCGACCCGAGUGUUCGUGGAACUGGUUCCCUGGGCUGACCGGAGCCGGGAGAACAACCUGGCCUCAGGGAGAGAGACGC\
) } def
/len { sequence length } bind def

/coor [
[0.94836318 217.34788513]
[-8.20629120 229.23033142]
[-17.36094475 241.11276245]
[-26.51559830 252.99519348]
[-35.67025375 264.87762451]
[-44.82490540 276.76007080]
[-29.87518311 277.98715210]
[-21.31529999 290.30496216]
[-25.37815285 304.74426270]
[-39.10536575 310.79104614]
[-52.50144577 304.04232788]
[-55.81212616 289.41271973]
[-66.29366302 300.14294434]
[-76.77520752 310.87313843]
[-80.30718231 326.88742065]
[-96.02146149 331.57714844]
[-107.75254059 320.11791992]
[-103.43249512 304.29800415]
[-87.50540924 300.39160156]
[-77.02387238 289.66140747]
[-66.54232788 278.93118286]
[-56.70734406 267.60540771]
[-47.55268860 255.72297668]
[-38.39803696 243.84054565]
[-29.24338150 231.95811462]
[-20.08872795 220.07566833]
[-10.93407345 208.19323730]
[-15.96547508 199.65347290]
[-18.15563774 189.95623779]
[-17.27765656 180.02374268]
[-13.39729309 170.80622864]
[-6.86842203 163.19114685]
[1.69916308 157.91763306]
[11.49668312 155.50485229]
[21.59270668 156.20089722]
[31.02169991 159.95738220]
[41.50324249 149.22718811]
[51.98478317 138.49697876]
[62.46632385 127.76677704]
[72.94786835 117.03656769]
[83.42940521 106.30636597]
[69.65251923 112.23909760]
[55.12673569 108.49723053]
[45.93086243 96.64666748]
[45.91321945 81.64667511]
[55.08119583 69.77451324]
[69.59813690 65.99848938]
[83.38893890 71.89880371]
[90.68260193 85.00751495]
[88.92827606 70.11045837]
[87.17394257 55.21339798]
[73.26612854 44.67652130]
[71.27433014 27.68077278]
[81.94130707 14.73340511]
[79.83823395 -0.11843262]
[77.73516083 -14.97027016]
[75.63208771 -29.82210732]
[72.28852081 -34.07309341]
[71.09616089 -38.71947861]
[71.83345032 -42.85131454]
[73.94142914 -45.78763580]
[72.88728333 -60.75054932]
[71.83314514 -75.71346283]
[62.21234894 -88.99398804]
[69.14934540 -103.85366821]
[85.50794983 -105.00614166]
[94.45983124 -91.26583862]
[86.79605865 -76.76760864]
[87.85019684 -61.80469513]
[88.90434265 -46.84177780]
[90.48392487 -31.92518044]
[92.58699799 -17.07334328]
[94.69007111 -2.22150564]
[96.79314423 12.63033199]
[108.11515808 18.89455605]
[113.82078552 30.72515297]
[111.60911560 43.87013626]
[102.07100677 53.45906830]
[103.82533264 68.35612488]
[105.57966614 83.25318146]
[116.30986786 93.73472595]
[131.24395752 95.13934326]
[146.17803955 96.54396820]
[161.11213684 97.94859314]
[176.04621887 99.35321045]
[190.98031616 100.75783539]
[205.91439819 102.16246033]
[220.84849548 103.56707764]
[210.62072754 92.59471130]
[207.78474426 77.86524200]
[213.20715332 63.87962341]
[225.23098755 54.91149521]
[240.18208313 53.70129013]
[253.49177551 60.61880875]
[261.09295654 73.55024719]
[260.66290283 88.54407501]
[252.33305359 101.01858521]
[238.64828491 107.16194153]
[252.95697021 111.66320801]
[267.26565552 116.16447449]
[281.57434082 120.66574860]
[295.88302612 125.16701508]
[310.19171143 129.66828918]
[323.27667236 121.10565948]
[338.79803467 123.00846863]
[349.42715454 134.47825623]
[350.14526367 150.09933472]
[340.61328125 162.49592590]
[325.33190918 165.81472778]
[311.51660156 158.48869324]
[305.69046021 143.97697449]
[291.38177490 139.47570801]
[277.07308960 134.97444153]
[262.76440430 130.47315979]
[248.45570374 125.97189331]
[234.14701843 121.47062683]
[219.44387817 118.50116730]
[204.50978088 117.09654999]
[189.57569885 115.69192505]
[174.64160156 114.28730011]
[159.70751953 112.88268280]
[144.77342224 111.47805786]
[129.83934021 110.07343292]
[114.90524292 108.66881561]
[106.07952118 116.41944122]
[94.15961456 116.78791046]
[83.67807007 127.51811218]
[73.19653320 138.24832153]
[62.71498871 148.97851562]
[52.23344803 159.70872498]
[41.75190353 170.43893433]
[46.59794617 190.47100830]
[38.58370590 209.31101990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[12 21]
[13 20]
[14 19]
[36 131]
[37 130]
[38 129]
[39 128]
[40 127]
[41 126]
[49 80]
[50 79]
[51 78]
[54 74]
[55 73]
[56 72]
[57 71]
[61 70]
[62 69]
[63 68]
[81 124]
[82 123]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[88 117]
[98 116]
[99 115]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
