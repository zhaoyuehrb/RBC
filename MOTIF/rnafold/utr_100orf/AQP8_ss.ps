%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAUAAGAGUAUCUUGCACAGCAGGUGCAGGUUUCCCAGCAGCUCAGGCAAGAGUCCGAUGUUUGUGCCAUCUGAUCCUGAUGUCUGGAGAGAUAGCCAUGUGUGAGCCUGAAUUUGGCAAUGACAAGGCCAGGGAGCCGAGCGUGGGUGGCAGGUGGCGAGUGUCCUGGUACGAACGGU\
) } def
/len { sequence length } bind def

/coor [
[75.07345581 139.58410645]
[65.76431274 151.34590149]
[56.45516968 163.10769653]
[47.14602661 174.86949158]
[37.83688354 186.63130188]
[28.52774239 198.39309692]
[32.18078232 209.73760986]
[29.91557693 221.31625366]
[22.41090965 230.26379395]
[11.62725639 234.42338562]
[0.29572216 232.86593628]
[-9.41168785 244.30125427]
[-19.11909866 255.73655701]
[-28.82650757 267.17184448]
[-38.53391647 278.60714722]
[-48.24132919 290.04248047]
[-51.42061234 298.63293457]
[-58.21485901 301.58889771]
[-68.11714172 312.85586548]
[-74.03178406 328.74465942]
[-90.93695831 327.45962524]
[-94.38195801 310.85937500]
[-79.38412476 302.95358276]
[-69.48184204 291.68661499]
[-59.67663193 280.33505249]
[-49.96922302 268.89974976]
[-40.26181412 257.46444702]
[-30.55440331 246.02914429]
[-20.84699249 234.59384155]
[-11.13958263 223.15853882]
[-13.74037743 205.05624390]
[-2.10383201 190.53701782]
[16.76594543 189.08395386]
[26.07508850 177.32215881]
[35.38423157 165.56036377]
[44.69337082 153.79855347]
[54.00251389 142.03675842]
[63.31165695 130.27496338]
[60.60587692 123.28005981]
[48.97291565 132.74971008]
[36.37206268 124.61222839]
[40.21756744 110.11353302]
[55.19431305 109.29023743]
[52.48853302 102.29533386]
[37.68757248 99.85984039]
[22.88661575 97.42434692]
[8.08565617 94.98885345]
[-4.60815477 104.40387726]
[-20.22898865 102.00281525]
[-29.50928116 89.21017456]
[-26.94319916 73.61560059]
[-14.05315495 64.47107697]
[1.51341867 67.20188904]
[10.52114868 80.18789673]
[25.32210732 82.62339020]
[40.12306595 85.05887604]
[54.92402649 87.49436951]
[63.25110626 73.62014008]
[75.46411133 63.84386826]
[89.80590057 59.09759140]
[104.36618042 59.62343216]
[117.33431244 64.98558044]
[127.22446442 74.16924286]
[139.94972229 66.22773743]
[152.67500305 58.28622818]
[165.40026855 50.34471893]
[178.12553406 42.40320969]
[190.85079956 34.46170044]
[203.57606506 26.52019310]
[216.30133057 18.57868576]
[229.02661133 10.63717747]
[241.75187683 2.69566870]
[243.59597778 -8.05564499]
[250.91259766 -15.84727669]
[261.09896851 -18.26139069]
[270.72116089 -14.73312187]
[283.71154785 -22.23312187]
[296.70193481 -29.73312187]
[304.78457642 -43.33390808]
[319.67535400 -42.99684525]
[332.66574097 -50.49684525]
[331.82421875 -62.38676071]
[337.80972290 -73.96495056]
[349.88619995 -81.34023285]
[349.37127686 -96.33139038]
[348.85638428 -111.32254791]
[348.34146118 -126.31371307]
[347.82653809 -141.30487061]
[338.68997192 -154.92306519]
[346.15731812 -169.52343750]
[362.54678345 -170.08638000]
[370.99832153 -156.03279114]
[362.81771851 -141.81977844]
[363.33261108 -126.82862854]
[363.84753418 -111.83746338]
[364.36245728 -96.84630585]
[364.87734985 -81.85514832]
[376.95178223 -72.95524597]
[391.42388916 -76.89968109]
[405.89596558 -80.84410858]
[420.36807251 -84.78854370]
[434.84014893 -88.73297882]
[446.12002563 -99.82689667]
[460.43399048 -95.70869446]
[474.90609741 -99.65312195]
[489.37817383 -103.59755707]
[496.45678711 -114.39922333]
[508.61056519 -117.37719727]
[519.18023682 -111.46233368]
[533.71789551 -115.15775299]
[548.25561523 -118.85317230]
[562.79327393 -122.54859161]
[577.33093262 -126.24401093]
[585.43688965 -139.54554749]
[600.23284912 -143.08613586]
[612.86383057 -135.27633667]
[627.40148926 -138.97175598]
[641.93920898 -142.66717529]
[656.47686768 -146.36259460]
[671.01452637 -150.05801392]
[685.55218506 -153.75343323]
[694.58325195 -170.38533020]
[712.58831787 -175.07945251]
[728.05096436 -165.31408691]
[742.45324707 -169.50636292]
[748.59033203 -183.88934326]
[762.56011963 -190.91635132]
[777.76654053 -187.26943970]
[787.02947998 -174.67057800]
[785.97540283 -159.06857300]
[775.10186768 -147.83018494]
[759.54315186 -146.26187134]
[746.64550781 -155.10411072]
[732.24328613 -150.91183472]
[729.03826904 -139.93197632]
[720.83819580 -131.78654480]
[709.60626221 -128.58926392]
[698.11187744 -131.24908447]
[689.24761963 -139.21575928]
[674.70996094 -135.52033997]
[660.17230225 -131.82492065]
[645.63458252 -128.12950134]
[631.09692383 -124.43408966]
[616.55926514 -120.73867035]
[609.19097900 -107.84512329]
[594.50030518 -103.89035034]
[581.02636719 -111.70633698]
[566.48870850 -108.01091766]
[551.95098877 -104.31549835]
[537.41333008 -100.62007904]
[522.87567139 -96.92465973]
[511.00198364 -84.01686859]
[493.32260132 -89.12546539]
[478.85052490 -85.18103027]
[464.37841797 -81.23660278]
[454.13369751 -70.42481232]
[438.78457642 -74.26088715]
[424.31250000 -70.31645203]
[409.84039307 -66.37201691]
[395.36831665 -62.42758560]
[380.89620972 -58.48315430]
[365.86370850 -32.77838898]
[340.16574097 -37.50646210]
[327.17535400 -30.00646400]
[320.02188110 -16.94212914]
[304.20193481 -16.74274063]
[291.21154785 -9.24274063]
[278.22116089 -1.74274099]
[269.83407593 15.66376686]
[249.69337463 15.42093658]
[236.96810913 23.36244583]
[224.24284363 31.30395317]
[211.51757812 39.24546051]
[198.79231262 47.18696976]
[186.06704712 55.12847900]
[173.34178162 63.06998825]
[160.61650085 71.01149750]
[147.89123535 78.95300293]
[135.16596985 86.89450836]
[138.98689270 105.54064941]
[133.09213257 124.59083557]
[118.10778046 139.08802795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[18 24]
[19 23]
[44 57]
[45 56]
[46 55]
[47 54]
[63 179]
[64 178]
[65 177]
[66 176]
[67 175]
[68 174]
[69 173]
[70 172]
[71 171]
[72 170]
[76 168]
[77 167]
[78 166]
[80 164]
[81 163]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[98 161]
[99 160]
[100 159]
[101 158]
[102 157]
[104 155]
[105 154]
[106 153]
[109 151]
[110 150]
[111 149]
[112 148]
[113 147]
[116 144]
[117 143]
[118 142]
[119 141]
[120 140]
[121 139]
[124 134]
[125 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
