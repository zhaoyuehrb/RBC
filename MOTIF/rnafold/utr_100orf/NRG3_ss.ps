%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGAAGGUGAAGACCGGCUCCUAGGAUGAGUGAAGGGGCGGCCGCUGCCUCGCCACCUGGUGCCGCUUCGGCAGCCGCCGCCUCGGCCGAGGAGGGCACCGCGGCGGCUGCGGCGGCGGCAGCGG\
) } def
/len { sequence length } bind def

/coor [
[95.42655182 118.54291534]
[83.72624207 109.99604797]
[68.88859558 112.19700623]
[54.05094528 114.39796448]
[39.21329498 116.59892273]
[24.37564850 118.79987335]
[16.24568558 123.19630432]
[9.14731312 120.86813354]
[-5.73988056 122.70429230]
[-20.62707329 124.54045105]
[-25.58093071 138.93560791]
[-36.25012970 149.70851135]
[-50.48044205 154.76007080]
[-65.43144989 153.13885498]
[-78.14347839 145.21965027]
[-86.12348938 132.61866760]
[-101.01068115 134.45481873]
[-115.89787292 136.29098511]
[-124.13327789 140.48657227]
[-131.17237854 137.98489380]
[-146.10015869 139.45515442]
[-161.02792358 140.92541504]
[-175.95568848 142.39567566]
[-190.88346863 143.86592102]
[-196.57450867 158.07403564]
[-208.22406006 168.00111389]
[-223.15510559 171.36598206]
[-237.93663025 167.39540100]
[-249.17192078 157.00181580]
[-254.27920532 142.57357788]
[-252.08486938 127.42617798]
[-243.09313965 115.04039764]
[-229.37026978 108.26239777]
[-214.06965637 108.64969635]
[-200.70729065 116.11331177]
[-192.35371399 128.93815613]
[-177.42594910 127.46789551]
[-162.49818420 125.99764252]
[-147.57040405 124.52738190]
[-132.64263916 123.05712891]
[-117.73403168 121.40379333]
[-102.84683990 119.56763458]
[-87.95964813 117.73147583]
[-83.28057861 103.56913757]
[-72.87372589 92.79849243]
[-58.76470566 87.59305573]
[-43.73342514 89.03555298]
[-30.76636887 96.89319611]
[-22.46323395 109.65325928]
[-7.57604027 107.81710052]
[7.31115246 105.98094177]
[22.17469215 103.96222687]
[37.01234055 101.76126862]
[51.84998703 99.56031799]
[66.68763733 97.35935974]
[81.52528381 95.15840149]
[90.24075317 83.58313751]
[104.57344818 81.45708466]
[116.27375793 90.00395203]
[131.11140442 87.80299377]
[145.94905090 85.60203552]
[158.46456909 75.92357635]
[172.18937683 81.70965576]
[187.02702332 79.50869751]
[201.86466980 77.30773926]
[216.70231628 75.10678101]
[231.53997803 72.90582275]
[246.37762451 70.70486450]
[261.21527100 68.50390625]
[268.45956421 54.90882492]
[282.15988159 48.26390076]
[296.97076416 50.92884827]
[307.24935913 61.67539978]
[322.08700562 59.47444153]
[336.92465210 57.27348328]
[351.76229858 55.07252502]
[366.59994507 52.87157059]
[381.43759155 50.67061234]
[396.27523804 48.46965408]
[411.11288452 46.26869965]
[425.95053101 44.06774139]
[440.78817749 41.86678314]
[455.62582397 39.66582870]
[461.11019897 26.95528221]
[472.08853149 18.70192909]
[485.60690308 16.99178505]
[498.09402466 22.16810608]
[506.30480957 32.76912689]
[521.19201660 30.93296814]
[536.07922363 29.09680748]
[545.60369873 16.48492241]
[561.26776123 14.38458061]
[573.77825928 24.04187775]
[575.71289062 39.72731018]
[565.92388916 52.13499069]
[550.21887207 53.90365982]
[537.91534424 43.98400116]
[523.02813721 45.82015991]
[508.14096069 47.65632248]
[500.69662476 62.23269653]
[485.89981079 69.60756683]
[469.45318604 66.71892548]
[457.82678223 54.50347519]
[442.98913574 56.70443344]
[428.15148926 58.90538788]
[413.31384277 61.10634613]
[398.47619629 63.30730438]
[383.63854980 65.50826263]
[368.80090332 67.70922089]
[353.96325684 69.91017151]
[339.12561035 72.11112976]
[324.28796387 74.31208801]
[309.45031738 76.51304626]
[302.73385620 89.78057098]
[289.33432007 96.63014221]
[274.29504395 94.24832916]
[263.41622925 83.34156036]
[248.57858276 85.54251099]
[233.74092102 87.74346924]
[218.90327454 89.94442749]
[204.06562805 92.14538574]
[189.22798157 94.34634399]
[174.39033508 96.54730225]
[162.93611145 106.06833649]
[148.15000916 100.43968201]
[133.31236267 102.64064026]
[118.47471619 104.84159851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[8 51]
[9 50]
[10 49]
[16 43]
[17 42]
[18 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[59 127]
[60 126]
[61 125]
[63 123]
[64 122]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[73 113]
[74 112]
[75 111]
[76 110]
[77 109]
[78 108]
[79 107]
[80 106]
[81 105]
[82 104]
[83 103]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
