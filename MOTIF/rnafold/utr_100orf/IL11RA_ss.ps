%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGCGAGGGCGAGGGCAGAGGGCGCUGGCGGCAGCGGCCGCGGAAGAUGAGCAGCAGCUGCUCAGGGCUGAGCAGGGUCCUGGUGGCCGUGGCUACAGCCCUGGUGUCUGCCUCCUCCCCCUGCCCCCAGGCCUGGGGCCCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[110.92435455 661.45648193]
[108.14746094 646.28112793]
[114.03694153 632.02215576]
[126.71350098 623.22961426]
[126.08536530 608.24279785]
[125.45722961 593.25592041]
[124.82909393 578.26910400]
[111.98459625 567.45922852]
[110.87874603 550.37011719]
[122.67798615 537.49804688]
[121.73612976 522.52764893]
[120.79427338 507.55725098]
[119.85240936 492.58685303]
[105.42740631 481.39419556]
[103.66752625 462.90209961]
[116.14150238 448.71218872]
[114.57357025 433.79434204]
[113.00564575 418.87652588]
[111.43772125 403.95867920]
[109.86978912 389.04086304]
[108.30186462 374.12301636]
[104.44927979 367.75747681]
[106.86067200 358.87683105]
[105.60550690 343.92944336]
[104.35034180 328.98205566]
[94.18385315 323.63662720]
[87.81979370 313.93057251]
[86.95296478 302.23596191]
[91.91725159 291.47921753]
[101.57264709 284.40890503]
[100.94451141 269.42205811]
[92.68103790 257.02996826]
[99.83365631 242.91789246]
[99.20552063 227.93104553]
[98.57738495 212.94419861]
[97.94924927 197.95736694]
[97.32112122 182.97052002]
[86.21755219 173.10916138]
[85.36704254 157.91931152]
[95.78583527 146.33973694]
[95.15769958 131.35289001]
[94.52956390 116.36605072]
[89.63687134 130.54566956]
[78.10025787 140.13246155]
[63.26461029 142.34686279]
[49.43132782 136.54682922]
[40.61119080 124.41401672]
[39.36147308 109.46617126]
[46.04452133 96.03721619]
[58.72267151 88.02069855]
[73.72006226 87.74090576]
[86.68669128 95.27720642]
[77.36947632 83.52180481]
[68.05226135 71.76640320]
[58.73504257 60.01100159]
[49.41782761 48.25559998]
[40.10060883 36.50019836]
[25.52369118 27.84284401]
[29.80741882 11.43900299]
[46.75604630 11.01428699]
[51.85601044 27.18298149]
[61.17322922 38.93838501]
[70.49044800 50.69378662]
[79.80766296 62.44918823]
[89.12487793 74.20458984]
[98.44209290 85.95999146]
[113.35992432 84.39206696]
[120.02944946 70.95639038]
[126.69897461 57.52070999]
[133.36849976 44.08503342]
[140.03804016 30.64935875]
[146.70756531 17.21368217]
[153.37709045 3.77800584]
[159.90554810 -9.72677612]
[166.29225159 -23.29918098]
[172.53645325 -36.93772125]
[178.63751221 -50.64090347]
[177.18215942 -66.39503479]
[189.42718506 -74.87493134]
[195.52824402 -88.57810974]
[196.17152405 -97.75779724]
[201.90322876 -102.50229645]
[208.28991699 -116.07469940]
[206.37922668 -132.36215210]
[219.68911743 -141.94229126]
[234.52751160 -134.95986938]
[235.62994385 -118.59781647]
[221.86231995 -109.68801117]
[215.47563171 -96.11560822]
[209.23141479 -82.47706604]
[203.13037109 -68.77388000]
[205.02209473 -53.99989700]
[192.34068298 -44.53985596]
[186.23963928 -30.83667374]
[186.39329529 -23.39764786]
[179.86465454 -16.91249275]
[173.47796631 -3.34008646]
[173.47579956 4.10052586]
[166.81275940 10.44753361]
[160.14323425 23.88320923]
[153.47370911 37.31888580]
[146.80418396 50.75456238]
[140.13465881 64.19023895]
[133.46513367 77.62591553]
[126.79560089 91.06159210]
[109.51640320 115.73791504]
[110.14453888 130.72476196]
[110.77267456 145.71160889]
[122.12387848 156.37873840]
[122.54740143 171.58648682]
[112.30796051 182.34237671]
[112.93609619 197.32922363]
[113.56423187 212.31607056]
[114.19236755 227.30291748]
[114.82050323 242.28974915]
[123.12890625 255.75381470]
[115.93135071 268.79391479]
[116.55948639 283.78076172]
[130.97254944 295.99624634]
[131.93293762 314.54702759]
[119.29772949 327.72689819]
[120.55290222 342.67428589]
[121.80806732 357.62167358]
[123.21969604 372.55511475]
[124.78762054 387.47293091]
[126.35554504 402.39074707]
[127.92347717 417.30859375]
[129.49139404 432.22640991]
[131.05932617 447.14425659]
[141.64399719 452.72821045]
[148.12640381 462.64437866]
[148.97726440 474.34014893]
[144.09936523 484.87176514]
[134.82281494 491.64501953]
[135.76466370 506.61541748]
[136.70652771 521.58581543]
[137.64839172 536.55621338]
[148.73794556 544.27008057]
[153.27362061 556.78723145]
[149.80276489 569.43835449]
[139.81593323 577.64099121]
[140.44407654 592.62780762]
[141.07220459 607.61462402]
[141.70034790 622.60150146]
[155.06817627 630.30242920]
[162.13017273 644.01855469]
[160.63285828 659.37310791]
[151.05401611 671.46643066]
[136.45024109 676.43969727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 144]
[5 143]
[6 142]
[7 141]
[10 137]
[11 136]
[12 135]
[13 134]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[23 123]
[24 122]
[25 121]
[30 118]
[31 117]
[33 115]
[34 114]
[35 113]
[36 112]
[37 111]
[40 108]
[41 107]
[42 106]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[67 105]
[68 104]
[69 103]
[70 102]
[71 101]
[72 100]
[73 99]
[74 97]
[75 96]
[76 94]
[77 93]
[79 91]
[80 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
