%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGCCGGCGGGCAGGCUCGGCGUGUCCCUUCCGUCCGGCCCGCGCCGGCGGCGGGGAGGCGGCGCGCGGCCCGCAGCCCGCCCAUGGAGGCUUUCCCCUGGGCGCCCCGCUCGCCCCGCCGCGGCCGCGCCCCCCCGCCCAUGGCGCUCGUGCCCAGCGCCCGCUACGUGAGCGCCCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[89.09147644 123.09870911]
[78.98603821 134.18383789]
[68.88060760 145.26898193]
[65.30142212 160.68000793]
[51.00918198 164.87298584]
[40.90374756 175.95812988]
[37.32456207 191.36915588]
[23.03232193 195.56214905]
[12.92688751 206.64727783]
[2.82145286 217.73240662]
[-0.57495654 237.58882141]
[-19.21312904 242.69160461]
[-28.94046974 254.10995483]
[-38.66781235 265.52832031]
[-48.39515305 276.94668579]
[-58.12249374 288.36502075]
[-61.18194580 303.88760376]
[-75.32526398 308.55834961]
[-85.05260468 319.97671509]
[-90.72149658 335.95480347]
[-107.64447784 334.93063354]
[-111.34508514 318.38549805]
[-96.47095490 310.24935913]
[-86.74361420 298.83099365]
[-84.37992859 284.12515259]
[-69.54084778 278.63769531]
[-59.81350708 267.21932983]
[-50.08616638 255.80097961]
[-40.35882568 244.38261414]
[-30.63148308 232.96426392]
[-32.35974121 222.86734009]
[-28.14644432 213.28952026]
[-19.16623688 207.50231934]
[-8.26368046 207.62698364]
[1.84175384 196.54183960]
[11.94718838 185.45671082]
[14.80356216 170.83856201]
[29.81861115 165.85269165]
[39.92404556 154.76756287]
[42.78042221 140.14939880]
[57.79547119 135.16354370]
[67.90090179 124.07840729]
[78.00634003 112.99327087]
[76.85342407 89.19342041]
[95.83969116 74.79607391]
[97.84962463 59.93133926]
[99.85955811 45.06661224]
[101.86949158 30.20188332]
[103.87941742 15.33715343]
[105.51416016 0.42649880]
[106.77267456 -14.52061272]
[108.03119659 -29.46772385]
[109.28971100 -44.41483688]
[110.54822540 -59.36194611]
[108.14636993 -68.19709015]
[111.95550537 -74.54888153]
[113.46494293 -89.47274017]
[114.97438049 -104.39659882]
[116.48381805 -119.32045746]
[106.76487732 -131.49337769]
[108.50826263 -146.60679626]
[120.17317200 -155.79730225]
[121.68260956 -170.72116089]
[123.19204712 -185.64501953]
[124.70148468 -200.56887817]
[126.21092224 -215.49273682]
[123.95783234 -224.36698914]
[127.87313080 -230.65388489]
[129.63305664 -245.55029297]
[131.39299011 -260.44668579]
[133.15292358 -275.34307861]
[134.91285706 -290.23947144]
[136.67279053 -305.13586426]
[125.59192657 -318.65936279]
[127.66871643 -335.67904663]
[141.13572693 -345.73696899]
[142.64517212 -360.66082764]
[144.02919006 -375.59683228]
[145.28770447 -390.54394531]
[146.54621887 -405.49105835]
[136.23974609 -424.26370239]
[148.66059875 -440.73278809]
[149.16450500 -455.72433472]
[149.66841125 -470.71585083]
[150.17231750 -485.70739746]
[150.67622375 -500.69894409]
[151.18013000 -515.69049072]
[148.33621216 -524.39337158]
[151.82051086 -530.92901611]
[152.57620239 -545.90997314]
[149.87889099 -554.65942383]
[153.47248840 -561.13562012]
[154.47973633 -576.10174561]
[146.77055359 -590.57586670]
[155.67932129 -604.34417725]
[172.04145813 -603.24298096]
[179.02499390 -588.40509033]
[169.44587708 -575.09448242]
[168.43864441 -560.12835693]
[167.55714417 -545.15429688]
[166.80146790 -530.17333984]
[166.17166138 -515.18658447]
[165.66775513 -500.19503784]
[165.16384888 -485.20349121]
[164.65994263 -470.21194458]
[164.15603638 -455.22042847]
[163.65213013 -440.22888184]
[170.71862793 -434.79351807]
[174.53871155 -426.58612061]
[174.13558960 -417.40432739]
[169.47331238 -409.32458496]
[161.49333191 -404.23254395]
[160.23481750 -389.28543091]
[158.97630310 -374.33831787]
[161.55343628 -367.39474487]
[157.56903076 -359.15139771]
[156.05958557 -344.22753906]
[165.53111267 -335.47354126]
[168.26574707 -322.67025757]
[163.04409790 -310.45251465]
[151.56918335 -303.37594604]
[149.80926514 -288.47955322]
[148.04933167 -273.58316040]
[146.28939819 -258.68673706]
[144.52946472 -243.79035950]
[142.76953125 -228.89395142]
[141.13478088 -213.98330688]
[139.62535095 -199.05944824]
[138.11590576 -184.13558960]
[136.60647583 -169.21171570]
[135.09703064 -154.28785706]
[144.68542480 -142.94773865]
[143.36724854 -127.79132843]
[131.40766907 -117.81101990]
[129.89823914 -102.88716125]
[128.38879395 -87.96330261]
[126.87936401 -73.03944397]
[125.49533844 -58.10343170]
[124.23682404 -43.15631866]
[122.97830200 -28.20920753]
[121.71978760 -13.26209641]
[120.46127319 1.68501461]
[122.46343994 4.61126041]
[123.13602448 8.65871716]
[121.96490479 13.18644333]
[118.74414825 17.34708405]
[116.73421478 32.21181488]
[114.72428894 47.07654190]
[112.71435547 61.94127274]
[110.70442200 76.80599976]
[118.33184052 82.20983887]
[123.50453949 89.99585724]
[125.52987671 99.12147522]
[124.13664246 108.36473083]
[119.51140594 116.48791504]
[127.62101746 129.10671997]
[135.73063660 141.72552490]
[143.84024048 154.34431458]
[162.15277100 162.73858643]
[162.28482056 182.06221008]
[170.81376648 194.40145874]
[179.34271240 206.74070740]
[187.87165833 219.07995605]
[202.08322144 226.03280640]
[202.95507812 240.90188599]
[211.48402405 253.24113464]
[220.01296997 265.58038330]
[233.99285889 275.17199707]
[228.64611816 291.26077271]
[211.70597839 290.57678223]
[207.67372131 274.10931396]
[199.14477539 261.77008057]
[190.61582947 249.43083191]
[177.01431274 243.36056519]
[175.53240967 227.60890198]
[167.00346375 215.26965332]
[158.47451782 202.93040466]
[149.94557190 190.59115601]
[139.74407959 189.66152954]
[131.57392883 183.12431335]
[128.29394531 172.95684814]
[131.22143555 162.45393372]
[123.11182404 149.83512878]
[115.00221252 137.21632385]
[106.89260101 124.59752655]
[100.89566803 125.52927399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[5 39]
[6 38]
[8 36]
[9 35]
[10 34]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[18 24]
[19 23]
[45 150]
[46 149]
[47 148]
[48 147]
[49 146]
[50 142]
[51 141]
[52 140]
[53 139]
[54 138]
[56 137]
[57 136]
[58 135]
[59 134]
[62 131]
[63 130]
[64 129]
[65 128]
[66 127]
[68 126]
[69 125]
[70 124]
[71 123]
[72 122]
[73 121]
[76 117]
[77 116]
[78 114]
[79 113]
[80 112]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[89 101]
[90 100]
[92 99]
[93 98]
[155 185]
[156 184]
[157 183]
[158 182]
[160 178]
[161 177]
[162 176]
[163 175]
[165 173]
[166 172]
[167 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
