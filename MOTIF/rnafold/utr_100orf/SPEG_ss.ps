%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:38:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGAAAGCCCGGGGCACGCGAGGCGAGGAUGCGGGCACGAGGGCACCCCCCAGCCCCGGAGUGCCCCCGAAAAGGGCCAAGGUGGGGGCCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[26.39236450 159.21350098]
[14.71707344 158.02073669]
[5.21408892 151.34220886]
[-8.66631794 157.02853394]
[-22.54672432 162.71485901]
[-24.56116676 179.04119873]
[-34.43618011 192.08079529]
[-49.43338776 198.37269592]
[-65.47107697 196.30593872]
[-78.23500061 186.53079224]
[-91.93185425 192.64605713]
[-105.62870026 198.76130676]
[-119.22879028 205.08883667]
[-132.72882080 211.62709045]
[-136.37814331 226.83290100]
[-148.97846985 236.09388733]
[-164.58032227 235.03729248]
[-175.81697083 224.16200256]
[-177.38282776 208.60301208]
[-168.53852844 195.70680237]
[-153.46009827 191.56254578]
[-139.26708984 198.12705994]
[-125.76705170 191.58879089]
[-121.03588867 185.73716736]
[-111.74394989 185.06445312]
[-98.04710388 178.94920349]
[-84.35025787 172.83395386]
[-83.81430054 159.09306335]
[-77.34560394 146.88285828]
[-66.17108154 138.64236450]
[-52.46395874 136.04582214]
[-38.92124176 139.66278076]
[-28.23305130 148.83445740]
[-14.35264397 143.14813232]
[-0.47223738 137.46180725]
[5.41398621 120.26596832]
[22.21169472 112.53858185]
[39.68397141 119.49012756]
[53.18400955 112.95185852]
[57.91517258 107.10022736]
[67.20710754 106.42752838]
[80.90396118 100.31227112]
[86.18039703 86.81762695]
[99.41111755 80.91048431]
[112.98078918 85.99088287]
[126.67763519 79.87562561]
[140.37448120 73.76036835]
[147.07852173 67.29132843]
[154.59370422 67.67530823]
[168.47412109 61.98898315]
[182.35452271 56.30265808]
[196.23492432 50.61632919]
[210.02522278 44.71482849]
[223.72207642 38.59957123]
[234.59196472 21.76419067]
[253.67376709 24.15114594]
[266.96392822 17.19619179]
[280.25411987 10.24123859]
[293.54428101 3.28628612]
[306.37634277 -4.48145819]
[318.70068359 -13.03194237]
[331.02502441 -21.58242607]
[332.27493286 -37.16997528]
[343.28869629 -48.27094650]
[358.86587524 -49.64380264]
[371.65148926 -40.64031982]
[375.60848999 -25.51166725]
[368.86853027 -11.40113544]
[354.61404419 -4.97128344]
[339.57550049 -9.25809097]
[327.25115967 -0.70760745]
[314.92684937 7.84287643]
[314.36547852 10.76335812]
[312.50857544 13.61307144]
[309.38653564 15.85532951]
[305.23931885 16.97904015]
[300.49923706 16.57645607]
[287.20904541 23.53141022]
[273.91888428 30.48636246]
[260.62872314 37.44131470]
[258.39086914 47.63289261]
[250.68550110 54.99370193]
[239.96513367 56.83883667]
[229.83732605 52.29642105]
[216.14047241 58.41167450]
[211.22961426 64.11333466]
[201.92124939 64.49673462]
[188.04084778 70.18306732]
[174.16044617 75.86939240]
[160.28002930 81.55571747]
[146.48973083 87.45722198]
[132.79289246 93.57247162]
[119.09603882 99.68772888]
[113.81960297 113.18237305]
[100.58888245 119.08951569]
[87.01921082 114.00911713]
[73.32236481 120.12437439]
[59.72227478 126.45189667]
[46.22223663 132.99017334]
[44.53055573 144.97039795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[10 27]
[11 26]
[12 25]
[13 23]
[14 22]
[38 99]
[39 98]
[41 97]
[42 96]
[45 93]
[46 92]
[47 91]
[49 90]
[50 89]
[51 88]
[52 87]
[53 85]
[54 84]
[56 80]
[57 79]
[58 78]
[59 77]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
