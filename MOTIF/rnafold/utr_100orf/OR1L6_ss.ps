%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAUAAAGAACUACAGCAGCAGCACCUCAGGCUUCAUCCUCCUGGGCCUCUCUUCCAACCCUCAGCUGCAGAAACCUCUCUUUGCCAUCUUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[102.89289856 327.72827148]
[104.77403259 312.20425415]
[116.22897339 301.55914307]
[115.29642487 286.58816528]
[114.36388397 271.61718750]
[113.43133545 256.64617920]
[112.49879456 241.67520142]
[111.56624603 226.70422363]
[109.93646240 211.79302979]
[107.61299133 196.97407532]
[105.28952026 182.15512085]
[102.96604919 167.33615112]
[100.64257812 152.51719666]
[85.82569122 150.57231140]
[72.15634918 144.53314209]
[60.74119568 134.88861084]
[52.50439072 122.41955566]
[48.11277390 108.13542938]
[47.92189026 93.19266510]
[51.94718933 78.80101776]
[59.86278915 66.12561798]
[71.02785492 56.19264984]
[84.53846741 49.80627060]
[82.21499634 34.98731613]
[79.89152527 20.16835976]
[77.56805420 5.34940243]
[75.24457550 -9.46955395]
[71.08959198 -13.52104378]
[69.10423279 -18.48156738]
[69.29915619 -23.36248016]
[60.18316269 -35.27460480]
[51.06717300 -47.18672943]
[41.95118332 -59.09885406]
[32.83519363 -71.01097870]
[23.71920204 -82.92310333]
[8.35244465 -81.55696106]
[-5.30286551 -88.73582458]
[-12.88936996 -102.16893768]
[-11.98624229 -117.56983948]
[-2.88166785 -130.02416992]
[11.51911736 -135.55778503]
[26.62087440 -132.40493774]
[37.60469055 -121.57168579]
[40.96566391 -106.51487732]
[35.63132477 -92.03909302]
[44.74731827 -80.12696838]
[53.86330795 -68.21484375]
[62.97929764 -56.30271912]
[72.09529114 -44.39059448]
[81.21128082 -32.47846985]
[80.90779114 -47.47539902]
[85.14170074 -61.86546326]
[93.51867676 -74.30838776]
[105.25848389 -83.64524841]
[119.26768494 -89.00641632]
[134.24148560 -89.89255524]
[148.78524780 -86.22114563]
[161.54435730 -78.33411407]
[171.33044434 -66.96607971]
[177.23205566 -53.17582703]
[178.69950867 -38.24777985]
[175.59614563 -23.57232285]
[168.21098328 -10.51631069]
[157.23188782 -0.29577073]
[143.68142700 6.13736534]
[128.82170105 8.18392086]
[114.03671265 5.65328264]
[100.70352936 -1.21884882]
[90.06353760 -11.79302692]
[92.38700867 3.02592993]
[94.71047974 17.84488678]
[97.03395081 32.66384125]
[99.35742188 47.48279953]
[114.17430878 49.42769241]
[127.84365082 55.46686172]
[139.25880432 65.11138153]
[147.49560547 77.58044434]
[151.88722229 91.86457062]
[152.07810974 106.80733490]
[148.05281067 121.19898224]
[140.13720703 133.87437439]
[128.97215271 143.80735779]
[115.46153259 150.19372559]
[117.78500366 165.01268005]
[120.10847473 179.83163452]
[122.43194580 194.65060425]
[124.75542450 209.46955872]
[128.27803040 213.79835510]
[129.53112793 218.57487488]
[128.74787903 222.81057739]
[126.53723145 225.77168274]
[127.46977234 240.74266052]
[128.40231323 255.71365356]
[129.33486938 270.68463135]
[130.26741028 285.65560913]
[131.19995117 300.62658691]
[143.88739014 309.76788330]
[147.68049622 324.93844604]
[140.78828430 338.97525024]
[126.46504974 345.25048828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 96]
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
