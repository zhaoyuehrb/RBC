%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUUUGCCUAGAAGCCAAGGCCAUUGGUCCAACAAAGACAUCUUGAGGUUACUGGAAUGCAUGGAGAAUAAUCGCCCAUCUGAUGACAACAGCACGU\
) } def
/len { sequence length } bind def

/coor [
[74.71083832 131.09948730]
[63.23684692 140.76115417]
[51.76285934 150.42280579]
[40.28887177 160.08445740]
[28.81488419 169.74612427]
[17.34089661 179.40777588]
[5.86690807 189.06942749]
[-5.60707998 198.73107910]
[-17.08106804 208.39274597]
[-22.65359306 223.20008850]
[-37.37277222 225.47933960]
[-48.84675980 235.14100647]
[-57.06811905 249.96820068]
[-73.59175873 246.17269897]
[-74.51879883 229.24412537]
[-58.50841904 223.66700745]
[-47.03442764 214.00535583]
[-42.28260040 199.88908386]
[-26.74272346 196.91874695]
[-15.26873589 187.25709534]
[-3.79474831 177.59544373]
[7.67923975 167.93379211]
[19.15322685 158.27212524]
[30.62721634 148.61047363]
[42.10120392 138.94882202]
[53.57519150 129.28715515]
[65.04917908 119.62550354]
[60.57028198 107.21232605]
[60.36505127 94.01742554]
[64.45573425 81.47095490]
[52.68682098 72.17080688]
[40.91790771 62.87066650]
[25.64196205 66.21424103]
[11.81476879 58.91062927]
[5.96510601 44.40837479]
[10.85500526 29.55499458]
[24.17560577 21.36380386]
[39.63732910 23.70243073]
[49.93961716 35.46664810]
[50.21805191 51.10175323]
[61.98696518 60.40189743]
[73.75588226 69.70204163]
[89.25529480 61.38301468]
[106.82402802 60.50122833]
[123.07852173 67.22650146]
[134.88833618 80.26362610]
[149.09541321 75.45124054]
[163.30247498 70.63884735]
[170.35183716 56.74840927]
[184.82838440 52.07035065]
[198.02734375 58.87643433]
[212.23442078 54.06404877]
[226.44149780 49.25166321]
[240.64857483 44.43927383]
[251.23692322 32.68353271]
[265.77374268 35.92858887]
[279.98080444 31.11620140]
[294.18786621 26.30381393]
[308.39495850 21.49142838]
[315.67260742 15.67520523]
[323.11932373 16.75777626]
[337.46917725 12.38955593]
[341.26419067 8.29745865]
[345.81915283 6.39022541]
[350.12271118 6.57487392]
[353.36328125 8.35077667]
[368.05773926 5.33867025]
[380.02310181 -5.01219988]
[394.04483032 0.01177180]
[408.73928833 -3.00033426]
[420.63977051 -14.28356266]
[436.28244019 -9.36031342]
[439.57550049 6.70479679]
[427.13131714 17.38535881]
[411.75140381 11.69412804]
[397.05694580 14.70623398]
[386.14260864 24.84165764]
[371.06985474 20.03313255]
[356.37539673 23.04523849]
[341.83740234 26.73942184]
[327.48751831 31.10764313]
[313.20733643 35.69850159]
[299.00027466 40.51088715]
[284.79318237 45.32327652]
[270.58612061 50.13566208]
[261.01394653 61.54719162]
[245.46095276 58.64634705]
[231.25389099 63.45873642]
[217.04681396 68.27112579]
[202.83973694 73.08351135]
[196.49417114 86.50994873]
[182.15472412 91.59278107]
[168.11486816 84.84592438]
[153.90779114 89.65830994]
[139.70071411 94.47069550]
[139.25828552 108.09365845]
[134.27651978 120.78076935]
[125.33145905 131.06504822]
[113.45738220 137.75737000]
[100.02727509 140.08390808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[11 17]
[12 16]
[30 42]
[31 41]
[32 40]
[46 95]
[47 94]
[48 93]
[51 90]
[52 89]
[53 88]
[54 87]
[56 85]
[57 84]
[58 83]
[59 82]
[61 81]
[62 80]
[66 79]
[67 78]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
