%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:21:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCUUGGGUCCAUUCCCUAUCUAUAUUCUCCCACCAUGCUGGGUCUCAAUGGCACCCCCUUCCAGCCAGCAACACUCCAGCUGACAGGCAUUCCUGGGAUACAAACAGGCCUCACCUGGGUUGCCCUGAUUUUCU\
) } def
/len { sequence length } bind def

/coor [
[103.96942902 133.13775635]
[101.52930450 118.33756256]
[96.57511902 132.49581909]
[91.62093353 146.65406799]
[86.66674805 160.81231689]
[90.24552917 176.81619263]
[77.99362946 187.71679688]
[62.51474762 182.30049133]
[59.73223495 166.13912964]
[72.50849915 155.85812378]
[77.46268463 141.69987488]
[82.41687012 127.54162598]
[87.37105560 113.38337708]
[76.23551941 123.43325043]
[69.47914886 136.82545471]
[59.80705261 148.29064941]
[47.74431992 157.20639038]
[33.94580841 163.08866882]
[19.16061974 165.61811829]
[4.19141293 164.65745544]
[-10.14915848 160.25881958]
[-23.08256912 152.66101074]
[-33.90669250 142.27647400]
[-42.03389740 129.66899109]
[-47.02297974 115.52301025]
[-48.60308838 100.60646820]
[-46.68844223 85.72916412]
[-41.38298416 71.69876099]
[-32.97473907 59.27695084]
[-21.92017174 49.13808823]
[-8.81941795 41.83259201]
[5.61630392 37.75706482]
[20.60330582 37.13276291]
[35.32797241 39.99357605]
[48.99092102 46.18419266]
[60.85042191 55.36854172]
[70.26264191 67.04801941]
[76.71627045 80.58759308]
[87.62349701 90.88479614]
[82.98824310 76.61894226]
[77.31492615 69.35239410]
[78.41292572 61.98072433]
[74.09893799 47.61445999]
[69.78495026 33.24819946]
[65.47095490 18.88193703]
[61.15696716 4.51567507]
[56.68206406 -9.80128098]
[52.04681015 -24.06712914]
[36.97204208 -26.19146538]
[24.36589432 -34.61595535]
[16.69895554 -47.62511444]
[15.44577599 -62.61145782]
[20.80154037 -76.59806824]
[31.65394020 -86.82992554]
[27.01868439 -101.09577179]
[22.38343048 -115.36161804]
[17.74817467 -129.62747192]
[2.65052938 -132.14135742]
[-9.54249954 -141.39277649]
[-16.02904320 -155.25579834]
[-15.31854248 -170.54479980]
[-7.57426262 -183.74650574]
[5.42421532 -191.82722473]
[20.68993759 -192.93009949]
[34.71495056 -186.80166626]
[44.27641296 -174.85023499]
[47.17716980 -159.82211304]
[42.75064468 -145.17068481]
[32.01402283 -134.26272583]
[36.64927673 -119.99687195]
[41.28453445 -105.73102570]
[45.91978836 -91.46517944]
[60.71369934 -89.56631470]
[73.26772308 -81.39894867]
[81.06262970 -68.53813934]
[82.50654602 -53.50699615]
[77.25974274 -39.28173447]
[66.31265259 -28.70238304]
[70.94791412 -14.43653584]
[76.04852295 -9.00230217]
[75.52323151 0.20168513]
[79.83721924 14.56794739]
[84.15120697 28.93420982]
[88.46520233 43.30047226]
[92.77919006 57.66673279]
[97.25409698 71.98368835]
[101.88935089 86.24953461]
[113.12072754 85.02891541]
[125.00781250 93.13017273]
[139.55316162 96.79528046]
[154.09849548 100.46038818]
[168.64384460 104.12549591]
[183.22938538 107.62717438]
[197.85330200 110.96498871]
[209.22232056 104.76006317]
[221.37379456 107.89806366]
[227.88511658 118.15385437]
[242.43046570 121.81896210]
[256.97579956 125.48406982]
[271.52114868 129.14916992]
[286.06649780 132.81428528]
[300.61181641 136.47938538]
[309.09902954 123.91979218]
[321.37182617 115.02293396]
[335.94824219 110.86315918]
[351.06811523 111.94277191]
[364.90560913 118.13140869]
[375.78982544 128.68176270]
[382.40640259 142.31982422]
[383.95639038 157.39872742]
[380.25259399 172.09762573]
[371.74224854 184.64155579]
[359.45306396 193.51577759]
[344.86901855 197.64868164]
[329.75115967 196.54121399]
[315.92507935 190.32708740]
[305.06033325 179.75669861]
[298.46890259 166.10646057]
[296.94671631 151.02473450]
[282.40136719 147.35961914]
[267.85604858 143.69451904]
[253.31069946 140.02940369]
[238.76535034 136.36430359]
[224.22001648 132.69920349]
[207.66770935 138.42221069]
[194.51548767 125.58890533]
[179.89157104 122.25109100]
[172.61045837 123.84249115]
[164.97872925 118.67083740]
[150.43339539 115.00572968]
[135.88804626 111.34062195]
[121.34270477 107.67551422]
[132.35029602 117.86535645]
[145.42152405 125.22354889]
[151.91940308 138.74307251]
[149.49971008 153.54663086]
[139.03541565 164.29365540]
[124.30162048 167.10704041]
[110.61370087 160.97183228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[39 87]
[40 86]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 79]
[48 78]
[54 72]
[55 71]
[56 70]
[57 69]
[89 132]
[90 131]
[91 130]
[92 129]
[93 127]
[94 126]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
