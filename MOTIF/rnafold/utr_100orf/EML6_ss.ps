%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGGCCCCGGCGCGCGGGGGGGCGGGGGGCGCGCGGGGUCGGCUUAUCAUGGCGGAUCGGACGGCGCCCCGCUGCCAGCUCCGGCUGGAGUGGGUGUACGGGUACCGGGGUCACCAGUGCCGCAACAACCUGUACUACACGGCAGGCA\
) } def
/len { sequence length } bind def

/coor [
[266.14578247 300.71234131]
[256.63745117 289.11099243]
[244.59616089 287.58953857]
[236.58287048 277.94555664]
[237.33831787 265.02722168]
[228.07336426 253.23059082]
[218.80842590 241.43394470]
[209.54347229 229.63731384]
[200.27851868 217.84066772]
[191.01356506 206.04403687]
[181.74862671 194.24739075]
[172.48367310 182.45074463]
[158.53756714 177.22053528]
[156.09864807 161.58843994]
[146.83369446 149.79179382]
[132.88758850 144.56156921]
[130.44866943 128.92948914]
[121.18371582 117.13284302]
[91.49011230 121.65547180]
[80.75547028 98.67407990]
[67.36918640 91.90596008]
[51.56252289 92.58413696]
[43.69559479 79.93657684]
[30.30930901 73.16846466]
[16.92302513 66.40034485]
[3.53673935 59.63223267]
[-9.84954548 52.86412048]
[-23.23583031 46.09600449]
[-36.62211609 39.32788849]
[-52.42877960 40.00606155]
[-60.29571152 27.35850334]
[-73.68199158 20.59038925]
[-82.81736755 19.49641609]
[-87.27416992 13.53969097]
[-100.51675415 6.49455595]
[-114.42110443 13.12593651]
[-129.38914490 10.33111763]
[-139.71922302 -0.61208898]
[-141.60212708 -15.36311054]
[-154.84471130 -22.40824509]
[-168.08731079 -29.45338058]
[-181.32989502 -36.49851608]
[-197.14724731 -36.14933014]
[-204.74935913 -48.95780945]
[-217.99194336 -56.00294495]
[-231.23452759 -63.04808044]
[-246.27418518 -58.19173050]
[-260.30453491 -65.46669006]
[-265.00158691 -80.55685425]
[-257.57870483 -94.50949860]
[-242.43972778 -99.04676056]
[-228.56634521 -91.47676849]
[-224.18939209 -76.29066467]
[-210.94680786 -69.24552917]
[-197.70422363 -62.20039368]
[-182.83406067 -63.05349731]
[-174.28475952 -49.74110031]
[-161.04217529 -42.69596481]
[-147.79957581 -35.65082932]
[-134.55699158 -28.60569572]
[-121.27184296 -35.28721237]
[-106.42414856 -32.83570099]
[-95.74212646 -21.98453140]
[-93.47161865 -6.74802971]
[-80.22903442 0.29710537]
[-66.91387939 7.20410395]
[-53.52759552 13.97221851]
[-38.67840576 12.80994701]
[-29.85400009 25.94160461]
[-16.46771622 32.70972061]
[-3.08143067 39.47783279]
[10.30485439 46.24594879]
[23.69113922 53.01406479]
[37.07742310 59.78217697]
[50.46370697 66.55029297]
[65.31289673 65.38802338]
[74.13730621 78.51967621]
[87.52359009 85.28779602]
[99.75948334 76.73371887]
[117.18801880 78.86103058]
[123.81652069 65.40505981]
[130.44502258 51.94909668]
[137.07351685 38.49312973]
[143.70201111 25.03716469]
[142.08303833 8.71812820]
[155.56221008 -0.62233120]
[170.27330017 6.62445068]
[171.08280945 23.00360680]
[157.15797424 31.66566467]
[150.52947998 45.12162781]
[143.90098572 58.57759476]
[137.27249146 72.03356171]
[130.64398193 85.48952484]
[140.66841125 74.33108521]
[155.42572021 71.64369202]
[168.74020386 78.55198669]
[175.03996277 92.16495514]
[171.68867493 106.78578949]
[160.08877563 116.29591370]
[145.09465027 116.71548462]
[132.98036194 107.86789703]
[142.24530029 119.66453552]
[156.85411072 125.73853302]
[158.63034058 140.52685547]
[167.89527893 152.32348633]
[182.50408936 158.39749146]
[184.28031921 173.18580627]
[193.54525757 184.98243713]
[202.81021118 196.77908325]
[212.07516479 208.57572937]
[221.34010315 220.37236023]
[230.60505676 232.16900635]
[239.87001038 243.96563721]
[249.13496399 255.76228333]
[266.36187744 262.18203735]
[268.23876953 279.60263062]
[277.74713135 291.20397949]
[285.09164429 288.32241821]
[292.86468506 287.03930664]
[300.72302246 287.40655518]
[308.32064819 289.40325928]
[315.32394409 292.93685913]
[321.42651367 297.84744263]
[326.36239624 303.91497803]
[329.91781616 310.86907959]
[331.94027710 318.40124512]
[332.34530640 326.17837524]
[331.11972046 333.85751343]
[328.32220459 341.10107422]
[324.08041382 347.59158325]
[318.58523560 353.04568481]
[325.49224854 366.36083984]
[332.39923096 379.67599487]
[339.30624390 392.99114990]
[346.21322632 406.30630493]
[361.57604980 408.48880005]
[372.69854736 419.30865479]
[375.30389404 434.60546875]
[368.39028931 448.49725342]
[354.61614990 455.64233398]
[339.27789307 453.29330444]
[328.27343750 442.35342407]
[325.83416748 427.02926636]
[332.89807129 413.21328735]
[325.99108887 399.89813232]
[319.08407593 386.58297729]
[312.17709351 373.26782227]
[305.27008057 359.95266724]
[282.31665039 359.15902710]
[264.17349243 344.88592529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[2 116]
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[10 109]
[11 108]
[12 107]
[14 105]
[15 104]
[17 102]
[18 101]
[20 78]
[21 77]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[31 67]
[32 66]
[34 65]
[35 64]
[39 60]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
[46 53]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[131 148]
[132 147]
[133 146]
[134 145]
[135 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
