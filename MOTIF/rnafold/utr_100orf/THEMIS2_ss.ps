%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCUGAGCCCAGAGAGCCGCGGGGACCAUGGAGCCGGUGCCGCUGCAGGACUUCGUGCGCGCCUUGGACCCCGCCUCCCUCCCGCGCGUGCUGCGGGUCUGCUCGGGGGUCUACUUCGAGGGCUCCA\
) } def
/len { sequence length } bind def

/coor [
[96.13248444 311.24865723]
[80.98180389 314.15731812]
[66.67221069 308.39199829]
[57.76985168 295.79232788]
[57.11542892 280.37884521]
[64.91777039 267.06994629]
[78.68717957 260.11242676]
[80.13488770 245.18244934]
[81.58259583 230.25247192]
[83.03030396 215.32250977]
[84.47801208 200.39253235]
[85.92572021 185.46255493]
[77.78662872 169.96406555]
[88.48342896 155.03323364]
[89.56994629 140.07263184]
[90.65647125 125.11203766]
[77.41187286 114.41154480]
[73.28916168 97.89116669]
[59.26391983 92.57209015]
[45.17543030 87.42287445]
[31.02575111 82.44425201]
[16.87607384 77.46563721]
[2.72639751 72.48701477]
[-11.42327976 67.50839996]
[-25.57295609 62.52978134]
[-39.72263336 57.55116653]
[-55.30857086 60.26946640]
[-64.74628448 48.74649811]
[-78.89596558 43.76787949]
[-88.13380432 43.86199570]
[-93.32490540 38.49422455]
[-107.35015106 33.17515182]
[-122.99722290 35.51604462]
[-132.15374756 23.76839066]
[-146.17898560 18.44931602]
[-160.20422363 13.13024330]
[-173.76126099 20.92389870]
[-189.14704895 18.12901878]
[-199.09690857 6.06526089]
[-198.91281128 -9.57123852]
[-188.68170166 -21.39740181]
[-173.23435974 -23.82927704]
[-159.86457825 -15.71860600]
[-154.88516235 -0.89500010]
[-140.85990906 4.42407322]
[-126.83467102 9.74314690]
[-112.19078064 7.02179766]
[-102.03107452 19.14990807]
[-88.00583649 24.46898079]
[-73.91734314 29.61820221]
[-59.76766968 34.59682083]
[-45.19380951 31.52241516]
[-34.74401474 43.40148926]
[-20.59433937 48.38010406]
[-6.44466209 53.35872269]
[7.70501518 58.33734131]
[21.85469246 63.31595993]
[36.00436783 68.29457855]
[50.15404510 73.27319336]
[57.58305359 72.51796722]
[64.58299255 78.54685211]
[78.60823822 83.86592102]
[86.10737610 77.08905792]
[95.58351135 73.57254028]
[105.68813324 73.81677246]
[114.98329926 77.78701782]
[122.14627838 84.91827393]
[136.41212463 80.28302002]
[150.67797852 75.64775848]
[164.94381714 71.01250458]
[179.20967102 66.37725067]
[193.47550964 61.74199677]
[207.74136353 57.10674286]
[222.00721741 52.47148895]
[222.05273438 37.35674667]
[226.76147461 23.01553535]
[235.66030884 10.84840775]
[247.86761475 2.03949809]
[262.18051147 -2.55871296]
[277.19345093 -2.50788951]
[291.43621826 2.17440796]
[303.51788330 11.01767254]
[312.26269531 23.14570045]
[326.52853394 18.51044655]
[340.79440308 13.87519169]
[355.06024170 9.23993683]
[369.32608032 4.60468149]
[383.59194946 -0.03057336]
[392.12716675 -13.61473083]
[408.08480835 -15.26794624]
[419.22354126 -3.72201395]
[416.99865723 12.16601467]
[403.11691284 20.20820427]
[388.22720337 14.23527431]
[373.96133423 18.87052917]
[359.69549561 23.50578499]
[345.42965698 28.14103889]
[331.16378784 32.77629471]
[316.89794922 37.41154861]
[316.95193481 52.36340714]
[312.37557983 66.61918640]
[303.60513306 78.77893066]
[291.48928833 87.64443207]
[277.20715332 92.33731079]
[262.15347290 92.38602448]
[247.80252075 87.77321625]
[235.56352234 78.93865967]
[226.64247131 66.73733521]
[212.37661743 71.37258911]
[198.11076355 76.00784302]
[183.84492493 80.64309692]
[169.57907104 85.27835846]
[155.31323242 89.91361237]
[141.04737854 94.54886627]
[126.78153229 99.18412018]
[121.09175873 116.52433777]
[105.61706543 126.19856262]
[104.53054810 141.15916443]
[103.44402313 156.11975098]
[111.30325317 166.43028259]
[110.02859497 178.92759705]
[100.85569763 186.91026306]
[99.40798950 201.84024048]
[97.96028137 216.77021790]
[96.51257324 231.70018005]
[95.06485748 246.63015747]
[93.61714935 261.56015015]
[105.79331207 271.03350830]
[110.89330292 285.59350586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[12 122]
[14 119]
[15 118]
[16 117]
[18 62]
[19 61]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[28 51]
[29 50]
[31 49]
[32 48]
[34 46]
[35 45]
[36 44]
[67 115]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[73 109]
[74 108]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
