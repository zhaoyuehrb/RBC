%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCCCCCCUGGCUCGGCCGCGGGAGAGAGCGCCGCCGGCGGCGGCGGCGGCGGUGGCGGCCCCGGGGUCUCGGAGGAGCUCACGGCGGCGGCGGCAG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 179.03512573]
[92.50000000 163.19599915]
[92.50000000 148.19599915]
[92.50000000 133.19599915]
[92.50000000 118.19599152]
[86.02433777 114.41236877]
[73.07301331 106.84513092]
[66.59735107 103.06150818]
[53.52990341 110.42642212]
[40.46246338 117.79132843]
[32.23923111 131.30758667]
[17.35273552 130.81614685]
[4.28529263 138.18106079]
[-8.78215122 145.54597473]
[-21.84959412 152.91088867]
[-32.67934418 165.95515442]
[-48.21180725 159.15963745]
[-45.98168564 142.35301208]
[-29.21450615 139.84344482]
[-16.14706230 132.47853088]
[-3.07961869 125.11361694]
[9.98782539 117.74870300]
[17.27638435 104.75923920]
[33.09754944 104.72388458]
[46.16499329 97.35897827]
[59.23243713 89.99406433]
[44.74011612 93.86351013]
[31.39428139 87.01597595]
[26.08541870 72.98686218]
[31.55450439 59.01943207]
[44.97784042 52.32509995]
[59.42492294 56.36016464]
[67.43709564 69.04331970]
[62.84623718 54.76312637]
[58.25537872 40.48292923]
[53.66452026 26.20273209]
[49.07366180 11.92253590]
[44.48280334 -2.35766077]
[39.89194489 -16.63785744]
[35.30108643 -30.91805458]
[23.71143150 -41.68794250]
[27.18216896 -56.17252731]
[22.59131050 -70.45272827]
[10.08187008 -81.05677795]
[13.27636147 -97.14177704]
[28.88856506 -102.16085815]
[40.85798264 -90.95081329]
[36.87150574 -75.04358673]
[41.46236420 -60.76338577]
[52.72365189 -51.01491547]
[49.58128357 -35.50891113]
[54.17214203 -21.22871590]
[58.76300049 -6.94851971]
[63.35385895 7.33167696]
[67.94471741 21.61187363]
[72.53557587 35.89207077]
[77.12643433 50.17226791]
[81.71729279 64.45246124]
[119.67613220 93.05503082]
[134.63081360 94.22028351]
[148.99034119 87.57842255]
[161.07807922 96.28104401]
[176.03276062 97.44629669]
[190.98742676 98.61155701]
[205.95840454 99.54409790]
[220.94209290 100.24370575]
[235.92576599 100.94331360]
[250.91850281 101.40981293]
[265.91668701 101.64308929]
[280.91488647 101.87636566]
[289.72210693 98.83905792]
[296.37396240 102.35737610]
[311.35763550 103.05697632]
[326.34130859 103.75658417]
[340.65402222 95.75172424]
[354.60241699 104.37579346]
[353.83755493 120.75709534]
[339.14627075 128.04394531]
[325.64169312 118.74025726]
[310.65802002 118.04065704]
[295.67434692 117.34104919]
[280.68161011 116.87454987]
[265.68341064 116.64127350]
[250.68522644 116.40799713]
[243.82752991 119.50596619]
[235.22615051 115.92698669]
[220.24247742 115.22738647]
[205.25880432 114.52777863]
[198.30807495 117.41097260]
[189.82217407 113.56623077]
[174.86749268 112.40097046]
[159.91282654 111.23571014]
[146.62295532 117.96092987]
[133.46554565 109.17495728]
[118.51087952 108.00969696]
[107.50000000 118.19599152]
[107.50000000 133.19599915]
[107.50000000 148.19599915]
[107.50000000 163.19599915]
[113.54634094 179.03512573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[14 20]
[15 19]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[42 49]
[43 48]
[59 95]
[60 94]
[62 92]
[63 91]
[64 90]
[65 88]
[66 87]
[67 86]
[68 84]
[69 83]
[70 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
