%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUCCGCAUGCGCGGGAUCCCGGAUGUGGAUCAAGUUGGUGGGAAGCGUGCGGUGCCGCAGCAAUGGCGGCGCUCACAAUUGCCACGGGUACUGGCAAUUGGUUUUCGGCUUUGGCGCUCGGGGUGACUCUUCUCAAAUGCCUUCUCAUCCCCACAUACCAUU\
) } def
/len { sequence length } bind def

/coor [
[-1.52455521 579.01190186]
[-13.30265903 583.83880615]
[-25.98466492 583.83740234]
[-32.05111694 597.55590820]
[-32.66738510 606.71478271]
[-38.36436844 611.47497559]
[-44.68934250 625.07623291]
[-51.01432037 638.67749023]
[-57.33929825 652.27880859]
[-55.35465240 668.55743408]
[-68.62089539 678.19787598]
[-83.49084473 671.28295898]
[-84.66757965 654.92608643]
[-70.94057465 645.95379639]
[-64.61559296 632.35253906]
[-58.29061890 618.75128174]
[-51.96564102 605.14996338]
[-45.76964951 591.48950195]
[-39.70319748 577.77093506]
[-50.34704208 564.28399658]
[-52.73255157 547.17974854]
[-46.11747742 531.13104248]
[-32.23096466 520.56823730]
[-14.82257462 518.45599365]
[-9.27959728 504.51773071]
[-3.86875820 490.52761841]
[1.40945697 476.48696899]
[6.68767214 462.44628906]
[11.96588707 448.40560913]
[17.24410248 434.36495972]
[22.52231789 420.32427979]
[11.97173691 408.11187744]
[8.98992252 392.15567017]
[14.48116207 376.78067017]
[27.03996277 366.20288086]
[43.30936432 363.37310791]
[48.32092667 349.23504639]
[41.70099640 335.94174194]
[46.58203125 321.53237915]
[60.57016754 314.67892456]
[65.58172607 300.54086304]
[70.59329224 286.40283203]
[75.06626129 272.08526611]
[78.99422455 257.60870361]
[82.92219543 243.13212585]
[86.85015869 228.65556335]
[90.77812958 214.17898560]
[94.70609283 199.70242310]
[90.57160950 185.39314270]
[101.65269470 174.10066223]
[105.58065796 159.62408447]
[109.37146759 145.11099243]
[113.02477264 130.56268311]
[56.18147278 98.59168243]
[46.73431778 86.94045258]
[37.28715897 75.28922272]
[27.84000206 63.63798523]
[18.39284325 51.98675537]
[8.94568539 40.33552170]
[-0.50147229 28.68428993]
[-9.94863033 17.03305817]
[-25.58599854 16.95093155]
[-37.47862625 6.79714203]
[-40.01117325 -8.63400173]
[-31.98785782 -22.05638504]
[-17.19703484 -27.13237000]
[-2.62248445 -21.46523094]
[4.85413885 -7.73081636]
[1.70260191 7.58590078]
[11.14975929 19.23713303]
[20.59691811 30.88836479]
[30.04407501 42.53959656]
[39.49123383 54.19083023]
[48.93839264 65.84206390]
[58.38554764 77.49329376]
[67.83271027 89.14452362]
[75.19879150 87.73358917]
[89.93096924 84.91171265]
[97.29705811 83.50077820]
[101.77002716 69.18321991]
[106.24299622 54.86565781]
[110.71596527 40.54809570]
[115.18893433 26.23053551]
[119.66190338 11.91297436]
[124.13487244 -2.40458632]
[128.60783386 -16.72214699]
[133.08081055 -31.03970718]
[124.49233246 -44.10768509]
[126.36444092 -59.63280106]
[137.81318665 -70.28456879]
[153.43283081 -71.03355408]
[165.84823608 -61.52610397]
[169.19723511 -46.25134659]
[161.89854431 -32.42155838]
[147.39837646 -26.56674004]
[142.92539978 -12.24917889]
[138.45243835 2.06838250]
[133.97946167 16.38594246]
[129.50650024 30.70350456]
[125.03352356 45.02106476]
[120.56056213 59.33862686]
[116.08759308 73.65618896]
[111.61462402 87.97374725]
[116.96786499 93.22663116]
[131.41935730 89.20738983]
[127.67436218 103.73239136]
[133.02760315 108.98527527]
[147.25794983 104.24215698]
[161.48831177 99.49903870]
[175.71865845 94.75592804]
[189.90348816 89.87837219]
[204.04153442 84.86680603]
[210.61384583 70.49391174]
[225.45329285 65.05643463]
[239.75590515 71.78034210]
[245.03617859 86.67645264]
[238.16143799 100.90717316]
[223.21032715 106.02967072]
[209.05308533 99.00485229]
[194.91505432 104.01641083]
[189.63789368 109.23814392]
[180.46177673 108.98627472]
[166.23141479 113.72939301]
[152.00106812 118.47250366]
[137.77072144 123.21562195]
[127.57308197 134.21600342]
[123.91977692 148.76431274]
[124.86489868 157.89511108]
[120.05722809 163.55206299]
[116.12926483 178.02862549]
[119.98278809 193.37336731]
[109.18266296 203.63038635]
[105.25469971 218.10694885]
[101.32672882 232.58352661]
[97.39876556 247.06008911]
[93.47079468 261.53665161]
[89.54283142 276.01324463]
[90.83917999 280.26260376]
[90.70217896 284.29080200]
[89.38331604 287.66735840]
[87.24979401 290.09057617]
[84.73133087 291.41439819]
[79.71977234 305.55242920]
[74.70820618 319.69049072]
[81.25709534 333.82376099]
[75.97325897 348.09036255]
[62.45896912 354.24661255]
[57.44740677 368.38467407]
[67.08203888 378.55853271]
[71.36364746 391.83062744]
[69.50852966 405.58551025]
[61.93647766 417.13830566]
[50.17749786 424.25894165]
[36.56298828 425.60247803]
[31.28477287 439.64315796]
[26.00655937 453.68383789]
[20.72834396 467.72451782]
[15.45012760 481.76516724]
[10.17191315 495.80584717]
[10.07635880 504.98492432]
[4.65867424 510.06069946]
[-0.88430327 523.99896240]
[8.07846642 533.36419678]
[12.80190754 545.38568115]
[12.61308384 558.25360107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[6 17]
[7 16]
[8 15]
[9 14]
[24 162]
[25 161]
[26 159]
[27 158]
[28 157]
[29 156]
[30 155]
[31 154]
[36 148]
[37 147]
[40 144]
[41 143]
[42 142]
[43 137]
[44 136]
[45 135]
[46 134]
[47 133]
[48 132]
[50 130]
[51 129]
[52 127]
[53 126]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[107 125]
[108 124]
[109 123]
[110 122]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
