%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUGUGCGUGUCGAAGGUCACGGCGCGCUCACAAUGGAGCUCUCGGAGUCUGUGCAGAAAGGCUUCCAGAUGCUGGCGGAUCCCCGCUCCUUCGACUCCAACGCCUUCACGCUUCUCCUCCGGGCGGCAUUCC\
) } def
/len { sequence length } bind def

/coor [
[220.10542297 326.95541382]
[223.86466980 314.98208618]
[231.15927124 304.74008179]
[222.68223572 292.36511230]
[214.20518494 279.99014282]
[205.72813416 267.61517334]
[197.25108337 255.24021912]
[182.41119385 256.52212524]
[168.83181763 250.16160583]
[160.20234680 237.77618408]
[158.92251587 222.63488770]
[165.43582153 208.79566956]
[156.95878601 196.42070007]
[148.48173523 184.04574585]
[140.00468445 171.67077637]
[131.52764893 159.29582214]
[123.05059814 146.92085266]
[114.57354736 134.54589844]
[106.09650421 122.17092896]
[90.37957764 122.62025452]
[77.01264191 112.50437927]
[72.65537262 95.24216461]
[80.47483826 78.09657288]
[69.38970184 67.99114227]
[58.30456924 57.88570786]
[47.21943665 47.78027344]
[36.13430023 37.67483902]
[28.35242271 46.06408310]
[14.56551838 49.25054169]
[-0.39847749 48.21187592]
[-15.36247349 47.17321014]
[-30.32646942 46.13454437]
[-42.08276749 56.69697952]
[-57.85980988 55.76937485]
[-68.29735565 43.90206146]
[-67.20300293 28.13570786]
[-55.22599792 17.82420921]
[-39.47209549 19.08519936]
[-29.28780365 31.17054939]
[-14.32380772 32.20921707]
[0.64018828 33.24788284]
[15.60418415 34.28654861]
[23.79313278 21.71908569]
[16.79869652 8.44965267]
[9.80425835 -4.81978035]
[-3.47534323 -13.41993999]
[-2.56537771 -28.28672218]
[-9.55981541 -41.55615616]
[-16.55425262 -54.82558823]
[-23.54868889 -68.09502411]
[-30.54312706 -81.36445618]
[-37.53756332 -94.63388824]
[-44.53200150 -107.90332031]
[-59.90884781 -109.98471069]
[-71.10227966 -120.73118591]
[-73.80818939 -136.01051331]
[-66.98610687 -149.94746399]
[-53.25925064 -157.18301392]
[-37.90588760 -154.93493652]
[-26.82969475 -144.06765747]
[-24.28969383 -128.75988770]
[-31.26256943 -114.89775848]
[-24.26813126 -101.62832642]
[-17.27369499 -88.35889435]
[-10.27925682 -75.08946228]
[-3.28481960 -61.82002640]
[3.70961761 -48.55059433]
[10.70405483 -35.28116226]
[23.48336792 -27.63011932]
[23.07369232 -11.81421757]
[30.06812859 1.45521498]
[37.06256485 14.72464752]
[46.23973465 26.58970451]
[57.32487106 36.69513702]
[68.41000366 46.80057144]
[79.49514008 56.90600967]
[90.58026886 67.01144409]
[105.55526733 66.14567566]
[115.40196228 54.83008575]
[125.24865723 43.51449585]
[135.09535217 32.19890594]
[137.69992065 16.00791168]
[153.11828613 10.42167377]
[165.48934937 21.18683434]
[162.08683777 37.22911835]
[146.41093445 42.04560089]
[136.56423950 53.36119080]
[126.71755219 64.67678070]
[116.87085724 75.99237061]
[125.83340454 95.82708740]
[118.47146606 113.69388580]
[126.94850922 126.06884766]
[135.42555237 138.44380188]
[143.90260315 150.81877136]
[152.37965393 163.19372559]
[160.85668945 175.56869507]
[169.33374023 187.94366455]
[177.81079102 200.31861877]
[193.06835938 199.24444580]
[206.72486877 205.90751648]
[215.15660095 218.42839050]
[216.18217468 233.38847351]
[209.62605286 246.76318359]
[218.10310364 259.13815308]
[226.58013916 271.51309204]
[235.05718994 283.88806152]
[243.53424072 296.26303101]
[261.09249878 293.03335571]
[278.26223755 297.72952271]
[291.65344238 309.37719727]
[298.64254761 325.63409424]
[297.88650513 343.26107788]
[289.58056641 358.76742554]
[298.89413452 370.52569580]
[308.20773315 382.28396606]
[322.84152222 388.29757690]
[324.67880249 403.07843018]
[333.99240112 414.83670044]
[343.30599976 426.59497070]
[358.74270630 432.13027954]
[361.40072632 448.31259155]
[348.54568481 458.49493408]
[333.40176392 452.20257568]
[331.54772949 435.90856934]
[322.23413086 424.15029907]
[312.92053223 412.39202881]
[298.95294189 407.21945190]
[296.44946289 391.59756470]
[287.13586426 379.83929443]
[277.82229614 368.08102417]
[266.10314941 372.06384277]
[253.70216370 372.22439575]
[241.83686829 368.53173828]
[231.67694092 361.33392334]
[224.22883606 351.32534790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 107]
[4 106]
[5 105]
[6 104]
[7 103]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[23 77]
[24 76]
[25 75]
[26 74]
[27 73]
[29 42]
[30 41]
[31 40]
[32 39]
[43 72]
[44 71]
[45 70]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[78 89]
[79 88]
[80 87]
[81 86]
[113 130]
[114 129]
[115 128]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
