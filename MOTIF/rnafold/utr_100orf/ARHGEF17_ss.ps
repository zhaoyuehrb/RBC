%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGAGUGAGUUACGCCACUAUGGCGGACGGGGCACCCCGGCCCCAGCUUUACCGCAGCGUCUCGUUCAAGCUGCUGGAGCGCUGGAGCGGCGGCCCCGGGCUGAGGGAGGAGGACACGG\
) } def
/len { sequence length } bind def

/coor [
[131.32872009 227.15032959]
[126.76699829 212.86080933]
[122.20526886 198.57127380]
[108.89253235 191.99049377]
[104.06273651 177.56385803]
[111.05552673 163.64486694]
[106.49380493 149.35533142]
[101.93208313 135.06579590]
[94.98465729 132.24034119]
[97.03813934 147.09912109]
[85.19673157 156.30679321]
[71.30199432 150.65556335]
[69.24884033 135.79673767]
[81.08979797 126.58942413]
[74.14236450 123.76396179]
[60.90218353 130.81361389]
[47.66199875 137.86326599]
[34.42181778 144.91291809]
[21.18163681 151.96257019]
[10.04240894 164.74356079]
[-5.32274914 157.57780457]
[-2.69051981 140.82943726]
[14.13198566 138.72238159]
[27.37216759 131.67272949]
[40.61235046 124.62308502]
[53.85253143 117.57343292]
[67.09271240 110.52378082]
[70.69343567 91.86544037]
[82.67588806 80.23852539]
[96.92079926 78.06959534]
[99.98908234 63.38675690]
[103.05736542 48.70392227]
[106.12564850 34.02108765]
[109.19392395 19.33825302]
[112.26220703 4.65541744]
[103.87531281 -8.47080898]
[107.19615173 -23.31758308]
[119.76168823 -31.23230934]
[122.82997131 -45.91514587]
[121.08124542 -52.49104691]
[122.74950409 -58.08084106]
[126.45270538 -61.26589584]
[130.27276611 -75.77130890]
[126.30509186 -91.08692932]
[137.02854919 -101.42408752]
[140.84861755 -115.92950439]
[144.66867065 -130.43492126]
[148.48873901 -144.94033813]
[152.30880737 -159.44575500]
[148.34114075 -174.76136780]
[159.06459045 -185.09852600]
[162.88465881 -199.60394287]
[162.04528809 -208.82189941]
[166.99432373 -214.43118286]
[171.18661499 -228.83343506]
[175.19311523 -243.28846741]
[179.01318359 -257.79388428]
[182.83325195 -272.29928589]
[186.65332031 -286.80471802]
[190.47338867 -301.31011963]
[179.13636780 -311.59265137]
[173.88735962 -325.96997070]
[175.93255615 -341.13821411]
[184.80197144 -353.61184692]
[198.45747375 -360.52456665]
[213.76115417 -360.28784180]
[227.19631958 -352.95605469]
[235.67567444 -340.21405029]
[237.25071716 -324.98977661]
[231.55952454 -310.78173828]
[219.90988159 -300.85476685]
[204.97880554 -297.49005127]
[201.15873718 -282.98464966]
[197.33866882 -268.47921753]
[193.51860046 -253.97381592]
[189.69853210 -239.46839905]
[191.05380249 -232.11175537]
[185.58886719 -224.64114380]
[181.39657593 -210.23890686]
[177.39007568 -195.78387451]
[173.57000732 -181.27845764]
[177.81091309 -167.00036621]
[166.81422424 -155.62568665]
[162.99415588 -141.12026978]
[159.17408752 -126.61485291]
[155.35403442 -112.10943604]
[151.53396606 -97.60401917]
[155.77487183 -83.32592773]
[144.77818298 -71.95124817]
[140.95811462 -57.44582748]
[137.51280212 -42.84686279]
[134.44451904 -28.16402817]
[142.78904724 -15.87971306]
[139.88653564 -0.94552088]
[126.94504547 7.72369814]
[123.87676239 22.40653419]
[120.80847931 37.08936691]
[117.74019623 51.77220535]
[114.67192078 66.45503998]
[111.60363770 81.13787842]
[128.33334351 100.88934326]
[116.22161102 130.50407410]
[120.78334045 144.79360962]
[125.34506226 159.08314514]
[139.10934448 166.37574768]
[143.53201294 180.93235779]
[136.49479675 194.00955200]
[141.05651855 208.29908752]
[145.61824036 222.58860779]
[160.75990295 224.21649170]
[173.92712402 231.86791992]
[182.83859253 244.21723938]
[185.95034790 259.12484741]
[182.72326660 274.00793457]
[173.71644592 286.28787231]
[160.49038696 293.83712769]
[145.33657837 295.34771729]
[130.88050842 290.55795288]
[119.62677765 280.29766846]
[113.52516174 266.34454346]
[113.63281250 251.11599731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[6 104]
[7 103]
[8 102]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[38 92]
[39 91]
[42 90]
[43 89]
[45 87]
[46 86]
[47 85]
[48 84]
[49 83]
[51 81]
[52 80]
[54 79]
[55 78]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
