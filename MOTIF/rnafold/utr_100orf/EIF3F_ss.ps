%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCGCUUCCGCCUCCUUCUUUCUCGACAAGAUGGCCACACCGGCGGUACCAGUAAGUGCUCCUCCGGCCACGCCAACCCCAGUCCCGGCGGCGGCCCCAGCCUCAGUUCCAGCGCCAACGCCAGCACCGG\
) } def
/len { sequence length } bind def

/coor [
[183.09992981 301.07662964]
[176.63406372 288.61868286]
[173.13070679 275.01882935]
[172.77246094 260.97167969]
[175.58117676 247.19549561]
[181.41668701 234.39544678]
[189.98381042 223.22761536]
[180.55311584 211.56304932]
[171.12242126 199.89848328]
[157.10380554 194.86582947]
[154.44427490 179.26974487]
[145.01358032 167.60519409]
[135.58288574 155.94062805]
[126.15219879 144.27606201]
[116.72150421 132.61149597]
[103.13035583 137.44935608]
[88.36170959 136.71067810]
[74.66871643 130.23333740]
[64.24434662 118.75104523]
[58.87145615 103.81919861]
[44.56276703 108.32046509]
[30.25407791 112.82173157]
[15.94538879 117.32300568]
[10.11925220 131.83473206]
[-3.69607806 139.16075134]
[-18.97742653 135.84194946]
[-28.50940514 123.44536591]
[-27.79130936 107.82427979]
[-17.16219711 96.35449219]
[-1.64081371 94.45169067]
[11.44411945 103.01431274]
[25.75280762 98.51304626]
[40.06149673 94.01177979]
[54.37018585 89.51050568]
[60.02911377 75.61890411]
[52.93878555 62.40046310]
[45.84845734 49.18202209]
[38.75813293 35.96357727]
[23.47382355 35.38291168]
[10.61719418 27.28328705]
[3.58767319 13.92468643]
[4.18451548 -1.05862916]
[12.14737225 -13.64665890]
[5.05704451 -26.86510277]
[-2.03328323 -40.08354568]
[-9.12361050 -53.30199051]
[-26.71112251 -63.02578354]
[-25.50226212 -82.26915741]
[-33.20437622 -95.14073181]
[-40.90649033 -108.01230621]
[-48.60860062 -120.88388062]
[-56.31071472 -133.75546265]
[-71.69770050 -137.36325073]
[-79.95572662 -150.83843994]
[-76.18544769 -166.18641663]
[-62.62370682 -174.30151367]
[-47.31644440 -170.36918640]
[-39.34518814 -156.72239685]
[-43.43914032 -141.45756531]
[-35.73702621 -128.58599854]
[-28.03491402 -115.71441650]
[-20.33279991 -102.84284210]
[-12.63068771 -89.97126770]
[-2.42645979 -88.34911346]
[5.32816744 -81.19132233]
[7.86490059 -70.72035980]
[4.09483290 -60.39231873]
[11.18516064 -47.17387390]
[18.27548790 -33.95542908]
[25.36581612 -20.73698616]
[40.25733566 -20.40796471]
[53.06998062 -12.61745167]
[60.31070709 0.62785935]
[59.94705200 15.81879616]
[51.97657394 28.87324905]
[59.06690216 42.09169388]
[66.15722656 55.31013489]
[73.24755859 68.52857971]
[81.91368103 63.29687119]
[91.50477600 60.37099075]
[101.42486572 59.88403320]
[111.06929016 61.81902695]
[119.86154175 66.01277924]
[127.28771210 72.16854095]
[132.92651367 79.87657928]
[136.47306824 88.64120483]
[137.75514221 97.91255188]
[136.74099731 107.12104797]
[133.53857422 115.71236420]
[128.38606262 123.18080139]
[137.81675720 134.84536743]
[147.24745178 146.50993347]
[156.67814636 158.17449951]
[166.10884094 169.83905029]
[180.80200195 175.70605469]
[182.78698730 190.46778870]
[192.21768188 202.13235474]
[201.64837646 213.79692078]
[216.29724121 207.13261414]
[232.15464783 204.44894409]
[248.15942383 205.91993713]
[263.24197388 211.44180298]
[276.39572144 220.64021301]
[286.74432373 232.89567566]
[293.60003662 247.38523865]
[296.50942993 263.13775635]
[295.28332520 279.09902954]
[290.00918579 294.20227051]
[281.04476929 307.43942261]
[291.01184082 318.64913940]
[300.97891235 329.85882568]
[311.97351074 329.87716675]
[320.92980957 335.86553955]
[324.97833252 345.61120605]
[322.98617554 355.74969482]
[332.41687012 367.41424561]
[341.84756470 379.07882690]
[357.33886719 384.45950317]
[360.15853882 400.61444092]
[347.40594482 410.92477417]
[332.19985962 404.78414917]
[330.18301392 388.50952148]
[320.75231934 376.84494019]
[311.32162476 365.18038940]
[292.83956909 359.68655396]
[289.76919556 339.82589722]
[279.80212402 328.61621094]
[269.83505249 317.40649414]
[257.52786255 324.03927612]
[244.03741455 327.73925781]
[230.05270386 328.31381226]
[216.28872681 325.73004150]
[203.44999695 320.11657715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 98]
[8 97]
[9 96]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[20 34]
[21 33]
[22 32]
[23 31]
[35 78]
[36 77]
[37 76]
[38 75]
[43 70]
[44 69]
[45 68]
[46 67]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[109 128]
[110 127]
[111 126]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
