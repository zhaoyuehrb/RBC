%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAUUUAGACUCUGUCUUCAGCCAGGCACUCCCUCCCUCCCUCCCAGCACUAUGCCCUACAACUUCUGCCUGCCCAGCCUGAGCUGCCGCACCAGCUGCUCCUCCCGGCCCUGCGUGCCCCCCAGCUGCCACAGCUGCACCCUGCCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[97.50216675 132.80307007]
[92.98347473 147.10627747]
[88.46478271 161.40946960]
[97.79557037 173.80769348]
[98.02317810 189.32310486]
[89.06008911 201.98970032]
[74.35279083 206.93692017]
[59.55654144 202.26245117]
[50.36079788 189.76374817]
[50.30151367 174.24678040]
[59.40148163 161.67816162]
[74.16158295 156.89077759]
[78.68027496 142.58758545]
[83.19896698 128.28437805]
[77.71475983 124.20018768]
[73.19332886 119.07048035]
[69.83000946 113.11688232]
[67.77011108 106.59660339]
[67.10262299 99.79133606]
[67.85638428 92.99507904]
[69.99882507 86.50145721]
[58.08302307 77.39028168]
[46.16721725 68.27910614]
[34.25140762 59.16792297]
[22.24328995 50.17876053]
[10.14410877 41.31254196]
[-1.95507276 32.44632721]
[-14.05425453 23.58010864]
[-26.15343666 14.71389198]
[-34.32081604 22.60212517]
[-43.54285049 29.22216225]
[-53.62445831 34.43489838]
[-64.35250092 38.13098526]
[-75.50029755 40.23312759]
[-86.83242798 40.69770432]
[-98.10968018 39.51567078]
[-109.09411621 36.71272659]
[-119.55406952 32.34877396]
[-129.26907349 26.51661110]
[-138.03446960 19.33998871]
[-145.66574097 10.97096539]
[-152.00236511 1.58669257]
[-156.91123962 -8.61433887]
[-160.28944397 -19.41649437]
[-162.06639099 -30.59155464]
[-162.20532227 -41.90353775]
[-160.70407104 -53.11367416]
[-157.59509277 -63.98546982]
[-152.94471741 -74.28966522]
[-165.39546204 -82.65499115]
[-177.84622192 -91.02032471]
[-194.36546326 -94.83486176]
[-195.27297974 -111.76450348]
[-179.25617981 -117.32315063]
[-169.48088074 -103.47107697]
[-157.03013611 -95.10574341]
[-144.57937622 -86.74041748]
[-141.11154175 -90.67940521]
[-137.38606262 -94.37566376]
[-133.41989136 -97.81237030]
[-129.23106384 -100.97389984]
[-124.83864594 -103.84586334]
[-131.34690857 -117.36038971]
[-145.95382690 -123.99493408]
[-149.73413086 -139.58624268]
[-139.78788757 -152.17399597]
[-123.74498749 -152.10195923]
[-113.91219330 -139.42536926]
[-117.83236694 -123.86865234]
[-111.32411194 -110.35411835]
[-90.62274933 -114.92897797]
[-69.44395447 -113.74671173]
[-49.35972595 -106.88917542]
[-31.86239052 -94.85968018]
[-18.25374222 -78.54607391]
[-9.54818821 -59.15518570]
[-6.39713383 -38.12358475]
[-9.04024315 -17.01113319]
[-17.28721809 2.61471009]
[-5.18803740 11.48092747]
[6.91114426 20.34714317]
[19.01032639 29.21336174]
[31.10950661 38.07957840]
[38.40772247 39.50501251]
[43.36258698 47.25211716]
[55.27839279 56.36329651]
[67.19419861 65.47447205]
[79.11000824 74.58565521]
[98.77661133 65.34049225]
[121.11069489 70.26833344]
[136.53161621 88.67351532]
[150.30035400 82.72191620]
[164.06910706 76.77031708]
[177.83786011 70.81871796]
[191.54518127 64.72698212]
[205.18966675 58.49575806]
[218.83413696 52.26453400]
[224.08793640 40.44181442]
[235.62907410 35.54794693]
[247.02516174 39.71559906]
[260.79391479 33.76399612]
[274.56265259 27.81239510]
[280.15289307 13.02980328]
[294.59280396 6.60605478]
[309.31546021 12.35224724]
[315.58618164 26.85926628]
[309.68466187 41.52035522]
[295.11215210 47.63734818]
[280.51425171 41.58114624]
[266.74551392 47.53274536]
[252.97677612 53.48434830]
[243.31985474 68.10660553]
[225.06536865 65.90901184]
[211.42088318 72.14024353]
[197.77641296 78.37146759]
[192.96955872 84.04508209]
[183.78945923 84.58746338]
[170.02070618 90.53906250]
[156.25195312 96.49066925]
[142.48321533 102.44226837]
[138.99641418 117.03137970]
[148.58602905 128.56564331]
[158.17565918 140.09989929]
[167.76528931 151.63415527]
[178.47952271 162.13201904]
[190.20698547 171.48435974]
[201.93446350 180.83671570]
[213.66194153 190.18905640]
[225.38940430 199.54141235]
[237.11688232 208.89375305]
[253.27024841 214.04206848]
[252.79481506 230.98934937]
[236.37823486 235.22398376]
[227.76452637 220.62123108]
[216.03706360 211.26887512]
[204.30958557 201.91653442]
[192.58210754 192.56417847]
[180.85464478 183.21183777]
[169.12716675 173.85949707]
[172.50297546 188.47468567]
[168.24813843 202.85858154]
[157.46473694 213.28538513]
[142.94593811 217.05430603]
[128.45248413 213.18911743]
[117.73851776 202.69097900]
[113.57921600 188.27917480]
[117.05194092 173.68670654]
[127.25716400 162.69337463]
[141.55149841 158.14672852]
[156.23101807 161.22378540]
[146.64140320 149.68951416]
[137.05177307 138.15525818]
[127.46215057 126.62100220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[21 88]
[22 87]
[23 86]
[24 85]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[49 57]
[50 56]
[51 55]
[62 70]
[63 69]
[91 120]
[92 119]
[93 118]
[94 117]
[95 115]
[96 114]
[97 113]
[100 111]
[101 110]
[102 109]
[121 153]
[122 152]
[123 151]
[124 150]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
