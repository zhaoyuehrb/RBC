%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUAGCGCCAGCGCGCUGUGACGUAAUGUGAGGGGUCUCCCGGCAGGGCUGAGCUGGACCAAUGAGGAAAGGCAAGGGGCCGAUUUGCCUGUUCUCACGCCCCACCCUCAGACCUAGCCGGAGCAAAGUUUCACUUAUAGAAGGGAGAGGAGCGAACAUGG\
) } def
/len { sequence length } bind def

/coor [
[-17.67001152 341.73297119]
[-24.36369705 355.15661621]
[-22.79572487 373.48165894]
[-37.75109863 382.62429810]
[-44.18483353 396.17446899]
[-50.61857224 409.72463989]
[-57.05230713 423.27481079]
[-63.48604584 436.82498169]
[-69.91978455 450.37512207]
[-68.06561279 466.66912842]
[-81.40866089 476.20303345]
[-96.22274017 469.16915894]
[-97.26839447 452.80337524]
[-83.46994781 443.94140625]
[-77.03620911 430.39123535]
[-70.60247803 416.84106445]
[-64.16873932 403.29089355]
[-57.73500061 389.74072266]
[-51.30126572 376.19055176]
[-55.06387329 364.66250610]
[-49.77581787 353.30523682]
[-37.78735352 348.46295166]
[-31.09366798 335.03927612]
[-38.12298965 321.93484497]
[-36.06362915 307.02767944]
[-25.49775124 296.06338501]
[-10.32637978 293.39212036]
[-3.63269353 279.96847534]
[3.06099224 266.54483032]
[9.75467777 253.12115479]
[-0.81326979 241.34205627]
[-6.07387733 226.37629700]
[-5.19629145 210.49864197]
[1.71496177 196.13446045]
[13.63144112 185.48924255]
[28.75372696 180.20997620]
[44.78310776 181.13037109]
[51.21684265 167.58021545]
[57.65058136 154.03004456]
[64.08432007 140.47987366]
[70.51805115 126.92971039]
[76.95178986 113.37953949]
[88.67840576 83.29805756]
[88.67840576 68.29805756]
[88.67840576 53.29805756]
[88.53385925 38.29875183]
[88.24476624 23.30154037]
[87.95568085 8.30432510]
[79.95385742 -5.34416771]
[87.44443512 -18.21819115]
[87.15534973 -33.21540451]
[86.86626434 -48.21261978]
[86.57717896 -63.20983505]
[86.28809357 -78.20704651]
[76.40663910 -93.71906281]
[85.42247009 -108.75121307]
[84.84440613 -123.74007416]
[84.26634216 -138.72892761]
[71.54826355 -144.61466980]
[62.65734100 -155.36131287]
[59.29033279 -168.82823181]
[62.05101395 -182.36477661]
[70.34282684 -193.33195496]
[82.49663544 -199.61689758]
[82.20755005 -214.61410522]
[81.91846466 -229.61132812]
[81.62937927 -244.60853577]
[81.34028625 -259.60574341]
[81.05120087 -274.60296631]
[73.04937744 -288.25146484]
[80.53995514 -301.12548828]
[80.25086975 -316.12271118]
[79.96178436 -331.11990356]
[79.67269897 -346.11712646]
[79.38361359 -361.11434937]
[79.09452820 -376.11154175]
[78.80544281 -391.10876465]
[66.52207184 -400.78619385]
[63.38362885 -416.10562134]
[70.87198639 -429.83361816]
[85.45137787 -435.48831177]
[100.23785400 -430.39968872]
[108.24969482 -416.97045898]
[105.70395660 -401.54147339]
[93.80265808 -391.39785767]
[94.09174347 -376.40063477]
[94.38082886 -361.40341187]
[94.66991425 -346.40621948]
[94.95899963 -331.40899658]
[95.24808502 -316.41177368]
[95.53717041 -301.41458130]
[103.51831818 -288.83877563]
[96.04841614 -274.89205933]
[96.33750153 -259.89483643]
[96.62658691 -244.89762878]
[96.91567230 -229.90040588]
[97.20475769 -214.90319824]
[97.49385071 -199.90597534]
[111.81183624 -192.46315002]
[120.48423004 -178.74366760]
[121.07170105 -162.42984009]
[113.32008362 -147.95686340]
[99.25519562 -139.30699158]
[99.83325958 -124.31813812]
[100.41132355 -109.32927704]
[109.08775330 -100.85739136]
[109.66484070 -88.34268951]
[101.28530884 -78.49613190]
[101.57439423 -63.49892044]
[101.86347961 -48.50170517]
[102.15256500 -33.50448990]
[102.44165039 -18.50727844]
[110.42279816 -5.93148565]
[102.95289612 8.01523972]
[103.24198151 23.01245308]
[103.53106689 38.00966644]
[106.81987000 44.66859055]
[103.67840576 53.29805756]
[103.67840576 68.29805756]
[103.67840576 83.29805756]
[113.27091980 94.82991791]
[128.02017212 97.56108093]
[142.76943970 100.29224396]
[157.51870728 103.02340698]
[172.26795959 105.75457001]
[188.94323730 102.69325256]
[196.50109863 117.86939240]
[184.01026917 129.33305359]
[169.53680420 120.50382996]
[154.78753662 117.77266693]
[140.03828430 115.04150391]
[125.28901672 112.31034088]
[110.53974915 109.57917786]
[122.17405701 119.04717255]
[135.50314331 125.92726135]
[143.29302979 138.74589539]
[143.26046753 153.74586487]
[135.41497803 166.53056335]
[122.05615234 173.35270691]
[107.09954071 172.21267700]
[94.92902374 163.44464111]
[89.11186981 149.61856079]
[91.35211945 134.78916931]
[90.50196075 119.81327820]
[84.06822205 133.36344910]
[77.63448334 146.91360474]
[71.20074463 160.46377563]
[64.76701355 174.01394653]
[58.33327484 187.56411743]
[68.20156097 197.86808777]
[73.94068146 210.89747620]
[74.87779236 225.07398987]
[70.92036438 238.68800354]
[62.56490707 250.10473633]
[50.83476639 257.96054077]
[37.15480042 261.32580566]
[23.17833519 259.81484985]
[16.48464966 273.23849487]
[9.79096317 286.66217041]
[3.09727764 300.08581543]
[10.09279728 313.81057739]
[7.69342470 328.84707642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[27 160]
[28 159]
[29 158]
[30 157]
[37 149]
[38 148]
[39 147]
[40 146]
[41 145]
[42 144]
[43 120]
[44 119]
[45 118]
[46 116]
[47 115]
[48 114]
[50 112]
[51 111]
[52 110]
[53 109]
[54 108]
[56 105]
[57 104]
[58 103]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[71 91]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[121 133]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
