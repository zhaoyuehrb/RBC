%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCAAAGGGCGGGGCGCGCGCGUCGGGAAGAUGGCGCUACGUCUGCUGCGGAGGGCGGCGCGCGGAGCUGCGGCGGCGGCGCUGCUGAGGCUGAAAGCGUCUCUAGCAGCUGAUAUCCCCAGACUUGGAU\
) } def
/len { sequence length } bind def

/coor [
[89.32088470 325.88320923]
[74.65132904 321.51708984]
[63.69922256 310.82550049]
[58.98126221 296.26531982]
[61.58161163 281.18231201]
[70.90272522 269.04248047]
[84.80268097 262.63546753]
[85.51104736 247.65220642]
[86.21941376 232.66894531]
[74.50022125 223.51478577]
[70.36967468 209.04403687]
[75.61336517 194.74868774]
[88.41712952 186.18307495]
[89.12549591 171.19981384]
[89.83386230 156.21655273]
[90.54222870 141.23327637]
[72.85002899 132.44244385]
[61.07884216 116.57637787]
[46.45492172 119.91419220]
[31.83100319 123.25200653]
[17.20708466 126.58982086]
[9.44936466 131.59495544]
[2.19843459 129.82943726]
[-12.50023937 132.82092285]
[-27.19891357 135.81240845]
[-41.89758682 138.80389404]
[-51.91490555 151.33517456]
[-67.95713043 151.17236328]
[-77.71804810 138.44033813]
[-73.70990753 122.90605164]
[-59.00741959 116.48604584]
[-44.88907242 124.10521698]
[-30.19039726 121.11373901]
[-15.49172306 118.12225342]
[-0.79304886 115.13076782]
[13.86927032 111.96590424]
[28.49318886 108.62808990]
[43.11710739 105.29027557]
[57.74102783 101.95246124]
[58.87419128 90.08531952]
[63.27311707 79.00550079]
[70.58849335 69.59282684]
[62.23653412 57.13310242]
[53.88457870 44.67337418]
[39.77370453 37.51838684]
[39.11417007 22.63839149]
[30.76221466 10.17866325]
[22.41025734 -2.28106451]
[14.05830097 -14.74079227]
[5.70634365 -27.20051956]
[-2.64561319 -39.66024780]
[-18.04323196 -44.16501236]
[-23.98793221 -59.06602097]
[-15.91945076 -72.93249512]
[-0.02723388 -75.12726593]
[11.49756813 -63.96668625]
[9.81411457 -48.01220322]
[18.16607094 -35.55247498]
[26.51802826 -23.09274864]
[34.86998367 -10.63302135]
[43.22194290 1.82670617]
[51.57389832 14.28643417]
[65.08738708 20.55021667]
[66.34430695 36.32141495]
[74.69625854 48.78114319]
[83.04821777 61.24087143]
[95.16351318 56.39200211]
[108.64465332 55.38304138]
[122.26134491 58.58589554]
[128.44859314 44.92141724]
[134.63583374 31.25693703]
[140.82307434 17.59245682]
[147.01031494 3.92797613]
[144.86131287 -12.32975483]
[158.02947998 -22.10377312]
[172.96853638 -15.33940411]
[174.31045532 1.00474668]
[160.67480469 10.11522007]
[154.48754883 23.77969933]
[148.30030823 37.44417953]
[142.11306763 51.10866165]
[135.92582703 64.77313995]
[144.71391296 76.92918396]
[159.62925720 75.33776855]
[174.54460144 73.74635315]
[189.45993042 72.15493774]
[204.37527466 70.56352234]
[219.29061890 68.97210693]
[234.18612671 67.20464325]
[249.05972290 65.26139069]
[263.93331909 63.31813431]
[278.80691528 61.37488174]
[293.68048096 59.43162537]
[301.94247437 46.15481567]
[316.82168579 41.34404755]
[331.29260254 47.27082443]
[338.52249146 61.13669586]
[335.09765625 76.39463043]
[322.63516235 85.84028625]
[307.01943970 85.01372528]
[295.62374878 74.30521393]
[280.75015259 76.24847412]
[265.87655640 78.19172668]
[251.00297546 80.13497925]
[236.12937927 82.07823944]
[229.84458923 86.10247040]
[220.88203430 83.88744354]
[205.96669006 85.47885895]
[191.05136108 87.07028198]
[176.13601685 88.66169739]
[161.22067261 90.25311279]
[146.30532837 91.84452820]
[146.27128601 102.60579681]
[143.80506897 112.92177582]
[139.10702515 122.25845337]
[132.49101257 130.14930725]
[124.36438751 136.21847534]
[115.20339203 140.19851685]
[105.52549744 141.94165039]
[104.81713104 156.92491150]
[104.10876465 171.90817261]
[103.40039825 186.89144897]
[115.33894348 196.62680054]
[119.21057892 211.35310364]
[113.73323059 225.36961365]
[101.20267487 233.37730408]
[100.49430847 248.36056519]
[99.78594208 263.34384155]
[113.01943970 271.03366089]
[121.15366364 283.99871826]
[122.31942749 299.25976562]
[116.24885559 313.30990601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 128]
[8 127]
[9 126]
[13 122]
[14 121]
[15 120]
[16 119]
[18 39]
[19 38]
[20 37]
[21 36]
[23 35]
[24 34]
[25 33]
[26 32]
[42 66]
[43 65]
[44 64]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
