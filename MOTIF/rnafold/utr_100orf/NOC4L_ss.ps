%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGUGACGUCACGGGAGCGCCGGCGGCUGAGAAUCCGCGUUGUUCCGUGUUGGGGGCGGCAUGGAGCGGGAGCCGGGCGCCGCGGGAGUUCGCCGGGCUCUGGGCCGCCGGCUGGAGGCGGUGCUGGCGAGCCGCAGUGAGGCCAACGCCGUGUUCGACA\
) } def
/len { sequence length } bind def

/coor [
[234.14595032 339.41516113]
[222.29502869 330.21972656]
[223.29940796 315.25317383]
[221.29837036 300.38723755]
[214.17442322 302.73233032]
[208.80340576 316.73776245]
[203.43238831 330.74319458]
[206.53598022 346.84600830]
[193.96684265 357.37921143]
[178.65502930 351.50720215]
[176.35202026 335.27059937]
[189.42695618 325.37219238]
[194.79797363 311.36676025]
[200.16899109 297.36132812]
[188.90084839 307.26226807]
[173.90232849 307.05120850]
[162.91722107 296.83715820]
[161.61714172 281.89358521]
[170.67333984 269.93594360]
[185.41007996 267.13796997]
[198.21998596 274.94589233]
[190.51232910 262.07763672]
[182.80465698 249.20939636]
[175.09700012 236.34114075]
[167.38932800 223.47288513]
[159.68165588 210.60464478]
[151.97399902 197.73638916]
[144.26632690 184.86813354]
[136.55865479 171.99989319]
[128.85099792 159.13163757]
[115.67345428 152.18888855]
[115.22001648 136.37417603]
[107.51235199 123.50593567]
[99.80468750 110.63768005]
[87.92517090 113.81272888]
[74.24859619 103.95578003]
[61.30666733 96.37247467]
[48.36473846 88.78917694]
[43.91544342 88.92800140]
[40.05717850 87.73683167]
[37.14116287 85.57306671]
[35.36297226 82.87245941]
[34.75043106 80.09026337]
[22.43099213 71.53273010]
[10.11155510 62.97518921]
[-2.20788288 54.41765213]
[-14.52732086 45.86011124]
[-26.84675789 37.30257416]
[-39.16619492 28.74503708]
[-51.48563385 20.18749809]
[-63.80507278 11.62996101]
[-76.12451172 3.07242274]
[-88.44394684 -5.48511505]
[-100.76338196 -14.04265308]
[-117.14160919 -14.87075520]
[-124.37168884 -29.59006310]
[-115.01593018 -43.05861282]
[-98.69874573 -41.42111969]
[-92.20584869 -26.36209106]
[-79.88640594 -17.80455208]
[-67.56697083 -9.24701500]
[-55.24753189 -0.68947691]
[-42.92809677 7.86806107]
[-30.60865784 16.42559814]
[-18.28922081 24.98313713]
[-5.96978283 33.54067612]
[6.34965515 42.09821320]
[18.66909218 50.65575027]
[30.98853111 59.21328735]
[43.30796814 67.77082825]
[55.94804001 75.84724426]
[68.88996887 83.43054962]
[81.83190155 91.01384735]
[95.56237793 84.97448730]
[98.71875000 70.31033325]
[101.87512207 55.64618301]
[97.21495056 40.52687836]
[107.45714569 29.71268654]
[110.61351776 15.04853630]
[113.76988983 0.38438511]
[116.92625427 -14.27976608]
[110.58793640 -25.54905701]
[113.55146790 -37.72149658]
[123.68998718 -44.37459564]
[127.12837982 -58.97519302]
[121.88706970 -74.51419830]
[132.92520142 -86.64233398]
[148.88769531 -82.88321686]
[153.35369873 -67.10390472]
[141.72897339 -55.53679657]
[138.29058838 -40.93619919]
[144.26014709 -24.45544624]
[131.59040833 -11.12339592]
[128.43403625 3.54075503]
[125.27767181 18.20490646]
[122.12129974 32.86905670]
[127.00723267 46.93948364]
[116.53926849 58.80255508]
[113.38290405 73.46670532]
[110.22653198 88.13085938]
[112.67293549 102.93001556]
[120.38059998 115.79826355]
[128.08827209 128.66651917]
[141.81710815 136.52969360]
[141.71925354 151.42396545]
[149.42691040 164.29222107]
[157.13458252 177.16047668]
[164.84223938 190.02871704]
[172.54991150 202.89697266]
[180.25758362 215.76522827]
[187.96524048 228.63348389]
[195.67291260 241.50172424]
[203.38056946 254.36997986]
[211.08824158 267.23822021]
[250.74659729 280.71185303]
[263.38665771 288.78826904]
[276.02673340 296.86468506]
[288.66680908 304.94110107]
[304.46179199 305.85150146]
[311.02075195 319.22421265]
[323.66079712 327.30062866]
[336.30087280 335.37707520]
[348.94094849 343.45349121]
[361.58102417 351.52990723]
[374.22109985 359.60632324]
[390.01608276 360.51672363]
[396.57501221 373.88943481]
[409.21508789 381.96585083]
[421.85516357 390.04226685]
[434.49523926 398.11868286]
[451.48184204 394.03536987]
[465.89550781 403.29806519]
[469.10900879 419.78399658]
[481.90237427 427.61529541]
[498.30108643 427.49554443]
[506.36968994 441.77243042]
[497.80789185 455.75915527]
[481.42333984 455.06732178]
[474.07107544 440.40869141]
[461.27767944 432.57736206]
[449.26657104 437.31860352]
[436.53128052 434.21542358]
[427.79144287 424.18649292]
[426.41882324 410.75875854]
[413.77874756 402.68234253]
[401.13867188 394.60592651]
[388.49859619 386.52951050]
[373.60772705 386.19680786]
[366.14468384 372.24639893]
[353.50460815 364.16998291]
[340.86453247 356.09356689]
[328.22445679 348.01715088]
[315.58438110 339.94070435]
[302.94430542 331.86428833]
[288.05343628 331.53158569]
[280.59039307 317.58117676]
[267.95031738 309.50476074]
[255.31025696 301.42834473]
[242.67018127 293.35192871]
[235.54623413 295.69702148]
[242.76690674 308.84472656]
[252.46504211 320.28790283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[7 12]
[21 114]
[22 113]
[23 112]
[24 111]
[25 110]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[32 103]
[33 102]
[34 101]
[36 73]
[37 72]
[38 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[74 100]
[75 99]
[76 98]
[78 96]
[79 95]
[80 94]
[81 93]
[84 91]
[85 90]
[115 159]
[116 158]
[117 157]
[118 156]
[120 154]
[121 153]
[122 152]
[123 151]
[124 150]
[125 149]
[127 147]
[128 146]
[129 145]
[130 144]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
