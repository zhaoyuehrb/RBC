%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCGGCGGCGGGCGGCGGCAGUUGCCCCGGGCCUGGCUCCGCGCGGGGCCGCUUCCCGGGCCGGCCGCGGGGCGCCGGCGGGGGCGGGGGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[-0.53506738 298.84292603]
[-6.86016607 304.45779419]
[-14.83230686 306.98269653]
[-23.04709816 306.05419922]
[-32.52914429 317.67706299]
[-34.96701050 335.84582520]
[-51.46669006 341.59576416]
[-60.58267975 353.50790405]
[-62.16442108 369.83059692]
[-77.20117950 376.37487793]
[-90.22442627 366.40859985]
[-87.83695984 350.18417358]
[-72.49480438 344.39190674]
[-63.37881470 332.47979736]
[-64.64240265 320.33807373]
[-56.99218369 310.31317139]
[-44.15200043 308.19500732]
[-34.66995621 296.57214355]
[-33.75900269 275.01867676]
[-13.16824150 266.42929077]
[-5.20187473 253.71955872]
[2.76449203 241.00984192]
[10.73085880 228.30012512]
[18.69722557 215.59039307]
[15.12679482 201.17555237]
[23.02476883 188.17260742]
[38.16858673 184.52534485]
[46.13495636 171.81562805]
[54.10132217 159.10591125]
[62.06768799 146.39619446]
[70.03405762 133.68646240]
[78.00041962 120.97674561]
[85.96678925 108.26702881]
[84.05767059 96.66578674]
[90.45603180 86.80199432]
[101.82770538 83.81562042]
[110.18549347 71.35979462]
[118.54327393 58.90397644]
[120.78804779 49.86220932]
[127.35971069 46.19631195]
[136.10083008 34.00644302]
[144.84193420 21.81657410]
[146.59608459 6.09291315]
[160.30056763 0.25883728]
[169.04168701 -11.93103123]
[170.79583740 -27.65469360]
[184.50032043 -33.48876953]
[193.24142456 -45.67863846]
[201.98254395 -57.86850739]
[210.72366333 -70.05837250]
[219.46478271 -82.24824524]
[227.82255554 -94.70406342]
[235.78892517 -107.41378784]
[243.75529480 -120.12350464]
[251.72166443 -132.83322144]
[245.80404663 -147.17761230]
[249.48072815 -162.25280762]
[261.33795166 -172.26210022]
[276.81637573 -173.35670471]
[289.96423340 -165.11572266]
[295.72589111 -150.70797729]
[291.88586426 -135.67355347]
[279.92077637 -125.79348755]
[264.43139648 -124.86685944]
[256.46502686 -112.15713501]
[248.49865723 -99.44741821]
[240.53228760 -86.73769379]
[240.76039124 -81.80426788]
[237.76681519 -76.71032715]
[231.65464783 -73.50712585]
[222.91352844 -61.31726074]
[214.17240906 -49.12739182]
[205.43130493 -36.93752289]
[196.69018555 -24.74765396]
[195.56126404 -9.89589310]
[181.23155212 -3.18991590]
[172.49043274 8.99995327]
[171.36151123 23.85171318]
[157.03181458 30.55768967]
[148.29069519 42.74755859]
[139.54957581 54.93742752]
[130.99909973 67.26176453]
[122.64131165 79.71758270]
[114.28352356 92.17340088]
[113.66423798 108.86359406]
[98.67651367 116.23339844]
[90.71014404 128.94311523]
[82.74377441 141.65283203]
[74.77741241 154.36256409]
[66.81104279 167.07228088]
[58.84467697 179.78199768]
[50.87830734 192.49171448]
[54.19672012 207.71098328]
[45.93663788 220.48695374]
[31.40694618 223.55676270]
[23.44058037 236.26647949]
[15.47421265 248.97621155]
[7.50784588 261.68591309]
[-0.45852134 274.39566040]
[3.05038404 282.40444946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[7 14]
[8 13]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[32 87]
[33 86]
[36 84]
[37 83]
[38 82]
[40 81]
[41 80]
[42 79]
[44 77]
[45 76]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
