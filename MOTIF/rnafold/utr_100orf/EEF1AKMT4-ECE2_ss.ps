%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGGCCGGCGGCUCUGGCUGCCCGGCGGUUGAGAGCAUGGCCUCUCCAGGGGCAGGUAGGGCGCCUCCGGAGUUACCGGAGCGGAACUGCGGGUACCGCGAAGUCGAGUACUGGGAUCAGCGCUACCAAGGCGCAG\
) } def
/len { sequence length } bind def

/coor [
[92.31330872 198.91210938]
[90.69238281 192.16293335]
[91.28952789 185.19543457]
[94.07633972 178.72506714]
[98.79788208 173.42662048]
[94.13039398 159.17127991]
[89.30211639 144.96960449]
[84.31365967 130.82339478]
[72.73868561 121.28294373]
[57.90026474 119.08722687]
[43.06184006 116.89151001]
[28.22341728 114.69579315]
[19.18975639 116.54394531]
[13.07597351 112.27912140]
[-1.70903850 109.74862671]
[-16.49405098 107.21813202]
[-31.27906227 104.68762970]
[-46.06407547 102.15713501]
[-60.97173691 107.45545197]
[-72.21131134 97.68196106]
[-86.99633026 95.15146637]
[-101.78134155 92.62097168]
[-116.56635284 90.09046936]
[-131.35136414 87.55997467]
[-146.13636780 85.02947998]
[-156.20588684 94.05053711]
[-169.44262695 95.57555389]
[-180.95742798 89.26803589]
[-186.62770081 77.64311981]
[-201.35174561 74.77913666]
[-212.51564026 81.34822083]
[-224.76296997 78.60293579]
[-231.60122681 68.56085205]
[-246.25679016 65.36484528]
[-260.91235352 62.16883469]
[-270.05047607 63.40068817]
[-275.86126709 58.73144531]
[-290.44085693 55.20504761]
[-307.25750732 57.35825348]
[-313.98187256 41.79486084]
[-300.88821411 31.02490425]
[-286.91445923 40.62545395]
[-272.33486938 44.15185547]
[-257.71633911 47.51327515]
[-243.06079102 50.70928192]
[-228.40522766 53.90528870]
[-212.04629517 47.65305328]
[-198.48776245 60.05508804]
[-183.76371765 62.91907120]
[-170.27996826 52.93167496]
[-153.40611267 55.80274200]
[-143.60588074 70.24446869]
[-128.82086182 72.77496338]
[-114.03585052 75.30545807]
[-99.25083923 77.83596039]
[-84.46582794 80.36645508]
[-69.68081665 82.89694977]
[-55.83067703 77.41763306]
[-43.53357697 87.37212372]
[-28.74856567 89.90261841]
[-13.96355438 92.43312073]
[0.82145828 94.96361542]
[15.60647011 97.49411011]
[30.41913414 99.85736847]
[45.25755692 102.05308533]
[60.09598160 104.24880219]
[74.93441010 106.44451904]
[80.68082428 80.26165771]
[107.91892242 71.73011780]
[115.66224670 58.88328934]
[123.40556335 46.03646469]
[123.90286255 30.22307396]
[137.09960938 23.31689835]
[144.84292603 10.47007084]
[152.58624268 -2.37675548]
[160.32957458 -15.22358227]
[162.10470581 -24.27187347]
[168.39584351 -28.27043915]
[176.42752075 -40.93899155]
[184.45919800 -53.60754013]
[187.83363342 -70.22228241]
[204.73320007 -71.57914734]
[210.71530151 -55.71563721]
[197.12774658 -45.57586288]
[189.09606934 -32.90731430]
[181.06440735 -20.23876381]
[173.17639160 -7.48025990]
[165.43307495 5.36656713]
[157.68975830 18.21339417]
[149.94642639 31.06022072]
[150.00299072 45.95471954]
[136.25239563 53.77978516]
[128.50906372 66.62660980]
[120.76574707 79.47344208]
[128.21676636 92.49198151]
[143.21580505 92.32247162]
[158.21484375 92.15296936]
[173.21388245 91.98345947]
[188.21005249 91.64447021]
[203.20143127 91.13603210]
[213.80705261 79.41867828]
[229.59571838 78.71601868]
[241.20028687 89.44492340]
[241.73597717 105.24013519]
[230.88497925 116.73062134]
[215.08499146 117.09928894]
[203.70986938 106.12741089]
[188.71849060 106.63584900]
[182.08425903 110.03497314]
[173.38339233 106.98249817]
[158.38435364 107.15200806]
[143.38531494 107.32151794]
[128.38626099 107.49102020]
[121.28442383 118.49744415]
[110.47746277 124.92745972]
[98.45986938 125.83493042]
[103.44832611 139.98114014]
[109.30152893 147.10594177]
[108.38572693 154.50379944]
[113.05321503 168.75912476]
[132.41226196 182.69937134]
[127.75679779 205.37609863]
[134.30865479 218.86953735]
[140.86050415 232.36299133]
[147.41236877 245.85644531]
[153.96421814 259.34988403]
[168.59249878 265.93722534]
[172.42312622 281.51626587]
[162.51756287 294.13604736]
[146.47451782 294.11581421]
[136.60084534 281.47103882]
[140.47077942 265.90173340]
[133.91891479 252.40829468]
[127.36705780 238.91485596]
[120.81520081 225.42140198]
[114.26334381 211.92794800]
[107.53853607 211.58959961]
[101.21609497 209.12657166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 120]
[6 119]
[7 117]
[8 116]
[9 67]
[10 66]
[11 65]
[12 64]
[14 63]
[15 62]
[16 61]
[17 60]
[18 59]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[29 49]
[30 48]
[33 46]
[34 45]
[35 44]
[37 43]
[38 42]
[69 94]
[70 93]
[71 92]
[73 90]
[74 89]
[75 88]
[76 87]
[78 86]
[79 85]
[80 84]
[95 113]
[96 112]
[97 111]
[98 110]
[99 108]
[100 107]
[122 136]
[123 135]
[124 134]
[125 133]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
