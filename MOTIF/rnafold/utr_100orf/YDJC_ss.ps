%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCCUGGGAGCGCGAGCGGUGGACCCAGGCGGCCAUGUCCCGCCCUCGCAUGCGCCUGGUGGUCACCGCGGACGACUUUGGUUACUGCCCGCGACGCGAUGAGGGUAUCGUGGAGGCCUUUCUGGCCGGGGCUG\
) } def
/len { sequence length } bind def

/coor [
[82.33391571 200.92514038]
[92.04450226 188.15470886]
[91.36178589 173.17024231]
[90.67906952 158.18579102]
[89.99634552 143.20133972]
[76.23818207 137.22532654]
[64.82100677 146.95405579]
[53.40383911 156.68278503]
[41.98666763 166.41151428]
[30.56949615 176.14024353]
[19.15232658 185.86897278]
[17.74441910 201.38204956]
[6.02719450 211.08572388]
[-8.75347710 209.64790344]
[-20.17064667 219.37663269]
[-31.58781815 229.10536194]
[-34.29291534 244.91871643]
[-48.41188049 252.53674316]
[-63.11384964 246.11555481]
[-67.12073517 230.58093262]
[-57.35879135 217.84971619]
[-41.31655121 217.68820190]
[-29.89937782 207.95945740]
[-18.48220825 198.23072815]
[-17.55638123 183.40917969]
[-6.11633682 173.38021851]
[9.42359447 174.45181274]
[20.84076500 164.72306824]
[32.25793457 154.99433899]
[43.67510605 145.26560974]
[55.09227753 135.53688049]
[66.50944519 125.80815125]
[61.64137650 103.45574951]
[69.12942505 84.05124664]
[84.41297913 73.22671509]
[101.07452393 72.80812836]
[105.77468109 58.56353378]
[110.47483826 44.31893921]
[115.17500305 30.07434273]
[119.87516022 15.82974815]
[112.50705719 6.36962318]
[110.67960358 -5.35939837]
[114.73730469 -16.38664436]
[123.54891968 -23.97644615]
[134.81982422 -26.30667877]
[140.16345215 -40.32258606]
[145.50708008 -54.33849335]
[150.85070801 -68.35440063]
[156.19433594 -82.37030792]
[161.53796387 -96.38621521]
[166.88157654 -110.40212250]
[159.43461609 -126.18567657]
[165.54618835 -142.17286682]
[181.00286865 -148.70152283]
[186.02606201 -162.83543396]
[190.88804626 -177.02560425]
[195.58821106 -191.27020264]
[200.28836060 -205.51480103]
[195.18119812 -217.41995239]
[199.45220947 -229.22337341]
[210.27909851 -234.73797607]
[215.30229187 -248.87190247]
[220.32548523 -263.00579834]
[225.34867859 -277.13970947]
[230.37187195 -291.27365112]
[235.39506531 -305.40756226]
[232.72590637 -321.00198364]
[244.27856445 -330.40332031]
[249.30175781 -344.53723145]
[254.32495117 -358.67114258]
[259.34814453 -372.80505371]
[256.67898560 -388.39950562]
[268.23165894 -397.80084229]
[273.25485229 -411.93475342]
[269.75418091 -427.95590210]
[282.05911255 -438.79660034]
[297.51138306 -433.30487061]
[300.21502686 -417.13012695]
[287.38876343 -406.91156006]
[282.36557007 -392.77764893]
[285.39401245 -378.19418335]
[273.48205566 -367.78186035]
[268.45886230 -353.64794922]
[263.43566895 -339.51403809]
[258.41247559 -325.38012695]
[261.44094849 -310.79666138]
[249.52897644 -300.38436890]
[244.50578308 -286.25045776]
[239.48258972 -272.11651611]
[234.45939636 -257.98260498]
[229.43620300 -243.84869385]
[224.41300964 -229.71478271]
[228.54753113 -212.69761658]
[214.53295898 -200.81463623]
[209.83280945 -186.57003784]
[205.13264465 -172.32545471]
[206.03169250 -164.92416382]
[200.15997314 -157.81224060]
[195.13677979 -143.67832947]
[202.26199341 -132.88255310]
[201.83509827 -119.75926208]
[193.78775024 -109.13826752]
[180.89749146 -105.05850220]
[175.55386353 -91.04259491]
[170.21023560 -77.02668762]
[164.86660767 -63.01077652]
[159.52299500 -48.99486923]
[154.17936707 -34.97896194]
[148.83573914 -20.96305275]
[157.33407593 -4.81992149]
[151.31362915 12.73697186]
[134.11975098 20.52990723]
[129.41960144 34.77450180]
[124.71943665 49.01910019]
[120.01927948 63.26369476]
[115.31911469 77.50829315]
[134.51554871 95.99604034]
[131.16918945 128.56851196]
[140.09609985 140.62297058]
[149.02301025 152.67744446]
[157.94993591 164.73190308]
[173.54180908 168.50984192]
[180.17857361 183.11576843]
[172.76905823 197.34526062]
[156.99720764 200.28268433]
[144.96185303 189.67468262]
[145.89546204 173.65882874]
[136.96855164 161.60435486]
[128.04164124 149.54989624]
[119.11471558 137.49542236]
[104.98080444 142.51861572]
[105.66352081 157.50306702]
[106.34624481 172.48753357]
[107.02896118 187.47198486]
[117.86059570 199.30647278]
[115.21920776 215.13058472]
[101.13103485 222.80541992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[5 131]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[14 24]
[15 23]
[16 22]
[36 116]
[37 115]
[38 114]
[39 113]
[40 112]
[45 109]
[46 108]
[47 107]
[48 106]
[49 105]
[50 104]
[51 103]
[54 99]
[55 98]
[56 96]
[57 95]
[58 94]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[68 85]
[69 84]
[70 83]
[71 82]
[73 80]
[74 79]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
