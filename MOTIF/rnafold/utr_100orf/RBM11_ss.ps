%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGGAGAAGGGGCGGGGUCUCAGCUCCUACUUCAUUCUACGGCCGAGACCGGAGGAUGUUCCCUGCUCAGGAGGAGGCCGACAGGACCGUGUUUGUUGGGAAUUUAGAGGCCCGAGUUCGGGAAGAGAUUCUGUACGAGCUGUUCCUUCAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[82.71851349 309.60238647]
[91.10366821 295.50909424]
[90.80543518 280.51205444]
[90.50720215 265.51501465]
[82.48639679 259.07720947]
[79.29435730 249.06875610]
[82.22687531 238.75202942]
[90.54049683 231.63223267]
[90.83872986 216.63519287]
[91.13696289 201.63815308]
[91.43519592 186.64112854]
[91.73342896 171.64408875]
[92.03166199 156.64704895]
[92.32989502 141.65000916]
[92.62812805 126.65298462]
[77.94213867 107.48659515]
[84.88756561 88.59371948]
[77.47382355 75.55390930]
[70.06008911 62.51410675]
[62.64635086 49.47430420]
[55.23261261 36.43449783]
[47.81887436 23.39469528]
[40.40513611 10.35489178]
[18.85687828 8.51883411]
[3.70504642 -6.62255239]
[1.88940787 -27.75945663]
[-11.29522038 -34.91247177]
[-24.47984695 -42.06548309]
[-37.66447449 -49.21849442]
[-50.84910202 -56.37150574]
[-53.51731110 -48.95930862]
[-59.49590683 -42.21588516]
[-68.51671600 -37.42012405]
[-79.85937500 -35.72444916]
[-92.40878296 -38.00480270]
[-106.65608978 -42.69675064]
[-120.90338898 -47.38870239]
[-135.15069580 -52.08065033]
[-149.39799500 -56.77259827]
[-163.64529419 -61.46455002]
[-179.17317200 -58.43215179]
[-188.84159851 -69.76224518]
[-203.08889771 -74.45419312]
[-217.33619690 -79.14614105]
[-231.33168030 -71.80432892]
[-246.39433289 -76.58887482]
[-253.58776855 -90.66118622]
[-248.64424133 -105.67241669]
[-234.49665833 -112.71666718]
[-219.53852844 -107.61470795]
[-212.64425659 -93.39344025]
[-198.39694214 -88.70149231]
[-184.14964294 -84.00954437]
[-169.64082336 -87.37754059]
[-158.95333862 -75.71185303]
[-144.70603943 -71.01990509]
[-130.45874023 -66.32794952]
[-116.21144104 -61.63600540]
[-101.96413422 -56.94405365]
[-87.71683502 -52.25210571]
[-82.68359375 -57.81236649]
[-87.28131104 -72.09035492]
[-72.61711884 -68.93289185]
[-67.58388519 -74.49315643]
[-73.66676331 -88.20440674]
[-79.74964142 -101.91566467]
[-93.31544495 -111.12983704]
[-91.84894562 -127.46328735]
[-76.85874939 -134.11355591]
[-63.76549149 -124.23941803]
[-66.03838348 -107.99855042]
[-59.95550537 -94.28729248]
[-53.87262726 -80.57603455]
[-43.69609070 -69.55613708]
[-30.51146317 -62.40312195]
[-17.32683563 -55.25011063]
[-4.14220762 -48.09709930]
[9.04242039 -40.94408417]
[22.37146187 -49.44813919]
[38.16370773 -50.21448517]
[44.78689194 -63.67306900]
[51.41007233 -77.13165283]
[58.03325653 -90.59023285]
[64.65644073 -104.04882050]
[71.27962494 -117.50740051]
[77.90280151 -130.96598816]
[84.52598572 -144.42456055]
[79.19684601 -159.30326843]
[86.02484131 -173.55647278]
[100.95906067 -178.72801208]
[115.13928223 -171.74971008]
[120.15263367 -156.76164246]
[113.02478790 -142.65599060]
[97.98456573 -137.80137634]
[91.36138916 -124.34280396]
[84.73820496 -110.88421631]
[78.11502075 -97.42563629]
[71.49183655 -83.96704865]
[64.86865997 -70.50846863]
[58.24547577 -57.04988480]
[51.62229156 -43.59130478]
[56.17329407 -38.98651123]
[59.67526627 -33.51309204]
[61.96554184 -27.40700340]
[62.93392563 -20.93394089]
[62.52798080 -14.37777901]
[60.75576401 -8.02812004]
[57.68588638 -2.16750598]
[53.44494247 2.94115353]
[60.85868073 15.98095798]
[68.27241516 29.02076149]
[75.68615723 42.06056595]
[83.09989166 55.10036850]
[90.51363373 68.14017487]
[97.92736816 81.17997742]
[117.25562286 84.35256958]
[127.06126404 105.69333649]
[140.51985168 112.31651306]
[153.97842407 118.93969727]
[167.43701172 125.56288147]
[180.89559937 132.18606567]
[194.35417175 138.80924988]
[208.04205322 131.74183655]
[223.09092712 134.06230164]
[233.76161194 144.67362976]
[236.10969543 159.35780334]
[249.56826782 165.98097229]
[263.02685547 172.60415649]
[279.90808105 174.17285156]
[283.07388306 190.82859802]
[267.94543457 198.48144531]
[256.40368652 186.06274414]
[242.94508362 179.43955994]
[229.48651123 172.81637573]
[216.41911316 179.91433716]
[201.50135803 177.93319702]
[190.48181152 167.42497253]
[187.73098755 152.26782227]
[174.27241516 145.64465332]
[160.81382751 139.02146912]
[147.35523987 132.39828491]
[133.89666748 125.77510071]
[120.43807983 119.15191650]
[107.62516022 126.95121765]
[107.32692719 141.94824219]
[107.02869415 156.94528198]
[106.73046112 171.94232178]
[106.43222809 186.93936157]
[106.13399506 201.93638611]
[105.83576202 216.93342590]
[105.53752899 231.93046570]
[116.08250427 249.06875610]
[105.50423431 265.21679688]
[105.80246735 280.21380615]
[106.10070038 295.21084595]
[115.03952789 308.95965576]
[107.36199188 323.45059204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[8 151]
[9 150]
[10 149]
[11 148]
[12 147]
[13 146]
[14 145]
[15 144]
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 109]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[42 53]
[43 52]
[44 51]
[64 73]
[65 72]
[66 71]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[117 143]
[118 142]
[119 141]
[120 140]
[121 139]
[122 138]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
