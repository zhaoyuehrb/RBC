%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAGGGGCUCCUCUGGGGAGGGUGGGGGUAGAUGAGAGUGGGGACUUGGAUCUGCCUGCCAGGCCGUCCUGGGCGCUGCAGGAAGCAACAUGACUUAGGUAACUGCCCAGAGGUCCCAGGCAUCUUCAAGA\
) } def
/len { sequence length } bind def

/coor [
[78.18745422 402.99230957]
[74.37311554 388.38568115]
[74.64220428 373.29165649]
[78.97473145 358.83026123]
[87.04920959 346.07467651]
[98.26646423 335.97140503]
[111.79408264 329.27020264]
[108.99718475 314.53326416]
[106.20027924 299.79632568]
[96.34384918 292.68322754]
[93.93641663 280.35903931]
[100.81758881 269.37765503]
[98.36692810 254.57920837]
[95.91626740 239.78076172]
[93.46561432 224.98229980]
[91.01495361 210.18385315]
[88.56429291 195.38539124]
[86.11363220 180.58694458]
[83.66297150 165.78848267]
[73.95027924 154.49632263]
[79.32898712 139.61747742]
[76.87832642 124.81902313]
[68.43544006 112.42072296]
[55.56386948 104.71861267]
[42.69229126 97.01649475]
[29.64369583 89.61824036]
[16.42525291 82.52791595]
[3.12460375 75.59302521]
[-10.25642300 68.81452179]
[-23.63744926 62.03601456]
[-37.01847458 55.25751114]
[-50.39950180 48.47900391]
[-63.78052902 41.70050049]
[-77.16155243 34.92199707]
[-90.54257965 28.14349174]
[-105.39734650 32.83111572]
[-118.87104797 25.76613045]
[-123.24843597 11.57549667]
[-136.62945557 4.79699230]
[-150.01048279 -1.98151243]
[-163.39151001 -8.76001740]
[-179.72763062 -7.32357264]
[-188.91682434 -20.90630722]
[-181.50604248 -35.53546906]
[-165.11886597 -36.16183090]
[-156.61300659 -22.14104462]
[-143.23197937 -15.36253929]
[-129.85095215 -8.58403397]
[-116.46993256 -1.80552971]
[-102.43916321 -6.67103529]
[-88.77233887 0.01271456]
[-83.76407623 14.76246452]
[-70.38304901 21.54096794]
[-57.00202560 28.31947327]
[-43.62099838 35.09797668]
[-30.23997116 41.87648392]
[-16.85894394 48.65498734]
[-3.47791815 55.43349075]
[9.90310860 62.21199799]
[17.36122513 62.43043900]
[23.51558113 69.30947113]
[36.73402405 76.39980316]
[41.56630707 75.86955261]
[46.76942444 78.43521118]
[50.39440536 84.14492035]
[63.26597977 91.84703827]
[76.13755798 99.54914856]
[82.77373505 85.67994690]
[95.78695679 79.49285889]
[108.85261536 82.65915680]
[120.29289246 72.95761108]
[131.73316956 63.25606155]
[143.17344666 53.55451202]
[154.61372375 43.85296249]
[166.05400085 34.15141678]
[177.37977600 24.31642914]
[188.58947754 14.34935665]
[193.96157837 -5.01590109]
[212.95933533 -8.31045055]
[223.68954468 -18.79199219]
[234.41973877 -29.27353287]
[236.04481506 -45.23406982]
[249.61390686 -53.79324341]
[264.71795654 -48.38519287]
[269.77044678 -33.15850830]
[260.89553833 -19.79380035]
[244.90127563 -18.54332924]
[234.17108154 -8.06178761]
[223.44087219 2.41975379]
[224.23359680 12.72165966]
[219.07305908 21.92693520]
[209.47784424 26.82673264]
[198.55654907 25.55906105]
[187.34684753 35.52613449]
[184.41108704 42.38562012]
[175.75555420 45.59169388]
[164.31527710 55.29323959]
[152.87500000 64.99478912]
[141.43472290 74.69633484]
[129.99443054 84.39788818]
[118.55416107 94.09943390]
[119.92537689 105.10533905]
[114.94716644 115.68743134]
[104.57913208 122.30223846]
[91.67678070 122.36836243]
[94.12744141 137.16680908]
[104.01541138 149.51745605]
[98.46142578 163.33782959]
[100.91208649 178.13627625]
[103.36274719 192.93473816]
[105.81340790 207.73318481]
[108.26406860 222.53164673]
[110.71472931 237.33009338]
[113.16539001 252.12855530]
[115.61604309 266.92700195]
[127.63381195 280.82159424]
[120.93721771 296.99942017]
[123.73412323 311.73635864]
[126.53102112 326.47329712]
[141.57318115 327.75228882]
[155.71208191 333.04324341]
[167.89849854 341.95355225]
[177.22813416 353.82202148]
[183.00866699 367.76791382]
[184.81112671 382.75637817]
[182.50178528 397.67514038]
[176.25198364 411.41714478]
[166.52552795 422.96264648]
[154.04415894 431.45486450]
[139.73408508 436.26367188]
[124.65721893 437.03216553]
[109.93235016 433.70336914]
[96.65217590 426.52426147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 119]
[8 118]
[9 117]
[12 115]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[21 106]
[22 105]
[23 67]
[24 66]
[25 65]
[26 62]
[27 61]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[38 49]
[39 48]
[40 47]
[41 46]
[70 101]
[71 100]
[72 99]
[73 98]
[74 97]
[75 96]
[76 94]
[77 93]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
