%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCGAUCCGAGCAUGAGCCUGGAGCGCGAGCUUCGCCAGCUGAGCAAGGCGAAAGCCAAGGCGCAGAGGGCCGGGCAGCGGCGCGAAGAGGCCGCGCUGUGCCACCAGCUGG\
) } def
/len { sequence length } bind def

/coor [
[-23.03949928 199.32467651]
[-40.66029739 194.73626709]
[-53.07563019 203.15406799]
[-60.64383698 219.87310791]
[-78.12046051 220.60432434]
[-90.30329132 229.35523987]
[-102.48612213 238.10617065]
[-109.18057251 252.44125366]
[-124.03141785 253.58213806]
[-136.21424866 262.33303833]
[-148.39707947 271.08395386]
[-160.57992554 279.83489990]
[-167.27436829 294.16998291]
[-182.12521362 295.31085205]
[-194.30804443 304.06176758]
[-200.56245422 319.22140503]
[-216.85176086 321.11624146]
[-226.41893005 307.79702759]
[-219.42208862 292.96545410]
[-203.05895996 291.87893677]
[-190.87612915 283.12802124]
[-185.05308533 269.41885376]
[-169.33084106 267.65203857]
[-157.14801025 258.90112305]
[-144.96516418 250.15022278]
[-132.78233337 241.39929199]
[-126.95928955 227.69012451]
[-111.23704529 225.92332458]
[-99.05420685 217.17240906]
[-86.87137604 208.42149353]
[-84.56684113 196.46162415]
[-74.37291718 189.08580017]
[-61.49343491 190.73873901]
[-49.07810211 182.32093811]
[-49.39077759 170.76107788]
[-43.97428131 160.40751648]
[-34.09786606 153.94013977]
[-22.20143509 153.09727478]
[-11.29317760 158.20996094]
[1.55967999 150.47665405]
[14.41253757 142.74334717]
[27.26539612 135.01004028]
[40.11825180 127.27673340]
[52.97111130 119.54342651]
[65.82396698 111.81011963]
[63.93683624 102.63217926]
[64.47130585 93.27748871]
[67.39149475 84.37420654]
[72.50130463 76.52018738]
[79.45761871 70.24280548]
[87.79334259 65.96358490]
[85.76834106 51.10090256]
[83.74333954 36.23821640]
[73.27923584 23.61147881]
[79.23516846 8.33211899]
[95.48419189 6.11823416]
[105.31069946 19.24727821]
[98.60602570 34.21321869]
[100.63101959 49.07590103]
[102.65602112 63.93858719]
[106.40150452 64.41207123]
[110.07720184 65.27349854]
[113.64305115 66.51347351]
[122.06085968 54.09814072]
[130.47866821 41.68280792]
[126.03080750 26.69112396]
[132.30740356 12.36847115]
[146.34483337 5.47756767]
[161.51504517 9.27208710]
[170.65515137 21.96037292]
[169.44944763 37.55140686]
[158.46723938 48.68357468]
[142.89399719 50.10061264]
[134.47619629 62.51594925]
[126.05838776 74.93128204]
[133.76910400 87.07221985]
[136.13719177 101.25846863]
[150.69380188 104.87854004]
[165.25042725 108.49861145]
[179.80703735 112.11867523]
[189.02761841 111.15250397]
[194.70616150 116.03888702]
[209.15940857 120.05181885]
[223.61265564 124.06474304]
[238.06590271 128.07766724]
[252.51916504 132.09059143]
[266.97241211 136.10351562]
[281.42565918 140.11643982]
[294.21237183 131.11454773]
[309.78939819 132.48933411]
[320.80175781 143.59167480]
[322.04974365 159.17938232]
[312.94409180 171.89241028]
[297.78421021 175.72807312]
[283.72814941 168.87525940]
[277.41271973 154.56968689]
[262.95947266 150.55676270]
[248.50624084 146.54383850]
[234.05297852 142.53091431]
[219.59973145 138.51799011]
[205.14648438 134.50506592]
[190.69323730 130.49214172]
[176.18696594 126.67529297]
[161.63035583 123.05522919]
[147.07373047 119.43515778]
[132.51712036 115.81508636]
[116.44070435 132.20533752]
[93.73646545 135.61247253]
[73.55727386 124.66297913]
[60.70441818 132.39628601]
[47.85156250 140.12959290]
[34.99870300 147.86289978]
[22.14584541 155.59620667]
[9.29298782 163.32951355]
[-3.55986977 171.06282043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[5 30]
[6 29]
[7 28]
[9 26]
[10 25]
[11 24]
[12 23]
[14 21]
[15 20]
[39 115]
[40 114]
[41 113]
[42 112]
[43 111]
[44 110]
[45 109]
[51 60]
[52 59]
[53 58]
[63 75]
[64 74]
[65 73]
[77 106]
[78 105]
[79 104]
[80 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
