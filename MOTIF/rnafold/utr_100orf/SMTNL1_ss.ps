%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGGAGCAGAAGGAAGGGAAGCUCUCUGAGGAUGGGACCACCGUCUCCCCAGCUGCGGACAACCCUGAGAUGUCAGGAGGUGGAGCCCCUGCAGAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[-8.28606510 341.63955688]
[-23.26233292 342.48300171]
[-36.99149323 336.44064331]
[-46.48549652 324.82754517]
[-49.67804337 310.17123413]
[-45.87350082 295.66003418]
[-58.29767990 304.06478882]
[-70.72186279 312.46954346]
[-83.14604187 320.87426758]
[-80.43970490 335.86077881]
[-84.06920624 350.65087891]
[-93.40572357 362.68206787]
[-106.83164978 369.86987305]
[-122.02085114 370.96896362]
[-136.34172058 365.78890991]
[-147.31306458 355.22723389]
[-153.03404236 341.11373901]
[-152.51345825 325.89373779]
[-145.84150696 312.20413208]
[-134.17414856 302.41677856]
[-119.53281403 298.22735596]
[-104.45420837 300.36172485]
[-91.55078888 308.45010376]
[-79.12660980 300.04534912]
[-66.70242310 291.64059448]
[-54.27824402 283.23587036]
[-43.43180466 272.87466431]
[-34.46763229 260.84786987]
[-25.50345802 248.82107544]
[-16.53928566 236.79429626]
[-7.75956059 224.63220215]
[0.83367258 212.33763123]
[9.42690563 200.04307556]
[9.44801235 195.11054993]
[12.68622112 190.17866516]
[18.93782425 187.28274536]
[28.26460075 175.53492737]
[26.31484795 160.81303406]
[35.60617447 148.76620483]
[51.06106567 146.82095337]
[60.38784027 135.07312012]
[69.71461487 123.32530975]
[79.04138947 111.57748413]
[88.36816406 99.82966614]
[94.16120911 85.99346161]
[95.98672485 71.10495758]
[97.81224823 56.21645737]
[99.63776398 41.32795334]
[87.32192993 32.15103531]
[81.25930786 18.03933334]
[83.08071136 2.78882241]
[92.29618835 -9.49818420]
[106.42682648 -15.51654530]
[121.67154694 -13.64735031]
[133.92961121 -4.39340401]
[139.90364075 9.75602913]
[137.98667908 24.99482155]
[128.69435120 37.22381592]
[114.52626801 43.15347290]
[112.70074463 58.04197311]
[110.87522888 72.93047333]
[109.04971313 87.81897736]
[114.77867889 92.65932465]
[128.89135742 87.57679749]
[126.23660278 102.34002686]
[131.96556091 107.18038177]
[146.34025574 102.89456940]
[160.71495056 98.60875702]
[175.08964539 94.32293701]
[189.46434021 90.03712463]
[200.33229065 77.75627136]
[216.34564209 81.29246521]
[221.03121948 97.00798035]
[209.56890869 108.73603821]
[193.75015259 104.41181946]
[179.37545776 108.69763184]
[165.00076294 112.98344421]
[150.62606812 117.26925659]
[136.25137329 121.55506897]
[112.83126068 122.22887421]
[100.11598206 109.15644073]
[90.78920746 120.90425873]
[81.46243286 132.65208435]
[72.13565826 144.39990234]
[62.80888367 156.14772034]
[64.41896057 171.64111328]
[54.79293060 183.42221069]
[40.01242065 184.86169434]
[30.68564415 196.60951233]
[21.72147179 208.63630676]
[13.12823868 220.93086243]
[4.53500509 233.22543335]
[2.12106276 242.21649170]
[-4.51249838 245.75846863]
[-13.47667122 257.78524780]
[-22.44084549 269.81204224]
[-31.40501785 281.83883667]
[-16.73669624 278.70190430]
[-2.24152470 282.56063843]
[8.92572880 292.57525635]
[14.33459282 306.56613159]
[12.80786705 321.48822021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[8 24]
[9 23]
[27 97]
[28 96]
[29 95]
[30 94]
[31 92]
[32 91]
[33 90]
[36 89]
[37 88]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[45 62]
[46 61]
[47 60]
[48 59]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
