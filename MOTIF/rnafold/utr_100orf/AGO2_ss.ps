%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCCCCUCGGCCCCGGAGCCCCUCGGCGGCGCCACCAUGUACUCGGGAGCCGGCCCCGCACUUGCACCUCCUGCGCCGCCGCCCCCCAUCCAAGGAUAUGCCUUCAAGCCUCCACCUAGACCCGACUUUGGGACCU\
) } def
/len { sequence length } bind def

/coor [
[96.43275452 139.46894836]
[88.97042084 140.21966553]
[83.11458588 154.02941895]
[77.25874329 167.83915710]
[71.40290833 181.64891052]
[65.54706573 195.45866394]
[70.20524597 210.81056213]
[60.98865891 223.94198608]
[44.96748734 224.77961731]
[34.43180084 212.68089294]
[37.46367645 196.92694092]
[51.73731613 189.60281372]
[57.59315872 175.79307556]
[63.44899750 161.98332214]
[69.30483246 148.17356873]
[75.16067505 134.36383057]
[64.02858734 114.63820648]
[65.24982452 93.96475220]
[76.38264465 78.84761810]
[67.89343262 66.48098755]
[59.40422821 54.11436844]
[43.73616028 57.55020523]
[27.98405457 54.73359680]
[14.54219532 46.12255478]
[5.44225883 33.05352783]
[2.04626226 17.53409195]
[4.84276581 1.93454695]
[13.37683105 -11.37407303]
[4.61421633 -23.54849625]
[-4.14839888 -35.72291946]
[-12.91101360 -47.89734268]
[-21.67362785 -60.07176590]
[-30.43624306 -72.24619293]
[-39.19885635 -84.42061615]
[-47.96147156 -96.59503937]
[-56.72408676 -108.76946259]
[-72.68340302 -105.80348206]
[-88.28783417 -110.06001282]
[-100.44309235 -120.64266968]
[-106.76161194 -135.40588379]
[-106.03148651 -151.38970947]
[-98.44854736 -165.41333008]
[-107.48021698 -177.38951111]
[-116.51188660 -189.36569214]
[-125.54356384 -201.34187317]
[-144.33409119 -203.19488525]
[-155.67663574 -217.89138794]
[-152.80706787 -235.91166687]
[-162.36328125 -247.47361755]
[-171.91949463 -259.03558350]
[-181.47569275 -270.59753418]
[-197.11314392 -270.53274536]
[-209.10064697 -280.57434082]
[-211.77807617 -295.98101807]
[-203.88121033 -309.47817993]
[-189.13873291 -314.69293213]
[-174.51158142 -309.16296387]
[-166.90625000 -295.49938965]
[-169.91374207 -280.15374756]
[-160.35752869 -268.59179688]
[-150.80133057 -257.02984619]
[-141.24511719 -245.46788025]
[-129.82843018 -246.87532043]
[-119.05271149 -242.51760864]
[-111.67234039 -233.38256836]
[-109.63467407 -221.69458008]
[-113.56738281 -210.37353516]
[-104.53571320 -198.39735413]
[-95.50403595 -186.42118835]
[-86.47236633 -174.44500732]
[-72.97624969 -177.83444214]
[-59.16625595 -175.80274963]
[-47.14356232 -168.62553406]
[-38.75021362 -157.36378479]
[-35.28692245 -143.70718384]
[-37.31156921 -129.72065735]
[-44.54966354 -117.53207397]
[-35.78704834 -105.35765076]
[-27.02443504 -93.18322754]
[-18.26181984 -81.00880432]
[-9.49920464 -68.83438110]
[-0.73659021 -56.65995789]
[8.02602482 -44.48553467]
[16.78863907 -32.31111145]
[25.55125427 -20.13668823]
[39.12041092 -23.87465286]
[53.17930603 -22.74086189]
[66.02852631 -16.85181046]
[76.10786438 -6.90003777]
[82.18571472 5.92725515]
[83.50961304 20.08980751]
[79.89926910 33.87924576]
[71.77085114 45.62516022]
[80.26006317 57.99178314]
[88.74926758 70.35840607]
[107.17074585 69.11661530]
[123.16042328 78.34825897]
[131.29574585 94.92262268]
[146.25015259 96.09117889]
[161.20455933 97.25974274]
[169.12829590 89.66073608]
[179.71737671 87.76163483]
[189.38319397 91.95801544]
[194.98625183 100.62075043]
[209.87376404 102.45431519]
[222.17553711 92.53251648]
[237.88085938 94.29845428]
[247.67204285 106.70442963]
[245.74015808 122.39019775]
[233.23135376 132.04966736]
[217.56689453 129.95205688]
[208.04020691 117.34182739]
[193.15269470 115.50826263]
[176.03216553 124.39357758]
[160.03601074 112.21414948]
[145.08158875 111.04559326]
[130.12718201 109.87703705]
[131.95855713 118.75051117]
[131.18638611 128.72758484]
[139.67558289 141.09420776]
[148.16479492 153.46083069]
[156.65400696 165.82745361]
[165.14320374 178.19407654]
[173.63241577 190.56069946]
[189.21430969 193.20269775]
[198.29595947 206.13711548]
[195.48937988 221.69020081]
[182.45967102 230.63459778]
[166.93711853 227.66374207]
[158.13098145 214.54019165]
[161.26579285 199.04991150]
[152.77658081 186.68328857]
[144.28738403 174.31666565]
[135.79817200 161.95004272]
[127.30895996 149.58341980]
[118.81975555 137.21679688]
[111.35742188 137.96751404]
[112.87852478 152.89018250]
[114.36037445 167.81681824]
[99.43572998 169.31842041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[19 95]
[20 94]
[21 93]
[28 85]
[29 84]
[30 83]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[42 70]
[43 69]
[44 68]
[45 67]
[48 62]
[49 61]
[50 60]
[51 59]
[98 117]
[99 116]
[100 115]
[104 113]
[105 112]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
