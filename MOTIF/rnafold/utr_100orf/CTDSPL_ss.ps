%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCGCGCCGCGCACCCAUGGACGGCCCGGCCAUCAUCACCCAGGUGACCAACCCCAAGGAGGACGAGGGCCGGUUGCCGGGCGCGGGCGAGAAAGCCUCCCAGUGCAACGUCAGCU\
) } def
/len { sequence length } bind def

/coor [
[79.96640015 230.78883362]
[73.65608215 244.39691162]
[67.34575653 258.00497437]
[61.03543091 271.61306763]
[54.72510529 285.22113037]
[60.39673996 299.97268677]
[53.90002060 314.37991333]
[39.08933640 319.89526367]
[24.75160027 313.24658203]
[19.39314079 298.37841797]
[26.19303703 284.11178589]
[41.11702728 278.91082764]
[47.42735291 265.30273438]
[53.73767471 251.69465637]
[60.04800034 238.08657837]
[66.35832214 224.47850037]
[70.70113373 210.12092590]
[72.99087524 195.29672241]
[75.28061676 180.47251892]
[77.57035065 165.64831543]
[75.69261169 162.53401184]
[75.29946136 158.32522583]
[76.90199280 153.76319885]
[80.64499664 149.79461670]
[84.06279755 135.18919373]
[87.48059845 120.58376312]
[75.90991974 100.30766296]
[86.95899963 79.74268341]
[83.16931152 65.22930145]
[79.37962341 50.71591949]
[75.58992767 36.20253754]
[71.43082428 21.79067230]
[66.90501404 7.48972702]
[62.37920761 -6.81121874]
[57.85339737 -21.11216545]
[53.32759094 -35.41310883]
[48.80178070 -49.71405792]
[37.26126862 -60.53658676]
[40.79790497 -75.00522614]
[36.27209473 -89.30617523]
[24.73158455 -100.12870026]
[28.26821899 -114.59734344]
[23.74240875 -128.89828491]
[9.99648857 -136.22546387]
[5.61039734 -150.79312134]
[12.68044567 -163.85260010]
[8.15463638 -178.15354919]
[-8.57073975 -191.42562866]
[-3.73047280 -211.42265320]
[-9.33772850 -225.33518982]
[-14.94498444 -239.24772644]
[-29.08499336 -246.82662964]
[-31.83387375 -262.63241577]
[-21.08292198 -274.54025269]
[-5.07934809 -273.41546631]
[3.90027642 -260.12088013]
[-1.03244805 -244.85498047]
[4.57480812 -230.94244385]
[10.18206406 -217.02990723]
[19.00269508 -214.86968994]
[25.89863777 -208.74960327]
[29.18909264 -199.98832703]
[27.99192238 -190.56652832]
[22.45558167 -182.67935181]
[26.98139191 -168.37841797]
[40.27755356 -161.76420593]
[45.07109070 -147.32548523]
[38.04335403 -133.42410278]
[42.56916428 -119.12315369]
[53.78595734 -109.32351685]
[50.57304001 -93.83197784]
[55.09885025 -79.53103638]
[66.31564331 -69.73139954]
[63.10272598 -54.23986435]
[67.62853241 -39.93891907]
[72.15434265 -25.63797379]
[76.68015289 -11.33702755]
[81.20596313 2.96391797]
[85.73177338 17.26486397]
[89.58447266 20.26392746]
[91.52433014 25.76226616]
[90.10330963 32.41284561]
[93.89300537 46.92622757]
[97.68269348 61.43960953]
[101.47238159 75.95299530]
[107.22769928 77.01768494]
[112.55643463 79.43881226]
[117.14408112 83.07347870]
[120.71986389 87.70716095]
[123.07273865 93.06637573]
[124.06385040 98.83482361]
[138.52764893 102.80954742]
[152.99145508 106.78427124]
[167.45526123 110.75899506]
[181.06669617 102.72753906]
[196.34945679 106.75402832]
[204.23655701 120.44961548]
[200.04872131 135.68896484]
[186.27050781 143.43081665]
[171.07629395 139.08209229]
[163.48052979 125.22279358]
[149.01673889 121.24806976]
[134.55293274 117.27334595]
[120.08912659 113.29862976]
[112.31148529 120.70878601]
[102.08602905 124.00156403]
[98.66822815 138.60699463]
[95.25042725 153.21241760]
[92.39456177 167.93804932]
[90.10482025 182.76225281]
[87.81507874 197.58645630]
[85.52534485 212.41067505]
[96.64132690 202.33917236]
[111.12440491 198.43530273]
[125.79624176 201.55575562]
[137.43705750 211.01573181]
[143.49224854 224.73924255]
[142.63299561 239.71461487]
[135.04783630 252.65545654]
[122.40138245 260.72189331]
[107.46891785 262.14367676]
[93.52741241 256.60885620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[17 112]
[18 111]
[19 110]
[20 109]
[24 108]
[25 107]
[26 106]
[28 85]
[29 84]
[30 83]
[31 82]
[32 79]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[39 72]
[40 71]
[42 69]
[43 68]
[46 65]
[47 64]
[49 59]
[50 58]
[51 57]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
