%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUGCGCAUGCGCCCCGGGCGCCGCCGACUGAAGUAGCAAUGGACGCGCUGGAGUCGUUGUUGGACGAAGUCGCUCUGGAGGGGCUCGAUGGCCUGUGUCUGCCAGCGCUGUGGAGCCGGCUGGAGACGCGAGUGCCGC\
) } def
/len { sequence length } bind def

/coor [
[128.23884583 173.31871033]
[113.24983978 173.89285278]
[101.04571533 165.17166138]
[96.73369598 150.80480957]
[102.11910248 136.80361938]
[95.95705414 150.47947693]
[89.79499817 164.15533447]
[91.97395325 180.40907288]
[78.82382202 190.20735168]
[63.87232971 183.47052002]
[62.50028610 167.12886047]
[76.11914062 157.99328613]
[82.28118896 144.31742859]
[88.44324493 130.64157104]
[76.08094025 118.07289886]
[72.88608551 102.28291321]
[78.31087494 88.73406982]
[67.76351929 78.06855774]
[57.21615982 67.40303802]
[46.66880417 56.73751831]
[36.12144852 46.07200241]
[20.91627121 41.70013809]
[17.46848679 27.21007156]
[6.92112970 16.54455376]
[-8.28404713 12.17269325]
[-11.73183060 -2.31737399]
[-22.27918816 -12.98289204]
[-33.40396881 -23.04466248]
[-45.07166672 -32.47147751]
[-56.73936462 -41.89828873]
[-68.40706635 -51.32510376]
[-83.73432159 -45.22587585]
[-99.95665741 -47.65105820]
[-112.68390656 -57.84912109]
[-118.51972961 -72.97796631]
[-115.96764374 -88.89645386]
[-127.84246826 -98.06098175]
[-139.71728516 -107.22550964]
[-151.59211731 -116.39004517]
[-163.46693420 -125.55457306]
[-175.34175110 -134.71910095]
[-187.21658325 -143.88363647]
[-199.09140015 -153.04815674]
[-207.87333679 -155.84707642]
[-211.12567139 -162.55152893]
[-222.79336548 -171.97834778]
[-237.74166870 -167.81564331]
[-252.27008057 -173.26588440]
[-260.79211426 -186.23332214]
[-260.03091431 -201.73170471]
[-250.27914429 -213.80160522]
[-235.28656006 -217.80189514]
[-220.81813049 -212.19438171]
[-212.43725586 -199.13526917]
[-213.36656189 -183.64604187]
[-201.69885254 -174.21923828]
[-189.92686462 -164.92298889]
[-178.05204773 -155.75845337]
[-166.17723083 -146.59391785]
[-154.30239868 -137.42939758]
[-142.42758179 -128.26486206]
[-130.55276489 -119.10033417]
[-118.67793274 -109.93580627]
[-106.80311584 -100.77127838]
[-94.49862671 -106.79572296]
[-80.73265076 -106.91422272]
[-68.20614624 -101.04623413]
[-59.40162277 -90.29139709]
[-56.09122849 -76.72396088]
[-58.98025131 -62.99280167]
[-47.31255341 -53.56598663]
[-35.64485550 -44.13917542]
[-23.97715569 -34.71236038]
[-22.47791862 -49.63724899]
[-9.99972343 -57.96158981]
[4.35640144 -53.61398697]
[10.11975098 -39.76538086]
[3.08679891 -26.51632309]
[-11.61366940 -23.53024864]
[-1.06631327 -12.86473083]
[13.38444614 -9.25573826]
[17.58664703 5.99719810]
[28.13400459 16.66271591]
[42.58476257 20.27170753]
[46.78696442 35.52464294]
[57.33432007 46.19016266]
[67.88167572 56.85567856]
[78.42903137 67.52119446]
[88.97639465 78.18671417]
[109.83787537 74.63088226]
[128.02563477 89.35507965]
[129.12498474 114.97328949]
[142.86863708 120.98260498]
[156.61230469 126.99192047]
[170.42204285 132.84776306]
[184.29617310 138.54939270]
[198.23295593 144.09611511]
[212.23066711 149.48722839]
[226.22837830 154.87834167]
[240.22608948 160.26947021]
[254.22378540 165.66058350]
[268.22149658 171.05169678]
[277.43704224 171.22573853]
[282.46881104 176.72200012]
[296.34292603 182.42362976]
[310.21704102 188.12525940]
[324.09118652 193.82690430]
[337.96530151 199.52853394]
[351.96301270 204.91964722]
[366.07736206 209.99757385]
[380.19171143 215.07550049]
[396.22628784 211.63693237]
[407.01922607 223.98377991]
[401.46765137 239.41465759]
[385.28256226 242.05560303]
[375.11376953 229.18983459]
[360.99942017 224.11190796]
[346.88510132 219.03399658]
[342.19305420 220.26013184]
[336.68414307 218.49385071]
[332.26367188 213.40264893]
[318.38955688 207.70101929]
[304.51541138 201.99938965]
[290.64129639 196.29776001]
[276.76718140 190.59613037]
[262.83038330 185.04940796]
[248.83267212 179.65829468]
[234.83496094 174.26716614]
[220.83724976 168.87605286]
[206.83955383 163.48493958]
[192.84184265 158.09382629]
[185.40943909 158.62945557]
[178.59454346 152.42352295]
[164.72041321 146.72189331]
[157.27792358 147.09179688]
[150.60298157 140.73558044]
[136.85932922 134.72625732]
[123.11566925 128.71694946]
[136.50067139 135.48759460]
[142.94046021 149.03489685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[7 12]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[23 83]
[24 82]
[26 80]
[27 79]
[28 73]
[29 72]
[30 71]
[31 70]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[45 56]
[46 55]
[92 138]
[93 137]
[94 136]
[95 134]
[96 133]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
