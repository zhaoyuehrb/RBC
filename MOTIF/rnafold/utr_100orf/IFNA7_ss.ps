%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCACCUCAGGUAGCCUAGUGAUAUUUGCAAAAUCCCAAUGGCCCGGUCCUUUUCUUUACUGAUGGUCGUGCUGGUACUCAGCUACAAAUCCAUCUGCUCUCUGGGCUGUGAUCUGCCUCAGACCCACAGCCUGCGUA\
) } def
/len { sequence length } bind def

/coor [
[193.42152405 430.95416260]
[183.35952759 419.82958984]
[177.61410522 405.97354126]
[176.85156250 390.99295044]
[181.16033936 376.62512207]
[190.04074097 364.53634644]
[202.46287537 356.12857056]
[216.98612976 352.37689209]
[231.92620850 353.71636963]
[245.55194092 359.99267578]
[237.62205505 347.26016235]
[229.69216919 334.52764893]
[221.76228333 321.79513550]
[208.46621704 315.08218384]
[207.73831177 299.27774048]
[199.80842590 286.54522705]
[191.87854004 273.81271362]
[178.99751282 272.66497803]
[168.99661255 264.16180420]
[165.69535828 251.25508118]
[170.52459717 238.62985229]
[162.88034058 225.72383118]
[155.23609924 212.81779480]
[143.55455017 209.48707581]
[137.09510803 198.72822571]
[139.81451416 186.06604004]
[132.45970154 172.99291992]
[125.10487366 159.91978455]
[117.75006104 146.84666443]
[110.39524078 133.77352905]
[101.61508942 135.80921936]
[92.47688293 135.56718445]
[83.57006073 132.99862671]
[75.48523712 128.20684814]
[68.77507019 121.44452667]
[63.91665268 113.10105133]
[61.27791595 103.68029022]
[61.09047318 93.77033234]
[63.43075943 84.00675201]
[68.21105194 75.03189850]
[75.18110657 67.45260620]
[66.41848755 55.27817917]
[57.65587616 43.10375595]
[48.89326096 30.92933273]
[40.13064575 18.75490952]
[31.36803055 6.58048630]
[22.33635712 -5.39569330]
[13.04010868 -17.16768456]
[3.74386001 -28.93967438]
[-5.55238819 -40.71166611]
[-20.73870277 -38.41571045]
[-35.03255081 -44.03545380]
[-44.58895874 -56.05920410]
[-46.83729935 -71.25263977]
[-41.17278290 -85.52880859]
[-29.11913300 -95.04747772]
[-13.91872311 -97.24818420]
[0.33961356 -91.53894806]
[9.82045650 -79.45552063]
[11.97350597 -64.24828339]
[6.21960258 -50.00791550]
[15.51585102 -38.23592377]
[24.81209946 -26.46393204]
[34.10834885 -14.69194126]
[38.73932266 -13.25224018]
[42.48170853 -8.84064007]
[43.54245377 -2.18212843]
[52.30506897 9.99229527]
[61.06768417 22.16671753]
[69.83029938 34.34114075]
[78.59291077 46.51556396]
[87.35552979 58.68998718]
[102.24304199 56.85641861]
[107.78975677 42.91963577]
[113.33647919 28.98285484]
[118.88319397 15.04607105]
[113.88414764 -0.19824210]
[122.80589294 -13.53173637]
[138.80442810 -14.72609615]
[149.60704041 -2.86510992]
[146.92691040 12.95248795]
[132.81997681 20.59279060]
[127.27326202 34.52957153]
[121.72653961 48.46635437]
[116.17982483 62.40313721]
[134.38104248 81.44998932]
[136.63439941 106.47145081]
[123.46836090 126.41871643]
[130.82318115 139.49183655]
[138.17800903 152.56497192]
[145.53282166 165.63809204]
[152.88764954 178.71122742]
[168.92895508 187.67672729]
[168.14212036 205.17355347]
[175.78636169 218.07957458]
[183.43061829 230.98559570]
[200.42149353 234.98272705]
[209.12841797 249.72096252]
[204.61105347 265.88284302]
[212.54093933 278.61535645]
[220.47082520 291.34786987]
[234.33410645 298.97152710]
[234.49479675 313.86526489]
[242.42468262 326.59777832]
[250.35456848 339.33029175]
[258.28445435 352.06280518]
[268.34622192 363.18759155]
[280.22103882 372.35211182]
[292.09588623 381.51663208]
[303.97070312 390.68118286]
[315.84552002 399.84570312]
[327.72033691 409.01022339]
[339.59515381 418.17477417]
[357.86361694 420.16650391]
[363.96978760 436.58212280]
[376.04583740 445.47982788]
[388.12188721 454.37750244]
[400.19796753 463.27520752]
[416.53613281 467.80294800]
[416.70822144 484.75601196]
[400.46530151 489.61444092]
[391.30026245 475.35125732]
[379.22421265 466.45355225]
[367.14816284 457.55587769]
[355.07211304 448.65817261]
[343.01721191 450.15209961]
[332.87017822 442.76864624]
[330.43063354 430.04959106]
[318.55581665 420.88507080]
[306.68099976 411.72052002]
[294.80615234 402.55599976]
[282.93133545 393.39147949]
[271.05651855 384.22692871]
[259.18170166 375.06240845]
[264.06234741 389.24618530]
[263.90026855 404.24530029]
[258.71429443 418.32031250]
[249.10580444 429.83886719]
[236.18916321 437.46514893]
[221.46232605 440.31472778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 106]
[11 105]
[12 104]
[13 103]
[15 101]
[16 100]
[17 99]
[21 96]
[22 95]
[23 94]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 64]
[48 63]
[49 62]
[50 61]
[73 85]
[74 84]
[75 83]
[76 82]
[107 134]
[108 133]
[109 132]
[110 131]
[111 130]
[112 129]
[113 128]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
