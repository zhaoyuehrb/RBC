%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCUCCCCAAACCACACCAUAGUGACAGAAUUCAUUCUCUUGGGACUGACAGACGACCCAGUGCUAGAGAAGAUCCUGUUUGGGGUAUUCCUUGCGA\
) } def
/len { sequence length } bind def

/coor [
[75.71395874 327.64810181]
[67.39086914 315.04241943]
[62.95766830 300.60208130]
[62.77373505 285.49768066]
[66.85398102 270.95367432]
[74.86764526 258.14907837]
[86.16508484 248.12188721]
[99.83047485 241.68496704]
[97.50700378 226.86601257]
[95.18352509 212.04705811]
[92.86005402 197.22810364]
[90.53658295 182.40914917]
[88.21311188 167.59017944]
[85.88964081 152.77122498]
[83.56616211 137.95227051]
[71.11034393 129.59448242]
[56.51666641 133.06213379]
[41.92298889 136.52978516]
[33.84829330 150.11561584]
[18.51159859 153.93154907]
[5.01189756 145.71366882]
[1.35832000 130.33749390]
[9.71846962 116.92542267]
[25.13241959 113.43461609]
[38.45534515 121.93609619]
[53.04902267 118.46845245]
[67.64270020 115.00080872]
[65.52111816 106.12043762]
[65.74716949 97.15943909]
[68.22064209 88.71688843]
[72.69390869 81.33553314]
[78.79385376 75.46691895]
[86.05176544 71.44399261]
[93.93863678 69.46275330]
[101.90345001 69.57396698]
[106.49430847 55.29376984]
[106.15344238 45.98375320]
[111.45637512 40.64480591]
[116.48912811 26.51429176]
[121.52187347 12.38377857]
[126.55462646 -1.74673581]
[131.58737183 -15.87724972]
[136.62013245 -30.00776291]
[136.56896973 -39.32387924]
[142.03538513 -44.49532318]
[147.50515747 -58.46248245]
[145.33287048 -74.13385010]
[157.17842102 -83.16335297]
[162.64819336 -97.13051605]
[168.11796570 -111.09767914]
[173.58773804 -125.06484222]
[163.94017029 -137.01557922]
[161.57635498 -152.19146729]
[167.13214111 -166.51029968]
[179.11306763 -176.12036133]
[194.29629517 -178.43659973]
[208.59764099 -172.83595276]
[218.17008972 -160.82496643]
[220.43873596 -145.63455200]
[214.79328918 -131.35083008]
[202.75236511 -121.81607056]
[187.55490112 -119.59506226]
[182.08512878 -105.62790680]
[176.61535645 -91.66074371]
[171.14558411 -77.69358063]
[173.70910645 -63.02124023]
[161.47230530 -52.99271011]
[156.00253296 -39.02555084]
[150.75064087 -24.97501373]
[145.71789551 -10.84449959]
[140.68513489 3.28601456]
[135.65238953 17.41652870]
[130.61964417 31.54704285]
[125.58689117 45.67755508]
[120.77450562 59.88462830]
[116.18364716 74.16482544]
[127.87562561 85.28424072]
[132.53176880 101.29315948]
[128.36932373 117.99166107]
[115.99603271 130.71356201]
[98.38512421 135.62879944]
[100.70859528 150.44775391]
[103.03206635 165.26670837]
[105.35553741 180.08566284]
[107.67900848 194.90463257]
[110.00248718 209.72358704]
[112.32595825 224.54254150]
[114.64942932 239.36149597]
[129.62911987 241.30712891]
[143.45332336 247.39547729]
[155.00137329 257.13299561]
[163.33712769 269.73028564]
[167.78483582 284.16616821]
[167.98394775 299.27038574]
[163.91830444 313.81848145]
[155.91751099 326.63113403]
[144.63015747 336.66967773]
[130.97123718 343.12030029]
[116.04803467 345.46011353]
[101.07030487 343.49945068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 27]
[17 26]
[18 25]
[35 76]
[36 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[45 68]
[46 67]
[48 65]
[49 64]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
