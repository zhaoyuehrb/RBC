%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGGCAAGGCCAUGCGCCGGAGGAGUCGGAGCCGGGCUGCGAAGCGCCGUGCGCGGGUCCGUGCCACGCGCAGCGCGUGCUGCAGGCCCUGAACGCCU\
) } def
/len { sequence length } bind def

/coor [
[189.92082214 351.71502686]
[190.60659790 346.17636108]
[184.70509338 332.38604736]
[178.80358887 318.59576416]
[172.90208435 304.80545044]
[167.00057983 291.01516724]
[161.09907532 277.22488403]
[155.19757080 263.43457031]
[143.99974060 258.57385254]
[139.02262878 246.98710632]
[143.48182678 234.76121521]
[138.01205444 220.79405212]
[124.30426788 215.08158875]
[118.55816650 200.99482727]
[124.64286041 186.65556335]
[119.17308807 172.68840027]
[113.70330811 158.72125244]
[108.23353577 144.75408936]
[102.76712799 139.58264160]
[102.81829071 130.26652527]
[97.78553772 116.13600922]
[87.49960327 110.44101715]
[83.72756958 99.30525208]
[88.43502045 88.53152466]
[83.84416199 74.25132751]
[71.14197540 69.46285248]
[63.67361832 58.36220551]
[64.01432037 45.18317413]
[71.81143188 34.79630280]
[67.66690063 20.38023949]
[63.52237701 5.96417570]
[59.37784958 -8.45188808]
[48.12874603 -19.57700348]
[52.04827118 -33.94664383]
[47.90374756 -48.36270905]
[43.75922012 -62.77877045]
[32.51011276 -73.90388489]
[36.42964172 -88.27352905]
[32.28511429 -102.68959045]
[26.81465340 -110.23059082]
[28.24336433 -117.61871338]
[24.54918098 -132.15669250]
[20.85499763 -146.69468689]
[7.14523268 -154.55711365]
[3.09124160 -169.83261108]
[11.09818554 -183.45848083]
[26.41568565 -187.35073853]
[39.95614243 -179.20018005]
[43.68624115 -163.84239197]
[35.39298248 -150.38887024]
[39.08716583 -135.85087585]
[42.78134918 -121.31289673]
[46.70117950 -106.83412170]
[50.84570694 -92.41805267]
[61.79836655 -82.32407379]
[58.17528534 -66.92330170]
[62.31980896 -52.50723267]
[66.46433258 -38.09117126]
[77.41699982 -27.99718857]
[73.79391479 -12.59641457]
[77.93843842 1.81964982]
[82.08296967 16.23571396]
[86.22749329 30.65177727]
[101.22821808 38.07590485]
[106.40145874 54.34600830]
[98.12435913 69.66046906]
[102.71521759 83.94065857]
[115.42628479 94.77462769]
[111.91605377 111.10326385]
[116.94879913 125.23377228]
[122.20069885 139.28431702]
[127.67047119 153.25148010]
[133.14024353 167.21862793]
[138.61001587 181.18579102]
[152.81413269 187.57962036]
[158.16229248 201.82223511]
[151.97921753 215.32427979]
[157.44898987 229.29142761]
[172.07995605 240.33596802]
[168.98786926 257.53308105]
[174.88937378 271.32336426]
[180.79087830 285.11364746]
[186.69238281 298.90396118]
[192.59388733 312.69424438]
[198.49539185 326.48455811]
[204.39689636 340.27484131]
[210.93515015 353.77487183]
[218.09596252 366.95529175]
[225.25675964 380.13568115]
[240.61621094 383.07183838]
[250.45480347 395.22650146]
[250.12702942 410.86065674]
[239.78767395 422.59231567]
[224.31864929 424.88214111]
[211.02395630 416.64895630]
[206.18095398 401.78021240]
[212.07635498 387.29647827]
[204.91555786 374.11608887]
[197.75476074 360.93566895]
[194.30903625 359.60073853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[11 78]
[12 77]
[15 74]
[16 73]
[17 72]
[18 71]
[20 70]
[21 69]
[24 67]
[25 66]
[29 63]
[30 62]
[31 61]
[32 60]
[34 58]
[35 57]
[36 56]
[38 54]
[39 53]
[41 52]
[42 51]
[43 50]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
