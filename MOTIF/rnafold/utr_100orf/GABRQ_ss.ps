%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCAGAACGCCCCGGCCAUGGGCAUCCGAGGCAUGCUGCGAGCCGCAGUGAUCCUGCUGCUCAUCAGGACCUGGCUCGCGGAGGGCAACUACCCCAGUCCCAUCCCGAAAUUCCACU\
) } def
/len { sequence length } bind def

/coor [
[84.17214966 239.94050598]
[72.02278900 231.14317322]
[62.62334824 219.45341492]
[56.63922119 205.69876099]
[54.49404526 190.85295105]
[56.33967590 175.96693420]
[62.04545593 162.09451294]
[71.20746613 150.21774292]
[83.17710876 141.17741394]
[97.10703278 135.61349487]
[112.01111603 133.91986084]
[126.83643341 136.21707153]
[116.02531433 125.81900787]
[105.21420288 115.42093658]
[93.50244141 114.92565155]
[85.15995789 106.69076538]
[84.51267242 94.98642731]
[73.97513580 84.31120300]
[63.29991531 73.77366638]
[52.48880005 63.37560272]
[41.41138458 53.26170731]
[30.07514000 43.43879700]
[18.73889732 33.61588669]
[7.40265369 23.79297447]
[-3.93358994 13.97006321]
[-15.26983356 4.14715242]
[-26.60607719 -5.67575884]
[-38.21512222 -2.51185799]
[-49.77850723 -5.37185478]
[-58.39784241 -13.41790104]
[-61.97175980 -24.52773285]
[-59.70750427 -35.85349655]
[-70.51862335 -46.25156403]
[-81.32974243 -56.64962769]
[-96.51755524 -54.07350540]
[-110.15070343 -60.85514450]
[-117.09430695 -74.20619202]
[-114.87143707 -88.90982056]
[-125.68255615 -99.30789185]
[-136.49366760 -109.70595551]
[-147.30479431 -120.10401917]
[-158.11590576 -130.50209045]
[-168.92701721 -140.90014648]
[-184.53428650 -147.52206421]
[-182.49168396 -164.35250854]
[-165.75352478 -167.04885864]
[-158.52896118 -151.71125793]
[-147.71783447 -141.31320190]
[-136.90672302 -130.91513062]
[-126.09560394 -120.51706696]
[-115.28448486 -110.11900330]
[-104.47337341 -99.72093964]
[-89.86743927 -102.51461792]
[-76.25616455 -96.09611511]
[-68.94885254 -82.73735046]
[-70.93167114 -67.46074677]
[-60.12055969 -57.06267929]
[-49.30944061 -46.66461563]
[-31.15642929 -48.19639587]
[-17.33069992 -35.85367966]
[-16.78316689 -17.01200294]
[-5.44692278 -7.18909121]
[5.88932085 2.63381982]
[17.22556496 12.45673084]
[28.56180763 22.27964211]
[39.89805222 32.10255432]
[51.23429489 41.92546463]
[56.09091568 42.46630096]
[60.62314606 46.14358902]
[62.88686371 52.56448746]
[73.69798279 62.96255112]
[80.78556061 65.36040497]
[84.65036011 73.77366638]
[95.18789673 84.44889069]
[111.43576050 88.41481018]
[115.61226654 104.60982513]
[126.42337799 115.00788879]
[137.23449707 125.40595245]
[150.44606018 132.50907898]
[165.08226013 135.79263306]
[179.71846008 139.07618713]
[188.90168762 137.89802551]
[194.68966675 142.63963318]
[209.23568726 146.30203247]
[223.78170776 149.96444702]
[238.37403870 153.43771362]
[253.01023865 156.72126770]
[267.64645386 160.00482178]
[274.25100708 158.35189819]
[279.81805420 160.10444641]
[282.94772339 163.85739136]
[297.39376831 167.89617920]
[311.83978271 171.93498230]
[326.46859741 165.34884644]
[340.67236328 172.80758667]
[343.55514526 188.58950806]
[332.90554810 200.58807373]
[316.89300537 199.59899902]
[307.80099487 186.38102722]
[293.35494995 182.34222412]
[278.90890503 178.30342102]
[264.36288452 174.64102173]
[249.72669983 171.35746765]
[235.09049988 168.07391357]
[227.78700256 169.69949341]
[220.11929321 164.51046753]
[205.57327271 160.84806824]
[191.02725220 157.18565369]
[176.43490601 153.71238708]
[161.79872131 150.42883301]
[147.16252136 147.14527893]
[157.25387573 158.24322510]
[164.06149292 171.60946655]
[167.10343933 186.29779053]
[166.16435242 201.26835632]
[161.31074524 215.46141052]
[152.88619995 227.87216187]
[141.48709106 237.62205505]
[127.92039490 244.02087402]
[113.14652252 246.61563110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 78]
[13 77]
[14 76]
[17 74]
[18 73]
[19 71]
[20 70]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[32 58]
[33 57]
[34 56]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[79 111]
[80 110]
[81 109]
[83 108]
[84 107]
[85 106]
[86 104]
[87 103]
[88 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
