%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACCUCCGUGGCUAGUCUUGACGUGGCGGGUUGCUUUCCAAAAUGGCGCGGGUGCUGAAGGCUGCAGCCGCGAAUGCCGUAGGGCUUUUUUCCAGACUUCAAGCUCCCAUUCCAACAGUAAGAGCUUCUUCCACAUCACAGC\
) } def
/len { sequence length } bind def

/coor [
[112.32336426 725.70397949]
[97.48719025 722.80932617]
[84.16415405 715.66870117]
[73.53894043 704.91711426]
[66.55633545 691.51062012]
[63.83722305 676.64123535]
[65.62339020 661.63122559]
[71.75600433 647.81518555]
[81.68976593 636.42169189]
[94.54135895 628.46380615]
[109.16804504 624.64916992]
[109.81337738 609.66308594]
[110.45870972 594.67694092]
[111.10404968 579.69085693]
[97.94290924 567.04278564]
[98.13608551 548.47296143]
[112.02411652 535.67102051]
[112.02411652 520.67102051]
[111.86273193 505.67187500]
[111.53999329 490.67535400]
[111.21724701 475.67880249]
[110.89450836 460.68228149]
[110.57176971 445.68576050]
[96.81311035 436.79266357]
[90.98343658 421.30523682]
[95.55358887 405.22814941]
[108.92079163 394.92068481]
[108.27545929 379.93457031]
[107.63011932 364.94845581]
[96.04856873 349.51733398]
[105.44721222 331.73797607]
[104.15774536 316.79351807]
[102.86827087 301.84902954]
[93.79057312 293.78549194]
[92.63278198 281.29534912]
[100.56522369 271.06491089]
[99.59759521 256.09616089]
[98.62996674 241.12741089]
[97.66233826 226.15864563]
[84.18133545 222.12904358]
[72.86850739 213.71249390]
[65.10147858 201.90840149]
[61.83479691 188.13020325]
[63.48266220 174.03611755]
[69.86653137 161.32960510]
[80.23419952 151.55348206]
[93.34839630 145.90255737]
[92.70306396 130.91644287]
[92.05773163 115.93033600]
[54.62237167 93.25347137]
[48.07260132 79.75900269]
[41.52283478 66.26454163]
[34.97306442 52.77007675]
[28.42329788 39.27561569]
[15.43672085 30.23905563]
[16.84005547 15.41070747]
[10.29028797 1.91624486]
[3.74051929 -11.57821846]
[-11.55869770 -14.16927624]
[-22.38895416 -25.28166389]
[-24.58579445 -40.64244461]
[-17.30449104 -54.34507751]
[-3.34485030 -61.12062836]
[11.92535877 -58.36375427]
[22.63442993 -47.13453293]
[24.66450500 -31.75082779]
[17.23498154 -18.12798691]
[23.78474998 -4.63352346]
[30.33451843 8.86093903]
[42.85261154 16.93228531]
[41.91775894 32.72584534]
[48.46752930 46.22031021]
[55.01729584 59.71477509]
[61.56706619 73.20923615]
[68.11683655 86.70369720]
[75.61683655 86.70369720]
[83.11680603 73.71330261]
[90.61683655 86.70369720]
[98.11683655 86.70369720]
[104.66660309 73.20923615]
[111.21636963 59.71477509]
[109.50208282 43.40547180]
[122.92644501 33.98641968]
[137.67962646 41.14712906]
[138.58480835 57.52127457]
[124.71083069 66.26454163]
[118.16106415 79.75900269]
[111.61129761 93.25347137]
[125.24732971 87.00377655]
[139.55404663 91.51132202]
[147.14485168 104.44884491]
[144.10060120 119.13668823]
[131.99304199 127.99147034]
[117.07334900 126.44145203]
[107.04384613 115.28499603]
[107.68917847 130.27110291]
[108.33451080 145.25721741]
[123.44566345 150.64907837]
[135.31231689 161.39009094]
[142.14564514 175.82142639]
[142.93080139 191.73103333]
[137.57751465 206.69268799]
[126.92938995 218.43601990]
[112.63109589 225.19102478]
[113.59872437 240.15977478]
[114.56635284 255.12854004]
[115.53397369 270.09729004]
[126.10946655 285.13076782]
[117.81274414 300.55957031]
[119.10221100 315.50402832]
[120.39168549 330.44851685]
[129.17488098 337.01782227]
[132.77961731 347.14291382]
[130.23042297 357.35675049]
[122.61623383 364.30310059]
[123.26156616 379.28921509]
[123.90689850 394.27532959]
[135.96325684 401.04031372]
[143.03031921 412.79571533]
[143.34465027 426.39974976]
[136.93116760 438.27810669]
[125.56829834 445.36300659]
[125.89103699 460.35955811]
[126.21377563 475.35607910]
[126.53652191 490.35260010]
[126.85926056 505.34912109]
[130.19235229 513.93334961]
[127.02411652 520.67102051]
[127.02411652 535.67102051]
[136.97288513 542.33557129]
[142.38334656 552.88330078]
[142.00018311 564.61108398]
[136.03631592 574.57659912]
[126.09015656 580.33618164]
[125.44482422 595.32232666]
[124.79949188 610.30841064]
[124.15415955 625.29449463]
[138.39877319 630.35241699]
[150.51870728 639.38562012]
[159.43624878 651.59088135]
[164.35847473 665.88299561]
[164.84768677 680.99096680]
[160.86039734 695.57153320]
[152.75114441 708.32818604]
[141.24101257 718.12652588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[17 129]
[18 128]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[27 117]
[28 116]
[29 115]
[31 111]
[32 110]
[33 109]
[36 107]
[37 106]
[38 105]
[39 104]
[47 97]
[48 96]
[49 95]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[56 69]
[57 68]
[58 67]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
