%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUUGAACCAAGUUGCGGACAUGAAUCUUGUUAUUUGUGUCCUACUUUUGUCCAUUUGGAAAAAUAAUUGCAUGACUACAAACCAAACCAAUGGAUCUUCUACUACAGGAGAUAAACCUG\
) } def
/len { sequence length } bind def

/coor [
[33.59431839 106.65251923]
[18.59554291 106.46096039]
[3.59676576 106.26940918]
[-7.67457867 117.02089691]
[-22.88274193 116.61296844]
[-33.06318283 105.80120850]
[-48.06196213 105.60965729]
[-61.95981598 113.17008972]
[-74.58724213 105.27088928]
[-89.58602142 105.07933044]
[-105.36429596 114.46759033]
[-120.11700439 105.05595398]
[-135.11578369 105.24751282]
[-150.11456299 105.43906403]
[-165.11334229 105.63062286]
[-172.34800720 113.94780731]
[-182.77044678 116.78755951]
[-192.80491638 113.42985535]
[-199.14837646 105.23861694]
[-214.13735962 104.66407776]
[-229.12635803 104.08953857]
[-244.11535645 103.51499939]
[-259.10433960 102.94045258]
[-274.09332275 102.36591339]
[-289.08233643 101.79137421]
[-304.07131958 101.21683502]
[-319.06030273 100.64229584]
[-334.04931641 100.06774902]
[-345.47271729 110.98935699]
[-361.27090454 110.55101013]
[-372.07113647 99.01277924]
[-371.46578979 83.22009277]
[-359.81402588 72.54246521]
[-344.02859497 73.31474304]
[-333.47476196 85.07875824]
[-318.48577881 85.65329742]
[-303.49676514 86.22784424]
[-288.50778198 86.80238342]
[-273.51879883 87.37692261]
[-258.52981567 87.95146179]
[-243.54080200 88.52600098]
[-228.55181885 89.10054779]
[-213.56282043 89.67508698]
[-198.57383728 90.24962616]
[-182.29978943 79.93486023]
[-165.30488586 90.63184357]
[-150.30612183 90.44028473]
[-135.30734253 90.24873352]
[-120.30856323 90.05717468]
[-111.57673645 81.58081818]
[-99.00682068 81.36671448]
[-89.39446259 90.08055878]
[-74.39568329 90.27210999]
[-61.57064438 82.69797516]
[-47.87040710 90.61087799]
[-32.87162781 90.80242920]
[-22.41839027 80.25418854]
[-7.20476866 80.23479462]
[3.78832102 91.27062988]
[18.78709793 91.46218872]
[33.78587341 91.65373993]
[35.21783447 83.39357758]
[37.67823792 75.36119080]
[41.13250351 67.68437195]
[45.53019714 60.48582458]
[50.80577087 53.88121033]
[56.87952805 47.97726822]
[63.65884781 42.87012100]
[71.03957367 38.64368439]
[78.90760803 35.36831665]
[87.14071655 33.09962082]
[95.61036682 31.87753868]
[104.18378448 31.72562981]
[112.72600555 32.65064240]
[121.10202789 34.64233780]
[129.17890930 37.67359161]
[136.82791138 41.70073318]
[143.92651367 46.66419220]
[150.36042786 52.48936462]
[156.02539062 59.08773041]
[160.82885742 66.35820007]
[164.69155884 74.18867493]
[167.54873657 82.45773315]
[169.35125732 91.03657532]
[170.06649780 99.79096985]
[185.00659180 98.45182800]
[199.94670105 97.11269379]
[209.88609314 84.82514191]
[225.61148071 83.24784851]
[237.79325867 93.31660461]
[239.20420837 109.05778503]
[229.00721741 121.13243103]
[213.25199890 122.37686920]
[201.28584290 112.05279541]
[186.34573364 113.39192963]
[171.40563965 114.73107147]
[166.87982178 129.03201294]
[178.32934570 138.72265625]
[189.77885437 148.41329956]
[201.22837830 158.10394287]
[212.67790222 167.79458618]
[224.12741089 177.48522949]
[235.57693481 187.17585754]
[251.61962891 187.28393555]
[261.42391968 199.98257446]
[257.46881104 215.53045654]
[242.78831482 222.00057983]
[228.64405823 214.42962646]
[225.88629150 198.62538147]
[214.43676758 188.93473816]
[202.98725891 179.24409485]
[191.53773499 169.55346680]
[180.08822632 159.86282349]
[168.63870239 150.17218018]
[157.18917847 140.48153687]
[144.11099243 153.96188354]
[128.00016785 163.42109680]
[110.04769897 168.22128296]
[91.56457520 168.06666565]
[73.88603973 163.02134705]
[58.27508926 153.50079346]
[45.83231735 140.23822021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[6 56]
[7 55]
[9 53]
[10 52]
[12 49]
[13 48]
[14 47]
[15 46]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[85 96]
[86 95]
[87 94]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
