%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCGUACGAAGCAAACAGCUCGCAAGUCUACCGGCGGCAAAGCUCCGCGCAAGCAGCUUGCUACUAAAGCAGCCCGUAAGAGCGCUCCGGCCACCG\
) } def
/len { sequence length } bind def

/coor [
[52.95513535 152.21232605]
[38.09111786 154.56285095]
[24.85168839 147.79118347]
[11.56151772 154.74613953]
[-1.72865272 161.70109558]
[-15.01882267 168.65603638]
[-16.33710098 180.68309021]
[-23.29624557 190.43217468]
[-34.02355957 195.48339844]
[-45.73030090 194.65431213]
[-55.43638992 188.27455139]
[-69.13323975 194.38981628]
[-82.83008575 200.50506592]
[-89.53411865 206.97410583]
[-97.04930878 206.59013367]
[-110.92971802 212.27645874]
[-118.42803955 226.45935059]
[-134.21794128 229.29812622]
[-146.18675232 218.61509705]
[-145.15304565 202.60539246]
[-131.90975952 193.55026245]
[-116.61604309 198.39604187]
[-102.73563385 192.70971680]
[-88.94534302 186.80821228]
[-75.24848938 180.69296265]
[-61.55164337 174.57771301]
[-56.20305634 157.20712280]
[-39.65379333 148.96107483]
[-21.97377586 155.36587524]
[-8.68360615 148.41091919]
[4.60656452 141.45596313]
[17.89673424 134.50100708]
[19.87988091 119.76313019]
[30.28409386 108.89039612]
[45.27079391 106.19739532]
[59.12974548 112.92314148]
[72.41991425 105.96818542]
[85.71008301 99.01322937]
[93.35851288 87.30882263]
[107.33496094 87.69659424]
[120.62512970 80.74164581]
[133.91529846 73.78668976]
[135.73913574 54.92861557]
[148.30459595 40.94546890]
[166.57397461 37.18287659]
[183.37591553 44.94005203]
[195.96020508 36.77698898]
[208.54450989 28.61392403]
[221.12879944 20.45086288]
[229.01036072 3.90009093]
[246.47808838 3.47589922]
[258.80242920 -5.07458448]
[271.12673950 -13.62506866]
[272.48553467 -24.64140320]
[279.61550903 -32.85687256]
[289.90270996 -35.63681030]
[299.78018188 -32.27352142]
[312.61227417 -40.04126358]
[320.41116333 -53.80672073]
[335.30572510 -53.77849197]
[348.13781738 -61.54623413]
[360.96987915 -69.31398010]
[373.80197144 -77.08172607]
[376.01852417 -92.56141663]
[387.70111084 -102.95619202]
[403.33352661 -103.35796356]
[415.53463745 -93.57701874]
[418.54345703 -78.23162842]
[410.93930054 -64.56741333]
[396.31262207 -59.03619385]
[381.56970215 -64.24964905]
[368.73764038 -56.48190689]
[355.90554810 -48.71416092]
[343.07348633 -40.94641495]
[336.19241333 -27.73656273]
[320.38000488 -27.20918846]
[307.54794312 -19.44144440]
[299.70840454 -1.88141823]
[279.67724609 -1.30073380]
[267.35290527 7.24975014]
[255.02856445 15.80023384]
[252.51545715 27.74603844]
[242.16415405 34.94847488]
[229.29185486 33.03515244]
[216.70756531 41.19821548]
[204.12327576 49.36127853]
[191.53898621 57.52434158]
[193.07929993 68.87239075]
[190.17779541 80.00451660]
[183.23173523 89.23993683]
[173.25212097 95.16876984]
[161.71661377 96.86721802]
[150.35086060 94.04130554]
[140.87025452 87.07685852]
[127.58008575 94.03181458]
[114.28991699 100.98677063]
[106.64148712 112.69117737]
[92.66503906 112.30340576]
[79.37487030 119.25835419]
[66.08469391 126.21331024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[6 29]
[11 26]
[12 25]
[13 24]
[15 23]
[16 22]
[36 100]
[37 99]
[38 98]
[40 96]
[41 95]
[42 94]
[46 87]
[47 86]
[48 85]
[49 84]
[51 81]
[52 80]
[53 79]
[57 77]
[58 76]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
