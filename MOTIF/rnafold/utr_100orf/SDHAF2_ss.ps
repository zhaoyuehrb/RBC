%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCGGUGCAGGUGGGGAAAAUGGCGGUGUCUACAGUGUUCUCGACUUCGUCGCUGAUGCUUGCUCUGUCAAGGCACAGCCUAUUGUCUCCUUUGCUCAGUGUGACAUCAUUCAGACGCU\
) } def
/len { sequence length } bind def

/coor [
[136.31031799 362.39205933]
[128.81057739 349.40155029]
[128.48416138 334.40509033]
[135.41159058 321.10055542]
[147.88465881 312.76852417]
[162.82778931 311.46356201]
[176.55532837 317.50665283]
[170.59460449 303.74185181]
[164.98417664 298.79672241]
[164.66239929 289.54858398]
[159.05513000 275.63604736]
[153.44787598 261.72351074]
[147.84062195 247.81095886]
[142.23336792 233.89842224]
[136.75106812 228.81164551]
[136.66557312 219.55827332]
[131.41545105 205.50708008]
[126.16533661 191.45588684]
[120.91521454 177.40467834]
[115.66509247 163.35348511]
[103.96255493 154.13935852]
[106.38027191 138.50398254]
[101.13015747 124.45278168]
[95.88003540 110.40158081]
[90.45090485 96.41857147]
[84.84365082 82.50603485]
[79.23638916 68.59349823]
[66.90129089 58.68613815]
[69.31998444 43.98922729]
[63.71272659 30.07669258]
[58.10546875 16.16415596]
[52.49821091 2.25161862]
[46.89095688 -11.66091824]
[41.28369904 -25.57345581]
[35.32296753 -39.33825302]
[29.01264191 -52.94633102]
[22.70231819 -66.55441284]
[16.39199448 -80.16249084]
[3.56710362 -89.42708588]
[5.23220921 -104.22832489]
[-1.07811511 -117.83640289]
[-8.24391270 -131.01408386]
[-16.23597527 -143.70767212]
[-32.69271469 -151.84825134]
[-32.81200409 -169.34703064]
[-41.12564087 -181.83236694]
[-49.43927383 -194.31768799]
[-57.75290680 -206.80302429]
[-71.56432343 -216.63568115]
[-65.93931580 -232.62928772]
[-49.01358795 -231.65158081]
[-45.26757431 -215.11665344]
[-36.95394135 -202.63133240]
[-28.64030838 -190.14599609]
[-20.32667351 -177.66065979]
[-8.46557426 -174.93894958]
[-1.45326531 -164.50456238]
[-3.54239798 -151.69972229]
[4.44966555 -139.00614929]
[10.88122272 -152.55735779]
[25.42419624 -156.23185730]
[37.52075195 -147.36206055]
[38.38909912 -132.38720703]
[27.39883995 -122.17868042]
[12.52996349 -124.14672852]
[18.84028816 -110.53865051]
[31.21382141 -102.24739075]
[30.00007248 -86.47281647]
[36.31039810 -72.86473083]
[42.62071991 -59.25665665]
[48.93104553 -45.64857483]
[53.13433075 -43.16461563]
[55.75866699 -37.95811462]
[55.19623566 -31.18071175]
[60.80349350 -17.26817513]
[66.41075134 -3.35563755]
[72.01800537 10.55689907]
[77.62525940 24.46943665]
[83.23252106 38.38197327]
[95.16655731 47.29421234]
[93.14892578 62.98624420]
[98.75618744 76.89878082]
[104.36344147 90.81131744]
[110.12265778 96.59512329]
[109.93123627 105.15145874]
[115.18135834 119.20265961]
[120.43147278 133.25386047]
[132.50953674 143.47300720]
[129.71629333 158.10336304]
[134.96641541 172.15455627]
[140.21653748 186.20576477]
[145.46665955 200.25695801]
[150.71678162 214.30816650]
[156.14590454 228.29116821]
[161.75315857 242.20370483]
[167.36041260 256.11624146]
[172.96766663 270.02877808]
[178.57493591 283.94131470]
[184.35939026 297.78109741]
[190.32012939 311.54589844]
[199.00561523 318.31619263]
[199.84988403 328.05191040]
[208.79017639 340.09646606]
[223.22816467 346.56600952]
[224.60105896 361.39718628]
[233.54135132 373.44174194]
[242.48165894 385.48629761]
[258.15051270 387.55081177]
[267.70382690 400.14086914]
[265.47378540 415.78701782]
[252.78341675 425.20669556]
[237.16169739 422.81134033]
[227.87672424 410.02209473]
[230.43710327 394.42657471]
[221.49681091 382.38204956]
[212.55651855 370.33749390]
[198.75799561 364.72946167]
[196.74563599 349.03677368]
[187.80532837 336.99221802]
[186.17459106 351.90332031]
[177.57238770 364.19158936]
[164.11985779 370.82705688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[22 87]
[23 86]
[24 85]
[25 83]
[26 82]
[27 81]
[29 79]
[30 78]
[31 77]
[32 76]
[33 75]
[34 74]
[35 71]
[36 70]
[37 69]
[38 68]
[40 66]
[41 65]
[42 59]
[43 58]
[45 55]
[46 54]
[47 53]
[48 52]
[102 119]
[103 118]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
