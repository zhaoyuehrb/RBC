%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUGCCGGCGGUCAGUGGUCCAGGUCCCUUAUUCUGCCUUCUCCUCCUGCUCCUGGACCCCCACAGCCCUGAGACGGGGUGUCCUCCUCUACGCAGGUUUG\
) } def
/len { sequence length } bind def

/coor [
[117.17618561 150.25990295]
[105.18142700 152.86050415]
[92.90999603 152.63850403]
[81.01715088 149.60575867]
[70.13793945 143.92420959]
[60.85326385 135.89724731]
[53.65891266 125.95348358]
[48.93903732 114.62387085]
[34.08010483 116.67622375]
[19.22117233 118.72857666]
[4.36224127 120.78092957]
[-10.49669075 122.83328247]
[-15.24079037 137.29891968]
[-25.75227737 148.22575378]
[-39.90766144 153.48362732]
[-54.88065338 152.07989502]
[-67.70644379 144.34629822]
[-75.86876678 131.86264038]
[-90.72769928 133.91499329]
[-97.92597961 147.66142273]
[-111.84437561 154.52128601]
[-127.13098145 151.85684204]
[-137.90779114 140.69261169]
[-140.03088379 125.32146454]
[-132.68391418 111.65393066]
[-118.69191742 104.94544983]
[-103.43511200 107.77557373]
[-92.78005219 119.05605316]
[-77.92111969 117.00370026]
[-73.44840240 102.77484894]
[-63.19919586 91.85408020]
[-49.16732407 86.44412231]
[-34.11666870 87.66799164]
[-21.03676987 95.33631897]
[-12.54904270 107.97434998]
[2.30988836 105.92199707]
[17.16881943 103.86964417]
[32.02775192 101.81729126]
[46.88668442 99.76493835]
[49.97364807 82.15500641]
[58.72879410 66.56697083]
[72.16012573 54.76703644]
[88.74581909 48.09216690]
[106.60665894 47.29865646]
[123.71894073 52.47640991]
[138.14376831 63.03876877]
[148.24676514 77.78897858]
[162.62145996 73.50316620]
[176.99615479 69.21735382]
[191.37084961 64.93154144]
[205.74554443 60.64572906]
[209.20558167 41.96870804]
[221.45556641 27.55572510]
[239.18138123 21.18409538]
[257.64785767 24.47196198]
[271.96362305 36.46821213]
[285.70986938 30.46483994]
[299.45611572 24.46146774]
[313.20239258 18.45809555]
[326.85549927 12.24579334]
[340.41226196 5.82600498]
[353.96905518 -0.59378278]
[367.52581787 -7.01357079]
[367.12756348 -22.23727798]
[372.96176147 -36.30433273]
[384.01763916 -46.77752686]
[398.37963867 -51.84232330]
[413.55953979 -50.62121201]
[426.92727661 -43.32575607]
[436.16680908 -31.21994209]
[439.67733765 -16.40117073]
[436.85067749 -1.43688679]
[428.17651367 11.08025837]
[415.15774536 18.98159409]
[400.04989624 20.89816475]
[385.47055054 16.49791336]
[373.94561768 6.54321051]
[360.38882446 12.96299839]
[346.83206177 19.38278580]
[333.27526855 25.80257416]
[328.49612427 31.60856819]
[319.20574951 32.20434952]
[305.45950317 38.20772171]
[291.71325684 44.21109390]
[277.96697998 50.21446609]
[278.55941772 61.61776352]
[275.56390381 72.66446686]
[269.26220703 82.25138855]
[260.26708984 89.41572571]
[249.46278381 93.43172455]
[237.91815186 93.88418579]
[226.78083801 90.71131134]
[217.16322327 84.21256256]
[210.03135681 75.02042389]
[195.65666199 79.30623627]
[181.28196716 83.59204865]
[166.90727234 87.87786102]
[152.53257751 92.16367340]
[152.92871094 104.43071747]
[150.49861145 116.46117401]
[145.37202454 127.61265564]
[137.82272339 137.28970337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[18 29]
[19 28]
[47 98]
[48 97]
[49 96]
[50 95]
[51 94]
[56 85]
[57 84]
[58 83]
[59 82]
[60 80]
[61 79]
[62 78]
[63 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
