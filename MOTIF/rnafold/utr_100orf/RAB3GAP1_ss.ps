%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUCCCGGCAGCCUUAGCGCCAGGCCCGGCGCUCCUCAAGAUGGCUGCCGACAGUGAGCCCGAAUCCGAGGUAUUUGAGAUCACGGACUUCACCACUGCCUCGGAAUGGGAAAGGUUUAUUUCCAAAGUUGAAGAAGUCU\
) } def
/len { sequence length } bind def

/coor [
[103.51326752 243.74302673]
[102.53221893 228.77514648]
[101.55117035 213.80726624]
[100.57012177 198.83938599]
[99.58908081 183.87149048]
[98.60803223 168.90361023]
[97.62698364 153.93572998]
[71.15698242 140.73497009]
[57.47584152 117.10947418]
[42.83140182 120.35607147]
[28.18696404 123.60266113]
[13.54252338 126.84925842]
[-1.10191715 130.09585571]
[-15.74635696 133.34245300]
[-30.39079666 136.58903503]
[-45.03523636 139.83563232]
[-55.37097549 160.41577148]
[-77.21469879 166.83898926]
[-96.59542084 155.39495850]
[-110.57553864 160.83152771]
[-124.55565643 166.26809692]
[-138.53578186 171.70466614]
[-152.51589966 177.14123535]
[-166.49601746 182.57780457]
[-172.63093567 197.14277649]
[-187.29927063 203.02626038]
[-201.79856873 196.73770142]
[-207.52664185 182.00798035]
[-201.08512878 167.57598877]
[-186.29566956 162.00396729]
[-171.93258667 168.59768677]
[-157.95246887 163.16111755]
[-143.97235107 157.72454834]
[-129.99223328 152.28797913]
[-116.01211548 146.85140991]
[-102.03199768 141.41484070]
[-101.83845520 133.66593933]
[-99.52990723 126.23797607]
[-95.26742554 119.69906616]
[-89.36208344 114.55348969]
[-82.25231934 111.20288086]
[-74.47137451 109.91489410]
[-66.60731506 110.80185699]
[-59.25856781 113.81114960]
[-52.98842621 118.72809601]
[-48.28182983 125.19119263]
[-33.63739014 121.94460297]
[-18.99295235 118.69800568]
[-4.34851122 115.45140839]
[10.29592896 112.20481873]
[24.94036865 108.95822144]
[39.58480835 105.71163177]
[54.22924805 102.46503448]
[54.93323135 91.63193512]
[58.16510773 81.26821136]
[63.74359131 71.95520020]
[71.35577393 64.21527863]
[80.57467651 58.48259735]
[90.88317871 55.07871628]
[101.70307159 54.19456863]
[112.42742920 55.87974167]
[122.45470428 60.03971863]
[131.84356689 48.34144974]
[141.23240662 36.64318466]
[150.62126160 24.94491577]
[150.00326538 12.01206684]
[158.12699890 2.45168185]
[170.19171143 1.06677055]
[179.83352661 -10.42389584]
[189.47534180 -21.91456223]
[199.11714172 -33.40522766]
[208.75895691 -44.89589691]
[218.40077209 -56.38656235]
[228.04258728 -67.87722778]
[237.68440247 -79.36789703]
[247.32621765 -90.85856628]
[244.91452026 -109.58963013]
[256.69720459 -123.94068909]
[274.90625000 -125.17836761]
[284.03765869 -137.07867432]
[293.16909790 -148.97897339]
[302.30050659 -160.87927246]
[304.56311035 -176.53785706]
[318.44940186 -181.92491150]
[327.58081055 -193.82521057]
[332.42617798 -210.07200623]
[349.37939453 -209.91355896]
[353.92025757 -193.57904053]
[339.48110962 -184.69378662]
[330.34970093 -172.79348755]
[328.74023438 -157.98608398]
[314.20080566 -151.74784851]
[305.06939697 -139.84754944]
[295.93795776 -127.94724274]
[286.80654907 -116.04694366]
[290.73080444 -105.24018860]
[288.89794922 -93.76811218]
[281.65328979 -84.53263855]
[270.72589111 -79.92712402]
[258.81689453 -81.21675110]
[249.17507935 -69.72608185]
[239.53326416 -58.23541641]
[229.89144897 -46.74474716]
[220.24963379 -35.25408173]
[210.60781860 -23.76341438]
[200.96600342 -12.27274895]
[191.32418823 -0.78208190]
[181.68237305 10.70858479]
[179.60995483 28.10223579]
[162.31953430 34.33376694]
[152.93067932 46.03203583]
[143.54182434 57.73030472]
[134.15296936 69.42857361]
[143.67034912 80.38121796]
[149.58660889 94.30561829]
[150.98011780 109.99256134]
[147.34135437 125.95169830]
[159.62863159 134.55534363]
[174.68554688 130.33354187]
[188.91213989 136.82492065]
[195.59106445 150.96443176]
[191.56872559 166.07585144]
[178.74436951 175.02401733]
[163.17323303 173.58387756]
[152.20756531 162.43542480]
[151.02499390 146.84262085]
[138.73770142 138.23898315]
[132.20199585 141.91790771]
[139.55984497 154.98931885]
[146.91749573 168.06085205]
[133.84585571 175.41830444]
[126.48843384 162.34716797]
[119.13057709 149.27575684]
[112.59487152 152.95468140]
[113.57591248 167.92256165]
[114.55696106 182.89045715]
[115.53800964 197.85833740]
[116.51905823 212.82621765]
[117.50010681 227.79409790]
[118.48114777 242.76199341]
[128.03695679 256.08935547]
[121.02746582 270.91497803]
[104.66342926 271.98751831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 140]
[2 139]
[3 138]
[4 137]
[5 136]
[6 135]
[7 134]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[62 113]
[63 112]
[64 111]
[65 110]
[68 108]
[69 107]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[75 101]
[76 100]
[79 95]
[80 94]
[81 93]
[82 92]
[84 90]
[85 89]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
