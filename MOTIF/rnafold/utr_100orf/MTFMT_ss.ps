%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCCGGCCGCCGGCGGCCGAGGCGAUGAGGGUGUUGGUGCGGCGCUGUUGGGGUCCUCCGCUGGCUCAUGGCGCCAGGCGUGGGAGGCCGAGUCCCCAGUGGCGAGCACUGGCCCGACUCGGCU\
) } def
/len { sequence length } bind def

/coor [
[88.28041077 112.07782745]
[74.23502350 117.34348297]
[64.02924347 129.43284607]
[49.39581680 126.65578461]
[35.35042953 131.92144775]
[21.30504608 137.18710327]
[7.25966072 142.45275879]
[2.65274143 147.43576050]
[-2.94640112 149.02124023]
[-7.61270952 147.61262512]
[-21.90131569 152.17724609]
[-36.18991852 156.74186707]
[-50.47852707 161.30648804]
[-64.76712799 165.87110901]
[-79.05574036 170.43572998]
[-93.34434509 175.00035095]
[-107.63294983 179.56497192]
[-118.42410278 191.13481140]
[-132.90229797 187.63748169]
[-147.19090271 192.20210266]
[-150.38003540 207.22624207]
[-160.66590881 218.63223267]
[-175.28166199 223.35189819]
[-190.29573059 220.11569214]
[-201.66941833 209.79411316]
[-206.34326172 195.16363525]
[-203.05999756 180.15977478]
[-192.70281982 168.81849670]
[-178.05776978 164.19055176]
[-163.06427002 167.52082825]
[-151.75552368 177.91349792]
[-137.46691895 173.34887695]
[-127.69776917 162.10551453]
[-112.19757080 165.27635193]
[-97.90895844 160.71174622]
[-83.62035370 156.14712524]
[-69.33174896 151.58250427]
[-55.04314423 147.01788330]
[-40.75453949 142.45326233]
[-26.46593475 137.88864136]
[-12.17732906 133.32402039]
[1.99400163 128.40737915]
[16.03938675 123.14171600]
[30.08477020 117.87606049]
[44.13015747 112.61039734]
[53.33131790 100.89767456]
[68.96936798 103.29810333]
[83.01474762 98.03244019]
[68.05054474 96.99683380]
[56.85140228 87.01789856]
[54.10398102 72.27165222]
[60.95803833 58.92916870]
[74.54525757 52.57405472]
[89.17961121 55.86582184]
[98.73685455 67.42692566]
[99.21707153 82.42043304]
[105.00014496 68.58005524]
[110.78321838 54.73967743]
[116.56629944 40.89929962]
[114.74765015 25.18296814]
[126.79364014 16.42264366]
[132.57672119 2.58226728]
[138.35978699 -11.25811005]
[143.97125244 -25.16895485]
[149.41021729 -39.14813995]
[154.84919739 -53.12732315]
[160.28816223 -67.10650635]
[152.61087036 -80.72976685]
[155.53739929 -96.09106445]
[167.68591309 -105.93726349]
[183.32026672 -105.61929321]
[195.05838013 -95.28727722]
[197.35789490 -79.81969452]
[189.13304138 -66.51985168]
[174.26734924 -61.66753387]
[168.82836914 -47.68835068]
[163.38940430 -33.70916748]
[157.95042419 -19.72998238]
[158.46261597 -12.27552795]
[152.20016479 -5.47503471]
[146.41709900 8.36534214]
[140.63401794 22.20571899]
[142.86631775 36.93209457]
[130.40667725 46.68237686]
[124.62359619 60.52275085]
[118.84052277 74.36312866]
[113.05744934 88.20350647]
[117.44499207 102.54747772]
[129.98107910 110.78437042]
[142.51718140 119.02126312]
[155.05326843 127.25815582]
[167.58935547 135.49504089]
[180.12545776 143.73193359]
[192.66154480 151.96882629]
[205.19763184 160.20571899]
[217.73373413 168.44261169]
[237.82028198 168.58746338]
[245.96318054 186.05560303]
[258.89129639 193.66246033]
[271.81936646 201.26931763]
[284.74746704 208.87617493]
[297.67556763 216.48303223]
[310.60366821 224.08988953]
[326.43197632 221.47364807]
[338.24923706 232.32408142]
[336.99026489 248.31767273]
[323.62084961 257.18548584]
[308.39685059 252.12490845]
[302.99682617 237.01799011]
[290.06872559 229.41113281]
[277.14062500 221.80427551]
[264.21252441 214.19741821]
[251.28442383 206.59056091]
[238.35632324 198.98370361]
[228.60557556 202.45307922]
[218.35496521 199.87226868]
[211.11279297 191.87188721]
[209.49684143 180.97871399]
[196.96073914 172.74182129]
[184.42465210 164.50492859]
[171.88856506 156.26803589]
[159.35246277 148.03114319]
[146.81637573 139.79425049]
[134.28028870 131.55735779]
[121.74419403 123.32045746]
[109.20809937 115.08356476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[4 45]
[5 44]
[6 43]
[7 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[19 32]
[20 31]
[56 87]
[57 86]
[58 85]
[59 84]
[61 82]
[62 81]
[63 80]
[64 78]
[65 77]
[66 76]
[67 75]
[88 126]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
