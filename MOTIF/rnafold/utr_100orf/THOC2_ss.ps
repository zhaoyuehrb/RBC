%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCCGGGCUUCUGCUACUAGUGAGAGGAAGAUGGCGGCCGCGGCUGUGGUGGUUCCCGCAGAGUGGAUAAAGAACUGGGAGAAAUCAGGGAGAGGCGAAUUUUUGCAUUUAUGUCGGAUCCUCAGUGAAA\
) } def
/len { sequence length } bind def

/coor [
[76.65000153 149.39923096]
[63.30743027 140.48655701]
[51.80411911 150.11328125]
[40.30080795 159.74000549]
[28.79750061 169.36672974]
[30.07160187 181.30097961]
[25.43192101 192.23924255]
[16.15590286 199.46966553]
[4.65405512 201.26176453]
[-6.15587091 197.27940369]
[-18.10096359 206.35214233]
[-30.04605484 215.42489624]
[-41.99114609 224.49765015]
[-53.93623734 233.57040405]
[-65.77334595 242.78358459]
[-77.50081635 252.13594055]
[-89.22829437 261.48828125]
[-97.84199524 276.09103394]
[-114.25857544 271.85641479]
[-114.73400116 254.90913391]
[-98.58063507 249.76080322]
[-86.85316467 240.40846252]
[-75.12569427 231.05612183]
[-71.82613373 224.36239624]
[-63.00898743 221.62530518]
[-51.06389618 212.55255127]
[-39.11880493 203.47981262]
[-27.17371178 194.40705872]
[-15.22862053 185.33430481]
[-13.91567898 167.14511108]
[0.46005744 155.41641235]
[19.17077255 157.86341858]
[30.67408371 148.23669434]
[42.17739105 138.60997009]
[53.68070221 128.98324585]
[47.46979904 115.03608704]
[45.36028290 99.91496277]
[47.51685715 84.80047607]
[53.77114487 70.87271881]
[63.63482666 59.21912003]
[55.28287125 46.75939178]
[46.93091202 34.29966736]
[38.57895660 21.83993912]
[26.04222298 18.55299377]
[19.35395050 7.92382908]
[21.66390228 -4.01093960]
[13.60855865 -16.66445541]
[5.55321503 -29.31797028]
[-2.50212812 -41.97148514]
[-10.55747128 -54.62500000]
[-18.61281395 -67.27851868]
[-34.09374237 -70.45914459]
[-42.72148895 -83.70065308]
[-39.37736130 -99.14709473]
[-26.04537201 -107.63435364]
[-10.63515759 -104.12710571]
[-2.28932047 -90.70613098]
[-5.95929956 -75.33385468]
[2.09604359 -62.68034363]
[10.15138721 -50.02682877]
[18.20672989 -37.37331390]
[26.26207352 -24.71979904]
[34.31741714 -12.06628323]
[50.27658081 -4.86610699]
[51.03868484 13.48798084]
[59.39064026 25.94770813]
[67.74259949 38.40743637]
[76.09455872 50.86716461]
[88.94133759 46.49101257]
[102.47039032 45.41609192]
[115.84702301 47.70872498]
[128.24598694 53.22746277]
[138.90229797 61.63182831]
[147.15855408 72.40332031]
[152.50535583 84.87738037]
[154.61283875 98.28443909]
[169.52818298 99.87585449]
[184.44352722 101.46726990]
[199.35887146 103.05868530]
[214.29196167 104.47383881]
[229.24072266 105.71253204]
[244.18949890 106.95121765]
[251.97514343 93.86897278]
[264.61721802 85.49850464]
[279.57870483 83.45539856]
[293.88479614 88.09181213]
[304.71450806 98.43719482]
[309.95681763 112.40085602]
[324.90557861 113.63954163]
[335.29193115 105.88730621]
[347.77221680 107.28537750]
[355.66296387 116.53257751]
[370.57830811 118.12400055]
[385.49365234 119.71541595]
[396.06021118 112.21065521]
[408.50399780 113.90310669]
[416.17413330 123.33409882]
[431.04772949 125.27735138]
[445.92132568 127.22060394]
[460.79492188 129.16386414]
[475.72375488 122.37699890]
[488.90664673 132.13117981]
[486.78213501 148.39212036]
[471.53573608 154.43197632]
[458.85165405 144.03746033]
[443.97805786 142.09419250]
[429.10446167 140.15093994]
[414.23086548 138.20768738]
[398.46685791 145.82562256]
[383.90222168 134.63075256]
[368.98690796 133.03933716]
[354.07156372 131.44792175]
[338.49185181 139.43606567]
[323.66687012 128.58831787]
[308.71810913 127.34962463]
[301.24899292 140.25997925]
[288.86416626 148.68174744]
[273.99005127 150.90022278]
[259.56890869 146.42240906]
[248.47698975 136.08528137]
[242.95080566 121.89998627]
[228.00204468 120.66129303]
[213.05326843 119.42260742]
[206.06088257 122.03020477]
[197.76745605 117.97402954]
[182.85211182 116.38261414]
[167.93676758 114.79119110]
[153.02142334 113.19977570]
[146.90098572 128.03218079]
[136.73596191 140.44718933]
[123.40295410 149.37416077]
[108.05175781 154.04327393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 23]
[16 22]
[17 21]
[40 68]
[41 67]
[42 66]
[43 65]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[76 128]
[77 127]
[78 126]
[79 125]
[80 123]
[81 122]
[82 121]
[88 115]
[89 114]
[92 112]
[93 111]
[94 110]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
