%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGAAGUUAAUAUCAUUUAUGUCACUGUAUUCAUUCUGAAAGGAAUUACCAACCGGCCAGAGCUUCAGGCCCCGUGCUUUGGGGUGUUUUUAGUUA\
) } def
/len { sequence length } bind def

/coor [
[191.35873413 161.77600098]
[188.30995178 151.10310364]
[174.80990601 144.56483459]
[161.30987549 138.02658081]
[147.80982971 131.48831177]
[134.30978394 124.95004272]
[120.80975342 118.41177368]
[94.09405518 132.38900757]
[64.42788696 113.53623962]
[50.37735367 118.78813934]
[36.32681656 124.04003906]
[29.44305992 140.02931213]
[13.47017193 146.05802917]
[-1.65534782 138.89158630]
[-15.53575516 144.57791138]
[-29.41616249 150.26423645]
[-36.91448593 164.44712830]
[-52.70438385 167.28590393]
[-64.67320251 156.60287476]
[-63.63948441 140.59317017]
[-50.39620972 131.53804016]
[-35.10248947 136.38381958]
[-21.22208023 130.69749451]
[-7.34167385 125.01117706]
[-4.02647734 112.45365143]
[6.10247850 104.01521301]
[19.44243431 102.99234009]
[31.07491875 109.98950195]
[45.12545395 104.73760223]
[59.17599106 99.48570251]
[62.01915359 92.54550171]
[47.15522003 94.56129456]
[37.97745132 82.69670105]
[43.66352081 68.81619263]
[58.52742004 66.80012512]
[67.70548248 78.66509247]
[70.54864502 71.72489166]
[64.22112274 58.12480164]
[57.89359283 44.52471542]
[51.56606674 30.92462540]
[45.23854065 17.32453537]
[31.50985336 8.35485840]
[32.68352127 -8.00223637]
[47.55218124 -14.91997147]
[60.82022476 -5.28197384]
[58.83863068 10.99701023]
[65.16616058 24.59709930]
[71.49368286 38.19718933]
[77.82120514 51.79727554]
[84.14873505 65.39736938]
[94.23870850 63.67790604]
[104.07088470 64.74243164]
[112.91696930 68.32508087]
[120.17187500 73.98031616]
[125.39485168 81.12915039]
[128.33503723 89.11373138]
[128.94010925 97.25547791]
[127.34801483 104.91173553]
[140.84805298 111.45000458]
[154.34809875 117.98826599]
[167.84812927 124.52653503]
[181.34817505 131.06480408]
[194.84822083 137.60307312]
[214.72755432 135.07395935]
[225.19248962 151.20770264]
[239.07289124 156.89402771]
[252.95329285 162.58035278]
[266.83370972 168.26667786]
[280.31912231 157.23837280]
[297.42889404 154.46612549]
[313.54266357 160.60942078]
[324.35363770 173.93217468]
[327.01962280 190.79219055]
[341.22668457 195.60456848]
[355.43377686 200.41696167]
[369.64083862 205.22935486]
[383.84793091 210.04173279]
[398.05499268 214.85412598]
[413.01785278 209.06690979]
[426.79846191 217.28118896]
[428.82550049 233.19566345]
[417.54400635 244.60212708]
[401.60815430 242.75048828]
[393.24261475 229.06118774]
[379.03552246 224.24880981]
[364.82846069 219.43641663]
[350.62136841 214.62403870]
[336.41430664 209.81164551]
[322.20724487 204.99926758]
[313.51840210 214.43385315]
[301.83779907 219.84526062]
[288.92837524 220.37698364]
[276.75378418 215.91203308]
[267.17971802 207.09620667]
[261.68798828 195.24493408]
[261.14736938 182.14709473]
[247.26696777 176.46076965]
[233.38656616 170.77444458]
[219.50616455 165.08811951]
[210.26887512 169.94081116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[9 30]
[10 29]
[11 28]
[14 24]
[15 23]
[16 22]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[65 99]
[66 98]
[67 97]
[68 96]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
