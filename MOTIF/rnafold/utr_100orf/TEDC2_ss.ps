%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCAAAUUGCAAGGAGACGCCGCCGCCUUCAUGCUGCCGGCGGGCUGCUCGCGCCGGCUGGUGGCCGAGCUGCAGGGCGCCCUGGACGCCUGCGCACAGCGACAAUUGCAAUUGGAGCAGAGCCUGCGCG\
) } def
/len { sequence length } bind def

/coor [
[-8.21911144 153.93418884]
[-20.64134979 162.34179688]
[-33.06359100 170.74940491]
[-45.48582840 179.15702820]
[-57.90806961 187.56463623]
[-59.73865509 191.74822998]
[-62.55812836 194.77357483]
[-65.85972595 196.46879578]
[-69.13430786 196.85202026]
[-71.93516541 196.11460876]
[-85.10034943 203.30332947]
[-98.26553345 210.49206543]
[-106.66956329 223.89665222]
[-121.54811859 223.20532227]
[-134.71330261 230.39405823]
[-147.87847900 237.58279419]
[-161.04367065 244.77153015]
[-169.44769287 258.17611694]
[-184.32624817 257.48477173]
[-197.49143982 264.67352295]
[-205.55999756 278.95043945]
[-221.95870972 278.83071899]
[-229.81797791 264.43753052]
[-221.05287170 250.57734680]
[-204.68017578 251.50833130]
[-191.51498413 244.31959534]
[-184.05262756 231.42919922]
[-168.23240662 231.60633850]
[-155.06721497 224.41760254]
[-141.90203857 217.22886658]
[-128.73684692 210.04013062]
[-121.27448273 197.14973450]
[-105.45426941 197.32688904]
[-92.28908539 190.13815308]
[-79.12390137 182.94941711]
[-66.31568146 175.14239502]
[-53.89344406 166.73478699]
[-41.47120285 158.32716370]
[-29.04896355 149.91955566]
[-16.62672424 141.51194763]
[-4.61860657 132.52278137]
[6.94818926 122.97242737]
[18.51498604 113.42207336]
[30.08178139 103.87171936]
[41.64857864 94.32136536]
[53.21537399 84.77101135]
[64.78216553 75.22066498]
[69.00815582 60.82826614]
[64.44085693 46.54051971]
[59.87356186 32.25276947]
[55.30626297 17.96501923]
[50.73896790 3.67726874]
[45.09222031 -3.62923408]
[46.23736954 -11.00512791]
[42.01137924 -25.39752197]
[37.78539276 -39.78991699]
[33.55940247 -54.18231201]
[20.22451782 -63.10197449]
[19.02766418 -79.10031891]
[30.88696480 -89.90479279]
[46.70498276 -87.22711182]
[54.34748459 -73.12138367]
[47.95179749 -58.40829849]
[52.17778778 -44.01590729]
[56.40377426 -29.62351036]
[60.62976456 -15.23111629]
[65.02671814 -0.89002877]
[69.59401703 13.39772129]
[74.16130829 27.68547058]
[78.72860718 41.97322083]
[83.29590607 56.26097107]
[97.68830109 60.48695755]
[109.25509644 50.93660736]
[120.82189178 41.38625336]
[126.80074310 24.01751328]
[144.15147400 21.68073082]
[155.48771667 11.85782051]
[166.82395935 2.03490973]
[178.16020203 -7.78800154]
[189.49644470 -17.61091232]
[189.06744385 -33.24261093]
[198.82711792 -45.46074295]
[214.16725159 -48.49628067]
[227.84469604 -40.91593552]
[233.40136719 -26.29891586]
[228.21360779 -11.54693031]
[214.73089600 -3.62541556]
[199.31935120 -6.27466869]
[187.98310852 3.54824233]
[176.64686584 13.37115288]
[165.31062317 23.19406509]
[153.97438049 33.01697540]
[152.77592468 45.11523819]
[143.32666016 53.38898468]
[130.37223816 52.95304871]
[118.80545044 62.50340271]
[107.23865509 72.05375671]
[118.16605377 80.34844971]
[123.30878448 91.96479034]
[122.25752258 103.60826111]
[135.42271423 110.79699707]
[150.41522217 106.57061768]
[163.66418457 114.04855347]
[167.60099792 128.36767578]
[180.76618958 135.55641174]
[193.93136597 142.74514771]
[207.09655762 149.93388367]
[223.46925354 149.00289917]
[232.23435974 162.86308289]
[224.37509155 177.25627136]
[207.97637939 177.37597656]
[199.90782166 163.09906006]
[186.74263000 155.91032410]
[173.57745361 148.72158813]
[160.41226196 141.53285217]
[146.23785400 145.96249390]
[132.78407288 138.85963440]
[128.23397827 123.96218109]
[115.06878662 116.77344513]
[95.24406433 124.19184113]
[75.91004181 111.65602112]
[74.33251953 86.78746033]
[62.76572418 96.33781433]
[51.19892883 105.88816071]
[39.63213348 115.43851471]
[28.06533813 124.98886871]
[16.49854279 134.53921509]
[4.93174601 144.08956909]
[3.50712419 148.42822266]
[0.98799419 151.70788574]
[-2.13751411 153.70925903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[10 35]
[11 34]
[12 33]
[14 31]
[15 30]
[16 29]
[17 28]
[19 26]
[20 25]
[41 128]
[42 127]
[43 126]
[44 125]
[45 124]
[46 123]
[47 122]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[54 66]
[55 65]
[56 64]
[57 63]
[72 97]
[73 96]
[74 95]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[100 119]
[101 118]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
