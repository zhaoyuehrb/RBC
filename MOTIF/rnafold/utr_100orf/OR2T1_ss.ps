%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGCAAGAAUACUAUUUUUUAAAUGUUUUCUUCCCACUUUUAAAAGUUUGCUGCCUAACAAUUAAUUCACAUGUUGUUAUUUUACUGCCCUGGGAAU\
) } def
/len { sequence length } bind def

/coor [
[169.83158875 119.99245453]
[162.69885254 107.47085571]
[157.38778687 94.07274628]
[142.79411316 97.54039001]
[128.20042419 101.00803375]
[113.60675049 104.47567749]
[103.31135559 113.93593597]
[89.86089325 110.11799622]
[75.26721191 113.58564758]
[60.67353821 117.05329132]
[46.07986069 120.52093506]
[31.48618126 123.98857880]
[19.84851074 134.70655823]
[5.67731524 130.12109375]
[-8.91636276 133.58874512]
[-12.13000298 148.50970459]
[-21.50613594 160.55342102]
[-35.18312073 167.32858276]
[-50.44538498 167.48997498]
[-64.26259613 161.00556946]
[-73.89132690 149.16284180]
[-77.41979980 134.31317139]
[-74.14743042 119.40498352]
[-64.72393799 107.39829254]
[-51.02038193 100.67704010]
[-35.75759888 100.57574463]
[-21.96603203 107.11450958]
[-12.38400745 118.99506378]
[2.20967054 115.52742004]
[12.80350399 105.05746460]
[28.01853561 109.39489746]
[42.61221313 105.92725372]
[57.20589066 102.45960999]
[71.79956818 98.99196625]
[86.39324951 95.52432251]
[96.68864441 86.06406403]
[110.13910675 89.88200378]
[124.73278809 86.41435242]
[139.32646179 82.94670868]
[153.92013550 79.47906494]
[152.62130737 63.85583496]
[153.71440125 48.21906662]
[157.17329407 32.93278122]
[162.91679382 18.35274315]
[170.81056213 4.81816578]
[180.67022705 -7.35616589]
[192.26571655 -17.88722229]
[205.32659912 -26.53030586]
[219.54841614 -33.08474350]
[234.59974670 -37.39853287]
[250.12998962 -39.37188721]
[265.77746582 -38.95952606]
[281.17788696 -36.17171097]
[295.97280884 -31.07402039]
[309.81796265 -23.78576851]
[322.39135742 -14.47723961]
[333.40057373 -3.36570120]
[342.58981323 9.28966904]
[349.74563599 23.19382668]
[363.95272827 18.38143921]
[378.15979004 13.56905270]
[392.36688232 8.75666618]
[406.57394409 3.94427967]
[420.78100586 -0.86810684]
[434.98809814 -5.68049335]
[437.91549683 -20.75782394]
[448.00146484 -32.34093857]
[462.53295898 -37.31404114]
[477.60104370 -34.33938980]
[489.15246582 -24.21715164]
[494.08001709 -9.67015743]
[491.05813599 5.38852406]
[480.89974976 16.90818405]
[466.33737183 21.79009056]
[451.28823853 18.72103500]
[439.80047607 8.52657986]
[425.59341431 13.33896637]
[411.38632202 18.15135384]
[397.17926025 22.96373940]
[382.97216797 27.77612686]
[368.76510620 32.58851242]
[354.55804443 37.40089798]
[357.18850708 51.53387070]
[357.81552124 65.89762115]
[356.42630005 80.20953369]
[353.04766846 94.18793488]
[347.74560547 107.55766296]
[340.62405396 120.05545044]
[331.82266235 131.43515015]
[321.51425171 141.47251892]
[309.90130615 149.96971130]
[297.21209717 156.75912476]
[283.69601440 161.70674133]
[269.61889648 164.71473694]
[255.25762939 165.72344971]
[240.89476013 164.71253967]
[226.81294250 161.70141602]
[213.28938293 156.74884033]
[200.59036255 149.95181274]
[188.96595764 141.44366455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[14 29]
[15 28]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
