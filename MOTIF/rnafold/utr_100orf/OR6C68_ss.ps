%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAAACACACAGCAAUAACAACAUUCAUCCUUCUGGGACUGACAGAAGAUCCUCAGCUGCAGGUUCUGCUUUUCAUGUUUCUAUUUAUCACCUACA\
) } def
/len { sequence length } bind def

/coor [
[152.04685974 196.95433044]
[143.30574036 184.76445007]
[134.56463623 172.57458496]
[125.82351685 160.38471985]
[117.08239746 148.19485474]
[108.34128571 136.00498962]
[99.60016632 123.81511688]
[103.20643616 138.37515259]
[103.75697327 153.36505127]
[101.22848511 168.15040588]
[95.72798157 182.10549927]
[87.48825073 194.63972473]
[76.85800934 205.22262573]
[64.28712463 213.40632629]
[50.30762482 218.84448242]
[35.51112747 221.30694580]
[20.52384186 220.68949890]
[5.98004103 217.01828003]
[-7.50476646 210.44866943]
[-19.35988998 201.25866699]
[-29.08360672 189.83721924]
[-36.26440430 176.66770935]
[-40.59837723 162.30746460]
[-41.90211105 147.36422729]
[-40.12042999 132.47041321]
[-35.32873917 118.25634766]
[-27.72982407 105.32357788]
[-17.64528084 94.21943665]
[-5.50189495 85.41386414]
[8.18641186 79.27951050]
[22.84033585 76.07599640]
[37.83971024 75.93889618]
[52.54974365 78.87400818]
[66.34561157 84.75585938]
[59.59818649 71.35913086]
[52.85076141 57.96240616]
[46.10333252 44.56568146]
[39.35590744 31.16895676]
[32.60848236 17.77223206]
[17.34776497 14.35983086]
[7.89194632 1.90505159]
[8.70577717 -13.71133995]
[19.40499115 -25.11576271]
[34.93774796 -26.92339516]
[47.96995163 -18.28072929]
[52.34819412 -3.26856756]
[46.00520706 11.02480602]
[52.75263214 24.42153168]
[59.50006104 37.81825638]
[66.24748230 51.21498108]
[72.99491119 64.61170959]
[79.74234009 78.00843048]
[86.88243103 80.30386353]
[87.38374329 65.31224060]
[82.82346344 51.02225113]
[88.95832825 37.33417130]
[102.65959930 31.22883034]
[116.93972015 35.81990433]
[124.51594543 48.76597977]
[121.52444458 63.46464920]
[109.49147034 72.41952515]
[101.16262817 84.89472198]
[108.30272675 87.19014740]
[121.59290314 80.23519897]
[134.88307190 73.28024292]
[148.17324829 66.32529449]
[159.40342712 53.62413788]
[174.71704102 60.89941025]
[171.96531677 77.62855530]
[155.12818909 79.61546326]
[141.83802795 86.57041168]
[128.54785156 93.52536774]
[115.25768280 100.48032379]
[111.79003906 115.07399750]
[120.53115082 127.26387024]
[129.27226257 139.45373535]
[138.01338196 151.64360046]
[146.75450134 163.83346558]
[155.49562073 176.02334595]
[164.23672485 188.21321106]
[178.41937256 183.04067993]
[193.47171021 181.88754272]
[208.27676392 184.83937073]
[221.73587036 191.67712402]
[232.85031128 201.89337158]
[240.79528809 214.73002625]
[244.98126221 229.23452759]
[245.09757996 244.33052063]
[241.13563538 258.89779663]
[233.38940430 271.85534668]
[222.43373108 282.24166870]
[209.08157349 289.28601074]
[194.32379150 292.46563721]
[179.25546265 291.54461670]
[164.99479675 286.59124756]
[152.60000610 277.97314453]
[142.99085999 266.32980347]
[136.88044739 252.52526855]
[134.72219849 237.58390808]
[136.67623901 222.61445618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
