%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACAGGAGUCAGAGCUCUGCAUGUCUGCACCAUGUCCUGGGCUCCUGUCCUGCUCAUGCUGUUUGUCUACUGCACAGGUUGUGGUCCUCAGCCGGUGCUGCAUCAGCCGCCGGCCAUGUCCUCGGCCCUUG\
) } def
/len { sequence length } bind def

/coor [
[69.33665466 168.52186584]
[67.94240570 153.58680725]
[66.54815674 138.65174866]
[65.15390778 123.71668243]
[52.81678391 115.18466187]
[38.35072708 119.15117645]
[23.88467216 123.11769104]
[9.41861629 127.08420563]
[-5.04743958 131.05072021]
[-19.51349640 135.01722717]
[-33.97955322 138.98373413]
[-48.44560623 142.95025635]
[-62.91166306 146.91676331]
[-77.33058929 151.05133057]
[-91.70043182 155.35337830]
[-102.70176697 166.72355652]
[-117.11344147 162.96153259]
[-131.48329163 167.26358032]
[-139.74638367 184.23162842]
[-157.45716858 189.76889038]
[-173.36128235 180.83955383]
[-187.51541138 185.80551147]
[-201.66954041 190.77145386]
[-215.82366943 195.73741150]
[-226.09405518 208.52221680]
[-242.25772095 205.75312805]
[-247.68687439 190.27876282]
[-236.79647827 178.01780701]
[-220.78961182 181.58328247]
[-206.63549805 176.61734009]
[-192.48136902 171.65138245]
[-178.32723999 166.68542480]
[-175.69334412 155.47499084]
[-167.86312866 146.86755371]
[-156.72297668 143.11061096]
[-145.04231262 145.26164246]
[-135.78533936 152.89373779]
[-121.41549683 148.59169006]
[-111.44198608 137.52920532]
[-96.00247955 140.98353577]
[-81.63263702 136.68148804]
[-76.07619476 131.70396423]
[-66.87817383 132.45071411]
[-52.41212082 128.48419189]
[-37.94606400 124.51768494]
[-23.48000717 120.55117035]
[-9.01395226 116.58465576]
[5.45210409 112.61814880]
[19.91815948 108.65163422]
[34.38421631 104.68511963]
[48.85027313 100.71860504]
[57.66705322 88.58335114]
[56.96917343 73.59959412]
[56.27129364 58.61584091]
[55.57341385 43.63208389]
[52.96654892 39.89925766]
[51.85569382 35.92769623]
[52.12445068 32.23553848]
[53.49455261 29.24498177]
[55.57341385 27.23632431]
[56.27129364 12.25256824]
[56.96917343 -2.73118877]
[49.88230896 -16.87639809]
[58.20336914 -29.22990608]
[58.90124893 -44.21366501]
[48.07402802 -55.72656250]
[48.64237213 -71.52062988]
[60.26910019 -82.22552490]
[76.05627441 -81.49022675]
[86.63764954 -69.75096893]
[85.73547363 -53.97245026]
[73.88500214 -43.51578522]
[73.18712616 -28.53202629]
[80.32390594 -15.45855713]
[71.95292664 -2.03330922]
[71.25505066 12.95044708]
[70.55716705 27.93420410]
[70.55716705 42.93420410]
[71.25505066 57.91796112]
[71.95292664 72.90171814]
[72.65081024 87.88547516]
[82.88938904 76.87773895]
[96.68470764 72.58237457]
[110.22017670 75.58271790]
[120.04098511 84.52142334]
[123.93543243 96.60475922]
[138.70755005 99.20948792]
[146.54617310 87.39133453]
[158.27127075 79.49166107]
[172.08314514 76.68296051]
[185.87701416 79.35935974]
[197.56381226 87.08168030]
[205.38648987 98.64914703]
[208.18423462 112.28594208]
[222.89173889 115.23368835]
[237.59924316 118.18143463]
[252.30674744 121.12918854]
[267.01425171 124.07693481]
[281.72177124 127.02468109]
[296.42926025 129.97242737]
[311.17007446 132.74885559]
[325.94219971 135.35357666]
[340.71432495 137.95829773]
[357.36276245 134.75425720]
[365.05032349 149.86509705]
[352.65814209 161.43533325]
[338.10958862 152.73042297]
[323.33746338 150.12570190]
[308.56536865 147.52098083]
[301.36602783 149.47532654]
[293.48153687 144.67994690]
[278.77401733 141.73219299]
[264.06649780 138.78443909]
[249.35900879 135.83670044]
[234.65148926 132.88894653]
[219.94398499 129.94119263]
[205.23648071 126.99344635]
[195.88993835 139.90257263]
[181.80865479 147.49024963]
[165.77098083 148.20205688]
[150.96626282 141.84594727]
[140.36065674 129.64050293]
[136.10282898 113.98159790]
[121.33070374 111.37687683]
[111.99475861 123.16635132]
[96.50074768 127.78029633]
[80.08897400 122.32243347]
[81.48322296 137.25749207]
[82.87747192 152.19255066]
[84.27172089 167.12762451]
[95.65367126 178.43383789]
[93.76747894 194.36563110]
[80.06006622 202.70147705]
[65.04658508 197.04684448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 41]
[15 40]
[17 38]
[18 37]
[21 32]
[22 31]
[23 30]
[24 29]
[52 81]
[53 80]
[54 79]
[55 78]
[60 77]
[61 76]
[62 75]
[64 73]
[65 72]
[86 124]
[87 123]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
