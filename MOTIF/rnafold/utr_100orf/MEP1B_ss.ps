%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCCUGAAUGUCAUAGUUAGCUACUUUCAACUGGAAGCUACAACAUGGAUUUAUGGAAUCUGUCUUGGUUUCUGUUCUUGGAUGCUCUUCUCGUGAUUUCUGGCUUGGCAACUCCAGAAAACUUUGAUGUAGAUGGCGGAAUGG\
) } def
/len { sequence length } bind def

/coor [
[48.77272034 582.99700928]
[36.52907562 592.99041748]
[20.81371689 591.31622314]
[10.95028877 578.96759033]
[12.79058647 563.27081299]
[25.24279404 553.53851318]
[26.83183098 538.62292480]
[14.71387863 529.96142578]
[8.51715660 516.30651855]
[9.99707031 501.28399658]
[18.85582542 488.93817139]
[32.79565430 482.64306641]
[34.38468933 467.72747803]
[35.97372437 452.81188965]
[37.56275940 437.89630127]
[39.15179825 422.98068237]
[40.74083328 408.06509399]
[28.16384506 416.23941040]
[13.45099926 413.31842041]
[4.95052576 400.95953369]
[7.48568821 386.17532349]
[19.61800766 377.35452271]
[34.46347046 379.50210571]
[43.59849167 391.39916992]
[47.06920242 376.80624390]
[50.53991699 362.21328735]
[54.01062775 347.62033081]
[47.92625046 337.11520386]
[50.74861526 324.89526367]
[61.48981857 317.67318726]
[65.26949310 303.15719604]
[69.04916382 288.64120483]
[72.82883453 274.12521362]
[75.67707062 259.39810181]
[77.58234406 244.51960754]
[79.48760986 229.64109802]
[81.39287567 214.76258850]
[83.29814148 199.88409424]
[74.50318909 182.70930481]
[86.78866577 166.78474426]
[88.06075287 151.83877563]
[89.33283997 136.89282227]
[90.60493469 121.94685364]
[79.53237152 112.28852081]
[76.21276093 97.97541046]
[81.90354919 84.42919159]
[94.44910431 76.78105927]
[95.72119904 61.83509445]
[93.31934357 52.94859314]
[97.18220520 46.58652878]
[98.77124023 31.67093468]
[100.36027527 16.75534058]
[94.12844849 2.21316504]
[103.17048645 -9.62283325]
[104.75952148 -24.53842735]
[106.34855652 -39.45402145]
[107.93759155 -54.36961746]
[109.52662659 -69.28520966]
[110.95726776 -84.21683502]
[112.22936249 -99.16279602]
[113.50144958 -114.10875702]
[100.57669067 -124.96823120]
[96.68494415 -141.22439575]
[103.16112518 -156.45443726]
[117.28331757 -164.76103210]
[118.23788452 -179.73062134]
[119.19245148 -194.70022583]
[120.14701843 -209.66981506]
[113.30361938 -223.93440247]
[121.83517456 -236.14349365]
[122.78974152 -251.11308289]
[110.75655365 -260.91012573]
[106.81261444 -275.91763306]
[112.47444153 -290.36489868]
[125.56494904 -298.69665527]
[141.05056763 -297.70916748]
[152.97677612 -287.78216553]
[156.75767517 -272.73275757]
[150.93945312 -258.34777832]
[137.75933838 -250.15852356]
[136.80476379 -235.18891907]
[143.71644592 -221.99505615]
[135.11662292 -208.71524048]
[134.16204834 -193.74565125]
[133.20747375 -178.77606201]
[132.25291443 -163.80645752]
[143.30580139 -156.25016785]
[149.21321106 -144.11415100]
[148.32785034 -130.53709412]
[140.77493286 -119.08992767]
[128.44740295 -112.83666992]
[127.17532349 -97.89070892]
[125.90322876 -82.94474030]
[128.48777771 -75.96493530]
[124.44222260 -67.69617462]
[122.85318756 -52.78058243]
[121.26415253 -37.86498642]
[119.67510986 -22.94939232]
[118.08607483 -8.03379726]
[124.43156433 5.44151449]
[115.27587128 18.34437561]
[113.68683624 33.25997162]
[112.09780121 48.17556381]
[110.66716003 63.10718536]
[109.39506531 78.05314636]
[120.46762848 87.71147919]
[123.78723907 102.02458954]
[118.09645081 115.57080841]
[105.55089569 123.21894073]
[104.27880096 138.16490173]
[103.00671387 153.11087036]
[101.73462677 168.05682373]
[109.26949310 176.02163696]
[111.10032654 186.60818481]
[106.85550690 196.23731995]
[98.17665100 201.78935242]
[96.27138519 216.66786194]
[94.36611176 231.54637146]
[92.46084595 246.42488098]
[90.55558014 261.30337524]
[103.30323792 253.39785767]
[117.95076752 256.63046265]
[126.18700409 269.16699219]
[123.33861542 283.89407349]
[111.02180481 292.45538330]
[96.22526550 289.99316406]
[87.34482574 277.90487671]
[83.56515503 292.42086792]
[79.78548431 306.93688965]
[76.00581360 321.45288086]
[81.32726288 339.04785156]
[68.60357666 351.09103394]
[65.13286591 365.68399048]
[61.66215134 380.27694702]
[58.19144058 394.86990356]
[55.65642929 409.65414429]
[54.06739044 424.56973267]
[52.47835541 439.48532104]
[50.88932037 454.40090942]
[49.30028534 469.31649780]
[47.71124649 484.23211670]
[60.01194763 493.32275391]
[66.07086182 507.25784302]
[64.35262299 522.25494385]
[55.41818237 534.29785156]
[41.74742508 540.21191406]
[40.15839005 555.12750244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 147]
[7 146]
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[24 135]
[25 134]
[26 133]
[27 132]
[30 130]
[31 129]
[32 128]
[33 127]
[34 120]
[35 119]
[36 118]
[37 117]
[38 116]
[40 112]
[41 111]
[42 110]
[43 109]
[47 105]
[48 104]
[50 103]
[51 102]
[52 101]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[59 93]
[60 92]
[61 91]
[65 86]
[66 85]
[67 84]
[68 83]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
