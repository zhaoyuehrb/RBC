%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCAGGACGCGGAAAGCAGGGAGGCAAGGCCCGCGCUAAGGCCAAGUCGCGCUCGUCCCGCGCUGGUCUCCAGUUCCCGGUGGGGCGAGUGCACCGCU\
) } def
/len { sequence length } bind def

/coor [
[108.25627899 203.55940247]
[100.90320587 216.93457031]
[88.47006226 225.78781128]
[73.42546844 228.36129761]
[58.75652695 224.14407349]
[47.37577820 213.97346497]
[41.54286957 199.86886597]
[42.41593170 184.63073730]
[49.82162094 171.28462219]
[62.28952789 162.48042297]
[77.34414673 159.96620178]
[81.48867035 145.55014038]
[85.63319397 131.13406372]
[89.77772522 116.71800232]
[84.37953186 130.71298218]
[72.91503143 140.38591003]
[58.21113586 143.35160828]
[43.89352036 138.87881470]
[33.49261856 128.07041931]
[29.57308388 113.59156799]
[33.10139084 99.01243591]
[43.20753098 87.92794800]
[57.39953613 83.07130432]
[72.17794800 85.64006042]
[83.89797974 94.99983978]
[73.04684448 84.64353943]
[62.19571686 74.28723907]
[46.62009811 74.48192596]
[35.76303864 63.82458496]
[35.67342758 48.97441483]
[24.82229424 38.61811447]
[13.97116375 28.26181221]
[3.12003279 17.90551186]
[-12.12047005 20.82213593]
[-26.15029526 14.19313526]
[-33.57468796 0.56749672]
[-31.53881645 -14.81544399]
[-20.82551765 -26.04063225]
[-5.55427074 -28.79175186]
[8.40281582 -22.01094627]
[15.67895889 -8.30556774]
[13.47633266 7.05438185]
[24.32746315 17.41068268]
[35.17859650 27.76698303]
[46.02972412 38.12328339]
[60.86791611 37.52017975]
[72.02003479 47.86836243]
[72.55201721 63.43611145]
[83.40314484 73.79241180]
[94.25428009 84.14871216]
[108.67034149 88.29323578]
[123.36480713 85.28112793]
[138.05926514 82.26902771]
[152.75372314 79.25691986]
[167.44819641 76.24481201]
[182.14265442 73.23270416]
[196.83711243 70.22060394]
[211.53157043 67.20849609]
[226.22604370 64.19638824]
[240.92050171 61.18428040]
[255.61495972 58.17217636]
[270.30941772 55.16006851]
[285.00387573 52.14796448]
[299.41995239 48.00343704]
[313.47048950 42.75154114]
[327.52102661 37.49964523]
[341.57156372 32.24774551]
[355.62210083 26.99585152]
[368.34167480 15.78653049]
[382.63406372 24.90596581]
[377.82754517 41.16431046]
[360.87399292 41.04638672]
[346.82345581 46.29828262]
[332.77291870 51.55018234]
[318.72238159 56.80207825]
[304.67184448 62.05397415]
[303.74237061 64.38040924]
[301.87765503 66.50224304]
[299.14498901 68.08312225]
[295.72396851 68.81452942]
[291.89486694 68.45129395]
[288.01599121 66.84242249]
[273.32153320 69.85453033]
[258.62707520 72.86663818]
[243.93260193 75.87874603]
[229.23814392 78.89085388]
[214.54368591 81.90295410]
[199.84922791 84.91506195]
[185.15475464 87.92716980]
[170.46029663 90.93927765]
[155.76583862 93.95137787]
[141.07138062 96.96348572]
[126.37690735 99.97559357]
[111.68244934 102.98770142]
[111.47646332 112.08931732]
[104.19378662 120.86253357]
[100.04926300 135.27859497]
[95.90473175 149.69465637]
[91.76020813 164.11071777]
[103.18092346 174.23643494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 99]
[12 98]
[13 97]
[14 96]
[25 50]
[26 49]
[27 48]
[30 45]
[31 44]
[32 43]
[33 42]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
