%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUUUUACCCUGGCCGGGCGGGCGGGGCUCAGCCGGGCUGGGCUGGGCUCCGCGGCUGGAGCCGGGCUCUACCCAGAGCAAGACCCUGAUGGCUGCGGUGUUUCUGGUAACGCUUUAUGAAUACUCGCCGCUUUUCUACAUCGCGGUGGUCUUUACCUGCUUCAUCGUGACCACCGGCCUGGUAUUGG\
) } def
/len { sequence length } bind def

/coor [
[98.12373352 398.03497314]
[83.27222443 404.10229492]
[69.33971405 396.14837646]
[67.01403809 380.27478027]
[78.07924652 368.65838623]
[79.06029510 353.69049072]
[69.07710266 342.69635010]
[69.85879517 327.50280762]
[81.45816803 317.10604858]
[82.43920898 302.13818359]
[83.42025757 287.17028809]
[84.40130615 272.20242310]
[76.65964508 262.89450073]
[77.36466217 250.40672302]
[86.68303680 241.47351074]
[87.90885925 226.52368164]
[89.13467407 211.57385254]
[90.36048889 196.62402344]
[91.58630371 181.67419434]
[92.81211853 166.72436523]
[85.22379303 157.29103088]
[86.13303375 144.81646729]
[95.59632874 136.03692627]
[97.06658173 121.10914612]
[85.70845032 111.31155396]
[71.15798187 114.95626068]
[56.60751343 118.60095978]
[42.05704498 122.24566650]
[27.50657654 125.89036560]
[12.95610809 129.53506470]
[-1.59436059 133.17977905]
[-16.14482880 136.82447815]
[-30.69529915 140.46917725]
[-45.24576569 144.11387634]
[-59.79623413 147.75857544]
[-74.34670258 151.40328979]
[-88.89717102 155.04798889]
[-96.80620575 168.73092651]
[-112.09540558 172.73292542]
[-125.69395447 164.67967224]
[-129.53408813 149.34901428]
[-121.33750916 135.83636475]
[-105.96710968 132.15853882]
[-92.54187775 140.49751282]
[-77.99140930 136.85281372]
[-63.44093704 133.20811462]
[-48.89046860 129.56341553]
[-34.34000015 125.91870880]
[-19.78953171 122.27400970]
[-5.23906326 118.62930298]
[9.31140518 114.98460388]
[23.86187363 111.33989716]
[38.41234207 107.69519806]
[52.96281052 104.05049133]
[67.51328278 100.40579224]
[82.06375122 96.76108551]
[94.18456268 87.92446136]
[102.10558319 75.18643188]
[103.98480988 66.23056030]
[110.26184845 62.30627060]
[118.39022064 49.69954681]
[126.51860046 37.09281921]
[134.64697266 24.48609352]
[142.77534485 11.87936783]
[150.90371704 -0.72735822]
[151.87911987 -16.51846886]
[165.27871704 -23.02230644]
[173.40708923 -35.62903214]
[172.67108154 -50.61096573]
[163.34616089 -62.36026382]
[154.02125549 -74.10956573]
[144.69635010 -85.85887146]
[135.37144470 -97.60816956]
[119.92939758 -103.12861633]
[117.25582123 -119.30835724]
[130.10105896 -129.50306702]
[145.25102234 -123.22528839]
[147.12074280 -106.93307495]
[156.44564819 -95.18377686]
[165.77055359 -83.43447876]
[175.09547424 -71.68517303]
[184.42037964 -59.93587112]
[199.40231323 -59.19985580]
[209.83395386 -69.97858429]
[220.26559448 -80.75730896]
[230.69723511 -91.53603363]
[241.12886047 -102.31475830]
[251.56050110 -113.09347534]
[236.59030151 -114.03840637]
[226.55975342 -125.19134521]
[227.20205688 -140.17759705]
[238.15007019 -150.43141174]
[253.14624023 -150.09199524]
[263.61914062 -139.35336304]
[263.58285522 -124.35363007]
[275.02075195 -134.05796814]
[286.45867920 -143.76231384]
[297.89657593 -153.46665955]
[309.33447266 -163.17100525]
[320.77239990 -172.87535095]
[332.21029663 -182.57968140]
[343.64819336 -192.28402710]
[355.08612061 -201.98837280]
[366.52401733 -211.69271851]
[363.39544678 -227.92083740]
[368.84197998 -243.42509460]
[381.28939819 -254.00965881]
[397.28268433 -256.86074829]
[412.44467163 -251.29414368]
[423.72229004 -261.18432617]
[434.99987793 -271.07452393]
[435.08456421 -281.97143555]
[441.03759766 -290.83538818]
[450.68713379 -294.86654663]
[460.74468994 -292.95336914]
[472.33987427 -302.46926880]
[468.26147461 -317.14190674]
[470.50997925 -332.20391846]
[478.69586182 -345.04568481]
[491.40081787 -353.44232178]
[506.42367554 -355.93905640]
[521.16162109 -352.10333252]
[533.06121826 -342.59967041]
[540.06079102 -329.07464600]
[540.94757080 -313.87155151]
[535.56799316 -299.62445068]
[524.85406494 -288.80172729]
[510.66207886 -283.27844238]
[495.45080566 -284.01156616]
[481.85577393 -290.87411499]
[470.26058960 -281.35821533]
[464.81054688 -262.81570435]
[444.89007568 -259.79693604]
[433.61245728 -249.90673828]
[422.33486938 -240.01654053]
[425.87713623 -226.81790161]
[423.37167358 -213.31649780]
[415.25183105 -202.16049194]
[403.05789185 -195.56303406]
[389.14495850 -194.86323547]
[376.22836304 -200.25480652]
[364.79046631 -190.55046082]
[353.35253906 -180.84611511]
[341.91464233 -171.14178467]
[330.47674561 -161.43743896]
[319.03881836 -151.73309326]
[307.60092163 -142.02874756]
[296.16299438 -132.32440186]
[284.72509766 -122.62006378]
[273.28720093 -112.91572571]
[262.33923340 -102.66184235]
[251.90759277 -91.88311768]
[241.47595215 -81.10439301]
[231.04431152 -70.32566833]
[220.61267090 -59.54694366]
[210.18103027 -48.76821899]
[207.26046753 -36.81736755]
[198.06694031 -28.77971649]
[186.01382446 -27.50065804]
[177.88543701 -14.89393234]
[177.49143982 -0.00453940]
[163.51045227 7.40101528]
[155.38206482 20.00774193]
[147.25369263 32.61446762]
[139.12532043 45.22119522]
[130.99694824 57.82791901]
[122.86857605 70.43464661]
[114.84361267 83.10745239]
[106.92259216 95.84548187]
[111.30362701 97.52069092]
[114.98218536 101.63478088]
[116.85384369 107.79671478]
[116.02817535 115.16982269]
[111.99435425 122.57940674]
[110.52410126 137.50717163]
[118.51393890 154.08940125]
[107.76194763 167.95018005]
[106.53613281 182.90000916]
[105.31031799 197.84983826]
[104.08450317 212.79966736]
[102.85868835 227.74949646]
[101.63286591 242.69932556]
[109.89295197 259.14862061]
[99.36918640 273.18347168]
[98.38814545 288.15133667]
[97.40709686 303.11923218]
[96.42604828 318.08709717]
[106.56913757 329.90893555]
[105.36099243 345.07452393]
[94.02817535 354.67153931]
[93.04713440 369.63943481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 191]
[6 190]
[9 187]
[10 186]
[11 185]
[12 184]
[15 182]
[16 181]
[17 180]
[18 179]
[19 178]
[20 177]
[23 175]
[24 174]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[57 169]
[58 168]
[60 167]
[61 166]
[62 165]
[63 164]
[64 163]
[65 162]
[67 160]
[68 159]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[83 156]
[84 155]
[85 154]
[86 153]
[87 152]
[88 151]
[95 150]
[96 149]
[97 148]
[98 147]
[99 146]
[100 145]
[101 144]
[102 143]
[103 142]
[104 141]
[109 135]
[110 134]
[111 133]
[115 131]
[116 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
