%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:57:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUUUUCUUGCGGCUUCUUAGCUUUACGAUGGCAACAAGUAUGGCGGCUGCUAGUGGUAGAUUUGAAAGUGCGAAGAGUAUCGAAGAGCGGAAAGAACAGACCCGGAAUGCCAGGGCCGAGGUGUUGC\
) } def
/len { sequence length } bind def

/coor [
[-23.51153183 252.90556335]
[-25.72041893 261.12927246]
[-30.27498436 268.28372192]
[-36.73898315 273.72161865]
[-44.50457001 276.95831299]
[-52.84944153 277.71481323]
[-61.00399399 275.94183350]
[-68.22230530 271.82241821]
[-80.29380798 280.72628784]
[-86.80695343 295.14465332]
[-101.64222717 296.47271729]
[-113.71373749 305.37658691]
[-120.22688293 319.79495239]
[-135.06216431 321.12301636]
[-147.13366699 330.02688599]
[-159.20516968 338.93072510]
[-171.27668762 347.83459473]
[-177.33941650 363.07189941]
[-193.60353088 365.17199707]
[-203.33790588 351.97448730]
[-196.52865601 337.05584717]
[-180.18054199 335.76309204]
[-168.10903931 326.85922241]
[-156.03752136 317.95535278]
[-143.96601868 309.05151367]
[-138.31631470 295.26998901]
[-122.61759949 293.30508423]
[-110.54608917 284.40121460]
[-104.89638519 270.61968994]
[-89.19766998 268.65478516]
[-77.12615967 259.75091553]
[-76.31961060 237.89399719]
[-59.62180710 223.35668945]
[-37.32966232 225.62104797]
[-26.65966225 215.07821655]
[-15.98966026 204.53540039]
[-5.31965876 193.99258423]
[5.35034275 183.44976807]
[16.02034378 172.90693665]
[12.79270172 159.89578247]
[16.46937370 146.89143372]
[26.18672752 137.34416199]
[39.46392059 133.84228516]
[52.83570099 137.41105652]
[63.75544357 127.12712097]
[74.67518616 116.84319305]
[85.59493256 106.55926514]
[82.49409485 96.55590820]
[86.39384460 85.54017639]
[97.09047699 78.32625580]
[101.34783173 63.94310379]
[105.60518646 49.55995941]
[109.86254120 35.17681122]
[114.11990356 20.79366493]
[105.48893738 5.63249397]
[110.34986115 -10.77177906]
[125.24974060 -18.47392845]
[129.16096497 -32.95502853]
[133.07220459 -47.43612671]
[136.98344421 -61.91722870]
[140.89466858 -76.39833069]
[131.90263367 -91.34817505]
[136.36878967 -107.86428833]
[151.07969666 -115.92151642]
[154.64256287 -130.49223328]
[158.20541382 -145.06295776]
[161.76828003 -159.63368225]
[153.35397339 -173.01184082]
[156.94535828 -188.40266418]
[170.41171265 -196.67506409]
[185.76371765 -192.92115784]
[193.89328003 -179.36808777]
[189.97727966 -164.05664062]
[176.33900452 -156.07083130]
[172.77613831 -141.50010681]
[169.21328735 -126.92937469]
[165.65042114 -112.35865021]
[173.83790588 -102.33460999]
[174.73953247 -89.22757721]
[167.79862976 -77.84344482]
[155.37577820 -72.48709106]
[151.46453857 -58.00599289]
[147.55329895 -43.52489471]
[143.64207458 -29.04379463]
[139.73083496 -14.56269455]
[147.67559814 -4.34520578]
[148.26266479 8.77968025]
[141.05078125 19.99410057]
[128.50305176 25.05101967]
[124.24568939 39.43416595]
[119.98833466 53.81731415]
[115.73097992 68.20046234]
[111.47362518 82.58361053]
[122.10545349 72.00229645]
[130.69100952 59.70236206]
[144.41604614 53.65064240]
[159.28784180 55.60762787]
[170.98005676 65.00401306]
[176.09132385 79.10631561]
[173.13473511 93.81204987]
[162.97039795 104.84319305]
[148.55519104 108.99069214]
[134.08345032 105.04849243]
[119.14089966 103.73692322]
[131.62542725 112.05177307]
[147.40029907 113.26177216]
[153.70425415 126.75656128]
[166.18876648 135.07141113]
[182.58006287 135.57888794]
[190.09677124 150.15391541]
[181.00633240 163.80294800]
[164.66023254 162.48503113]
[157.87391663 147.55592346]
[145.38940430 139.24107361]
[130.50750732 138.62582397]
[123.31056976 124.53630066]
[110.82604980 116.22145081]
[95.87886047 117.47900391]
[84.95911407 127.76293182]
[74.03937531 138.04685974]
[63.11962891 148.33079529]
[65.50521088 165.02807617]
[57.57953262 179.72895813]
[42.61856079 186.77162170]
[26.56316566 183.57693481]
[15.89316368 194.11976624]
[5.22316217 204.66258240]
[-5.44683981 215.20539856]
[-16.11684036 225.74822998]
[-26.78684235 236.29104614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 31]
[9 30]
[11 28]
[12 27]
[14 25]
[15 24]
[16 23]
[17 22]
[34 130]
[35 129]
[36 128]
[37 127]
[38 126]
[39 125]
[44 121]
[45 120]
[46 119]
[47 118]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[64 77]
[65 76]
[66 75]
[67 74]
[104 117]
[105 116]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
