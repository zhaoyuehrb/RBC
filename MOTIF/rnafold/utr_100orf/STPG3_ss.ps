%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGGGAAGAGAGCCAGGAGACUCUGAUGAUGAAUUCUGACCAGAAGGCAGUGAAAUUCCUGGCAAAUUUUUACAUCAAUGGAGGCAAACACUGGACCCAUGGUCACCUGAGGCAGACACAACCAG\
) } def
/len { sequence length } bind def

/coor [
[90.57579041 211.03289795]
[96.62213135 195.19375610]
[96.62213135 180.19375610]
[96.62213135 165.19375610]
[61.22235870 131.86425781]
[65.26117706 94.98605347]
[51.21579742 89.72039795]
[37.17041016 84.45473480]
[23.12502670 79.18907928]
[9.07964134 73.92341614]
[-6.65032482 81.45893097]
[-22.66760445 75.45532990]
[-29.30268860 60.05470657]
[-43.47401810 55.13806152]
[-57.64535141 50.22141647]
[-71.81668091 45.30477524]
[-85.98801422 40.38813019]
[-100.15933990 35.47148514]
[-114.33067322 30.55484200]
[-128.50199890 25.63819885]
[-142.59106445 32.28171158]
[-156.89276123 27.09366035]
[-163.13951111 13.62095833]
[-177.31083679 8.70431423]
[-184.62258911 15.44409657]
[-193.85505676 18.97822762]
[-203.68154907 18.84511757]
[-212.70701599 15.10687828]
[-219.66610718 8.33436489]
[-223.60060120 -0.47956580]
[-223.99111938 -10.06546021]
[-237.60743713 -16.35799026]
[-252.28385925 -11.13877869]
[-266.00311279 -17.71426773]
[-270.88836670 -31.73816490]
[-284.50469971 -38.03069687]
[-298.12100220 -44.32322693]
[-311.73733521 -50.61575317]
[-328.01116943 -48.59230423]
[-337.68325806 -61.83552170]
[-330.80377197 -76.72191620]
[-314.44973755 -77.93764496]
[-305.44479370 -64.23207092]
[-291.82849121 -57.93954086]
[-278.21215820 -51.64701080]
[-264.59585571 -45.35448074]
[-250.74928284 -50.72180176]
[-236.85075378 -44.53425217]
[-231.31489563 -29.97430611]
[-217.69859314 -23.68177605]
[-199.33416748 -32.44023132]
[-180.12420654 -24.90817451]
[-172.39419556 -5.46701670]
[-158.22286987 -0.55037284]
[-144.97424316 -7.25929356]
[-130.53247070 -2.47499371]
[-123.58535767 11.46686745]
[-109.41403198 16.38351250]
[-95.24269867 21.30015564]
[-81.07136536 26.21679878]
[-66.90003967 31.13344193]
[-52.72870636 36.05008698]
[-38.55737686 40.96673203]
[-24.38604546 45.88337326]
[-13.63220978 38.67262268]
[-0.49373043 39.01086807]
[10.18762779 46.99917603]
[14.34530067 59.87803268]
[28.39068604 65.14369202]
[42.43606949 70.40935516]
[56.48145676 75.67501068]
[70.52684021 80.94067383]
[78.14953613 65.14791107]
[94.20168304 53.18595886]
[116.41078186 49.38574219]
[140.39675903 56.66364670]
[160.53379822 75.56037903]
[173.82226562 68.60217285]
[182.45863342 55.34608078]
[197.32287598 56.29660797]
[210.61134338 49.33839798]
[212.73468018 33.96728516]
[223.51165771 22.80321884]
[238.79829407 20.13900375]
[252.71658325 26.99909019]
[259.91467285 40.74563217]
[257.62469482 56.09280396]
[246.72724915 67.13930511]
[231.41259766 69.63753510]
[217.56954956 62.62686539]
[204.28108215 69.58507538]
[196.59519958 82.34346008]
[180.78047180 81.89064026]
[167.49200439 88.84884644]
[169.34255981 103.73426056]
[183.93026733 107.22691345]
[198.51797485 110.71957397]
[213.10568237 114.21223450]
[229.91732788 112.02013397]
[236.67768860 127.56792450]
[223.60896301 138.36814880]
[209.61303711 128.79994202]
[195.02531433 125.30728912]
[180.43760681 121.81462860]
[165.84989929 118.32196808]
[162.04646301 124.78601837]
[154.43960571 137.71411133]
[150.63618469 144.17816162]
[160.77383423 155.23384094]
[170.91148376 166.28952026]
[186.07267761 173.87730408]
[182.97846985 190.54649353]
[166.10415649 192.18771362]
[159.85580444 176.42716980]
[149.71815491 165.37149048]
[139.58050537 154.31581116]
[132.59091187 157.03530884]
[138.02987671 171.01448059]
[143.46864319 184.99375916]
[129.48928833 190.43229675]
[124.05069733 176.45346069]
[118.61172485 162.47427368]
[111.62213135 165.19375610]
[111.62213135 180.19375610]
[111.62213135 195.19375610]
[117.66847229 211.03289795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[13 64]
[14 63]
[15 62]
[16 61]
[17 60]
[18 59]
[19 58]
[20 57]
[23 54]
[24 53]
[31 50]
[32 49]
[35 46]
[36 45]
[37 44]
[38 43]
[77 94]
[78 93]
[80 91]
[81 90]
[95 105]
[96 104]
[97 103]
[98 102]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
