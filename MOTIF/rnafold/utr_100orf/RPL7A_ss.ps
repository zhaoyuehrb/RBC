%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUUUCUCUCUCCUCCCGCCGCCCAAGAUGCCGAAAGGAAAGAAGGCCAAGGGAAAGAAGGUGGCUCCGGCCCCAGCUGUCGUGAAGAAGCAGGAGGCUAAGAAAGUGGUGAAUCCCCUGUUUGAGA\
) } def
/len { sequence length } bind def

/coor [
[123.59767914 314.14218140]
[132.63076782 302.04647827]
[144.59298706 292.83737183]
[138.97758484 278.92810059]
[133.19581604 265.08718872]
[127.24851227 251.31657410]
[121.30119324 237.54597473]
[115.35388184 223.77537537]
[109.40657043 210.00477600]
[103.45925903 196.23417664]
[87.13445282 185.98068237]
[89.50080109 166.02787781]
[82.90010071 152.55824280]
[76.29940033 139.08862305]
[69.69869232 125.61900330]
[63.09799194 112.14938354]
[51.24346161 102.95861816]
[36.55402756 99.92209625]
[21.86459160 96.88556671]
[7.17515612 93.84904480]
[-4.30303669 104.12315369]
[-19.45295906 105.65065002]
[-32.44369507 98.05428314]
[-38.39909744 84.42816162]
[-53.08853531 81.39163971]
[-67.77796936 78.35511780]
[-75.46483612 90.40595245]
[-86.78969574 99.07789612]
[-100.37081146 103.33872223]
[-114.55997467 102.69284821]
[-127.64253235 97.23884583]
[-138.04458618 87.65509033]
[-144.52235413 75.11542511]
[-146.31082153 61.14540863]
[-160.92321777 57.75751495]
[-176.44401550 63.05252075]
[-188.61024475 52.05638885]
[-184.90634155 36.08099747]
[-169.14256287 31.56045914]
[-157.53532410 43.14511871]
[-142.92292786 46.53301239]
[-133.94320679 33.53136063]
[-120.64035034 24.93324852]
[-105.02235413 22.07148933]
[-89.46008301 25.41038132]
[-76.32738495 34.47066498]
[-67.63899231 47.89807129]
[-64.74144745 63.66567993]
[-50.05200958 66.70220184]
[-35.36257172 69.73873138]
[-24.49268532 59.59064865]
[-9.55480480 57.76754379]
[3.74779534 65.17660522]
[10.21168137 79.15960693]
[24.90111732 82.19613647]
[39.59055328 85.23265839]
[54.27998734 88.26918793]
[41.04273987 81.21402740]
[37.32339859 66.68245697]
[45.54346085 54.13532257]
[60.35121536 51.74149323]
[72.10600281 61.05948257]
[73.15497589 76.02234650]
[76.36741638 61.37038040]
[75.14533997 52.21533203]
[79.83655548 46.40756226]
[83.39941406 31.83683777]
[86.96228027 17.26611328]
[81.85375214 1.68294740]
[92.99497223 -10.35055828]
[108.92480469 -6.45536470]
[113.25600433 9.36148643]
[101.53300476 20.82897377]
[97.97013855 35.39970016]
[94.40727997 49.97042465]
[91.01938629 64.58282471]
[87.80694580 79.23479462]
[100.85448456 78.29185486]
[111.09027863 84.11968231]
[123.77059937 76.10659790]
[136.45091248 68.09350586]
[142.10426331 60.78953552]
[149.53276062 60.04453659]
[162.40158081 52.33781433]
[167.68449402 37.18953323]
[182.86886597 32.01124954]
[196.30653381 40.77529907]
[197.68928528 56.75865173]
[185.95637512 67.70024872]
[170.10830688 65.20663452]
[157.23948669 72.91335297]
[144.46400452 80.77381897]
[131.78369141 88.78691101]
[119.10337067 96.80000305]
[104.29991150 121.29517365]
[76.56761169 105.54868317]
[83.16831970 119.01830292]
[89.76902008 132.48793030]
[96.36972046 145.95755005]
[102.97042847 159.42716980]
[113.56539917 162.39205933]
[120.59246826 170.56848145]
[121.87680054 181.05043030]
[117.22985840 190.28686523]
[123.17716980 204.05746460]
[129.12448120 217.82806396]
[135.07179260 231.59866333]
[141.01910400 245.36926270]
[146.96643066 259.13986206]
[153.30415344 265.85861206]
[152.88684082 273.31271362]
[158.50224304 287.22195435]
[173.50523376 285.54479980]
[188.40417480 287.97872925]
[202.09347534 294.34313965]
[213.55728149 304.16574097]
[221.94491577 316.71765137]
[226.63397217 331.06741333]
[227.27645874 346.15017700]
[223.82472229 360.84671021]
[216.53491211 374.06643677]
[205.94795227 384.82833862]
[192.84948730 392.33386230]
[178.21150208 396.02600098]
[163.12022400 395.63079834]
[148.69555664 391.17758179]
[136.00787354 382.99679565]
[125.99868774 371.69549561]
[119.41076660 358.11236572]
[116.73297119 343.25531006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[17 57]
[18 56]
[19 55]
[20 54]
[24 50]
[25 49]
[26 48]
[34 41]
[35 40]
[63 77]
[64 76]
[66 75]
[67 74]
[68 73]
[79 94]
[80 93]
[81 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
