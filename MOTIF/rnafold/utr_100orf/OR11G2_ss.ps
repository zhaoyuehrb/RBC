%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAUUUUCUUUCCCAAAAUGAUUUAAAUAUAAAUCUGAUUCCCCAUCUAUGUUUGCACCGUCAUUCAGUAAUUGCUGGUGCUUUUACAAUUCACAGGC\
) } def
/len { sequence length } bind def

/coor [
[-3.73914289 248.98466492]
[-14.92681217 254.35902405]
[-26.62867737 258.49353027]
[-38.70781708 261.33996582]
[-51.02290726 262.86523438]
[-63.42988586 263.05166626]
[-75.78364563 261.89724731]
[-87.93970490 259.41561890]
[-99.75591278 255.63604736]
[-111.09413147 250.60284424]
[-121.82180786 244.37507629]
[-131.81355286 237.02569580]
[-140.95262146 228.64083862]
[-149.13223267 219.31867981]
[-156.25683594 209.16838074]
[-162.24324036 198.30874634]
[-167.02159119 186.86689758]
[-170.53616333 174.97669983]
[-172.74601746 162.77729797]
[-173.62545776 150.41139221]
[-173.16439819 138.02365112]
[-171.36837769 125.75891876]
[-185.84715271 121.83908844]
[-200.32592773 117.91926575]
[-214.80470276 113.99943542]
[-229.28347778 110.07960510]
[-243.76225281 106.15977478]
[-259.46624756 110.88383484]
[-271.22235107 99.45027924]
[-266.93688965 83.62097931]
[-251.01838684 79.67974854]
[-239.84242249 91.68099976]
[-225.36364746 95.60083008]
[-210.88487244 99.52066040]
[-196.40609741 103.44048309]
[-181.92732239 107.36031342]
[-167.44854736 111.28014374]
[-159.97967529 94.12868500]
[-149.81887817 78.41835022]
[-137.23608398 64.56809235]
[-122.56581116 52.94744110]
[-106.19832611 43.86661911]
[-88.56918335 37.56827164]
[-70.14768982 34.22099304]
[-51.42438889 33.91479874]
[-32.89801788 36.65871048]
[-15.06219578 42.38049698]
[1.60771048 50.92857361]
[16.66725922 62.07600403]
[29.71478462 75.52655792]
[40.40211105 90.92253876]
[48.44384003 107.85433960]
[62.79370499 103.48611450]
[77.14356995 99.11789703]
[84.77240753 82.93205261]
[101.72011566 77.19132233]
[117.61515808 85.40888214]
[131.66569519 80.15699005]
[145.71623230 74.90509033]
[159.76676941 69.65319824]
[173.81730652 64.40129852]
[187.86784363 59.14940262]
[198.08546448 47.07004929]
[212.71615601 49.86144257]
[226.76669312 44.60954666]
[229.93479919 29.51097870]
[240.77914429 18.53811073]
[255.83932495 15.19234180]
[270.30972290 20.54129601]
[279.57287598 32.87814331]
[280.67291260 48.26623535]
[273.25888062 61.79529190]
[259.69650269 69.14823914]
[244.31353760 67.97878265]
[232.01860046 58.66008377]
[217.96806335 63.91197968]
[208.75543213 75.61568451]
[193.11973572 73.19993591]
[179.06919861 78.45183563]
[165.01866150 83.70373535]
[150.96812439 88.95562744]
[136.91758728 94.20752716]
[122.86705780 99.45941925]
[120.25157166 110.63335419]
[112.53839874 119.13068390]
[101.66907501 122.81246185]
[90.37962341 120.75193024]
[81.51179504 113.46775818]
[67.16192627 117.83598328]
[52.81206131 122.20420074]
[54.98024368 134.43473816]
[55.81491089 146.82710266]
[55.30647278 159.23631287]
[53.46104813 171.51725769]
[50.30039215 183.52632141]
[45.86164474 195.12307739]
[40.19688034 206.17196655]
[33.37250900 216.54382324]
[25.46849632 226.11743164]
[16.57742310 234.78094482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[52 90]
[53 89]
[54 88]
[57 83]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[64 76]
[65 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
