%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAGGGCCCGCGCGCAGCCGCCGCCGCCGCCGCCGCGCGAGGAGCCAGGAUGGUCCUGGUCCACGUCGGCUAUCUCGUGCUUCCAGUGUUUGGCUCUGUGCGAAACAGAGGUGCCCCCUUUCAAAGGUCUCAGCAUCCUCACGCUACCU\
) } def
/len { sequence length } bind def

/coor [
[148.69844055 229.48670959]
[145.18191528 214.67160034]
[151.13204956 200.46238708]
[143.45378113 187.57656860]
[135.77549744 174.69076538]
[128.09722900 161.80494690]
[120.41894531 148.91914368]
[112.74066925 136.03334045]
[102.93704224 138.10643005]
[92.93152618 137.56011963]
[83.41188812 134.43196106]
[75.03250122 128.93699646]
[63.19539261 138.15019226]
[51.35828400 147.36337280]
[46.46828461 155.15513611]
[39.17999649 156.64163208]
[27.15500832 165.60821533]
[20.71702576 180.06030273]
[5.88886261 181.46559143]
[-6.13612509 190.43217468]
[-12.11943913 205.70083618]
[-28.37240410 207.88560486]
[-38.17536163 194.73896790]
[-31.44387054 179.78506470]
[-15.10271168 178.40719604]
[-3.07772398 169.44061279]
[2.50015020 155.62986755]
[18.18842125 153.58323669]
[30.21340942 144.61663818]
[42.14509583 135.52627563]
[53.98220062 126.31307983]
[65.81931305 117.09989166]
[61.78871918 100.78987885]
[65.14185333 84.32723236]
[52.93412399 75.61108398]
[40.72639465 66.89492798]
[28.51866341 58.17877960]
[19.65553093 55.71533966]
[16.15122223 49.15419388]
[4.12623501 40.18760681]
[-7.89875221 31.22101974]
[-23.58702469 29.17438698]
[-29.16489792 15.36364555]
[-41.18988419 6.39705896]
[-53.21487427 -2.56952763]
[-62.02519989 -5.21561432]
[-65.39316559 -11.84778118]
[-77.23027039 -21.06097221]
[-89.06737518 -30.27416229]
[-100.90448761 -39.48735428]
[-112.74159241 -48.70054626]
[-124.57869720 -57.91373444]
[-140.79173279 -62.87091827]
[-140.51649475 -79.82263184]
[-124.15106964 -84.25085449]
[-115.36550903 -69.75083923]
[-103.52840424 -60.53765106]
[-91.69129181 -51.32446289]
[-79.85418701 -42.11127090]
[-68.01708221 -32.89807892]
[-56.17996979 -23.68488884]
[-44.24828720 -14.59451485]
[-32.22330093 -5.62792873]
[-20.19831085 3.33865786]
[-5.37014771 4.74394083]
[1.06783414 19.19603348]
[13.09282207 28.16261864]
[25.11780930 37.12920761]
[37.23481369 45.97104645]
[49.44254684 54.68719864]
[61.65027618 63.40335083]
[73.85800934 72.11950684]
[80.12500763 67.35478210]
[87.23529053 63.97517395]
[94.88717651 62.12408447]
[102.75599670 61.88005447]
[110.50788116 63.25343323]
[117.81392670 66.18595123]
[124.36412811 70.55318451]
[136.00830078 61.09732437]
[147.65246582 51.64146423]
[159.29664612 42.18560410]
[170.94081116 32.72974777]
[182.58499146 23.27388763]
[194.22915649 13.81802845]
[196.13038635 8.82077789]
[199.45083618 5.42909956]
[203.32342529 3.91628098]
[206.90054321 4.16409445]
[219.10827637 -4.55205774]
[231.31600952 -13.26820946]
[243.52374268 -21.98436165]
[255.73147583 -30.70051384]
[262.46676636 -45.01646805]
[277.32080078 -46.11499786]
[289.52853394 -54.83115005]
[293.57675171 -70.35504913]
[308.29577637 -76.73706055]
[322.39440918 -69.08146667]
[325.05737305 -53.26096725]
[314.24191284 -41.41170502]
[298.24468994 -42.62341690]
[286.03695679 -33.90726471]
[280.17483521 -20.21475220]
[264.44763184 -18.49278450]
[252.23989868 -9.77663136]
[240.03216553 -1.06047916]
[227.82443237 7.65567303]
[215.61669922 16.37182617]
[203.68501282 25.46220016]
[192.04084778 34.91806030]
[180.39666748 44.37391663]
[168.75250244 53.82977676]
[157.10833740 63.28563690]
[145.46415710 72.74149323]
[133.81999207 82.19735718]
[137.63116455 106.67994690]
[125.62648010 128.35505676]
[133.30476379 141.24085999]
[140.98303223 154.12667847]
[148.66130066 167.01248169]
[156.33958435 179.89830017]
[164.01785278 192.78410339]
[179.34645081 194.31396484]
[190.70227051 204.45785522]
[193.87005615 219.16938782]
[187.83985901 232.76257324]
[195.51812744 245.64837646]
[203.19641113 258.53417969]
[210.87467957 271.42001343]
[215.54560852 274.02185059]
[218.42314148 277.79660034]
[219.36181641 281.84683228]
[218.60086060 285.35086060]
[225.46591187 298.68768311]
[232.33096313 312.02453613]
[247.68682861 314.25537109]
[258.77520752 325.11019897]
[261.33239746 340.41513062]
[254.37507629 354.28506470]
[240.57849121 361.38677979]
[225.24772644 358.98947144]
[214.27775574 348.01498413]
[211.88674927 332.68322754]
[218.99412537 318.88955688]
[212.12907410 305.55273438]
[205.26403809 292.21591187]
[197.98887634 279.09826660]
[190.31059265 266.21246338]
[182.63232422 253.32666016]
[174.95404053 240.44085693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[5 121]
[6 120]
[7 119]
[8 118]
[12 32]
[13 31]
[14 30]
[16 29]
[17 28]
[19 26]
[20 25]
[34 72]
[35 71]
[36 70]
[37 69]
[39 68]
[40 67]
[41 66]
[43 64]
[44 63]
[45 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[79 116]
[80 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
[95 103]
[96 102]
[127 151]
[128 150]
[129 149]
[130 148]
[134 147]
[135 146]
[136 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
