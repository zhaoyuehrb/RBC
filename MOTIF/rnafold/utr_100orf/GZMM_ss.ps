%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGGGCCAGCACCCACACUGGGUCUCCACAGCGGCAUGGAGGCCUGCGUGUCUUCACUGCUGGUGCUGGCCCUGGGGGCCCUGUCAGUAGGCAGCUCCUUUGGGACCCAGAUCAUCGGGGGCCGGGAGGUGAUCC\
) } def
/len { sequence length } bind def

/coor [
[86.00440979 103.11027527]
[71.80273438 98.28199768]
[57.60105515 93.45372009]
[43.39937210 88.62543488]
[29.04219627 84.28130341]
[14.54602242 80.42631531]
[0.04984888 76.57132721]
[-14.44632530 72.71633911]
[-28.94249916 68.86135101]
[-43.43867111 65.00635529]
[-57.93484497 61.15136719]
[-72.43102264 57.29637909]
[-86.92719269 53.44139099]
[-101.42337036 49.58639908]
[-115.91954041 45.73141098]
[-130.41571045 41.87641907]
[-141.38893127 44.51203537]
[-149.62681580 38.81142044]
[-164.60289001 37.96432114]
[-179.57894897 37.11721802]
[-194.55500793 36.27011871]
[-209.53968811 35.59230804]
[-224.53106689 35.08387375]
[-239.52244568 34.57543945]
[-254.51382446 34.06700516]
[-269.50521851 33.55857086]
[-284.49658203 33.05013657]
[-299.48797607 32.54170609]
[-314.47933960 32.03327179]
[-329.47073364 31.52483749]
[-344.46209717 31.01640320]
[-353.89651489 43.33595657]
[-368.77993774 47.72499084]
[-383.38937378 42.49583435]
[-392.10720825 29.65920258]
[-391.58123779 14.15104389]
[-382.01373291 1.93456089]
[-367.08358765 -2.29275894]
[-352.53173828 3.09457469]
[-343.95367432 16.02502251]
[-328.96231079 16.53345680]
[-313.97091675 17.04188919]
[-298.97952271 17.55032349]
[-283.98815918 18.05875778]
[-268.99676514 18.56719208]
[-254.00538635 19.07562447]
[-239.01400757 19.58405876]
[-224.02262878 20.09249306]
[-209.03125000 20.60092735]
[-202.18197632 17.65909576]
[-193.70790100 21.29405594]
[-178.73184204 22.14115715]
[-163.75578308 22.98825836]
[-148.77972412 23.83535957]
[-159.32951355 13.17225552]
[-163.44947815 -1.25084925]
[-160.12370300 -15.87751007]
[-150.17225647 -27.10109138]
[-136.04896545 -32.15408707]
[-121.23635101 -29.79052925]
[-109.38689423 -20.59322548]
[-103.42243195 -6.83004236]
[-104.81368256 8.10529900]
[-113.21759033 20.53004837]
[-126.56072235 27.38024712]
[-112.06455231 31.23523521]
[-97.56837463 35.09022522]
[-83.07220459 38.94521713]
[-68.57602692 42.80020523]
[-54.07985687 46.65519333]
[-39.58368301 50.51018524]
[-25.08750916 54.36517334]
[-10.59133530 58.22016525]
[3.90483856 62.07515335]
[18.40101242 65.93014526]
[32.89718628 69.78513336]
[36.17188263 68.27570343]
[40.35661316 68.32920837]
[44.68417740 70.36280060]
[48.22765350 74.42375946]
[62.42933273 79.25203705]
[76.63101196 84.08031464]
[90.83269501 88.90859985]
[105.67111969 86.71288300]
[117.86587524 77.97858429]
[130.06063843 69.24429321]
[142.25538635 60.50999451]
[154.45014954 51.77569962]
[160.72521973 36.62461090]
[177.01708984 34.75199127]
[186.56610107 48.08423233]
[179.54902649 62.90626907]
[163.18443298 63.97045898]
[150.98968506 72.70475006]
[138.79492188 81.43904877]
[126.60016632 90.17333984]
[114.40541077 98.90763855]
[115.59074402 113.86072540]
[129.00929260 120.56465149]
[142.42784119 127.26856995]
[155.84638977 133.97248840]
[169.26493835 140.67640686]
[176.01310730 140.65914917]
[180.96878052 143.65254211]
[183.12805176 147.99851990]
[196.22996521 155.30194092]
[211.25881958 151.20663452]
[224.44197083 158.79998779]
[228.25360107 173.15293884]
[241.35551453 180.45635986]
[254.45741272 187.75978088]
[268.47912598 181.11360168]
[283.72317505 184.01158142]
[294.32794189 195.33935547]
[296.21566772 210.74116516]
[288.66049194 224.29472351]
[274.56753540 230.78839111]
[259.35580444 227.72523499]
[248.87452698 216.28308105]
[247.15399170 200.86167908]
[234.05209351 193.55825806]
[220.95018005 186.25483704]
[206.73762512 190.56053162]
[193.34638977 183.34046936]
[188.92654419 168.40383911]
[175.82463074 161.10041809]
[162.56101990 154.09495544]
[149.14247131 147.39103699]
[135.72392273 140.68711853]
[122.30537415 133.98320007]
[108.88682556 127.27927399]
[106.35102081 142.06338501]
[96.42333984 153.30798340]
[82.06742859 157.65629578]
[67.56887817 153.81024170]
[57.25585938 142.91796875]
[54.20705795 128.23107910]
[59.33261108 114.13396454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[18 54]
[19 53]
[20 52]
[21 51]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[98 131]
[99 130]
[100 129]
[101 128]
[102 127]
[105 126]
[106 125]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
