%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGGCAGCAAGCGUGGGAACGCGGGCGGCGAGACGGCGGCAGGACGGCGGCAGGAUGUGUGACCGGAAUGGUGGUCGGCGGCUUCGACAGUGGCUGAUCGAGCAGAUUGACAGUAGCAUGUAUCCAGGACUGAUUUGGGAGAAUGAGGAGAAGA\
) } def
/len { sequence length } bind def

/coor [
[87.75264740 166.00262451]
[90.96466827 151.35057068]
[83.46800232 151.12690735]
[73.62461090 162.44537354]
[63.78122711 173.76385498]
[60.56349182 189.25439453]
[46.37323761 193.78051758]
[36.52985001 205.09898376]
[39.92805481 215.31245422]
[38.75939178 225.93121338]
[33.30470276 235.02215576]
[24.61886978 240.95870972]
[14.32742691 242.71186829]
[4.32252645 240.02795410]
[-6.17810488 250.73947144]
[-16.67873573 261.45098877]
[-27.17936707 272.16253662]
[-30.73985100 288.17050171]
[-46.46245575 292.83221436]
[-58.17311478 281.35214233]
[-53.82490158 265.53994751]
[-37.89089203 261.66189575]
[-27.39026070 250.95036316]
[-16.88962936 240.23884583]
[-6.38899755 229.52732849]
[-8.06845188 210.16528320]
[5.17251682 195.52784729]
[25.21138000 195.25559998]
[35.05476761 183.93713379]
[37.56843948 169.25616455]
[52.46276093 163.92047119]
[62.30614471 152.60198975]
[72.14952850 141.28352356]
[64.26390839 131.85592651]
[59.21932220 121.16865540]
[57.13305283 110.01634979]
[57.91249084 99.17021179]
[43.20803070 96.20730591]
[28.15142822 101.06624603]
[17.20324516 90.96740723]
[2.49878550 88.00449371]
[-10.52340221 96.95983887]
[-26.04844475 94.00203705]
[-34.86560822 80.88589478]
[-31.74382973 65.39299011]
[-18.53520012 56.71498871]
[-3.07616901 60.00039673]
[5.46169662 73.30003357]
[20.16615677 76.26294708]
[34.17099762 71.19207764]
[46.17094040 81.50284576]
[60.87540054 84.46575165]
[69.50577545 70.98019409]
[82.54743195 61.69262695]
[98.11377716 57.94659042]
[113.95298004 60.28398895]
[121.36671448 47.24418640]
[128.78045654 34.20438004]
[136.19418335 21.16457748]
[143.60792542 8.12477398]
[151.02166748 -4.91503048]
[158.43540955 -17.95483398]
[165.84913635 -30.99463844]
[173.26287842 -44.03444290]
[174.45463562 -58.98702621]
[169.19996643 -73.03652954]
[163.94531250 -87.08602905]
[150.00090027 -95.01906586]
[147.65144348 -110.88915253]
[158.69923401 -122.52211761]
[174.66935730 -120.99414062]
[183.31089783 -107.47736359]
[177.99481201 -92.34069061]
[183.24946594 -78.29119110]
[188.50413513 -64.24169159]
[203.50117493 -63.94345474]
[209.31024170 -77.77294159]
[215.11930847 -91.60243225]
[220.92837524 -105.43191528]
[226.73744202 -119.26140594]
[232.54650879 -133.09089661]
[238.35557556 -146.92037964]
[236.56645203 -162.64010620]
[248.62889099 -171.37777710]
[254.43795776 -185.20727539]
[260.24703979 -199.03675842]
[255.53691101 -214.37280273]
[264.70901489 -227.53533936]
[280.72726440 -228.42718506]
[291.30383301 -216.36421204]
[288.32528687 -200.60006714]
[274.07650757 -193.22769165]
[268.26745605 -179.39819336]
[262.45837402 -165.56871033]
[264.66299438 -150.83816528]
[252.18505859 -141.11131287]
[246.37599182 -127.28182983]
[240.56692505 -113.45233917]
[234.75785828 -99.62284851]
[228.94879150 -85.79336548]
[223.13972473 -71.96387482]
[217.33065796 -58.13438797]
[232.30308533 -59.04345322]
[246.85600281 -55.40851212]
[259.64251709 -47.56598663]
[269.47921753 -36.24170685]
[275.45568848 -22.48374557]
[277.01885986 -7.56541681]
[274.02401733 7.13257360]
[266.74835205 20.24991226]
[255.86520386 30.57257462]
[242.38186646 37.14519119]
[227.54618835 39.35945892]
[212.73126221 37.01044464]
[199.30821228 30.31555367]
[188.51934814 19.89440155]
[181.36318970 6.71147871]
[178.50205994 -8.01312351]
[180.20074463 -22.91662979]
[186.30268860 -36.62070465]
[178.88894653 -23.58090019]
[171.47520447 -10.54109669]
[164.06147766 2.49870729]
[156.64773560 15.53851128]
[149.23399353 28.57831573]
[141.82025146 41.61811829]
[134.40652466 54.65792465]
[126.99278259 67.69773102]
[138.45306396 79.37236023]
[144.90393066 95.03884888]
[144.99662781 112.56446838]
[138.28231812 129.38299561]
[125.33981323 142.87040710]
[134.49093628 154.75556946]
[149.04067993 160.96971130]
[150.67466736 175.77441406]
[159.82580566 187.65956116]
[168.97692871 199.54472351]
[178.12805176 211.42987061]
[193.48724365 217.17680359]
[195.92262268 233.39410400]
[182.92886353 243.39881897]
[167.87283325 236.89894104]
[166.24290466 220.58099365]
[157.09178162 208.69584656]
[147.94064331 196.81069946]
[138.78952026 184.92553711]
[124.89432526 179.56150818]
[122.60578918 163.90669250]
[113.45465851 152.02153015]
[105.95799255 151.79788208]
[108.29081726 166.61537170]
[117.28496552 178.61975098]
[115.71504974 193.53736877]
[104.41895294 203.40641785]
[89.42560577 202.95962524]
[78.73722839 192.43542480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[7 29]
[8 28]
[14 25]
[15 24]
[16 23]
[17 22]
[37 52]
[38 51]
[40 49]
[41 48]
[56 128]
[57 127]
[58 126]
[59 125]
[60 124]
[61 123]
[62 122]
[63 121]
[64 120]
[65 75]
[66 74]
[67 73]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[84 94]
[85 93]
[86 92]
[133 150]
[134 149]
[136 147]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
