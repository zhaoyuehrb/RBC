%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUCCACUCGGCUCACUUAAGGCAGGCAGCCCAGCCCCUGGCAGCACCCACGAUGCGGGACCUGCCUCUCACCAGCCUGGCCCUAGUGCUGUCUGCCCUGGGGGCUCUGCUGGGGACUGAGGCCCUCAGAGCAGAGGAGCCAGCUGUGGGCA\
) } def
/len { sequence length } bind def

/coor [
[66.28907776 485.87335205]
[62.94751358 500.70248413]
[54.18137360 513.12115479]
[41.32742691 521.23559570]
[26.34581375 523.80847168]
[11.52111626 520.44738770]
[-0.88600630 511.66494751]
[-8.98355770 498.80032349]
[-11.53671932 483.81533813]
[-8.15615273 468.99508667]
[0.64262897 456.59951782]
[13.51787663 448.51889038]
[28.50620842 445.98544312]
[31.82284737 431.35671997]
[35.13948441 416.72799683]
[38.45612335 402.09924316]
[41.77276230 387.47052002]
[45.08940125 372.84176636]
[43.65322113 370.36941528]
[43.13956833 367.16296387]
[43.83930969 363.58206177]
[45.90367508 360.08694458]
[49.31280136 357.18566895]
[53.80324936 342.87356567]
[58.29369736 328.56149292]
[54.72130966 314.10162354]
[66.23503113 303.25061035]
[70.72547913 288.93850708]
[75.21592712 274.62643433]
[70.99591827 252.47442627]
[95.23877716 243.22001648]
[95.54278564 228.22309875]
[95.84678650 213.22618103]
[95.99879456 198.22695923]
[95.99879456 183.22695923]
[95.99879456 168.22695923]
[95.84678650 153.22772217]
[95.54278564 138.23080444]
[95.23877716 123.23388672]
[94.93477631 108.23696899]
[83.20343781 108.84769440]
[71.73613739 98.59072876]
[59.87449646 89.40913391]
[48.01286316 80.22754669]
[36.15122604 71.04595947]
[24.28959084 61.86436844]
[8.81716347 63.66486359]
[-3.08142662 54.18445206]
[-4.70257282 39.42276382]
[-16.56420898 30.24117279]
[-28.42584419 21.05958366]
[-43.66747284 24.55626488]
[-57.56725311 17.39175797]
[-63.56212997 2.94892406]
[-58.82151031 -11.95277214]
[-45.58377075 -20.27720451]
[-30.09936142 -18.09383202]
[-19.67955208 -6.43357611]
[-19.24425507 9.19794750]
[-7.38261938 18.37953758]
[4.47901678 27.56112671]
[19.17581558 25.43046761]
[31.33599663 34.57292938]
[33.47117996 50.00273132]
[45.33281708 59.18432236]
[57.19445038 68.36591339]
[69.05609131 77.54750061]
[80.91772461 86.72908783]
[69.68491364 76.78806305]
[66.88766479 62.05119324]
[73.69657898 48.68561554]
[87.26223755 42.28461075]
[101.90763855 45.52689362]
[111.50390625 57.05562210]
[112.03516388 72.04621124]
[103.27806854 84.22607422]
[112.81597900 72.64901733]
[122.35389709 61.07196808]
[121.02455902 45.55195999]
[130.86227417 33.94705200]
[145.66642761 32.77537918]
[155.20434570 21.19832420]
[164.74226379 9.62126923]
[174.28016663 -1.95578504]
[183.81808472 -13.53283882]
[193.35600281 -25.10989380]
[202.77610779 -36.78300858]
[212.07742310 -48.55099106]
[214.56459045 -64.17547607]
[228.52677917 -69.36261749]
[237.82810974 -81.13059998]
[237.39825439 -97.16789246]
[249.76104736 -107.39243317]
[265.43280029 -103.96082306]
[272.39147949 -89.50550842]
[265.29898071 -75.11536407]
[249.59608459 -71.82927704]
[240.29476929 -60.06129837]
[238.47290039 -45.27853394]
[223.84541321 -39.24966812]
[214.54408264 -27.48168564]
[212.85380554 -20.24134254]
[204.93305969 -15.57197857]
[195.39514160 -3.99492455]
[185.85722351 7.58212948]
[176.31930542 19.15918350]
[166.78140259 30.73623848]
[157.24348450 42.31329346]
[158.92640686 57.06806564]
[149.41851807 68.94471741]
[133.93095398 70.60987854]
[124.39303589 82.18693542]
[114.85511780 93.76399231]
[109.93169403 107.93296814]
[110.23569489 122.92988586]
[110.53970337 137.92680359]
[110.84370422 152.92372131]
[114.16236877 161.49855042]
[110.99879456 168.22695923]
[110.99879456 183.22695923]
[110.99879456 198.22695923]
[114.14299011 206.86727905]
[110.84370422 213.53019714]
[110.53970337 228.52711487]
[110.23569489 243.52403259]
[116.70479584 257.05734253]
[128.56643677 266.23895264]
[140.42807007 275.42053223]
[152.28970337 284.60211182]
[167.93371582 282.35705566]
[180.53294373 291.89828491]
[182.61248779 307.56515503]
[172.93858337 320.06280518]
[157.25059509 321.97659302]
[144.85592651 312.17111206]
[143.10810852 296.46374512]
[131.24647522 287.28216553]
[119.38484192 278.10058594]
[107.52320099 268.91897583]
[99.42428589 277.13067627]
[89.52801514 279.11688232]
[85.03756714 293.42895508]
[80.54711914 307.74105835]
[83.79832458 323.22460938]
[72.60578156 333.05194092]
[68.11534119 347.36401367]
[63.62488937 361.67611694]
[59.71813965 376.15841675]
[56.40150070 390.78713989]
[53.08486176 405.41589355]
[49.76822281 420.04461670]
[46.45158386 434.67337036]
[43.13494492 449.30209351]
[55.56512833 458.05187988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 153]
[14 152]
[15 151]
[16 150]
[17 149]
[18 148]
[23 147]
[24 146]
[25 145]
[27 143]
[28 142]
[29 141]
[31 125]
[32 124]
[33 123]
[34 121]
[35 120]
[36 119]
[37 117]
[38 116]
[39 115]
[40 114]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[49 61]
[50 60]
[51 59]
[76 113]
[77 112]
[78 111]
[81 108]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 101]
[88 100]
[90 98]
[91 97]
[126 139]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
