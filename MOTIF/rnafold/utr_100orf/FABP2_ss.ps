%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCGCCCAAGGACAGACCUGAAUCUCUAGCUGCCUAGAGGCUGACUCAACUGAAAUCAUGGCGUUUGACAGCACUUGGAAGGUAGACCGGAGUGAAAACUAUGACAAGUUCAUGGAAAAAAUGGGUGUUAAUAUAGUGAAAAGGAAGCUUGCAGCUC\
) } def
/len { sequence length } bind def

/coor [
[136.02828979 276.80105591]
[128.31472778 262.85339355]
[126.52924347 246.97647095]
[130.97361755 231.59002686]
[140.99789429 219.05038452]
[133.66856384 205.96295166]
[126.33924866 192.87550354]
[119.00993347 179.78807068]
[111.68061066 166.70062256]
[104.35129547 153.61318970]
[89.37731171 152.73011780]
[80.56053162 164.86537170]
[71.74375153 177.00062561]
[72.82317352 193.00732422]
[60.88490295 203.72447205]
[45.08696365 200.93080139]
[37.54817963 186.76936340]
[44.05166626 172.10360718]
[59.60849762 168.18385315]
[68.42527771 156.04859924]
[77.24205780 143.91334534]
[64.45074463 133.14440918]
[56.17521667 118.95130920]
[53.21153641 103.08763885]
[55.71312332 87.43955994]
[63.19505310 73.80165100]
[52.58845139 63.19505310]
[41.98184967 52.58845139]
[31.37524605 41.98184967]
[13.90985489 42.31627274]
[1.82554471 30.17305183]
[2.22901559 13.38348484]
[-8.58378792 2.98717451]
[-19.39659309 -7.40913582]
[-30.20939636 -17.80544662]
[-41.02220154 -28.20175743]
[-51.83500290 -38.59806824]
[-71.58018494 -42.48624802]
[-76.25604248 -61.21742249]
[-87.46867371 -71.18120575]
[-98.68129730 -81.14499664]
[-109.99119568 -90.99822235]
[-121.39728546 -100.73994446]
[-132.80337524 -110.48166656]
[-144.20947266 -120.22338867]
[-150.71139526 -121.82141113]
[-154.78520203 -125.87712860]
[-155.86238098 -130.57843018]
[-166.87721252 -140.76043701]
[-177.89205933 -150.94244385]
[-188.90689087 -161.12446594]
[-204.29275513 -164.81034851]
[-208.38659668 -179.13130188]
[-219.40142822 -189.31332397]
[-234.30975342 -185.34523010]
[-248.98971558 -190.08886719]
[-258.75701904 -202.03053284]
[-260.49493408 -217.35969543]
[-253.64891052 -231.18486023]
[-240.40348816 -239.09449768]
[-224.98522949 -238.56463623]
[-212.31404114 -229.76438904]
[-206.43325806 -215.50184631]
[-209.21942139 -200.32815552]
[-198.20458984 -190.14614868]
[-183.60658264 -187.18853760]
[-178.72488403 -172.13929749]
[-167.71005249 -161.95729065]
[-156.69520569 -151.77526855]
[-145.68037415 -141.59326172]
[-134.46774292 -131.62947083]
[-123.06165314 -121.88775635]
[-111.65556335 -112.14603424]
[-100.24947357 -102.40431213]
[-93.08367157 -100.44139862]
[-88.71750641 -92.35762024]
[-77.50488281 -82.39383698]
[-66.29225922 -72.43004608]
[-56.12326050 -73.94734955]
[-46.61038208 -69.49842834]
[-41.02620316 -60.34535217]
[-41.43869400 -49.41086960]
[-30.62588882 -39.01456070]
[-19.81308556 -28.61824989]
[-9.00028229 -18.22193909]
[1.81252205 -7.82562971]
[12.62532616 2.57068086]
[25.37680054 0.51999915]
[37.14966202 6.28868628]
[43.52992630 17.96425438]
[41.98184967 31.37524605]
[52.58845139 41.98184967]
[63.19505310 52.58845139]
[73.80165100 63.19505310]
[82.76676941 58.23909378]
[92.61791992 55.43025208]
[102.84861755 54.91294098]
[112.93285370 56.71375656]
[122.35215759 60.74011230]
[130.62223816 66.78499603]
[137.31788635 74.53761292]
[150.94003296 68.25771332]
[164.56217957 61.97781754]
[178.18432617 55.69792175]
[191.80647278 49.41802597]
[205.42861938 43.13813019]
[212.30804443 28.64492226]
[227.96076965 25.12754631]
[240.37934875 35.28423309]
[240.03732300 51.32363892]
[227.19706726 60.94170761]
[211.70851135 56.76027679]
[198.08636475 63.04017258]
[184.46421814 69.32006836]
[170.84207153 75.59996796]
[157.21992493 81.87985992]
[143.59777832 88.15975952]
[145.72116089 97.51142883]
[145.83415222 107.22897339]
[143.87791443 116.87939453]
[139.88702393 126.02147675]
[133.99021912 134.22592163]
[126.40677643 141.09542847]
[117.43873596 146.28385925]
[124.76805115 159.37130737]
[132.09736633 172.45874023]
[139.42669678 185.54618835]
[146.75601196 198.63362122]
[154.08532715 211.72106934]
[168.20117188 209.63401794]
[182.15060425 212.49302673]
[194.25634766 219.93345642]
[203.07002258 231.04107666]
[207.54530334 244.46435547]
[207.16220093 258.57888794]
[201.98731995 271.68399048]
[192.66343689 282.20761108]
[199.73439026 295.43640137]
[206.80534363 308.66522217]
[222.04624939 310.90600586]
[232.91822815 321.56686401]
[235.39869690 336.40972900]
[228.74310303 349.70788574]
[235.81405640 362.93670654]
[242.88500977 376.16552734]
[257.08935547 384.36120605]
[256.82327271 400.75817871]
[242.36053467 408.48867798]
[228.57911682 399.60021973]
[229.65618896 383.23648071]
[222.58523560 370.00765991]
[215.51428223 356.77883911]
[200.75961304 354.92471313]
[189.79627991 344.61599731]
[186.97227478 329.65344238]
[193.57652283 315.73617554]
[186.50556946 302.50735474]
[179.43461609 289.27853394]
[163.71406555 291.07730103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[11 21]
[12 20]
[13 19]
[26 94]
[27 93]
[28 92]
[29 91]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[39 78]
[40 77]
[41 76]
[42 74]
[43 73]
[44 72]
[45 71]
[48 70]
[49 69]
[50 68]
[51 67]
[53 65]
[54 64]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
[137 158]
[138 157]
[139 156]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
