%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUUCUACUUCAUAUGAUCAUUUUAAUUGUAUUUACCUCAUCUUACCAAAAAGAUCAUGGUUGAAUCUUGCCUACUCACGUUUAGGGCCUUUUUUUGGUGGAUUGCUUUAAUAAAGAUGGAUCUGUCAGACCUUGGAGAAGCCGCAGCCUUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[23.43432045 278.95727539]
[13.33702660 290.04983521]
[0.75098252 298.21020508]
[-13.49639893 302.90188599]
[-28.46848869 303.81652832]
[-43.18101501 300.89392090]
[-56.66677094 294.32623291]
[-68.03919220 284.54522705]
[-76.55065918 272.19393921]
[-81.64161682 258.08428955]
[-82.97738647 243.14387512]
[-80.47014618 228.35488892]
[-74.28473663 214.68959045]
[-64.82778931 203.04631042]
[-52.72273254 194.19143677]
[-67.64866638 195.68025208]
[-82.57459259 197.16905212]
[-97.50052643 198.65786743]
[-112.42646027 200.14666748]
[-127.35239410 201.63548279]
[-135.63391113 205.62025452]
[-142.58944702 203.00247192]
[-157.54202271 204.19422913]
[-172.49461365 205.38597107]
[-187.44718933 206.57772827]
[-193.28799438 217.00708008]
[-203.34898376 223.23629761]
[-215.04829407 223.80384827]
[-225.44926453 218.68388367]
[-231.99752808 209.26359558]
[-246.98567200 209.85995483]
[-261.97381592 210.45629883]
[-267.99697876 224.48071289]
[-279.51425171 234.49644470]
[-294.23889160 238.51486206]
[-309.24731445 235.73809814]
[-321.55953979 226.71749878]
[-328.73101807 213.24409485]
[-329.33782959 197.99304199]
[-323.25949097 183.99246216]
[-311.70285034 174.02215576]
[-296.96249390 170.06175232]
[-281.96514893 172.89759827]
[-269.68850708 181.96661377]
[-262.57015991 195.46815491]
[-247.58201599 194.87181091]
[-232.59387207 194.27546692]
[-221.06005859 180.11079407]
[-202.52207947 178.79714966]
[-188.63894653 191.62515259]
[-173.68635559 190.43339539]
[-158.73377991 189.24163818]
[-143.78118896 188.04989624]
[-128.84120178 186.70954895]
[-113.91526794 185.22073364]
[-98.98933411 183.73193359]
[-84.06340027 182.24311829]
[-69.13747406 180.75431824]
[-54.21154022 179.26550293]
[-39.96423721 174.57356262]
[-27.07441139 166.90202332]
[-14.18458652 159.23049927]
[-1.29476106 151.55895996]
[11.59506416 143.88743591]
[12.76905537 129.06314087]
[22.56293678 117.63755798]
[37.37988281 114.12878418]
[51.58599472 120.08635712]
[64.47582245 112.41482544]
[77.36564636 104.74329376]
[80.01070404 88.37068176]
[92.93642426 77.97912598]
[93.23465729 62.98209381]
[93.53289032 47.98505783]
[93.83112335 32.98802185]
[81.38053131 23.72723007]
[76.78328705 8.90680504]
[81.80713654 -5.77449608]
[94.52029419 -14.67141247]
[110.03430939 -14.36289883]
[122.38370514 -4.96758556]
[126.81990051 9.90183926]
[121.63709259 24.52777672]
[108.82816315 33.28625488]
[108.52993011 48.28329086]
[108.23169708 63.28032684]
[107.93346405 78.27735901]
[114.64876556 82.10512543]
[119.72756958 87.93202972]
[134.37020874 84.67735291]
[139.05938721 70.11854553]
[150.33180237 59.92886734]
[165.09295654 56.77060318]
[179.35760498 61.39402390]
[189.32562256 72.46218109]
[203.96827698 69.20749664]
[218.61091614 65.95281219]
[233.25357056 62.69813156]
[247.89620972 59.44345093]
[262.53884888 56.18877029]
[277.18148804 52.93408585]
[291.82412720 49.67940521]
[306.46679688 46.42472076]
[321.10943604 43.17004013]
[335.75207520 39.91535950]
[344.25607300 26.86470032]
[359.15216064 23.77258110]
[371.54156494 31.96027756]
[386.18420410 28.70559502]
[400.82687378 25.45091248]
[410.61776733 12.74195004]
[426.66033936 12.61695766]
[436.64807129 25.17181969]
[432.91925049 40.77552032]
[418.33428955 47.45823288]
[404.08154297 40.09355927]
[389.43890381 43.34823990]
[374.79626465 46.60292053]
[367.04190063 59.26805496]
[352.23852539 62.77735519]
[339.00674438 54.55800247]
[324.36410522 57.81268311]
[309.72146606 61.06736755]
[295.07882690 64.32205200]
[280.43618774 67.57672882]
[265.79354858 70.83141327]
[251.15089417 74.08609772]
[236.50823975 77.34077454]
[221.86560059 80.59545898]
[207.22296143 83.85014343]
[192.58030701 87.10482025]
[188.23954773 101.35345459]
[177.27664185 111.58430481]
[162.56748962 114.97653198]
[148.03993225 110.52152252]
[137.62489319 99.31999207]
[122.98225403 102.57467651]
[115.56400299 117.10481262]
[100.40016174 123.12255859]
[85.03717804 117.63311768]
[72.14735413 125.30464935]
[59.25752640 132.97618103]
[57.71965027 148.30397034]
[47.56980896 159.65447998]
[32.85662460 162.81457520]
[19.26659584 156.77725220]
[6.37677097 164.44879150]
[-6.51305389 172.12031555]
[-19.40287971 179.79185486]
[-32.29270554 187.46337891]
[-17.29286957 187.39291382]
[-2.76816225 191.13894653]
[10.32655811 198.45526123]
[21.13043976 208.86083984]
[28.93322754 221.67163086]
[33.22196579 236.04545593]
[33.71471024 251.03735352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[22 53]
[23 52]
[24 51]
[25 50]
[30 47]
[31 46]
[32 45]
[60 150]
[61 149]
[62 148]
[63 147]
[64 146]
[68 142]
[69 141]
[70 140]
[72 87]
[73 86]
[74 85]
[75 84]
[89 137]
[90 136]
[95 131]
[96 130]
[97 129]
[98 128]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
