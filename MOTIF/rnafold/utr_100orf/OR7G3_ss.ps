%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAGCAGGAAACUUCUCAGACACUCCAGAAUUCUUUCUCUUGGGAUUGUCAGGGGAUCCGGAGCUGCAGCCCAUCCUCUUCAUGCUGUUCCUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[90.55196381 265.06994629]
[75.25989532 263.63882446]
[62.74142838 254.74031067]
[56.36397171 240.76806641]
[57.84302902 225.48054504]
[66.78073883 212.99003601]
[80.77290344 206.65640259]
[82.17059326 191.72166443]
[83.56828308 176.78692627]
[84.96597290 161.85218811]
[86.36366272 146.91744995]
[87.76135254 131.98271179]
[89.15904236 117.04796600]
[81.44667053 129.91340637]
[67.83321381 136.21211243]
[53.03465271 133.76210022]
[42.17750931 123.41210938]
[39.02292633 108.74757385]
[44.66371536 94.84859467]
[57.14578629 86.53006744]
[72.14510345 86.67370605]
[84.46590424 95.23015594]
[73.61477661 84.87385559]
[62.76364136 74.51755524]
[51.91250992 64.16125488]
[36.58736038 60.23057175]
[32.72232819 45.84617615]
[21.87119484 35.48987579]
[11.02006435 25.13357735]
[-0.45392323 15.47192001]
[-12.50637722 6.54228735]
[-24.55883217 -2.38734555]
[-36.61128616 -11.31697845]
[-52.95660019 -12.64468288]
[-59.73395920 -27.57784843]
[-49.97140121 -40.75451279]
[-33.71180725 -38.61965561]
[-27.68165398 -23.36943245]
[-15.62919903 -14.43980026]
[-3.57674456 -5.51016712]
[8.47570992 3.41946602]
[11.42190647 3.01418066]
[14.71672249 3.85866833]
[17.84208488 6.09630203]
[20.23692513 9.66376686]
[21.37636566 14.28244591]
[32.22749710 24.63874626]
[43.07862854 34.99504471]
[57.62763214 38.18497849]
[62.26881027 53.31012344]
[73.11994171 63.66642380]
[83.97107697 74.02272797]
[94.82220459 84.37902832]
[109.67550659 86.47175598]
[122.96567535 79.51679993]
[136.25584412 72.56185150]
[149.54602051 65.60689545]
[162.83618164 58.65194321]
[176.12635803 51.69699097]
[189.41651917 44.74203873]
[193.44113159 39.13653564]
[198.90290833 36.88292694]
[203.75627136 37.79709244]
[217.45310974 31.68183899]
[224.15715027 25.21279526]
[231.67233276 25.59677696]
[245.55274963 19.91044998]
[255.15296936 6.61505079]
[271.43753052 8.55034351]
[277.65426636 23.72546577]
[267.40792847 36.52955246]
[251.23907471 33.79085922]
[237.35865784 39.47718430]
[223.56837463 45.37868881]
[209.87152100 51.49394226]
[196.37147522 58.03220749]
[183.08131409 64.98715973]
[169.79113770 71.94211578]
[156.50096130 78.89706421]
[143.21080017 85.85202026]
[129.92062378 92.80697632]
[116.63045502 99.76192474]
[131.25276184 96.41708374]
[145.22796631 101.86627197]
[153.72662354 114.22640991]
[153.81181335 129.22616577]
[145.45411682 141.68203735]
[131.54171753 147.28962708]
[116.88235474 144.11109924]
[106.54190063 133.24487305]
[104.09378052 118.44565582]
[102.69609070 133.38040161]
[101.29840088 148.31513977]
[99.90071106 163.24987793]
[98.50302124 178.18461609]
[97.10533905 193.11935425]
[95.70764923 208.05409241]
[108.28165436 216.87396240]
[114.74657440 230.80595398]
[113.36338806 246.10243225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[22 53]
[23 52]
[24 51]
[25 50]
[27 48]
[28 47]
[29 46]
[30 41]
[31 40]
[32 39]
[33 38]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[63 75]
[64 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
