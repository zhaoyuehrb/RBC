%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGAGGGAGGGAGCGAGGGAAGGGAAAGGCGAGCGUGAGCUGCCUCAAAUGCUUGGAAUAAUUCCGCUUCCGUUUGGAAAGCCGCAGCCUCAGUCCCGCCGCCGCCCGCUGCGUCCGCCCAGCGCCAGCUCCGCGUCCCGACCGGCCC\
) } def
/len { sequence length } bind def

/coor [
[76.30984497 363.66659546]
[84.68004608 349.56439209]
[84.36591339 334.56768799]
[75.83421326 325.93402100]
[75.48810577 313.39910889]
[84.06189728 303.70532227]
[84.06189728 288.70532227]
[73.38101959 278.38763428]
[73.16734314 263.17550659]
[84.06189728 252.04238892]
[84.06189728 237.04238892]
[84.06189728 222.04238892]
[84.06189728 207.04238892]
[80.89579773 200.30900574]
[84.22225952 191.72908020]
[84.53639984 176.73236084]
[77.06733704 163.84585571]
[85.09194946 150.21073914]
[85.40608215 135.21403503]
[85.72022247 120.21732330]
[81.58444977 107.70542908]
[85.02838135 97.53351593]
[92.21253967 93.13066101]
[86.39981079 79.30271149]
[80.58707428 65.47476959]
[70.21912384 61.92049789]
[63.68298340 53.39858246]
[62.96828461 42.90345764]
[68.07068634 33.95720291]
[62.84210587 19.89797211]
[57.61352539 5.83874321]
[52.38494492 -8.22048664]
[46.42185974 -15.22920132]
[47.19746017 -22.62928009]
[42.26445770 -36.79492569]
[37.33145905 -50.96057129]
[31.80959129 -64.90721893]
[25.70854187 -78.61039734]
[19.60749245 -92.31358337]
[13.50644207 -106.01676178]
[7.26223040 -119.65530396]
[0.87554103 -133.22770691]
[-5.51114845 -146.80010986]
[-11.89783764 -160.37252808]
[-12.97726059 -145.41140747]
[-20.64850235 -132.52140808]
[-33.28384399 -124.43759155]
[-48.20225525 -122.87521362]
[-62.23827362 -128.16578674]
[-72.41366577 -139.18673706]
[-76.56938171 -153.59957886]
[-73.82362366 -168.34613037]
[-64.75900269 -180.29739380]
[-51.29890442 -186.91749573]
[-36.29935074 -186.80174255]
[-22.94317245 -179.97483826]
[-31.24404526 -192.46865845]
[-39.54491806 -204.96246338]
[-47.84579086 -217.45628357]
[-61.64715958 -227.30303955]
[-56.00581741 -243.29090881]
[-39.08108902 -242.29589844]
[-35.35197449 -225.75715637]
[-27.05109978 -213.26333618]
[-18.75022697 -200.76953125]
[-10.44935322 -188.27571106]
[3.91043878 -192.61119080]
[3.91043878 -207.61119080]
[3.91043878 -222.61119080]
[3.91043878 -237.61119080]
[3.75336218 -252.61036682]
[3.43922591 -267.60708618]
[-5.51417494 -281.34637451]
[2.14798880 -295.84545898]
[18.54353905 -296.18890381]
[26.80614090 -282.02340698]
[18.43593597 -267.92120361]
[18.75007248 -252.92449951]
[22.05648804 -246.25889587]
[18.91043854 -237.61119080]
[18.91043854 -222.61119080]
[18.91043854 -207.61119080]
[18.91043854 -192.61119080]
[13.79949474 -174.69767761]
[1.67456806 -166.75921631]
[8.06125736 -153.18681335]
[14.44794655 -139.61439514]
[20.83463669 -126.04199219]
[26.56634521 -121.29750061]
[27.20962334 -112.11781311]
[33.31067276 -98.41463470]
[39.41172409 -84.71144867]
[45.51277161 -71.00827026]
[48.15148163 -69.88894653]
[50.48991394 -67.62215424]
[52.07548523 -64.32279205]
[52.50794220 -60.27207184]
[51.49710464 -55.89356995]
[56.43010330 -41.72792435]
[61.36310577 -27.56227875]
[66.44417572 -13.44906712]
[71.67275238 0.61016238]
[76.90133667 14.66939259]
[82.12991333 28.72862244]
[97.89955139 39.85128403]
[94.41502380 59.66203308]
[100.22775269 73.48998260]
[106.04048920 87.31792450]
[117.18766022 97.35488892]
[131.54745483 101.69036102]
[145.90724182 106.02584076]
[160.26704407 110.36131287]
[174.67144775 114.54618073]
[189.11888123 118.57997894]
[203.56631470 122.61377716]
[216.36601257 113.63036346]
[231.94105530 115.02764893]
[242.93736267 126.14588165]
[244.16282654 141.73538208]
[235.03883362 154.43524170]
[219.87342834 158.24899292]
[205.82727051 151.37590027]
[199.53251648 137.06121826]
[185.08508301 133.02742004]
[170.63764954 128.99362183]
[163.30087280 130.23234558]
[155.93156433 124.72110748]
[141.57176208 120.38563538]
[127.21197510 116.05015564]
[112.85218048 111.71467590]
[100.71692657 120.53145599]
[100.40279388 135.52816772]
[100.08865356 150.52487183]
[107.53524780 164.48405457]
[99.53310394 177.04650879]
[99.21897125 192.04321289]
[99.06189728 207.04238892]
[99.06189728 222.04238892]
[99.06189728 237.04238892]
[99.06189728 252.04238892]
[109.95645142 263.17550659]
[109.74276733 278.38763428]
[99.06189728 288.70532227]
[99.06189728 303.70532227]
[108.64480591 319.39361572]
[99.36262512 334.25357056]
[99.67675781 349.25027466]
[108.63015747 362.98956299]
[100.96799469 377.48864746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 147]
[3 146]
[6 144]
[7 143]
[10 140]
[11 139]
[12 138]
[13 137]
[15 136]
[16 135]
[18 133]
[19 132]
[20 131]
[23 108]
[24 107]
[25 106]
[29 104]
[30 103]
[31 102]
[32 101]
[34 100]
[35 99]
[36 98]
[37 93]
[38 92]
[39 91]
[40 90]
[41 88]
[42 87]
[43 86]
[44 85]
[56 66]
[57 65]
[58 64]
[59 63]
[67 83]
[68 82]
[69 81]
[70 80]
[71 78]
[72 77]
[109 130]
[110 129]
[111 128]
[112 127]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
