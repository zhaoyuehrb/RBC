%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGUCGCGGCAAACAAGGCGGUAAAGCUCGCGCCAAGGCUAAGACUCGGUCUUCUCGUGCAGGUUUGCAGUUUCCUGUGGGCCGAGUGCACCGCC\
) } def
/len { sequence length } bind def

/coor [
[-8.99987984 276.49346924]
[-28.13100052 279.22717285]
[-36.09736633 291.93688965]
[-38.05986023 301.04409790]
[-44.51433182 304.91259766]
[-52.87211609 317.36840820]
[-61.22990036 329.82424927]
[-61.79380798 346.21368408]
[-76.39462280 353.68017578]
[-90.01227570 344.54278564]
[-88.63809204 328.20132446]
[-73.68571472 321.46646118]
[-65.32793427 309.01065063]
[-56.97014999 296.55480957]
[-48.80708694 283.97052002]
[-40.84072113 271.26080322]
[-45.86973953 261.96536255]
[-46.49653625 251.33341980]
[-42.53423309 241.35949707]
[-34.66336441 233.94401550]
[-24.31601524 230.53123474]
[-13.41554928 231.82835388]
[-4.29955912 219.91622925]
[4.81643152 208.00410461]
[13.93242168 196.09197998]
[23.04841232 184.17985535]
[32.16440201 172.26773071]
[28.69175911 159.75283813]
[33.18027115 147.35702515]
[44.18225861 139.74406433]
[57.75594711 139.91719055]
[67.23799133 128.29432678]
[76.72003937 116.67147064]
[86.20208740 105.04861450]
[91.01447296 90.84153748]
[90.54797363 75.84879303]
[90.08147430 60.85605240]
[89.61497498 45.86330795]
[78.15682983 29.42264557]
[87.59931183 12.66996479]
[86.20162201 -2.26477551]
[84.80393219 -17.19951630]
[83.40624237 -32.13425446]
[82.00856018 -47.06899643]
[80.61087036 -62.00373459]
[67.64527893 -70.74601746]
[63.38220215 -85.79129028]
[69.83454132 -100.03563690]
[83.95568848 -106.75331116]
[99.07807922 -102.77243042]
[108.06137085 -89.97265625]
[106.66394043 -74.39763641]
[95.54560852 -63.40142441]
[96.94329834 -48.46668625]
[98.34098816 -33.53194427]
[99.73867798 -18.59720421]
[101.13636780 -3.66246462]
[102.53404999 11.27227592]
[111.11659241 17.20660019]
[115.00697327 27.12724495]
[112.65042877 37.74692154]
[104.60771942 45.39680862]
[105.07421875 60.38955307]
[105.54071808 75.38230133]
[106.00721741 90.37504578]
[109.77291870 91.43031311]
[113.33512878 93.93313599]
[128.24632263 95.56291962]
[143.15753174 97.19270325]
[158.06872559 98.82248688]
[172.97991943 100.45226288]
[187.89111328 102.08204651]
[202.80232239 103.71183014]
[217.71351624 105.34161377]
[232.62471008 106.97139740]
[247.40740967 99.87183380]
[260.79266357 109.34638977]
[259.01086426 125.64845276]
[243.89497375 132.00785828]
[230.99493408 121.88259125]
[216.08372498 120.25280762]
[201.17253113 118.62302399]
[186.26133728 116.99324799]
[171.35014343 115.36346436]
[156.43893433 113.73368073]
[141.52774048 112.10389709]
[126.61654663 110.47411346]
[111.70534515 108.84433746]
[97.82494354 114.53066254]
[88.34289551 126.15351868]
[78.86084747 137.77636719]
[69.37879944 149.39923096]
[71.50153351 166.67745972]
[60.75158310 179.94082642]
[44.07652664 181.38372803]
[34.96053696 193.29585266]
[25.84454727 205.20797729]
[16.72855568 217.12010193]
[7.61256552 229.03222656]
[-1.50342500 240.94435120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[5 14]
[6 13]
[7 12]
[22 100]
[23 99]
[24 98]
[25 97]
[26 96]
[27 95]
[31 92]
[32 91]
[33 90]
[34 89]
[35 65]
[36 64]
[37 63]
[38 62]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
