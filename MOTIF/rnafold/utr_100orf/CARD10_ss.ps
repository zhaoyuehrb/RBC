%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUGCCGGGCCGGGCGGAGGCGGGGGAGGCCGAGGAGGAGGCCGGGGCCGGCUCGGGGUCUGAGGCGGAGGAGGACGCGCUGUGGGAGCGAAUCGAGGGCG\
) } def
/len { sequence length } bind def

/coor [
[94.51296234 166.73069763]
[94.05992126 151.73753357]
[93.60687256 136.74438477]
[73.44152069 126.18527985]
[63.16883087 105.87252808]
[66.61523438 83.37234497]
[54.80747986 74.12155914]
[42.99972916 64.87078094]
[30.91796112 55.98084641]
[18.57320404 47.45987320]
[6.22844505 38.93890381]
[-6.11631298 30.41793060]
[-18.46107101 21.89695930]
[-28.41464424 26.48554230]
[-39.29316330 26.43583488]
[-49.05664062 21.82621765]
[-55.90336227 13.58369732]
[-58.60229492 3.29834247]
[-56.71403122 -7.08320904]
[-68.23699188 -16.68640137]
[-79.75995636 -26.28959465]
[-95.31473541 -29.18086624]
[-100.13827515 -43.27280426]
[-111.66123962 -52.87599564]
[-123.18420410 -62.47919083]
[-137.57460022 -57.29615402]
[-152.52844238 -59.99415970]
[-164.04748535 -69.75008392]
[-169.10284424 -83.86741638]
[-166.43112183 -98.52100372]
[-177.95408630 -108.12419128]
[-189.47705078 -117.72738647]
[-201.00001526 -127.33058167]
[-216.00990295 -123.39573669]
[-230.45372009 -129.06631470]
[-238.77754211 -142.16188049]
[-237.78068542 -157.64689636]
[-227.84645081 -169.56707764]
[-212.79476929 -173.33886719]
[-198.41329956 -167.51191711]
[-190.23204041 -154.32684326]
[-191.39682007 -138.85354614]
[-179.87385559 -129.25035095]
[-168.35089111 -119.64715576]
[-156.82792664 -110.04396820]
[-142.89596558 -115.31331635]
[-128.09861755 -112.88547516]
[-116.42613220 -103.31366730]
[-111.07681274 -89.09109497]
[-113.58100891 -74.00215149]
[-102.05804443 -64.39896393]
[-90.53507996 -54.79576874]
[-75.80450439 -52.59138107]
[-70.15676117 -37.81255722]
[-58.63380051 -28.20936584]
[-47.11083603 -18.60617256]
[-28.06714249 -21.94661140]
[-12.30846310 -10.23743153]
[-9.94009972 9.55220222]
[2.40465832 18.07317352]
[14.74941635 26.59414482]
[27.09417343 35.11511612]
[39.43893051 43.63608551]
[44.36851120 43.62911224]
[49.31653214 46.83502579]
[52.25051117 53.06302643]
[64.05826569 62.31380844]
[75.86601257 71.56459045]
[86.01612091 65.42439270]
[97.58094788 62.78213120]
[109.39050293 63.90512466]
[120.25004578 68.67976379]
[129.06092834 76.62300110]
[134.93177795 86.93124390]
[137.26866150 98.56162262]
[135.83514404 110.33752441]
[149.11697388 117.30836487]
[164.03782654 112.83554077]
[177.40820312 120.09417725]
[181.58039856 134.34648132]
[194.86224365 141.31733704]
[208.14408875 148.28817749]
[221.42591858 155.25903320]
[237.10868835 151.87814331]
[249.43832397 162.14262390]
[248.95658875 178.17845154]
[236.03302002 187.68429565]
[220.58148193 183.36808777]
[214.45507812 168.54086304]
[201.17323303 161.57002258]
[187.89138794 154.59916687]
[174.60955811 147.62832642]
[160.51005554 152.29090881]
[146.94107056 145.41067505]
[142.14613342 130.59020996]
[128.86428833 123.61936188]
[124.64650726 127.99234009]
[119.77469635 131.62251282]
[114.37813568 134.41352844]
[108.60002899 136.29133606]
[109.05307770 151.28450012]
[109.50611877 166.27764893]
[112.27760315 185.46015930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[6 68]
[7 67]
[8 66]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[19 56]
[20 55]
[21 54]
[23 52]
[24 51]
[25 50]
[30 45]
[31 44]
[32 43]
[33 42]
[76 96]
[77 95]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
