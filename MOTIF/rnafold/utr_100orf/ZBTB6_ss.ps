%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUCUUCCAGGCUAAGUCCAUCUUCCGGCUUGGGCAGACGCUGCCGCGGAAUCCUUGACUCUAGUUUUCUGAGUCGAUUGUGAUCAUGGCUGCUGAGUCUGAUGUUCUGCAUUUCCAGUUUGAACAGCAAGGAGAUGUGGUCUUGCAGAAAAUGAAUCUUUUGAGACAGCAGAAUUUAUUUUGUG\
) } def
/len { sequence length } bind def

/coor [
[408.74832153 696.69763184]
[401.10406494 683.79162598]
[393.45980835 670.88555908]
[385.81555176 657.97955322]
[378.17132568 645.07354736]
[370.52706909 632.16754150]
[362.88281250 619.26147461]
[348.06103516 618.05615234]
[336.65618896 608.23809814]
[333.17877197 593.41375732]
[339.16638184 579.22027588]
[331.52212524 566.31427002]
[323.87786865 553.40826416]
[316.23364258 540.50225830]
[308.58938599 527.59619141]
[300.94512939 514.69018555]
[298.24475098 513.87023926]
[295.70993042 511.92053223]
[293.77667236 508.89999390]
[292.85098267 505.02551270]
[293.25463867 500.65682983]
[286.48950195 487.26904297]
[279.72433472 473.88128662]
[272.95919800 460.49349976]
[266.19403076 447.10571289]
[259.42889404 433.71792603]
[252.66374207 420.33013916]
[238.47747803 415.93859863]
[231.42593384 402.45785522]
[236.12838745 387.60778809]
[229.36323547 374.22000122]
[223.52877808 369.65896606]
[222.59899902 360.55151367]
[216.05850220 347.05255127]
[201.94760132 342.42456055]
[195.12229919 328.82788086]
[200.07223511 314.05844116]
[193.53173828 300.55947876]
[186.99122620 287.06054688]
[180.45072937 273.56158447]
[173.91023254 260.06262207]
[158.11576843 261.23364258]
[143.04333496 256.24566650]
[131.00723267 245.83345032]
[123.86742401 231.56695557]
[122.74221802 215.61473083]
[127.83313751 200.41421509]
[138.38966370 188.29937744]
[131.62451172 174.91159058]
[124.85935974 161.52381897]
[118.09420776 148.13603210]
[111.32905579 134.74824524]
[104.56390381 121.36046600]
[97.79875183 107.97268677]
[87.85662842 116.61320496]
[72.45297241 117.96118927]
[55.85755539 109.68520355]
[44.40277100 100.00078583]
[32.94799042 90.31636810]
[21.49320602 80.63195038]
[10.03842258 70.94753265]
[-1.41636038 61.26311493]
[-12.87114334 51.57869720]
[-21.46336555 48.41893387]
[-24.43466568 41.63548660]
[-35.72602463 31.76101303]
[-51.91056824 29.11666298]
[-57.45890045 13.68461609]
[-46.66336823 1.34003937]
[-30.62949562 4.78197432]
[-25.85155296 20.46965408]
[-14.56019306 30.34412766]
[-3.18672562 40.12391281]
[8.26805782 49.80833054]
[19.72284126 59.49274826]
[31.17762375 69.17716980]
[42.63240814 78.86158752]
[54.08718872 88.54600525]
[65.54196930 98.23042297]
[72.39695740 95.18753052]
[62.37256241 84.02906036]
[69.88735199 71.04722595]
[84.55596924 74.18279266]
[86.10692596 89.10175323]
[92.96191406 86.05886078]
[93.46313477 71.06723785]
[93.96436310 56.07561493]
[94.46558380 41.08398819]
[91.62033844 32.38255692]
[95.10252380 25.84663963]
[95.85417938 10.86548519]
[96.60584259 -4.11566973]
[97.35750580 -19.09682465]
[89.40242004 -33.43727875]
[98.07490540 -47.35561371]
[114.45344543 -46.53384018]
[121.68920898 -31.81732750]
[112.33866119 -18.34516335]
[111.58699799 -3.36400747]
[110.83533478 11.61714745]
[110.08367157 26.59830284]
[109.45720673 41.58521652]
[108.95598602 56.57683945]
[108.45475769 71.56845856]
[107.95353699 86.56008148]
[111.18653107 101.20753479]
[117.95168304 114.59531403]
[124.71683502 127.98310089]
[131.48199463 141.37088013]
[138.24714661 154.75866699]
[145.01229858 168.14643860]
[151.77745056 181.53422546]
[165.95278931 180.04985046]
[179.75363159 183.48922729]
[191.52497864 191.41883850]
[199.86239624 202.86799622]
[203.77957153 216.44761658]
[202.82496643 230.51869202]
[197.13377380 243.39016724]
[187.40919495 253.52210999]
[193.94969177 267.02108765]
[200.49018860 280.52001953]
[207.03068542 294.01898193]
[213.57119751 307.51794434]
[228.22994995 312.78659058]
[234.67063904 326.56964111]
[229.55744934 340.51205444]
[236.09796143 354.01101685]
[242.75100708 367.45483398]
[249.51615906 380.84262085]
[264.26089478 385.86560059]
[270.93103027 399.53909302]
[266.05151367 413.56500244]
[272.81668091 426.95275879]
[279.58181763 440.34054565]
[286.34698486 453.72833252]
[293.11212158 467.11611938]
[299.87728882 480.50390625]
[306.64242554 493.89169312]
[313.85116577 507.04592896]
[321.49542236 519.95196533]
[329.13964844 532.85797119]
[336.78390503 545.76397705]
[344.42816162 558.67004395]
[352.07241821 571.57604980]
[367.39691162 573.14636230]
[378.72592163 583.32019043]
[381.85488892 598.04003906]
[375.78884888 611.61724854]
[383.43307495 624.52325439]
[391.07733154 637.42926025]
[398.72158813 650.33532715]
[406.36584473 663.24133301]
[414.01007080 676.14733887]
[421.65432739 689.05340576]
[422.01849365 674.05780029]
[427.62557983 660.14520264]
[437.76135254 649.08776855]
[451.13467407 642.29412842]
[466.04202271 640.62957764]
[480.58447266 644.30621338]
[492.90954590 652.85559082]
[501.44723511 665.18884277]
[505.10995483 679.73474121]
[503.43121338 694.64050293]
[496.62478638 708.00738525]
[485.55773926 718.13262939]
[471.63980103 723.72644043]
[456.64385986 724.07629395]
[442.48019409 719.13763428]
[430.95449829 709.54132080]
[435.63742065 723.79162598]
[440.32031250 738.04187012]
[445.00323486 752.29217529]
[449.68612671 766.54248047]
[454.36904907 780.79272461]
[466.94665527 791.31585693]
[463.85601807 807.42114258]
[448.27651978 812.54083252]
[436.23501587 801.40826416]
[440.11877441 785.47564697]
[435.43585205 771.22534180]
[430.75296021 756.97509766]
[426.07003784 742.72479248]
[421.38714600 728.47454834]
[416.70422363 714.22424316]
[411.30667114 710.92645264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[11 145]
[12 144]
[13 143]
[14 142]
[15 141]
[16 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[30 130]
[31 129]
[33 128]
[34 127]
[37 124]
[38 123]
[39 122]
[40 121]
[41 120]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 106]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[65 72]
[66 71]
[85 105]
[86 104]
[87 103]
[88 102]
[90 101]
[91 100]
[92 99]
[93 98]
[171 186]
[172 185]
[173 184]
[174 183]
[175 182]
[176 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
