%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUGGGGCAGACGCUCCGUUUCCGGUGGCAGGGUCUGGGGAAGCGGCGGCAGGCGCCAUGUCCGGCCGCGAAGGUGGCAAGAAGAAGCCACUGAAACAGCCCAAGAAGCAGGCCAAGGAGAUGGACGAGGAAGAUAAGGCUUUCAAGCAGAAACAAA\
) } def
/len { sequence length } bind def

/coor [
[76.95516205 252.17463684]
[69.20362091 238.59349060]
[72.04624176 223.21644592]
[84.14082336 213.30406189]
[84.14082336 198.30406189]
[70.57135010 189.10803223]
[65.08438110 173.48571777]
[70.02109528 157.50721741]
[83.63126373 147.50610352]
[83.33675385 132.50900269]
[72.70510101 118.60867310]
[70.60776520 102.93785095]
[76.00438690 89.87922668]
[85.94767761 82.36817169]
[81.03322601 68.19608307]
[75.23564911 61.06874847]
[76.16438293 53.69723129]
[71.52912903 39.43138123]
[66.89387512 25.16553497]
[62.25862122 10.89968681]
[57.62336349 -3.36616087]
[52.98810959 -17.63200760]
[48.35285568 -31.89785576]
[43.71760178 -46.16370392]
[39.08234406 -60.42955017]
[27.93970299 -66.99304199]
[24.39044571 -79.01039886]
[29.82066345 -89.85594940]
[25.46639442 -104.21005249]
[21.11212349 -118.56416321]
[16.75785255 -132.91825867]
[0.63957930 -136.49325562]
[-11.41777229 -147.63389587]
[-16.19860458 -163.24060059]
[-12.49273777 -179.04064941]
[-1.40005028 -190.75790405]
[-6.03530502 -205.02375793]
[-10.67055988 -219.28961182]
[-22.29365730 -230.02339172]
[-18.86799049 -244.51870728]
[-23.50324631 -258.78454590]
[-28.13850021 -273.05038452]
[-46.84455109 -273.82373047]
[-63.82062912 -281.62860107]
[-76.53407288 -295.26913452]
[-83.10016632 -312.68109131]
[-82.56149292 -331.24444580]
[-75.02744293 -348.17742920]
[-85.84024811 -358.57376099]
[-96.65305328 -368.97006226]
[-107.46585846 -379.36636353]
[-118.27865601 -389.76269531]
[-136.23455811 -393.73556519]
[-140.49882507 -410.73577881]
[-151.51367188 -420.91778564]
[-162.52850342 -431.09979248]
[-178.55111694 -431.90924072]
[-187.79078674 -445.02444458]
[-183.15962219 -460.38452148]
[-168.21025085 -466.20654297]
[-154.41056824 -458.02435303]
[-152.34649658 -442.11465454]
[-141.33164978 -431.93261719]
[-130.31681824 -421.75061035]
[-118.18875122 -421.90335083]
[-108.92508698 -413.46542358]
[-107.88234711 -400.57550049]
[-97.06954193 -390.17916870]
[-86.25673676 -379.78286743]
[-75.44393921 -369.38656616]
[-64.63113403 -358.99023438]
[-57.90272522 -363.24810791]
[-50.56109619 -366.33056641]
[-42.80978012 -368.15209961]
[-34.86366653 -368.66229248]
[-32.22672272 -383.42868042]
[-29.58977890 -398.19506836]
[-26.95283508 -412.96148682]
[-24.31589127 -427.72787476]
[-21.67894745 -442.49426270]
[-32.53030396 -453.58605957]
[-34.75633621 -468.94262695]
[-27.50109100 -482.65908813]
[-13.55435467 -489.46115112]
[1.72106683 -486.73330688]
[12.45146179 -475.52447510]
[14.51077366 -460.14465332]
[7.10715675 -446.50769043]
[-6.91254854 -439.85733032]
[-9.54949284 -425.09094238]
[-12.18643665 -410.32452393]
[-14.82338142 -395.55813599]
[-17.46032524 -380.79174805]
[-20.09726906 -366.02532959]
[-7.70558500 -359.65084839]
[2.33976626 -349.96209717]
[9.17858219 -337.77166748]
[12.22034454 -324.10717773]
[11.19519424 -310.12448120]
[6.17782450 -297.00997925]
[-2.41781735 -285.88000488]
[-13.87265301 -277.68563843]
[-9.23739815 -263.41979980]
[-4.60214329 -249.15396118]
[6.68940973 -239.44056702]
[3.59528756 -223.92486572]
[8.23054218 -209.65901184]
[12.86579704 -195.39315796]
[26.40924072 -193.43148804]
[37.83487701 -185.77995300]
[44.87314987 -173.88958740]
[46.09638977 -160.05999756]
[41.20805359 -146.99468994]
[31.11195755 -137.27253723]
[35.46622849 -122.91842651]
[39.82049942 -108.56432343]
[44.17477036 -94.21022034]
[57.60973358 -82.95439911]
[53.34819412 -65.06480408]
[57.98344803 -50.79895782]
[62.61870193 -36.53311157]
[67.25395966 -22.26726341]
[71.88921356 -8.00141525]
[76.52446747 6.26443195]
[81.15972137 20.53027916]
[85.79497528 34.79612732]
[90.43022919 49.06197357]
[95.20531464 63.28163147]
[100.11976624 77.45372009]
[123.22368622 81.74637604]
[135.54194641 108.44207764]
[146.75457764 118.40586090]
[157.96719360 128.36964417]
[169.17982483 138.33343506]
[180.39244080 148.29722595]
[196.15258789 147.11672974]
[208.07675171 157.48927307]
[209.09056091 173.26101685]
[198.59251404 185.07485962]
[182.81094360 185.92184448]
[171.10874939 175.29949951]
[170.42866516 159.50984192]
[159.21603394 149.54606628]
[148.00341797 139.58227539]
[136.79078674 129.61848450]
[125.57816315 119.65470123]
[118.76708984 122.79464722]
[105.14494324 129.07453918]
[98.33386230 132.21449280]
[98.62837219 147.21160889]
[110.51420593 154.24911499]
[117.30496979 166.15298462]
[117.31352997 179.74917603]
[110.64495087 191.47308350]
[99.14082336 198.30406189]
[99.14082336 213.30406189]
[111.23540497 223.21644592]
[114.07802582 238.59349060]
[106.32648468 252.17463684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 156]
[5 155]
[9 150]
[10 149]
[14 129]
[15 128]
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[28 117]
[29 116]
[30 115]
[31 114]
[36 108]
[37 107]
[38 106]
[40 104]
[41 103]
[42 102]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[54 64]
[55 63]
[56 62]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[131 146]
[132 145]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
