%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCUGACUCCCUUCACAGAUUAAUAAUCCUUGAAUAUUUUAAUGGGAACAGAUAACCAGACUUGGGUGAGUGAAUUUAUUCUCCUCGGCCUGUCCAGUGACUGGGACACUCGGGUCUCCCUGUUUGUCCUGUUCUUGGUCA\
) } def
/len { sequence length } bind def

/coor [
[92.51158142 137.07528687]
[84.41945648 134.46591187]
[77.11460876 130.11497498]
[70.96617889 124.24231720]
[66.28483582 117.14468384]
[51.83158112 121.15761566]
[37.37833405 125.17053986]
[22.92508316 129.18345642]
[15.87466145 140.04183960]
[3.69813895 143.05879211]
[-6.90403080 137.13897705]
[-21.44082642 140.83784485]
[-35.97762299 144.53671265]
[-50.51441574 148.23556519]
[-64.62211609 153.33192444]
[-78.16671753 159.77735901]
[-91.71132660 166.22280884]
[-105.25592804 172.66824341]
[-110.62749481 187.28959656]
[-124.45546722 193.63325500]
[-138.36158752 188.42216492]
[-151.90618896 194.86761475]
[-165.45080566 201.31304932]
[-178.99540710 207.75849915]
[-190.69963074 220.02420044]
[-205.72602844 212.17285156]
[-202.34124756 195.56022644]
[-185.44084167 194.21389771]
[-171.89624023 187.76844788]
[-158.35163879 181.32301331]
[-144.80703735 174.87756348]
[-140.07997131 160.79956055]
[-126.43563080 154.07000732]
[-111.70137024 159.12364197]
[-98.15676117 152.67820740]
[-84.61215973 146.23275757]
[-71.06755829 139.78732300]
[-85.52079773 135.77436829]
[-95.62460327 124.68775177]
[-98.28251648 109.92510986]
[-92.67997742 96.01067352]
[-80.53397369 87.20871735]
[-65.56681061 86.21672058]
[-52.36539459 93.33869934]
[-44.97548294 106.39202118]
[-45.66181946 121.37631226]
[-54.21327972 133.69877625]
[-39.67648315 129.99990845]
[-25.13968849 126.30104828]
[-10.60289192 122.60218811]
[1.23647916 109.69142151]
[18.91215706 114.73020935]
[33.36540604 110.71728516]
[47.81865692 106.70436096]
[62.27190781 102.69143677]
[63.45309448 90.25440979]
[68.62130737 78.88056183]
[77.21273041 69.81070709]
[88.29009247 64.03430939]
[100.64493561 62.18152618]
[103.86949158 47.53221893]
[107.09404755 32.88291168]
[102.50426483 17.74208832]
[112.79666138 6.97566319]
[116.02121735 -7.67364550]
[111.43144226 -22.81446838]
[121.72383118 -33.58089447]
[124.94839478 -48.23020172]
[128.17294312 -62.87950897]
[123.58316803 -78.02033234]
[133.87556458 -88.78675842]
[137.10012817 -103.43606567]
[140.32467651 -118.08537292]
[143.54924011 -132.73468018]
[146.77378845 -147.38398743]
[141.30584717 -162.84469604]
[152.16546631 -175.13293457]
[168.18121338 -171.60760498]
[172.87745667 -155.89526367]
[161.42309570 -144.15943909]
[158.19854736 -129.51013184]
[154.97398376 -114.86081696]
[151.74943542 -100.21150970]
[148.52487183 -85.56220245]
[153.34529114 -71.46919250]
[142.82225037 -59.65495300]
[139.59770203 -45.00564575]
[136.37313843 -30.35633659]
[141.19355774 -16.26333046]
[130.67053223 -4.44908857]
[127.44596863 10.20022011]
[132.26638794 24.29322624]
[121.74335480 36.10746765]
[118.51879883 50.75677490]
[115.29424286 65.40608215]
[133.97598267 83.37815094]
[136.69860840 109.15779877]
[150.24320984 115.60324097]
[163.78781128 122.04867554]
[177.33241272 128.49412537]
[193.11830139 127.43742371]
[201.28599548 139.89285278]
[214.83059692 146.33830261]
[228.37519836 152.78373718]
[237.54367065 153.66043091]
[242.14111328 159.51835632]
[255.54290771 166.25572205]
[268.94470215 172.99308777]
[282.34646606 179.73045349]
[295.74826050 186.46780396]
[309.15005493 193.20516968]
[323.99032593 188.47193909]
[337.48568726 195.49549866]
[341.90664673 209.67262268]
[355.30844116 216.40998840]
[368.71020508 223.14735413]
[382.11199951 229.88471985]
[398.44363403 228.39808655]
[407.67449951 241.95252991]
[400.30871582 256.60440063]
[383.92352295 257.28109741]
[375.37463379 243.28649902]
[361.97286987 236.54913330]
[348.57107544 229.81176758]
[335.16928101 223.07440186]
[321.15353394 227.98298645]
[307.46621704 221.34126282]
[302.41268921 206.60696411]
[289.01089478 199.86959839]
[275.60910034 193.13223267]
[262.20733643 186.39486694]
[248.80554199 179.65750122]
[235.40374756 172.92013550]
[221.92976379 166.32835388]
[208.38516235 159.88290405]
[194.84056091 153.43746948]
[180.02348328 154.95518494]
[170.88697815 142.03872681]
[157.34237671 135.59327698]
[143.79776001 129.14784241]
[130.25315857 122.70240021]
[124.41788483 128.88632202]
[117.34876251 133.61061096]
[109.40300751 136.63655090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[8 52]
[11 50]
[12 49]
[13 48]
[14 47]
[15 37]
[16 36]
[17 35]
[18 34]
[21 31]
[22 30]
[23 29]
[24 28]
[60 95]
[61 94]
[62 93]
[64 91]
[65 90]
[67 88]
[68 87]
[69 86]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
[97 141]
[98 140]
[99 139]
[100 138]
[102 136]
[103 135]
[104 134]
[106 133]
[107 132]
[108 131]
[109 130]
[110 129]
[111 128]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
