%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCGCCGAGUAGACGGCCCCGCCGCCCGCUGCCCGCCGGGGCUCUCCAGCUUCGCCAUGCCGCCGUGGGGCGCCGCCCUCGCGCUCAUCUUGGCCGUGCUCGCCCUUCUCGGCCUGCUCGGCCCGCGGCUCCGGGGACCCUGGGGGCGCGCCGUCG\
) } def
/len { sequence length } bind def

/coor [
[-99.87397766 499.41363525]
[-109.26518250 503.60287476]
[-113.36174774 518.03265381]
[-117.45830536 532.46240234]
[-121.55486298 546.89221191]
[-120.06410980 563.78045654]
[-135.87969971 569.88812256]
[-146.12684631 556.38134766]
[-135.98463440 542.79565430]
[-131.88807678 528.36584473]
[-127.79151154 513.93609619]
[-123.69495392 499.50631714]
[-129.82502747 481.20025635]
[-115.27066040 467.30331421]
[-111.74736786 452.72299194]
[-108.22407532 438.14263916]
[-104.70079041 423.56228638]
[-101.17749786 408.98196411]
[-97.65420532 394.40161133]
[-99.21263123 391.18276978]
[-99.25727844 387.03833008]
[-97.36556244 382.70309448]
[-93.46607208 379.07452393]
[-89.08522034 364.72848511]
[-90.14505768 357.37365723]
[-84.47350311 350.14389038]
[-79.81006622 335.88720703]
[-75.14663696 321.63055420]
[-70.48320007 307.37390137]
[-75.03420258 301.41247559]
[-89.91065979 303.33367920]
[-84.13620758 289.48968506]
[-88.68721008 283.52825928]
[-103.66891479 284.26889038]
[-118.65061188 285.00955200]
[-133.63232422 285.75018311]
[-147.11135864 295.09082031]
[-161.82254028 287.84423828]
[-162.63226318 271.46508789]
[-148.70756531 262.80285645]
[-134.37295532 270.76849365]
[-119.39125824 270.02783203]
[-104.40955353 269.28720093]
[-89.42784882 268.54656982]
[-78.81658173 270.85699463]
[-70.22118378 275.61758423]
[-64.13870239 282.10186768]
[-60.85544205 289.49462891]
[-51.51965714 277.75396729]
[-42.18386841 266.01330566]
[-32.84808350 254.27264404]
[-34.78653717 239.54925537]
[-25.48597336 227.50956726]
[-10.02959156 225.57617188]
[-0.69380546 213.83551025]
[1.17140019 199.05815125]
[15.81649876 193.07218933]
[25.15228462 181.33152771]
[22.52156067 164.74505615]
[32.88426208 151.10389709]
[50.23842239 149.11335754]
[59.34042358 137.19053650]
[68.44242859 125.26772308]
[77.54442596 113.34490204]
[86.64643097 101.42208862]
[90.31359100 86.87726593]
[87.95243835 72.06426239]
[85.59128571 57.25126266]
[83.23013306 42.43826294]
[80.72275543 27.64931297]
[78.06940460 12.88585377]
[75.41605377 -1.87760472]
[72.76269531 -16.64106369]
[64.00991821 -31.16088295]
[75.53928375 -43.59108734]
[90.67536163 -35.95331573]
[87.52615356 -19.29441833]
[90.17951202 -4.53095865]
[92.83286285 10.23250008]
[95.48621368 24.99595833]
[99.78755188 31.05529213]
[98.04313660 40.07711029]
[100.40428925 54.89011002]
[102.76543427 69.70310974]
[105.12658691 84.51611328]
[111.65850830 88.20175934]
[116.68813324 74.07013702]
[118.47732544 59.17722321]
[131.85923767 52.40046692]
[144.92318726 59.77157593]
[146.04148865 74.72983551]
[134.21832275 83.96158600]
[124.72235107 95.57305908]
[131.25427246 99.25871277]
[145.15461731 93.62129974]
[159.05496216 87.98388672]
[172.95530701 82.34647369]
[186.85565186 76.70906067]
[196.73623657 64.35249329]
[211.43835449 66.73931122]
[225.33869934 61.10189819]
[231.56117249 46.82189560]
[245.73840332 41.30277252]
[259.31387329 47.32295609]
[273.21420288 41.68554306]
[287.11456299 36.04812622]
[293.03900146 21.39628601]
[307.62106323 15.30208683]
[322.20944214 21.38111115]
[328.14913940 36.02678299]
[321.91619873 50.55008316]
[307.20855713 56.33459473]
[292.75195312 49.94847107]
[278.85162354 55.58588409]
[264.95126343 61.22330093]
[259.40414429 74.99882507]
[245.38754272 80.91397858]
[230.97610474 75.00224304]
[217.07575989 80.63965607]
[208.18942261 92.59299469]
[192.49305725 90.60940552]
[178.59271240 96.24681854]
[164.69236755 101.88423157]
[150.79202271 107.52164459]
[136.89167786 113.15905762]
[112.93824768 121.26836395]
[98.56925201 110.52409363]
[89.46724701 122.44690704]
[80.36524200 134.36972046]
[71.26324463 146.29254150]
[62.16123962 158.21536255]
[65.47893524 171.30221558]
[60.70705032 183.72305298]
[49.80461121 191.00559998]
[36.89294434 190.66732788]
[27.55715752 202.40797424]
[25.02419472 218.02510071]
[11.04685402 223.17129517]
[1.71106768 234.91195679]
[3.30925202 250.40658569]
[-6.32581329 262.18029785]
[-21.10742378 263.60842896]
[-30.44321060 275.34909058]
[-39.77899551 287.08975220]
[-49.11478424 298.83041382]
[-56.22654343 312.03732300]
[-60.88997650 326.29400635]
[-65.55340576 340.55065918]
[-70.21684265 354.80731201]
[-74.73920441 369.10934448]
[-79.12005615 383.45535278]
[-83.07386017 397.92489624]
[-86.59715271 412.50524902]
[-90.12044525 427.08560181]
[-93.64373779 441.66592407]
[-97.16702271 456.24627686]
[-100.69031525 470.82662964]
[-94.46018219 479.82415771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[14 157]
[15 156]
[16 155]
[17 154]
[18 153]
[19 152]
[23 151]
[24 150]
[26 149]
[27 148]
[28 147]
[29 146]
[33 44]
[34 43]
[35 42]
[36 41]
[48 145]
[49 144]
[50 143]
[51 142]
[54 139]
[55 138]
[57 136]
[58 135]
[61 131]
[62 130]
[63 129]
[64 128]
[65 127]
[66 85]
[67 84]
[68 83]
[69 82]
[70 80]
[71 79]
[72 78]
[73 77]
[94 125]
[95 124]
[96 123]
[97 122]
[98 121]
[100 119]
[101 118]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
