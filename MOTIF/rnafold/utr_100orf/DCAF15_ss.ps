%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCCGGUUGCUCCGGAAGUGGAGGGAGGGGGUGAAAAUGGCGCCCAGCUCGAAAUCGGAGCGGAACAGCGGGGCUGGGAGCGGCGGCGGCGGCCCCGGGGGAGCCGGAGGGAAGCGGGCAGCAGGGCGGCGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[89.18328094 236.17292786]
[76.85794067 226.74607849]
[72.45977020 211.86535645]
[77.67996216 197.25271606]
[90.51123810 188.52700806]
[90.84780884 173.53079224]
[91.18437958 158.53456116]
[91.52095032 143.53834534]
[66.27120209 128.80711365]
[55.67126846 101.56375885]
[40.80702209 99.55026245]
[25.94277763 97.53676605]
[11.07853031 95.52326202]
[-3.78571582 93.50976562]
[-18.64996147 91.49626923]
[-33.51420975 89.48276520]
[-48.37845612 87.46926880]
[-63.24270248 85.45577240]
[-71.24521637 96.98300934]
[-83.38467407 103.88909912]
[-97.25020599 104.86841583]
[-110.11647034 99.78593445]
[-119.47934723 89.69245911]
[-123.54322815 76.60794067]
[-138.35855103 74.26142120]
[-153.17387390 71.91490936]
[-163.12956238 81.05987549]
[-176.34518433 82.74994659]
[-187.93721008 76.58769226]
[-193.75273132 65.03589630]
[-208.51167297 62.35754395]
[-223.27061462 59.67919159]
[-238.23057556 64.82803345]
[-249.37176514 54.94253540]
[-264.13070679 52.26417923]
[-276.04333496 62.39447403]
[-291.68084717 62.44573593]
[-303.65963745 52.39375687]
[-306.32373047 36.98477554]
[-298.41519165 23.49444389]
[-283.66821289 18.29248238]
[-269.04586792 23.83509636]
[-261.45236206 37.50523758]
[-246.69340515 40.18358994]
[-232.78912354 34.84317398]
[-220.59226990 44.92024994]
[-205.83332825 47.59860229]
[-191.07438660 50.27695465]
[-177.71652222 40.12049866]
[-160.80725098 42.78038025]
[-150.82736206 57.09958267]
[-136.01203918 59.44609833]
[-121.19670868 61.79261398]
[-111.37166595 49.01161194]
[-96.36437988 42.87210083]
[-80.21295166 45.12782669]
[-67.31475830 55.25972366]
[-61.22920227 70.59152222]
[-46.36495590 72.60502625]
[-31.50070953 74.61852264]
[-16.63646317 76.63201904]
[-1.77221680 78.64552307]
[13.09202957 80.65901947]
[27.95627594 82.67251587]
[42.82052231 84.68601990]
[57.68476868 86.69951630]
[63.56602478 74.70085144]
[72.75381470 64.99818420]
[84.41431427 58.47208023]
[97.48927307 55.71481323]
[110.79209900 56.97660828]
[123.11548615 62.14295578]
[132.98457336 50.84688187]
[142.85365295 39.55081177]
[152.72273254 28.25473976]
[162.59181213 16.95866776]
[172.46089172 5.66259575]
[182.32997131 -5.63347626]
[192.19905090 -16.92954826]
[189.75253296 -30.22467804]
[195.35264587 -42.31384277]
[206.73770142 -48.85057831]
[219.61293030 -47.62879562]
[229.73298645 -58.70058060]
[232.73213196 -74.82315063]
[248.28230286 -80.03124237]
[260.38681030 -68.96721649]
[256.59359741 -53.01279831]
[240.80477905 -48.58052063]
[230.68472290 -37.50873566]
[232.17762756 -20.79475021]
[220.92915344 -7.89240360]
[203.49513245 -7.06046724]
[193.62605286 4.23560476]
[183.75697327 15.53167629]
[173.88787842 26.82774925]
[164.01879883 38.12382126]
[154.14971924 49.41989136]
[144.28063965 60.71596527]
[134.41156006 72.01203918]
[138.25138855 76.12599945]
[141.59263611 80.76661682]
[144.36322021 85.87252045]
[146.49876404 91.37248230]
[147.94390869 97.18646240]
[148.65353394 103.22671509]
[148.59378052 109.39913177]
[162.51550293 114.98354340]
[176.43722534 120.56794739]
[189.50376892 112.19864655]
[204.99215698 113.14167786]
[216.94680786 123.03440857]
[220.77088928 138.07289124]
[214.99397278 152.47451782]
[201.83741760 160.70158386]
[186.36016846 159.59059143]
[174.51354980 149.56875610]
[170.85281372 134.48966980]
[156.93109131 128.90525818]
[143.00936890 123.32086182]
[133.92251587 135.25523376]
[143.00936890 147.18959045]
[158.70230103 149.06242371]
[168.40878296 161.53477478]
[166.37014771 177.20703125]
[153.79586792 186.78111267]
[138.14604187 184.57688904]
[128.70544434 171.90208435]
[131.07499695 156.27644348]
[121.98815155 144.34207153]
[116.65544891 144.78491211]
[111.47599030 144.61676025]
[106.51717377 143.87490845]
[106.18060303 158.87113953]
[105.84403229 173.86735535]
[105.50746155 188.86358643]
[117.93434143 198.15617371]
[122.49367523 212.98831177]
[117.43231964 227.65672302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 136]
[6 135]
[7 134]
[8 133]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[24 53]
[25 52]
[26 51]
[30 48]
[31 47]
[32 46]
[34 44]
[35 43]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[83 90]
[84 89]
[107 120]
[108 119]
[109 118]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
