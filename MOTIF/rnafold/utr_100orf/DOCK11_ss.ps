%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:18:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGAGUCCACCCGCCCGCCGAGGUCCGCCCGCCCGCCGAGACCCGCCCGCCGCCGCUGCCAUGGCCGAAGUGCGCAAAUUCACCAAACGGCUCAGCAAGCCUGGCACGGCGGCUGAGCUCCGGCAGAGCGUGUCUGAGGCCGUGCGGGGCUCCGUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[-14.76939487 568.62207031]
[-18.42530823 579.74011230]
[-26.92046738 587.61486816]
[-38.05004501 590.36102295]
[-42.84895706 604.57269287]
[-47.64786911 618.78430176]
[-43.89411926 634.74804688]
[-56.02596664 645.78210449]
[-71.56320953 640.53558350]
[-74.52246094 624.40563965]
[-61.85949707 613.98541260]
[-57.06058502 599.77374268]
[-52.26167679 585.56213379]
[-61.36782837 569.72052002]
[-55.95549011 551.93530273]
[-38.99796295 543.57000732]
[-34.74691772 529.18499756]
[-30.63384438 514.75994873]
[-26.65912247 500.29614258]
[-22.68440056 485.83233643]
[-18.70967674 471.36856079]
[-22.79790497 457.04598999]
[-11.68039513 445.78936768]
[-7.70567322 431.32556152]
[-3.73095036 416.86175537]
[-7.81917763 402.53921509]
[3.29833150 391.28259277]
[7.27305412 376.81878662]
[11.24777699 362.35498047]
[15.22249889 347.89117432]
[19.19722176 333.42736816]
[15.10899448 319.10479736]
[26.22650337 307.84817505]
[30.20122719 293.38439941]
[28.74876595 290.12319946]
[28.83211136 285.98788452]
[30.84843254 281.72119141]
[34.84202576 278.21655273]
[39.64093781 264.00494385]
[44.43984985 249.79330444]
[40.05027771 232.82267761]
[53.92142487 220.74464417]
[58.44723511 206.44369507]
[62.97304153 192.14276123]
[67.49884796 177.84181213]
[63.96221924 163.37316895]
[75.50273132 152.55064392]
[80.02853394 138.24969482]
[84.55434418 123.94874573]
[72.09888458 105.79987335]
[76.28974152 84.19068909]
[94.62657166 72.01362610]
[95.77481079 57.05764008]
[96.92304993 42.10165405]
[98.07128906 27.14566612]
[99.21952057 12.18967915]
[100.36775970 -2.76630759]
[101.51599884 -17.72229385]
[99.04456329 -26.56561089]
[102.83217621 -32.95286560]
[104.26667786 -47.88411713]
[105.70118713 -62.81536484]
[107.13569641 -77.74661255]
[108.57020569 -92.67786407]
[106.26860809 -101.56689453]
[110.17787933 -107.88043213]
[111.89812469 -122.78146362]
[113.61837769 -137.68249512]
[101.95014954 -145.44293213]
[94.80672455 -157.42169189]
[93.53753662 -171.24430847]
[98.33412933 -184.19935608]
[108.20381165 -193.77032471]
[121.17447662 -198.12448120]
[123.17984009 -212.98982239]
[117.35694885 -227.70051575]
[126.72631836 -239.27912903]
[128.73167419 -254.14448547]
[115.57405853 -261.75668335]
[106.33502960 -273.82766724]
[102.42347717 -288.51672363]
[104.43588257 -303.58386230]
[112.06537628 -316.73144531]
[124.14850616 -325.95458984]
[138.84268188 -329.84680176]
[153.90716553 -327.81457520]
[167.04470825 -320.16781616]
[176.25195312 -308.07254028]
[180.12484741 -293.37326050]
[178.07279968 -278.31146240]
[170.40875244 -265.18399048]
[158.30139160 -255.99267578]
[143.59703064 -252.13911438]
[141.59165955 -237.27377319]
[147.55798340 -223.62634277]
[138.04518127 -210.98446655]
[136.03982544 -196.11911011]
[149.05310059 -186.57582092]
[155.52752686 -171.69175720]
[153.61488342 -155.47918701]
[143.74185181 -142.36058044]
[128.51940918 -135.96223450]
[126.79915619 -121.06121063]
[125.07891083 -106.16017914]
[123.50145721 -91.24335480]
[122.06694794 -76.31210327]
[120.63243866 -61.38085556]
[119.19792938 -46.44960785]
[117.76342010 -31.51835823]
[116.47199249 -16.57405663]
[115.32375336 -1.61806881]
[114.17551422 13.33791828]
[113.02727509 28.29390526]
[111.87903595 43.24989319]
[110.73079681 58.20587921]
[109.58255768 73.16186523]
[115.81026459 76.29037476]
[121.09236908 80.83694458]
[125.11295319 86.52964783]
[127.63153839 93.02799988]
[142.62878418 93.31532288]
[156.71598816 84.91992188]
[170.89624023 93.15718079]
[170.58212280 109.55332184]
[156.09675598 117.24139404]
[142.34146118 108.31256866]
[127.34421539 108.02524567]
[123.24560547 116.48491669]
[116.61767578 123.15088654]
[108.18159485 127.29784393]
[98.85529327 128.47456360]
[94.32948303 142.77549744]
[89.80367279 157.07644653]
[93.01659393 172.56799316]
[81.79979706 182.36761475]
[77.27398682 196.66856384]
[72.74817657 210.96951294]
[68.22237396 225.27046204]
[73.46900940 237.08663940]
[69.37120056 248.92463684]
[58.65148163 254.59220886]
[53.85256958 268.80383301]
[49.05365753 283.01547241]
[44.66502762 297.35910034]
[40.69030762 311.82290649]
[44.49423599 327.18002319]
[33.66102600 337.40209961]
[29.68630219 351.86590576]
[25.71157837 366.32971191]
[21.73685646 380.79348755]
[17.76213455 395.25729370]
[21.56606293 410.61441040]
[10.73285198 420.83648682]
[6.75812960 435.30029297]
[2.78340697 449.76409912]
[6.58733559 465.12118530]
[-4.24587536 475.34326172]
[-8.22059727 489.80706787]
[-12.19532013 504.27087402]
[-16.17004204 518.73468018]
[-15.42749691 527.88677979]
[-20.36190414 533.43609619]
[-24.61294937 547.82110596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[16 163]
[17 162]
[18 160]
[19 159]
[20 158]
[21 157]
[23 155]
[24 154]
[25 153]
[27 151]
[28 150]
[29 149]
[30 148]
[31 147]
[33 145]
[34 144]
[38 143]
[39 142]
[40 141]
[42 138]
[43 137]
[44 136]
[45 135]
[47 133]
[48 132]
[49 131]
[52 116]
[53 115]
[54 114]
[55 113]
[56 112]
[57 111]
[58 110]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[66 104]
[67 103]
[68 102]
[74 97]
[75 96]
[77 94]
[78 93]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
