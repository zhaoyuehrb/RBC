%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGACAUUCAAUGGCUCAGUCUUCAUGCCCUCUGCGUUUAUACUAAUUGGGAUUCCUGGUCUGGAGUCAGUGCAGUGUUGGAUUGGGAUUCCUUUCU\
) } def
/len { sequence length } bind def

/coor [
[179.38180542 351.67553711]
[181.49716187 342.09710693]
[186.25988770 333.49444580]
[193.28875732 326.58410645]
[187.38725281 312.79382324]
[181.48574829 299.00350952]
[175.58424377 285.21322632]
[169.68273926 271.42294312]
[163.78123474 257.63262939]
[157.87973022 243.84234619]
[151.97822571 230.05204773]
[145.86297607 216.35519409]
[139.53544617 202.75511169]
[127.15143585 194.47950745]
[128.34524536 178.70339966]
[122.01771545 165.10331726]
[115.69018555 151.50321960]
[109.36266327 137.90313721]
[103.03513336 124.30303955]
[96.70761108 110.70295715]
[90.16934204 97.20291138]
[83.42192078 83.80619049]
[70.30390930 74.96150208]
[71.48912048 60.11413193]
[64.74169922 46.71740341]
[48.56085968 47.15819550]
[33.84263229 40.56128311]
[23.47911644 28.27790833]
[19.48284149 12.77118301]
[22.59607697 -2.87772155]
[32.15354919 -15.58179474]
[24.99275208 -28.76219559]
[17.83195496 -41.94259644]
[2.62265825 -41.28026199]
[-11.30919170 -47.26278305]
[-21.22142982 -58.65434265]
[-25.18843079 -73.16033936]
[-22.47502518 -87.88945770]
[-13.67207718 -99.92995453]
[-20.83287430 -113.11035919]
[-35.09264755 -121.20917511]
[-34.93816376 -137.60758972]
[-20.52834320 -145.43632507]
[-6.68677187 -136.64184570]
[-7.65247393 -120.27115631]
[-0.49167582 -107.09075165]
[14.40033436 -107.92352295]
[28.23401451 -102.18429565]
[38.24500275 -90.96194458]
[42.40770340 -76.44670868]
[39.84498596 -61.50283051]
[31.01235580 -49.10339355]
[38.17315292 -35.92299271]
[45.33395004 -22.74259186]
[59.23339081 -24.09496498]
[72.63110352 -20.00318146]
[83.47042847 -11.06046200]
[90.07408905 1.39267194]
[91.40368652 15.46926594]
[87.22284698 29.02183533]
[78.13842010 39.96997833]
[84.88584900 53.36670303]
[97.52123260 61.25316620]
[96.81864166 77.05876160]
[103.56607056 90.45549011]
[109.82455444 95.77774811]
[110.30770111 104.37542725]
[116.63522339 117.97551727]
[122.96275330 131.57560730]
[129.29028320 145.17568970]
[135.61779785 158.77578735]
[141.94532776 172.37586975]
[154.78192139 181.62425232]
[153.13552856 196.42758179]
[159.46305847 210.02766418]
[166.03558350 216.63029480]
[165.76852417 224.15054321]
[171.67002869 237.94084167]
[177.57153320 251.73112488]
[183.47303772 265.52142334]
[189.37452698 279.31173706]
[195.27603149 293.10202026]
[201.17753601 306.89230347]
[207.07904053 320.68261719]
[228.01234436 323.60488892]
[243.15182495 338.17028809]
[246.83561707 358.72341919]
[237.80844116 377.40997314]
[246.16622925 389.86581421]
[261.11859131 396.60067749]
[262.49276733 412.94213867]
[248.87512207 422.07952881]
[234.27430725 414.61303711]
[233.71040344 398.22360229]
[225.35261536 385.76776123]
[215.96336365 387.96374512]
[206.31347656 387.39840698]
[197.20011902 384.10485840]
[189.37998962 378.34219360]
[183.50650024 370.57510376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[12 75]
[13 74]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[20 67]
[21 65]
[22 64]
[24 62]
[25 61]
[31 54]
[32 53]
[33 52]
[39 46]
[40 45]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
