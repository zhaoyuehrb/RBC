%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGCCGGAUUUGGUUAGCUGAGCCCACCGAGAGGCGCCUGCAGGAUGAAAGCUCUCUGUCUCCUCCUCCUCCCUGUCCUGGGGCUGUUGGUGUCUAGCAAGACCCUGUGCUCCAUGGAAGAAGCCAUCAAUGAGAGGAUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[88.11299133 146.85261536]
[77.03250885 142.53190613]
[67.34244537 135.63639832]
[55.61497116 144.98873901]
[43.88750076 154.34107971]
[32.16002655 163.69343567]
[20.43255424 173.04577637]
[19.82929420 183.99530029]
[13.39875793 192.60444641]
[3.48568368 196.14147949]
[-6.51421118 193.65361023]
[-18.63059616 202.49630737]
[-30.74698067 211.33900452]
[-42.86336517 220.18168640]
[-54.97974777 229.02438354]
[-67.09613037 237.86708069]
[-69.66653442 253.23037720]
[-82.08023834 262.02551270]
[-96.71095276 259.48034668]
[-108.82733917 268.32305908]
[-118.05714417 282.54440308]
[-134.27778625 277.61215210]
[-134.02862549 260.66003418]
[-117.67002869 256.20666504]
[-105.55364227 247.36396790]
[-103.51596069 232.65399170]
[-91.35418701 223.51364136]
[-75.93882751 225.75068665]
[-63.82244110 216.90800476]
[-51.70605850 208.06530762]
[-39.58967209 199.22261047]
[-27.47328949 190.37991333]
[-15.35690403 181.53723145]
[-8.92920971 163.34455872]
[11.08020782 161.31831360]
[22.80768013 151.96595764]
[34.53515244 142.61361694]
[46.26262283 133.26126099]
[57.99009705 123.90892029]
[52.50312042 108.97299957]
[52.16308594 93.06472778]
[57.00684357 77.90798950]
[44.89046097 69.06529236]
[32.77407455 60.22260284]
[20.65769005 51.37990952]
[8.44750881 42.66719055]
[-3.85507464 34.08544159]
[-18.90443802 38.33404922]
[-33.14257431 31.86802292]
[-39.84667206 17.74042130]
[-35.85125732 2.62186766]
[-23.04284859 -6.34912157]
[-7.46918011 -4.93671846]
[3.51633596 6.19218349]
[4.72667503 21.78285599]
[17.02925873 30.36460686]
[24.36667824 31.62063980]
[29.50038338 39.26352310]
[41.61676788 48.10621643]
[53.73315430 56.94890976]
[65.84954071 65.79160309]
[80.88252258 55.60416031]
[98.61379242 51.68284988]
[116.54071808 54.58113861]
[132.13304138 63.88994980]
[143.19003296 78.29541779]
[157.47557068 73.72118378]
[171.76109314 69.14694214]
[186.04663086 64.57270813]
[200.33215332 59.99847031]
[207.61267090 54.36262131]
[214.97207642 55.48265457]
[229.35209656 51.21474075]
[236.92526245 37.60280228]
[251.56944275 33.47938156]
[264.49966431 40.78312302]
[278.87969971 36.51520920]
[292.78344727 30.88620567]
[306.08242798 23.94813156]
[319.38140869 17.01005554]
[332.60549927 9.93027210]
[345.75320435 2.70958591]
[358.90087891 -4.51110029]
[372.04858398 -11.73178673]
[385.19625854 -18.95247269]
[398.34396362 -26.17315865]
[399.06427002 -39.97811508]
[406.46868896 -51.52293015]
[418.52291870 -57.83479691]
[432.01257324 -57.35184860]
[443.40005493 -50.30823517]
[456.69906616 -57.24631119]
[462.91455078 -64.03868866]
[470.35720825 -64.18711090]
[483.80142212 -70.83940125]
[497.24563599 -77.49169922]
[510.68984985 -84.14398956]
[519.32727051 -98.08412170]
[535.70782471 -97.30358887]
[542.98065186 -82.60533905]
[533.66400146 -69.10967255]
[517.34216309 -70.69977570]
[503.89794922 -64.04747772]
[490.45370483 -57.39518738]
[477.00949097 -50.74289322]
[463.63714600 -43.94731903]
[450.33813477 -37.00924683]
[448.46640015 -20.73323250]
[437.16772461 -8.64148331]
[420.72985840 -5.61144590]
[405.56463623 -13.02547073]
[392.41696167 -5.80478477]
[379.26925659 1.41590142]
[366.12158203 8.63658714]
[352.97387695 15.85727406]
[339.82620239 23.07795906]
[335.44641113 29.09731674]
[326.31948853 30.30904579]
[313.02050781 37.24711990]
[299.72152710 44.18519592]
[314.31906128 47.63658142]
[324.84237671 58.32582092]
[328.06497192 72.97555542]
[322.99884033 87.09413147]
[311.19720459 96.35273743]
[296.27856445 97.91266632]
[282.81695557 91.29563141]
[274.93975830 78.53044128]
[275.06219482 63.53093719]
[283.14761353 50.89522934]
[268.76757812 55.16314316]
[261.91534424 68.33821869]
[247.39277649 72.87133789]
[233.62001038 65.59475708]
[219.23999023 69.86267090]
[204.90638733 74.28400421]
[190.62086487 78.85823822]
[176.33534241 83.43247223]
[162.04980469 88.00671387]
[147.76428223 92.58094788]
[148.13005066 104.46840668]
[145.58212280 116.08535767]
[140.27473450 126.72853088]
[132.52919006 135.75360107]
[122.81438446 142.61422729]
[111.71843719 146.89506531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[19 25]
[20 24]
[42 61]
[43 60]
[44 59]
[45 58]
[46 56]
[47 55]
[66 140]
[67 139]
[68 138]
[69 137]
[70 136]
[72 135]
[73 134]
[76 131]
[77 130]
[78 120]
[79 119]
[80 118]
[81 116]
[82 115]
[83 114]
[84 113]
[85 112]
[86 111]
[91 107]
[92 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
