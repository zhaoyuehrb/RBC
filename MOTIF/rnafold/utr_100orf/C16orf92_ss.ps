%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGUCAUGAGGCUGUGGCCAUGGGUGCUGGUGUGGGUGUGGCUGGCUGCACUAGGGGCCAUAGAAACUGGGUCCCAAGUCAGCUUCCGCCUCGAGAGAUAAAGGCAGGGGUCAGCUUGG\
) } def
/len { sequence length } bind def

/coor [
[138.15750122 129.16894531]
[135.04444885 124.68344116]
[121.45891571 118.32472229]
[107.87338257 111.96600342]
[93.92787170 112.97322845]
[85.76790619 101.61952972]
[72.18237305 95.26081085]
[58.59683609 88.90209961]
[47.50082016 97.52451324]
[33.83191299 100.48538208]
[20.29164886 97.25829315]
[9.53078461 88.53404236]
[3.63037491 76.07376862]
[3.69943213 62.35363007]
[-9.71787453 55.64722443]
[-23.13517952 48.94081879]
[-36.55248642 42.23440933]
[-49.96979141 35.52800369]
[-63.38710022 28.82159615]
[-76.80440521 22.11518860]
[-90.22171021 15.40878201]
[-103.95309448 22.39129066]
[-118.98731232 19.97766495]
[-129.59207153 9.30044651]
[-131.84916687 -5.39797354]
[-145.26646423 -12.10438061]
[-158.68377686 -18.81078720]
[-172.10107422 -25.51719475]
[-185.51838684 -32.22360229]
[-194.71313477 -33.28753662]
[-199.19148254 -39.27932358]
[-212.43165588 -46.32897568]
[-225.67184448 -53.37862778]
[-238.29280090 -50.36555481]
[-249.20927429 -56.60382843]
[-252.78308105 -68.23809052]
[-265.83737183 -75.62631226]
[-280.99859619 -71.16397858]
[-294.83438110 -78.80249786]
[-299.13616943 -94.01007080]
[-291.35177612 -107.76431274]
[-276.09957886 -111.90507507]
[-262.42840576 -103.97571564]
[-258.44912720 -88.68058777]
[-245.39486694 -81.29236603]
[-227.93440247 -82.44084930]
[-218.62219238 -66.61881256]
[-205.38200378 -59.56915665]
[-192.14183044 -52.51950836]
[-178.81198120 -45.64090729]
[-165.39466858 -38.93450165]
[-151.97737122 -32.22809219]
[-138.56005859 -25.52168655]
[-125.14275360 -18.81527901]
[-112.03164673 -25.83217430]
[-97.12645721 -23.75868797]
[-86.17218781 -13.18242073]
[-83.51530457 1.99147618]
[-70.09799957 8.69788361]
[-56.68069077 15.40429020]
[-43.26338577 22.11069679]
[-29.84607887 28.81710434]
[-16.42877388 35.52350998]
[-3.01146722 42.22991943]
[10.40583897 48.93632507]
[23.61153030 39.71918488]
[39.75358582 38.37769699]
[54.46847153 45.36874390]
[63.73106003 58.88397598]
[64.95555115 75.31655884]
[78.54108429 81.67527771]
[92.12661743 88.03399658]
[106.07212830 87.02677155]
[114.23209381 98.38047028]
[127.81762695 104.73918915]
[141.40316772 111.09790039]
[155.22412109 116.92725372]
[169.25987244 122.21852875]
[183.29562378 127.50981140]
[197.33137512 132.80110168]
[211.36712646 138.09237671]
[225.62765503 131.82539368]
[239.78652954 137.39144897]
[245.67324829 151.02529907]
[259.70901489 156.31658936]
[273.74475098 161.60786438]
[287.78051758 166.89915466]
[301.81625366 172.19042969]
[317.45867920 169.81854248]
[326.63842773 181.54803467]
[340.67419434 186.83932495]
[354.70993042 192.13059998]
[368.74569702 197.42189026]
[380.57247925 187.62275696]
[395.71701050 185.06567383]
[410.10549927 190.43849182]
[419.86749268 202.29591370]
[422.37710571 217.44839478]
[416.95922852 231.81996155]
[405.07122803 241.54475403]
[389.91098022 244.00685120]
[375.55645752 238.54394531]
[365.86895752 226.62554932]
[363.45440674 211.45764160]
[349.41867065 206.16635132]
[335.38290405 200.87507629]
[321.34716797 195.58378601]
[306.70867920 198.33413696]
[296.52499390 186.22618103]
[282.48922729 180.93490601]
[268.45349121 175.64361572]
[254.41772461 170.35234070]
[240.38197327 165.06105042]
[226.95983887 171.41574097]
[212.65022278 166.24957275]
[206.07583618 152.12812805]
[192.04008484 146.83685303]
[178.00433350 141.54556274]
[163.96858215 136.25428772]
[149.93283081 130.96299744]
[146.49705505 132.16139221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[6 72]
[7 71]
[8 70]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[31 49]
[32 48]
[33 47]
[36 45]
[37 44]
[77 120]
[78 119]
[79 118]
[80 117]
[81 116]
[84 113]
[85 112]
[86 111]
[87 110]
[88 109]
[90 107]
[91 106]
[92 105]
[93 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
