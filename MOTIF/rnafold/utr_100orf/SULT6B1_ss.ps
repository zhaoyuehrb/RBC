%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUUCCUUACCCCAUCACCAUGUGCACCUCAGAAACUUUCCAAGCGCUGGACACCUUCGAAGCCAGACAUGAUGACAUCGUGCUAGCAUCUUAUCCAAAGUGCGGUUCAAACUGGAUUC\
) } def
/len { sequence length } bind def

/coor [
[79.08945465 166.57617188]
[73.08264923 180.32092285]
[67.07583618 194.06567383]
[75.71343231 206.84829712]
[76.04619598 222.27207947]
[67.96792603 235.41532898]
[54.05638504 242.08410645]
[38.75069046 240.15040588]
[26.93482780 230.23129272]
[22.37920380 215.49189758]
[26.53749657 200.63551331]
[38.08281326 190.40275574]
[53.33108521 188.05886841]
[59.33789062 174.31411743]
[65.34470367 160.56936646]
[51.67126465 150.33856201]
[40.89213181 137.09309387]
[33.65284729 121.62619781]
[30.38694763 104.86415100]
[31.29002380 87.81080627]
[16.88777542 83.61852264]
[2.48552823 79.42623901]
[-6.75099516 80.02798462]
[-12.23098850 74.93615723]
[-26.52051926 70.37443542]
[-40.81005096 65.81271362]
[-55.09957886 61.25098801]
[-63.91360092 73.54603577]
[-76.09680939 82.51400757]
[-90.45562744 87.27631378]
[-105.58332062 87.36638641]
[-119.99783325 82.77540588]
[-132.28697205 73.95315552]
[-141.24678040 61.76393509]
[-145.99946594 47.40192795]
[-146.07940674 32.27418137]
[-141.47875977 17.86274910]
[-132.64826965 5.57952309]
[-120.45305634 -3.37211370]
[-106.08786774 -8.11517143]
[-90.96006775 -8.18497276]
[-76.55172729 -3.57468009]
[-64.27441406 5.26403761]
[-55.33095551 17.46525192]
[-50.59752274 31.83361435]
[-50.53785706 46.96145630]
[-36.24832916 51.52317810]
[-21.95879745 56.08490372]
[-7.66926575 60.64662552]
[6.67781258 65.02399445]
[21.08006096 69.21627808]
[35.48230743 73.40856171]
[42.35734940 60.66856384]
[51.71314240 49.62126923]
[63.14705276 40.74211121]
[76.16699219 34.41322708]
[90.21263123 30.90698624]
[104.67948914 30.37428856]
[118.94495392 32.83806229]
[132.39508057 38.19226837]
[144.45103455 46.20648575]
[155.19332886 35.73732376]
[159.67614746 20.56448936]
[174.19100952 17.22264862]
[184.93328857 6.75348616]
[189.41610718 -8.41934776]
[203.93098450 -11.76118851]
[214.67326355 -22.23035049]
[218.69900513 -30.56514931]
[225.82951355 -32.82633591]
[236.83778381 -43.01543808]
[247.84606934 -53.20453644]
[258.85433960 -63.39363480]
[269.86264038 -73.58273315]
[280.87091064 -83.77183533]
[288.38790894 -98.96825409]
[305.07135010 -95.95182037]
[306.79122925 -79.08533478]
[291.05999756 -72.76355743]
[280.05172729 -62.57445526]
[269.04345703 -52.38535690]
[258.03515625 -42.19625473]
[247.02688599 -32.00715637]
[236.01861572 -21.81805611]
[225.14242554 -11.48806858]
[214.40014648 -1.01890588]
[210.68568420 13.40510368]
[195.40245056 17.49576950]
[184.66017151 27.96493149]
[180.94570923 42.38893890]
[165.66249084 46.47960663]
[154.92019653 56.94876862]
[161.43293762 66.89967346]
[166.16137695 77.81196594]
[168.96820068 89.36869812]
[169.77186584 101.23420715]
[168.54905701 113.06387329]
[165.33525085 124.51409912]
[160.22383118 135.25233459]
[153.36323547 144.96667480]
[144.95272827 153.37498474]
[153.32638550 165.82014465]
[161.70004272 178.26528931]
[175.82336426 185.39567566]
[176.50881958 200.27450562]
[184.88247681 212.71966553]
[193.25613403 225.16481018]
[201.62979126 237.60997009]
[216.59074402 244.32577515]
[217.98574829 260.66546631]
[204.37976074 269.82019043]
[189.76943970 262.37234497]
[189.18463135 245.98362732]
[180.81097412 233.53846741]
[172.43733215 221.09332275]
[164.06367493 208.64816284]
[150.53929138 202.40792847]
[149.25488281 186.63894653]
[140.88124084 174.19380188]
[132.50758362 161.74864197]
[115.33848572 168.07618713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[20 52]
[21 51]
[22 50]
[24 49]
[25 48]
[26 47]
[27 46]
[61 92]
[62 91]
[64 89]
[65 88]
[67 86]
[68 85]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
[101 120]
[102 119]
[103 118]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
