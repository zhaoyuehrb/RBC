%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCUGCUGGGCCCGAGCUUUUUCCUGGGAUAGCGAUGGAGACGCCGGGCGCAUCAGCGUCGUCCUUGUUGCUUCCCGCCGCGUCCAGGCCCCCGAGGAAGCGCGAGGCGGGAGAGGCUGGGGCUGCGACGAGCA\
) } def
/len { sequence length } bind def

/coor [
[94.70795441 411.88400269]
[93.34392548 396.94616699]
[91.80996704 382.02478027]
[90.10626221 367.12185669]
[88.40255737 352.21893311]
[77.83291626 362.86236572]
[62.83521652 363.12500000]
[51.89941025 352.85812378]
[51.21607590 337.87371826]
[61.17204285 326.65414429]
[76.13139343 325.55062866]
[87.62666321 335.18933105]
[87.96810913 320.19320679]
[88.30955505 305.19711304]
[88.65100098 290.20098877]
[88.99245453 275.20486450]
[81.54686737 262.30477905]
[89.59630585 248.68429565]
[89.93775177 233.68818665]
[90.27919769 218.69207764]
[90.62064362 203.69595337]
[90.96209717 188.69984436]
[91.30354309 173.70373535]
[91.64498901 158.70762634]
[91.98643494 143.71150208]
[92.32788849 128.71539307]
[92.66933441 113.71928406]
[84.83995056 105.25923920]
[84.84747314 93.37430573]
[75.38114929 81.73863983]
[65.91483307 70.10296631]
[56.44851303 58.46730042]
[48.53418350 53.73232651]
[46.90277863 46.45731735]
[37.70377731 34.60917664]
[28.50477600 22.76103973]
[19.30577469 10.91290188]
[10.10677338 -0.93523598]
[0.90777218 -12.78337383]
[-8.55854702 -24.41904259]
[-18.28727913 -35.83621597]
[-28.01601028 -47.25338364]
[-37.87406540 -58.55908203]
[-47.86016846 -69.75183868]
[-57.84626770 -80.94458771]
[-67.83236694 -92.13734436]
[-77.81847382 -103.33010101]
[-92.77925110 -108.47653198]
[-95.47885895 -123.12445068]
[-105.46495819 -134.31719971]
[-121.33578491 -136.66163635]
[-129.27323914 -150.60353088]
[-123.18837738 -165.44786072]
[-107.74899292 -169.80732727]
[-94.79885101 -160.33770752]
[-94.27220154 -144.30329895]
[-84.28610229 -133.11054993]
[-70.03959656 -128.76469421]
[-66.62571716 -113.31620026]
[-56.63961411 -102.12345123]
[-46.65351486 -90.93069458]
[-36.66741180 -79.73793793]
[-26.68130875 -68.54518127]
[-19.82209015 -65.62313843]
[-16.59883881 -56.98211670]
[-6.87010765 -45.56494522]
[2.85862374 -34.14777374]
[7.54510546 -32.88179779]
[11.45239639 -28.60644531]
[12.75590992 -21.98237610]
[21.95491219 -10.13423729]
[31.15391350 1.71390080]
[40.35291290 13.56203938]
[49.55191422 25.41017723]
[58.75091553 37.25831604]
[68.08418274 49.00098038]
[77.55049896 60.63665009]
[87.01682281 72.27231598]
[96.48313904 83.90798950]
[110.97202301 87.79027557]
[124.98793030 82.44664764]
[139.00384521 77.10301971]
[152.89448547 71.44173431]
[166.65264893 65.46572113]
[180.41081238 59.48970032]
[194.16899109 53.51368332]
[207.78755188 47.22603607]
[221.25947571 40.63001633]
[231.12345886 25.12791061]
[248.54510498 26.90675545]
[261.86340332 20.00577927]
[273.14501953 7.35029268]
[288.42898560 14.68763733]
[285.60940552 31.40548134]
[268.76437378 33.32405853]
[255.44609070 40.22503281]
[251.45709229 51.70198822]
[240.34518433 57.54043961]
[227.85549927 54.10193253]
[214.38357544 60.69795227]
[211.99574280 64.92453766]
[206.88548279 67.65049744]
[200.14500427 67.27185822]
[186.38684082 73.24787140]
[172.62866211 79.22388458]
[158.87049866 85.19990540]
[156.29275513 89.31343079]
[151.06372070 91.80397034]
[144.34747314 91.11892700]
[130.33155823 96.46255493]
[116.31565094 101.80618286]
[107.66544342 114.06072998]
[107.32399750 129.05683899]
[106.98255157 144.05296326]
[106.64110565 159.04907227]
[106.29965210 174.04518127]
[105.95820618 189.04129028]
[105.61676025 204.03741455]
[105.27531433 219.03352356]
[104.93386078 234.02963257]
[104.59241486 249.02574158]
[112.01357269 262.99847412]
[103.98856354 275.54632568]
[103.64711761 290.54241943]
[103.30567169 305.53854370]
[102.96422577 320.53466797]
[102.62277222 335.53076172]
[103.30549622 350.51522827]
[105.00919342 365.41815186]
[106.71289825 380.32110596]
[110.82802582 388.57470703]
[108.28178406 395.58212280]
[109.64580536 410.51998901]
[121.00485992 421.84921265]
[119.08643341 437.77716064]
[105.36217499 446.08523560]
[90.36016846 440.40023804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 130]
[4 129]
[5 128]
[12 127]
[13 126]
[14 125]
[15 124]
[16 123]
[18 121]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[27 112]
[29 79]
[30 78]
[31 77]
[32 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 67]
[41 66]
[42 65]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[49 57]
[50 56]
[80 111]
[81 110]
[82 109]
[83 106]
[84 105]
[85 104]
[86 103]
[87 100]
[88 99]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
