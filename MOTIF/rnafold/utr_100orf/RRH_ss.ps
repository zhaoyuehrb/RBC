%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUGAAGGGUGUUUCGGUAUCUUCCCUCCAAAAUGCUAAGAAAUAAUUUAGGCAACAGUUCAGACUCUAAAAAUGAAGAUGGCUCGGUCUUUUCACAGACUGAACACAAUAUUGUUGCAACUUACUUGAUUA\
) } def
/len { sequence length } bind def

/coor [
[62.74274826 124.23921967]
[48.96950912 130.18041992]
[35.19626617 136.12161255]
[21.42302513 142.06280518]
[7.64978313 148.00401306]
[5.91877413 164.40397644]
[-3.76936746 177.63340759]
[-18.71043968 184.15890503]
[-34.81343079 182.29641724]
[-47.72058105 172.64469910]
[-61.35184860 178.90476990]
[-74.98311615 185.16485596]
[-88.61437988 191.42492676]
[-102.24565125 197.68499756]
[-115.87691498 203.94508362]
[-129.50817871 210.20515442]
[-138.82003784 222.99577332]
[-153.61502075 221.27607727]
[-167.24629211 227.53614807]
[-168.59399414 242.83580017]
[-177.42408752 255.40261841]
[-191.36134338 261.85620117]
[-206.65669250 260.46054077]
[-219.19577026 251.59109497]
[-225.60562134 237.63369751]
[-224.16204834 222.34278870]
[-215.25334167 209.83157349]
[-201.27589417 203.46549988]
[-185.98959351 204.95700073]
[-173.50637817 213.90489197]
[-159.87510681 207.64480591]
[-151.53825378 195.30195618]
[-135.76826477 196.57388306]
[-122.13699341 190.31381226]
[-108.50572205 184.05374146]
[-94.87445831 177.79365540]
[-81.24319458 171.53358459]
[-67.61192322 165.27349854]
[-53.98065948 159.01342773]
[-53.60007095 145.31280518]
[-47.30593872 133.06294250]
[-36.28335190 124.69576263]
[-22.66232491 121.90014648]
[-9.10631943 125.28127289]
[1.70858645 134.23075867]
[15.48182774 128.28956604]
[29.25506973 122.34837341]
[43.02831268 116.40717316]
[56.80155182 110.46598053]
[57.18122482 88.07544708]
[68.42964172 68.71174622]
[87.69160461 57.28997803]
[110.07782745 56.70935440]
[129.90597534 67.11725616]
[141.72613525 57.88233185]
[153.54629517 48.64740753]
[165.36645508 39.41248703]
[177.18663025 30.17756462]
[189.00679016 20.94264221]
[200.03642273 10.77666187]
[210.20239258 -0.25297284]
[220.36837769 -11.28260803]
[230.53436279 -22.31224251]
[240.70033264 -33.34187698]
[250.86631775 -44.37151337]
[252.72659302 -50.87064362]
[256.98840332 -54.80308914]
[261.77111816 -55.66375732]
[272.43923950 -66.20847321]
[283.10736084 -76.75318909]
[278.64077759 -88.97796631]
[279.16000366 -101.93582916]
[284.55120850 -113.67871094]
[293.97082520 -122.45482635]
[305.97735596 -126.96994019]
[318.75183105 -126.57820129]
[330.37344360 -121.37425995]
[341.52062988 -131.41120911]
[352.66778564 -141.44818115]
[363.81497192 -151.48513794]
[374.96212769 -161.52209473]
[386.10931396 -171.55905151]
[386.68603516 -187.35281372]
[398.31845093 -198.05152893]
[414.10525513 -197.30784607]
[424.68035889 -185.56297302]
[423.76980591 -169.78492737]
[411.91378784 -159.33456421]
[396.14627075 -160.41188049]
[384.99908447 -150.37492371]
[373.85192871 -140.33796692]
[362.70474243 -130.30101013]
[351.55758667 -120.26404572]
[340.41040039 -110.22708130]
[344.61395264 -93.60887909]
[339.85025024 -77.05048370]
[327.33062744 -65.08441925]
[310.40191650 -61.03273010]
[293.65209961 -66.08506012]
[282.98394775 -55.54034805]
[272.31582642 -44.99563217]
[261.89596558 -34.20553207]
[251.72998047 -23.17589760]
[241.56399536 -12.14626312]
[231.39801025 -1.11662793]
[221.23204041 9.91300678]
[211.06605530 20.94264221]
[226.06605530 20.92903137]
[237.69004822 30.40966797]
[240.69239807 45.10612869]
[233.71817017 58.38619614]
[219.91470337 64.25683594]
[205.51123047 60.06875610]
[197.00775146 47.71194458]
[198.24169922 32.76280212]
[186.42153931 41.99772644]
[174.60137939 51.23264694]
[162.78121948 60.46757126]
[150.96105957 69.70249176]
[139.14089966 78.93741608]
[142.42970276 86.75756073]
[144.17283630 95.06011200]
[144.30679321 103.54261780]
[142.82669067 111.89607239]
[139.78645325 119.81616974]
[135.29682922 127.01437378]
[129.52137756 133.22846985]
[122.67047882 138.23208618]
[114.99371338 141.84292603]
[106.77074432 143.92948914]
[98.30112457 144.41572571]
[89.89339447 143.28393555]
[81.85383606 140.57534790]
[74.47532654 136.38864136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[18 31]
[19 30]
[54 120]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[60 107]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[68 101]
[69 100]
[70 99]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
