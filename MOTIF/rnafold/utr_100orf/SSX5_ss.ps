%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCUGAUUGUUUCGAUUCUUCCAAAAUCAGAGACAGAGUGCUCCCGGUGCCAUGAACGGAGACGAUGCCUUUGUACGGAGACCUAGGGUUGGUUCUCAAAUACCAGAGAAGAUGCAAAAGCAUCCCUGGAGACAAGUCUGUGACCGUGGAA\
) } def
/len { sequence length } bind def

/coor [
[3.95905280 194.53546143]
[-7.57520485 204.12507629]
[-19.10946274 213.71470642]
[-30.64372063 223.30433655]
[-42.17797852 232.89395142]
[-53.71223831 242.48358154]
[-55.10213852 246.74240112]
[-57.55350113 249.98141479]
[-60.60300064 251.98892212]
[-63.76649857 252.73013306]
[-66.60009766 252.33802795]
[-78.87762451 260.95559692]
[-91.15514374 269.57315063]
[-103.43266296 278.19073486]
[-115.71018982 286.80828857]
[-127.89917755 295.55062866]
[-139.99835205 304.41683960]
[-152.09753418 313.28308105]
[-164.19671631 322.14929199]
[-165.04327393 337.76394653]
[-175.76637268 349.14590454]
[-191.30288696 350.92098999]
[-204.31694031 342.25103760]
[-208.66371155 327.22973633]
[-202.29078674 312.94967651]
[-188.20726013 306.15347290]
[-173.06294250 310.05010986]
[-160.96376038 301.18389893]
[-148.86457825 292.31765747]
[-136.76539612 283.45144653]
[-133.20761108 276.92166138]
[-124.32775879 274.53076172]
[-112.05023193 265.91320801]
[-99.77271271 257.29562378]
[-87.49518585 248.67807007]
[-75.21766663 240.06050110]
[-63.30186081 230.94932556]
[-51.76760483 221.35969543]
[-40.23334503 211.77008057]
[-28.69908714 202.18045044]
[-17.16482925 192.59082031]
[-5.63057137 183.00120544]
[-0.48439220 166.25057983]
[17.64978790 163.21626282]
[28.98603249 153.39335632]
[40.32227707 143.57044983]
[51.55773926 133.63241577]
[62.69124985 123.58030701]
[73.82476044 113.52819824]
[84.95827484 103.47608948]
[71.94587708 110.93782806]
[57.08867264 108.87299347]
[46.60416412 98.14569092]
[44.87994385 83.24511719]
[52.63756943 70.40692902]
[66.63060760 65.00368500]
[81.00318909 69.29656982]
[89.74098969 81.49028778]
[83.78939056 67.72153473]
[77.83779144 53.95278931]
[71.88618469 40.18404007]
[65.93458557 26.41529083]
[59.98298645 12.64654255]
[44.94820404 8.34662151]
[36.23771286 -4.64034748]
[37.96434021 -20.18231583]
[49.31282806 -30.94083977]
[64.92476654 -31.83607483]
[77.42867279 -22.44531822]
[80.92058563 -7.20259714]
[73.75173187 6.69494104]
[79.70333862 20.46368980]
[85.65493774 34.23243713]
[91.60653687 48.00118637]
[97.55813599 61.76993561]
[103.50974274 75.53868103]
[106.86994934 84.67707062]
[105.71928406 93.21594238]
[120.46717834 90.47740173]
[132.62280273 80.35064697]
[146.54876709 85.63428497]
[161.29666138 82.89574432]
[176.04455566 80.15719604]
[190.79244995 77.41864777]
[205.34524536 73.78321838]
[219.64843750 69.26452637]
[233.95162964 64.74583435]
[248.25482178 60.22714233]
[262.55801392 55.70845032]
[261.22409058 51.16429138]
[261.08334351 45.99684525]
[262.32934570 40.52490234]
[265.07098389 35.11847687]
[269.31997681 30.17659378]
[274.98440552 26.10235977]
[288.22222900 19.04828072]
[301.46005249 11.99420166]
[314.69787598 4.94012308]
[327.93569946 -2.11395550]
[329.94787598 -17.50001335]
[340.64389038 -28.74168968]
[355.91088867 -31.51632881]
[369.87838745 -24.75702858]
[377.17562866 -11.06287384]
[374.99667358 4.30045033]
[364.17935181 15.42543316]
[348.88314819 18.03429222]
[334.98980713 11.12386799]
[321.75198364 18.17794609]
[308.51416016 25.23202515]
[295.27633667 32.28610229]
[282.03851318 39.34018326]
[284.47564697 54.14086914]
[299.27633667 56.57801056]
[314.07702637 59.01515198]
[328.87771606 61.45229721]
[343.67837524 63.88943863]
[358.82482910 57.60314178]
[371.67578125 67.79061127]
[369.01132202 83.97185516]
[353.57238770 89.50099182]
[341.24124146 78.69012451]
[326.44055176 76.25298309]
[311.63986206 73.81584167]
[296.83917236 71.37870026]
[282.03851318 68.94155884]
[267.07672119 70.01164246]
[252.77351379 74.53033447]
[238.47032166 79.04902649]
[224.16712952 83.56772614]
[209.86393738 88.08641815]
[222.42462158 96.28574371]
[225.69297791 110.92534637]
[217.81221008 123.68831635]
[203.25946045 127.32389832]
[190.30229187 119.76667786]
[186.30177307 105.30998230]
[193.53099060 92.16654205]
[178.78311157 94.90509033]
[164.03521729 97.64363098]
[149.28732300 100.38217926]
[138.18655396 110.31305695]
[123.20572662 105.22528839]
[108.45783234 107.96383667]
[95.01038361 114.60960388]
[83.87686920 124.66171265]
[72.74336243 134.71382141]
[61.60984802 144.76593018]
[57.30292892 152.89112854]
[50.14518738 154.90669250]
[38.80894089 164.72959900]
[27.47269821 174.55252075]
[25.76256752 187.37649536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 30]
[17 29]
[18 28]
[19 27]
[44 152]
[45 151]
[46 150]
[47 148]
[48 147]
[49 146]
[50 145]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[78 144]
[79 143]
[81 141]
[82 140]
[83 139]
[84 138]
[85 131]
[86 130]
[87 129]
[88 128]
[89 127]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
