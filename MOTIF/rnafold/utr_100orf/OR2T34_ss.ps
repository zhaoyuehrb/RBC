%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGCUCAGGGAAUCAGACUUCUCAGAAUCAAACAGCAAGCACUGAUUUCACCCUCACGGGACUCUUUGCUGAGAGCAAGCAUGCUGCCCUCCUCUACA\
) } def
/len { sequence length } bind def

/coor [
[-26.61243057 317.67401123]
[-36.57985687 317.07879639]
[-46.31061554 314.85620117]
[-55.54093933 311.06768799]
[-64.02082825 305.81726074]
[-71.52084351 299.24847412]
[-77.83829498 291.54046631]
[-91.12846375 298.49542236]
[-99.76807404 311.74942017]
[-114.63208008 310.79522705]
[-127.92224884 317.75018311]
[-141.21241760 324.70513916]
[-154.50259399 331.66009521]
[-167.79277039 338.61505127]
[-172.27284241 353.77105713]
[-186.19737244 361.24655151]
[-201.30516052 356.60650635]
[-208.63302612 342.60369873]
[-203.83349609 327.54583740]
[-189.75401306 320.36642456]
[-174.74771118 325.32489014]
[-161.45755005 318.36993408]
[-148.16737366 311.41497803]
[-134.87721252 304.46002197]
[-121.58703613 297.50506592]
[-113.89803314 284.74856567]
[-98.08341980 285.20526123]
[-84.79325104 278.25030518]
[-88.69039917 257.19641113]
[-85.00858307 236.08004761]
[-74.19258118 217.54696655]
[-57.58205795 203.92504883]
[-37.24569702 196.93183899]
[-15.72354412 197.45805359]
[4.29023409 205.45411682]
[13.77228069 193.83126831]
[23.25432777 182.20840454]
[32.73637390 170.58555603]
[42.21841812 158.96269226]
[44.26848984 144.20985413]
[58.98738480 138.40771484]
[68.46942902 126.78485870]
[63.19654083 118.89738464]
[59.85919571 110.01605988]
[58.63291168 100.60798645]
[59.58218002 91.16793060]
[62.65707779 82.19236755]
[67.69588470 74.15333557]
[74.43361664 67.47361755]
[82.51592255 62.50450134]
[91.51773071 59.50732422]
[100.96563721 58.63971710]
[110.36276245 59.94729996]
[116.69028473 46.34720993]
[123.01781464 32.74712372]
[121.03621674 16.46813774]
[134.30426025 6.83014107]
[149.17292786 13.74787617]
[150.34658813 30.10497093]
[136.61790466 39.07464600]
[130.29037476 52.67473602]
[123.96285248 66.27482605]
[130.80239868 72.38084412]
[136.12913513 79.84332275]
[150.33619690 75.03093719]
[164.54327393 70.21855164]
[178.75035095 65.40616608]
[192.95742798 60.59378052]
[203.36564636 47.92094040]
[219.49838257 50.86489487]
[224.75965881 66.39715576]
[213.73712158 78.53945923]
[197.76980591 74.80084991]
[183.56274414 79.61324310]
[169.35566711 84.42562866]
[155.14859009 89.23801422]
[140.94151306 94.05039978]
[137.94319153 116.48998260]
[123.58312225 133.99179077]
[102.16129303 141.31506348]
[80.09228516 136.26690674]
[70.61023712 147.88977051]
[67.88195038 163.47395325]
[53.84127808 168.44474792]
[44.35923004 180.06759644]
[34.87718201 191.69046021]
[25.39513779 203.31330872]
[15.91309071 214.93617249]
[22.21257591 222.75216675]
[27.14157295 231.49298096]
[30.56742668 240.92079163]
[32.39834976 250.77935791]
[32.58589554 260.80093384]
[31.12621880 270.71356201]
[28.06017494 280.24844360]
[23.47215080 289.14718628]
[17.48775864 297.16894531]
[10.27039433 304.09677124]
[2.01676822 309.74359131]
[-7.04844570 313.95718384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 28]
[8 27]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[35 88]
[36 87]
[37 86]
[38 85]
[39 84]
[41 82]
[42 81]
[53 62]
[54 61]
[55 60]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
