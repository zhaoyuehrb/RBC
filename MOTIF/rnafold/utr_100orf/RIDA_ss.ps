%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUGCUGUGGUUGGUCAGUCCAGUAAGAAGCCAGCAGGGCUGGUGCUGGGGCUUCUUCUCCUGAAGGGGCUGCAAGAGGGAAGGCUUAGCCAUGUCGUCCUUGAUCAGAAGGGUGAUCAGCACCGCGAAAGCCCCAGGGGCCAUUGGACCCUACAGUCAAGCUGUAUUAGUCGACAGGACCAUUUACAUUU\
) } def
/len { sequence length } bind def

/coor [
[98.90824890 393.54074097]
[84.67145538 399.04315186]
[69.45783234 397.81497192]
[56.28805542 390.10009766]
[47.77698898 377.43026733]
[45.61451340 362.32110596]
[50.22999191 347.77255249]
[60.70701599 336.67324829]
[74.96536255 331.22695923]
[76.17236328 316.27560425]
[77.37936401 301.32421875]
[78.58635712 286.37286377]
[79.79335785 271.42150879]
[73.10527039 258.11291504]
[81.92793274 244.98008728]
[83.13492584 230.02873230]
[84.34192657 215.07736206]
[85.54892731 200.12600708]
[86.75592804 185.17465210]
[78.38657379 169.75642395]
[88.95545959 154.68481445]
[89.92144012 139.71595764]
[90.88741302 124.74709320]
[84.89159393 120.24152374]
[76.86741638 132.91482544]
[74.15473175 147.66749573]
[60.18199539 153.12301636]
[48.19076157 144.11134338]
[49.54477310 129.17257690]
[62.95948410 122.46369171]
[72.89994812 111.23039246]
[66.90412903 106.72482300]
[52.79501724 111.81726074]
[38.68590164 116.90969849]
[24.57678795 122.00213623]
[16.48361015 135.85421753]
[0.58750832 138.02066040]
[-10.91738892 126.83956146]
[-9.20550823 110.88809967]
[4.40994120 102.40287781]
[19.48435211 107.89302063]
[33.59346771 102.80058289]
[47.70257950 97.70814514]
[61.81169510 92.61571503]
[68.02292633 78.96212006]
[62.59105301 64.98017883]
[57.15917206 50.99823761]
[51.72729492 37.01629257]
[46.29541779 23.03435326]
[36.25845718 11.88718033]
[22.92089653 5.02354765]
[7.10978746 5.58870792]
[-0.66653156 -7.11476088]
[-14.00409317 -13.97839355]
[-27.34165382 -20.84202576]
[-40.67921448 -27.70565796]
[-54.01677704 -34.56929016]
[-67.35433960 -41.43292236]
[-80.69190216 -48.29655457]
[-94.02946472 -55.16018677]
[-107.36702728 -62.02382278]
[-123.71195984 -60.69150162]
[-132.81442261 -74.33251190]
[-125.31056976 -88.91415405]
[-108.91973114 -89.43608856]
[-100.50339508 -75.36138153]
[-87.16583252 -68.49774933]
[-73.82826996 -61.63411713]
[-60.49070740 -54.77048492]
[-47.15314484 -47.90685272]
[-33.81558228 -41.04322052]
[-20.47802162 -34.17958832]
[-7.14046049 -27.31595421]
[6.19710112 -20.45232201]
[21.05421829 -21.50841522]
[29.78452873 -8.31401443]
[43.12208939 -1.45038152]
[49.18971634 -5.85877085]
[61.32497406 -14.67554951]
[67.39260101 -19.08393860]
[64.98643494 -33.88969421]
[62.58026123 -48.69544601]
[60.17409134 -63.50120163]
[57.76792526 -78.30695343]
[47.91711426 -90.68727112]
[53.51262283 -104.49087524]
[51.10645294 -119.29663086]
[48.70028305 -134.10238647]
[34.78607559 -140.97074890]
[27.59618759 -154.72157288]
[29.89527512 -170.06738281]
[40.79929733 -181.10739136]
[56.11542892 -183.59651184]
[69.95430756 -176.57760620]
[76.99460602 -162.74960327]
[74.52918243 -147.42962646]
[63.50603867 -136.50856018]
[65.91220856 -121.70279694]
[68.31837463 -106.89704132]
[77.99707794 -95.57573700]
[72.57367706 -80.71312714]
[74.97984314 -65.90737152]
[77.38601685 -51.10161591]
[79.79218292 -36.29586411]
[82.19835663 -21.49010849]
[96.96342468 -18.84572983]
[104.35853577 -31.89610481]
[111.75365448 -44.94647980]
[119.14877319 -57.99685287]
[126.54388428 -71.04722595]
[122.08956146 -86.21082306]
[129.73539734 -100.04255676]
[144.94523621 -104.33631134]
[158.69535828 -96.54467010]
[162.82806396 -81.29028320]
[154.89147949 -67.62330627]
[139.59425354 -63.65211105]
[132.19914246 -50.60173798]
[124.80403137 -37.55136490]
[117.40891266 -24.50098801]
[110.01379395 -11.45061493]
[87.31307220 15.49264240]
[60.27735901 17.60247421]
[65.70923615 31.58441734]
[71.14111328 45.56635666]
[76.57299042 59.54830170]
[82.00486755 73.53024292]
[103.63922882 66.83975983]
[125.27657318 76.20990753]
[139.86914062 72.73760986]
[154.46171570 69.26531219]
[162.77049255 56.08950424]
[177.61889648 52.77597427]
[190.12881470 60.77832794]
[204.72138977 57.30602646]
[219.31396484 53.83372498]
[233.90652466 50.36142731]
[247.91578674 40.81276703]
[260.96942139 51.63121414]
[254.18739319 67.16955566]
[237.37882996 64.95399475]
[222.78625488 68.42630005]
[208.19367981 71.89859772]
[193.60112000 75.37089539]
[186.03616333 88.15006256]
[171.28668213 91.87934875]
[157.93400574 83.85787964]
[143.34144592 87.33017731]
[128.74887085 90.80248260]
[126.58153534 105.64508057]
[139.57191467 113.14508057]
[152.56230164 120.64508057]
[169.36672974 115.80694580]
[184.18273926 124.44338226]
[188.09613037 140.79336548]
[201.20565796 148.08311462]
[214.31517029 155.37286377]
[227.42469788 162.66261292]
[240.53421021 169.95237732]
[253.64373779 177.24212646]
[270.42504883 179.65536499]
[272.75164795 196.44891357]
[257.25845337 203.33351135]
[246.35398865 190.35163879]
[233.24446106 183.06188965]
[220.13494873 175.77214050]
[207.02542114 168.48239136]
[193.91590881 161.19264221]
[180.80638123 153.90289307]
[169.02418518 159.13824463]
[156.18710327 156.58944702]
[147.03021240 146.96801758]
[145.06230164 133.63545227]
[132.07191467 126.13545990]
[119.08153534 118.63545990]
[105.85627747 125.71306610]
[104.89030457 140.68193054]
[103.92432404 155.65080261]
[111.84053802 165.84498596]
[110.71977997 178.30056763]
[101.70728302 186.38165283]
[100.50028229 201.33300781]
[99.29328918 216.28436279]
[98.08628845 231.23573303]
[96.87928772 246.18708801]
[103.48104858 260.56509399]
[94.74472046 272.62850952]
[93.53771973 287.57986450]
[92.33071899 302.53121948]
[91.12371826 317.48257446]
[89.91672516 332.43395996]
[103.11678314 340.09692383]
[111.67767334 352.73312378]
[113.89963531 367.83364868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 191]
[10 190]
[11 189]
[12 188]
[13 187]
[15 185]
[16 184]
[17 183]
[18 182]
[19 181]
[21 178]
[22 177]
[23 176]
[32 44]
[33 43]
[34 42]
[35 41]
[45 127]
[46 126]
[47 125]
[48 124]
[49 123]
[50 77]
[51 76]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[80 105]
[81 104]
[82 103]
[83 102]
[84 101]
[86 99]
[87 98]
[88 97]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[129 149]
[130 148]
[131 147]
[134 144]
[135 143]
[136 142]
[137 141]
[150 175]
[151 174]
[152 173]
[155 169]
[156 168]
[157 167]
[158 166]
[159 165]
[160 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
