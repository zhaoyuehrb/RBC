%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGAAACAACAACUGGAAAAGAAGCACUGCAUAAGACCAGGAUGUCUCUGAAAUGGAUGUCAGUCUUUCUGCUGAUGCAGCUCAGUUGUUACUUUAGCUCUGGGAGUUGUGGAAAGGUGCUGGUGUGGCCCACAGAAUACA\
) } def
/len { sequence length } bind def

/coor [
[13.55022335 171.06825256]
[9.06941509 156.75314331]
[8.70687103 141.75752258]
[12.49066353 127.24260712]
[20.12779045 114.33236694]
[31.02686119 104.02652740]
[44.34388733 97.12314606]
[59.04765320 94.15677643]
[73.99954987 95.35713959]
[88.03746796 100.62894440]
[76.13716888 91.49752808]
[64.23686981 82.36610413]
[52.33656693 73.23468018]
[40.43626785 64.10326385]
[28.53596687 54.97183990]
[16.63566780 45.84041977]
[4.73536730 36.70899963]
[0.23866101 36.29368210]
[-3.48689795 34.59987640]
[-6.12661600 32.04151917]
[-7.53848505 29.09312057]
[-7.75773096 26.22604370]
[-18.81689072 16.09218979]
[-34.38534546 16.60306740]
[-45.45654678 6.16835737]
[-45.84764481 -8.67693233]
[-56.90680695 -18.81078529]
[-67.96596527 -28.94463921]
[-85.38830566 -27.84276009]
[-97.99501801 -39.42628860]
[-98.35359192 -56.20607376]
[-109.63118744 -66.09626007]
[-120.90878296 -75.98645020]
[-139.01863098 -79.12085724]
[-144.07992554 -95.89038849]
[-155.57060242 -105.53220367]
[-167.06126404 -115.17401886]
[-178.55192566 -124.81583405]
[-190.04260254 -134.45764160]
[-200.90068054 -132.87896729]
[-210.61740112 -137.48164368]
[-216.04663086 -146.50547791]
[-215.58093262 -156.80560303]
[-226.64009094 -166.93946838]
[-237.69924927 -177.07331848]
[-248.75840759 -187.20716858]
[-259.81756592 -197.34101868]
[-270.87673950 -207.47486877]
[-281.93588257 -217.60873413]
[-297.41503906 -215.38836670]
[-310.67263794 -223.68115234]
[-315.44882202 -238.57147217]
[-309.48849487 -253.02859497]
[-295.60586548 -260.22628784]
[-280.35592651 -256.76602173]
[-270.93920898 -244.28164673]
[-271.80203247 -228.66789246]
[-260.74288940 -218.53404236]
[-249.68371582 -208.40017700]
[-238.62455750 -198.26632690]
[-227.56539917 -188.13247681]
[-216.50624084 -177.99862671]
[-205.44706726 -167.86477661]
[-186.34603882 -165.15783691]
[-180.40078735 -145.94831848]
[-168.91011047 -136.30650330]
[-157.41944885 -126.66468811]
[-145.92878723 -117.02287292]
[-134.43811035 -107.38105774]
[-122.31621552 -108.11219788]
[-112.65574646 -100.10773468]
[-111.01860046 -87.26404572]
[-99.74099731 -77.37385559]
[-88.46340179 -67.48367310]
[-75.80503845 -70.11579132]
[-63.77187729 -64.87680054]
[-56.87223434 -53.48395538]
[-57.83211136 -40.00379944]
[-46.77295303 -29.86994553]
[-35.71379089 -19.73609161]
[-20.89090729 -20.64033318]
[-9.53098488 -10.52070713]
[-8.68303776 5.03303051]
[2.37612224 15.16688347]
[13.86678886 24.80869865]
[25.76708984 33.94012070]
[37.66738892 43.07154083]
[49.56768799 52.20296097]
[61.46799088 61.33438492]
[73.36828613 70.46580505]
[85.26859283 79.59722900]
[97.16889191 88.72864532]
[103.63265228 72.11985779]
[121.59119415 60.96303558]
[136.36331177 58.35831070]
[148.61026001 48.34218216]
[162.48774719 53.75186920]
[177.25985718 51.14714813]
[192.03198242 48.54242325]
[206.80409241 45.93770218]
[221.57620239 43.33297729]
[236.34832764 40.72825623]
[250.89689636 32.02333832]
[263.28906250 43.59357834]
[255.60148621 58.70441818]
[238.95304871 55.50037384]
[224.18093872 58.10509491]
[209.40881348 60.70981979]
[194.63670349 63.31454086]
[179.86457825 65.91926575]
[165.09246826 68.52398682]
[153.90211487 78.35380554]
[138.96803284 73.13043213]
[124.19591522 75.73515320]
[122.01878357 82.91220093]
[132.27268982 93.86014557]
[117.66451263 97.26631165]
[115.48738098 104.44335938]
[126.32283783 114.81605530]
[134.75370789 118.52832794]
[137.27841187 125.53518677]
[147.88500977 136.14178467]
[158.49160767 146.74839783]
[174.47010803 148.18626404]
[183.18774414 161.65408325]
[177.95712280 176.82049561]
[162.79071045 182.05113220]
[149.32289124 173.33348083]
[147.88500977 157.35499573]
[137.27841187 146.74839783]
[126.67180634 136.14178467]
[115.95014191 125.65151978]
[105.11468506 115.27882385]
[112.46240234 128.35594177]
[115.92200470 142.95152283]
[115.22560120 157.93534851]
[110.42710114 172.14712524]
[101.89809418 184.48632812]
[90.29903412 193.99746704]
[76.52811432 199.94404602]
[61.65169525 201.86555481]
[46.82176208 199.61322021]
[33.18668365 193.36143494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[22 84]
[23 83]
[26 80]
[27 79]
[28 78]
[31 74]
[32 73]
[33 72]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[94 114]
[95 113]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
[102 106]
[118 133]
[119 132]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
