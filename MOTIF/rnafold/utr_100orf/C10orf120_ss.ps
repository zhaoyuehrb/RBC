%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGAACACCUCCCGUCCUAGCUUAUUGCCGGAGUAUGAUCAGAGAAUGGAAGAAUGACUGUCAGAGGAUUGAAAAACAGAGGGCUAGUGACACAAUGGUGCAAGAAAGGAAGAAUGAAAAGCCAGUUAGAAUAU\
) } def
/len { sequence length } bind def

/coor [
[249.92990112 422.42169189]
[250.64147949 407.41131592]
[253.53108215 392.66452026]
[258.53713989 378.49563599]
[265.55291748 365.20666504]
[274.42892456 353.08087158]
[284.97592163 342.37673950]
[275.93640137 330.40649414]
[266.89688110 318.43621826]
[257.85736084 306.46597290]
[241.91731262 308.85186768]
[226.85284424 302.86309814]
[216.78608704 290.03707886]
[214.52241516 273.79568481]
[220.76921082 258.53259277]
[211.45561218 246.77432251]
[202.14201355 235.01605225]
[192.69323730 223.36613464]
[183.11053467 211.82612610]
[173.52783203 200.28611755]
[163.94512939 188.74609375]
[154.36242676 177.20608521]
[144.77972412 165.66607666]
[135.19702148 154.12606812]
[121.11367798 149.27749634]
[118.25005341 133.71760559]
[108.66735077 122.17759705]
[99.08464813 110.63758850]
[88.35625458 100.15419769]
[76.59798431 90.84059906]
[67.51027679 94.77768707]
[57.66935349 95.08034515]
[48.46653748 91.74884033]
[41.18707275 85.29420471]
[36.83063889 76.66036224]
[35.97415924 67.08622742]
[38.69575119 57.92801285]
[27.84699059 47.56922913]
[16.99822807 37.21044922]
[8.55002308 33.50186157]
[6.02201128 26.48489761]
[-4.58459044 15.87829494]
[-15.19119167 5.27169371]
[-28.62515450 6.81798935]
[-40.31245041 0.41252995]
[-46.06553650 -11.39260960]
[-43.97230148 -24.15938187]
[-54.33108521 -35.00814438]
[-70.13495636 -35.12257767]
[-81.16941071 -46.43701172]
[-80.88789368 -62.23879242]
[-69.45742798 -73.15300751]
[-53.65950775 -72.70443726]
[-42.86675644 -61.15922165]
[-43.48232269 -45.36692810]
[-33.12353897 -34.51816559]
[-16.35006905 -34.87435913]
[-4.23992348 -22.78190422]
[-4.58459044 -5.33490801]
[6.02201128 5.27169371]
[16.62861252 15.87829494]
[27.35700989 26.36168671]
[38.20577240 36.72046661]
[49.05453491 47.07925034]
[69.28418732 44.75839233]
[84.99395752 58.16255951]
[85.91157532 79.08232880]
[97.66984558 88.39592743]
[95.03694153 73.62880707]
[100.65371704 59.72010803]
[112.80282593 50.92243195]
[127.76966858 49.92568207]
[140.97811890 57.03461075]
[148.38967896 70.07565308]
[147.73823547 85.06150055]
[139.22299194 97.41020966]
[125.44748688 103.34614563]
[110.62465668 101.05488586]
[120.20735931 112.59489441]
[129.79006958 124.13490295]
[144.55882263 129.80889893]
[146.73703003 144.54336548]
[156.31973267 156.08337402]
[165.90243530 167.62338257]
[175.48513794 179.16339111]
[185.06784058 190.70341492]
[194.65054321 202.24342346]
[204.23324585 213.78343201]
[212.19778442 218.44090271]
[213.90028381 225.70245361]
[223.21388245 237.46072388]
[232.52748108 249.21899414]
[246.29083252 246.46264648]
[259.82965088 249.90788269]
[270.49957275 258.82260132]
[276.24221802 271.41235352]
[275.98211670 285.18115234]
[269.82763672 297.42645264]
[278.86715698 309.39669800]
[287.90667725 321.36697388]
[296.94619751 333.33721924]
[310.12802124 326.12216187]
[324.21994019 320.90338135]
[338.92156982 317.79211426]
[353.91952515 316.85467529]
[368.89416504 318.11102295]
[383.52627563 321.53439331]
[397.50396729 327.05181885]
[410.52929688 334.54571533]
[422.32467651 343.85632324]
[432.63861084 354.78518677]
[441.25134277 367.09936523]
[447.97924805 380.53637695]
[452.67889404 394.80981445]
[455.25015259 409.61541748]
[455.63821411 424.63763428]
[453.83477783 439.55627441]
[449.87832642 454.05331421]
[443.85311890 467.81976318]
[435.88766479 480.56219482]
[426.15170288 492.00897217]
[414.85278320 501.91613770]
[402.23171997 510.07250977]
[388.55752563 516.30426025]
[374.12170410 520.47851562]
[359.23190308 522.50628662]
[344.20553589 522.34442139]
[329.36288452 519.99633789]
[315.02032471 515.51208496]
[301.48355103 508.98724365]
[289.04110718 500.56085205]
[277.95822144 490.41259766]
[268.47113037 478.75872803]
[260.78201294 465.84765625]
[255.05477905 451.95462036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 101]
[8 100]
[9 99]
[10 98]
[15 92]
[16 91]
[17 90]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[24 82]
[26 80]
[27 79]
[28 78]
[29 68]
[30 67]
[37 64]
[38 63]
[39 62]
[41 61]
[42 60]
[43 59]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
