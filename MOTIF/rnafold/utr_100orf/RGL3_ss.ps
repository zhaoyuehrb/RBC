%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGCCACCCGCCGGCCCUUCCGCCUCACUCAGCGGCGCCACUGAGAGGGACGGGCGCCGGCCAUGGAGCGCACAGCAGGCAAAGAGCUGGCCCUGGCACCGCUGCAGGACUGGGGUGAAGAGACCGAGGACGGCGCGGUGUACAGUGUCUCCCUGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[107.09073639 217.17962646]
[99.40097809 202.69517517]
[108.32820129 188.93882751]
[108.61378479 173.94155884]
[108.89936829 158.94427490]
[109.18495178 143.94699097]
[109.47052765 128.94970703]
[88.44593048 125.48248291]
[76.54576111 110.00645447]
[61.62792969 111.57437897]
[45.92251205 124.16417694]
[28.59015083 115.65199280]
[13.74283028 117.78671265]
[-1.10449171 119.92143250]
[-15.95181370 122.05615997]
[-30.79913521 124.19087982]
[-45.64645767 126.32560730]
[-51.68603516 135.44029236]
[-61.55241776 139.61674500]
[-71.86758423 137.68884277]
[-79.24315643 130.53701782]
[-94.16098785 132.10494995]
[-109.07881165 133.67286682]
[-123.99664307 135.24079895]
[-136.91244507 144.37821960]
[-150.37876892 138.01367188]
[-165.29660034 139.58160400]
[-180.21443176 141.14952087]
[-193.13023376 150.28695679]
[-206.59654236 143.92239380]
[-221.51437378 145.49032593]
[-236.43220520 147.05825806]
[-251.35003662 148.62617493]
[-266.26785278 150.19410706]
[-273.90948486 163.69911194]
[-288.04367065 170.10261536]
[-303.23550415 166.94232178]
[-313.64346313 155.43344116]
[-315.26541138 140.00137329]
[-307.47775269 126.58005524]
[-293.27493286 120.33026123]
[-278.11828613 123.65516663]
[-267.83578491 135.27627563]
[-252.91795349 133.70835876]
[-238.00013733 132.14042664]
[-223.08230591 130.57249451]
[-208.16447449 129.00457764]
[-196.31568909 119.97929382]
[-181.78234863 126.23169708]
[-166.86451721 124.66377258]
[-151.94670105 123.09584045]
[-140.09791565 114.07056427]
[-125.56456757 120.32296753]
[-110.64674377 118.75504303]
[-95.72891235 117.18711853]
[-80.81108856 115.61919403]
[-66.09244537 103.12000275]
[-47.78117752 111.47827911]
[-32.93385696 109.34355927]
[-18.08653641 107.20883942]
[-3.23921418 105.07411194]
[11.60810757 102.93939209]
[26.45542908 100.80467224]
[31.85402679 92.06379700]
[41.38248062 87.66744232]
[51.97139740 89.29934692]
[60.06000519 96.65654755]
[74.97782898 95.08862305]
[77.55160522 86.78224182]
[82.85620117 79.65925598]
[90.38429260 74.60674286]
[99.34472656 72.30377197]
[108.74518585 73.13235474]
[117.50198364 77.12041473]
[124.56495667 83.92484283]
[129.04307556 92.85797882]
[130.31564331 102.95613098]
[144.89280701 99.41974640]
[159.46998596 95.88336182]
[174.04716492 92.34697723]
[188.62432861 88.81059265]
[191.72444153 85.62429047]
[195.32225037 83.80202484]
[198.91853333 83.33085632]
[202.07125854 84.03408051]
[204.44494629 85.60491943]
[219.24893188 83.18791199]
[234.05291748 80.77089691]
[238.16003418 77.40403748]
[242.69621277 76.11045074]
[246.78833008 76.70108032]
[249.76898193 78.66378021]
[264.68679810 77.09584808]
[277.60260010 67.95842743]
[291.06893921 74.32297516]
[305.98675537 72.75505066]
[320.90457153 71.18712616]
[335.80682373 69.47724915]
[350.69207764 67.62558746]
[365.57736206 65.77393341]
[380.46261597 63.92227173]
[395.34790039 62.07061005]
[410.23318481 60.21894836]
[425.11843872 58.36729050]
[433.29165649 54.18555069]
[440.30441284 56.62486267]
[455.22222900 55.05693436]
[461.53707886 41.12602997]
[473.89541626 32.28475571]
[488.92001343 30.82610130]
[502.56616211 37.04214096]
[511.21044922 49.17233658]
[526.12829590 47.60441208]
[539.04406738 38.46698380]
[552.51037598 44.83153915]
[567.42822266 43.26361084]
[574.27459717 29.43860626]
[587.52020264 21.52931213]
[602.93847656 22.05955315]
[615.60943604 30.86013222]
[621.48986816 45.12281799]
[618.70330811 60.29643631]
[608.13897705 71.53914642]
[593.16790771 75.26343536]
[578.56732178 70.28089142]
[568.99615479 58.18143845]
[554.07830811 59.74936676]
[542.22955322 68.77464294]
[527.69622803 62.52223969]
[512.77838135 64.09016418]
[506.84497070 77.75254059]
[494.78942871 86.66993713]
[479.78988647 88.36694336]
[465.86340332 82.28831482]
[456.79016113 69.97476196]
[441.87234497 71.54269409]
[426.97012329 73.25256348]
[412.08483887 75.10422516]
[397.19955444 76.95588684]
[382.31430054 78.80754089]
[367.42901611 80.65920258]
[352.54373169 82.51086426]
[337.65847778 84.36252594]
[331.38046265 88.32680511]
[322.47250366 86.10494995]
[307.55468750 87.67287445]
[292.63684082 89.24080658]
[280.78808594 98.26608276]
[266.25473022 92.01367950]
[251.33689880 93.58160400]
[236.46992493 95.57489014]
[221.66593933 97.99189758]
[206.86195374 100.40890503]
[192.16072083 103.38776398]
[177.58354187 106.92414856]
[163.00636292 110.46053314]
[148.42919922 113.99691772]
[133.85202026 117.53330231]
[124.46781158 129.23529053]
[124.18222809 144.23257446]
[123.89664459 159.22985840]
[123.61106873 174.22714233]
[123.32548523 189.22441101]
[131.72251892 203.31063843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 163]
[4 162]
[5 161]
[6 160]
[7 159]
[9 68]
[10 67]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[21 56]
[22 55]
[23 54]
[24 53]
[26 51]
[27 50]
[28 49]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[77 158]
[78 157]
[79 156]
[80 155]
[81 154]
[86 153]
[87 152]
[88 151]
[92 150]
[93 149]
[95 147]
[96 146]
[97 145]
[98 143]
[99 142]
[100 141]
[101 140]
[102 139]
[103 138]
[104 137]
[106 136]
[107 135]
[112 130]
[113 129]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
