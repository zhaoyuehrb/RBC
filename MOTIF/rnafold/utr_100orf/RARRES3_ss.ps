%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUCUCCUUCAGCAUAAAAGCUGAUCCACAAACAAGAGGAGCACCAGACCUCCUCUUGGCUUCGAGAUGGCUUCGCCACACCAAGAGCCCAAACCUGGAGACCUGAUUGAGAUUUUCCGCCUUGGCUAUGAGCACUGGGCCCUGUAUAUAGGAGAUGGCUACGUGA\
) } def
/len { sequence length } bind def

/coor [
[76.49813843 256.58535767]
[77.18657684 241.44264221]
[83.01546478 227.44979858]
[93.28095245 216.29652405]
[106.74343109 209.32963562]
[104.79705811 194.45645142]
[102.85068512 179.58326721]
[100.90431213 164.71008301]
[98.95793915 149.83689880]
[97.01156616 134.96371460]
[82.59093475 130.83509827]
[73.06829834 142.42472839]
[63.54566574 154.01435852]
[54.02302933 165.60398865]
[44.50039673 177.19361877]
[46.28959656 192.89630127]
[36.38603210 205.21275330]
[20.66530800 206.83583069]
[8.45425415 196.80259705]
[6.99747086 181.06559753]
[17.15924263 168.96130371]
[32.91077042 167.67097473]
[42.43340302 156.08134460]
[51.95603561 144.49172974]
[61.47867203 132.90209961]
[71.00130463 121.31246948]
[68.47257996 114.25162506]
[54.55931854 119.85708618]
[44.51996994 131.00210571]
[29.80331039 128.10038757]
[24.74585342 113.97869873]
[34.27441406 102.39394379]
[49.10657883 104.63164520]
[63.41513062 100.12992859]
[60.88640594 93.06908417]
[46.17123413 90.15982819]
[31.45606613 87.25056458]
[16.74089813 84.34130859]
[2.02572799 81.43204498]
[-12.68944073 78.52278137]
[-27.40460968 75.61352539]
[-42.11978149 72.70426178]
[-56.83494949 69.79500580]
[-68.12528992 80.43962097]
[-83.52036285 82.38160706]
[-97.10044861 74.87422943]
[-103.64373779 60.80422211]
[-100.63418579 45.58179474]
[-89.22904205 35.06028366]
[-73.81380463 33.28541946]
[-60.31595612 40.93967438]
[-53.92568970 55.07983398]
[-39.21051788 57.98909378]
[-24.49534988 60.89835358]
[-9.78018093 63.80761719]
[4.93498850 66.71687317]
[19.65015793 69.62613678]
[34.36532593 72.53539276]
[49.08049774 75.44465637]
[63.79566574 78.35391998]
[73.63771820 67.03428650]
[68.71174622 52.86619949]
[63.78576660 38.69811249]
[58.85978699 24.53002167]
[42.69909286 22.81332588]
[28.94888115 14.25987148]
[20.32798004 0.62053490]
[18.51497650 -15.35421848]
[23.82159233 -30.46893311]
[35.14047623 -41.72235107]
[29.95199013 -55.79642868]
[24.76350594 -69.87050629]
[19.57501984 -83.94458008]
[8.42316914 -96.71456909]
[17.60696030 -110.96568298]
[33.84346390 -106.08589935]
[33.64909744 -89.13306427]
[38.83758163 -75.05899048]
[44.02606583 -60.98491287]
[49.21455383 -46.91083908]
[63.09374237 -46.26297379]
[75.71435547 -40.34869766]
[85.15171814 -30.03339386]
[89.95269012 -16.85635185]
[89.35935974 -2.80110431]
[83.42847443 10.00314045]
[73.02787781 19.60404587]
[77.95385742 33.77213287]
[82.87982941 47.94022369]
[87.80580902 62.10831070]
[95.09061432 63.89201736]
[97.56020355 49.09671021]
[97.54742432 34.09671402]
[109.38441467 24.88337135]
[123.92237091 28.57767105]
[129.92491150 42.32428741]
[122.75314331 55.49813461]
[116.50737762 69.13596344]
[123.79218292 70.91967010]
[135.81169128 61.94572830]
[147.83119202 52.97179031]
[159.85069275 43.99785233]
[171.87019348 35.02391434]
[178.72276306 17.95243263]
[196.19659424 16.52825165]
[208.04721069 7.33244371]
[211.47346497 -8.34047318]
[225.92640686 -15.30409813]
[240.31896973 -8.21653366]
[243.61041260 7.48524714]
[233.27583313 19.75618172]
[217.24301147 19.18305969]
[205.39239502 28.37886810]
[203.55708313 40.36100006]
[193.72412109 48.11623383]
[180.84413147 47.04341888]
[168.82463074 56.01735687]
[156.80513000 64.99129486]
[144.78562927 73.96523285]
[132.76611328 82.93917084]
[136.22033691 97.53603363]
[150.98703003 100.17126465]
[165.75373840 102.80648804]
[180.52044678 105.44171906]
[194.66297913 95.17858887]
[211.52433777 98.23888397]
[220.78607178 112.25481415]
[235.59919739 114.61509705]
[250.41233826 116.97538757]
[267.00555420 113.49668884]
[274.94177246 128.47845459]
[262.74246216 140.25186157]
[248.05206299 131.78852844]
[233.23892212 129.42823792]
[218.42578125 127.06794739]
[209.13453674 136.02937317]
[196.18315125 138.02040100]
[184.28039551 132.08985901]
[177.88522339 120.20841980]
[163.11851501 117.57319641]
[148.35180664 114.93796539]
[133.58509827 112.30273438]
[128.16001892 117.48138428]
[139.85562134 126.87355042]
[154.47853088 130.21580505]
[161.46102905 143.49151611]
[155.92935181 157.43428040]
[141.74461365 162.31205750]
[128.80770874 154.72018433]
[126.14852905 139.95799255]
[117.30983734 127.83868408]
[111.88475037 133.01733398]
[113.83112335 147.89051819]
[115.77749634 162.76370239]
[117.72386932 177.63688660]
[119.67024231 192.51007080]
[121.61661530 207.38325500]
[136.41848755 210.65135193]
[149.20828247 218.78750610]
[158.44155884 230.80924988]
[163.00337219 245.26489258]
[162.34284973 260.40884399]
[156.53974915 274.41241455]
[146.29483032 285.58459473]
[132.84521484 292.57629395]
[117.81501770 294.54321289]
[103.01919556 291.24783325]
[90.24441528 283.08813477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 157]
[6 156]
[7 155]
[8 154]
[9 153]
[10 152]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[61 90]
[62 89]
[63 88]
[64 87]
[70 80]
[71 79]
[72 78]
[73 77]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[105 113]
[106 112]
[121 142]
[122 141]
[123 140]
[124 139]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
