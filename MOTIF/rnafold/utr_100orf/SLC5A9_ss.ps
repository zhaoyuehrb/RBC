%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCCAGGAGCGCCUCAAAGUCCAGCCUGCUGUUGACCAACACUAACAGAUGAGCAAGGAGCUGGCAGCAAUGGGGCCUGGAGCUUCAGGGGACGGGGUCAGGACUGAGACAGCUCCACACAUAGCACUGGACUCCAGAGUUGGUCUGC\
) } def
/len { sequence length } bind def

/coor [
[128.91473389 263.20373535]
[128.84481812 259.13940430]
[130.23550415 254.87730408]
[126.57680511 240.33035278]
[113.70190430 232.92950439]
[109.78422546 218.22894287]
[117.63420868 204.77473450]
[113.97550201 190.22778320]
[110.31679535 175.68083191]
[106.65808868 161.13388062]
[96.41419220 154.62812805]
[93.27278137 142.49128723]
[99.45700073 131.12648010]
[96.09774017 116.50746918]
[86.33847046 105.11639404]
[72.40775299 99.55445862]
[58.47703552 93.99252319]
[44.54631805 88.43058014]
[30.61560249 82.86864471]
[16.68488693 77.30670929]
[2.30573821 83.29652405]
[-11.74275684 77.45747375]
[-17.36451340 63.71224594]
[-31.29523087 58.15030670]
[-45.33720779 52.87556458]
[-59.48452377 47.89024353]
[-73.63183594 42.90492249]
[-87.77915955 37.91959763]
[-101.92647552 32.93427658]
[-116.12422180 28.09446144]
[-130.37091064 23.40065956]
[-153.58093262 31.05025482]
[-169.52359009 13.45320797]
[-184.29570007 10.84848499]
[-199.06781006 8.24376297]
[-213.83993530 5.63903999]
[-228.61204529 3.03431726]
[-243.38417053 0.42959452]
[-254.45225525 11.30512524]
[-269.80392456 13.56465530]
[-283.53616333 6.33935022]
[-290.36865234 -7.59251308]
[-287.67413330 -22.87384987]
[-276.48873901 -33.62867355]
[-261.11343384 -35.72153473]
[-247.46038818 -28.34768486]
[-240.77944946 -14.34252167]
[-226.00732422 -11.73779869]
[-211.23521423 -9.13307667]
[-196.46308899 -6.52835369]
[-181.69097900 -3.92363119]
[-166.91886902 -1.31890845]
[-163.16268921 -6.23104525]
[-158.13253784 -9.89697456]
[-152.22970581 -11.99572277]
[-145.93330383 -12.33248043]
[-139.76138306 -10.85645485]
[-134.22828674 -7.66695929]
[-129.80186462 -3.00706172]
[-126.86386108 2.75481486]
[-125.67711639 9.15396786]
[-111.43042755 13.84776878]
[-104.04781342 12.94819736]
[-96.94114685 18.78696060]
[-82.79383087 23.77228355]
[-68.64651489 28.75760460]
[-54.49920273 33.74292755]
[-40.35188293 38.72824860]
[-35.68362045 37.48063660]
[-30.18416977 39.19641495]
[-25.73329353 44.21958923]
[-11.80257607 49.78152847]
[1.74002588 43.68780136]
[15.94698524 49.12994766]
[22.24682426 63.37599182]
[36.17753983 68.93792725]
[50.10825729 74.49987030]
[64.03897095 80.06180573]
[77.96968842 85.62374115]
[91.90040588 91.18567657]
[98.03573608 82.35724640]
[111.72179413 79.59418488]
[124.55545044 71.82904816]
[137.38909912 64.06391144]
[150.22276306 56.29877472]
[163.05641174 48.53364182]
[175.89006042 40.76850510]
[188.72372437 33.00336838]
[201.31216431 24.84670448]
[213.64344788 16.30624580]
[225.97473145 7.76578617]
[238.30601501 -0.77467293]
[240.93109131 -19.48821831]
[256.10421753 -30.21003723]
[273.99752808 -26.56212616]
[285.96777344 -35.60164642]
[297.93804932 -44.64116669]
[306.93420410 -59.01145935]
[323.23327637 -54.34495926]
[323.26119995 -37.39103317]
[306.97756958 -32.67090607]
[295.00729370 -23.63138771]
[283.03704834 -14.59186840]
[283.94332886 -3.14679456]
[279.13693237 7.41188145]
[269.71725464 14.38766289]
[257.97741699 15.93731499]
[246.84646606 11.55661106]
[234.51518250 20.09707069]
[222.18389893 28.63752937]
[209.85261536 37.17798615]
[208.87576294 40.62660599]
[206.14372253 43.75798798]
[201.83160400 45.73567581]
[196.48886108 45.83702469]
[183.65519714 53.60215759]
[170.82154846 61.36729431]
[157.98789978 69.13243103]
[145.15423584 76.89756775]
[132.32058716 84.66269684]
[119.48693085 92.42783356]
[134.07891846 88.95310211]
[147.23402405 96.16027832]
[152.16021729 110.32829285]
[146.31410217 124.14215851]
[132.71405029 130.46975708]
[118.38178253 126.04412842]
[110.71675110 113.14820862]
[114.07601166 127.76721954]
[126.92900085 140.91374207]
[121.20504761 157.47517395]
[124.86375427 172.02212524]
[128.52246094 186.56907654]
[132.18116760 201.11604309]
[145.46218872 209.25556946]
[148.96540833 224.06037903]
[141.12376404 236.67164612]
[144.78245544 251.21859741]
[149.03530884 265.60308838]
[153.87512207 279.80084229]
[158.71493530 293.99859619]
[163.55476379 308.19631958]
[177.26019287 316.53543091]
[179.14259338 332.46768188]
[167.75794983 343.77117920]
[151.83958435 341.77490234]
[143.59869385 328.01019287]
[149.35700989 313.03616333]
[144.51719666 298.83840942]
[139.67736816 284.64065552]
[134.83755493 270.44290161]
[132.31564331 269.08975220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 138]
[4 137]
[7 134]
[8 133]
[9 132]
[10 131]
[13 129]
[14 128]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[23 72]
[24 71]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 62]
[31 61]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[82 121]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[88 115]
[89 111]
[90 110]
[91 109]
[92 108]
[95 103]
[96 102]
[97 101]
[139 151]
[140 150]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
