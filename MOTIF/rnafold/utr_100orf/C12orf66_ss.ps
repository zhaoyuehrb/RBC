%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCCGGAAGUGCGAGGCCGAGGAGAGCCACGUGGGUCGAGCUGGGGCGCAGCUCGCAUGGGGGAGUCUAUCCCGCUGGCCGCCCCGGUCCCGGUGGAACAGGCGGUGCUGGAGACGUUCUUCUCUCACCUGGGUAUCUUCUCUUACGACAAGGCUA\
) } def
/len { sequence length } bind def

/coor [
[81.60999298 296.65393066]
[80.92932892 302.97180176]
[78.50185394 308.80038452]
[74.54776001 313.67068481]
[69.40904236 317.19793701]
[63.51998138 319.11184692]
[57.37047195 319.27740479]
[50.82433319 332.77362061]
[56.23844528 347.62161255]
[49.49203491 361.91363525]
[34.58762741 367.17044067]
[20.36774635 360.27331543]
[15.26879215 345.31414795]
[22.31588554 331.16799927]
[37.32810974 326.22747803]
[43.87424850 312.73126221]
[39.00564194 289.49819946]
[58.86434937 275.26339722]
[63.49960327 260.99752808]
[68.13485718 246.73168945]
[72.77011108 232.46583557]
[76.12843323 217.84661865]
[78.18361664 202.98808289]
[80.23880768 188.12953186]
[82.29399109 173.27099609]
[84.34917450 158.41246033]
[86.40435791 143.55392456]
[88.45954132 128.69537354]
[69.92551422 107.22024536]
[76.68994904 79.67148590]
[68.11312866 67.36546326]
[59.53631210 55.05944443]
[50.95949173 42.75342178]
[43.44493866 37.46738052]
[42.33787537 30.12052727]
[34.00432205 17.64848328]
[25.67076874 5.17643929]
[17.33721542 -7.29560518]
[13.26498508 -9.11593342]
[10.30913544 -11.87826252]
[8.63034534 -15.10516453]
[8.21383095 -18.31676102]
[8.88434124 -21.08944321]
[1.55502248 -34.17688370]
[-5.77429628 -47.26432419]
[-13.10361481 -60.35176086]
[-20.43293381 -73.43920135]
[-27.76225281 -86.52664185]
[-35.09157181 -99.61408234]
[-42.42089081 -112.70152283]
[-49.75020981 -125.78896332]
[-55.29714966 -129.53865051]
[-57.71541977 -134.75369263]
[-57.09881592 -139.53724670]
[-63.90867233 -152.90234375]
[-70.71852875 -166.26744080]
[-83.87766266 -175.05082703]
[-82.76174164 -189.90356445]
[-89.57159424 -203.26866150]
[-93.40164185 -205.55500793]
[-96.01232910 -208.64561462]
[-97.30020142 -212.04747009]
[-97.33634186 -215.28576660]
[-96.34458923 -217.96041870]
[-102.08483887 -231.81860352]
[-107.82508850 -245.67680359]
[-113.56534576 -259.53500366]
[-127.77729034 -266.97811890]
[-130.67742920 -282.75686646]
[-120.04102325 -294.76712036]
[-104.02741241 -293.79565430]
[-94.92086792 -280.58770752]
[-99.70715332 -265.27523804]
[-93.96689606 -251.41705322]
[-88.22664642 -237.55886841]
[-82.48639679 -223.70066833]
[-76.20649719 -210.07852173]
[-69.39664459 -196.71342468]
[-56.72459412 -188.88600159]
[-57.35343552 -173.07730103]
[-50.54357529 -159.71220398]
[-43.73371887 -146.34710693]
[-36.66276932 -133.11828613]
[-29.33344841 -120.03083801]
[-22.00413132 -106.94340515]
[-14.67481232 -93.85596466]
[-7.34549332 -80.76852417]
[-0.01617469 -67.68108368]
[7.31314373 -54.59363937]
[14.64246273 -41.50620270]
[21.97178078 -28.41876030]
[29.80925941 -15.62915802]
[38.14281464 -3.15711427]
[46.47636795 9.31492996]
[54.80992126 21.78697395]
[63.26551437 34.17660522]
[71.84233093 46.48262405]
[80.41915131 58.78864670]
[88.99597168 71.09466553]
[95.22505188 69.44174957]
[101.66143799 69.11559296]
[108.02569580 70.13037109]
[114.04149628 72.44200897]
[119.44765472 75.95014191]
[124.00943756 80.50247192]
[127.52878571 85.90132904]
[129.85290527 91.91231537]
[144.85002136 91.61781311]
[159.84712219 91.32331085]
[174.84423828 91.02880096]
[180.76597595 87.90441895]
[186.50520325 88.23005676]
[190.43324280 91.02880096]
[205.43035889 91.32331085]
[220.42745972 91.61781311]
[235.42457581 91.91231537]
[250.42167664 92.20682526]
[261.63912964 81.07377625]
[277.44274902 81.21699524]
[288.45657349 92.55151367]
[288.14627075 108.35275269]
[276.69595337 119.24612427]
[260.89889526 118.76879120]
[250.12718201 107.20393372]
[235.13006592 106.90942383]
[220.13296509 106.61492157]
[205.13584900 106.32041931]
[190.13873291 106.02590942]
[175.13873291 106.02590942]
[160.14163208 106.32041931]
[145.14451599 106.61492157]
[130.14741516 106.90942383]
[128.46151733 112.10573578]
[125.88768768 116.92436981]
[122.50623322 121.21500397]
[118.42263031 124.84378052]
[113.76428223 127.69749451]
[108.67652893 129.68711853]
[103.31808472 130.75056458]
[101.26290131 145.60910034]
[99.20771790 160.46763611]
[97.15252686 175.32618713]
[95.09734344 190.18472290]
[93.04216003 205.04325867]
[90.98697662 219.90180969]
[102.14652252 209.87860107]
[116.93043518 207.34169006]
[130.79312134 213.07109070]
[139.47222900 225.30517578]
[140.29919434 240.28236389]
[133.01977539 253.39762878]
[119.87213898 260.61840820]
[104.89879608 259.72457886]
[92.70358276 250.99092102]
[87.03596497 237.10108948]
[82.40070343 251.36694336]
[77.76544952 265.63278198]
[73.13019562 279.89865112]
[77.56621552 284.61672974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[18 158]
[19 157]
[20 156]
[21 155]
[22 145]
[23 144]
[24 143]
[25 142]
[26 141]
[27 140]
[28 139]
[30 99]
[31 98]
[32 97]
[33 96]
[35 95]
[36 94]
[37 93]
[38 92]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[51 83]
[54 82]
[55 81]
[56 80]
[58 78]
[59 77]
[64 76]
[65 75]
[66 74]
[67 73]
[107 132]
[108 131]
[109 130]
[110 129]
[113 128]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
