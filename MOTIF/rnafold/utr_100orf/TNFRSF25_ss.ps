%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCCUGCGGGCGCGGGGCUGAAGGCGGAACCACGACGGGCAGAGAGCACGGAGCCGGGAAGCCCCUGGGCGCCCGUCGGAGGGCUAUGGAGCAGCGGCCGCGGGGCUGCGCGGCGGUGGCGGCGGCGCUCCUCCUGGUGCUGCUGGGGGCCCGGGCCCAGGGCGGCACUCGUAGCCCCAGGUGUG\
) } def
/len { sequence length } bind def

/coor [
[85.65039062 198.37942505]
[85.65039062 183.37942505]
[77.91309357 170.65214539]
[85.65039062 156.85197449]
[85.65039062 141.85197449]
[85.65039062 126.85197449]
[74.57019806 116.74112701]
[59.63284302 118.11054230]
[44.69548416 119.47996521]
[29.77002144 120.97348785]
[14.85748863 122.59099579]
[-0.05504495 124.20850372]
[-14.96757889 125.82601929]
[-29.88011169 127.44352722]
[-44.79264450 129.06103516]
[-59.70517731 130.67855835]
[-74.57275391 132.66734314]
[-89.38612366 135.02616882]
[-104.19949341 137.38499451]
[-119.01286316 139.74383545]
[-133.82623291 142.10266113]
[-148.63960266 144.46148682]
[-156.09274292 159.63519287]
[-170.97059631 167.30671692]
[-187.32658386 164.63235474]
[-198.75482178 152.86000061]
[-213.52694702 155.46472168]
[-228.29905701 158.06945801]
[-229.89923096 165.23208618]
[-233.21249390 171.75614929]
[-238.02297974 177.24060059]
[-244.02311707 181.35127258]
[-250.83332825 183.84135437]
[-258.02609253 184.56610107]
[-265.15264893 183.49125671]
[-271.77117920 180.69447327]
[-277.47396851 176.35984802]
[-281.91271973 170.76577759]
[-284.81976318 164.26719666]
[-299.80682373 164.89035034]
[-313.27365112 173.19429016]
[-326.31137085 165.99240112]
[-341.29840088 166.61555481]
[-353.17587280 177.40005493]
[-368.98934937 174.69578552]
[-376.60812378 160.57722473]
[-370.18771362 145.87492371]
[-354.65328979 141.86723328]
[-341.92156982 151.62849426]
[-326.93450928 151.00535583]
[-314.53967285 142.74598694]
[-300.42996216 149.90330505]
[-285.44293213 149.28015137]
[-271.92648315 130.58909607]
[-248.75740051 127.88342285]
[-230.90377808 143.29733276]
[-216.13166809 140.69261169]
[-201.35955811 138.08789062]
[-196.63995361 125.58801270]
[-186.27398682 116.98718262]
[-172.90457153 114.61741638]
[-160.00987244 119.20397949]
[-150.99842834 129.64811707]
[-136.18505859 127.28929138]
[-121.37168884 124.93045807]
[-106.55831909 122.57163239]
[-91.74494934 120.21279907]
[-76.93157959 117.85397339]
[-74.57077789 115.21102905]
[-70.80467224 113.58922577]
[-66.13140106 113.64008331]
[-61.32268906 115.76602173]
[-46.41015625 114.14850616]
[-31.49762344 112.53099823]
[-16.58509064 110.91348267]
[-1.67255652 109.29597473]
[13.23997688 107.67845917]
[28.15250969 106.06095123]
[34.47531128 102.20670319]
[43.32606125 104.54261017]
[58.26342010 103.17318726]
[73.20078278 101.80376434]
[91.11766815 78.64539337]
[114.56781006 87.19347382]
[128.78672791 82.41617584]
[143.00563049 77.63887787]
[157.22454834 72.86157990]
[171.44345093 68.08427429]
[185.66236877 63.30697632]
[199.88127136 58.52967834]
[211.83825684 49.47261047]
[220.28805542 37.07902908]
[228.73786926 24.68544960]
[237.18766785 12.29186726]
[245.63746643 -0.10171454]
[247.89274597 -8.97335529]
[254.33213806 -12.62947369]
[262.98675537 -24.88089561]
[264.62960815 -40.61657715]
[278.29244995 -46.54748917]
[286.94708252 -58.79891205]
[295.60171509 -71.05033112]
[304.25634766 -83.30175781]
[312.91098022 -95.55317688]
[310.44677734 -106.17182159]
[314.16699219 -116.18401337]
[322.61236572 -122.35750580]
[332.84228516 -122.84252930]
[341.89935303 -134.79951477]
[350.95639038 -146.75650024]
[360.01345825 -158.71348572]
[369.07052612 -170.67047119]
[373.81454468 -186.94717407]
[390.76840210 -186.89439392]
[395.41101074 -170.58848572]
[381.02752686 -161.61340332]
[371.97045898 -149.65641785]
[362.91339111 -137.69943237]
[353.85632324 -125.74244690]
[344.79925537 -113.78546143]
[343.82553101 -94.48480225]
[325.16241455 -86.89854431]
[316.50778198 -74.64712524]
[307.85314941 -62.39569855]
[299.19851685 -50.14427948]
[290.54388428 -37.89285660]
[289.52008057 -23.03347969]
[275.23818970 -16.22626305]
[266.58355713 -3.97484088]
[258.03103638 8.34808636]
[249.58123779 20.74166870]
[241.13143921 33.13525009]
[232.68164062 45.52883148]
[224.23184204 57.92241287]
[226.14286804 65.17485809]
[240.64782715 61.35305786]
[244.46939087 75.85807800]
[229.96490479 79.67975616]
[231.87593079 86.93220520]
[245.33590698 93.55255127]
[258.79586792 100.17290497]
[272.25585938 106.79325867]
[285.71582031 113.41360474]
[299.17581177 120.03395844]
[312.63577271 126.65430450]
[326.09576416 133.27465820]
[339.55572510 139.89500427]
[354.35421753 135.03265381]
[367.91024780 141.93838501]
[372.45455933 156.07644653]
[385.91452026 162.69679260]
[399.37451172 169.31713867]
[412.83447266 175.93750000]
[429.15252686 174.30863953]
[438.50115967 187.78215027]
[431.26327515 202.49761963]
[414.88461304 203.31704712]
[406.21414185 189.39747620]
[392.75415039 182.77711487]
[379.29418945 176.15676880]
[365.83419800 169.53642273]
[351.86175537 174.56692505]
[338.11709595 168.04469299]
[332.93539429 153.35498047]
[319.47540283 146.73463440]
[306.01544189 140.11428833]
[292.55545044 133.49392700]
[279.09548950 126.87358093]
[265.63549805 120.25323486]
[252.17553711 113.63288116]
[238.71556091 107.01252747]
[225.25558472 100.39218140]
[208.61904907 88.31919861]
[204.65856934 72.74858856]
[190.43966675 77.52588654]
[176.22074890 82.30318451]
[162.00184631 87.08049011]
[147.78292847 91.85778809]
[133.56402588 96.63508606]
[119.34511566 101.41238403]
[118.49365234 111.70084381]
[112.01364899 121.20546722]
[100.65039062 126.85197449]
[100.65039062 141.85197449]
[100.65039062 156.85197449]
[108.38769531 170.65214539]
[100.65039062 183.37942505]
[100.65039062 198.37942505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 188]
[2 187]
[4 185]
[5 184]
[6 183]
[7 82]
[8 81]
[9 80]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[26 58]
[27 57]
[28 56]
[39 53]
[40 52]
[42 50]
[43 49]
[84 180]
[85 179]
[86 178]
[87 177]
[88 176]
[89 175]
[90 174]
[91 134]
[92 133]
[93 132]
[94 131]
[95 130]
[97 129]
[98 128]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
[139 172]
[140 171]
[141 170]
[142 169]
[143 168]
[144 167]
[145 166]
[146 165]
[147 164]
[150 161]
[151 160]
[152 159]
[153 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
