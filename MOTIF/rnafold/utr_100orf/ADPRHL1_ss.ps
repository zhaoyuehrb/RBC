%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCACUAUAAAAGUCAGGCGGGCUGAGGAGGAGACAAAGGCCAGGACGCUCCGCAGCUGUUGGGGAAGAGGAGCUGCCUCCUGGGAUGGAGAAAUUUAAGGCUGCGAUGUUGCUGGGGAGCGUCGGCGAUGCUCUUGGCUACAGAAAUGUCUGCAAGGAGAACAGCACUGUAGGCAUGAAGAUCC\
) } def
/len { sequence length } bind def

/coor [
[145.40846252 147.10826111]
[153.69195557 159.61361694]
[156.92692566 174.26062012]
[154.68098450 189.09153748]
[147.25434875 202.12399292]
[135.63964844 211.61604309]
[121.38937378 216.29893494]
[106.40824890 215.54676819]
[92.69868469 209.46006775]
[82.09316254 198.85238647]
[76.00923920 185.14158630]
[75.26010895 170.16030884]
[79.94589996 155.91098022]
[89.43923950 144.29911804]
[92.93576813 129.71234131]
[96.43230438 115.12555695]
[86.37052917 126.25033569]
[76.30876160 137.37512207]
[66.24698639 148.49989319]
[65.61161804 164.53036499]
[52.59756470 173.91194153]
[37.18809509 169.44789124]
[31.20403671 154.56263733]
[39.23584747 140.67488098]
[55.12220764 138.43812561]
[65.18397522 127.31334686]
[75.24575043 116.18856812]
[85.30751801 105.06378174]
[71.14398193 110.00283051]
[58.40287018 117.91889191]
[43.52604675 119.83727264]
[29.19355583 115.41237640]
[17.98737526 105.44134521]
[11.92628384 91.72043610]
[12.10217857 76.72147369]
[18.48337173 63.14648056]
[29.92030144 53.44098663]
[44.35261917 49.35341644]
[59.18036270 51.62014389]
[71.73233032 59.83282471]
[79.74781036 72.51332855]
[90.34042358 83.13389587]
[86.13629913 68.73509979]
[81.93218231 54.33629990]
[77.40406036 49.47483826]
[76.20606232 43.89386749]
[77.83681488 39.38578033]
[74.11617279 24.85454369]
[70.39553833 10.32330513]
[66.67490387 -4.20793247]
[62.95426559 -18.73917007]
[59.23363113 -33.27040863]
[55.51299286 -47.80164337]
[51.79235840 -62.33288193]
[40.87382889 -73.78260803]
[45.21242905 -88.03132629]
[41.49179077 -102.56256104]
[37.77115631 -117.09379578]
[34.05051804 -131.62503052]
[19.31578445 -145.36279297]
[25.28138924 -163.74357605]
[21.07727051 -178.14237976]
[16.87315178 -192.54116821]
[12.66903210 -206.93997192]
[1.37400532 -218.01846313]
[5.23406219 -232.40419006]
[1.02994287 -246.80299377]
[-13.80405045 -250.53125000]
[-24.70822716 -261.11404419]
[-28.82387543 -275.63739014]
[-25.14202690 -290.17355347]
[-14.74856758 -300.84323120]
[-18.95268631 -315.24200439]
[-23.15680695 -329.64080811]
[-35.39929581 -332.27859497]
[-45.29632950 -339.83377075]
[-51.00164032 -350.81954956]
[-51.48398590 -363.11676025]
[-46.71303940 -374.38259888]
[-37.65345001 -382.49691772]
[-41.37408829 -397.02816772]
[-45.09472275 -411.55941772]
[-48.81536102 -426.09063721]
[-62.53941345 -433.92810059]
[-66.62120056 -449.19619751]
[-58.63906479 -462.83660889]
[-43.32867432 -466.75674438]
[-29.77340508 -458.63085938]
[-26.01536179 -443.27987671]
[-34.28412247 -429.81127930]
[-30.56348610 -415.28002930]
[-26.84284973 -400.74880981]
[-23.12221336 -386.21755981]
[-6.43346262 -380.49008179]
[3.57692218 -365.77017212]
[2.75538874 -347.83074951]
[-8.75800800 -333.84494019]
[-4.55388880 -319.44613647]
[-0.34976962 -305.04733276]
[14.15195084 -301.64651489]
[25.07700348 -291.37521362]
[29.42271614 -276.91903687]
[25.92609215 -262.13153076]
[15.42874050 -251.00711060]
[19.63286018 -236.60830688]
[30.62718010 -226.55972290]
[27.06782913 -211.14408875]
[31.27194977 -196.74528503]
[35.47606659 -182.34649658]
[39.68018723 -167.94769287]
[49.06740952 -163.85009766]
[54.76004410 -155.07197571]
[54.66877747 -144.39015198]
[48.58175659 -135.34567261]
[52.30239105 -120.81443024]
[56.02302933 -106.28319550]
[59.74366379 -91.75196075]
[70.39607239 -81.34160614]
[66.32359314 -66.05352020]
[70.04423523 -51.52228165]
[73.76486969 -36.99104309]
[77.48550415 -22.45980644]
[81.20613861 -7.92856836]
[84.92677307 6.60266924]
[88.64741516 21.13390732]
[92.36804962 35.66514587]
[96.33097839 50.13218307]
[100.53510284 64.53098297]
[104.73921967 78.92977905]
[126.80278015 99.48321533]
[139.44616699 107.55445099]
[152.08955383 115.62568665]
[167.33573914 112.43328857]
[180.04295349 120.79877472]
[182.99246216 135.35336304]
[195.63583374 143.42460632]
[211.43119812 144.32852173]
[217.99562073 157.69854736]
[230.63900757 165.76979065]
[246.43437195 166.67370605]
[252.99877930 180.04373169]
[265.64215088 188.11497498]
[278.28555298 196.18620300]
[290.92892456 204.25744629]
[303.57232666 212.32867432]
[316.21569824 220.39991760]
[330.60131836 214.88992310]
[345.30117798 218.86076355]
[354.73263550 230.58729553]
[355.44204712 245.44107056]
[368.08541870 253.51231384]
[380.72882080 261.58355713]
[393.43917847 269.54885864]
[406.21566772 277.40771484]
[421.52938843 273.50061035]
[435.07775879 281.63803101]
[438.82272339 296.99221802]
[430.54248047 310.45376587]
[415.14959717 314.03619385]
[401.77633667 305.61410522]
[398.35684204 290.18417358]
[385.58035278 282.32534790]
[378.22113037 281.49722290]
[372.65756226 274.22692871]
[360.01419067 266.15570068]
[347.37081909 258.08447266]
[333.59848022 263.69345093]
[318.99139404 260.07437134]
[309.20181274 248.41171265]
[308.14447021 233.04328918]
[295.50106812 224.97206116]
[282.85769653 216.90081787]
[270.21432495 208.82958984]
[257.57092285 200.75836182]
[244.92755127 192.68711853]
[230.03651428 192.36050415]
[222.56776428 178.41316223]
[209.92437744 170.34193420]
[195.03335571 170.01531982]
[187.56460571 156.06797791]
[174.92121887 147.99674988]
[160.47734070 151.44781494]
[147.54017639 143.44253540]
[144.01831055 128.26907349]
[131.37492371 120.19783020]
[118.73154449 112.12659454]
[125.95760345 125.27133179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 28]
[17 27]
[18 26]
[19 25]
[42 129]
[43 128]
[44 127]
[47 126]
[48 125]
[49 124]
[50 123]
[51 122]
[52 121]
[53 120]
[54 119]
[56 117]
[57 116]
[58 115]
[59 114]
[61 110]
[62 109]
[63 108]
[64 107]
[66 105]
[67 104]
[72 99]
[73 98]
[74 97]
[80 93]
[81 92]
[82 91]
[83 90]
[130 186]
[131 185]
[132 184]
[135 181]
[136 180]
[138 178]
[139 177]
[141 175]
[142 174]
[143 173]
[144 172]
[145 171]
[146 170]
[150 166]
[151 165]
[152 164]
[153 162]
[154 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
