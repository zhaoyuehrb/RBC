%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGUGUCUGUGGCGUCUCAUGGCAGGAGGCUCAGCCACGACCUGGGGUUACCCUGUGGCCCUGCUACUGCUGGUUGCCACCCUGGGGCUGGGUAGGUGGCUCCAGCCCGACCCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[104.33562469 191.14578247]
[102.39382172 176.27200317]
[100.45201874 161.39822388]
[98.51021576 146.52444458]
[81.86793518 142.87156677]
[67.65505981 133.47457886]
[57.77589417 119.59254456]
[43.32985306 123.63134003]
[28.88381195 127.67013550]
[21.35339928 133.05647278]
[14.01016808 131.62104797]
[-0.53585428 135.28346252]
[-15.08187675 138.94586182]
[-29.62789917 142.60827637]
[-44.17391968 146.27067566]
[-58.56631470 150.49667358]
[-72.78325653 155.27983093]
[-87.00019836 160.06298828]
[-101.21713257 164.84614563]
[-115.43407440 169.62930298]
[-120.97229767 184.25332642]
[-134.64015198 191.85095215]
[-149.98410034 188.83479309]
[-159.75920105 176.62899780]
[-159.34994507 160.99676514]
[-148.94958496 149.31916809]
[-133.46882629 147.11000061]
[-120.21723938 155.41236877]
[-106.00029755 150.62921143]
[-91.78335571 145.84605408]
[-77.56641388 141.06288147]
[-63.34947586 136.27972412]
[-61.44684601 133.17538452]
[-57.88483047 130.88806152]
[-53.08864212 130.21591187]
[-47.83633041 131.72465515]
[-33.29030609 128.06225586]
[-18.74428558 124.39984131]
[-4.19826269 120.73743439]
[10.34775925 117.07502747]
[24.84501266 113.22409821]
[39.29105377 109.18529510]
[53.73709488 105.14649963]
[54.60130310 89.71889496]
[60.46808624 75.42418671]
[70.69097137 63.83753967]
[63.24725342 50.81482697]
[55.80353546 37.79211044]
[41.37221527 30.00307655]
[41.17259216 13.60514355]
[55.41001892 5.46710205]
[69.43825531 13.96067142]
[68.82624817 30.34839439]
[76.26996613 43.37110901]
[83.71368408 56.39382172]
[98.79157257 53.46740341]
[114.00103760 55.60727692]
[120.75879669 42.21575928]
[127.51654816 28.82424355]
[134.27430725 15.43272495]
[141.03205872 2.04120731]
[147.43988037 -11.52123260]
[153.49345398 -25.24545288]
[151.98359680 -40.99444962]
[164.19918823 -49.51668549]
[170.25276184 -63.24090576]
[167.94517517 -79.47689056]
[181.01731873 -89.37896729]
[196.02168274 -82.76073456]
[197.52307129 -66.43046570]
[183.97697449 -57.18733215]
[177.92340088 -43.46311188]
[179.86627197 -28.69576263]
[167.21768188 -19.19187737]
[161.16410828 -5.46765757]
[162.07583618 -0.66682559]
[159.89447021 4.74660206]
[154.42356873 8.79896259]
[147.66581726 22.19047928]
[140.90806580 35.58199692]
[134.15031433 48.97351456]
[127.39255524 62.36503220]
[135.44636536 69.82884979]
[141.52767944 78.97158813]
[145.29812622 89.28449249]
[146.54788208 100.19367981]
[145.20739746 111.09209442]
[159.00903320 116.96699524]
[172.81068420 122.84190369]
[186.61233521 128.71681213]
[200.41398621 134.59172058]
[214.21563721 140.46661377]
[228.01727295 146.34152222]
[241.89402771 152.03677368]
[255.84353638 157.55139160]
[271.07632446 152.51727295]
[284.43029785 161.40830994]
[285.66149902 177.40403748]
[273.82540894 188.23393250]
[258.00167847 185.59020996]
[250.32891846 171.50091553]
[236.37940979 165.98628235]
[228.91213989 166.45901489]
[222.14237976 160.14317322]
[208.34072876 154.26826477]
[194.53907776 148.39335632]
[180.73742676 142.51846313]
[166.93577576 136.64355469]
[153.13414001 130.76864624]
[139.33248901 124.89373779]
[128.13662720 137.08197021]
[113.38400269 144.58264160]
[115.32580566 159.45642090]
[117.26760864 174.33020020]
[119.20941162 189.20397949]
[131.88859558 198.63870239]
[134.10008240 214.28749084]
[124.53185272 226.86622620]
[108.86054993 228.91213989]
[96.38368225 219.21144104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[7 43]
[8 42]
[9 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[46 55]
[47 54]
[48 53]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[62 75]
[63 74]
[65 72]
[66 71]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
