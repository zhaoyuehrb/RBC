%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCGUGGGCCCUGACCUUCUCUCUGAGAGCCGGGCAGAGGCUCCGGAGCCAUGCAGGCCGAAGGCCGGGGCACAGGGGGUUCGACGGGCGAUGCUGAUGGCCCAGGAGGCCCUGGCAUUCCUGAUGGCCCAGGGGGCAAUGCUGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[83.85955811 136.31848145]
[66.96717834 122.09928894]
[60.27061081 101.05899048]
[45.46992493 98.62184906]
[30.66923714 96.18470764]
[15.86854935 93.74756622]
[0.99462050 99.13986206]
[-10.30641079 89.43749237]
[-25.10709763 87.00035095]
[-39.98102570 92.39263916]
[-51.28205872 82.69026947]
[-66.08274841 80.25312805]
[-80.88343048 77.81598663]
[-95.68412018 75.37884521]
[-110.48480988 72.94170380]
[-125.28549194 70.50456238]
[-140.15942383 75.89685059]
[-151.46044922 66.19448853]
[-166.26113892 63.75734329]
[-181.06182861 61.32020187]
[-195.86251831 58.88306046]
[-210.66320801 56.44591904]
[-221.58847046 68.79492950]
[-239.77975464 70.84774017]
[-256.17297363 59.16761780]
[-271.16049194 59.77944565]
[-286.14797974 60.39127731]
[-301.13549805 61.00310516]
[-309.64181519 64.49752808]
[-316.43432617 61.47139359]
[-331.43121338 61.77737045]
[-346.42810059 62.08335114]
[-361.42498779 62.38932800]
[-376.42184448 62.69530487]
[-386.08544922 74.98957062]
[-401.40130615 78.14527130]
[-415.13775635 70.67237854]
[-420.80886841 56.09936523]
[-415.73687744 41.30716324]
[-402.31668091 33.28020096]
[-386.88485718 35.80855942]
[-376.72784424 47.69842911]
[-361.73095703 47.39244843]
[-346.73406982 47.08647156]
[-331.73718262 46.78049469]
[-316.74032593 46.47451401]
[-301.74734497 46.01558685]
[-286.75982666 45.40375900]
[-271.77230835 44.79193115]
[-256.78479004 44.18010330]
[-251.83059692 30.02185249]
[-263.16683960 20.19894028]
[-274.50308228 10.37602997]
[-290.54345703 10.08171463]
[-300.19964600 -2.72988296]
[-296.06433105 -18.23080254]
[-281.30969238 -24.53006363]
[-267.25427246 -16.79541397]
[-264.68017578 -0.96021396]
[-253.34393311 8.86269665]
[-242.00769043 18.68560791]
[-217.84213257 22.82548714]
[-208.22605896 41.64522934]
[-193.42536926 44.08237076]
[-178.62467957 46.51951599]
[-163.82400513 48.95665741]
[-149.02331543 51.39379883]
[-135.20802307 45.82718658]
[-122.84835052 55.70387650]
[-108.04766083 58.14101791]
[-93.24697876 60.57815933]
[-78.44628906 63.01530075]
[-63.64560318 65.45244598]
[-48.84491730 67.88958740]
[-35.02963257 62.32297134]
[-22.66995621 72.19966125]
[-7.86926889 74.63680267]
[5.94601583 69.07019043]
[18.30569077 78.94688416]
[33.10637665 81.38402557]
[47.90706635 83.82116699]
[62.70775223 86.25830841]
[67.63922882 76.92780304]
[74.85253906 69.22418213]
[83.83905792 63.69063950]
[93.96512604 60.71735382]
[104.51673126 60.51398849]
[114.74984741 63.09487915]
[123.94291687 68.27803802]
[135.07643127 58.22592926]
[146.20994568 48.17382050]
[157.34344482 38.12171173]
[162.40133667 23.13076591]
[177.03302002 20.34459114]
[188.16653442 10.29248238]
[192.69535828 -5.46892023]
[208.67269897 -9.16442966]
[219.66242981 3.00757718]
[214.35926819 18.52558327]
[198.21864319 21.42599297]
[187.08512878 31.47810364]
[182.82359314 45.75005341]
[167.39555359 49.25522232]
[156.26205444 59.30733109]
[145.12854004 69.35944366]
[133.99502563 79.41155243]
[137.48200989 86.78466034]
[139.39044189 94.71432495]
[139.63998413 102.86659241]
[138.22010803 110.89813995]
[135.19059753 118.47071075]
[146.91807556 127.82305908]
[158.64555359 137.17539978]
[170.37301636 146.52775574]
[182.19528198 155.75999451]
[194.11108398 164.87117004]
[206.02688599 173.98234558]
[217.94268799 183.09352112]
[229.85850525 192.20471191]
[241.77430725 201.31588745]
[253.69010925 210.42706299]
[265.96762085 219.04463196]
[278.58642578 227.15423584]
[291.20523071 235.26385498]
[303.82403564 243.37345886]
[316.44284058 251.48307800]
[331.83074951 247.87915039]
[345.21575928 256.28256226]
[348.65676880 271.70767212]
[340.11233521 285.00311279]
[324.65167236 288.28085327]
[311.44735718 279.59631348]
[308.33322144 264.10186768]
[295.71444702 255.99226379]
[283.09564209 247.88265991]
[270.47683716 239.77304077]
[257.85803223 231.66343689]
[255.04277039 232.17079163]
[251.85166931 231.55923462]
[248.72282410 229.67778015]
[246.14138794 226.54145813]
[244.57893372 222.34286499]
[232.66313171 213.23168945]
[220.74732971 204.12051392]
[208.83151245 195.00933838]
[196.91571045 185.89816284]
[184.99990845 176.78697205]
[173.08409119 167.67579651]
[165.81648254 166.10179138]
[161.02067566 158.25521851]
[149.29319763 148.90287781]
[137.56573486 139.55053711]
[125.83825684 130.19818115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 82]
[4 81]
[5 80]
[6 79]
[8 77]
[9 76]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[25 50]
[26 49]
[27 48]
[28 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[51 61]
[52 60]
[53 59]
[89 106]
[90 105]
[91 104]
[92 103]
[94 101]
[95 100]
[111 153]
[112 152]
[113 151]
[114 150]
[115 148]
[116 147]
[117 146]
[118 145]
[119 144]
[120 143]
[121 142]
[122 137]
[123 136]
[124 135]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
