%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCGGCGCUUCCUGGUGGUCAGGGCGCCAUGGCGCUGUCCUGGCUGCAGCGCGUCGAGCUUGCGCUCUUUGCUGCCGCCUUCCUGUGCGGGGCCGUGGCGGCCGCGGCGAUGACUCGGACCCAGGGCU\
) } def
/len { sequence length } bind def

/coor [
[160.95506287 134.00616455]
[146.62399292 129.57666016]
[132.29292297 125.14714813]
[117.96186066 120.71763611]
[103.63079834 116.28812408]
[88.94136047 119.32464600]
[77.54111481 129.07321167]
[66.14086914 138.82176208]
[54.74062347 148.57031250]
[43.34037781 158.31887817]
[40.71891022 164.56378174]
[36.01047516 167.96562195]
[31.15184975 168.24554443]
[19.29731941 177.43630981]
[7.44279003 186.62707520]
[-4.41173935 195.81784058]
[-7.84466600 211.48928833]
[-22.30056953 218.44676208]
[-36.69011688 211.35307312]
[-39.97488022 195.64988708]
[-29.63507080 183.38336182]
[-13.60250282 183.96330261]
[-1.74797308 174.77253723]
[10.10655689 165.58177185]
[21.96108627 156.39100647]
[33.59181976 146.91862488]
[44.99206543 137.17007446]
[56.39231110 127.42151642]
[67.79255676 117.67295837]
[79.19281006 107.92440033]
[78.56402588 100.45080566]
[64.99047089 94.06656647]
[77.30647278 85.50360870]
[76.67768860 78.03001404]
[63.80887222 70.32329559]
[50.94005585 62.61657715]
[38.07123947 54.90985870]
[25.20241928 47.20313644]
[12.33360195 39.49641800]
[-0.53521562 31.78969955]
[-15.25321865 37.07310486]
[-29.90599632 31.61141205]
[-37.57495499 17.98345947]
[-34.63904953 2.62395263]
[-22.48451996 -7.21481991]
[-6.85036659 -6.88729048]
[4.88144159 3.45189166]
[7.17150402 18.92088127]
[20.04032135 26.62759972]
[32.90914154 34.33432007]
[45.77795792 42.04103851]
[58.64677429 49.74776077]
[71.51559448 57.45447922]
[84.38441467 65.16120148]
[90.72457123 61.15465546]
[90.12516022 46.16663361]
[103.40488434 53.14156342]
[109.74504089 49.13502121]
[108.30834961 34.20398331]
[106.87165833 19.27294350]
[105.43496704 4.34190416]
[95.47747803 -8.68808079]
[102.03195953 -23.72040939]
[118.35571289 -25.29111099]
[127.65626526 -11.78438187]
[120.36600494 2.90521240]
[121.80269623 17.83625031]
[123.23938751 32.76728821]
[124.67607880 47.69832993]
[132.05436707 67.78344727]
[129.83000183 85.74160767]
[120.56711578 97.85648346]
[108.06031036 101.95705414]
[122.39137268 106.38656616]
[136.72244263 110.81607819]
[151.05351257 115.24559021]
[165.38456726 119.67510223]
[183.18457031 115.14237976]
[194.65989685 128.36338806]
[209.09306335 132.44796753]
[223.52622986 136.53256226]
[237.95938110 140.61714172]
[252.39254761 144.70173645]
[263.37051392 136.79589844]
[276.70330811 136.69010925]
[287.48486328 144.19776917]
[291.87811279 156.37216187]
[306.20919800 160.80166626]
[321.67877197 157.48461914]
[331.55361938 168.63523865]
[345.88470459 173.06475830]
[360.21575928 177.49426270]
[374.54681396 181.92378235]
[389.11755371 185.48663330]
[403.87557983 188.17004395]
[418.63360596 190.85345459]
[433.39163208 193.53686523]
[448.14965820 196.22027588]
[462.90768433 198.90368652]
[477.66571045 201.58709717]
[494.33096313 198.47181702]
[501.93792725 213.62341309]
[489.48425293 225.12745667]
[474.98229980 216.34512329]
[460.22427368 213.66171265]
[445.46624756 210.97830200]
[430.70822144 208.29489136]
[415.95019531 205.61148071]
[401.19216919 202.92807007]
[386.43414307 200.24465942]
[392.17086792 214.10432434]
[385.12762451 227.34791565]
[370.42901611 230.33961487]
[358.76947021 220.90269470]
[358.63235474 205.90332031]
[370.11730957 196.25483704]
[355.78625488 191.82533264]
[341.45516968 187.39581299]
[327.12411499 182.96630859]
[312.67959595 186.60018921]
[301.77969360 175.13273621]
[287.44860840 170.70321655]
[272.97796631 179.18437195]
[256.51382446 174.53030396]
[248.30795288 159.13490295]
[233.87480164 155.05030823]
[219.44163513 150.96572876]
[205.00848389 146.88113403]
[190.57531738 142.79653931]
[179.80320740 148.43534851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[5 73]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[13 25]
[14 24]
[15 23]
[16 22]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[58 69]
[59 68]
[60 67]
[61 66]
[79 129]
[80 128]
[81 127]
[82 126]
[83 125]
[87 122]
[88 121]
[90 119]
[91 118]
[92 117]
[93 116]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
