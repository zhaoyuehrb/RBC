%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCAGCUCCCCGGCGGAGGCAAGAGGUGGUUGGGGGGGACCAUGGCUGACGUUUUCCCGGGCAACGACUCCACGGCGUCUCAGGACGUGGCCAACCGCUUCGCCCGCAAAGGGGCGCUGAGGCAGAAGAACGUGCACGAGG\
) } def
/len { sequence length } bind def

/coor [
[247.34738159 556.74554443]
[259.34506226 547.56768799]
[253.94425964 533.57373047]
[248.54347229 519.57977295]
[236.74259949 510.49191284]
[238.99218750 494.83145142]
[233.59138489 480.83746338]
[228.19059753 466.84347534]
[222.78979492 452.84951782]
[210.98893738 443.76165771]
[213.23851013 428.10122681]
[207.83772278 414.10723877]
[202.43693542 400.11325073]
[197.03613281 386.11929321]
[181.13023376 375.20062256]
[184.34956360 355.35037231]
[178.34764099 341.60348511]
[172.34570312 327.85659790]
[166.34378052 314.10971069]
[162.23638916 311.54296875]
[159.73835754 306.33444214]
[160.39399719 299.63491821]
[154.99319458 285.64093018]
[151.00085449 282.89865112]
[148.73078918 277.58679199]
[149.67602539 270.92196655]
[144.88650513 256.70715332]
[140.09698486 242.49235535]
[135.30744934 228.27755737]
[130.51792908 214.06275940]
[125.72840881 199.84796143]
[120.93888855 185.63317871]
[116.14936066 171.41838074]
[111.35984039 157.20358276]
[106.57032013 142.98878479]
[101.78079224 128.77398682]
[78.65055847 128.39999390]
[58.78528976 109.20589447]
[56.75009918 77.11579895]
[44.33476257 68.69799042]
[31.91942787 60.28018951]
[19.50409317 51.86238098]
[4.17544556 54.63191986]
[-8.29555416 45.91820526]
[-10.84141827 31.28761482]
[-23.25675392 22.86980820]
[-35.67208862 14.45200253]
[-51.63526154 16.05096436]
[-62.73466492 4.46723604]
[-60.45578766 -11.41313744]
[-46.54679108 -19.40809250]
[-31.67746353 -13.38458443]
[-27.25428200 2.03666782]
[-14.83894730 10.45447350]
[-2.42361283 18.87228012]
[12.11018658 15.82198906]
[24.82101631 24.18198013]
[27.92189980 39.44704819]
[40.33723450 47.86485291]
[52.75256729 56.28265762]
[65.16790009 64.70046234]
[77.67369843 56.41764832]
[74.76726532 41.70191956]
[71.86083984 26.98619080]
[58.07482529 19.60514450]
[52.30659103 5.07030725]
[57.27971649 -9.75541401]
[70.64604950 -17.87176895]
[86.09440613 -15.44646168]
[96.33055878 -3.62464833]
[96.52130127 12.01177216]
[86.57656860 24.07975960]
[89.48299408 38.79548645]
[92.38942719 53.51121521]
[99.79062653 54.72458267]
[109.29319763 43.11849594]
[114.59302521 57.15130997]
[121.99422455 58.36467743]
[129.44726562 45.34729767]
[136.90031433 32.32991791]
[144.35334778 19.31254005]
[151.80639648 6.29516029]
[151.20613098 -10.09299755]
[165.24043274 -18.57651711]
[179.47203064 -10.42828083]
[179.26066589 5.96950436]
[164.82377625 13.74820328]
[157.37072754 26.76558113]
[149.91769409 39.78295898]
[142.46464539 52.80033875]
[135.01159668 65.81771851]
[141.48568726 92.10455322]
[132.76255798 113.74674225]
[115.99559021 123.98445892]
[120.78511810 138.19924927]
[125.57463837 152.41404724]
[130.36416626 166.62884521]
[135.15368652 180.84364319]
[139.94320679 195.05844116]
[144.73272705 209.27323914]
[149.52224731 223.48803711]
[154.31178284 237.70283508]
[159.10130310 251.91763306]
[163.89082336 266.13244629]
[168.98718262 280.24014282]
[174.38796997 294.23410034]
[180.09066772 308.10778809]
[186.09259033 321.85467529]
[192.09452820 335.60156250]
[198.09645081 349.34844971]
[208.52136230 352.76400757]
[215.17579651 361.20639038]
[216.02577209 371.70117188]
[211.03010559 380.71847534]
[216.43090820 394.71246338]
[221.83169556 408.70645142]
[227.23249817 422.70040894]
[239.41966248 432.78921509]
[236.78378296 447.44873047]
[242.18457031 461.44268799]
[247.58537292 475.43667603]
[252.98616028 489.43066406]
[265.17333984 499.51943970]
[262.53744507 514.17895508]
[267.93823242 528.17291260]
[273.33905029 542.16693115]
[288.39175415 540.90496826]
[303.18997192 543.93634033]
[316.53408813 551.01531982]
[327.34231567 561.56793213]
[334.73852539 574.73883057]
[338.12313843 589.46032715]
[337.22171021 604.53894043]
[332.10742188 618.75231934]
[323.19476318 630.94824219]
[311.20629883 640.13812256]
[297.11389160 645.57690430]
[282.05990601 646.82373047]
[267.26473999 643.77746582]
[253.92774963 636.68511963]
[243.13011169 626.12164307]
[235.74714661 612.94329834]
[232.37734985 598.21844482]
[233.29389954 583.14074707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[6 122]
[7 121]
[8 120]
[9 119]
[11 117]
[12 116]
[13 115]
[14 114]
[16 110]
[17 109]
[18 108]
[19 107]
[22 106]
[23 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[36 94]
[39 61]
[40 60]
[41 59]
[42 58]
[45 55]
[46 54]
[47 53]
[62 74]
[63 73]
[64 72]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
