%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCGCAGUCUCCCCAGGUCCGCCCAGCAGCCGCGCUUCAGCCAGAAUACUGGGAUCUUCAGUGGCAGGAGGAGUAAUCAGAAGACGGAGAUGAAUUUUAACACUAUUUUGGAGGAGAUUCUUAUUAAAAGGUCACAGCAGAAAAAGAAGACAUCGCCCUUAAACUACAAAGAGAGACUUUUUGUACUUA\
) } def
/len { sequence length } bind def

/coor [
[30.52811623 146.01629639]
[21.83544731 128.88157654]
[17.29830742 110.21138763]
[2.30633807 110.70217896]
[-12.68563080 111.19296265]
[-19.66403770 119.56266785]
[-29.88903046 122.63803101]
[-39.90554428 119.63256836]
[-46.46643829 111.77319336]
[-61.46643829 111.77319336]
[-76.46643829 111.77319336]
[-91.46593475 111.89590454]
[-106.46392822 112.14133453]
[-112.27220917 127.12567139]
[-123.35697937 138.70832825]
[-138.00128174 145.13798523]
[-153.95318604 145.45819092]
[-168.77200317 139.64950562]
[-180.20175171 128.62794495]
[-186.51455688 114.10072327]
[-201.50653076 114.59151459]
[-216.49850464 115.08229828]
[-230.03813171 123.26698303]
[-243.01173401 115.95024872]
[-258.00372314 116.44104004]
[-262.50054932 123.51647949]
[-269.35537720 128.17768860]
[-277.40377808 129.72299194]
[-285.31375122 127.97248840]
[-291.80603027 123.28559113]
[-295.86099243 116.49026489]
[-310.85296631 115.99948120]
[-325.84494019 115.50868988]
[-340.83688354 115.01790619]
[-355.82885742 114.52712250]
[-361.68280029 129.33700562]
[-372.23406982 141.22895813]
[-386.19458008 148.77879333]
[-401.86941528 151.09078979]
[-417.36260986 147.90386963]
[-430.80661011 139.62092590]
[-440.58721924 127.25802612]
[-445.53753662 112.31977081]
[-460.53555298 112.07434845]
[-475.53353882 111.82891846]
[-490.53152466 111.58349609]
[-504.59521484 120.01821899]
[-518.79840088 111.82060242]
[-518.53009033 95.42365265]
[-504.06628418 87.69514465]
[-490.28610229 96.58550262]
[-475.28811646 96.83093262]
[-460.29010010 97.07635498]
[-445.29211426 97.32178497]
[-440.63275146 83.94522095]
[-432.05517578 72.64586639]
[-420.38827515 64.53762817]
[-406.76638794 60.42495728]
[-392.51882935 60.72306061]
[-379.04034424 65.41603088]
[-367.65444946 74.05707550]
[-359.48348999 85.81105042]
[-355.33807373 99.53514862]
[-340.34609985 100.02593994]
[-325.35415649 100.51672363]
[-310.36218262 101.00750732]
[-295.37020874 101.49829865]
[-277.40377808 89.43960571]
[-258.49450684 101.44906616]
[-243.50253296 100.95828247]
[-231.03523254 92.80870056]
[-216.98928833 100.09033203]
[-201.99731445 99.59954071]
[-187.00535583 99.10875702]
[-182.56192017 85.78863525]
[-173.81803894 74.76346588]
[-161.80915833 67.37168884]
[-147.96862793 64.51953888]
[-133.95661926 66.56996155]
[-121.46100616 73.29659271]
[-111.99404907 83.90854645]
[-106.70935822 97.14334106]
[-91.71136475 96.89791107]
[-85.06414032 93.63973236]
[-76.46643829 96.77319336]
[-61.46643829 96.77319336]
[-46.46643829 96.77319336]
[-30.49025536 85.89712524]
[-13.17641735 96.20099640]
[1.81555176 95.71020508]
[16.80751991 95.21942139]
[18.07425880 84.76794434]
[20.64869881 74.55960846]
[24.48974800 64.75734711]
[29.53609657 55.51763535]
[35.70719147 46.98794937]
[42.90453339 39.30444717]
[51.01323318 32.58976746]
[59.90386581 26.95109558]
[69.43450928 22.47843170]
[79.45304871 19.24317169]
[89.79955292 17.29695702]
[100.30887604 16.67085075]
[110.81327057 17.37484932]
[121.14506531 19.39771271]
[131.13934326 22.70715523]
[140.63656616 27.25034904]
[149.48515320 32.95477676]
[157.54385376 39.72938156]
[164.68403625 47.46603394]
[170.79173279 56.04122925]
[175.76943970 65.31809998]
[179.53771973 75.14856720]
[194.19964600 71.98189545]
[208.86157227 68.81521606]
[223.52351379 65.64854431]
[236.86671448 52.96916199]
[253.35211182 58.96567535]
[267.96026611 55.55953217]
[282.56842041 52.15338898]
[297.14822388 48.62784576]
[311.69869995 44.98314667]
[326.24914551 41.33844376]
[340.79962158 37.69374084]
[341.88296509 22.61780357]
[347.56533813 8.63378429]
[357.27868652 -2.89355659]
[370.06207275 -10.84341908]
[384.65692139 -14.44793415]
[399.63095093 -13.36631870]
[413.51855469 -7.71704817]
[424.96444702 1.93496978]
[432.85583496 14.63486290]
[447.40628052 10.99015999]
[458.80770874 -0.79711062]
[474.64865112 3.44511676]
[478.63333130 19.35280228]
[466.66262817 30.56148338]
[451.05099487 25.54062843]
[436.50051880 29.18533134]
[435.52764893 44.10560226]
[429.98318481 58.01348495]
[420.39846802 69.54227448]
[407.70242310 77.55487061]
[393.13174438 81.25594330]
[378.11029053 80.27083588]
[364.10992432 74.68345642]
[352.50646973 65.02931976]
[344.44433594 52.24420929]
[329.89385986 55.88891220]
[315.34338379 59.53361511]
[300.79293823 63.17831802]
[295.05920410 67.86081696]
[285.97457886 66.76154327]
[271.36642456 70.16768646]
[256.75827026 73.57382965]
[250.09841919 83.68408203]
[237.94371033 86.63443756]
[226.69018555 80.31047821]
[212.02825928 83.47714996]
[197.36631775 86.64382172]
[182.70439148 89.81049347]
[182.91433716 108.31000519]
[179.03726196 126.39989471]
[171.26428223 143.18847656]
[159.97854614 157.84822083]
[145.73634338 169.65650940]
[152.80729675 182.88533020]
[159.87825012 196.11415100]
[166.94918823 209.34297180]
[174.02014160 222.57179260]
[181.09109497 235.80061340]
[188.16204834 249.02941895]
[195.23300171 262.25823975]
[202.30395508 275.48706055]
[215.10285950 286.60571289]
[207.96182251 301.98239136]
[191.20924377 299.37710571]
[189.07513428 282.55801392]
[182.00418091 269.32919312]
[174.93322754 256.10037231]
[167.86227417 242.87155151]
[160.79132080 229.64274597]
[153.72038269 216.41392517]
[146.64942932 203.18510437]
[139.57847595 189.95628357]
[132.50752258 176.72746277]
[114.07009888 182.13327026]
[94.88465881 183.17256165]
[75.97116852 179.79008484]
[58.33514023 172.16564941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 89]
[9 87]
[10 86]
[11 85]
[12 83]
[13 82]
[20 74]
[21 73]
[22 72]
[24 70]
[25 69]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[43 54]
[44 53]
[45 52]
[46 51]
[113 162]
[114 161]
[115 160]
[116 159]
[118 156]
[119 155]
[120 154]
[121 152]
[122 151]
[123 150]
[124 149]
[133 140]
[134 139]
[167 187]
[168 186]
[169 185]
[170 184]
[171 183]
[172 182]
[173 181]
[174 180]
[175 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
