%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCGCCCUCCUCCGCGUUCCAGAAUCCAAGAUGGCGGGAUCCAGGCAAAGGGGUCUCCGGGCCAGAGUUCGGCCGCUGUUCUGCGCCUUGCUGCUGUCACUCGGUCGCUUCGUCCGGGGCGACGGCGUGG\
) } def
/len { sequence length } bind def

/coor [
[95.82675934 228.01933289]
[82.77696991 217.19622803]
[89.56455994 201.66030884]
[90.27292633 186.67703247]
[90.80428314 171.68644714]
[91.15856934 156.69064331]
[91.51284790 141.69482422]
[91.86713409 126.69900513]
[85.84143066 122.23348236]
[81.07141113 136.45483398]
[66.07209015 136.31274414]
[61.57236099 122.00357056]
[73.79001617 113.30244446]
[67.76431274 108.83692169]
[53.52052307 113.53952026]
[39.27672958 118.24211884]
[25.03293991 122.94471741]
[17.87659454 136.78033447]
[3.36437392 141.34652710]
[-9.78167534 134.43878174]
[-24.02546692 139.14138794]
[-27.06914711 154.19566345]
[-37.24422073 165.70060730]
[-51.81364822 170.56140137]
[-66.85832214 167.47055054]
[-78.33129883 157.25946045]
[-83.14641571 142.67488098]
[-80.00841522 127.63996124]
[-69.76142120 116.19905090]
[-55.16180801 111.42967224]
[-40.13680649 114.61478424]
[-28.72806358 124.89759064]
[-14.48427296 120.19499207]
[-8.03526974 106.81792450]
[6.34296942 101.84591675]
[20.33034325 108.70092010]
[34.57413483 103.99832916]
[48.81792450 99.29573059]
[63.06171417 94.59313202]
[66.05319977 79.89445496]
[54.78046799 69.99871826]
[43.50774002 60.10298538]
[32.23501205 50.20724869]
[20.96228409 40.31151199]
[5.85636568 43.85987473]
[-8.43718338 37.82049561]
[-16.42220306 24.51564407]
[-15.02828884 9.06130505]
[-4.79143000 -2.60001397]
[10.35209179 -5.98429632]
[24.57928467 0.20978355]
[32.41950226 13.60047531]
[30.85801888 29.03878403]
[42.13074875 38.93452072]
[53.40347672 48.83025742]
[64.67620850 58.72599030]
[75.94893646 68.62172699]
[95.40924835 65.75425720]
[111.17198181 72.62306976]
[119.38250732 84.87521362]
[129.67135620 73.96010590]
[139.96020508 63.04500198]
[150.24905396 52.12989426]
[153.89358521 32.36785507]
[172.52525330 27.40954018]
[182.28717041 16.02072716]
[192.04908752 4.63191271]
[201.67581177 -6.87139654]
[211.16600037 -18.48759842]
[220.65620422 -30.10379791]
[219.26301575 -45.61820602]
[229.05290222 -57.26349258]
[243.85211182 -58.49607086]
[253.34231567 -70.11227417]
[262.83251953 -81.72846985]
[265.88021851 -90.44312286]
[272.68661499 -93.50349426]
[282.44854736 -104.89231110]
[280.98672485 -120.62884521]
[291.14462280 -132.73638916]
[306.89572144 -134.03175354]
[318.89520264 -123.74641418]
[320.02395630 -107.98248291]
[309.61233521 -96.09242249]
[293.83734131 -95.13039398]
[284.07543945 -83.74158478]
[274.44869995 -72.23827362]
[264.95849609 -60.62207413]
[255.46830750 -49.00587082]
[257.21194458 -34.25814819]
[247.75299072 -22.34247589]
[232.27239990 -20.61359978]
[222.78221130 -8.99739838]
[213.29200745 2.61880231]
[211.47904968 9.85801411]
[203.43789673 14.39382553]
[193.67597961 25.78263855]
[183.91406250 37.17145157]
[185.61418152 47.36536407]
[181.28511047 56.99227524]
[172.15708923 62.72002411]
[161.16416931 62.41874695]
[150.87532043 73.33385468]
[140.58647156 84.24896240]
[130.29760742 95.16406250]
[130.82897949 110.15464783]
[141.86483765 120.31387329]
[152.90069580 130.47309875]
[163.93655396 140.63232422]
[174.97241211 150.79154968]
[186.00827026 160.95077515]
[197.04412842 171.10998535]
[208.07998657 181.26921082]
[224.19183350 184.32545471]
[229.34478760 199.89398193]
[218.23794556 211.95922852]
[202.29707336 208.10949707]
[197.92076111 192.30506897]
[186.88490295 182.14584351]
[175.84904480 171.98663330]
[164.81318665 161.82740784]
[153.77732849 151.66818237]
[142.74147034 141.50895691]
[131.70561218 131.34973145]
[120.66975403 121.19050598]
[106.86294556 127.05329132]
[106.50866699 142.04910278]
[106.15438080 157.04492188]
[105.80010223 172.04074097]
[108.74768066 180.78976440]
[105.25618744 187.38540649]
[104.54782104 202.36866760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 132]
[4 131]
[5 129]
[6 128]
[7 127]
[8 126]
[14 39]
[15 38]
[16 37]
[17 36]
[20 33]
[21 32]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[60 105]
[61 104]
[62 103]
[63 102]
[65 98]
[66 97]
[67 96]
[68 94]
[69 93]
[70 92]
[73 89]
[74 88]
[75 87]
[77 86]
[78 85]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
