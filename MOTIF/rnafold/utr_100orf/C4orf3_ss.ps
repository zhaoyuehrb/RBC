%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCAGUCUAAUAAAUAGCCCCAUUAAUAGGAGACCAUUACAGAAUGUAGAGGGAAAUAAUAGGUGCCAAAGGAAGGCAAAAAACUAUGGAAACAAAU\
) } def
/len { sequence length } bind def

/coor [
[66.87509155 341.85598755]
[54.55804825 350.49816895]
[40.82794189 356.65289307]
[26.18110466 360.09768677]
[11.14701176 360.70803833]
[-3.73086524 358.46185303]
[-17.91469955 353.44036865]
[-30.89175415 345.82507324]
[-42.19291687 335.89129639]
[-51.40966034 323.99810791]
[-58.20880127 310.57540894]
[-62.34455490 296.10848999]
[-63.66741943 281.12026978]
[-62.12957001 266.15258789]
[-57.78660202 251.74652100]
[-50.79551315 238.42280579]
[-41.40902328 226.66311646]
[-29.96644783 216.89256287]
[-16.88142967 209.46430969]
[-2.62698460 204.64691162]
[12.28159809 202.61451721]
[27.30538368 203.44058228]
[41.90127182 207.09524536]
[48.22879410 193.49516296]
[54.55632019 179.89506531]
[60.88384628 166.29498291]
[48.33177567 157.05691528]
[37.89781952 145.47984314]
[30.00970268 132.03836060]
[24.99080276 117.28346252]
[23.04686356 101.82004547]
[24.25757599 86.28202057]
[28.57330894 71.30635071]
[35.81713867 57.50696564]
[45.69210815 45.44955826]
[57.79340363 35.62841415]
[71.62493134 28.44615173]
[67.48040771 14.03008747]
[56.23130035 2.90497208]
[60.15082932 -11.46466827]
[56.00630188 -25.88073349]
[51.86177444 -40.29679489]
[47.71725082 -54.71286011]
[43.57272339 -69.12892151]
[33.38538361 -82.68083954]
[43.58754730 -96.22160339]
[59.42337036 -90.16659546]
[57.98878860 -73.27345276]
[62.13331604 -58.85738754]
[66.27783966 -44.44132233]
[70.42236328 -30.02525902]
[74.56689453 -15.60919476]
[85.51955414 -5.51521301]
[81.89646912 9.88556099]
[86.04100037 24.30162621]
[95.88665009 23.13532639]
[105.80053711 23.24420929]
[115.61819458 24.62646675]
[125.17675018 27.25916672]
[134.31762695 31.09863281]
[142.88917542 36.08116913]
[150.74919128 42.12411880]
[157.76727295 49.12722397]
[163.82701111 56.97430420]
[168.82785034 65.53517914]
[172.68685913 74.66783142]
[175.33998108 84.22073364]
[190.25117493 82.59095001]
[205.16236877 80.96116638]
[220.07357788 79.33139038]
[228.61315918 66.23140717]
[243.59031677 61.73486710]
[257.93328857 67.96489716]
[264.86975098 81.97986603]
[261.12454224 97.16233063]
[248.46601868 106.34360504]
[232.87113953 105.18856049]
[221.70335388 94.24258423]
[206.79216003 95.87236786]
[191.88096619 97.50215149]
[176.96975708 99.13192749]
[174.97009277 117.45228577]
[168.67304993 134.77224731]
[158.43959045 150.09902954]
[144.85629272 162.55406189]
[128.70178223 171.42343140]
[110.90203857 176.19871521]
[92.47738647 176.60618591]
[74.48393250 172.62249756]
[68.15641022 186.22259521]
[61.82888412 199.82267761]
[55.50135803 213.42277527]
[67.69829559 222.23362732]
[78.00715637 233.19374084]
[86.05527496 245.90689087]
[91.55173492 259.91351318]
[94.29782104 274.70727539]
[94.19428253 289.75338745]
[91.24485016 304.50796509]
[85.55614471 318.43762207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 92]
[24 91]
[25 90]
[26 89]
[37 55]
[38 54]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
