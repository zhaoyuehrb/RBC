%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCCCUGGUUACGGAAGCCGAGGAAGGCUGAGCGCGGGCUCUCAAGGAAAGUAGUCGCGGAAUCUCAGUUAGCGGUGGAGAGGCAGUAUGUCCGGUUCAAUGGCGACUGCGGAAGCUAGCGGCAGCGAUGGGAAAGGGCAGGAAGUCGAGACCUCAGUCACCUAUUACCGGUUGGAGGAGGUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[124.95663452 223.45071411]
[128.39811707 208.85150146]
[120.92373657 209.47084045]
[115.12624359 223.30519104]
[109.32875824 237.13954163]
[112.08645630 255.33763123]
[97.73394775 265.42248535]
[92.16598511 279.35079956]
[86.59803009 293.27911377]
[89.47426605 309.42404175]
[76.75787354 319.77902222]
[61.53037643 313.69168091]
[59.45652390 297.42419434]
[72.66971588 287.71115112]
[78.23767853 273.78283691]
[83.80563354 259.85452271]
[79.32680511 248.60554504]
[83.86576080 236.94924927]
[95.49441528 231.34205627]
[101.29190063 217.50770569]
[107.08938599 203.67335510]
[108.69841766 188.75990295]
[105.98521423 174.00732422]
[103.27200317 159.25476074]
[100.55879211 144.50218201]
[79.19817352 139.34513855]
[62.90864944 124.59650421]
[55.66129684 103.85169220]
[40.71252823 102.61300659]
[25.76376152 101.37431335]
[10.81499481 100.13562012]
[-4.13377237 98.89693451]
[-19.08254051 97.65824127]
[-34.03130722 96.41955566]
[-49.01285553 95.67579651]
[-64.01080322 95.42778778]
[-79.00875854 95.17977905]
[-94.00670624 94.93177032]
[-109.00465393 94.68376160]
[-124.00465393 94.68376160]
[-139.00260925 94.93177032]
[-154.00054932 95.17977905]
[-167.67091370 103.14419556]
[-180.52436829 95.61838531]
[-195.52232361 95.86639404]
[-211.25932312 102.17378998]
[-221.67665100 88.79785919]
[-211.70727539 75.08480835]
[-195.77032471 80.86843872]
[-180.77238464 80.62042999]
[-168.17477417 72.67375946]
[-154.24856567 80.18183136]
[-139.25061035 79.93382263]
[-124.25266266 79.68581390]
[-120.33625031 76.92407990]
[-114.63948059 76.60543823]
[-108.75664520 79.68581390]
[-93.75869751 79.93382263]
[-78.76074982 80.18183136]
[-63.76279831 80.42984009]
[-48.76484680 80.67784882]
[-46.65262985 78.80898285]
[-43.66629410 77.67195892]
[-40.08369446 77.60639191]
[-36.30123138 78.84408569]
[-32.79261780 81.47078705]
[-17.84384918 82.70947266]
[-2.89508224 83.94816589]
[12.05368519 85.18685913]
[27.00245285 86.42554474]
[41.95122147 87.66423798]
[56.89998627 88.90292358]
[59.13053894 82.38059998]
[62.34149933 76.28094482]
[66.45584869 70.75028229]
[71.37487793 65.92128754]
[76.98059845 61.90980148]
[83.13852692 58.81205750]
[89.70093536 56.70236206]
[96.51041412 55.63132858]
[103.40360260 55.62464905]
[110.21514130 56.68248749]
[116.78163147 58.77946091]
[122.94554901 61.86526489]
[132.73432922 50.49954224]
[142.52311707 39.13381958]
[137.57412720 24.66127205]
[140.51426697 9.75314236]
[150.45570374 -1.60618496]
[164.65315247 -6.43195820]
[179.26148987 -3.52295589]
[189.05027771 -14.88867950]
[198.83906555 -26.25440216]
[208.62785339 -37.62012482]
[218.41662598 -48.98584747]
[217.42698669 -64.53121185]
[227.51611328 -75.91822815]
[242.34234619 -76.76589966]
[252.13113403 -88.13162231]
[261.91992188 -99.49734497]
[265.06304932 -115.00319672]
[279.23135376 -119.59758759]
[289.02014160 -130.96331787]
[292.16326904 -146.46916199]
[306.33157349 -151.06355286]
[316.12036133 -162.42927551]
[315.13070679 -177.97463989]
[325.21984863 -189.36164856]
[340.04608154 -190.20932007]
[349.83483887 -201.57504272]
[359.62362671 -212.94078064]
[369.41241455 -224.30650330]
[365.72149658 -239.37821960]
[371.62554932 -253.72817993]
[384.85437012 -261.83856201]
[400.32119751 -260.59072876]
[412.07870483 -250.46449280]
[415.60592651 -235.35362244]
[409.54653931 -221.06854248]
[396.23052979 -213.10215759]
[380.77813721 -214.51771545]
[370.98934937 -203.15199280]
[361.20059204 -191.78627014]
[351.41180420 -180.42054749]
[352.77166748 -165.63249207]
[343.00634766 -153.96658325]
[327.48608398 -152.64048767]
[317.69729614 -141.27476501]
[315.25433350 -126.58187103]
[300.38586426 -121.17452240]
[290.59707642 -109.80879974]
[288.15411377 -95.11590576]
[273.28564453 -89.70856476]
[263.49685669 -78.34284210]
[253.70806885 -66.97711945]
[255.06794739 -52.18907166]
[245.30264282 -40.52316666]
[229.78234863 -39.19706345]
[219.99357605 -27.83133888]
[210.20478821 -16.46561623]
[200.41600037 -5.09989262]
[190.62721252 6.26583052]
[195.66995239 20.28140831]
[193.00247192 35.03744125]
[183.24264526 46.55317688]
[168.93519592 51.67115784]
[153.88883972 48.92260742]
[144.10005188 60.28833008]
[134.31127930 71.65405273]
[142.40504456 86.48822784]
[144.38536072 103.27037048]
[139.96672058 119.58103180]
[129.78616333 133.06872559]
[115.31137085 141.78897095]
[118.02458191 156.54154968]
[120.73778534 171.29412842]
[123.45099640 186.04669189]
[142.74224854 182.76470947]
[163.51269531 198.99798584]
[171.50817871 211.68942261]
[179.50364685 224.38084412]
[187.49913025 237.07228088]
[195.49459839 249.76370239]
[203.49008179 262.45513916]
[211.48554993 275.14657593]
[225.27897644 275.03338623]
[237.23004150 281.70172119]
[244.26530457 293.31411743]
[244.63633728 306.77798462]
[238.35313416 318.56903076]
[246.13768005 331.39093018]
[260.76937866 338.79669189]
[261.40136719 355.18365479]
[247.38348389 363.69430542]
[233.13615417 355.57363892]
[233.31579590 339.17547607]
[225.53125000 326.35357666]
[209.14454651 325.52694702]
[196.34719849 314.99542236]
[192.30235291 298.75173950]
[198.79412842 283.14202881]
[190.79864502 270.45062256]
[182.80317688 257.75918579]
[174.80769348 245.06774902]
[166.81222534 232.37632751]
[158.81674194 219.68489075]
[150.82127380 206.99346924]
[143.34687805 207.61280823]
[149.14419556 221.44723511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[7 16]
[8 15]
[9 14]
[22 157]
[23 156]
[24 155]
[25 154]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 54]
[41 53]
[42 52]
[44 50]
[45 49]
[84 149]
[85 148]
[86 147]
[91 142]
[92 141]
[93 140]
[94 139]
[95 138]
[98 135]
[99 134]
[100 133]
[102 131]
[103 130]
[105 128]
[106 127]
[109 124]
[110 123]
[111 122]
[112 121]
[159 187]
[160 186]
[161 185]
[162 184]
[163 183]
[164 182]
[165 181]
[170 177]
[171 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
