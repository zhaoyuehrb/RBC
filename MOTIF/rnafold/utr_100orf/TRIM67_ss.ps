%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAUCCCCAGCGCAGAGCAGCGCUGGCAGCCGGCGCCGCGAUGGAGGAAGAGCUGAAGUGUCCCGUGUGCGGCUCUCUGUUUCGGGAGCCUAUCAUCCUGCCCUGUUCCCACAAUGUCUGCCUGCCUUGCGCUCGCACCA\
) } def
/len { sequence length } bind def

/coor [
[82.80360413 373.88534546]
[67.70848846 372.88900757]
[53.66081238 367.27493286]
[42.03682709 357.59307861]
[33.97533035 344.79202271]
[30.26610565 330.12582397]
[31.27254486 315.03137207]
[36.89604950 300.98748779]
[46.58568192 289.36996460]
[59.39215469 281.31704712]
[74.06081390 277.61767578]
[75.04871368 262.65023804]
[76.03661346 247.68280029]
[77.02450562 232.71536255]
[78.01240540 217.74792480]
[79.00030518 202.78050232]
[79.98819733 187.81306458]
[73.10591125 174.60385132]
[81.73529053 161.34321594]
[82.72319031 146.37577820]
[83.71109009 131.40834045]
[72.16179657 121.83683777]
[57.63797760 125.58633423]
[43.11416245 129.33583069]
[28.59034348 133.08532715]
[14.06652546 136.83482361]
[-0.45729193 140.58432007]
[-14.98110962 144.33381653]
[-28.80603981 154.14746094]
[-42.06328583 143.57949829]
[-35.57830048 127.91484833]
[-18.73060608 129.80999756]
[-4.20678806 126.06050110]
[10.31702995 122.31100464]
[24.84084702 118.56150818]
[39.36466599 114.81201172]
[53.88848114 111.06251526]
[68.41230011 107.31301880]
[77.73632050 81.25354767]
[101.45349121 74.25418091]
[106.61818695 60.17135620]
[111.78288269 46.08853149]
[109.27025604 30.46811867]
[120.91662598 21.18310928]
[126.08131409 7.10028553]
[119.68618774 -7.10323954]
[125.12454224 -21.31165314]
[138.70483398 -27.32089615]
[143.86953735 -41.40372086]
[149.03422546 -55.48654556]
[154.19892883 -69.56936646]
[151.68629456 -85.18978119]
[163.33267212 -94.47479248]
[168.49736023 -108.55761719]
[161.95864868 -131.49974060]
[179.69618225 -146.37272644]
[182.96510315 -161.01219177]
[186.23403931 -175.65165710]
[189.34196472 -190.32615662]
[192.28852844 -205.03390503]
[183.79319763 -218.09020996]
[186.99093628 -232.96397400]
[199.49047852 -240.98251343]
[202.43702698 -255.69026184]
[205.38357544 -270.39801025]
[208.33013916 -285.10577393]
[211.27668762 -299.81350708]
[202.54530334 -310.12982178]
[201.39164734 -323.39996338]
[208.01498413 -334.73138428]
[219.78860474 -340.07638550]
[223.05754089 -354.71585083]
[226.32647705 -369.35534668]
[229.59539795 -383.99481201]
[224.17433167 -399.47201538]
[235.07115173 -411.72726440]
[251.07614136 -408.15344238]
[255.72473145 -392.42694092]
[244.23487854 -380.72586060]
[240.96594238 -366.08639526]
[237.69700623 -351.44692993]
[234.42807007 -336.80746460]
[244.03994751 -323.04968262]
[240.69862366 -306.25933838]
[225.98443604 -296.86694336]
[223.03787231 -282.15921021]
[220.09132385 -267.45144653]
[217.14477539 -252.74371338]
[214.19822693 -238.03596497]
[222.64422607 -225.82119751]
[219.86550903 -210.86346436]
[206.99627686 -202.08735657]
[204.04971313 -187.37960815]
[205.83372498 -180.14729309]
[200.87350464 -172.38273621]
[197.60458374 -157.74325562]
[194.33564758 -143.10379028]
[199.37327576 -138.66693115]
[202.78199768 -132.82366943]
[204.18612671 -126.15309906]
[203.41058350 -119.32836151]
[200.50187683 -113.04872131]
[195.72680664 -107.96793365]
[189.54820251 -104.62622070]
[182.58018494 -103.39292145]
[177.41548157 -89.31009674]
[180.29753113 -74.69698334]
[168.28175354 -64.40467834]
[163.11705017 -50.32184982]
[157.95236206 -36.23902512]
[152.78765869 -22.15620232]
[159.26293945 -8.79183388]
[154.22583008 5.56372547]
[140.16413879 12.26497936]
[134.99945068 26.34780312]
[137.88148499 40.96091843]
[125.86570740 51.25322723]
[120.70101166 65.33605194]
[115.53631592 79.41887665]
[123.58065033 87.07019806]
[127.91176605 97.79232025]
[127.40283966 109.80741882]
[121.76615143 120.95096588]
[111.67010498 129.06150818]
[98.67852020 132.39624023]
[97.69062042 147.36367798]
[96.70272827 162.33111572]
[103.51435089 176.61090088]
[94.95563507 188.80096436]
[93.96773529 203.76840210]
[92.97983551 218.73582458]
[91.99194336 233.70326233]
[91.00404358 248.67070007]
[90.01614380 263.63812256]
[89.02825165 278.60556030]
[103.08343506 284.20083618]
[114.72038269 293.86709595]
[122.79902649 306.65734863]
[126.52790833 321.31854248]
[125.54169464 336.41430664]
[119.93701935 350.46575928]
[110.26296234 362.09622192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[19 127]
[20 126]
[21 125]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[40 119]
[41 118]
[42 117]
[44 115]
[45 114]
[48 111]
[49 110]
[50 109]
[51 108]
[53 106]
[54 105]
[56 97]
[57 96]
[58 95]
[59 93]
[60 92]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
