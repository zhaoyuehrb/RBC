%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCUCGCGCCAAGGGACGUGUUUCUGCGCUCGCGUGGUCAUGGAGGCGCUGCCGCUGCUAGCCGCGACAACUCCGGACCACGGCCGCCACCGAAGGCUGCUUCUGCUGCCGCUACUGCUGUUCCUGCUGCCGGCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[162.16445923 204.42315674]
[153.83090210 191.95111084]
[145.49736023 179.47906494]
[137.16380310 167.00701904]
[128.83024597 154.53497314]
[120.36114502 142.15457153]
[111.75749969 129.86729431]
[100.51116943 132.09413147]
[89.19963837 130.22657776]
[79.26594543 124.50292206]
[67.16927338 133.37255859]
[55.07260513 142.24220276]
[42.97593689 151.11184692]
[39.91268921 157.10902405]
[34.99718857 160.14727783]
[30.15256500 160.09088135]
[17.68052101 168.42442322]
[5.20847654 176.75798035]
[-7.26356792 185.09153748]
[-19.73561287 193.42509460]
[-26.49953651 208.36434937]
[-42.84364700 209.70675659]
[-51.95452499 196.07136536]
[-44.45967865 181.48509216]
[-28.06916618 180.95304871]
[-15.59712124 172.61949158]
[-3.12507701 164.28593445]
[9.34696674 155.95237732]
[21.81901169 147.61883545]
[34.10629272 139.01518250]
[46.20296097 130.14553833]
[58.29962921 121.27589417]
[70.39630127 112.40625000]
[66.67730713 98.83618164]
[69.11055756 84.43852997]
[77.68180847 71.96652985]
[91.16428375 63.99074173]
[84.52996063 50.53765106]
[77.89562988 37.08455658]
[71.26129913 23.63146782]
[64.62696838 10.17837620]
[57.99263763 -3.27471519]
[51.35830688 -16.72780609]
[44.70555115 -23.09972763]
[44.72959137 -30.54752159]
[38.39031601 -44.14213943]
[32.05104446 -57.73675537]
[25.71176910 -71.33137512]
[19.37249565 -84.92598724]
[4.14465761 -86.36132050]
[-8.23841572 -95.16793060]
[-14.50913239 -108.89907837]
[-13.07449627 -123.82549286]
[-4.41947842 -135.94804382]
[-10.75875282 -149.54266357]
[-17.09802628 -163.13728333]
[-29.94260597 -172.37455750]
[-28.30900955 -187.17930603]
[-34.64828110 -200.77392578]
[-40.98755646 -214.36854553]
[-53.16130829 -226.16838074]
[-45.19264603 -241.13288879]
[-28.60700226 -237.61824036]
[-27.39294052 -220.70780945]
[-21.05366516 -207.11318970]
[-14.71439171 -193.51858521]
[-2.32323885 -185.25367737]
[-3.50340939 -169.47654724]
[2.83586454 -155.88192749]
[9.17513847 -142.28732300]
[24.02488899 -141.12521362]
[36.38135147 -132.62969971]
[42.86928177 -118.99983978]
[41.65584946 -103.85308075]
[32.96711349 -91.26525879]
[39.30638504 -77.67064667]
[45.64566040 -64.07602692]
[51.98493576 -50.48141098]
[58.32420731 -36.88679504]
[64.81139374 -23.36213684]
[71.44572449 -9.90904522]
[78.08005524 3.54404569]
[84.71438599 16.99713707]
[91.34871674 30.45022774]
[97.98304749 43.90332031]
[104.61737823 57.35641098]
[119.01812744 61.55384445]
[131.84181213 53.77224731]
[139.62582397 39.99837494]
[154.52043152 40.01051712]
[167.34411621 32.22891998]
[180.16778564 24.44732094]
[183.68032837 9.03830814]
[197.10415649 0.69707441]
[212.47517395 4.37232542]
[220.67401123 17.88360023]
[216.83645630 33.21489716]
[203.23925781 41.27043152]
[187.94938660 37.27099991]
[175.12570190 45.05259705]
[162.30203247 52.83419418]
[155.43524170 66.05147552]
[139.62339783 66.59592438]
[126.79972839 74.37752533]
[132.24180603 83.80286407]
[134.59101868 94.12879181]
[133.80541992 104.39479828]
[130.12692261 113.69615936]
[124.04477692 121.26364899]
[132.64842224 133.55093384]
[140.19306946 138.83665466]
[141.30229187 146.20141602]
[149.63584900 158.67346191]
[157.96940613 171.14550781]
[166.30294800 183.61755371]
[174.63650513 196.08959961]
[182.50569153 194.67556763]
[190.43515015 195.45962524]
[197.82458496 198.36756897]
[204.11865234 203.16496277]
[208.84866333 209.47598267]
[211.66751099 216.81283569]
[212.37507629 224.61343384]
[210.93240356 232.28446960]
[207.46348572 239.24655151]
[202.24482727 244.97792053]
[208.58409119 258.57254028]
[214.92337036 272.16714478]
[227.76795959 281.40441895]
[226.13435364 296.20916748]
[232.47363281 309.80380249]
[238.81289673 323.39840698]
[250.98664856 335.19824219]
[243.01799011 350.16275024]
[226.43234253 346.64810181]
[225.21829224 329.73767090]
[218.87901306 316.14306641]
[212.53973389 302.54846191]
[200.14859009 294.28353882]
[201.32875061 278.50640869]
[194.98948669 264.91180420]
[188.65020752 251.31718445]
[166.73657227 246.18193054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 112]
[6 110]
[7 109]
[10 33]
[11 32]
[12 31]
[13 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 81]
[43 80]
[45 79]
[46 78]
[47 77]
[48 76]
[49 75]
[54 70]
[55 69]
[56 68]
[58 66]
[59 65]
[60 64]
[87 104]
[88 103]
[90 101]
[91 100]
[92 99]
[126 142]
[127 141]
[128 140]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
