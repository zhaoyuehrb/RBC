%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAACCAAACAAAGAGAAGCAGAGUGGAUCCUGUGCUAAUAUUGGGAAAACCAGGCAACAGGACUCAUUUGGGGCCUUUAUUGUGAAAACAUGCCCCAGCUUUCCCAAGAUAACCAAGAGUGCCUCCAGAAACAUUUCUCCAGGCCGUCUAUAUGGACACAGUUUCUGCCCCUGUUCAGGGCUCAGAGAU\
) } def
/len { sequence length } bind def

/coor [
[113.86148071 186.65400696]
[103.20664978 187.69706726]
[92.50408936 187.43493652]
[81.91309357 185.87153625]
[71.59128571 183.03013611]
[61.69227219 178.95300293]
[52.36338806 173.70082092]
[43.74347305 167.35177612]
[35.96081161 160.00033569]
[29.13123322 151.75592041]
[23.35638237 142.74124146]
[18.72220421 133.09045410]
[15.29766846 122.94717407]
[13.13374138 112.46238708]
[12.26262856 101.79212189]
[12.69729519 91.09518433]
[14.43127155 80.53077698]
[17.43875122 70.25611877]
[3.81277370 63.98454285]
[-9.81320477 57.71296310]
[-23.43918228 51.44138336]
[-37.06516266 45.16980362]
[-43.40967178 51.35537720]
[-52.78927994 54.36940384]
[-63.52307129 52.79208374]
[-78.52257538 52.91416550]
[-93.52207947 53.03624725]
[-108.52158356 53.15832901]
[-123.52108765 53.28040695]
[-137.25782776 61.12976837]
[-150.04765320 53.49630737]
[-165.04714966 53.61838913]
[-180.04666138 53.74047089]
[-195.04615784 53.86255264]
[-210.04566956 53.98463440]
[-225.04516602 54.10671616]
[-240.04318237 54.35086823]
[-255.03871155 54.71708298]
[-270.03424072 55.08329391]
[-261.20852661 67.21205139]
[-265.02719116 81.71783447]
[-278.68087769 87.92887115]
[-292.12469482 81.27574921]
[-295.46813965 66.65312195]
[-286.25256348 54.81927109]
[-301.22824097 53.96515656]
[-316.20388794 53.11104202]
[-329.08459473 62.67488480]
[-344.55538940 58.42818832]
[-350.74838257 43.62865448]
[-342.91287231 29.62921715]
[-327.05957031 27.16904831]
[-315.34979248 38.13537598]
[-300.37411499 38.98949432]
[-285.39846802 39.84360886]
[-270.40045166 40.08776474]
[-255.40492249 39.72155380]
[-240.40939331 39.35533905]
[-233.78924561 36.04405594]
[-225.16725159 39.10721207]
[-210.16773987 38.98513031]
[-195.16824341 38.86304855]
[-180.16873169 38.74096680]
[-165.16923523 38.61888885]
[-150.16972351 38.49680710]
[-137.50585938 30.65617752]
[-123.64316559 38.28090668]
[-108.64366150 38.15882492]
[-93.64415741 38.03674316]
[-78.64465332 37.91466141]
[-63.64515305 37.79257965]
[-55.04706192 25.50141144]
[-60.07525635 11.36927509]
[-65.10345459 -2.76286006]
[-70.13164520 -16.89499474]
[-75.15984344 -31.02713013]
[-80.18804169 -45.15926743]
[-87.56143188 -46.78885269]
[-93.85075378 -50.84373474]
[-98.29669952 -56.77800369]
[-100.38228607 -63.82257843]
[-99.89263153 -71.08473969]
[-96.93611145 -77.66121674]
[-91.92499542 -82.75054932]
[-95.78762054 -97.24468994]
[-99.65024567 -111.73883057]
[-111.60727692 -122.96208954]
[-107.60322571 -138.86491394]
[-91.75712585 -143.08782959]
[-80.37007904 -131.28666687]
[-85.15611267 -115.60145569]
[-81.29347992 -101.10731506]
[-77.43085480 -86.61317444]
[-59.92638779 -72.55486298]
[-66.05590057 -50.18746185]
[-61.02770996 -36.05532455]
[-55.99951172 -21.92319107]
[-50.97131729 -7.79105520]
[-45.94312286 6.34108019]
[-40.91492844 20.47321510]
[-30.79358101 31.54382324]
[-17.16760254 37.81540298]
[-3.54162502 44.08698273]
[10.08435345 50.35856247]
[23.71033096 56.63014221]
[34.30432510 41.81807709]
[47.72735977 29.51149559]
[63.40141296 20.24035263]
[80.65150452 14.40389252]
[98.73479462 12.25344849]
[116.87257385 13.88162613]
[134.28376770 19.21831131]
[150.21859741 28.03368950]
[163.99087524 39.94814682]
[175.00752258 54.44861221]
[182.79412842 70.91065216]
[197.31922913 67.16611481]
[211.84432983 63.42157745]
[226.27366638 59.32354355]
[240.59866333 54.87444687]
[254.92366028 50.42535019]
[262.32440186 36.71889877]
[276.91537476 32.41094971]
[289.93676758 39.55089188]
[304.26177979 35.10179520]
[318.58676147 30.65270042]
[332.91177368 26.20360565]
[340.31250000 12.49715328]
[354.90347290 8.18920326]
[367.92486572 15.32914448]
[382.24984741 10.88004971]
[396.57485962 6.43095446]
[410.89984131 1.98185933]
[421.62738037 -10.42186356]
[437.67993164 -7.06810284]
[442.54400635 8.59308052]
[431.21588135 20.45080376]
[415.34893799 16.30685616]
[401.02395630 20.75595284]
[386.69894409 25.20504761]
[372.37396240 29.65414238]
[365.68859863 42.91466522]
[351.22439575 47.63074493]
[337.36083984 40.52860260]
[323.03585815 44.97769928]
[308.71084595 49.42679214]
[294.38586426 53.87588882]
[287.70050049 67.13641357]
[273.23629761 71.85249329]
[259.37277222 64.75035095]
[245.04776001 69.19944763]
[230.72276306 73.64853668]
[228.76399231 76.59754181]
[225.27227783 78.73810577]
[220.64610291 79.35683441]
[215.58886719 77.94667816]
[201.06376648 81.69121552]
[186.53866577 85.43574524]
[187.72320557 102.38697052]
[185.61860657 119.24869537]
[180.30378723 135.38870239]
[171.97801208 150.20182800]
[160.95347595 163.13265991]
[147.64350891 173.69636536]
[154.68078613 186.94313049]
[161.71807861 200.18988037]
[168.75535583 213.43664551]
[175.79263306 226.68341064]
[182.82992554 239.93016052]
[189.86720276 253.17692566]
[205.69943237 262.56646729]
[204.41455078 280.06188965]
[211.66651917 293.19235229]
[218.91848755 306.32281494]
[226.17044067 319.45327759]
[240.48600769 327.45309448]
[240.44515991 343.85217285]
[226.08995056 351.78057861]
[212.18775940 343.08224487]
[213.03999329 326.70523071]
[205.78802490 313.57479858]
[198.53605652 300.44433594]
[191.28408813 287.31387329]
[179.74382019 283.65615845]
[173.59774780 272.76339722]
[176.62043762 260.21420288]
[169.58316040 246.96745300]
[162.54586792 233.72068787]
[155.50859070 220.47392273]
[148.47131348 207.22717285]
[141.43403625 193.98040771]
[134.39674377 180.73364258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 58]
[38 57]
[39 56]
[45 55]
[46 54]
[47 53]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[84 93]
[85 92]
[86 91]
[116 158]
[117 157]
[118 156]
[119 152]
[120 151]
[121 150]
[124 147]
[125 146]
[126 145]
[127 144]
[130 141]
[131 140]
[132 139]
[133 138]
[164 192]
[165 191]
[166 190]
[167 189]
[168 188]
[169 187]
[170 186]
[172 183]
[173 182]
[174 181]
[175 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
