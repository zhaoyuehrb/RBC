%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCAUGGACGAGCAGGCGGGUCCCGGCGUCUUCUUCAGCAACAACCACCCGGGCGCCGGCGGUGCCAAGGGGCUCGGGCCUCUGGCGGAGGCUGCCGCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[86.80988312 222.35217285]
[89.54975128 203.16513062]
[89.97808838 188.17124939]
[90.40643311 173.17735291]
[90.83477020 158.18347168]
[91.26311493 143.18959045]
[91.69145203 128.19570923]
[92.11979675 113.20182800]
[85.92875671 108.96850586]
[72.40539551 115.45839691]
[73.54667664 100.50185394]
[67.35563660 96.26853180]
[53.53878403 102.10758209]
[39.72192764 107.94663239]
[25.90507317 113.78568268]
[24.08875847 129.03680420]
[14.87738037 141.32688904]
[0.74875158 147.34996033]
[-14.49659729 145.48583984]
[-26.75774384 136.23599243]
[-32.73650360 122.08855438]
[-30.82461548 106.84912109]
[-21.53637123 94.61702728]
[-7.37026024 88.68264771]
[7.86310291 90.64228821]
[20.06602097 99.96883392]
[33.88287735 94.12977600]
[47.69972992 88.29072571]
[61.51658630 82.45167542]
[86.26226044 77.95118713]
[100.27588654 90.34278107]
[109.43560028 78.46424866]
[118.59532166 66.58571625]
[127.58448792 54.57759857]
[136.40126038 42.44234467]
[145.21804810 30.30708885]
[154.03482056 18.17183304]
[162.85160828 6.03657866]
[171.66838074 -6.09867620]
[173.52030945 -21.81112099]
[187.26081848 -27.55982971]
[196.07760620 -39.69508362]
[204.89437866 -51.83033752]
[213.71115112 -63.96559525]
[208.44088745 -72.18905640]
[205.71684265 -81.54412842]
[205.74836731 -91.26393127]
[208.51945496 -100.55562592]
[213.79119873 -108.66509247]
[221.12229919 -114.93811798]
[229.90599060 -118.87318420]
[239.42028809 -120.16155243]
[248.88725281 -118.71141815]
[257.53665161 -114.65434265]
[268.29364014 -125.10840607]
[279.05059814 -135.56246948]
[289.80758667 -146.01654053]
[300.56457520 -156.47059631]
[311.32153320 -166.92466736]
[322.07852173 -177.37872314]
[326.58264160 -192.54524231]
[341.10220337 -195.86669922]
[351.85916138 -206.32075500]
[362.31323242 -217.07774353]
[372.45584106 -228.12886047]
[382.59848022 -239.17997742]
[388.85391235 -254.93769836]
[405.72750854 -253.28889465]
[408.81420898 -236.61830139]
[393.64959717 -229.03735352]
[383.50695801 -217.98623657]
[373.36434937 -206.93511963]
[372.68875122 -202.06890869]
[368.85134888 -197.62333679]
[362.31323242 -195.56378174]
[351.55624390 -185.10972595]
[347.82153320 -170.69094849]
[332.53259277 -166.62174988]
[321.77560425 -156.16767883]
[311.01861572 -145.71362305]
[300.26165771 -135.25955200]
[289.50466919 -124.80549622]
[278.74768066 -114.35143280]
[267.99072266 -103.89736938]
[272.90911865 -83.69684601]
[264.91757202 -64.36383820]
[246.95138550 -53.39761353]
[225.84640503 -55.14881516]
[217.02963257 -43.01356125]
[208.21286011 -30.87830544]
[199.39607239 -18.74305153]
[198.17477417 -3.89860034]
[183.80363464 2.71810269]
[174.98686218 14.85335732]
[166.17007446 26.98861313]
[157.35330200 39.12386703]
[148.53651428 51.25912094]
[139.71974182 63.39437866]
[138.31335449 70.76519775]
[130.47386169 75.74543762]
[121.31413269 87.62397003]
[112.15441895 99.50250244]
[107.11367798 113.63016510]
[106.68533325 128.62405396]
[106.25699615 143.61793518]
[105.82865143 158.61181641]
[105.40031433 173.60569763]
[104.97197723 188.59957886]
[104.54363251 203.59346008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[12 29]
[13 28]
[14 27]
[15 26]
[31 102]
[32 101]
[33 100]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[41 91]
[42 90]
[43 89]
[44 88]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[62 76]
[63 75]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
