%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGUCGGGUCGGCGGGUGGAUGAACGCGGCCCUCUGUAAUGGCGGAGCGUGGCGGGGACGGGGGCGAGAGUGAACGAUUCAACCCGGGGGAGCUCAGGAUGGCCCAACAGCAGGCCUUGAGGUUCCGAGGUCCGGCUC\
) } def
/len { sequence length } bind def

/coor [
[92.37347412 271.03234863]
[77.94172668 265.01083374]
[70.80287933 251.09783936]
[74.32767487 235.86270142]
[86.85182190 226.49893188]
[87.52001953 211.51382446]
[88.18822479 196.52871704]
[88.85643005 181.54360962]
[89.52462769 166.55850220]
[90.19283295 151.57339478]
[90.86103821 136.58828735]
[91.52923584 121.60317230]
[81.76011658 114.34425354]
[77.00878143 103.13924408]
[78.58232117 91.07062531]
[67.34613800 81.13340759]
[56.10995483 71.19618988]
[44.87377548 61.25897980]
[33.63759232 51.32176208]
[22.29140663 41.51033783]
[10.83662415 31.82592010]
[-0.61815870 22.14150238]
[-12.07294178 12.45708561]
[-31.89006233 15.26970387]
[-47.23459244 2.89305735]
[-48.63716507 -16.46818924]
[-60.71321487 -25.36588669]
[-76.72131348 -20.02435684]
[-92.61063385 -25.19700050]
[-102.21393585 -38.66895294]
[-101.92735291 -55.04515839]
[-114.19863892 -63.67160416]
[-126.46991730 -72.29804993]
[-138.74121094 -80.92449951]
[-147.63911438 -83.32942200]
[-151.18687439 -89.88234711]
[-163.26292419 -98.78004456]
[-175.33897400 -107.67774200]
[-187.41502380 -116.57543182]
[-201.47010803 -110.54201508]
[-216.55842590 -112.34190369]
[-228.63967896 -121.39229584]
[-234.52934265 -135.18243408]
[-232.73774719 -149.96943665]
[-244.81379700 -158.86714172]
[-259.56182861 -154.04267883]
[-274.31860352 -158.84030151]
[-283.40985107 -171.41523743]
[-283.33978271 -186.93214417]
[-274.13537598 -199.42448425]
[-259.33587646 -204.08866882]
[-244.63201904 -199.13124084]
[-235.67771912 -186.45843506]
[-235.91609192 -170.94319153]
[-223.84004211 -162.04548645]
[-210.24774170 -168.13768005]
[-195.33178711 -166.59812927]
[-183.10835266 -157.74069214]
[-176.91897583 -143.86308289]
[-178.51733398 -128.65148926]
[-166.44128418 -119.75379181]
[-154.36523438 -110.85609436]
[-142.28918457 -101.95839691]
[-130.11476135 -93.19578552]
[-117.84347534 -84.56933594]
[-105.57218933 -75.94289398]
[-93.30090332 -67.31644440]
[-81.08070374 -72.80284119]
[-67.63953400 -71.50372314]
[-56.51894379 -63.65338898]
[-50.70246887 -51.22641373]
[-51.81552124 -37.44193649]
[-39.73947144 -28.54424095]
[-30.24897003 -32.80618286]
[-19.76474953 -32.70064163]
[-10.21517277 -28.17901993]
[-3.38515234 -20.01122093]
[-0.58263212 -9.65536022]
[-2.38852382 1.00230229]
[9.06625938 10.68671989]
[20.52104187 20.37113762]
[31.97582436 30.05555534]
[39.17268372 31.98757553]
[43.57480621 40.08558273]
[54.81098938 50.02279663]
[66.04717255 59.96001053]
[77.28334808 69.89722443]
[88.51953125 79.83444214]
[109.76760101 78.95137024]
[122.81158447 95.74763489]
[137.65455627 97.91242981]
[152.49751282 100.07722473]
[167.34048462 102.24201202]
[182.11282349 96.57734680]
[193.59020996 106.07044220]
[208.43318176 108.23522949]
[223.27615356 110.40002441]
[238.11912537 112.56481171]
[252.96208191 114.72960663]
[257.95913696 112.72951508]
[262.73226929 112.88640594]
[266.48028564 114.73813629]
[268.71099854 117.56690216]
[283.37622070 120.71826172]
[298.04144287 123.86962128]
[312.70669556 127.02098083]
[324.17089844 116.56386566]
[339.59588623 114.87583923]
[353.05041504 122.60598755]
[359.36096191 136.78190613]
[356.10095215 151.95266724]
[344.52398682 162.28480530]
[329.08157349 163.80540466]
[315.71170044 155.92974854]
[309.55532837 141.68620300]
[294.89010620 138.53485107]
[280.22485352 135.38349915]
[265.55963135 132.23213196]
[250.79728699 129.57257080]
[235.95433044 127.40778351]
[221.11135864 125.24298859]
[206.26838684 123.07820129]
[191.42543030 120.91340637]
[177.71475220 126.73291016]
[165.17568970 117.08498383]
[150.33273315 114.92018890]
[135.48976135 112.75539398]
[120.64678955 110.59060669]
[117.06193542 115.72708130]
[112.23385620 119.71759796]
[106.51435089 122.27137756]
[105.84614563 137.25648499]
[105.17794037 152.24159241]
[104.50973511 167.22669983]
[103.84153748 182.21180725]
[103.17333221 197.19692993]
[102.50512695 212.18203735]
[101.83692932 227.16714478]
[113.47793579 237.60844421]
[115.63273621 253.09686279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 138]
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[11 132]
[12 131]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 82]
[21 81]
[22 80]
[23 79]
[26 73]
[27 72]
[31 67]
[32 66]
[33 65]
[34 64]
[36 63]
[37 62]
[38 61]
[39 60]
[44 55]
[45 54]
[90 128]
[91 127]
[92 126]
[93 125]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[103 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
