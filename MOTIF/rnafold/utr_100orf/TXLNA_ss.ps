%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGGGGAAGCCAUCGGACGUCGGCGGUGAGGAUCUUCUCCUGACCCAGCAUCGCUCAUCACAAUGAAGAACCAAGACAAAAAGAACGGGGCUGCCAAACAAUCCAAUCCAAAAAGCAGCCCAGGACAACCGGAAGCAGGACCCGAGGGAGCCCAGGAGCGGC\
) } def
/len { sequence length } bind def

/coor [
[34.19969177 423.21496582]
[31.48931694 408.22915649]
[35.11484146 393.43811035]
[44.44812012 381.40441895]
[57.87210464 374.21298218]
[56.73767471 359.25595093]
[55.60324478 344.29891968]
[54.46881104 329.34185791]
[42.48445129 323.40319824]
[34.94832611 312.22235107]
[33.92405319 298.66915894]
[39.78695679 286.28677368]
[51.09774780 278.36560059]
[50.24657059 263.38977051]
[46.71186447 256.86132812]
[49.52371216 248.12300110]
[48.95608902 233.13375854]
[48.38846588 218.14450073]
[47.82084656 203.15524292]
[44.95681763 199.28334045]
[44.52442169 193.56100464]
[47.52624130 187.59030151]
[47.52624130 172.59030151]
[47.52624130 157.59030151]
[37.93841553 142.91442871]
[47.21974945 127.03401184]
[46.93589020 112.03669739]
[35.55749893 102.26263428]
[20.68893242 104.24398041]
[5.82036638 106.22532654]
[-6.83686829 115.71768951]
[-20.47463799 109.72932434]
[-35.34320450 111.71067047]
[-50.21177292 113.69201660]
[-65.08033752 115.67336273]
[-75.92954254 127.49175262]
[-91.92324829 126.23445892]
[-100.79246521 112.86595917]
[-95.73347473 97.64143372]
[-80.62711334 92.23983002]
[-67.06168365 100.80479431]
[-52.19311523 98.82344818]
[-37.32455063 96.84210205]
[-22.45598221 94.86075592]
[-10.86224747 85.51011658]
[3.83902192 91.35675812]
[18.70758820 89.37541199]
[33.57615662 87.39407349]
[36.08193588 80.32505035]
[21.08720207 79.92764282]
[16.83155441 65.54399109]
[29.19616890 57.05185318]
[41.09349823 66.18700409]
[43.59928131 59.11798477]
[33.29801178 48.21459961]
[20.42263794 47.06056976]
[12.06626415 37.72993088]
[12.31780338 25.60836983]
[2.22471523 14.51199245]
[-7.86837244 3.41561556]
[-17.96146011 -7.68076134]
[-33.73945236 -12.15144444]
[-37.49383926 -28.11504745]
[-25.36243248 -39.14958191]
[-9.82498074 -33.90366745]
[-6.86508369 -17.77384949]
[3.22800422 -6.67747211]
[13.32109165 4.41890430]
[23.41418076 15.51528168]
[40.38185120 19.92050552]
[44.20139694 37.91333008]
[54.50266647 48.81671524]
[50.68981552 34.30940247]
[46.87696075 19.80208778]
[43.06410980 5.29477358]
[34.75276566 -7.19208288]
[31.57597160 -21.85182190]
[33.97261047 -36.65912247]
[41.61157990 -49.56827164]
[53.43751526 -58.79580307]
[67.81658936 -63.06687927]
[82.76226807 -61.79143143]
[96.20971680 -55.14566803]
[106.30109406 -44.04773712]
[111.64222717 -30.03088188]
[111.49520874 -15.03160191]
[105.88034821 -1.12213266]
[95.57134247 9.77732372]
[89.35459900 23.42840958]
[83.13786316 37.07949448]
[76.92111969 50.73058319]
[88.92150116 41.73109055]
[100.92188263 32.73159790]
[112.92226410 23.73210716]
[124.92264557 14.73261642]
[136.92303467 5.73312473]
[148.92341614 -3.26636696]
[143.61947632 -17.41009331]
[142.51652527 -32.47529221]
[145.70394897 -47.24068832]
[152.92335510 -60.50932693]
[163.58952332 -71.20557404]
[176.83776855 -78.46232605]
[191.59413147 -81.69132233]
[206.66238403 -80.63079834]
[220.82098389 -75.36672211]
[232.92218018 -66.32583618]
[241.98498535 -54.24103546]
[247.27470398 -40.09198761]
[248.36253357 -25.02569199]
[245.16027832 -10.26350212]
[237.92753601 2.99787498]
[227.25062561 13.68339920]
[213.99510193 20.92684364]
[199.23548889 24.14101410]
[184.16831970 23.06535149]
[170.01501465 17.78705597]
[157.92289734 8.73401451]
[145.92251587 17.73350525]
[133.92213440 26.73299789]
[121.92176056 35.73249054]
[109.92137909 44.73197937]
[97.92099762 53.73147202]
[85.92061615 62.73096466]
[118.54518890 70.98723602]
[128.95175171 97.90921021]
[143.68392944 100.73108673]
[158.98898315 94.84148407]
[171.57020569 105.36026764]
[168.48512268 121.46661377]
[152.90739441 126.59169006]
[140.86206055 115.46326447]
[126.12987518 112.64138794]
[118.67364502 124.98181915]
[105.43161011 132.90695190]
[89.00630188 133.77033997]
[73.15557861 126.43773651]
[61.93320084 111.75283813]
[62.21706390 126.75015259]
[70.96521759 136.26733398]
[70.86858368 148.79252625]
[62.52624130 157.59030151]
[62.52624130 172.59030151]
[62.52624130 187.59030151]
[62.81010056 202.58761597]
[63.37772369 217.57687378]
[63.94534683 232.56613159]
[64.51296997 247.55538940]
[65.22239685 262.53860474]
[66.07357788 277.51443481]
[80.40979004 286.45071411]
[86.54905701 302.01077271]
[82.26273346 318.00796509]
[69.42584991 328.20742798]
[70.56028748 343.16448975]
[71.69471741 358.12152100]
[72.82914734 373.07855225]
[87.18421173 378.16305542]
[98.22569275 388.65139771]
[104.04059601 402.72644043]
[103.62145233 417.94958496]
[97.04087067 431.68334961]
[85.43898773 441.54824829]
[70.82589722 445.83514404]
[55.73340225 443.80130005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 157]
[6 156]
[7 155]
[8 154]
[13 150]
[14 149]
[16 148]
[17 147]
[18 146]
[19 145]
[22 144]
[23 143]
[24 142]
[26 139]
[27 138]
[28 48]
[29 47]
[30 46]
[32 44]
[33 43]
[34 42]
[35 41]
[54 72]
[55 71]
[58 69]
[59 68]
[60 67]
[61 66]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
