%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGCCGCCCGGCACCCGAGGAGAGGGCGGCGGGCGCCCCUCGGGGAAGAUGAAGGCGGAGGGGGGCGACCACUCCAUGAUCAACCUGUCGGUGCAGCAGGUCCUGAGCCUCUGGGCCCACGGGACGGUGCUGAGGAACCUCACGGAGA\
) } def
/len { sequence length } bind def

/coor [
[107.75829315 134.48603821]
[93.79452515 135.67631531]
[80.12651825 131.29977417]
[68.93691254 121.78374481]
[58.11337280 132.16886902]
[47.28983307 142.55400085]
[36.46628952 152.93913269]
[25.64274788 163.32426453]
[14.81920528 173.70939636]
[3.99566364 184.09452820]
[-6.82787800 194.47966003]
[-17.65142059 204.86479187]
[-14.76485348 218.37936401]
[-18.91583061 231.44685364]
[-28.91287422 240.67111206]
[-42.06010437 243.71075439]
[-54.88368988 239.87284851]
[-65.91954803 250.03207397]
[-73.47769928 265.20806885]
[-90.15291595 262.14642334]
[-91.82707214 245.27532959]
[-76.07877350 238.99621582]
[-65.04291534 228.83699036]
[-67.46915436 212.63078308]
[-59.69995499 198.01473999]
[-44.61011505 190.81738281]
[-28.03655052 194.04124451]
[-17.21300888 183.65611267]
[-6.38946676 173.27098083]
[4.43407488 162.88584900]
[15.25761700 152.50071716]
[26.08115959 142.11560059]
[36.90470123 131.73046875]
[47.72824097 121.34532928]
[58.55178452 110.96019745]
[57.31309509 96.01143646]
[44.92783356 87.54943848]
[29.16838837 86.15287018]
[23.02454948 72.58443451]
[10.63929081 64.12243652]
[-1.74596834 55.66044235]
[-14.13122749 47.19844818]
[-26.51648712 38.73645401]
[-38.90174484 30.27445984]
[-51.20360565 39.13109970]
[-65.79356384 43.24315262]
[-80.90981293 42.11405945]
[-94.72698975 35.88016891]
[-105.57660675 25.29425430]
[-112.14852142 11.63461399]
[-113.64913177 -3.44928288]
[-109.89724731 -18.13598251]
[-101.34591675 -30.65199661]
[-89.02776337 -39.48595047]
[-74.43025208 -43.57110596]
[-59.31610870 -42.41416168]
[-45.51044083 -36.15481949]
[-34.68035126 -25.54892540]
[-28.13362312 -11.87719727]
[-26.66080666 3.20943952]
[-30.43975067 17.88920021]
[-18.05449295 26.35119438]
[-5.66923285 34.81319046]
[6.71602631 43.27518463]
[19.10128593 51.73717880]
[31.48654556 60.19917297]
[46.36011505 60.99048233]
[53.38983154 75.16417694]
[65.77508545 83.62617493]
[75.43653870 72.22830200]
[88.47895813 65.66963959]
[102.70523071 64.75571442]
[115.83200836 69.36523438]
[125.85607910 78.51136780]
[131.35968018 90.53860474]
[146.33085632 89.60912323]
[161.30203247 88.67964172]
[176.27319336 87.75016022]
[189.56741333 79.17259216]
[202.74966431 86.10637665]
[217.72084045 85.17689514]
[232.69201660 84.24741364]
[230.04339600 69.99874878]
[235.71171570 57.24580002]
[247.14958191 50.22799683]
[260.01461792 50.89884949]
[269.80737305 58.41717529]
[284.09225464 53.84093094]
[298.37713623 49.26468658]
[312.66201782 44.68843842]
[326.94689941 40.11219406]
[337.72863770 28.53356552]
[352.20968628 32.01912308]
[366.49456787 27.44287682]
[380.77944946 22.86663246]
[391.56118774 11.28800392]
[406.04220581 14.77355957]
[420.32711792 10.19731426]
[434.61199951 5.62106943]
[441.88497925 -0.01162414]
[449.23959351 1.10116291]
[463.61602783 -3.17888045]
[477.99243164 -7.45892382]
[492.36883545 -11.73896694]
[501.23834229 -25.10727692]
[517.23205566 -26.36424255]
[528.08105469 -14.54562664]
[525.46282959 1.28233969]
[511.38589478 8.97779560]
[496.64889526 2.63744497]
[482.27246094 6.91748857]
[467.89605713 11.19753170]
[453.51965332 15.47757530]
[439.18823242 19.90595627]
[424.90335083 24.48220062]
[410.61846924 29.05844688]
[400.85845947 40.30974960]
[385.35568237 37.15151978]
[371.07080078 41.72776413]
[356.78591919 46.30400848]
[347.02593994 57.55531311]
[331.52316284 54.39707947]
[317.23828125 58.97332764]
[302.95336914 63.54957199]
[288.66848755 68.12581635]
[274.38360596 72.70206451]
[273.25128174 81.87139893]
[267.93280029 90.20407104]
[259.00225830 95.78816223]
[268.45812988 107.43233490]
[277.91400146 119.07650757]
[293.40084839 118.10861206]
[306.48080444 126.45691681]
[312.12435913 140.91133118]
[308.16143799 155.91381836]
[296.11587524 165.69564819]
[280.61944580 166.49546814]
[267.63079834 158.00576782]
[262.14437866 143.49098206]
[266.26980591 128.53236389]
[256.81396484 116.88819122]
[247.35809326 105.24401855]
[233.62149048 99.21858978]
[218.65032959 100.14807129]
[203.67915344 101.07755280]
[191.45578003 109.58863068]
[177.20268250 102.72133636]
[162.23150635 103.65081787]
[147.26033020 104.58029938]
[132.28915405 105.50978088]
[128.43969727 117.92989349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[17 23]
[18 22]
[36 69]
[37 68]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[75 150]
[76 149]
[77 148]
[78 147]
[80 145]
[81 144]
[82 143]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[93 120]
[94 119]
[95 118]
[97 116]
[98 115]
[99 114]
[101 113]
[102 112]
[103 111]
[104 110]
[129 142]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
