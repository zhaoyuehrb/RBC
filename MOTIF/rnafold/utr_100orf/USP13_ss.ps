%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:05:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGCUGGCGCCGCCGCCGCCGGCAGACCCCGCGCUCCGGCUCCGGCUCGGCUCGCUCGGCUCCGGUGCGCGCCGAGGCCAUGCAGCGCCGGGGCGCCCUGUUCGGCAUGCCGGGCGGCAGCGGAGGCAGGAAGAUGGCUGCAGGAGACAUCGGCGAGCUGCUAGUGCCCCACAUGCCCA\
) } def
/len { sequence length } bind def

/coor [
[148.78727722 249.00955200]
[143.46820068 234.98431396]
[138.14912415 220.95906067]
[132.83006287 206.93382263]
[127.51098633 192.90858459]
[122.19190979 178.88333130]
[116.87283325 164.85809326]
[111.55376434 150.83285522]
[106.23468781 136.80760193]
[81.76728821 127.99968719]
[71.41304016 107.25685883]
[77.51215363 87.81993103]
[66.99748993 77.12218475]
[56.48282242 66.42443848]
[45.96815872 55.72668839]
[30.77643204 51.30831146]
[27.37301254 36.80775833]
[16.85834694 26.11001015]
[6.34368277 15.41226196]
[-4.17098236 4.71451330]
[-14.68564701 -5.98323536]
[-25.20031166 -16.68098450]
[-35.80691528 -27.28758621]
[-46.50466156 -37.80224991]
[-57.20241165 -48.31691360]
[-67.90016174 -58.83158112]
[-83.47695160 -58.86584091]
[-94.17620850 -69.68159485]
[-94.04755402 -84.53147888]
[-104.74530029 -95.04615021]
[-126.45442963 -93.17420959]
[-142.29634094 -107.72037506]
[-142.27952576 -128.94496155]
[-153.84381104 -138.49833679]
[-165.40811157 -148.05171204]
[-176.97241211 -157.60508728]
[-188.53671265 -167.15846252]
[-200.10101318 -176.71183777]
[-211.66529846 -186.26522827]
[-223.22959900 -195.81860352]
[-234.79389954 -205.37197876]
[-246.35820007 -214.92535400]
[-265.39114380 -208.90449524]
[-284.07556152 -215.51373291]
[-294.93090820 -231.92346191]
[-293.72180176 -251.41769409]
[-305.91766357 -260.15048218]
[-318.11349487 -268.88323975]
[-330.38424683 -277.51043701]
[-342.72900391 -286.03143311]
[-355.07376099 -294.55239868]
[-367.41851807 -303.07336426]
[-379.76327515 -311.59432983]
[-395.51589966 -313.06604004]
[-401.59494019 -326.66363525]
[-413.93969727 -335.18460083]
[-426.28445435 -343.70559692]
[-438.70230103 -352.11968994]
[-451.19229126 -360.42633057]
[-463.68228149 -368.73294067]
[-480.07391357 -369.22961426]
[-487.60021973 -383.79968262]
[-478.51876831 -397.45471191]
[-462.17181396 -396.14755249]
[-455.37567139 -381.22293091]
[-442.88568115 -372.91632080]
[-430.39566040 -364.60968018]
[-423.06591797 -363.52078247]
[-417.76348877 -356.05035400]
[-405.41873169 -347.52935791]
[-393.07397461 -339.00839233]
[-378.20434570 -338.14614868]
[-371.24230957 -323.93908691]
[-358.89755249 -315.41812134]
[-346.55279541 -306.89715576]
[-334.20803833 -298.37619019]
[-321.86328125 -289.85522461]
[-314.55340576 -288.63995361]
[-309.38070679 -281.07910156]
[-297.18487549 -272.34631348]
[-284.98901367 -263.61352539]
[-276.08352661 -268.98318481]
[-265.85864258 -271.07870483]
[-255.48297119 -269.63452148]
[-246.15103149 -264.79101562]
[-238.94583130 -257.08151245]
[-234.71311951 -247.37351990]
[-233.96221924 -236.77114868]
[-236.80482483 -226.48965454]
[-225.24052429 -216.93627930]
[-213.67622375 -207.38288879]
[-202.11192322 -197.82951355]
[-190.54763794 -188.27613831]
[-178.98333740 -178.72276306]
[-167.41903687 -169.16938782]
[-155.85473633 -159.61601257]
[-144.29043579 -150.06263733]
[-132.72613525 -140.50924683]
[-124.86437988 -144.19726562]
[-116.18624878 -145.12281799]
[-107.63864899 -143.15635681]
[-100.16358948 -138.48544312]
[-94.59434509 -131.59727478]
[-91.56262207 -123.22798157]
[-91.42697144 -114.28400421]
[-94.23063660 -105.74389648]
[-83.53289032 -95.22923279]
[-68.68743896 -95.61418152]
[-57.68861389 -85.10321045]
[-57.38549423 -69.52932739]
[-46.68774414 -59.01466370]
[-35.98999786 -48.50000000]
[-25.29224968 -37.98533249]
[-18.29973984 -35.53259659]
[-14.50256348 -27.19564819]
[-3.98789859 -16.49790001]
[6.52676630 -5.80015182]
[17.04143143 4.89759684]
[27.55609512 15.59534550]
[38.07076263 26.29309273]
[52.51040649 29.94629669]
[56.66590500 45.21202087]
[67.18057251 55.90977097]
[77.69523621 66.60752106]
[88.20989990 77.30526733]
[103.75817108 70.74675751]
[122.39807129 75.20603943]
[136.35543823 91.51747894]
[151.34649658 90.99973297]
[166.33757019 90.48199463]
[181.32862854 89.96424866]
[189.89865112 77.02848053]
[204.44715881 71.63211060]
[219.37992859 75.85015869]
[228.95501709 88.06069946]
[229.49060059 103.56852722]
[220.78074646 116.41056824]
[206.17456055 121.64879608]
[191.28843689 117.26900482]
[181.84635925 104.95531464]
[166.85530090 105.47305298]
[151.86424255 105.99079895]
[136.87318420 106.50853729]
[132.71986389 112.75354004]
[146.12397766 119.48627472]
[160.94325256 121.80771637]
[166.98118591 135.53883362]
[158.67503357 148.02912903]
[143.67724609 147.77131653]
[135.80523682 135.00173950]
[124.41324615 125.24353027]
[120.25993347 131.48852539]
[125.57901001 145.51377869]
[130.89808655 159.53901672]
[136.21714783 173.56425476]
[141.53622437 187.58950806]
[146.85530090 201.61474609]
[152.17437744 215.63999939]
[157.49345398 229.66523743]
[162.81251526 243.69047546]
[180.21694946 256.16369629]
[176.14511108 276.38290405]
[182.18301392 290.11401367]
[196.63735962 295.92001343]
[202.56504822 309.93133545]
[196.94084167 323.67556763]
[202.97875977 337.40667725]
[209.01666260 351.13781738]
[220.92721558 363.20327759]
[212.63044739 377.98840332]
[196.12635803 374.10879517]
[195.28553772 357.17572021]
[189.24763489 343.44461060]
[183.20973206 329.71347046]
[169.27922058 324.56793213]
[162.96032715 310.72863770]
[168.45188904 296.15191650]
[162.41398621 282.42080688]
[153.68220520 280.57931519]
[146.68011475 274.82739258]
[143.06985474 266.36587524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[12 125]
[13 124]
[14 123]
[15 122]
[17 120]
[18 119]
[19 118]
[20 117]
[21 116]
[22 115]
[23 113]
[24 112]
[25 111]
[26 110]
[29 107]
[30 106]
[33 98]
[34 97]
[35 96]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[42 89]
[46 81]
[47 80]
[48 79]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[55 71]
[56 70]
[57 69]
[58 67]
[59 66]
[60 65]
[128 143]
[129 142]
[130 141]
[131 140]
[162 178]
[163 177]
[166 174]
[167 173]
[168 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
