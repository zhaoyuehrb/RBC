%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAUGGAUCAGGUGGCAACCUUGCGGCUUGAGUCUGUCGACCUGCAGAGCUCCAGGAACAACAAGGAGCACCACACGCAGGAGAUGGGCGUCAAGCGGCUCA\
) } def
/len { sequence length } bind def

/coor [
[91.36631012 230.23922729]
[93.52024078 245.08378601]
[90.60836029 259.79843140]
[82.96301270 272.70379639]
[71.45676422 282.32702637]
[57.40280914 287.56976318]
[42.40513229 287.83370972]
[28.17541313 283.08868408]
[16.33768845 273.87628174]
[8.24299526 261.24792480]
[4.81518126 246.64482117]
[6.44546223 231.73368835]
[12.94923782 218.21423340]
[-0.39561841 225.06367493]
[-13.74047470 231.91310120]
[-27.08533096 238.76254272]
[-35.51663971 252.82829285]
[-51.90691757 252.28892517]
[-59.39524841 237.69931030]
[-50.27827835 224.06797791]
[-33.93476868 225.41769409]
[-20.58991241 218.56825256]
[-7.24505711 211.71881104]
[6.09979963 204.86936951]
[10.04044151 197.97261047]
[18.28621101 194.67790222]
[27.38821411 182.75509644]
[28.96109581 167.94377136]
[43.48506927 161.66963196]
[52.58707428 149.74681091]
[61.68907547 137.82400513]
[70.79107666 125.90118408]
[79.89308167 113.97837067]
[88.99507904 102.05554962]
[97.91941071 89.99916840]
[106.66410065 77.81186676]
[115.40879059 65.62455750]
[124.15348816 53.43725586]
[132.89817810 41.24995422]
[141.64286804 29.06265068]
[150.38755798 16.87534714]
[149.07936096 3.93803358]
[156.74644470 -6.06110764]
[168.78475952 -8.02404785]
[177.88674927 -19.94686508]
[186.98875427 -31.86968040]
[196.09075928 -43.79249573]
[205.19276428 -55.71531296]
[198.35963440 -74.29084015]
[203.83929443 -93.16393280]
[219.33558655 -105.02156830]
[238.70495605 -105.37188721]
[246.33291626 -118.28753662]
[253.96087646 -131.20318604]
[261.58883667 -144.11885071]
[269.21682739 -157.03450012]
[261.11056519 -170.01707458]
[259.97772217 -185.28060913]
[266.07858276 -199.31762695]
[278.01119995 -208.90255737]
[293.03359985 -211.83282471]
[307.69369507 -207.43508911]
[318.62271118 -196.71992493]
[323.30926514 -182.14958191]
[320.67642212 -167.07223511]
[311.32913208 -154.95252991]
[297.41540527 -148.57550049]
[282.13247681 -149.40653992]
[274.50451660 -136.49087524]
[266.87652588 -123.57522583]
[259.24856567 -110.65956879]
[251.62060547 -97.74391937]
[257.91418457 -89.09416962]
[260.90008545 -78.78196716]
[260.19671631 -68.03044128]
[255.86170959 -58.12420654]
[248.38818359 -50.25584030]
[238.64881897 -45.38235092]
[227.79389954 -44.10879898]
[217.11558533 -46.61331177]
[208.01358032 -34.69049454]
[198.91157532 -22.76767921]
[189.80957031 -10.84486198]
[180.70756531 1.07795453]
[179.48161316 18.51474380]
[162.57485962 25.62004089]
[153.83016968 37.80734253]
[145.08547974 49.99464798]
[136.34078979 62.18194962]
[127.59609985 74.36925507]
[118.85140228 86.55655670]
[110.10671234 98.74385834]
[108.29511261 106.74272156]
[100.91790009 111.15755463]
[91.81589508 123.08036804]
[82.71389008 135.00318909]
[73.61189270 146.92601013]
[64.50988770 158.84881592]
[55.40788651 170.77163696]
[53.18396759 186.43576050]
[39.31103134 191.85708618]
[30.20902824 203.77990723]
[44.66322708 199.77040100]
[59.62767029 200.80262756]
[73.39446259 206.75874329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 24]
[14 23]
[15 22]
[16 21]
[26 102]
[27 101]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 92]
[36 91]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
