%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCAGAGAGCUGAGGCACCAUGCAUGGGGGCCAGGGGCCGCUGCUCCUCCUGCUGCUGCUGGCUGUCUGCCUGGGGGCCCAGGGCCGGAACCAGGAGGAGCGCCUGCUCGCAGACCUGA\
) } def
/len { sequence length } bind def

/coor [
[97.90863037 298.66668701]
[109.27928162 288.10791016]
[107.35330200 273.23205566]
[105.42733002 258.35623169]
[103.50135803 243.48039246]
[100.82881927 241.01092529]
[99.27907562 237.07490540]
[99.55079651 232.24339294]
[102.04699707 227.38748169]
[101.27481842 212.40736389]
[100.50263214 197.42724609]
[99.73045349 182.44714355]
[96.75706482 178.57192993]
[96.26748657 172.75909424]
[99.32434845 166.67993164]
[99.32434845 151.67993164]
[99.32434845 136.67993164]
[99.32434845 121.67993164]
[98.65650940 136.66505432]
[90.31455994 149.13148499]
[76.71714020 155.46475220]
[61.80664062 153.82859802]
[49.90616226 144.69740295]
[44.46609116 130.71864319]
[47.06370544 115.94528198]
[56.94585800 104.66064453]
[71.24735260 100.13656616]
[85.81952667 103.68354797]
[71.41727448 99.49126434]
[56.00457764 103.06328583]
[45.94695663 92.07722473]
[31.54470634 87.88494110]
[17.14245796 83.69265747]
[2.74021077 79.50037384]
[-14.15759563 80.87895203]
[-20.16007996 65.02315521]
[-6.58558083 54.86592484]
[6.93249512 65.09812164]
[21.33474350 69.29041290]
[35.73699188 73.48269653]
[50.13924026 77.67498016]
[64.52178955 73.80310059]
[75.60955811 85.08901978]
[90.01181030 89.28130341]
[104.30133820 84.71958160]
[113.61048126 72.95778656]
[122.91962433 61.19598770]
[132.22875977 49.43418884]
[141.53790283 37.67239380]
[150.84704590 25.91059494]
[160.15618896 14.14879799]
[169.46533203 2.38700080]
[178.77447510 -9.37479591]
[188.08361816 -21.13659286]
[183.04415894 -31.65674019]
[182.35577393 -43.24947739]
[186.08145142 -54.19414902]
[193.63197327 -62.88107681]
[203.85867310 -68.04826355]
[215.22802734 -68.96468353]
[226.05168152 -65.53346252]
[236.24078369 -76.54174042]
[246.42988586 -87.55001831]
[256.61898804 -98.55830383]
[266.80807495 -109.56658173]
[251.86372375 -110.85730743]
[242.02859497 -122.18294525]
[242.84550476 -137.16069031]
[253.85406494 -147.34948730]
[268.85015869 -147.00720215]
[279.38238525 -136.32675171]
[279.51550293 -121.32837677]
[291.27731323 -130.63752747]
[303.03909302 -139.94665527]
[314.80090332 -149.25579834]
[326.56268311 -158.56494141]
[332.10385132 -173.99957275]
[348.28717041 -176.65144348]
[358.46463013 -163.79255676]
[352.16653442 -148.65101624]
[335.87182617 -146.80314636]
[324.11004639 -137.49400330]
[312.34823608 -128.18486023]
[300.58645630 -118.87572479]
[288.82464600 -109.56658173]
[277.81637573 -99.37747955]
[267.62725830 -88.36920166]
[257.43817139 -77.36091614]
[247.24906921 -66.35263824]
[237.05996704 -55.34436035]
[241.81019592 -37.39407349]
[234.85658264 -20.01780701]
[218.78240967 -10.14550972]
[199.84541321 -11.82745171]
[190.53627014 -0.06565414]
[181.22712708 11.69614315]
[171.91798401 23.45793915]
[162.60885620 35.21973801]
[153.29971313 46.98153305]
[143.99057007 58.74333191]
[134.68142700 70.50512695]
[125.37227631 82.26692200]
[116.06314087 94.02872467]
[114.32434845 121.67993164]
[114.32434845 136.67993164]
[114.32434845 151.67993164]
[114.32434845 166.67993164]
[114.71056366 181.67495728]
[115.48274994 196.65507507]
[116.25492859 211.63517761]
[117.02710724 226.61529541]
[118.37719727 241.55441284]
[120.30316925 256.43026733]
[122.22914886 271.30609131]
[124.15512085 286.18194580]
[137.83987427 293.49679565]
[144.58119202 307.47299194]
[141.78689575 322.73641968]
[130.53146362 333.41793823]
[115.14282227 335.41030884]
[101.53823090 327.94741821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[5 112]
[9 111]
[10 110]
[11 109]
[12 108]
[15 107]
[16 106]
[17 105]
[18 104]
[28 44]
[29 43]
[31 41]
[32 40]
[33 39]
[34 38]
[45 103]
[46 102]
[47 101]
[48 100]
[49 99]
[50 98]
[51 97]
[52 96]
[53 95]
[54 94]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
