%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGCCCGGACUCCGCGGUGGGCGAGCGCCCUGUGAGGUGACCAUGGAGGCUGGUGGCCUCCCCUUGGAGCUGUGGCGCAUGAUCUUAGCCUACUUGCACCUUCCCGACCUGGGCCGCUGCAGCCUGGUAUGCAGGGCCUGGU\
) } def
/len { sequence length } bind def

/coor [
[131.48841858 162.56542969]
[129.71467590 156.08511353]
[119.67771912 144.93794250]
[109.64076233 133.79077148]
[94.67036438 134.73262024]
[86.10965729 147.04986572]
[77.54895782 159.36709595]
[68.98825073 171.68434143]
[60.42754745 184.00157166]
[51.86684418 196.31881714]
[57.09687805 210.92793274]
[52.70873260 225.81161499]
[40.38974380 235.24676514]
[24.87681198 235.60539246]
[12.13497829 226.74958801]
[7.06373644 212.08457947]
[11.61308193 197.24938965]
[24.03369904 187.94842529]
[39.54960632 187.75811768]
[48.11030960 175.44087219]
[56.67101288 163.12362671]
[65.23171997 150.80639648]
[73.79241943 138.48915100]
[82.35312653 126.17192078]
[79.62640381 119.62591553]
[78.75353241 113.19843292]
[64.22478485 116.92877960]
[49.69603729 120.65913391]
[35.16728973 124.38948059]
[23.83550262 136.24369812]
[7.96984434 132.09486389]
[3.89154243 116.21092224]
[15.79600430 104.93192291]
[31.43694115 109.86073303]
[45.96568680 106.13038635]
[60.49443436 102.40003204]
[75.02318573 98.66968536]
[76.56021118 91.27145386]
[80.23647308 84.66983795]
[85.71643829 79.46731567]
[92.50000000 76.13871002]
[92.50000000 61.13871002]
[92.50000000 46.13871002]
[92.50000000 31.13871193]
[92.50000000 16.13871193]
[92.50000000 1.13871121]
[70.62825012 -14.32977772]
[72.84265137 -46.38980865]
[64.54177856 -58.88362503]
[56.24090576 -71.37744141]
[37.81180191 -79.43820190]
[37.27428436 -98.72825623]
[28.45750618 -110.86351013]
[19.64072800 -122.99876404]
[10.82394886 -135.13401794]
[2.00717020 -147.26927185]
[-6.80960846 -159.40452576]
[-15.62638760 -171.53979492]
[-29.82798767 -180.79997253]
[-24.86109543 -197.01004028]
[-7.90954924 -196.72463989]
[-3.49113250 -180.35656738]
[5.32564640 -168.22131348]
[14.14242458 -156.08605957]
[22.95920372 -143.95080566]
[31.77598190 -131.81555176]
[40.59276199 -119.68029022]
[49.40953827 -107.54503632]
[59.68468857 -106.84415436]
[68.03079224 -100.44094849]
[71.51183319 -90.28090668]
[68.73472595 -79.67832184]
[77.03559875 -67.18450165]
[85.33647156 -54.69068146]
[92.83605957 -54.61214066]
[92.99337006 -69.61132050]
[107.99253845 -69.45377350]
[107.83523560 -54.45506668]
[115.33482361 -54.37652588]
[123.89553070 -66.69376373]
[132.45623779 -79.01100159]
[141.01693726 -91.32823944]
[143.36892700 -100.22479248]
[149.88813782 -103.81123352]
[158.70491028 -115.94648743]
[153.01205444 -130.28506470]
[155.99736023 -145.42083740]
[166.70822144 -156.52403259]
[181.72685242 -160.05165100]
[196.26086426 -154.87806702]
[205.67250061 -142.65412903]
[206.95854187 -127.28045654]
[199.70861816 -113.66274261]
[186.23616028 -106.14633942]
[170.84016418 -107.12970734]
[162.02339172 -94.99445343]
[153.33416748 -82.76753998]
[144.77346802 -70.45030212]
[136.21276855 -58.13306046]
[127.65206146 -45.81582260]
[132.60061646 -29.42544174]
[129.28475952 -14.02264977]
[119.79376984 -3.20102239]
[107.50000000 1.13871121]
[107.50000000 16.13871193]
[107.50000000 31.13871193]
[107.50000000 46.13871002]
[107.50000000 61.13871002]
[107.50000000 76.13871002]
[127.68387604 94.18080139]
[120.78793335 123.75380707]
[130.82489014 134.90098572]
[140.86184692 146.04815674]
[151.13006592 156.98268127]
[161.62501526 167.69976807]
[172.11996460 178.41685486]
[180.41821289 182.39424133]
[182.71954346 189.47000122]
[192.98774719 200.40454102]
[203.25596619 211.33906555]
[213.52416992 222.27359009]
[223.79237366 233.20812988]
[232.00550842 237.35841370]
[234.15815735 244.48083496]
[244.19511414 255.62800598]
[254.23207092 266.77517700]
[264.26904297 277.92233276]
[274.30599976 289.06951904]
[289.72341919 287.31369019]
[303.21179199 294.98458862]
[309.58462524 309.13262939]
[306.39138794 324.31756592]
[294.85995483 334.70053101]
[279.42437744 336.28900146]
[266.01998901 328.47222900]
[259.80102539 314.25588989]
[263.15881348 299.10647583]
[253.12185669 287.95932007]
[243.08489990 276.81213379]
[233.04794312 265.66494751]
[223.01098633 254.51779175]
[212.85784912 243.47633362]
[202.58964539 232.54180908]
[192.32142639 221.60726929]
[182.05322266 210.67274475]
[171.78501892 199.73822021]
[161.40287781 188.91180420]
[150.90791321 178.19471741]
[140.41296387 167.47763062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[4 111]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[26 37]
[27 36]
[28 35]
[29 34]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[48 74]
[49 73]
[50 72]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[79 100]
[80 99]
[81 98]
[82 97]
[84 96]
[85 95]
[114 149]
[115 148]
[116 147]
[118 146]
[119 145]
[120 144]
[121 143]
[122 142]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
