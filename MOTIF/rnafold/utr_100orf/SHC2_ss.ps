%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCAGGGUCCGGGCGGGCGCGCGCCCCCGGCGCCCCCCGCGCCCCCCGAGCCCGAGGCGCCCACCACCUUCUGCGCGUUGCUGCCCCGAAUGCCGC\
) } def
/len { sequence length } bind def

/coor [
[77.61325073 219.82003784]
[74.35523987 205.04707336]
[75.82380676 189.99055481]
[81.87506866 176.12559509]
[91.91619110 164.81050110]
[104.96343994 157.15385437]
[101.72317505 142.50801086]
[98.48290253 127.86216736]
[95.24263763 113.21632385]
[86.12664795 101.30419922]
[72.83647919 94.34925079]
[59.54630661 87.39429474]
[43.73169327 87.85099030]
[36.04269028 75.09448242]
[22.75251961 68.13953400]
[9.46234894 61.18458176]
[-3.82782173 54.22962570]
[-13.05996323 52.98054886]
[-17.41818047 46.84610367]
[-30.48562431 39.48118973]
[-43.55307007 32.11627960]
[-56.62051010 24.75136757]
[-69.68795776 17.38645744]
[-82.75540161 10.02154636]
[-96.35549164 3.69402051]
[-110.40602112 -1.55787623]
[-124.45655823 -6.80977297]
[-138.50709534 -12.06166935]
[-152.55763245 -17.31356621]
[-169.51116943 -17.19564438]
[-174.31768799 -33.45398712]
[-160.02531433 -42.57342529]
[-147.30574036 -31.36410332]
[-133.25520325 -26.11220551]
[-119.20466614 -20.86030960]
[-105.15412903 -15.60841274]
[-91.10359192 -10.35651588]
[-88.87602234 -11.50289249]
[-86.07672882 -11.88138676]
[-82.97709656 -11.28223133]
[-79.91510010 -9.59037399]
[-77.26304626 -6.80457163]
[-75.39048767 -3.04589772]
[-62.32304382 4.31901360]
[-49.25559998 11.68392467]
[-36.18815613 19.04883575]
[-23.12071419 26.41374779]
[-10.05326939 33.77865982]
[3.12713122 40.93945694]
[16.41730118 47.89440918]
[29.70747185 54.84936142]
[42.99764252 61.80431366]
[57.86165237 60.85015106]
[66.50125885 74.10412598]
[79.79142761 81.05907440]
[93.08159637 88.01403046]
[112.44100189 82.70153809]
[126.64807892 77.88915253]
[140.85514832 73.07676697]
[151.44349670 61.32102203]
[165.98030090 64.56607819]
[180.18737793 59.75369263]
[194.39445496 54.94130707]
[208.60153198 50.12892151]
[210.41085815 34.97342300]
[218.62397766 22.10845375]
[231.61015320 14.08835697]
[246.79098511 12.50553036]
[261.15228271 17.67424583]
[271.84262085 28.56825066]
[276.73944092 43.02453232]
[274.87042236 58.17278671]
[266.60671997 71.00531769]
[253.58905029 78.97421265]
[238.40211487 80.49724579]
[224.06127930 75.27201080]
[213.41390991 64.33599091]
[199.20684814 69.14837646]
[184.99977112 73.96076965]
[170.79269409 78.77315521]
[161.22053528 90.18468475]
[145.66754150 87.28384399]
[131.46046448 92.09622955]
[117.25338745 96.90861511]
[109.88848114 109.97605896]
[113.12874603 124.62190247]
[116.36901093 139.26774597]
[119.60928345 153.91357422]
[134.66871643 155.35186768]
[148.54582214 161.37525940]
[159.88105774 171.39361572]
[167.56393433 184.42544556]
[170.84173584 199.19403076]
[169.39335632 214.25250244]
[163.36067200 228.12556458]
[153.33473206 239.45408630]
[140.29776001 247.12821960]
[125.52696991 250.39613342]
[110.46948242 248.93766785]
[96.60045624 242.89569092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 88]
[7 87]
[8 86]
[9 85]
[10 56]
[11 55]
[12 54]
[14 52]
[15 51]
[16 50]
[17 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[57 84]
[58 83]
[59 82]
[61 80]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
