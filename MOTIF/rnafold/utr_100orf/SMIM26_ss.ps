%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGGAAGUCCCGCCUCUGCCGUGGGCCUGCGAGAAUCGAGGCACUCGCUGGCGUACCCAUGUAUCGAAAUGAGUUCACGGCCUGGUACCGGCGGAUGUCGGUGGUCUACGGGAUCGGCACCUGGUCUGUGUUGGGCUCACUGCUUUACUAUAGCCGGA\
) } def
/len { sequence length } bind def

/coor [
[342.62155151 295.86834717]
[344.90145874 280.63323975]
[334.29486084 270.02664185]
[323.68826294 259.42004395]
[320.13027954 259.07177734]
[316.57150269 256.95065308]
[313.85821533 253.07899475]
[312.79257202 247.86286926]
[302.82879639 236.65025330]
[292.86499023 225.43762207]
[282.90121460 214.22499084]
[272.93743896 203.01237488]
[262.97363281 191.79974365]
[240.41923523 168.86949158]
[226.56105042 163.12924194]
[215.43409729 169.68641663]
[202.36851501 168.60537720]
[192.17172241 160.05833435]
[188.72540283 147.00558472]
[174.98258972 140.99435425]
[161.23976135 134.98312378]
[147.49694824 128.97189331]
[133.75411987 122.96066284]
[120.01130676 116.94943237]
[106.26848602 110.93819427]
[74.39297485 136.99548340]
[59.39586639 137.28997803]
[44.39875793 137.58448792]
[30.75315666 145.59124756]
[17.87642670 138.10531616]
[2.87931728 138.39982605]
[-12.11779118 138.69433594]
[-27.11490059 138.98883057]
[-42.11200714 139.28334045]
[-49.45845795 152.77130127]
[-62.57301712 160.76530457]
[-77.92792511 161.11499023]
[-91.39279938 153.72630310]
[-99.34564972 140.58674622]
[-99.64720154 125.23081207]
[-92.21633911 111.78916931]
[-79.05192566 103.87754059]
[-63.69512558 103.62413025]
[-50.27683640 111.09708405]
[-42.40651321 124.28623199]
[-27.40940475 123.99172974]
[-12.41229630 123.69721985]
[2.58481193 123.40271759]
[17.58192062 123.10821533]
[30.15482712 115.12252045]
[44.10425186 122.58737946]
[59.10136032 122.29287720]
[74.09846497 121.99836731]
[77.63394165 115.38395691]
[84.70489502 102.15514374]
[88.24037170 95.54073334]
[80.15329742 82.90747070]
[66.19660950 75.45620728]
[65.85133362 60.56560135]
[57.76425934 47.93234253]
[49.67718506 35.29908371]
[34.17967606 34.52005005]
[22.12099648 24.75440216]
[18.13795090 9.75723743]
[23.76210213 -4.70473146]
[36.83085251 -13.07058144]
[52.31899643 -12.12347221]
[64.27102661 -2.22758722]
[68.09114838 12.81190395]
[62.31044388 27.21201134]
[70.39751434 39.84526825]
[78.48459625 52.47852707]
[91.86283875 59.02618027]
[92.78655243 74.82039642]
[100.87362671 87.45365906]
[112.27971649 97.19538116]
[126.02253723 103.20661163]
[139.76535034 109.21784210]
[153.50817871 115.22907257]
[167.25099182 121.24031067]
[180.99382019 127.25154114]
[194.73663330 133.26277161]
[210.87878418 126.58573151]
[226.55772400 133.48930359]
[232.30130005 149.27105713]
[246.15950012 155.01130676]
[260.55566406 150.79815674]
[269.13247681 138.49214172]
[277.70928955 126.18611908]
[286.28610229 113.88009644]
[294.86294556 101.57407379]
[303.43975830 89.26805878]
[312.01657104 76.96203613]
[312.87033081 60.58512497]
[327.60092163 53.37810516]
[341.05480957 62.75494385]
[339.39175415 79.06954956]
[324.32260132 85.53885651]
[315.74575806 97.84487152]
[307.16894531 110.15089417]
[298.59213257 122.45691681]
[290.01531982 134.76293945]
[281.43850708 147.06895447]
[272.86166382 159.37498474]
[285.53482056 151.35057068]
[300.00695801 155.29490662]
[306.85589600 168.64001465]
[301.62261963 182.69749451]
[287.71429443 188.31517029]
[274.18627930 181.83595276]
[284.15005493 193.04858398]
[294.11383057 204.26121521]
[304.07763672 215.47383118]
[314.04141235 226.68646240]
[324.00518799 237.89907837]
[334.29486084 248.81343079]
[344.90145874 259.42004395]
[355.50805664 270.02664185]
[370.74316406 267.74673462]
[384.24166870 274.79254150]
[390.92401123 288.27624512]
[388.41525269 302.93380737]
[399.02185059 313.54043579]
[409.62844849 324.14703369]
[420.23504639 334.75363159]
[428.56185913 338.63632202]
[430.94320679 345.67413330]
[441.33953857 356.48693848]
[451.73583984 367.29974365]
[462.13214111 378.11254883]
[472.63409424 388.82275391]
[483.24072266 399.42938232]
[498.47000122 403.71646118]
[501.99844360 418.18710327]
[512.60504150 428.79370117]
[523.21166992 439.40029907]
[533.81823730 450.00689697]
[549.79675293 451.44479370]
[558.51440430 464.91259766]
[553.28375244 480.07901001]
[538.11737061 485.30963135]
[524.64953613 476.59201050]
[523.21166992 460.61352539]
[512.60504150 450.00689697]
[501.99844360 439.40029907]
[491.39184570 428.79370117]
[476.92120361 425.26525879]
[472.63409424 410.03598022]
[462.02749634 399.42938232]
[455.03781128 396.91027832]
[451.31933594 388.50885010]
[440.92303467 377.69604492]
[430.52673340 366.88323975]
[420.13040161 356.07043457]
[409.62844849 345.36022949]
[399.02185059 334.75363159]
[388.41525269 324.14703369]
[377.80865479 313.54043579]
[363.15109253 316.04916382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[4 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[14 86]
[15 85]
[19 82]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[25 76]
[26 53]
[27 52]
[28 51]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
[122 158]
[123 157]
[124 156]
[125 155]
[127 154]
[128 153]
[129 152]
[130 151]
[131 149]
[132 148]
[134 146]
[135 145]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
