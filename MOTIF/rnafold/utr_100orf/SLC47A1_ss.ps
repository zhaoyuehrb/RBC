%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCGGCCUGCGCGGUACUCACUGCCGGCCUCCGCGGUACCCACUGCCGGCCUCCGCGCUACCCGGCCGCAGCGCGCGAGUCACAUGGAAGCUCCUGAGGAGCCCGCGCCAGUGCGCGGAGGCCCGGAGGCCACCCUUGAGGUCCGUGGGUCGCGCUGCUUGCGGCUGUCCGCCUUCCGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[243.77522278 523.26733398]
[244.01629639 514.38275146]
[247.15568542 506.02133179]
[252.87695312 499.10647583]
[246.76055908 485.41012573]
[240.52934265 471.76565552]
[234.18371582 458.17398071]
[227.83810425 444.58233643]
[221.49249268 430.99069214]
[215.14686584 417.39901733]
[211.02491760 414.94949341]
[208.40902710 409.87469482]
[208.82498169 403.24249268]
[202.93952942 389.44534302]
[197.05409241 375.64819336]
[191.16864014 361.85104370]
[185.28320312 348.05386353]
[171.41055298 342.75433350]
[165.24533081 328.84591675]
[170.89802551 314.33093262]
[165.01258850 300.53375244]
[159.12713623 286.73660278]
[153.24169922 272.93945312]
[138.33753967 272.36361694]
[125.10698700 265.34494019]
[116.19934845 253.22821045]
[113.42455292 238.38500977]
[117.38562775 223.74954224]
[127.34860992 212.23866272]
[121.46316528 198.44149780]
[115.57772064 184.64434814]
[109.69228363 170.84718323]
[103.80683899 157.05003357]
[97.92139435 143.25286865]
[92.03594971 129.45571899]
[78.96238708 122.10166931]
[64.11506653 124.23639679]
[49.26774216 126.37111664]
[34.42042160 128.50584412]
[19.57309914 130.64056396]
[7.02399445 141.19764709]
[-8.29893970 135.35472107]
[-10.63278198 119.12249756]
[2.42332530 109.19928741]
[17.43837738 115.79324341]
[32.28569794 113.65851593]
[47.13302231 111.52379608]
[61.98034286 109.38907623]
[76.82766724 107.25434875]
[80.15458679 93.18689728]
[89.92786407 85.46543121]
[87.41970825 70.67661285]
[84.91155243 55.88779831]
[82.40339661 41.09897995]
[79.89524078 26.31016159]
[77.38708496 11.52134228]
[74.87892151 -3.26747584]
[72.37076569 -18.05629349]
[69.86260986 -32.84511185]
[67.35445404 -47.63393021]
[64.84629822 -62.42274857]
[60.31734085 -70.37996674]
[62.42240524 -77.48091125]
[60.16304398 -92.30977631]
[50.24574280 -100.57791901]
[48.67884064 -112.99011993]
[55.76190186 -122.81221008]
[53.75196838 -137.67694092]
[51.74203873 -152.54167175]
[46.20611572 -166.48274231]
[37.47108459 -178.67697144]
[28.73605156 -190.87120056]
[13.20590973 -194.89540100]
[6.80112457 -209.60453796]
[14.43489933 -223.71499634]
[30.25125504 -226.40245056]
[42.11723709 -215.60531616]
[40.93028259 -199.60623169]
[49.66531372 -187.41200256]
[58.40034485 -175.21777344]
[65.69385529 -176.96554565]
[62.19829941 -191.55256653]
[58.70274353 -206.13958740]
[55.20741653 -220.72665405]
[69.79454041 -224.22177124]
[73.28976440 -209.63514709]
[76.78531647 -195.04812622]
[80.28086853 -180.46110535]
[87.57437897 -182.20887756]
[89.83374023 -197.03775024]
[87.77726746 -203.35673523]
[89.04518127 -208.92350769]
[92.42617035 -212.32344055]
[95.18241119 -227.06803894]
[97.93865204 -241.81263733]
[100.69490051 -256.55725098]
[103.45114136 -271.30184937]
[100.41818237 -287.98229980]
[115.60715485 -295.51431274]
[127.04956055 -283.00402832]
[118.19573975 -268.54559326]
[115.43949127 -253.80099487]
[112.68325043 -239.05639648]
[109.92700958 -224.31179810]
[107.17076874 -209.56719971]
[104.66261292 -194.77838135]
[102.40324402 -179.94952393]
[93.40809631 -162.68200684]
[79.74180603 -154.12942505]
[66.60676575 -154.55160522]
[68.61669922 -139.68687439]
[70.62663269 -124.82214355]
[82.09269714 -111.54869080]
[74.99190521 -94.56913757]
[77.25127411 -79.74027252]
[79.63511658 -64.93090820]
[82.14327240 -50.14208603]
[84.65142822 -35.35326767]
[87.15958405 -20.56445122]
[89.66773987 -5.77563286]
[92.17590332 9.01318550]
[94.68405914 23.80200386]
[97.19221497 38.59082413]
[99.70037079 53.37964249]
[102.20852661 68.16845703]
[104.71668243 82.95727539]
[120.98037720 100.28739929]
[105.83310699 123.57026672]
[111.71855164 137.36743164]
[117.60399628 151.16458130]
[123.48944092 164.96174622]
[129.37487793 178.75889587]
[135.26033020 192.55606079]
[141.14576721 206.35321045]
[156.34971619 207.12866211]
[169.65504456 214.39880371]
[178.44842529 226.67466736]
[181.02925110 241.49021912]
[176.93843079 255.89765930]
[167.03884888 267.05401611]
[172.92430115 280.85116577]
[178.80973816 294.64831543]
[184.69519043 308.44546509]
[199.08433533 314.41122437]
[204.85646057 328.48733521]
[199.08036804 342.16842651]
[204.96580505 355.96557617]
[210.85124207 369.76275635]
[216.73669434 383.55990601]
[222.62213135 397.35705566]
[228.73852539 411.05340576]
[235.08413696 424.64505005]
[241.42976379 438.23672485]
[247.77537537 451.82836914]
[254.12100220 465.42004395]
[260.60055542 471.88873291]
[260.45690918 479.29373169]
[266.57330322 492.99008179]
[287.46676636 499.19085693]
[296.87829590 518.53399658]
[289.07073975 538.27447510]
[296.31469727 551.40930176]
[303.55868530 564.54418945]
[310.80264282 577.67907715]
[328.51016235 587.28405762]
[327.34436035 606.57293701]
[335.02548218 619.45709229]
[342.70660400 632.34118652]
[357.84436035 637.65417480]
[362.99246216 652.84881592]
[354.20169067 666.26904297]
[338.21563721 667.61999512]
[327.29739380 655.86535645]
[329.82250977 640.02227783]
[322.14135742 627.13818359]
[314.46023560 614.25408936]
[304.34420776 612.64154053]
[296.63146973 605.57043457]
[294.04162598 595.20568848]
[297.66775513 584.92303467]
[290.42379761 571.78814697]
[283.17984009 558.65332031]
[275.93588257 545.51843262]
[267.28240967 546.05834961]
[258.88369751 543.73632812]
[251.66479492 538.77874756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 158]
[5 157]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[13 150]
[14 149]
[15 148]
[16 147]
[17 146]
[20 143]
[21 142]
[22 141]
[23 140]
[29 134]
[30 133]
[31 132]
[32 131]
[33 130]
[34 129]
[35 128]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[51 126]
[52 125]
[53 124]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[61 116]
[63 115]
[64 114]
[67 112]
[68 111]
[69 110]
[70 80]
[71 79]
[72 78]
[89 107]
[90 106]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
[161 183]
[162 182]
[163 181]
[164 180]
[166 176]
[167 175]
[168 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
