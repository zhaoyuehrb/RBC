%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUCAUCCAACACAAUGGCCAGCAACGUUACCAACAAGAUGGAUCCUCACUCCAUGAACUCCCGUGUGUUCAUUGGGAAUCUCAACACUCUUGUUGUCAAGAAAUCGGAUGUGG\
) } def
/len { sequence length } bind def

/coor [
[88.22299194 248.23629761]
[75.94155121 238.75231934]
[71.61251831 223.85134888]
[76.90048981 209.26310730]
[89.77214050 200.59706116]
[90.17833710 185.60256958]
[90.58452606 170.60806274]
[90.99071503 155.61357117]
[91.39690399 140.61906433]
[85.88860321 139.04856873]
[80.64885712 136.73492432]
[75.77737427 133.72219849]
[71.36687469 130.06768799]
[67.50129700 125.84097290]
[64.25419617 121.12248230]
[50.17430496 126.29517365]
[36.09441757 131.46786499]
[22.01453018 136.64056396]
[17.91206932 151.60549927]
[5.77592850 161.27471924]
[-9.72729588 161.93020630]
[-22.63629913 153.31990051]
[-27.98730469 138.75465393]
[-23.72274399 123.83509827]
[-11.48242474 114.29810333]
[4.02699852 113.81084442]
[16.84183693 122.56067657]
[30.92172432 117.38798523]
[45.00160980 112.21528625]
[59.08149719 107.04259491]
[63.09187698 80.98126221]
[81.98768616 62.59039688]
[108.14805603 59.28721237]
[113.70012665 45.35256195]
[119.25220490 31.41791153]
[124.80427551 17.48326111]
[130.35635376 3.54860997]
[135.90841675 -10.38604069]
[141.46049500 -24.32069206]
[147.01255798 -38.25534058]
[151.80209351 -52.47013855]
[155.81501770 -66.92339325]
[159.63185120 -81.42965698]
[163.25192261 -95.98626709]
[166.87199402 -110.54288483]
[162.69390869 -125.80244446]
[173.27407837 -136.28620911]
[176.89413452 -150.84283447]
[180.51420593 -165.39944458]
[184.13427734 -179.95606995]
[182.66598511 -184.36970520]
[182.75752258 -188.57604980]
[184.13281250 -192.08671570]
[186.37956238 -194.56286621]
[189.01383972 -195.84797668]
[194.18653870 -209.92785645]
[199.35923767 -224.00775146]
[204.53193665 -238.08763123]
[209.70462036 -252.16752625]
[214.87731934 -266.24740601]
[206.12748718 -279.06225586]
[206.61474609 -294.57165527]
[216.15174866 -306.81198120]
[231.07130432 -311.07653809]
[245.63653564 -305.72555542]
[254.24684143 -292.81652832]
[253.59135437 -277.31332397]
[243.92214966 -265.17718506]
[228.95719910 -261.07470703]
[223.78451538 -246.99482727]
[218.61181641 -232.91493225]
[213.43911743 -218.83505249]
[208.26643372 -204.75515747]
[203.09373474 -190.67527771]
[198.69090271 -176.33599854]
[195.07083130 -161.77937317]
[191.45075989 -147.22276306]
[187.83068848 -132.66613770]
[192.26771545 -118.44776917]
[181.42861938 -106.92282104]
[177.80854797 -92.36620331]
[174.18847656 -77.80958557]
[175.64733887 -70.46149445]
[170.26826477 -62.91046524]
[166.25534058 -48.45721436]
[167.64515686 -45.87664413]
[168.02536011 -42.55479431]
[167.09425354 -38.90113449]
[164.71464539 -35.43137741]
[160.94721985 -32.70326996]
[155.39514160 -18.76861954]
[149.84306335 -4.83396864]
[144.29100037 9.10068226]
[138.73892212 23.03533363]
[133.18685913 36.96998215]
[127.63478088 50.90463638]
[122.08271027 64.83928680]
[129.24032593 70.52246857]
[134.98115540 77.63394165]
[139.02702332 85.82912445]
[141.18188477 94.71093750]
[141.34133911 103.84902954]
[139.49766541 112.80062103]
[135.74018860 121.13197327]
[130.25097656 128.43940735]
[123.29599762 134.36885071]
[115.21224976 138.63301086]
[106.39140320 141.02525330]
[105.98521423 156.01976013]
[105.57902527 171.01425171]
[105.17283630 186.00875854]
[104.76663971 201.00325012]
[117.15024567 210.35343933]
[121.64067078 225.20657349]
[116.51126099 239.85133362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[8 109]
[9 108]
[15 30]
[16 29]
[17 28]
[18 27]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[41 85]
[42 84]
[43 82]
[44 81]
[45 80]
[47 78]
[48 77]
[49 76]
[50 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
