%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAACAAACCAACAUUUGAGCCAGGAAUAACUAGAGAGGAACAAUGGGGUUAUUCAGAGGUUUUGUUUUCCUCUUAGUUCUGUGCCUGCUGCACCAGUCAAAUACUUCCUUCAUUAAGCUGAAUAAUAAUGGCUUUGAAGAUA\
) } def
/len { sequence length } bind def

/coor [
[185.97459412 292.21060181]
[177.45382690 290.45281982]
[169.33375549 287.31622314]
[161.83598328 282.88476562]
[155.16540527 277.27780151]
[149.50459290 270.64675903]
[145.00880432 263.17120361]
[141.80172729 255.05386353]
[139.97207642 246.51515198]
[139.57115173 237.78718567]
[140.61138916 229.10749817]
[143.06599426 220.71258545]
[146.86956787 212.83137512]
[151.91996765 205.67910767]
[158.08091736 199.45133972]
[150.07098389 186.76904297]
[142.06103516 174.08673096]
[134.05110168 161.40443420]
[126.04115295 148.72213745]
[118.03121185 136.03982544]
[109.34640503 123.80977631]
[100.01222229 112.06784058]
[90.42584229 100.53088379]
[80.59177399 89.20432281]
[70.75769806 77.87776184]
[60.92362976 66.55119324]
[42.98009109 68.68608856]
[27.45395279 59.75056839]
[20.40935707 43.45016098]
[24.46858025 26.32339287]
[14.15308952 15.43346119]
[3.83759737 4.54352856]
[-6.47789431 -6.34640408]
[-14.71580124 -10.46542740]
[-16.89573479 -17.58578873]
[-26.97288132 -28.69664574]
[-37.05002975 -39.80750275]
[-47.12717438 -50.91835785]
[-57.20431900 -62.02921295]
[-67.28146362 -73.14006805]
[-77.35861206 -84.25092316]
[-87.67410278 -95.14086151]
[-98.22309875 -105.80475616]
[-108.77209473 -116.46865082]
[-119.32109070 -127.13254547]
[-132.82899475 -120.32141113]
[-147.78085327 -118.01981354]
[-162.71180725 -120.45323944]
[-176.15910339 -127.38328552]
[-186.80529785 -138.13102722]
[-193.60737610 -151.64349365]
[-195.89895630 -166.59687805]
[-193.45552063 -181.52621460]
[-186.51646423 -194.96885681]
[-175.76159668 -205.60783386]
[-162.24458313 -212.40086365]
[-147.28965759 -214.68243408]
[-132.36196899 -212.22898865]
[-118.92397308 -205.28092957]
[-108.29219818 -194.51893616]
[-101.50823212 -180.99736023]
[-99.23669434 -166.04090881]
[-101.70012665 -151.11488342]
[-108.65719604 -137.68154907]
[-98.10820007 -127.01764679]
[-87.55920410 -116.35375214]
[-77.01020813 -105.68984985]
[-72.25411987 -104.77412415]
[-68.04827881 -100.81433105]
[-66.24775696 -94.32807159]
[-56.17061234 -83.21721649]
[-46.09346390 -72.10636139]
[-36.01631927 -60.99550247]
[-25.93917274 -49.88464737]
[-15.86202621 -38.77379227]
[-5.78487968 -27.66293526]
[4.41203785 -16.66189575]
[14.72752953 -5.77196360]
[25.04302216 5.11796904]
[35.35851288 16.00790215]
[47.11238098 12.65462589]
[59.24344254 14.65757370]
[69.41473389 21.69365120]
[75.64006805 32.46418381]
[76.67175293 44.93426514]
[72.25019836 56.71712494]
[82.08426666 68.04368591]
[91.91833496 79.37025452]
[101.75240326 90.69681549]
[106.84413147 92.25755310]
[110.66966248 96.59163666]
[111.75415039 102.73365784]
[121.08834076 114.47558594]
[125.76589966 100.22355652]
[139.74604797 94.78707123]
[152.82315063 102.13483429]
[155.45077515 116.90288544]
[145.71075439 128.31042480]
[130.71351624 128.02989197]
[138.72344971 140.71218872]
[146.73339844 153.39448547]
[154.74334717 166.07679749]
[162.75328064 178.75909424]
[170.76322937 191.44140625]
[192.89840698 186.88058472]
[214.88708496 191.93617249]
[232.74771118 205.66046143]
[243.25961304 225.53901672]
[244.54379272 247.95129395]
[236.39871216 268.83004761]
[247.61808777 278.78625488]
[258.83746338 288.74243164]
[270.05682373 298.69863892]
[281.27618408 308.65481567]
[287.78158569 310.38497925]
[291.78671265 314.54766846]
[292.75390625 319.29354858]
[303.53143311 329.72640991]
[314.30899048 340.15927124]
[325.08654785 350.59213257]
[335.86407471 361.02499390]
[346.64163208 371.45785522]
[361.90240479 368.64916992]
[375.88494873 375.37731934]
[383.21270752 389.05517578]
[381.06799316 404.42333984]
[370.27548218 415.57238770]
[354.98513794 418.21533203]
[341.07641602 411.33590698]
[333.89746094 397.57937622]
[336.20877075 382.23538208]
[325.43121338 371.80252075]
[314.65368652 361.36968994]
[303.87612915 350.93682861]
[293.09857178 340.50396729]
[282.32104492 330.07110596]
[271.32000732 319.87420654]
[260.10061646 309.91799927]
[248.88125610 299.96182251]
[237.66189575 290.00561523]
[226.44252014 280.04940796]
[219.39291382 285.10855103]
[211.60322571 288.94165039]
[203.28485107 291.44305420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[20 99]
[21 93]
[22 92]
[23 89]
[24 88]
[25 87]
[26 86]
[30 80]
[31 79]
[32 78]
[33 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 67]
[43 66]
[44 65]
[45 64]
[110 141]
[111 140]
[112 139]
[113 138]
[114 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
