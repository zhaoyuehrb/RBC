%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUAUAUAUAAGAGGACCCAGGAGUUACAUCAGGACUCAGGAAGAGAUAGACCCAUAAUGAUGCUGCCUCAAAACUCGUGGCAUAUUGAUUUUGGAAGAUGCUGCUGUCAUCAGAACCUUUUCUCUGCUGUGGUAACUUGCAUCCUGCUCCUGAAUU\
) } def
/len { sequence length } bind def

/coor [
[66.11557007 641.23028564]
[53.55686188 649.64282227]
[39.07599640 653.97821045]
[23.96059799 653.85107422]
[9.55472183 649.27264404]
[-2.86067080 640.65002441]
[-12.18161297 628.74993896]
[-17.57929230 614.63061523]
[-18.57375145 599.54742432]
[-15.07656384 584.84161377]
[-7.39869595 571.82073975]
[3.77714086 561.64276123]
[17.45719910 555.21252441]
[32.42505646 553.10192871]
[34.78620911 538.28894043]
[37.14736176 523.47595215]
[39.50851440 508.66293335]
[32.65313339 498.65606689]
[34.53556061 486.26687622]
[44.68333435 478.24920654]
[47.33668900 463.48574829]
[49.99004364 448.72229004]
[52.64339828 433.95883179]
[55.29674911 419.19537354]
[57.21790695 404.31890869]
[58.40217972 389.36572266]
[59.58645248 374.41253662]
[60.77072525 359.45935059]
[61.95499802 344.50619507]
[52.12206268 333.37744141]
[53.11007309 318.19592285]
[64.84959412 307.95770264]
[66.03386688 293.00451660]
[67.21813965 278.05133057]
[65.44809723 275.81268311]
[64.48264313 272.71963501]
[64.65872955 269.08422852]
[66.19078064 265.33700562]
[69.13241577 261.97973633]
[71.49356842 247.16674805]
[73.85472107 232.35374451]
[76.06941986 217.51814270]
[78.13744354 202.66137695]
[80.20547485 187.80462646]
[82.27350616 172.94786072]
[84.34152985 158.09111023]
[86.40956116 143.23434448]
[72.18847656 135.78308105]
[61.45767593 123.84110260]
[55.56384277 108.90713501]
[55.24664307 92.85533905]
[60.54588318 77.70018005]
[70.79652405 65.34359741]
[84.71212769 57.33631134]
[82.05877686 42.57285309]
[79.40541840 27.80939484]
[69.34901428 15.59549713]
[74.71297455 1.70027387]
[72.05961609 -13.06318474]
[69.40626526 -27.82664299]
[66.60719299 -42.56316757]
[63.66267014 -57.27132416]
[60.71815109 -71.97947693]
[57.77362823 -86.68762970]
[52.99696732 -94.53745270]
[54.91925049 -101.71532440]
[52.26589584 -116.47878265]
[49.61254501 -131.24223328]
[46.95919037 -146.00570679]
[32.34329987 -150.54821777]
[21.52078247 -161.37095642]
[16.97856903 -175.98692322]
[19.76042747 -191.03750610]
[29.22710800 -203.06416321]
[43.20323563 -209.30326843]
[58.47719955 -208.32112122]
[71.53915405 -200.34341431]
[79.38755798 -187.20335388]
[80.21890259 -171.92044067]
[73.84215546 -158.00657654]
[61.72264862 -148.65905762]
[64.37599945 -133.89559937]
[67.02935791 -119.13213348]
[69.68270874 -104.36867523]
[72.48178101 -89.63214874]
[75.42630768 -74.92399597]
[78.37082672 -60.21584320]
[81.31534576 -45.50769043]
[85.73554993 -39.53451920]
[84.16972351 -30.47999763]
[86.82307434 -15.71653938]
[89.47643280 -0.95308024]
[99.34304810 10.20483685]
[94.16887665 25.15604210]
[96.82223511 39.91949844]
[99.47558594 54.68296051]
[112.78266144 56.51997375]
[124.96667480 62.17706680]
[134.95716858 71.15721893]
[147.94754028 63.65721893]
[160.93792725 56.15721893]
[173.92829895 48.65721893]
[176.46537781 33.22681808]
[188.36097717 23.07651520]
[203.99836731 22.99897003]
[215.99404907 33.03079987]
[218.68403625 48.43528366]
[210.79818726 61.93888855]
[196.05996704 67.16562653]
[181.42829895 61.64759827]
[168.43792725 69.14759827]
[155.44754028 76.64759827]
[142.45716858 84.14759827]
[145.28263855 98.15847015]
[143.60418701 112.35250092]
[137.58872986 125.31791687]
[127.83458710 135.76513672]
[115.31193542 142.65505981]
[101.26631927 145.30238342]
[99.19828796 160.15913391]
[97.13026428 175.01589966]
[95.06223297 189.87265015]
[92.99420166 204.72941589]
[90.92617798 219.58616638]
[92.84849548 228.57176208]
[88.66771698 234.71488953]
[86.30656433 249.52789307]
[83.94541168 264.34088135]
[82.17131805 279.23562622]
[80.98704529 294.18878174]
[79.80277252 309.14196777]
[89.78433990 321.10049438]
[88.37030792 336.24826050]
[76.90817261 345.69046021]
[75.72389984 360.64364624]
[74.53962708 375.59680176]
[73.35535431 390.54998779]
[72.17108154 405.50317383]
[85.25495911 398.16748047]
[99.22303009 403.63494873]
[103.85051727 417.90332031]
[95.75006866 430.52801514]
[80.85128784 432.26763916]
[70.06021118 421.84872437]
[67.40685272 436.61218262]
[64.75350189 451.37564087]
[62.10014725 466.13909912]
[59.44679260 480.90255737]
[66.10050201 498.04617310]
[54.32151413 511.02410889]
[51.96036148 525.83709717]
[49.59920883 540.65008545]
[47.23805618 555.46307373]
[60.80799103 562.12255859]
[71.81100464 572.48718262]
[79.26870728 585.63531494]
[82.51797485 600.39788818]
[81.26988983 615.46221924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 153]
[15 152]
[16 151]
[17 150]
[20 148]
[21 147]
[22 146]
[23 145]
[24 144]
[25 138]
[26 137]
[27 136]
[28 135]
[29 134]
[32 131]
[33 130]
[34 129]
[39 128]
[40 127]
[41 126]
[42 124]
[43 123]
[44 122]
[45 121]
[46 120]
[47 119]
[54 96]
[55 95]
[56 94]
[58 92]
[59 91]
[60 90]
[61 88]
[62 87]
[63 86]
[64 85]
[66 84]
[67 83]
[68 82]
[69 81]
[99 113]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
