%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUUGUGCUUCCACCACUGCCAAUAACAAAAUAACUAGCAACCAUGAAGUGGGUGGAAUCAAUUUUUUUAAUUUUCCUACUAAAUUUUACUGAAUCCAGAACACUGCAUAGAAAUGAAUAUGGAAUAGCUUCCAUAUUGGAUU\
) } def
/len { sequence length } bind def

/coor [
[125.84345245 209.80148315]
[124.04819489 197.68415833]
[125.47855377 185.50378418]
[130.04293823 174.10510254]
[137.43212891 164.28067017]
[128.61535645 152.14541626]
[119.79857635 140.01016235]
[110.98179626 127.87490845]
[102.16501617 115.73965454]
[88.55138397 109.44131470]
[73.59449005 110.57769775]
[58.63759995 111.71408081]
[43.68070602 112.85046387]
[28.72381401 113.98684692]
[13.76692200 115.12322998]
[-1.18997025 116.25961304]
[-16.13367462 117.55796051]
[-31.06243706 119.01810455]
[-45.99119949 120.47825623]
[-47.56662369 135.44831848]
[-52.12358475 149.79472351]
[-59.47547150 162.92996216]
[-69.32122803 174.31617737]
[-81.25768280 183.48710632]
[-94.79605103 190.06719971]
[-109.38192749 193.78701782]
[-124.41804504 194.49421692]
[-139.28866577 192.15986633]
[-153.38487244 186.87953186]
[-166.12942505 178.86944580]
[-177.00042725 168.45762634]
[-185.55273438 156.07040405]
[-191.43612671 142.21507263]
[-194.40969849 127.45895386]
[-194.35165405 112.40633392]
[-191.26440430 97.67359161]
[-185.27433777 83.86402130]
[-176.62677002 71.54312897]
[-165.67581177 61.21543884]
[-152.86987305 53.30386353]
[-138.73336792 48.13238144]
[-123.84518433 45.91275787]
[-108.81497192 46.73588562]
[-94.25820923 50.56805801]
[-80.77098846 57.25235367]
[-68.90560150 66.51504517]
[-59.14793396 77.97684479]
[-51.89754868 91.16838837]
[-47.45135117 105.54949188]
[-32.52258682 104.08934021]
[-17.59382439 102.62919617]
[-11.19556713 98.81947327]
[-2.32635355 101.30271912]
[12.63053894 100.16633606]
[27.58743095 99.02995300]
[42.54432297 97.89356995]
[57.50121689 96.75718689]
[72.45810699 95.62080383]
[87.41500092 94.48442078]
[73.74428558 88.31097412]
[60.07356262 82.13752747]
[45.07794952 81.77480316]
[30.41292000 78.62251282]
[16.59279060 72.79122162]
[4.10224295 64.48542023]
[-6.62066746 53.99642181]
[-15.19988060 41.69206619]
[-21.33451462 28.00388718]
[-24.80942535 13.41193771]
[-25.50274086 -1.57203078]
[-23.39015007 -16.42251778]
[-18.54574203 -30.61870384]
[-11.13941383 -43.66271591]
[-1.43091047 -55.09709549]
[10.23928165 -64.52082062]
[23.46187782 -71.60340118]
[37.77315521 -76.09643555]
[52.67119980 -77.84236145]
[67.63352966 -76.77994537]
[82.13539886 -72.94643402]
[95.66821289 -66.47628784]
[107.75737762 -57.59641266]
[117.97890472 -46.61823273]
[125.97431183 -33.92676544]
[131.46321106 -19.96710777]
[134.25308228 -5.22883797]
[134.24610901 9.77116013]
[131.44250488 24.50682449]
[125.94141388 38.45977402]
[118.79425812 51.64757919]
[111.64710236 64.83538055]
[124.24188995 56.68852615]
[136.83668518 48.54166794]
[143.82237244 33.70481491]
[160.18466187 32.60599899]
[169.09143066 46.37558746]
[161.38015747 60.84860611]
[144.98353577 61.13645554]
[132.38874817 69.28330994]
[119.79396057 77.43017578]
[118.42053986 84.80334473]
[132.56465149 79.80892181]
[143.96205139 89.56079865]
[141.21548462 104.30719757]
[127.07147217 109.30187988]
[115.67369080 99.54969788]
[114.30027008 106.92287445]
[123.11705017 119.05812836]
[131.93382263 131.19337463]
[140.75061035 143.32864380]
[149.56738281 155.46389771]
[167.02030945 150.68231201]
[184.94714355 152.89230347]
[200.65779114 161.73652649]
[211.80450439 175.86407471]
[216.73268127 193.13668823]
[214.72650146 210.95246887]
[206.11268616 226.63772583]
[215.94674683 237.96429443]
[225.78082275 249.29084778]
[235.61488342 260.61740112]
[245.44895935 271.94396973]
[255.28303528 283.27053833]
[265.11709595 294.59710693]
[274.95117188 305.92367554]
[284.78524780 317.25024414]
[300.45574951 322.08419800]
[303.84039307 338.13027954]
[291.45730591 348.88162231]
[276.04519653 343.27819824]
[273.45867920 327.08432007]
[263.62460327 315.75775146]
[253.79054260 304.43118286]
[243.95646667 293.10461426]
[234.12239075 281.77804565]
[224.28833008 270.45147705]
[214.45425415 259.12490845]
[204.62017822 247.79835510]
[194.78611755 236.47178650]
[183.71452332 241.47146606]
[171.70761108 243.41137695]
[159.59603882 242.14965820]
[148.21971130 237.76620483]
[138.36955261 230.55764771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 111]
[6 110]
[7 109]
[8 108]
[9 107]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[16 53]
[17 51]
[18 50]
[19 49]
[91 100]
[92 99]
[93 98]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
