%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUCUGCUGGGCAUCCUAACCCUGGCUUUCGCCGGGCGAACCGCUGGAGGCUCUGAGCCAGAGCGGGAGGUAGUCGUUCCCAUCCGACUGGACCCGG\
) } def
/len { sequence length } bind def

/coor [
[93.24746704 272.18530273]
[89.05007172 286.95950317]
[78.01673889 297.64413452]
[63.11538696 301.36505127]
[48.35440063 297.12136841]
[37.70441437 286.05459595]
[34.03022003 271.14166260]
[38.32015610 256.39404297]
[49.42025375 245.77880859]
[64.34464264 242.15136719]
[68.48916626 227.73530579]
[72.63368988 213.31924438]
[76.77821350 198.90318298]
[80.92274475 184.48710632]
[79.34040070 179.80876160]
[80.80996704 174.08599854]
[85.79914856 169.31869507]
[90.83190155 155.18817139]
[95.86465454 141.05766296]
[83.13640594 136.66461182]
[72.77180481 128.54458618]
[65.78501892 117.73828888]
[62.77785873 105.53342438]
[63.89141846 93.31250763]
[50.01101303 87.62617493]
[36.13060379 81.93984985]
[22.25019836 76.25352478]
[8.36979103 70.56719971]
[-5.51061583 64.88087463]
[-21.67946243 67.61956787]
[-31.92579651 54.81548309]
[-25.70907021 39.64035797]
[-9.42451763 37.70506668]
[0.17571017 51.00046539]
[14.05611706 56.68679428]
[27.93652344 62.37311935]
[41.81693268 68.05944824]
[55.69733810 73.74577332]
[69.57774353 79.43209839]
[75.03491974 73.06865692]
[81.79304504 68.10863495]
[89.49995422 64.81049347]
[97.75402069 63.34610748]
[106.12512970 63.79178238]
[111.59490967 49.82462311]
[117.06468201 35.85746002]
[122.53445435 21.89030075]
[128.00422668 7.92313910]
[121.18881226 -3.81675768]
[122.41902161 -17.13919258]
[131.01396179 -27.13569069]
[143.62153625 -30.25519371]
[149.52304077 -44.04549026]
[155.42454529 -57.83578491]
[161.32604980 -71.62608337]
[161.99896240 -88.56666565]
[178.46379089 -92.60966492]
[186.90670776 -77.90750122]
[175.11633301 -65.72457886]
[169.21482849 -51.93428040]
[163.31332397 -38.14398575]
[157.41181946 -24.35368919]
[164.34217834 -9.11854744]
[158.06578064 6.75865173]
[141.97138977 13.39291191]
[136.50161743 27.36007309]
[131.03184509 41.32723236]
[125.56206512 55.29439545]
[120.09229279 69.26155853]
[128.52320862 75.68622589]
[134.91464233 84.41064453]
[138.64456177 94.79120636]
[139.29295349 106.01811981]
[136.68542480 117.17847443]
[130.91728210 127.33047485]
[144.20744324 134.28543091]
[157.49761963 141.24037170]
[170.78779602 148.19532776]
[184.07795715 155.15028381]
[197.91929626 148.13623047]
[213.23455811 150.63069153]
[224.13471985 161.67453003]
[226.42843628 177.02114868]
[219.23373413 190.76945496]
[205.31712341 197.63294983]
[190.02981567 194.97247314]
[179.25010681 183.81105042]
[177.12301636 168.44046021]
[163.83283997 161.48550415]
[150.54266357 154.53054810]
[137.25250244 147.57559204]
[123.96232605 140.62063599]
[109.99516296 146.09040833]
[104.96241760 160.22093201]
[99.92966461 174.35144043]
[95.33880615 188.63163757]
[91.19428253 203.04769897]
[87.04975891 217.46376038]
[82.90522766 231.87983704]
[78.76070404 246.29589844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 100]
[11 99]
[12 98]
[13 97]
[14 96]
[17 95]
[18 94]
[19 93]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[52 62]
[53 61]
[54 60]
[55 59]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
