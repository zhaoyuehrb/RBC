%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCUCCCUGGGCCUCUCCAGGGGAUUCUUGAGCCCUGGCUGACAAAGACCAGGAAGAUCUGAGAUACCGGGAAGCCUGUGACUGCCCAUGGGCUCCCUGAUGCUUCUCUUCGUGGAAACGACGCGAAAUUCCUCAGCUUGCAUCUUCCCUGUUAUUUUAAAUGAAUUAUCAUCAACUGUGGAAACUA\
) } def
/len { sequence length } bind def

/coor [
[118.98857117 195.70278931]
[105.52140045 189.09707642]
[99.87445831 175.20060730]
[104.91539001 161.07495117]
[105.10401917 146.07614136]
[97.88141632 148.09701538]
[90.52506256 161.16928101]
[83.16870880 174.24154663]
[75.81235504 187.31381226]
[68.45600128 200.38607788]
[61.09965134 213.45832825]
[53.74329758 226.53059387]
[46.38694763 239.60285950]
[47.10866547 255.98611450]
[33.13761902 264.57342529]
[18.84601974 256.53091431]
[18.93584251 240.13200378]
[33.31468201 232.24650574]
[40.67103577 219.17424011]
[48.02738571 206.10197449]
[55.38373947 193.02972412]
[62.74009323 179.95745850]
[70.09644318 166.88519287]
[77.45279694 153.81292725]
[84.80915070 140.74066162]
[75.50662231 132.50561523]
[69.49830627 122.53046417]
[66.95813751 111.96246338]
[52.08917236 113.94084930]
[37.22021103 115.91923523]
[22.35125160 117.89761353]
[18.97719383 120.69505310]
[15.26075172 122.11877441]
[11.67930984 122.23092651]
[8.64026928 121.24337769]
[6.43798351 119.48154449]
[-8.52922058 120.47290039]
[-23.49642563 121.46425629]
[-38.46363068 122.45561981]
[-53.43083572 123.44697571]
[-68.38932800 124.56204224]
[-83.33809662 125.80072784]
[-94.76219940 137.06436157]
[-110.67348480 135.01242065]
[-118.86618042 121.21896362]
[-113.05554962 106.26516724]
[-97.69901276 101.62229156]
[-84.57678986 110.85195923]
[-69.62802124 109.61327362]
[-63.21009827 105.92104340]
[-54.42219162 108.47977448]
[-39.45499039 107.48841095]
[-24.48778343 106.49705505]
[-9.52058029 105.50569153]
[5.44662476 104.51433563]
[20.37286758 103.02865601]
[35.24182892 101.05027008]
[50.11079025 99.07189178]
[64.97975159 97.09350586]
[66.27636719 86.04792023]
[71.09264374 75.56519318]
[79.18828583 66.77363586]
[89.96080017 60.70076370]
[85.79975891 46.28945923]
[81.63871002 31.87815475]
[77.47766876 17.46684837]
[60.26317215 11.82061100]
[49.96282196 -2.89185977]
[50.53707504 -20.68535805]
[61.56833267 -34.45791626]
[56.93307877 -48.72376251]
[52.29782486 -62.98961258]
[47.66257095 -77.25545502]
[36.03947067 -87.98924255]
[39.46513748 -102.48455811]
[34.82988358 -116.75040436]
[30.19462776 -131.01625061]
[25.55937386 -145.28210449]
[20.92411804 -159.54794312]
[16.28886414 -173.81379700]
[11.65360928 -188.07965088]
[7.01835394 -202.34548950]
[-7.17538452 -209.29626465]
[-12.21782017 -224.27456665]
[-5.11736441 -238.39402771]
[9.91340733 -243.27781677]
[23.95700455 -236.02848816]
[28.68161201 -220.94691467]
[21.28420258 -206.98074341]
[25.91945648 -192.71490479]
[30.55471230 -178.44905090]
[35.18996811 -164.18319702]
[39.82522202 -149.91735840]
[44.46047592 -135.65150452]
[49.09572983 -121.38565826]
[53.73098755 -107.11981201]
[65.02253723 -97.40641785]
[61.92841721 -81.89071655]
[66.56367493 -67.62486267]
[71.19892883 -53.35901642]
[75.83418274 -39.09317017]
[87.82789612 -37.08900833]
[97.88684082 -30.12871170]
[104.06211853 -19.48603058]
[105.12558746 -7.15505552]
[100.81363678 4.52332354]
[91.88897705 13.30580521]
[96.05001831 27.71710968]
[100.21105957 42.12841415]
[104.37210846 56.53972244]
[118.81732178 60.58148193]
[129.85317993 50.42225647]
[140.88903809 40.26303482]
[151.92489624 30.10380936]
[162.96075439 19.94458580]
[173.99661255 9.78536224]
[173.09794617 -5.82637691]
[182.48594666 -18.33234978]
[197.72790527 -21.82761765]
[211.62701416 -14.66182327]
[217.62055969 -0.21843421]
[212.87855530 14.68282223]
[199.64004517 23.00602913]
[184.15583801 20.82122040]
[173.11997986 30.98044395]
[162.08412170 41.13966751]
[151.04826355 51.29889297]
[140.01240540 61.45811462]
[128.97654724 71.61734009]
[141.96104431 97.75730133]
[134.12818909 126.94123077]
[147.20045471 134.29759216]
[160.27272034 141.65394592]
[173.34498596 149.01028442]
[189.16616821 149.03527832]
[196.46322632 162.01997375]
[209.53549194 169.37632751]
[222.60775757 176.73268127]
[231.63911438 178.21894836]
[235.83389282 184.32026672]
[248.78274536 191.89175415]
[261.73159790 199.46322632]
[253.91423035 186.66133118]
[249.95864868 172.19227600]
[250.17588806 157.19384766]
[254.54887390 142.84542847]
[262.73373413 130.27529907]
[274.08685303 120.47190857]
[287.71548462 114.20611572]
[302.54797363 111.97064209]
[317.41796875 113.94127655]
[331.15618896 119.96304321]
[342.68231201 129.56243896]
[351.08999634 141.98461914]
[355.71813965 156.25277710]
[356.20278931 171.24494934]
[352.50585938 185.78222656]
[344.91802979 198.72149658]
[334.03594971 209.04528809]
[320.71536255 215.94178772]
[306.00369263 218.86871338]
[291.05780029 217.59588623]
[277.05184937 212.22282410]
[286.84063721 223.58854675]
[296.62942505 234.95426941]
[306.41821289 246.31999207]
[322.06930542 251.21646118]
[325.38986206 267.27590942]
[312.96398926 277.97775269]
[297.57434082 272.31286621]
[295.05249023 256.10876465]
[285.26370239 244.74305725]
[275.47491455 233.37733459]
[265.68612671 222.01161194]
[254.16009521 212.41207886]
[241.21125793 204.84059143]
[228.26240540 197.26911926]
[215.25140381 189.80494690]
[202.17913818 182.44859314]
[189.10688782 175.09223938]
[174.22070312 175.59341431]
[165.98863220 162.08255005]
[152.91636658 154.72619629]
[139.84410095 147.36984253]
[126.77184296 140.01350403]
[119.54923248 142.03437805]
[127.49440002 154.75735474]
[139.13511658 164.21746826]
[141.51861572 179.02688599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[28 59]
[29 58]
[30 57]
[31 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 49]
[42 48]
[63 110]
[64 109]
[65 108]
[66 107]
[70 101]
[71 100]
[72 99]
[73 98]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[131 185]
[132 184]
[133 183]
[134 182]
[136 180]
[137 179]
[138 178]
[140 177]
[141 176]
[142 175]
[163 174]
[164 173]
[165 172]
[166 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
