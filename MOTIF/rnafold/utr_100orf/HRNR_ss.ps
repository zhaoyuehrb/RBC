%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCCUGAAAGCUGUUUCUGUCUCUACCCUACUUGUUCCUCUGGUGAGCUAGGUUACUCAAACUUGCAAAAAAAAAAAUGCCUAAACUCCUACAAGGCGUCAUCACUGUCAUCGAUGUUUUCUACCAAUAUGCCACCCAGCAUGGGGAGUAUGAUACGUUGAACAAGGCAGAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[86.38331604 501.97787476]
[78.45363617 514.94659424]
[66.16170502 523.88958740]
[51.38193893 527.44305420]
[36.36815262 525.06506348]
[23.40983582 517.11834717]
[14.48304081 504.81466675]
[10.94903755 490.03024292]
[13.34673595 475.01959229]
[21.31050301 462.07174683]
[33.62592697 453.16113281]
[48.41498566 449.64660645]
[50.76150513 434.83126831]
[53.10802078 420.01593018]
[51.54341125 417.65795898]
[50.83202744 414.52966309]
[51.27521515 410.95782471]
[53.04872131 407.37332153]
[56.16992950 404.26379395]
[59.54419708 389.64822388]
[62.91846085 375.03268433]
[66.29272461 360.41714478]
[69.66699219 345.80157471]
[73.04125977 331.18603516]
[76.41552734 316.57049561]
[64.88951874 326.17001343]
[50.12802505 328.83428955]
[35.97338104 323.86981201]
[26.10996246 312.56878662]
[23.10515976 297.87283325]
[27.74110413 283.60720825]
[38.81108856 273.48516846]
[53.43365479 270.14144897]
[67.80263519 274.44638062]
[78.17786407 285.27941895]
[81.85875702 299.81793213]
[87.71972656 286.01034546]
[93.58068848 272.20278931]
[99.44165802 258.39520264]
[105.30262756 244.58764648]
[90.28350830 232.88626099]
[85.10604858 215.62713623]
[90.56021118 199.52679443]
[103.51538086 190.17178345]
[101.68733978 175.28358459]
[99.85929871 160.39540100]
[98.03125763 145.50720215]
[96.20321655 130.61900330]
[64.46907806 117.44705963]
[58.42575073 75.38787842]
[45.30645370 68.11573029]
[36.25574112 66.68492889]
[32.02326202 60.60046387]
[19.03288269 53.10046387]
[6.04250145 45.60046387]
[-6.94787979 38.10046387]
[-19.93826103 30.60046577]
[-35.74444199 33.34712601]
[-47.65077209 22.59450150]
[-46.52372742 6.59108496]
[-33.22788239 -2.38667154]
[-17.96267509 2.54819798]
[-12.43826103 17.61008453]
[0.55212015 25.11008453]
[13.54250145 32.61008453]
[26.53288269 40.11008453]
[39.52326202 47.61008453]
[52.57859802 54.99643707]
[65.69789124 62.26858139]
[72.22556305 58.57540512]
[64.19874573 45.90377426]
[56.17193604 33.23213959]
[43.86142731 24.66176033]
[44.56088257 9.67807770]
[57.61626434 2.29180551]
[70.81994629 9.40958786]
[71.82570648 24.37566185]
[78.55330658 37.78235626]
[85.28089905 51.18905258]
[91.80856323 47.49587631]
[92.33205414 32.50501251]
[92.85555267 17.51415062]
[93.37904358 2.52328777]
[93.90253448 -12.46757507]
[94.42602539 -27.45843697]
[81.09868622 -34.98442459]
[72.80515289 -47.84817123]
[71.45122528 -63.09367752]
[77.34803009 -77.21764374]
[89.14051819 -86.97447205]
[104.11886597 -90.12213135]
[118.84115601 -85.93730927]
[129.92431641 -75.38163757]
[134.82151794 -60.88073730]
[132.40740967 -45.76681519]
[123.23675537 -33.51293182]
[109.41689301 -26.93494415]
[108.89339447 -11.94408226]
[108.36990356 3.04678011]
[107.84641266 18.03764343]
[107.32292175 33.02850342]
[106.79943085 48.01936722]
[120.70718384 53.63846588]
[130.74414062 42.49129486]
[140.78109741 31.34412193]
[150.81806946 20.19694901]
[146.65518188 5.34185219]
[151.20623779 -9.39895344]
[163.01902771 -19.32172966]
[178.32412720 -21.26015472]
[192.23773193 -14.59568501]
[200.32006836 -1.45492733]
[199.99208069 13.96894932]
[191.35842896 26.75424194]
[177.17408752 32.82121277]
[161.96524048 30.23390770]
[151.92826843 41.38108063]
[141.89131165 52.52825165]
[131.85435486 63.67542648]
[139.65771484 77.89278412]
[141.90768433 92.96920776]
[138.97119141 106.93483734]
[131.85449219 118.17229462]
[122.00925446 125.60401154]
[111.09140778 128.79096985]
[112.91944885 143.67916870]
[114.74748993 158.56735229]
[116.57553101 173.45555115]
[118.40357208 188.34373474]
[139.40689087 199.79988098]
[143.55293274 226.34318542]
[157.97184753 230.47773743]
[172.39077759 234.61230469]
[186.80970764 238.74685669]
[201.22862244 242.88142395]
[214.93342590 235.47761536]
[229.49736023 239.87605286]
[236.47131348 252.98710632]
[250.89022827 257.12167358]
[265.30917358 261.25622559]
[279.72808838 265.39077759]
[296.62023926 263.94451904]
[302.68618774 279.77615356]
[289.15246582 289.98767090]
[275.59353638 279.80969238]
[261.17459106 275.67514038]
[246.75567627 271.54058838]
[232.33674622 267.40603638]
[219.47471619 274.82919312]
[204.79296875 270.84158325]
[197.09407043 257.30035400]
[182.67514038 253.16578674]
[168.25622559 249.03123474]
[153.83729553 244.89666748]
[139.41836548 240.76210022]
[153.28697205 246.47717285]
[160.75532532 259.48577881]
[158.69804382 274.34402466]
[147.97607422 284.83398438]
[133.07638550 286.56579590]
[120.23424530 278.81469727]
[114.82389069 264.82440186]
[119.11019897 250.44860840]
[113.24922943 264.25619507]
[107.38826752 278.06375122]
[101.52729797 291.87133789]
[95.66632843 305.67889404]
[91.03107452 319.94473267]
[87.65680695 334.56030273]
[84.28254700 349.17584229]
[80.90827942 363.79141235]
[77.53401184 378.40695190]
[74.15974426 393.02249146]
[70.78548431 407.63806152]
[67.92334747 422.36245728]
[65.57682800 437.17779541]
[63.23031235 451.99310303]
[76.20948792 459.90573120]
[85.16862488 472.18588257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 177]
[13 176]
[14 175]
[19 174]
[20 173]
[21 172]
[22 171]
[23 170]
[24 169]
[25 168]
[36 167]
[37 166]
[38 165]
[39 164]
[40 163]
[44 129]
[45 128]
[46 127]
[47 126]
[48 125]
[50 69]
[51 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[103 119]
[104 118]
[105 117]
[106 116]
[131 155]
[132 154]
[133 153]
[134 152]
[135 151]
[138 148]
[139 147]
[140 146]
[141 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
