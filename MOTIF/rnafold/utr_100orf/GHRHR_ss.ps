%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAAGGCUUACUGAGGCUGGUGGAGGGAGCCACUGCUGGGCUCACCAUGGACCGCCGGAUGUGGGGGGCCCACGUCUUCUGCGUGUUGAGCCCGUUACCGACCGUAUUGGGCCACAUGCACCCAGAAUGUGACUUCAUCACCCAGC\
) } def
/len { sequence length } bind def

/coor [
[-4.56544971 409.36563110]
[-10.99217415 422.91912842]
[-17.41889954 436.47259521]
[-23.84562492 450.02609253]
[-21.90786552 468.30648804]
[-36.66016006 477.75762939]
[-42.79970932 491.44360352]
[-38.45930099 506.88836670]
[-47.94488525 519.82678223]
[-63.97992706 520.33367920]
[-74.26372528 508.02014160]
[-70.90741730 492.33209229]
[-56.48568726 485.30404663]
[-50.34613800 471.61807251]
[-54.35767746 460.16116333]
[-49.30023575 448.68551636]
[-37.39912033 443.59936523]
[-30.97239304 430.04589844]
[-24.54566956 416.49240112]
[-18.11894417 402.93890381]
[-12.41523647 389.06561279]
[-7.45039034 374.91110229]
[-2.48554444 360.75659180]
[2.47930145 346.60208130]
[7.44414759 332.44757080]
[2.48175502 321.36929321]
[6.55453777 309.50839233]
[17.98490524 303.43780518]
[23.24706650 289.39111328]
[28.50922775 275.34442139]
[33.77138901 261.29772949]
[30.99068642 246.66499329]
[43.07750320 236.45619202]
[48.33966446 222.40950012]
[53.60182571 208.36280823]
[45.98559189 193.40270996]
[51.62569427 177.23408508]
[67.50697327 169.97659302]
[72.47182465 155.82208252]
[77.43666840 141.66755676]
[82.40151215 127.51304626]
[87.36636353 113.35852814]
[80.14985657 126.50851440]
[66.79145813 133.33149719]
[51.90745544 131.46965027]
[40.64134979 121.56637573]
[36.88640213 107.04396820]
[41.94021225 92.92097473]
[54.05632782 84.07791138]
[69.04775238 83.57069397]
[81.73408508 91.57488251]
[70.53065491 81.60075378]
[54.37017822 78.81311798]
[48.95878983 63.33251572]
[59.86326599 51.08407211]
[75.86602020 54.66793060]
[80.50478363 70.39732361]
[91.70821381 80.37145233]
[104.59188843 72.68959808]
[101.14405060 58.09122849]
[97.69621277 43.49285889]
[94.24837494 28.89449120]
[90.80052948 14.29612064]
[87.35269165 -0.30224952]
[83.90485382 -14.90061951]
[80.45701599 -29.49898911]
[77.00917816 -44.09735870]
[67.48400879 -58.12260818]
[78.32431793 -71.15809631]
[93.85127258 -64.35002136]
[91.60754395 -47.54520035]
[95.05538940 -32.94682693]
[98.50322723 -18.34845924]
[101.95106506 -3.75008869]
[105.39890289 10.84828091]
[108.84674072 25.44665146]
[112.29457855 40.04502106]
[115.74242401 54.64339066]
[119.19026184 69.24176025]
[115.59865570 77.91553497]
[111.09632874 86.05410004]
[105.73405457 93.58278656]
[119.48399353 87.58785248]
[133.23393250 81.59292603]
[146.98387146 75.59799957]
[160.73381042 69.60306549]
[174.48374939 63.60813904]
[181.15467834 57.26714325]
[188.58734131 57.63515854]
[202.46061707 51.93145370]
[209.26374817 45.73250961]
[216.68701172 46.25714874]
[230.67744446 40.84719849]
[244.66789246 35.43724823]
[258.65832520 30.02729607]
[272.64877319 24.61734581]
[282.72958374 12.42358112]
[297.39080811 15.04986954]
[311.38125610 9.63992023]
[325.37170410 4.22996950]
[333.14981079 -9.80144596]
[348.99288940 -12.32653427]
[360.74749756 -1.40826190]
[359.39651489 14.57780552]
[345.97625732 23.36852646]
[330.78164673 18.22041130]
[316.79119873 23.63036156]
[302.80078125 29.04031181]
[293.72064209 40.84712219]
[278.05871582 38.60778809]
[264.06826782 44.01773834]
[250.07783508 49.42768860]
[236.08740234 54.83763885]
[222.09695435 60.24758911]
[208.16432190 65.80472565]
[194.29106140 71.50843048]
[180.47868347 77.35807800]
[166.72874451 83.35300446]
[152.97880554 89.34793854]
[139.22886658 95.34286499]
[125.47892761 101.33779144]
[111.72898865 107.33272552]
[101.52087402 118.32337952]
[96.55603027 132.47789001]
[91.59118652 146.63240051]
[86.62633514 160.78692627]
[81.66149139 174.94143677]
[88.86997223 186.36705017]
[88.17002106 199.66314697]
[80.04322815 209.96247864]
[67.64852142 213.62496948]
[62.38636017 227.67166138]
[57.12419891 241.71835327]
[59.52851486 257.35580444]
[47.81808472 266.55987549]
[42.55592346 280.60659790]
[37.29376221 294.65328979]
[32.03160095 308.69998169]
[35.50238037 326.75216675]
[21.59866333 337.41241455]
[16.63381767 351.56692505]
[11.66897106 365.72143555]
[6.70412493 379.87594604]
[1.73927903 394.03045654]
[16.28365135 390.36151123]
[28.35003662 399.27230835]
[29.12243080 414.25241089]
[18.03650093 424.35696411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[6 14]
[7 13]
[21 144]
[22 143]
[23 142]
[24 141]
[25 140]
[28 138]
[29 137]
[30 136]
[31 135]
[33 133]
[34 132]
[35 131]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[51 58]
[52 57]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
[82 122]
[83 121]
[84 120]
[85 119]
[86 118]
[87 117]
[89 116]
[90 115]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
