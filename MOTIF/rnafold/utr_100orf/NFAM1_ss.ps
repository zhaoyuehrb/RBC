%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAACUAAAGAGUCGCCGCAGACAAGCAGGCCCCCAGAUGGAGAACCAGCCUGUGAGGUGGCGGGCCCUGCCAGGCCUCCCACGCCCUCCUGGGCUCCCCGCAGCCCCCUGGCUCCUCCUUGGCGUGCUGCUGCUGC\
) } def
/len { sequence length } bind def

/coor [
[-99.71736908 585.50415039]
[-105.65280151 599.27990723]
[-111.58823395 613.05566406]
[-117.52366638 626.83135986]
[-118.05923462 636.03656006]
[-123.75204468 640.84893799]
[-129.99728394 654.48699951]
[-127.91737366 670.75372314]
[-141.12693787 680.47174072]
[-156.03712463 673.64392090]
[-157.30960083 657.29425049]
[-143.63536072 648.24176025]
[-137.39012146 634.60369873]
[-131.29939270 620.89593506]
[-125.36396027 607.12017822]
[-119.42852783 593.34448242]
[-113.49309540 579.56872559]
[-117.80769348 559.43286133]
[-100.67365265 546.65570068]
[-95.68519592 532.50952148]
[-90.69673920 518.36328125]
[-85.70828247 504.21707153]
[-86.45666504 496.80041504]
[-80.44393921 489.80972290]
[-75.13705444 475.77984619]
[-75.71763611 468.34817505]
[-69.54845428 461.49514771]
[-63.92586517 447.58880615]
[-58.30327606 433.68246460]
[-60.70576477 418.98287964]
[-48.35974121 409.08914185]
[-42.73715210 395.18276978]
[-37.11455917 381.27642822]
[-41.97055435 372.16903687]
[-40.94522858 361.67724609]
[-34.13906097 353.34027100]
[-23.64312744 350.10571289]
[-17.39788818 336.46765137]
[-22.81322861 322.63977051]
[-16.67394638 308.71987915]
[-2.13329864 303.13351440]
[4.11194086 289.49545288]
[10.35717964 275.85736084]
[16.60241890 262.21929932]
[15.77319050 257.43786621]
[17.99880981 252.09315491]
[23.45041275 248.11596680]
[30.30554199 234.77403259]
[37.16067123 221.43209839]
[44.01580048 208.09016418]
[41.07537079 187.70823669]
[59.03572083 176.12129211]
[64.97115326 162.34556580]
[70.90658569 148.56983948]
[76.84201813 134.79411316]
[82.77744293 121.01838684]
[70.59774780 103.33825684]
[74.67841339 80.41957855]
[95.15213013 65.91619873]
[96.50636292 50.97745895]
[97.86060333 36.03871536]
[99.21483612 21.09997368]
[92.75505066 6.65761566]
[101.60980225 -5.31913805]
[102.96403503 -20.25788116]
[104.31827545 -35.19662476]
[105.67250824 -50.13536835]
[107.02674866 -65.07411194]
[96.71476746 -77.05069733]
[97.97512817 -92.80465698]
[110.06007385 -102.98942566]
[125.79982758 -101.56257629]
[135.85626221 -89.37062836]
[134.26307678 -73.64685059]
[121.96549225 -63.71987534]
[120.61125183 -48.78113174]
[119.25701904 -33.84238815]
[117.90277863 -18.90364456]
[116.54854584 -3.96490169]
[123.10519409 9.40893745]
[114.15357971 22.45421028]
[112.79934692 37.39295197]
[111.44510651 52.33169556]
[110.09087372 67.27043915]
[123.10941315 74.72145081]
[135.30416870 65.98715973]
[147.49893188 57.25286484]
[159.69367981 48.51856995]
[165.96875000 33.36747742]
[182.26063538 31.49485970]
[191.80963135 44.82709885]
[184.79255676 59.64913559]
[168.42797852 60.71332550]
[156.23321533 69.44761658]
[144.03846741 78.18191528]
[131.84370422 86.91620636]
[132.96347046 100.91397858]
[128.45130920 113.57851410]
[119.55678558 122.84778595]
[108.19545746 127.42569733]
[96.55316925 126.95381927]
[90.61774445 140.72955322]
[84.68231201 154.50527954]
[78.74687958 168.28100586]
[72.81144714 182.05673218]
[77.50285339 190.40832520]
[77.76943207 199.84518433]
[73.67861938 208.19960022]
[66.28408813 213.61216736]
[57.35773468 214.94529724]
[50.50260544 228.28723145]
[43.64747620 241.62916565]
[36.79234695 254.97109985]
[30.24048996 268.46453857]
[23.99525070 282.10260010]
[17.75001144 295.74069214]
[11.50477219 309.37875366]
[16.77488327 324.03698730]
[10.24704266 337.77896118]
[-3.75981641 342.71289062]
[-10.00505543 356.35095215]
[-7.12979698 376.24703979]
[-23.20821381 386.89901733]
[-28.83080482 400.80538940]
[-34.45339584 414.71173096]
[-32.45307159 430.40597534]
[-44.39692688 439.30505371]
[-50.01951981 453.21139526]
[-55.64211273 467.11773682]
[-61.10719681 481.08673096]
[-66.41407776 495.11660767]
[-71.56207275 509.20553589]
[-76.55052948 523.35174561]
[-81.53898621 537.49792480]
[-86.52744293 551.64416504]
[-81.28097534 559.65869141]
[-80.37564087 569.05584717]
[-83.89102936 577.66821289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[6 13]
[7 12]
[19 135]
[20 134]
[21 133]
[22 132]
[24 131]
[25 130]
[27 129]
[28 128]
[29 127]
[31 125]
[32 124]
[33 123]
[37 121]
[38 120]
[41 117]
[42 116]
[43 115]
[44 114]
[47 113]
[48 112]
[49 111]
[50 110]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[59 84]
[60 83]
[61 82]
[62 81]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
