%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUGCGGGGGCUGACAUGUCGUCCCGGCCUGGGCGCGAGGACGUGGGGGCUGCGGGCGCGCGGCGGCCGCGUGAGCCGCCGGAGCAGGAGCUGCAGCGACGUCGGGAGCAGAAGC\
) } def
/len { sequence length } bind def

/coor [
[224.96116638 294.40563965]
[223.38900757 281.92126465]
[225.77667236 269.54180908]
[231.90304565 258.49456787]
[222.09375000 247.14654541]
[212.28443909 235.79852295]
[198.10786438 231.22973633]
[194.93673706 215.72958374]
[185.12742615 204.38156128]
[175.31813049 193.03353882]
[161.14155579 188.46475220]
[157.97041321 172.96459961]
[148.16111755 161.61657715]
[138.35182190 150.26855469]
[128.54251099 138.92053223]
[114.36593628 134.35174561]
[111.19480896 118.85160065]
[101.38550568 107.50357819]
[99.39588165 110.37767029]
[96.12494659 112.57661438]
[91.81758881 113.66199493]
[86.85112000 113.28202057]
[81.70610046 111.20848083]
[76.92742920 107.36433411]
[62.39670944 103.64165497]
[47.86599731 99.91898346]
[33.33528137 96.19630432]
[18.75669289 92.66574860]
[4.13277531 89.32794189]
[-10.53392696 86.18344116]
[-25.24085808 83.23281860]
[-40.59683990 88.98831940]
[-53.08557892 78.35989380]
[-49.85972977 62.28115463]
[-34.23777008 57.29253006]
[-22.29023361 68.52588654]
[-7.58330202 71.47651672]
[-0.31508017 69.68467712]
[7.47058916 74.70401764]
[22.09450722 78.04183197]
[29.40749550 76.44248199]
[37.05795670 81.66558838]
[51.58867264 85.38826752]
[66.11938477 89.11094666]
[80.65010071 92.83361816]
[92.50000000 83.63688660]
[92.50000000 68.63688660]
[92.50000000 53.63688660]
[92.50000000 38.63688660]
[81.60544586 27.50376129]
[81.81912994 12.29162788]
[92.50000000 1.97394609]
[92.50000000 -13.02605438]
[92.50000000 -28.02605438]
[92.50000000 -43.02605438]
[92.50000000 -58.02605438]
[92.50000000 -73.02605438]
[83.83629608 -86.94985962]
[91.80042267 -101.28529358]
[108.19957733 -101.28529358]
[116.16370392 -86.94985962]
[107.50000000 -73.02605438]
[107.50000000 -58.02605438]
[107.50000000 -43.02605438]
[107.50000000 -28.02605438]
[107.50000000 -13.02605438]
[107.50000000 1.97394609]
[118.18087006 12.29162788]
[118.39455414 27.50376129]
[107.50000000 38.63688660]
[107.50000000 53.63688660]
[107.50000000 68.63688660]
[107.50000000 83.63688660]
[112.73352814 97.69427490]
[122.54283142 109.04229736]
[137.42103577 114.42277527]
[139.89054871 129.11123657]
[149.69984436 140.45925903]
[159.50914001 151.80728149]
[169.31843567 163.15530396]
[184.19665527 168.53578186]
[186.66615295 183.22424316]
[196.47544861 194.57226562]
[206.28475952 205.92028809]
[221.16296387 211.30076599]
[223.63246155 225.98922729]
[233.44177246 237.33724976]
[243.25106812 248.68527222]
[260.29022217 243.50614929]
[277.84155273 246.19877625]
[292.45837402 256.18872070]
[301.28997803 271.47296143]
[302.63763428 289.02148438]
[296.28115845 305.37774658]
[306.95751953 315.91412354]
[317.63391113 326.45050049]
[328.31027222 336.98687744]
[345.73696899 336.51745605]
[357.91653442 348.51593018]
[357.71588135 365.27557373]
[368.66665649 375.52645874]
[384.75247192 378.71691895]
[389.77545166 394.32785034]
[378.56842041 406.30007935]
[362.66018677 402.31759644]
[358.41580200 386.47723389]
[347.46499634 376.22637939]
[334.69818115 378.44451904]
[322.82473755 372.78466797]
[316.31817627 361.12893677]
[317.77389526 347.66323853]
[307.09753418 337.12686157]
[296.42117310 326.59051514]
[285.74478149 316.05413818]
[274.54394531 321.45510864]
[262.19515991 323.11352539]
[249.91772461 320.85012817]
[238.92875671 314.87371826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 88]
[5 87]
[6 86]
[8 84]
[9 83]
[10 82]
[12 80]
[13 79]
[14 78]
[15 77]
[17 75]
[18 74]
[24 45]
[25 44]
[26 43]
[27 42]
[28 40]
[29 39]
[30 37]
[31 36]
[46 73]
[47 72]
[48 71]
[49 70]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[94 114]
[95 113]
[96 112]
[97 111]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
