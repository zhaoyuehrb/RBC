%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUUUUAAGAAAUGCCUUUUUAUGAAAAUAUUUCAAAAGGAAUUCAAGUUUAUUUUGAAAAAAUGCACACCAAUACAGAAAUAUAGAGAGGAAAAUGGCAACUCAUCCUCCUCACCACACC\
) } def
/len { sequence length } bind def

/coor [
[76.55891418 120.83572388]
[89.08638763 112.58788300]
[75.21022797 118.28456879]
[61.33407211 123.98125458]
[47.45791245 129.67794800]
[33.58175659 135.37463379]
[19.70559692 141.07131958]
[5.82943869 146.76800537]
[-8.04671955 152.46469116]
[-12.50225449 157.59288025]
[-18.05592918 159.34931946]
[-22.76604652 158.07955933]
[-36.91090393 163.07185364]
[-51.05576324 168.06414795]
[-65.20062256 173.05644226]
[-79.34548187 178.04873657]
[-93.49033356 183.04103088]
[-100.36284637 197.01980591]
[-114.77886200 201.88121033]
[-128.06314087 195.24317932]
[-142.20799255 200.23547363]
[-156.35285950 205.22775269]
[-166.59942627 218.03166199]
[-182.76821899 215.29267883]
[-188.22618103 199.82843018]
[-177.35861206 187.54722595]
[-161.34515381 191.08290100]
[-147.20028687 186.09060669]
[-133.05543518 181.09831238]
[-126.88076019 167.59242249]
[-112.60697937 162.32803345]
[-98.48262787 168.89617920]
[-84.33776855 163.90388489]
[-70.19291687 158.91159058]
[-56.04805756 153.91929626]
[-41.90319824 148.92700195]
[-27.75834084 143.93470764]
[-13.74340534 138.58853149]
[0.13275228 132.89184570]
[14.00891018 127.19515228]
[27.88506889 121.49846649]
[41.76122665 115.80178070]
[55.63738632 110.10509491]
[69.51354218 104.40840912]
[83.38970184 98.71172333]
[88.91156769 84.76507568]
[82.69593811 71.11348724]
[76.48030090 57.46189499]
[70.26467133 43.81030655]
[64.04903412 30.15871811]
[57.83340073 16.50712776]
[43.37277222 9.55948162]
[39.92919540 -6.10963869]
[50.14429092 -18.48022652]
[66.18190765 -18.06262207]
[75.73936462 -5.17717981]
[71.48499298 10.29149437]
[77.70062256 23.94308472]
[83.91625977 37.59467316]
[90.13188934 51.24626160]
[96.34752655 64.89785004]
[102.56315613 78.54943848]
[103.65335083 63.58911133]
[100.00273132 49.04012299]
[99.43452454 34.05089188]
[101.97320557 19.26728058]
[107.50938416 5.32630873]
[115.80451965 -7.17132425]
[126.50116730 -17.68710518]
[139.13842773 -25.76792145]
[153.17178345 -31.06557655]
[167.99652100 -33.35179901]
[182.97389221 -32.52807999]
[197.45851135 -28.62990952]
[210.82626343 -21.82525826]
[222.50114441 -12.40733242]
[231.98007202 -0.78194082]
[238.85464478 12.54998970]
[242.82861328 27.01399803]
[243.73075867 41.98684311]
[241.52220154 56.82336426]
[236.29811096 70.88426208]
[228.28359985 83.56367493]
[217.82397461 94.31524658]
[205.36994934 102.67571259]
[191.45816040 108.28482819]
[176.68804932 110.90089417]
[161.69604492 110.41119385]
[147.12814331 106.83682251]
[133.61779785 100.33534241]
[118.61853027 100.48400879]
[131.85289001 107.54457092]
[145.08726501 114.60512543]
[158.32164001 121.66568756]
[171.55599976 128.72624207]
[186.50677490 124.35448456]
[199.82771301 131.70341492]
[203.90339661 145.98364258]
[217.13775635 153.04418945]
[230.37213135 160.10475159]
[243.60649109 167.16531372]
[259.96939087 166.07539368]
[268.86865234 179.84982300]
[261.14953613 194.31864929]
[244.75274658 194.59757996]
[236.54594421 180.39967346]
[223.31156921 173.33912659]
[210.07719421 166.27856445]
[196.84283447 159.21800232]
[182.71209717 163.78506470]
[169.18998718 156.81318665]
[164.49543762 141.96061707]
[151.26107788 134.90005493]
[138.02670288 127.83949280]
[124.79233551 120.77893829]
[111.55796814 113.71837616]
[123.19515228 123.18283844]
[128.84500122 137.07814026]
[127.11437988 151.97796631]
[118.43002319 164.20834351]
[104.93331909 170.75349426]
[89.95227814 169.99952698]
[77.18092346 162.13235474]
[69.76840210 149.09185791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[20 29]
[21 28]
[22 27]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[91 116]
[92 115]
[93 114]
[94 113]
[95 112]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
