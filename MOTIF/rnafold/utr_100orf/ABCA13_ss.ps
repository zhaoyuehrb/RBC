%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGAGAGCAGGGAGCAGCAGGCAUGGGGCAUGCCGGGUGCCAGUUCAAAGCCCUGCUGUGGAAGAAUUGGCUCUGCAGACUCAGGAACCCGGUCCUUUUCCUUGCUGAAUUCUUCUGGCCUU\
) } def
/len { sequence length } bind def

/coor [
[76.50057220 583.01989746]
[61.44539642 588.56262207]
[47.80043793 580.12493896]
[46.03293991 564.17950439]
[57.49877548 552.95837402]
[59.00419998 538.03411865]
[60.50962448 523.10986328]
[58.02278519 516.06030273]
[62.24501419 507.83108521]
[64.12501526 492.94937134]
[58.04387665 479.35272217]
[67.44978333 466.63110352]
[69.32978058 451.74938965]
[71.20977783 436.86767578]
[73.08978271 421.98596191]
[74.96977997 407.10421753]
[76.09967804 392.14685059]
[76.47663116 377.15158081]
[76.85358429 362.15631104]
[77.23053741 347.16104126]
[77.60748291 332.16580200]
[77.98443604 317.17053223]
[78.36138916 302.17526245]
[66.44268799 293.28244019]
[61.99323654 278.90652466]
[66.91961670 264.49874878]
[79.53089142 255.65217590]
[79.90783691 240.65690613]
[80.28479004 225.66165161]
[80.66174316 210.66638184]
[78.40574646 207.81962585]
[77.47894287 203.70137024]
[78.48051453 198.97859192]
[81.67459869 194.56750488]
[83.18002319 179.64324951]
[84.68544769 164.71897888]
[86.19087219 149.79472351]
[87.69630432 134.87045288]
[89.20172882 119.94618225]
[90.70715332 105.02191925]
[89.38938141 90.07991791]
[85.29510498 75.64949799]
[81.20082855 61.21908569]
[77.10654449 46.78866959]
[73.01226807 32.35825729]
[68.91799164 17.92784119]
[64.82370758 3.49742603]
[60.72943115 -10.93298912]
[50.22454071 -13.70252705]
[41.91891479 -20.57843018]
[37.30702972 -30.23470306]
[37.18124390 -40.85365677]
[41.49647141 -50.46796799]
[49.39119339 -57.32515335]
[46.39554214 -72.02297974]
[33.07692337 -80.53120422]
[29.75709915 -95.98287964]
[38.40566254 -109.21080017]
[53.89157486 -112.36708069]
[67.02732086 -103.57914734]
[70.01969147 -88.06072998]
[61.09336853 -75.01863098]
[64.08901978 -60.32080460]
[81.05873108 -50.95131683]
[85.91214752 -31.87397194]
[75.15984344 -15.02726841]
[79.25412750 -0.59685296]
[83.34840393 13.83356190]
[87.44268036 28.26397705]
[91.53696442 42.69439316]
[95.63124084 57.12480545]
[99.72551727 71.55522156]
[103.81980133 85.98563385]
[118.08564758 90.62089539]
[129.87997437 81.35299683]
[141.67430115 72.08510590]
[153.46862793 62.81721115]
[155.10179138 47.09753036]
[167.42457581 37.20186234]
[183.12611389 39.00112915]
[192.89094543 51.42785645]
[190.92578125 67.10948944]
[178.39649963 76.74239349]
[162.73652649 74.61153412]
[150.94219971 83.87943268]
[139.14787292 93.14732361]
[127.35353851 102.41522217]
[116.05548096 108.22665405]
[105.63141632 106.52734375]
[104.12599182 121.45161438]
[102.62056732 136.37586975]
[101.11514282 151.30014038]
[99.60971832 166.22441101]
[98.10428619 181.14866638]
[96.59886169 196.07293701]
[95.65700531 211.04333496]
[95.28005219 226.03860474]
[94.90309906 241.03385925]
[94.52615356 256.02911377]
[106.67700958 265.49816895]
[110.87325287 280.13528442]
[105.70711517 294.26947021]
[93.35665131 302.55221558]
[92.97969818 317.54748535]
[92.60275269 332.54275513]
[92.22579956 347.53799438]
[91.84884644 362.53326416]
[91.47189331 377.52853394]
[91.09494019 392.52380371]
[93.45581818 396.47277832]
[94.27913666 400.55511475]
[93.72308350 404.24874878]
[92.10568237 407.14331055]
[89.85150146 408.98422241]
[87.97150421 423.86593628]
[86.09149933 438.74768066]
[84.21150208 453.62939453]
[82.33150482 468.51110840]
[88.27817535 483.17221069]
[79.00673676 494.82937622]
[77.12673950 509.71109009]
[75.43389130 524.61529541]
[73.92846680 539.53955078]
[72.42304230 554.46380615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 124]
[6 123]
[7 122]
[9 121]
[10 120]
[12 118]
[13 117]
[14 116]
[15 115]
[16 114]
[17 109]
[18 108]
[19 107]
[20 106]
[21 105]
[22 104]
[23 103]
[27 99]
[28 98]
[29 97]
[30 96]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[54 63]
[55 62]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
