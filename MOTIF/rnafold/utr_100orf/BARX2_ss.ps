%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCACUCGCAGCCGCGCUCGGGCCGGCGGACGCUCGCGCCGGCUCACCAUGCACUGCCACGCCGAGCUGAGGCUGAGCUCGCCCGGCCAGCUCAAAGCAGCCAGGCGGCGCUACAAGACUUUCAUGAUCGACGAGAUCCUCUCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[98.61737823 234.18418884]
[110.71290588 224.71879578]
[108.53607178 209.87759399]
[106.35923767 195.03637695]
[94.29410553 186.37796021]
[91.87506866 171.35787964]
[101.03862000 158.76156616]
[98.86177826 143.92036438]
[96.68494415 129.07916260]
[94.50811005 114.23795319]
[84.52538300 103.04219055]
[70.02978516 99.18502808]
[55.53418732 95.32786560]
[41.03859329 91.47071075]
[26.54299545 87.61354828]
[11.60750484 96.66166687]
[-4.93394852 92.22721100]
[-13.01597023 77.51195526]
[-27.58867264 73.95719147]
[-42.16137695 70.40242767]
[-56.73407745 66.84767151]
[-71.30677795 63.29290771]
[-85.87948608 59.73814392]
[-100.85919952 58.95829773]
[-115.72224426 60.98063278]
[-130.58529663 63.00296783]
[-145.44833374 65.02529907]
[-160.31138611 67.04763794]
[-175.17443848 69.06996918]
[-190.03747559 71.09230804]
[-197.26351929 84.82417297]
[-211.19573975 91.65591431]
[-226.47692871 88.96059418]
[-237.23115540 77.77461243]
[-239.32321167 62.39921570]
[-231.94863892 48.74654770]
[-217.94311523 42.06634140]
[-202.69206238 44.92727661]
[-192.05981445 56.22925949]
[-177.19676208 54.20692444]
[-162.33372498 52.18458939]
[-147.47067261 50.16225433]
[-132.60762024 48.13991928]
[-117.74458313 46.11758804]
[-102.88153076 44.09525299]
[-100.57875061 36.95752335]
[-114.85420990 32.35195923]
[-129.85418701 32.38297653]
[-134.51875305 18.12668800]
[-122.40153503 9.28513527]
[-110.24864960 18.07649612]
[-95.97319031 22.68206215]
[-93.67040253 15.54433060]
[-104.54923248 5.21712589]
[-120.19942474 -1.30266690]
[-118.26683807 -18.14610481]
[-101.54664612 -20.95176888]
[-94.22202301 -5.66169930]
[-83.34320068 4.66550589]
[-77.88795471 13.82605934]
[-75.33547211 23.17164230]
[-75.49697876 31.93733978]
[-78.00119781 39.44931030]
[-82.32472229 45.16543961]
[-67.75202179 48.72020340]
[-53.17931747 52.27496719]
[-38.60661316 55.82972717]
[-24.03391075 59.38449097]
[-9.46120834 62.93925095]
[0.53968841 54.75519180]
[13.62486553 53.83189774]
[25.00945282 60.73255920]
[30.40015411 73.11795044]
[44.89575195 76.97511292]
[59.39134598 80.83227539]
[73.88694763 84.68943024]
[88.38253784 88.54659271]
[107.27671051 79.65483093]
[118.57572174 69.78910828]
[129.87472534 59.92338562]
[141.07049561 49.94065857]
[152.16180420 39.84201050]
[163.25311279 29.74336052]
[174.34443665 19.64471054]
[185.43574524 9.54606152]
[190.43080139 -5.46593428]
[205.05070496 -8.31336212]
[216.14201355 -18.41201210]
[227.23333740 -28.51066208]
[228.62857056 -41.37562180]
[238.12887573 -49.55872726]
[250.25581360 -49.06423187]
[261.55480957 -58.92995453]
[272.85382080 -68.79567719]
[280.80816650 -83.76782227]
[297.39715576 -80.26905060]
[298.62741089 -63.35979843]
[282.71954346 -57.49667358]
[271.42053223 -47.63095093]
[260.12155151 -37.76522827]
[255.38441467 -20.89633179]
[237.33198547 -17.41934586]
[226.24066162 -7.32069683]
[215.14935303 2.77795291]
[210.94761658 17.06762505]
[195.53439331 20.63737679]
[184.44308472 30.73602676]
[173.35177612 40.83467484]
[162.26045227 50.93332672]
[151.16914368 61.03197479]
[148.32229614 67.90518951]
[139.74044800 71.22238922]
[128.44143677 81.08811188]
[117.14243317 90.95383453]
[131.78813171 87.71288300]
[143.61259460 78.48346710]
[157.65960693 73.22216034]
[172.63774109 72.41265869]
[187.16998291 76.12938690]
[199.92028809 84.03063965]
[209.71643066 95.39001465]
[215.65782166 109.16317749]
[217.19821167 124.08386993]
[214.19599915 138.78036499]
[206.92718506 151.90150452]
[196.06002808 162.24098206]
[182.59362793 168.84825134]
[167.76602173 171.11585999]
[152.94039917 168.83532715]
[139.47976685 162.21630859]
[128.62162781 151.86734009]
[121.36426544 138.73986816]
[118.37492371 124.04187012]
[109.34931183 112.06111908]
[111.52615356 126.90232086]
[113.70298767 141.74353027]
[115.87982178 156.58473206]
[128.27470398 166.01895142]
[130.27091980 181.10105896]
[121.20043945 192.85954285]
[123.37728119 207.70075989]
[125.55411530 222.54196167]
[139.85836792 228.13514709]
[149.43708801 240.14114380]
[151.71362305 255.33038330]
[146.07562256 269.61703491]
[134.03965759 279.15808105]
[118.84336090 281.38699341]
[104.57444763 275.70422363]
[95.07118988 263.63842773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 142]
[3 141]
[4 140]
[7 137]
[8 136]
[9 135]
[10 134]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[18 69]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[53 59]
[54 58]
[78 114]
[79 113]
[80 112]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[87 104]
[88 103]
[89 102]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
