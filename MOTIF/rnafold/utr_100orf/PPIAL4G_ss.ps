%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCAUCGCUGUGAGCCCUGUACUAUCAGCCAUGGUCAACUCCGUCAUCUUUUUUGACAUCACCGUCGACGGCAAGCCCUUGGGCCGCAUCUCCAUCAAACAGUUUGCAGACAAGAUUCCAAAGACAGCAG\
) } def
/len { sequence length } bind def

/coor [
[116.00698090 163.54371643]
[115.30389404 148.56019592]
[88.07154846 145.93730164]
[68.02297974 130.23365784]
[55.52656937 138.53062439]
[43.03015518 146.82759094]
[30.53374290 155.12455750]
[18.03733063 163.42152405]
[10.82022953 177.50073242]
[-4.06252909 178.09468079]
[-16.55894089 186.39164734]
[-29.05535507 194.68861389]
[-41.55176926 202.98558044]
[-44.80059052 218.21984863]
[-57.59192657 226.45614624]
[-72.09545135 223.26499939]
[-84.59186554 231.56196594]
[-86.15991211 247.12072754]
[-97.39809418 257.99441528]
[-113.00009155 259.04882812]
[-125.59911346 249.78605652]
[-129.24629211 234.57974243]
[-122.21952820 220.60981750]
[-107.83665466 214.47247314]
[-92.88883209 219.06555176]
[-80.39241791 210.76858521]
[-77.70474243 196.16337585]
[-65.14979553 187.57106018]
[-49.84873581 190.48916626]
[-37.35232162 182.19219971]
[-24.85590935 173.89523315]
[-12.35949612 165.59826660]
[-6.03622198 152.11251831]
[9.74036312 150.92510986]
[22.23677635 142.62814331]
[34.73318863 134.33117676]
[47.22960281 126.03421021]
[59.72601318 117.73724365]
[56.66508865 107.66089630]
[56.08579254 97.14582825]
[58.02130127 86.79421997]
[62.36077499 77.19885254]
[68.85570526 68.90921783]
[77.13415527 62.40003967]
[71.63845825 48.44306183]
[66.14275360 34.48608017]
[60.64705276 20.52910233]
[55.15135193 6.57212305]
[49.98517990 20.65440369]
[38.12706757 29.84054565]
[23.20055199 31.32349968]
[9.76679230 24.65011406]
[1.93079722 11.85960197]
[2.08704567 -3.13958430]
[10.18779182 -15.76408100]
[23.75765800 -22.15616608]
[38.65003967 -20.36258507]
[50.31448364 -10.93102264]
[47.86382294 -25.72947693]
[45.41316223 -40.52793121]
[32.41793060 -49.52234650]
[29.67116547 -65.08611298]
[38.80247116 -77.98552704]
[54.39440918 -80.56758881]
[67.19655609 -71.30041504]
[69.61362457 -55.68204498]
[60.21161652 -42.97859192]
[62.66227722 -28.18013763]
[65.11293793 -13.38168335]
[69.10832977 1.07642233]
[74.60403442 15.03340149]
[80.09973145 28.99038124]
[85.59543610 42.94736099]
[91.09113312 56.90433884]
[99.38356781 55.99745560]
[107.69815063 56.67169189]
[115.73612213 58.90282059]
[123.20865631 62.61066818]
[133.17572021 51.40096283]
[143.14279175 40.19126129]
[145.92027283 24.02902794]
[161.39746094 18.60789871]
[173.65275574 29.50466537]
[170.07897949 45.50966644]
[154.35250854 50.15833282]
[144.38543701 61.36803436]
[134.41836548 72.57774353]
[146.20431519 89.15171814]
[149.77990723 110.68939972]
[164.76341248 109.98631287]
[179.74693298 109.28323364]
[184.23432922 94.80431366]
[193.40565491 82.73523712]
[206.15342712 74.53340149]
[220.93829346 71.18922424]
[235.97489929 73.10652924]
[249.44752502 80.05377960]
[259.72924805 91.19207764]
[265.57855225 105.17641449]
[266.28906250 120.31811523]
[261.77499390 134.78874207]
[252.58143616 146.84089661]
[239.81855774 155.01922607]
[225.02755737 158.33615112]
[209.99450684 156.39114380]
[196.53471375 149.41906738]
[186.27351379 138.26184082]
[180.45001221 124.26674652]
[165.46649170 124.96982574]
[150.48298645 125.67291260]
[145.43409729 131.21896362]
[158.92044067 137.78543091]
[172.40678406 144.35189819]
[185.89312744 150.91835022]
[200.89016724 150.62025452]
[214.68486023 156.51147461]
[224.83992004 167.55116272]
[229.56114197 181.78878784]
[228.01434326 196.70883179]
[220.47285461 209.67515564]
[208.26908875 218.39686584]
[193.55924988 221.33297729]
[178.94230652 217.96473694]
[167.00082397 208.88725281]
[159.84463501 195.70434570]
[158.73777771 180.74765015]
[150.93728638 167.93545532]
[143.13679504 155.12326050]
[135.33630371 142.31106567]
[130.28741455 147.85711670]
[130.99049377 162.84062195]
[137.77259827 178.37893677]
[124.71900177 189.19743347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[10 32]
[11 31]
[12 30]
[13 29]
[16 26]
[17 25]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[58 69]
[59 68]
[60 67]
[78 87]
[79 86]
[80 85]
[89 110]
[90 109]
[91 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
