%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGUGCCGACUUGACAGACGGCAGCGGCGACAUGGCUUCGGAGCAGGACGUGCGCGCCCGGCUGCAGCGCGCUGGCCAGGAGCACCUCCUGCGCUUCUGGGCCGAGCUGGCGCCGGAGCCACGAGCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[-35.35738754 424.34634399]
[-47.51324463 433.13470459]
[-62.48720932 432.25128174]
[-73.52537537 422.09457397]
[-75.64933014 407.24697876]
[-85.13952637 418.86318970]
[-94.62972260 430.47937012]
[-104.11992645 442.09558105]
[-113.61012268 453.71179199]
[-116.34934235 469.29406738]
[-130.39350891 474.25500488]
[-139.88369751 485.87118530]
[-141.98371887 502.13531494]
[-157.22099304 508.19812012]
[-169.92071533 497.82272339]
[-167.01850891 481.68243408]
[-151.49990845 476.38101196]
[-142.00970459 464.76480103]
[-139.94927979 450.01339722]
[-125.22632599 444.22158813]
[-115.73612213 432.60537720]
[-106.24592590 420.98919678]
[-96.75572968 409.37298584]
[-87.26552582 397.75677490]
[-78.76699829 385.39657593]
[-71.31819916 372.37677002]
[-63.86940002 359.35696411]
[-56.42059708 346.33715820]
[-48.97179794 333.31735229]
[-55.57253265 321.65197754]
[-55.52260208 308.14016724]
[-48.72753906 296.33575439]
[-36.88111496 289.39682007]
[-23.04439354 289.24108887]
[-15.29015923 276.40084839]
[-7.53592396 263.56060791]
[0.21831156 250.72035217]
[7.97254705 237.88011169]
[15.72678185 225.03987122]
[23.48101807 212.19963074]
[31.23525238 199.35939026]
[38.98948669 186.51913452]
[38.94558334 171.62460327]
[52.70282364 163.81121826]
[60.45706177 150.97097778]
[60.41315460 136.07643127]
[74.17039490 128.26306152]
[81.92462921 115.42281342]
[73.93688202 100.78916931]
[77.32852173 82.91345215]
[92.43808746 70.24246216]
[89.27322388 55.58013916]
[86.10835266 40.91781998]
[82.94348145 26.25550270]
[79.77861023 11.59318352]
[76.61374664 -3.06913590]
[73.27593231 -17.69305420]
[69.76564026 -32.27653122]
[56.15625763 -40.31147766]
[52.29549789 -55.63695145]
[60.47388077 -69.16062164]
[75.83931732 -72.85913086]
[89.27576447 -64.53822327]
[92.81161499 -49.13454819]
[84.34911346 -35.78682709]
[87.85940552 -21.20334816]
[92.52770996 -15.38097477]
[91.27606201 -6.23400545]
[94.44093323 8.42831326]
[97.60580444 23.09063339]
[100.77066803 37.75295258]
[103.93553925 52.41527176]
[107.10041046 67.07759094]
[120.69086456 73.42578125]
[133.96636963 66.44287109]
[147.24186707 59.45996094]
[160.51736450 52.47704697]
[173.79287720 45.49413681]
[186.98498535 38.35492706]
[200.09184265 31.06041145]
[213.19871521 23.76589775]
[226.30558777 16.47138214]
[239.41246033 9.17686749]
[252.51933289 1.88235307]
[253.39331055 -13.52023411]
[262.47430420 -25.99176788]
[276.86459351 -31.55262566]
[291.97229004 -28.42835808]
[302.97659302 -17.61590767]
[306.36605835 -2.56548953]
[301.05911255 11.92036438]
[288.74920654 21.21927071]
[273.36434937 22.36398125]
[259.81384277 14.98922348]
[246.70697021 22.28373909]
[233.60009766 29.57825279]
[220.49324036 36.87276840]
[207.38636780 44.16728210]
[194.27949524 51.46179581]
[189.92318726 57.52113724]
[180.77578735 58.76963806]
[167.50027466 65.75254822]
[154.22477722 72.73545837]
[140.94927979 79.71837616]
[127.67377472 86.70128632]
[127.12959290 108.36250305]
[113.06517792 122.56568146]
[94.76487732 123.17704773]
[87.01063538 136.01728821]
[86.49990845 151.83024597]
[73.29730225 158.72521973]
[65.54306793 171.56546021]
[65.03233337 187.37841797]
[51.82973099 194.27337646]
[44.07549667 207.11361694]
[36.32125854 219.95385742]
[28.56702423 232.79409790]
[20.81278992 245.63435364]
[13.05855465 258.47457886]
[5.30431890 271.31481934]
[-2.44991636 284.15509033]
[-10.20415211 296.99533081]
[-3.41896009 312.43927002]
[-7.10484362 328.73065186]
[-19.62650490 339.53335571]
[-35.95199203 340.76614380]
[-43.40079117 353.78594971]
[-50.84959412 366.80575562]
[-58.29839325 379.82556152]
[-65.74719238 392.84536743]
[-51.12197495 389.51327515]
[-37.68716431 396.18453979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[11 18]
[12 17]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[34 122]
[35 121]
[36 120]
[37 119]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[44 112]
[45 111]
[47 109]
[48 108]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[57 66]
[58 65]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
