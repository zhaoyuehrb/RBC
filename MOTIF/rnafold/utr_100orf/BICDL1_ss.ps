%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGGGCUCCGCGCGCGCGGGCCAUGUCCGCUUUCUGCCUGGGCUUGGUCGGCCGCGCUUCAGCACCCGCCGAGCCGGACAGCGCCUGCUGCAUGGAGCUGCCCGCCGCGGCCGGGGACGCAG\
) } def
/len { sequence length } bind def

/coor [
[88.04072571 190.84030151]
[90.71099091 171.64343262]
[91.08495331 156.64810181]
[91.45891571 141.65275574]
[91.83287048 126.65741730]
[92.20683289 111.66208649]
[89.23464203 96.95949554]
[83.06533813 83.28691101]
[76.89602661 69.61431885]
[70.72672272 55.94173050]
[64.55741882 42.26914597]
[58.38810730 28.59655571]
[52.21880341 14.92396832]
[39.49037552 5.52728271]
[41.30840683 -9.25595188]
[35.13909912 -22.92853928]
[28.96979332 -36.60112762]
[22.51754379 -43.22488403]
[22.82185745 -50.69234467]
[16.99533653 -64.51448822]
[11.16881371 -78.33663177]
[5.34229231 -92.15877533]
[-0.48422980 -105.98091888]
[-6.31075191 -119.80306244]
[-20.67431641 -125.83014679]
[-26.38633728 -139.93077087]
[-20.55191231 -153.58708191]
[-26.37843513 -167.40922546]
[-32.20495605 -181.23136902]
[-38.03147888 -195.05351257]
[-43.85800171 -208.87565613]
[-55.34866714 -218.51747131]
[-69.97258759 -221.85528564]
[-84.26695251 -214.57170105]
[-98.81370544 -221.33715820]
[-102.45382690 -236.96179199]
[-92.39492035 -249.45971680]
[-76.35331726 -249.24359131]
[-66.63477325 -236.47920227]
[-52.01085281 -233.14138794]
[-46.38749313 -238.10403442]
[-49.35999298 -252.80656433]
[-35.14077759 -248.02932739]
[-29.51741791 -252.99197388]
[-31.01093483 -267.91741943]
[-32.50445175 -282.84289551]
[-33.99797058 -297.76834106]
[-35.49148941 -312.69381714]
[-36.98500443 -327.61926270]
[-38.47852325 -342.54473877]
[-42.48521042 -350.87854004]
[-39.81845474 -357.86022949]
[-40.93940735 -372.81826782]
[-42.06035614 -387.77633667]
[-53.75642776 -398.06417847]
[-54.68014908 -413.24975586]
[-44.80018234 -424.33676147]
[-45.92113495 -439.29483032]
[-58.06231689 -449.41247559]
[-59.40993118 -465.15921021]
[-49.16446304 -477.19274902]
[-33.40436554 -478.37380981]
[-21.47982788 -468.00167847]
[-20.46546173 -452.22998047]
[-30.96307755 -440.41577148]
[-29.84212685 -425.45770264]
[-18.42007828 -415.96707153]
[-17.07019043 -400.81344604]
[-27.10230064 -388.89727783]
[-25.98134995 -373.93923950]
[-24.86039734 -358.98117065]
[-23.55306244 -344.03826904]
[-22.05954361 -329.11279297]
[-20.56602669 -314.18734741]
[-19.07250977 -299.26187134]
[-17.57899094 -284.33639526]
[-16.08547401 -269.41094971]
[-14.59195614 -254.48548889]
[-30.03585815 -214.70217896]
[-24.20933533 -200.88003540]
[-18.38281441 -187.05789185]
[-12.55629158 -173.23574829]
[-6.72977018 -159.41360474]
[7.12014627 -154.05493164]
[13.22597027 -140.12031555]
[7.51139164 -125.62958527]
[13.33791351 -111.80744171]
[19.16443443 -97.98529816]
[24.99095726 -84.16315460]
[30.81748009 -70.34101105]
[36.64400101 -56.51886749]
[42.64237976 -42.77043533]
[48.81168747 -29.09784698]
[54.98099518 -15.42525864]
[67.26815033 -7.00652742]
[65.89138794 8.75466251]
[72.06069946 22.42724991]
[78.23000336 36.09983826]
[84.39930725 49.77242661]
[90.56861877 63.44501495]
[96.73792267 77.11759949]
[102.90722656 90.79019165]
[121.21157837 81.15912628]
[146.25862122 91.22221375]
[156.46121216 102.21798706]
[166.66380310 113.21376801]
[177.00268555 124.08150482]
[187.47624207 134.81950378]
[203.40040588 138.73777771]
[207.70867920 154.56088257]
[195.96907043 166.01138306]
[180.25828552 161.30996704]
[176.73823547 145.29306030]
[166.26467896 134.55505371]
[159.26538086 131.93484497]
[155.66802979 123.41635895]
[145.46543884 112.42057800]
[135.26284790 101.42480469]
[128.24768066 104.07761383]
[114.21733856 109.38323212]
[107.20217133 112.03604126]
[106.82820892 127.03137970]
[106.45425415 142.02671814]
[106.08029175 157.02204895]
[105.70632935 172.01739502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 102]
[8 101]
[9 100]
[10 99]
[11 98]
[12 97]
[13 96]
[15 94]
[16 93]
[17 92]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[27 83]
[28 82]
[29 81]
[30 80]
[31 79]
[32 40]
[33 39]
[44 78]
[45 77]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[52 71]
[53 70]
[54 69]
[57 66]
[58 65]
[104 118]
[105 117]
[106 116]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
