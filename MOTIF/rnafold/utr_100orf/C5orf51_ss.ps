%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGCACCCGCCGAUUGUGGCCAUGGCGGCCGCAGUCUCUAGUGUGGUGAGACGAGUGGAAGAGCUCGGGGAUCUGGCUCAGGCCCACAUACAGCAACUUAGCGAAGCUGCCGGUGAAGAUG\
) } def
/len { sequence length } bind def

/coor [
[95.34171295 202.89947510]
[90.88608551 217.22244263]
[86.43046570 231.54541016]
[92.59002686 246.35888672]
[84.72291565 260.34060669]
[68.86409760 262.76495361]
[57.17910767 251.77220154]
[58.63166809 235.79504395]
[72.10749817 227.08978271]
[76.56311798 212.76681519]
[81.01874542 198.44384766]
[84.01439667 183.74601746]
[85.51982117 168.82176208]
[87.02524567 153.89749146]
[88.53067017 138.97322083]
[74.58587646 133.81549072]
[62.92958450 123.65732574]
[55.34931564 109.50431824]
[40.69029617 112.68442535]
[26.03127289 115.86453247]
[11.37225151 119.04463959]
[-3.28677058 122.22474670]
[-17.94579315 125.40485382]
[-32.60481262 128.58496094]
[-42.46028519 141.24392700]
[-58.50327682 141.28724670]
[-68.42698669 128.68171692]
[-64.61878967 113.09719849]
[-50.00000763 106.48880768]
[-35.78491974 113.92593384]
[-21.12589836 110.74583435]
[-6.46687698 107.56572723]
[8.19214439 104.38562012]
[22.85116577 101.20551300]
[37.51018906 98.02540588]
[52.16920853 94.84529877]
[56.08183289 80.36457062]
[45.01913452 70.23458099]
[33.95643997 60.10458755]
[22.89374161 49.97459793]
[11.83104610 39.84460449]
[-3.05840445 43.88289642]
[-17.76056671 39.20849991]
[-27.58403206 27.31299591]
[-29.39417076 11.99219418]
[-22.61337471 -1.86509037]
[-9.40536880 -9.83704948]
[6.01521921 -9.37985992]
[18.72773552 -0.63940901]
[24.67566109 13.59525681]
[21.96103859 28.78190804]
[33.02373505 38.91189957]
[44.08642960 49.04189301]
[55.14912796 59.17188263]
[66.21182251 69.30187225]
[81.87871552 59.93126297]
[99.31578827 57.70464325]
[115.53472137 62.46161270]
[123.73063660 49.89869308]
[131.92654419 37.33577347]
[140.12246704 24.77285194]
[135.46852112 6.49929047]
[145.38108826 -9.16895771]
[163.26617432 -12.66867828]
[170.82052612 -25.62752914]
[178.37487793 -38.58638000]
[185.92922974 -51.54523087]
[187.57958984 -60.64596558]
[193.83975220 -64.73140717]
[201.71736145 -77.49632263]
[209.59498596 -90.26123810]
[209.53465271 -106.66027069]
[223.84068298 -114.67709351]
[237.79627991 -106.06467438]
[237.04508972 -89.68273926]
[222.35990906 -82.38362122]
[214.48228455 -69.61869812]
[206.60466003 -56.85378265]
[198.88807678 -43.99088287]
[191.33372498 -31.03203201]
[183.77937317 -18.07318115]
[176.22503662 -5.11433029]
[181.49758911 5.15000153]
[181.10513306 16.80331993]
[175.02963257 26.89632607]
[164.70611572 32.81757355]
[152.68537903 32.96876526]
[144.48947144 45.53168869]
[136.29354858 58.09460831]
[128.09764099 70.65753174]
[134.93917847 79.27050781]
[139.21943665 89.40309906]
[140.62463379 100.31251526]
[139.05175781 111.19902802]
[152.45938110 117.92477417]
[165.86700439 124.65052032]
[179.27462769 131.37626648]
[191.67170715 122.40014648]
[206.82185364 120.22487640]
[221.24365234 125.35031891]
[231.62309265 136.59869385]
[235.57505798 151.38519287]
[232.19140625 166.31199646]
[222.24966431 177.94902039]
[208.03440857 183.62219238]
[192.81216431 182.02783203]
[180.08090210 173.53231812]
[172.76618958 160.08786011]
[172.54887390 144.78388977]
[159.14125061 138.05813599]
[145.73362732 131.33239746]
[132.32600403 124.60664368]
[119.57164001 135.60067749]
[103.45493317 140.47865295]
[101.94950867 155.40292358]
[100.44408417 170.32717896]
[98.93865967 185.25144958]
[110.50901794 175.70541382]
[125.46750641 174.59025574]
[138.32540894 182.31517029]
[144.36476135 196.04565430]
[141.36956787 210.74357605]
[130.43882751 221.01580811]
[115.58336639 223.09318542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[12 117]
[13 116]
[14 115]
[15 114]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[58 90]
[59 89]
[60 88]
[61 87]
[64 82]
[65 81]
[66 80]
[67 79]
[69 78]
[70 77]
[71 76]
[94 112]
[95 111]
[96 110]
[97 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
