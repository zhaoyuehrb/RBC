%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUGGGCACAAGAUGGCCGCUGCGCGCCCAGAGGCCCAGAGUCGGAGCUCACCGACUCCGGAGUCGCGAUCCCAGGAGCCACUGGACCUGGUCCUGGUGCCUGAUGACUGCC\
) } def
/len { sequence length } bind def

/coor [
[113.76071167 168.20744324]
[113.76071167 153.20744324]
[113.76071167 138.20744324]
[81.46897125 131.72502136]
[67.59021759 105.48957825]
[53.45630646 110.51277161]
[39.32239151 115.53596497]
[25.18847847 120.55915833]
[11.05456448 125.58235931]
[9.73330688 137.20132446]
[4.13783169 147.41055298]
[-4.86504650 154.71003723]
[-15.91127968 158.04429626]
[-27.34618378 156.95480347]
[-37.47229385 151.64265442]
[-44.80133820 142.93287659]
[-59.29902649 146.78216553]
[-73.79671478 150.63145447]
[-85.14920807 161.65104675]
[-99.43582153 157.43891907]
[-113.93350983 161.28820801]
[-128.43119812 165.13749695]
[-142.18830872 175.04598999]
[-155.51791382 164.56945801]
[-149.14082336 148.86058044]
[-132.28048706 150.63981628]
[-117.78279877 146.79051208]
[-103.28511047 142.94122314]
[-92.96958923 132.19696045]
[-77.64600372 136.13377380]
[-63.14831543 132.28448486]
[-48.65063095 128.43518066]
[-43.07892609 110.74153137]
[-27.94273567 99.76440430]
[-9.09876156 99.96823883]
[6.03137064 111.44844055]
[20.16528511 106.42524719]
[34.29919815 101.40205383]
[48.43311310 96.37886047]
[62.56702423 91.35566711]
[68.73040009 77.68040466]
[63.13241959 63.76413345]
[57.53443146 49.84786224]
[51.93644714 35.93159485]
[46.33846283 22.01532364]
[40.74047852 8.09905434]
[35.14249420 -5.81721497]
[20.50750542 -11.78317547]
[14.45466995 -26.38244629]
[20.57502747 -40.95354080]
[35.23747635 -46.85168457]
[49.74304962 -40.57761765]
[55.48584366 -25.85362816]
[49.05876160 -11.41520023]
[54.65674973 2.50106955]
[60.25473404 16.41733932]
[65.85271454 30.33360863]
[71.45070648 44.24987793]
[77.04869080 58.16614914]
[82.64667511 72.08242035]
[110.36701965 64.75228119]
[136.69772339 82.60910797]
[144.83865356 70.01048279]
[152.97956848 57.41186142]
[148.20095825 42.52230453]
[154.15898132 28.06422806]
[168.04043579 20.86428833]
[183.29093933 24.32208061]
[192.70965576 36.80493927]
[191.84936523 52.41883850]
[181.11625671 63.79137802]
[165.57820129 65.55278778]
[157.43727112 78.15141296]
[149.29634094 90.75003815]
[155.08389282 104.58854675]
[169.77014160 107.64038849]
[184.45640564 110.69222260]
[199.14266968 113.74406433]
[214.22839355 108.97632599]
[225.11526489 119.14123535]
[239.80152893 122.19307709]
[254.48779297 125.24491119]
[269.17404175 128.29675293]
[275.77511597 126.53330231]
[281.38442993 128.21264648]
[284.56893921 131.93717957]
[299.06661987 135.78646851]
[313.56430054 139.63575745]
[328.06198120 143.48506165]
[344.92233276 141.70582581]
[351.29940796 157.41470337]
[337.96981812 167.89123535]
[324.21270752 157.98274231]
[309.71499634 154.13345337]
[295.21731567 150.28416443]
[280.71963501 146.43487549]
[266.12222290 142.98301697]
[251.43595886 139.93118286]
[236.74969482 136.87933350]
[222.06343079 133.82749939]
[208.02815247 138.81352234]
[196.09083557 128.43032837]
[181.40457153 125.37848663]
[166.71830750 122.32664490]
[152.03204346 119.27480316]
[146.21421814 124.00796509]
[160.23014832 129.35150146]
[162.61058044 144.16142273]
[150.97508240 153.62796021]
[136.95904541 148.28466797]
[134.57853699 133.47428894]
[128.76071167 138.20744324]
[128.76071167 153.20744324]
[128.76071167 168.20744324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[16 32]
[17 31]
[18 30]
[20 28]
[21 27]
[22 26]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[62 74]
[63 73]
[64 72]
[75 105]
[76 104]
[77 103]
[78 102]
[80 100]
[81 99]
[82 98]
[83 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
