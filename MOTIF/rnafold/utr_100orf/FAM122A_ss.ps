%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAUCGCGAGCGCCUGCGCGAAGGGCUACGCAUGCGCAGAGGGGCCAGCCCGCUGACAGAUUCUCGGUGGCGGCGGCAGCGGCGGCGGCCCUGGACUGCGGGGAAUGGGAAUCCUAGGUCCCUGACUGAGC\
) } def
/len { sequence length } bind def

/coor [
[61.08801651 151.69874573]
[66.53906250 137.72425842]
[77.36424255 127.34105682]
[83.72331238 113.75568390]
[71.62953186 122.62926483]
[59.53575134 131.50285339]
[54.40666199 139.17680359]
[47.05283737 140.43875122]
[34.75436401 149.02639771]
[22.45588493 157.61402893]
[10.25891972 166.34523010]
[-1.83486080 175.21881104]
[-13.92864132 184.09240723]
[-19.05773163 191.76635742]
[-26.41155624 193.02830505]
[-38.71003342 201.61593628]
[-51.00850677 210.20358276]
[-53.52604675 225.80606079]
[-66.38757324 234.99064636]
[-81.96257019 232.30828857]
[-91.01066589 219.35038757]
[-88.16378784 203.80461121]
[-75.11093903 194.89402771]
[-59.59614182 197.90510559]
[-47.29766846 189.31745911]
[-34.99919128 180.72982788]
[-22.80222511 171.99862671]
[-10.70844364 163.12504578]
[1.38533628 154.25144958]
[4.95052814 147.69702148]
[13.86825085 145.31555176]
[26.16672707 136.72792053]
[38.46520233 128.14027405]
[50.66217041 119.40907288]
[62.75595093 110.53548431]
[74.84973145 101.66190338]
[93.76848602 85.75508881]
[95.52281952 70.85803223]
[97.27715302 55.96097183]
[99.03147888 41.06391525]
[100.78581238 26.16685677]
[91.93279266 8.12532425]
[103.94094086 -6.96020222]
[104.99508667 -21.92311478]
[106.04922485 -36.88602829]
[107.10337067 -51.84894180]
[108.15750885 -66.81185913]
[109.21165466 -81.77477264]
[106.67618561 -90.64993286]
[110.46994781 -97.07477570]
[111.87456512 -112.00886536]
[113.27919006 -126.94295502]
[90.59458160 -146.28782654]
[87.11000061 -160.87747192]
[83.62542725 -175.46711731]
[80.14084625 -190.05676270]
[76.65626526 -204.64640808]
[73.17168427 -219.23605347]
[59.10527802 -226.06761169]
[52.76825333 -240.36363220]
[57.15275955 -255.37396240]
[70.18856812 -264.01119995]
[85.72056580 -262.19708252]
[96.41502380 -250.78819275]
[97.22233582 -235.17146301]
[87.76132965 -222.72062683]
[91.24590302 -208.13098145]
[94.73048401 -193.54133606]
[98.21506500 -178.95170593]
[101.69964600 -164.36206055]
[105.18422699 -149.77241516]
[120.01039124 -147.49539185]
[127.71250916 -160.36695862]
[128.15911865 -176.18186951]
[141.33366394 -183.13029480]
[149.03578186 -196.00187683]
[148.75093079 -212.39854431]
[162.94586182 -220.61048889]
[177.01805115 -212.18994141]
[176.49122620 -195.79925537]
[161.90734863 -188.29975891]
[154.20524597 -175.42819214]
[154.30952454 -160.53395081]
[140.58407593 -152.66485596]
[132.88197327 -139.79327393]
[128.21328735 -125.53833771]
[126.80865479 -110.60424805]
[125.40403748 -95.67015839]
[124.17456818 -80.72062683]
[123.12042236 -65.75771332]
[122.06628418 -50.79479980]
[121.01213837 -35.83188629]
[119.95800018 -20.86897278]
[118.90385437 -5.90605927]
[126.34158325 1.26595819]
[128.60169983 11.57420921]
[124.68683624 21.61164093]
[115.68286896 27.92118645]
[113.92853546 42.81824493]
[112.17420959 57.71530151]
[110.41987610 72.61235809]
[108.66555023 87.50941467]
[114.80940247 101.19345856]
[127.10787964 109.78109741]
[139.40635681 118.36872864]
[151.70483398 126.95636749]
[170.04193115 128.06860352]
[176.93531799 144.16355896]
[189.43173218 152.46054077]
[201.92814636 160.75750732]
[214.42456055 169.05447388]
[230.96446228 172.77841187]
[231.96475220 189.70283508]
[215.97865295 195.34916687]
[206.12759399 181.55088806]
[193.63117981 173.25392151]
[181.13476562 164.95693970]
[168.63835144 156.65997314]
[156.66264343 158.74032593]
[146.16433716 151.85072327]
[143.11720276 139.25483704]
[130.81872559 130.66720581]
[118.52024078 122.07957458]
[106.22176361 113.49193573]
[112.89756775 126.92449951]
[123.96326447 137.05120850]
[129.74035645 150.89408875]
[129.15609741 165.88270569]
[122.31898499 179.23388672]
[110.49858093 188.46849060]
[95.88976288 191.87178040]
[81.20518494 188.81182861]
[69.17158508 179.85681152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[6 34]
[8 33]
[9 32]
[10 31]
[11 29]
[12 28]
[13 27]
[15 26]
[16 25]
[17 24]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[50 88]
[51 87]
[52 86]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[72 85]
[73 84]
[75 82]
[76 81]
[103 124]
[104 123]
[105 122]
[106 121]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
