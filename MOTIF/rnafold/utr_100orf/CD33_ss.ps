%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCUCACACAGGAAGCCCUGGAAGCUGCUUCCUCAGACAUGCCGCUGCUGCUACUGCUGCCCCUGCUGUGGGCAGGGGCCCUGGCUAUGGAUCCAAAUUUCUGGCUGCAAGUGCAGGAGUCAGUGACGGUACAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[-145.14143372 413.10934448]
[-155.75907898 425.48870850]
[-171.07447815 430.81573486]
[-186.89880371 427.73315430]
[-196.45501709 439.29513550]
[-206.01121521 450.85708618]
[-202.58673096 462.34207153]
[-205.14303589 473.92767334]
[-212.92301941 482.72488403]
[-223.88215637 486.59823608]
[-235.22482300 484.68362427]
[-245.28659058 495.80841064]
[-255.34835815 506.93319702]
[-265.41012573 518.05798340]
[-268.32455444 534.19604492]
[-283.84716797 539.48577881]
[-296.00961304 528.48547363]
[-292.30023193 512.51135254]
[-276.53491211 507.99618530]
[-266.47314453 496.87139893]
[-256.41137695 485.74664307]
[-246.34959412 474.62185669]
[-248.41357422 456.49163818]
[-236.42759705 442.31500244]
[-217.57318115 441.30087280]
[-208.01696777 429.73892212]
[-198.46076965 418.17697144]
[-204.07069397 405.67803955]
[-203.72914124 391.91577148]
[-197.44584656 379.59234619]
[-186.40281677 371.15213013]
[-172.73233032 368.29693604]
[-159.10539246 371.64315796]
[-149.29396057 360.29696655]
[-139.48252869 348.95080566]
[-129.67111206 337.60461426]
[-134.17716980 326.23461914]
[-133.38497925 313.95730591]
[-127.38479614 303.13388062]
[-117.27442932 295.87243652]
[-104.95886230 293.61746216]
[-92.79146576 296.86288452]
[-82.48433685 285.96502686]
[-72.17721558 275.06716919]
[-61.87009430 264.16931152]
[-51.56297302 253.27145386]
[-48.43886948 238.70817566]
[-33.33486557 233.99864197]
[-23.02774429 223.10078430]
[-12.72062302 212.20294189]
[-2.41350055 201.30508423]
[7.89362144 190.40722656]
[18.07869911 179.39521790]
[28.14047050 168.27044678]
[30.93934631 153.64117432]
[45.93467712 148.59631348]
[55.99644470 137.47152710]
[66.05821991 126.34674835]
[76.11998749 115.22196198]
[73.68832397 89.52818298]
[93.11025238 72.53193665]
[93.44443512 57.53565979]
[93.77861786 42.53938293]
[94.11280060 27.54310608]
[94.44698334 12.54682922]
[94.78117371 -2.44944739]
[95.11535645 -17.44572449]
[95.44953918 -32.44200134]
[95.78372192 -47.43827820]
[90.09176636 -63.40818405]
[103.86186981 -73.29861450]
[117.17771912 -62.80458832]
[110.77999878 -47.10409546]
[110.44581604 -32.10781860]
[110.11163330 -17.11153984]
[109.77745056 -2.11526322]
[109.44326019 12.88101387]
[109.10907745 27.87729073]
[108.77489471 42.87356567]
[108.44071198 57.86984634]
[108.10652924 72.86611938]
[112.07189941 74.38296509]
[115.76594543 76.47558594]
[119.10562897 79.09693909]
[122.01589203 82.18811035]
[135.75955200 76.17878723]
[149.50320435 70.16947174]
[163.24685669 64.16014862]
[176.99052429 58.15083313]
[183.66546631 51.79461288]
[191.10795593 52.16452408]
[204.98208618 46.46289062]
[218.85620117 40.76125717]
[223.42732239 25.80669403]
[236.56968689 17.33248520]
[252.07788086 19.33989334]
[262.62942505 30.88108253]
[263.24218750 46.50665665]
[253.62684631 58.83869553]
[238.32345581 62.05438995]
[224.55784607 54.63538361]
[210.68371582 60.33701706]
[196.80958557 66.03865051]
[182.99983215 71.89448547]
[169.25617981 77.90380859]
[155.51252747 83.91312408]
[141.76887512 89.92244720]
[128.02520752 95.93176270]
[127.92222595 104.72360992]
[125.12760925 113.06011200]
[119.91075134 120.13765717]
[112.77455139 125.27397919]
[104.40691376 127.97395325]
[95.61446381 127.97731781]
[87.24476624 125.28373718]
[77.18299866 136.40852356]
[67.12123108 147.53329468]
[57.05945587 158.65808105]
[53.54089737 174.08306885]
[39.26525116 178.33221436]
[29.20348167 189.45700073]
[25.72892952 197.99420166]
[18.79147530 200.71435547]
[8.48435402 211.61219788]
[-1.82276809 222.51005554]
[-12.12989044 233.40791321]
[-22.43701172 244.30577087]
[-26.29835129 259.64852905]
[-40.66511917 263.57858276]
[-50.97224045 274.47644043]
[-61.27936172 285.37429810]
[-71.58648682 296.27215576]
[-81.89360809 307.17001343]
[-78.00672913 324.81134033]
[-85.36603546 341.13760376]
[-100.88539886 349.75646973]
[-118.32492065 347.41604614]
[-128.13635254 358.76220703]
[-137.94776917 370.10839844]
[-147.75920105 381.45458984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 27]
[5 26]
[6 25]
[11 22]
[12 21]
[13 20]
[14 19]
[33 140]
[34 139]
[35 138]
[36 137]
[42 133]
[43 132]
[44 131]
[45 130]
[46 129]
[48 127]
[49 126]
[50 125]
[51 124]
[52 123]
[53 121]
[54 120]
[56 118]
[57 117]
[58 116]
[59 115]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[91 103]
[92 102]
[93 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
