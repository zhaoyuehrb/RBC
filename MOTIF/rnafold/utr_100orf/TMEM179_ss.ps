%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUCGCCCGGGCCGGCCAUGGCGCUCAACAAUUUCCUUUUCGCUCAGUGCGCCUGCUACUUCUUGGCCUUCCUGUUCAGCUUCGUGGUGGUGGUCCCGCUGUCCGAGAACGGCCACG\
) } def
/len { sequence length } bind def

/coor [
[212.07235718 580.41741943]
[219.29260254 566.97009277]
[231.63745117 557.99420166]
[228.90393066 543.24536133]
[226.17039490 528.49652100]
[223.43685913 513.74768066]
[220.70332336 498.99887085]
[203.90562439 489.34484863]
[199.36465454 470.20172119]
[210.36698914 453.53063965]
[206.48471069 439.04174805]
[202.60241699 424.55285645]
[198.72013855 410.06396484]
[194.64852905 395.62713623]
[190.38830566 381.24484253]
[186.12806702 366.86254883]
[181.49281311 352.59667969]
[176.48571777 338.45706177]
[171.47860718 324.31744385]
[166.47151184 310.17782593]
[161.46440125 296.03820801]
[156.45730591 281.89859009]
[151.45019531 267.75897217]
[139.90824890 258.34448242]
[142.59515381 242.75309753]
[137.58805847 228.61346436]
[132.58094788 214.47384644]
[121.03900146 205.05935669]
[123.72590637 189.46797180]
[118.71880341 175.32835388]
[113.71170044 161.18873596]
[108.70459747 147.04910278]
[98.32607269 148.20732117]
[87.85871124 147.08502197]
[77.80163574 143.69906616]
[68.64229584 138.17507935]
[60.83282471 130.74317932]
[54.76779938 121.72856903]
[50.76437378 111.53731537]
[49.04584885 100.63816833]
[49.72952271 89.54100037]
[52.81944656 78.77294159]
[58.20450974 68.85336304]
[65.66206360 60.26880264]
[56.84528351 48.13354874]
[41.28844833 44.21379471]
[34.78496552 29.54804420]
[42.32374573 15.38660526]
[58.12168503 12.59292316]
[70.05995941 23.31007004]
[68.98053741 39.31676865]
[77.79731750 51.45202637]
[92.17961121 47.19179535]
[92.96465302 32.21235275]
[93.74969482 17.23290825]
[80.55572510 9.47547150]
[72.48796082 -3.53105664]
[71.40031433 -18.79787064]
[77.54271698 -32.81676865]
[89.50368500 -42.36631012]
[104.53468323 -45.25207901]
[119.18169403 -40.81095123]
[130.07894897 -30.06346130]
[134.72232056 -15.47930431]
[132.04481506 -0.40981415]
[122.66169739 11.68215179]
[108.72913361 18.01794815]
[107.94409943 32.99739075]
[107.15905762 47.97683334]
[127.24443054 56.01893997]
[142.10523987 71.29665375]
[149.36535645 90.99196625]
[148.01771545 111.61643219]
[138.55590820 129.62858582]
[122.84422302 142.04200745]
[127.85132599 156.18162537]
[132.85842896 170.32124329]
[137.86552429 184.46087646]
[149.76562500 194.88671875]
[146.72056580 209.46673584]
[151.72767639 223.60636902]
[156.73477173 237.74598694]
[168.63487244 248.17184448]
[165.58981323 262.75186157]
[170.59692383 276.89147949]
[175.60401917 291.03109741]
[180.61112976 305.17071533]
[185.61822510 319.31033325]
[190.62533569 333.44998169]
[195.63243103 347.58959961]
[200.54879761 352.30496216]
[202.02612305 357.95440674]
[200.51036072 362.60232544]
[204.77059937 376.98461914]
[209.03082275 391.36691284]
[214.53344727 398.81579590]
[213.20903015 406.18167114]
[217.09130859 420.67056274]
[220.97360229 435.15945435]
[224.85588074 449.64834595]
[235.33795166 452.57788086]
[243.55229187 459.59320068]
[248.01820374 469.33963013]
[247.96876526 479.97894287]
[243.48168945 489.53598022]
[235.45214844 496.26535034]
[238.18568420 511.01416016]
[240.91921997 525.76300049]
[243.65275574 540.51184082]
[246.38627625 555.26062012]
[261.12786865 559.21643066]
[272.68765259 569.18304443]
[278.77041626 583.18176270]
[278.16839600 598.43298340]
[271.00115967 611.90863037]
[258.69174194 620.93310547]
[243.68421936 623.71459961]
[228.95831299 619.70080566]
[217.43788147 609.68872070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 110]
[4 109]
[5 108]
[6 107]
[7 106]
[10 100]
[11 99]
[12 98]
[13 97]
[14 95]
[15 94]
[16 93]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[25 82]
[26 81]
[27 80]
[29 78]
[30 77]
[31 76]
[32 75]
[44 52]
[45 51]
[53 69]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
