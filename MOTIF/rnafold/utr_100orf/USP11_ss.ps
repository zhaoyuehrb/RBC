%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:05:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGUAGCCCCGCGACUGUUUGGGGGGCUCUGCUUCCGUUUCCGGGACCAGAAUCCGGAAGUGGCUGUUGAGGGGCGUCUUCCAAUCUCGCACAGCU\
) } def
/len { sequence length } bind def

/coor [
[100.64991760 125.32466125]
[89.54452515 121.92343903]
[81.56748199 114.16226959]
[67.36040497 118.97465515]
[53.15333176 123.78704071]
[38.94625854 128.59942627]
[24.73918533 133.41181946]
[17.46153641 139.22804260]
[10.01482391 138.14546204]
[-4.33504200 142.51368713]
[-18.68490791 146.88191223]
[-33.03477478 151.25012207]
[-47.38463974 155.61834717]
[-61.73450470 159.98657227]
[-72.68333435 171.40733337]
[-87.11219025 167.71174622]
[-101.46205902 172.07997131]
[-115.81192017 176.44819641]
[-126.60923767 188.79121399]
[-142.64260864 185.34695435]
[-147.41828918 169.65858459]
[-136.02345276 157.86494446]
[-120.18014526 162.09832764]
[-105.83027649 157.73010254]
[-91.48040771 153.36189270]
[-81.55798340 142.25357056]
[-66.10272217 145.63670349]
[-51.75286102 141.26847839]
[-37.40299606 136.90026855]
[-23.05312920 132.53204346]
[-8.70326233 128.16381836]
[5.64660311 123.79560089]
[19.92679977 119.20474243]
[34.13387299 114.39235687]
[48.34094620 109.57997131]
[62.54801941 104.76758575]
[76.75509644 99.95520020]
[80.61454773 84.23757935]
[94.49789429 73.84748077]
[112.97747040 74.66532135]
[115.30094147 59.84636688]
[117.62441254 45.02740860]
[119.94788361 30.20845413]
[122.27136230 15.38949680]
[124.59483337 0.57054013]
[126.91830444 -14.24841690]
[129.24177551 -29.06737328]
[131.56524658 -43.88632965]
[133.88871765 -58.70528793]
[123.47552490 -70.37144470]
[123.04908752 -86.00321198]
[132.81077576 -98.21974945]
[148.15139771 -101.25276947]
[161.82759094 -93.67018127]
[167.38188171 -79.05225372]
[162.19169617 -64.30111694]
[148.70767212 -56.38181305]
[146.38420105 -41.56285858]
[144.06072998 -26.74390030]
[141.73725891 -11.92494392]
[139.41378784 2.89401293]
[137.09031677 17.71296883]
[134.76684570 32.53192520]
[132.44337463 47.35088348]
[130.11990356 62.16983795]
[127.79642487 76.98879242]
[134.75137329 90.27896881]
[148.25141907 96.81723022]
[161.75144958 103.35549927]
[175.25149536 109.89376831]
[188.75154114 116.43202972]
[202.35162354 122.75955963]
[216.04847717 128.87481689]
[229.74531555 134.99006653]
[243.44216919 141.10531616]
[257.13900757 147.22058105]
[271.01943970 152.90690613]
[285.06997681 158.15879822]
[299.34490967 151.37638855]
[314.20651245 156.75306702]
[320.83761597 171.09893799]
[315.30410767 185.90284729]
[300.88894653 192.38191223]
[286.14434814 186.69219971]
[279.81805420 172.20933533]
[265.76751709 166.95744324]
[260.98040771 168.17156982]
[255.38908386 166.26187134]
[251.02377319 160.91741943]
[237.32691956 154.80216980]
[223.63006592 148.68692017]
[209.93322754 142.57165527]
[196.23637390 136.45640564]
[188.71287537 136.60647583]
[182.21327209 129.93206787]
[168.71322632 123.39380646]
[155.21319580 116.85553741]
[141.71315002 110.31727600]
[128.21310425 103.77900696]
[122.57234192 115.56930542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[16 25]
[17 24]
[18 23]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
