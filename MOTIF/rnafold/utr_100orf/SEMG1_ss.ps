%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUUUAAGCUCCACCCAUGGCACACUCACUCAAGGAAGAUAUAAAUGACAAGGUCGGCUCAGCUCUCAGACAAGGUUUUCCAAGCAAGAUGAAGCCCAACAUCAUCUUUGUACUUUCCCUGCUCCUCAUCUUGGAGAAGCAAGCAGCUGUGAUGGGACAAAAAGGUGGAUCAAAAGGCCGAUUACCAA\
) } def
/len { sequence length } bind def

/coor [
[142.32505798 549.51483154]
[141.58518982 534.53314209]
[140.84532166 519.55139160]
[140.10545349 504.56964111]
[139.36560059 489.58789062]
[138.62573242 474.60614014]
[130.45149231 468.44009399]
[126.95587158 458.58270264]
[129.52461243 448.21762085]
[137.54199219 440.83535767]
[137.29527283 425.83740234]
[136.18605042 410.87847900]
[134.21795654 396.00814819]
[132.24987793 381.13781738]
[130.28178406 366.26748657]
[128.31370544 351.39715576]
[126.34561920 336.52682495]
[111.17462921 326.30398560]
[108.22615051 307.92620850]
[119.82859802 292.96640015]
[117.37248993 278.16885376]
[103.99127960 271.68185425]
[96.91201782 258.40222168]
[99.03451538 243.32415771]
[109.75235748 232.25917053]
[107.29624939 217.46162415]
[103.09233856 211.36744690]
[104.92352295 202.40065002]
[102.71112823 187.56471252]
[100.49873352 172.72875977]
[98.28633881 157.89282227]
[66.40616608 116.63586426]
[86.13396454 90.06749725]
[77.96782684 77.48519897]
[63.96468735 70.12159729]
[63.52604675 55.23345566]
[55.35990906 42.65115738]
[47.19377136 30.06885910]
[39.02763367 17.48656082]
[30.86149788 4.90426397]
[16.85835838 -2.45933747]
[16.41971588 -17.34748268]
[8.25358009 -29.92978096]
[0.08744337 -42.51207733]
[-8.07869339 -55.09437561]
[-16.24482918 -67.67667389]
[-24.41096687 -80.25897217]
[-31.72075081 -85.76566315]
[-32.60596085 -93.11605072]
[-40.56404495 -105.83095551]
[-55.85298157 -105.38861084]
[-69.22229004 -112.61068726]
[-77.12907410 -125.46949768]
[-77.53516388 -140.45919800]
[-70.43159485 -153.55136108]
[-78.38967896 -166.26628113]
[-94.84693909 -174.50947571]
[-94.80688477 -192.05117798]
[-102.97302246 -204.63346863]
[-111.13915253 -217.21577454]
[-119.30529022 -229.79806519]
[-127.57463074 -242.31277466]
[-135.94660950 -254.75906372]
[-144.72341919 -266.92324829]
[-153.89556885 -278.79220581]
[-163.06771851 -290.66113281]
[-179.95802307 -289.92733765]
[-193.82351685 -299.30715942]
[-199.31686401 -314.94436646]
[-194.46228027 -330.61776733]
[-203.82839966 -342.33422852]
[-213.19451904 -354.05072021]
[-222.56063843 -365.76718140]
[-237.17350769 -374.36370850]
[-232.95816040 -390.78527832]
[-216.01145935 -391.28060913]
[-210.84416199 -375.13330078]
[-201.47804260 -363.41683960]
[-192.11192322 -351.70034790]
[-182.74580383 -339.98388672]
[-169.51420593 -341.83276367]
[-156.99807739 -336.85827637]
[-148.51019287 -326.26184082]
[-146.35388184 -312.74774170]
[-151.19877625 -299.83328247]
[-142.02662659 -287.96435547]
[-132.85447693 -276.09539795]
[-130.07676697 -275.61236572]
[-127.32488251 -273.99044800]
[-125.03707886 -271.23464966]
[-123.64141846 -267.50952148]
[-123.50032043 -263.13104248]
[-115.12834930 -250.68475342]
[-108.77556610 -246.88291931]
[-106.72299194 -237.96420288]
[-98.55686188 -225.38191223]
[-90.39072418 -212.79960632]
[-82.22458649 -200.21731567]
[-70.45263672 -197.38780212]
[-63.54878616 -186.95739746]
[-65.67477417 -174.22436523]
[-57.71669006 -161.50946045]
[-42.83648300 -162.17662048]
[-29.53172302 -155.26002502]
[-21.42177963 -142.52836609]
[-20.76914597 -127.34709930]
[-27.84913826 -113.78904724]
[-19.89105225 -101.07413483]
[-11.82866859 -88.42510986]
[-3.66253209 -75.84281158]
[4.50360441 -63.26051331]
[12.66974068 -50.67821503]
[20.83587837 -38.09591675]
[29.00201416 -25.51361847]
[42.42105865 -19.04998779]
[43.44379807 -3.26187253]
[51.60993195 9.32042503]
[59.77606964 21.90272331]
[67.94220734 34.48501968]
[76.10834503 47.06731796]
[89.52738953 53.53094864]
[90.55012512 69.31906128]
[98.71626282 81.90135956]
[113.06363678 86.27776337]
[126.86208344 80.39535522]
[140.66053772 74.51294708]
[154.45898438 68.63053131]
[158.83433533 53.61752701]
[171.86485291 44.97233963]
[187.39796448 46.77696228]
[198.09938049 58.17931366]
[198.91624451 73.79554749]
[189.46282959 86.25215912]
[174.20277405 89.66751099]
[160.34140015 82.42898560]
[146.54295349 88.31139374]
[132.74449158 94.19380188]
[118.94604492 100.07621002]
[120.23490143 107.46463776]
[124.10148621 129.62991333]
[139.07664490 130.49296570]
[154.05178833 131.35601807]
[166.93818665 121.79985809]
[182.40643311 126.05577850]
[188.59060669 140.85900879]
[180.74674988 154.85377502]
[164.89198303 157.30447388]
[153.18873596 146.33116150]
[138.21359253 145.46812439]
[123.23843384 144.60507202]
[113.12228394 155.68041992]
[115.33467865 170.51637268]
[117.54707336 185.35231018]
[119.75946808 200.18826294]
[122.09380341 215.00550842]
[124.54991150 229.80305481]
[138.26771545 236.81219482]
[145.14755249 250.39605713]
[142.73802185 265.25064087]
[132.17004395 275.71273804]
[134.62614441 290.51028442]
[145.47459412 295.42263794]
[152.52613831 304.86999512]
[154.11726379 316.42984009]
[149.96650696 327.20703125]
[141.21594238 334.55874634]
[143.18403625 349.42907715]
[145.15211487 364.29940796]
[147.12020874 379.16973877]
[149.08828735 394.04006958]
[151.05636597 408.91040039]
[160.21128845 397.02816772]
[174.83174133 393.67520142]
[188.24946594 400.38079834]
[194.34472656 414.08654785]
[190.33755493 428.54138184]
[178.05555725 437.15258789]
[163.10047913 435.99261475]
[152.29324341 425.59069824]
[152.53996277 440.58865356]
[163.68284607 457.37408447]
[153.60746765 473.86627197]
[154.34733582 488.84802246]
[155.08720398 503.82977295]
[155.82707214 518.81152344]
[156.56694031 533.79327393]
[157.30679321 548.77496338]
[166.64674377 562.25451660]
[159.39938354 576.96533203]
[143.02020264 577.77423096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 187]
[2 186]
[3 185]
[4 184]
[5 183]
[6 182]
[10 180]
[11 179]
[12 171]
[13 170]
[14 169]
[15 168]
[16 167]
[17 166]
[20 161]
[21 160]
[25 156]
[26 155]
[28 154]
[29 153]
[30 152]
[31 151]
[33 123]
[34 122]
[36 120]
[37 119]
[38 118]
[39 117]
[40 116]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[49 108]
[50 107]
[55 102]
[56 101]
[58 98]
[59 97]
[60 96]
[61 95]
[62 93]
[63 92]
[64 87]
[65 86]
[66 85]
[70 80]
[71 79]
[72 78]
[73 77]
[124 138]
[125 137]
[126 136]
[127 135]
[140 150]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
