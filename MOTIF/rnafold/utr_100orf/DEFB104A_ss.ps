%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCCCAGCAUUAUGCAGAGACUUGUGCUGCUAUUAGCCAUUUCUCUUCUACUCUAUCAAGAUCUUCCAGUGAGAAGCGAAUUUGAAUUGGACAGAAUAUGUGGUUAUGGGA\
) } def
/len { sequence length } bind def

/coor [
[97.55922699 224.17555237]
[82.37523651 227.91461182]
[68.36308289 220.97245789]
[62.13887405 206.62695312]
[66.64148712 191.65162659]
[79.74493408 183.11735535]
[81.38076782 168.20681763]
[83.01659393 153.29629517]
[84.65242767 138.38575745]
[71.06262970 132.03616333]
[60.67555237 142.85784912]
[50.28847504 153.67951965]
[43.68242645 169.29350281]
[26.84990692 167.26799011]
[24.13654709 150.53259277]
[39.46680069 143.29243469]
[49.85387421 132.47076416]
[60.24095154 121.64909363]
[56.39165878 107.15140533]
[42.00452423 102.90754700]
[27.61738777 98.66368866]
[13.23025227 94.41983032]
[-1.15688396 90.17597961]
[-14.91746426 97.47557831]
[-29.44761086 92.96675110]
[-36.32186508 79.80316162]
[-50.70899963 75.55930328]
[-59.96529388 76.12722015]
[-65.42822266 70.99804688]
[-79.69407654 66.36279297]
[-93.95992279 61.72753525]
[-108.22576904 57.09227753]
[-124.14532471 61.02925873]
[-135.31808472 49.02502823]
[-130.25047302 33.42851257]
[-114.15560913 30.28406906]
[-103.59051514 42.82643127]
[-89.32466888 47.46168518]
[-75.05882263 52.09694290]
[-60.79297256 56.73219681]
[-46.46514130 61.17216492]
[-32.07800674 65.41602325]
[-19.16000748 58.09066391]
[-4.50895119 62.18958664]
[3.08697271 75.78884125]
[17.47410774 80.03269958]
[31.86124420 84.27655029]
[46.24837875 88.52040863]
[60.63551712 92.76426697]
[91.27429962 68.27453613]
[119.40788269 83.02642059]
[133.08314514 76.86304474]
[146.75840759 70.69966888]
[160.43367004 64.53629303]
[165.77572632 52.69910049]
[177.40155029 47.88241196]
[188.79620361 52.18944550]
[202.63471985 46.40190506]
[216.47322083 40.61436462]
[204.23338318 31.94336128]
[203.10231018 16.98606682]
[213.89901733 6.57304192]
[228.80561829 8.24434853]
[237.02825928 20.78979492]
[232.61268616 35.12551117]
[247.11036682 31.27622032]
[261.60806274 27.42692947]
[276.05181885 23.37997818]
[290.43896484 19.13612175]
[304.82608032 14.89226437]
[319.21322632 10.64840794]
[333.60037231 6.40455103]
[347.98748779 2.16069436]
[355.58343506 -11.43855953]
[370.23446655 -15.53748322]
[383.15246582 -8.21212292]
[397.53961182 -12.45597935]
[411.92675781 -16.69983673]
[420.82983398 -30.04578781]
[436.82669067 -31.26250648]
[447.64587402 -19.41662979]
[444.98785400 -3.59530115]
[430.89163208 4.06471014]
[416.17059326 -2.31270027]
[401.78347778 1.93115628]
[387.39633179 6.17501307]
[380.52209473 19.33860779]
[365.99194336 23.84743309]
[352.23135376 16.54783058]
[337.84420776 20.79168701]
[323.45709229 25.03554344]
[309.06994629 29.27939987]
[294.68280029 33.52325821]
[280.29568481 37.76711273]
[274.69467163 42.74515152]
[265.45733643 41.92461777]
[250.95965576 45.77390671]
[236.46197510 49.62319946]
[222.26077271 54.45287323]
[208.42225647 60.24041367]
[194.58374023 66.02795410]
[184.80136108 80.52736664]
[166.59704590 78.21155548]
[152.92178345 84.37493134]
[139.24652100 90.53830719]
[125.57125854 96.70168304]
[128.03948975 108.64971161]
[124.59072113 121.86181641]
[114.75447845 133.34532166]
[99.56296539 140.02159119]
[97.92713165 154.93212891]
[96.29129791 169.84265137]
[94.65547180 184.75318909]
[105.59691620 195.92541504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 113]
[7 112]
[8 111]
[9 110]
[10 18]
[11 17]
[12 16]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[26 42]
[27 41]
[29 40]
[30 39]
[31 38]
[32 37]
[51 106]
[52 105]
[53 104]
[54 103]
[57 101]
[58 100]
[59 99]
[65 98]
[66 97]
[67 96]
[68 94]
[69 93]
[70 92]
[71 91]
[72 90]
[73 89]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
