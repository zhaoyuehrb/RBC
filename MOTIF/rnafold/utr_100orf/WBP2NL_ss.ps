%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:15:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCUCCGCCCUCCCCUUCAGAACCGCGCCCCACAGCUCGGCGCAGGUCCCGCCCCUUUCCAUCUACGGGGCGGCAGGAGGCCCGAAGCAAGAUGGCGGUGAAUCAGAGCCACACCGAGAACCGCCGCGGAGCCCUCAUCCCUAACGGUGAAAGUCUCUUGAAGCGGUCUCCGAAUGUGGAGCUCUCCUUCC\
) } def
/len { sequence length } bind def

/coor [
[359.75827026 140.92250061]
[353.42922974 135.51597595]
[348.53488159 128.76354980]
[345.35403442 121.03726959]
[344.07083130 112.76500702]
[329.32754517 110.00177765]
[315.39276123 115.26210785]
[303.25408936 105.11502075]
[288.51080322 102.35179138]
[273.76751709 99.58856201]
[259.02423096 96.82533264]
[244.28092957 94.06210327]
[230.34614563 99.32243347]
[218.20747375 89.17534637]
[203.46418762 86.41211700]
[190.01074219 96.49384308]
[173.09423828 93.67698669]
[163.25343323 79.22172546]
[148.46752930 76.69637299]
[133.68164062 74.17101288]
[118.89575195 71.64566040]
[130.43020630 95.85158539]
[120.70543671 117.86858368]
[100.27181244 123.98603058]
[84.69451904 113.82585144]
[70.66927338 119.14492798]
[56.64403152 124.46400452]
[42.66209030 129.89587402]
[28.72435570 135.44021606]
[14.78662300 140.98454285]
[0.84889007 146.52886963]
[-13.08884335 152.07319641]
[-15.94077110 167.23466492]
[-26.55347061 178.43173218]
[-41.54046631 182.09144592]
[-56.11946106 177.04600525]
[-65.63835144 164.90541077]
[-67.05970001 149.54365540]
[-59.92995071 135.86264038]
[-46.52418518 128.22792053]
[-31.12013435 129.07569885]
[-18.63317299 138.13546753]
[-4.69544029 132.59114075]
[9.24229336 127.04680634]
[23.18002510 121.50247955]
[37.11775970 115.95814514]
[42.17763519 110.55738068]
[51.32495880 110.43875885]
[65.35020447 105.11968231]
[79.37544250 99.80061340]
[73.01520538 95.54774475]
[67.62792969 89.36668396]
[54.40267563 82.28907776]
[41.17741776 75.21146393]
[27.95215988 68.13385773]
[14.72690296 61.05624390]
[1.50164604 53.97863388]
[-11.72361088 46.90102386]
[-24.35350800 55.54650497]
[-39.55582809 57.32077026]
[-53.83719254 51.81611252]
[-63.91584396 40.29746246]
[-67.47578430 25.41171646]
[-63.69896698 10.57951450]
[-53.45327759 -0.79081440]
[-39.09309387 -6.08645105]
[-23.91828728 -4.09049654]
[-11.41591644 4.73839235]
[-4.45893240 18.37140274]
[-4.64600086 33.67576599]
[8.57925606 40.75337982]
[21.80451393 47.83098984]
[35.02976990 54.90859985]
[48.25502777 61.98620987]
[61.48028564 69.06381989]
[74.70554352 76.14142609]
[80.03015900 70.85953522]
[90.67939758 60.29573441]
[96.00401306 55.01383972]
[89.03316498 41.73199844]
[74.89112854 33.42930603]
[75.28100586 17.03479385]
[89.80172729 9.41372967]
[103.51561737 18.40601158]
[102.31501007 34.76115036]
[109.28585815 48.04299164]
[121.42111206 56.85976791]
[136.20700073 59.38512421]
[150.99288940 61.91048050]
[165.77877808 64.43583679]
[175.80810547 55.43346405]
[188.99905396 53.87809753]
[200.50482178 60.11542130]
[206.22741699 71.66882324]
[220.97070312 74.43205261]
[235.96003723 69.36937714]
[247.04415894 79.31881714]
[261.78744507 82.08204651]
[276.53073120 84.84527588]
[291.27401733 87.60850525]
[306.01730347 90.37173462]
[321.00665283 85.30905151]
[332.09075928 95.25849152]
[346.83404541 98.02172089]
[361.79501343 81.28375244]
[383.69070435 76.93894196]
[403.68020630 86.58573151]
[413.78588867 106.20436859]
[428.76202393 107.04973602]
[443.73818970 107.89510345]
[458.71435547 108.74046326]
[473.69052124 109.58583069]
[485.41992188 99.33602905]
[500.59585571 100.40669250]
[510.29519653 111.65206909]
[525.27136230 112.49743652]
[540.24749756 113.34279633]
[559.44018555 101.78903198]
[577.10833740 114.28225708]
[592.10784912 114.16142273]
[607.10736084 114.04059601]
[622.10687256 113.91976929]
[630.67633057 110.71786499]
[637.34857178 113.91976929]
[652.34808350 114.04059601]
[667.34759521 114.16142273]
[682.34710693 114.28225708]
[693.56762695 103.47773743]
[708.77752686 103.81394958]
[719.00885010 114.57758331]
[734.00836182 114.69841766]
[749.00836182 114.69841766]
[764.00787354 114.57758331]
[779.00738525 114.45675659]
[788.64483643 100.56428528]
[804.50476074 95.20212555]
[820.27905273 100.29413605]
[829.81732178 113.64699554]
[844.81292725 113.28453827]
[859.80853271 112.92208099]
[874.80413818 112.55963135]
[889.79980469 112.19717407]
[900.51898193 100.58362579]
[916.31372070 100.03471375]
[927.81329346 110.87609100]
[928.19519043 126.67576599]
[917.23284912 138.06007385]
[901.42999268 138.27490234]
[890.16223145 127.19279480]
[875.16662598 127.55524445]
[860.17102051 127.91770172]
[845.17535400 128.28016663]
[830.17974854 128.64262390]
[823.64300537 140.29206848]
[812.10931396 147.24319458]
[798.53900146 147.58689880]
[786.47723389 141.12634277]
[779.12823486 129.45626831]
[764.12872314 129.57710266]
[749.12921143 129.69792175]
[742.45697021 132.89982605]
[733.88751221 129.69792175]
[718.88800049 129.57710266]
[708.48461914 140.17451477]
[693.27130127 140.26565552]
[682.22625732 129.28176880]
[667.22674561 129.16093445]
[652.22723389 129.04011536]
[637.22772217 128.91928101]
[622.22772217 128.91928101]
[607.22821045 129.04011536]
[592.22869873 129.16093445]
[577.22918701 129.28176880]
[573.01116943 135.97000122]
[566.41119385 140.49334717]
[558.46704102 142.05036926]
[550.46405029 140.31327820]
[543.72729492 135.49349976]
[539.40216064 128.31895447]
[524.42596436 127.47359467]
[509.44982910 126.62822723]
[498.54656982 136.71064758]
[483.34658813 136.06666565]
[472.84515381 124.56198883]
[457.86898804 123.71662140]
[442.89282227 122.87126160]
[427.91665649 122.02589417]
[412.94052124 121.18052673]
[409.86526489 128.77960205]
[405.08496094 135.45872498]
[398.86007690 140.84126282]
[391.53271484 144.62159729]
[383.50799561 146.58242798]
[375.23144531 146.60726929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 104]
[6 103]
[8 101]
[9 100]
[10 99]
[11 98]
[12 97]
[14 95]
[15 94]
[18 90]
[19 89]
[20 88]
[21 87]
[25 50]
[26 49]
[27 48]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[79 86]
[80 85]
[108 188]
[109 187]
[110 186]
[111 185]
[112 184]
[115 181]
[116 180]
[117 179]
[119 173]
[120 172]
[121 171]
[122 170]
[124 169]
[125 168]
[126 167]
[127 166]
[130 163]
[131 162]
[132 160]
[133 159]
[134 158]
[138 153]
[139 152]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
