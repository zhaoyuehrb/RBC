%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGUUCUACAGGCGCACGGUGGUACCCCAGCGCCUGUGCCCGCGCAACCCGCCGCAGCAGCUGGCGGAGCUCCGCGACGUGAGCCACCUGGCAGCGC\
) } def
/len { sequence length } bind def

/coor [
[97.88542175 177.91438293]
[86.51974487 187.70321655]
[71.97201538 191.35885620]
[57.32905197 188.10562134]
[45.69786072 178.63380432]
[39.54640579 164.95317078]
[40.17993546 149.96655273]
[47.46402359 136.85389709]
[59.85309601 128.39747620]
[74.71818542 126.39163208]
[59.71999741 126.15835571]
[44.72181320 125.92507935]
[29.72362709 125.69179535]
[14.72544098 125.45851898]
[-0.27274475 125.22524261]
[-15.27093029 124.99196625]
[-30.26911736 124.75868988]
[-45.26730347 124.52541351]
[-56.56851196 135.24551392]
[-71.77548218 134.79527283]
[-81.92581177 123.95523834]
[-96.92399597 123.72196198]
[-108.09588623 134.90071106]
[-123.89997864 134.82200623]
[-134.95999146 123.53255463]
[-134.71420288 107.73017883]
[-123.30844116 96.79014587]
[-107.50954437 97.20298767]
[-96.69071960 108.72377777]
[-81.69252777 108.95705414]
[-71.20999146 98.43792725]
[-55.99637222 98.46085358]
[-45.03402710 109.52722931]
[-30.03583908 109.76050568]
[-15.03765392 109.99378204]
[-0.03946756 110.22705841]
[14.95871830 110.46033478]
[29.95690346 110.69361115]
[44.95508957 110.92688751]
[59.95327759 111.16016388]
[74.95146179 111.39344788]
[76.10622406 91.37507629]
[89.84793854 79.04176331]
[106.70455933 79.91719055]
[116.18660736 68.29433441]
[125.66865540 56.67147446]
[135.15069580 45.04861832]
[129.12680054 29.74110985]
[131.57897949 13.56910324]
[141.75326538 0.88098270]
[156.83212280 -4.95913935]
[172.71421814 -2.46311975]
[181.83020020 -14.37524414]
[190.94619751 -26.28736877]
[200.06217957 -38.19949341]
[209.17817688 -50.11161804]
[218.10780334 -62.16407394]
[226.84892273 -74.35394287]
[227.92227173 -90.71792603]
[242.74822998 -97.72670746]
[256.07513428 -88.17024994]
[254.19338989 -71.87941742]
[239.03878784 -65.61282349]
[230.29768372 -53.42295837]
[228.93392944 -46.02257538]
[221.09030151 -40.99562836]
[211.97430420 -29.08350372]
[202.85832214 -17.17137909]
[193.74232483 -5.25925398]
[184.62634277 6.65287066]
[190.71511841 18.98275375]
[190.86010742 32.79984665]
[184.97502136 45.37528229]
[174.17021179 54.20044708]
[160.54362488 57.48735428]
[146.77355957 54.53066635]
[137.29150391 66.15351868]
[127.80946350 77.77638245]
[118.32741547 89.39923859]
[122.40187073 109.53125000]
[106.59110260 126.71697998]
[116.07315063 138.33984375]
[125.55519104 149.96269226]
[138.39537048 152.08085632]
[146.04559326 162.10575867]
[144.78201294 174.24746704]
[153.89799500 186.15959167]
[163.01399231 198.07171631]
[178.35614014 203.86398315]
[180.74360657 220.08840942]
[167.72036743 230.05470276]
[152.68360901 223.51040649]
[151.10186768 207.18771362]
[141.98587036 195.27558899]
[132.86988831 183.36346436]
[116.37020111 177.61351013]
[113.93233490 159.44474792]
[104.45029449 147.82188416]
[94.96824646 136.19903564]
[102.61102295 149.10592651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[21 30]
[22 29]
[44 79]
[45 78]
[46 77]
[47 76]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 64]
[58 63]
[81 99]
[82 98]
[83 97]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
