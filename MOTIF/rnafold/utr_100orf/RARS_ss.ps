%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:47:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCUUCCGUCCACUUGGCGAGUGAGACGCUGAUGGGAGGAUGGACGUACUGGUGUCUGAGUGCUCCGCGCGGCUGCUGCAGCAGGAAGAAGAGAUUAAAUCUCUGACUGCUGAAAUUGACCGGUUGAAAAACUGUGGCU\
) } def
/len { sequence length } bind def

/coor [
[172.08839417 126.20673370]
[164.90771484 114.75560760]
[149.99940491 113.09970093]
[135.09107971 111.44379425]
[120.18276978 109.78787994]
[104.19338989 122.03547668]
[84.82307434 116.51689148]
[71.56504059 123.53290558]
[58.30700302 130.54891968]
[49.72845459 143.84249878]
[34.86021042 142.95671082]
[21.60217476 149.97273254]
[8.34413815 156.98873901]
[-4.91389894 164.00476074]
[-11.09570408 170.83917236]
[-18.54374695 171.02565002]
[-31.95374680 177.74664307]
[-45.36375046 184.46765137]
[-58.77375031 191.18865967]
[-72.18375397 197.90965271]
[-85.59375000 204.63066101]
[-89.03623199 219.88461304]
[-101.50962830 229.31585693]
[-117.12438965 228.47125244]
[-128.50769043 217.74957275]
[-130.28469849 202.21328735]
[-121.61635590 189.19813538]
[-106.59559631 184.84950256]
[-92.31475830 191.22065735]
[-78.90475464 184.49964905]
[-65.49475098 177.77865601]
[-52.08475113 171.05764771]
[-38.67474747 164.33665466]
[-25.26474762 157.61564636]
[-11.92991257 150.74671936]
[1.32812393 143.73069763]
[14.58616066 136.71469116]
[27.84419823 129.69866943]
[35.47444153 116.90692902]
[51.29098892 117.29087830]
[64.54902649 110.27486420]
[77.80706024 103.25885010]
[78.06268311 95.32016754]
[81.06896210 87.96827698]
[71.82823181 76.15265656]
[62.58749771 64.33703613]
[54.77142334 59.45512772]
[53.27649689 52.15627289]
[44.29941177 40.13912201]
[35.32232666 28.12196732]
[26.34524345 16.10481644]
[17.36815834 4.08766317]
[1.85482275 4.42828178]
[-10.87672424 -4.44230604]
[-15.93094254 -19.11317825]
[-11.36438179 -33.94308472]
[1.06702185 -43.22962570]
[16.58313942 -43.40193558]
[29.21770859 -34.39375687]
[34.11248016 -19.66891670]
[29.38531113 -4.88942146]
[38.36239624 7.12773085]
[47.33948135 19.14488411]
[56.31656647 31.16203499]
[65.29364777 43.17918777]
[74.40311432 55.09630203]
[83.64384460 66.91192627]
[92.88458252 78.72753906]
[105.14947510 78.16815186]
[115.87160492 84.14948273]
[121.83867645 94.87956238]
[136.74699402 96.53546906]
[151.65531921 98.19138336]
[166.56362915 99.84729004]
[179.97756958 88.67760468]
[196.98944092 90.58800507]
[207.18257141 103.91988373]
[222.12387085 105.24558258]
[237.06517029 106.57128143]
[254.35603333 88.47710419]
[283.94677734 96.87312317]
[297.77301025 91.05630493]
[311.59924316 85.23949432]
[325.42544556 79.42268372]
[339.25167847 73.60587311]
[353.07791138 67.78905487]
[354.54043579 57.08188629]
[360.30838013 48.03948593]
[369.26437378 42.28717804]
[379.72567749 40.82496262]
[389.76019287 43.85425949]
[397.54330444 50.75321960]
[411.72488403 45.86621094]
[425.90646362 40.97920227]
[440.08804321 36.09219360]
[454.26962280 31.20518684]
[468.45120239 26.31817818]
[481.45620728 15.44133759]
[495.50814819 24.92711258]
[490.28302002 41.05580139]
[473.33819580 40.49975586]
[459.15661621 45.38676453]
[444.97503662 50.27377319]
[430.79345703 55.16078186]
[416.61190796 60.04779053]
[402.43032837 64.93479919]
[395.30960083 82.99521637]
[376.96685791 90.22305298]
[358.89474487 81.61528778]
[345.06851196 87.43210602]
[331.24227905 93.24891663]
[317.41604614 99.06572723]
[303.58981323 104.88253784]
[289.76358032 110.69935608]
[287.47753906 117.84246063]
[302.39993286 119.36637878]
[317.37475586 118.49776459]
[326.56542969 130.35237122]
[321.99291992 144.63845825]
[307.62695312 148.95336914]
[295.93984985 139.55191040]
[282.90545654 132.12867737]
[280.61941528 139.27178955]
[288.49926758 152.03530884]
[296.37915039 164.79882812]
[304.25903320 177.56236267]
[312.13891602 190.32588196]
[326.82540894 197.62240601]
[327.57946777 214.00421143]
[313.62542725 222.61909485]
[299.31796265 214.60481262]
[299.37539673 198.20576477]
[291.49551392 185.44223022]
[283.61563110 172.67871094]
[275.73574829 159.91519165]
[267.85589600 147.15167236]
[243.92271423 140.18124390]
[235.73947144 121.51258850]
[220.79817200 120.18688202]
[205.85685730 118.86118317]
[197.19154358 128.45933533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[7 42]
[8 41]
[9 40]
[11 38]
[12 37]
[13 36]
[14 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[44 68]
[45 67]
[46 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[77 140]
[78 139]
[79 138]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[86 109]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
[123 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
