%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCAUGGCUCCUGGGAGCGUCACCAGCGACAUCUCACCCUCCUCGACUUCCACAGCAGGAUCAUCCAGGUCUCCUGAAUCUGAAAAGCCAGGCCCGAGCCACG\
) } def
/len { sequence length } bind def

/coor [
[95.00516510 267.06240845]
[79.79445648 269.63882446]
[65.61446381 263.56170654]
[56.98997498 250.77023315]
[56.67302704 235.34611511]
[64.76475525 222.21115112]
[78.68312836 215.55664062]
[80.45722961 200.66192627]
[82.23132324 185.76721191]
[84.00542450 170.87249756]
[85.77951813 155.97778320]
[87.55361938 141.08305359]
[68.32700348 128.97502136]
[57.97403717 108.74921417]
[42.98062515 109.19371033]
[27.98721123 109.63821411]
[12.99379826 110.08271027]
[-1.99961388 110.52721405]
[-11.48907471 119.41741180]
[-24.08932877 119.39067078]
[-32.95442963 111.01307678]
[-47.95442963 111.01307678]
[-62.95442963 111.01307678]
[-73.95111847 122.36421967]
[-89.75452423 122.53131104]
[-100.98876190 111.41522217]
[-100.98876190 95.61093140]
[-89.75452423 84.49485016]
[-73.95111847 84.66194153]
[-62.95442963 96.01307678]
[-47.95442963 96.01307678]
[-32.95442963 96.01307678]
[-18.35080910 86.40688324]
[-2.44411373 95.53379822]
[12.54929924 95.08930206]
[27.54271126 94.64479828]
[42.53612518 94.20030212]
[57.52953720 93.75579834]
[61.22112274 81.58997345]
[68.31420135 71.03897858]
[78.18659973 63.02830887]
[89.97236633 58.26060867]
[102.63770294 57.15407944]
[106.16099548 42.57373810]
[109.68428802 27.99339294]
[105.40492249 12.76192474]
[115.91521454 2.20810914]
[119.43849945 -12.37223434]
[110.05216217 -27.04228020]
[114.02294159 -43.65461349]
[128.45056152 -52.15336609]
[131.54023743 -66.83171082]
[134.62991333 -81.51006317]
[125.78726959 -94.60903168]
[128.87892151 -110.10797882]
[142.07066345 -118.81163788]
[157.53604126 -115.55629730]
[166.09974670 -102.27327728]
[162.68107605 -86.84317017]
[149.30827332 -78.42037964]
[146.21858215 -63.74203491]
[143.12890625 -49.06368637]
[151.65333557 -39.27717209]
[152.95391846 -26.16743660]
[146.32467651 -14.55704498]
[134.01884460 -8.84894371]
[130.49555969 5.73140001]
[135.02693176 19.91998291]
[124.26462555 31.51668358]
[120.74134064 46.09702682]
[117.21804810 60.67737198]
[128.70429993 68.08145905]
[137.28146362 78.72037506]
[142.08029175 91.51591492]
[142.61441040 105.17128754]
[156.96043396 109.55213928]
[171.30644226 113.93299103]
[185.65245056 118.31384277]
[195.12521362 112.56700134]
[205.97183228 113.06533813]
[214.52127075 119.39315033]
[218.01759338 129.20358276]
[232.07888794 134.42662048]
[248.14805603 131.15338135]
[258.81323242 143.61073303]
[253.10304260 158.98361206]
[236.89160156 161.45773315]
[226.85586548 148.48791504]
[212.79457092 143.26489258]
[194.15251160 148.02571106]
[181.27160645 132.65986633]
[166.92558289 128.27900696]
[152.57957458 123.89815521]
[138.23356628 119.51730347]
[131.91854858 128.70429993]
[123.45082855 135.95538330]
[113.40150452 140.78149414]
[102.44833374 142.85716248]
[100.67423248 157.75187683]
[98.90013885 172.64659119]
[97.12603760 187.54130554]
[95.35194397 202.43601990]
[93.57784271 217.33073425]
[105.54376984 227.06831360]
[110.32389832 241.73643494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[21 32]
[22 31]
[23 30]
[43 71]
[44 70]
[45 69]
[47 67]
[48 66]
[51 62]
[52 61]
[53 60]
[75 94]
[76 93]
[77 92]
[78 91]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
