%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGAAGGGGAGAGGAGGUUGUGUGGGACAAGGUGCUCCUGACAGAAGGAUGCCACAGCUGAGCCUGUCCUCGCUGGGCCUUUGGCCAAUGGCAGCAUCCCCGUGGCUGCUCCUGCUGCUGGUUGGGGCCUCCUGGCUCCUGGCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[93.45911407 146.70455933]
[83.23875427 157.68382263]
[68.74238586 161.53810120]
[54.41876984 157.08456421]
[44.66363907 145.68994141]
[42.47071457 130.85110474]
[48.51298141 117.12190247]
[60.93690491 108.71540070]
[46.03499985 107.00270844]
[31.13309860 105.29002380]
[16.23119736 103.57733154]
[1.32929468 101.86463928]
[-13.26406670 107.97564697]
[-25.02466393 98.83575439]
[-39.92656708 97.12306976]
[-54.82846832 95.41037750]
[-72.87525177 104.29642487]
[-87.96340942 92.26409149]
[-102.92366028 91.17277527]
[-117.88391113 90.08146667]
[-132.84416199 88.99015808]
[-147.80441284 87.89884949]
[-162.76464844 86.80753326]
[-177.72489929 85.71622467]
[-166.42465210 95.58052063]
[-160.88333130 109.51944733]
[-162.32662964 124.44985199]
[-170.43530273 137.06925964]
[-183.41578674 144.58638000]
[-198.39692688 145.33848572]
[-212.06501770 139.15922546]
[-221.39680481 127.41539001]
[-224.32820129 112.70461273]
[-220.21078491 98.28077698]
[-209.95530701 87.33430481]
[-195.82821655 82.28624725]
[-210.15081787 77.82943726]
[-224.51899719 73.52185059]
[-238.93121338 69.36396027]
[-253.34342957 65.20607758]
[-267.75564575 61.04818726]
[-281.46786499 68.90632629]
[-296.69833374 64.68628693]
[-304.41104126 50.89174271]
[-300.03021240 35.70675278]
[-286.15490723 28.14030457]
[-271.01708984 32.68143463]
[-263.59774780 46.63597107]
[-249.18554688 50.79385757]
[-234.77333069 54.95174789]
[-220.36111450 59.10963440]
[-213.01507568 57.93426132]
[-205.69400024 63.50683594]
[-191.37139893 67.96365356]
[-176.63359070 70.75597382]
[-161.67333984 71.84729004]
[-146.71308899 72.93859863]
[-131.75285339 74.02990723]
[-116.79260254 75.12122345]
[-101.83235168 76.21253204]
[-86.87210083 77.30384064]
[-79.70965576 69.90578461]
[-69.43501282 67.65839386]
[-59.42709732 71.55008698]
[-53.11577988 80.50847626]
[-38.21387863 82.22116089]
[-23.31197548 83.93385315]
[-9.78449726 77.70034790]
[3.04198432 86.96273804]
[17.94388580 88.67543030]
[32.84579086 90.38811493]
[47.74769211 92.10080719]
[62.64959335 93.81349945]
[77.64634705 94.12555695]
[92.60659790 93.03424072]
[99.83039093 89.33277893]
[107.88885498 92.07914734]
[122.86856842 91.29930115]
[137.84828186 90.51946259]
[152.82800293 89.73961639]
[167.80770874 88.95977020]
[176.31213379 76.11528015]
[190.58230591 70.80344391]
[205.07260132 74.86489868]
[214.28256226 86.54028320]
[229.26228333 85.76043701]
[244.24198914 84.98059082]
[259.22171021 84.20075226]
[274.20141602 83.42090607]
[280.03692627 80.09610748]
[285.79968262 80.24466705]
[289.81793213 82.93338776]
[304.81710815 82.77735138]
[313.43011475 79.54190826]
[320.12918091 82.77735138]
[335.12838745 82.93338776]
[342.50598145 74.83051300]
[352.92056274 72.21516418]
[362.83541870 75.72433472]
[369.02102661 83.95660400]
[384.00073242 84.73645020]
[398.98046875 85.51629639]
[413.96017456 86.29614258]
[428.93988037 87.07598877]
[446.39724731 77.08157349]
[462.20654297 88.14934540]
[477.20574951 88.30538177]
[492.20492554 88.46141815]
[506.08483887 80.86809540]
[518.73095703 88.73737335]
[533.73010254 88.89340973]
[547.74328613 80.37501526]
[561.99511719 88.48783875]
[561.82452393 104.88610077]
[547.40704346 112.70066833]
[533.57409668 103.89259338]
[518.57489014 103.73655701]
[505.76782227 111.34104919]
[492.04888916 103.46060944]
[477.04971313 103.30457306]
[462.05050659 103.14853668]
[455.36346436 110.97895050]
[445.24902344 113.86284637]
[435.01785278 110.60297394]
[428.16003418 102.05570221]
[413.18032837 101.27585602]
[398.20062256 100.49600983]
[383.22088623 99.71616364]
[368.24118042 98.93632507]
[351.77230835 108.99643707]
[334.97235107 97.93257904]
[319.97314453 97.77654266]
[304.97314453 97.77654266]
[289.97396851 97.93257904]
[274.98126221 98.40061951]
[260.00155640 99.18046570]
[245.02183533 99.96031189]
[230.04211426 100.74015045]
[215.06240845 101.51999664]
[207.11459351 114.08861542]
[193.12435913 119.63277435]
[178.37976074 115.83145142]
[168.58755493 103.93948364]
[153.60783386 104.71932983]
[138.62812805 105.49917603]
[123.64841461 106.27901459]
[108.66870117 107.05886078]
[93.69790649 107.99449158]
[78.73765564 109.08580017]
[90.80064392 118.00120544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[14 67]
[15 66]
[16 65]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[36 54]
[37 53]
[38 51]
[39 50]
[40 49]
[41 48]
[74 149]
[75 148]
[77 147]
[78 146]
[79 145]
[80 144]
[81 143]
[85 139]
[86 138]
[87 137]
[88 136]
[89 135]
[92 134]
[93 133]
[95 132]
[96 131]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[106 121]
[107 120]
[108 119]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
