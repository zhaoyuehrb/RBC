%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUUGAGCAGUGGAGCCUCCGGAGGGAAAGGAGUGGAUGCAAACCCGGUUGAGACAUACGACAGUGGGGAUGAAUGGGACAUUGGAGUAGGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[86.39517975 387.85812378]
[78.64363861 374.27694702]
[81.48625946 358.89990234]
[93.58084106 348.98754883]
[93.58084106 333.98754883]
[93.58084106 318.98754883]
[93.58084106 303.98754883]
[93.58084106 288.98754883]
[93.58084106 273.98754883]
[81.21537781 262.70770264]
[80.73898315 245.64160156]
[92.92527771 233.21029663]
[92.45877838 218.21755981]
[91.99227905 203.22480774]
[91.52577972 188.23207092]
[91.05928040 173.23933411]
[80.45735931 165.73725891]
[76.09946442 153.29490662]
[79.81201172 140.44120789]
[90.43910980 131.99491882]
[90.43910980 116.99492645]
[80.25281525 105.98404694]
[65.29814148 104.81878662]
[50.34347534 103.65353394]
[35.78871918 111.20939636]
[22.11528969 102.15570068]
[23.38923836 85.80611420]
[38.30003738 78.97968292]
[51.50873184 88.69886017]
[66.46340179 89.86412048]
[81.41807556 91.02937317]
[66.48343658 89.63059235]
[53.51305389 82.09606171]
[44.89957428 69.81567383]
[42.23192215 55.05478668]
[46.00220108 40.53635025]
[55.51490784 28.93857574]
[69.01523590 22.40089989]
[84.01277161 22.12933159]
[97.74093628 28.17396355]
[107.66728210 39.41974258]
[111.96070862 53.79216766]
[109.82920074 68.63994598]
[101.66813660 81.22197723]
[110.02591705 68.76615906]
[107.18242645 53.45105362]
[115.83584595 40.93814087]
[130.45397949 38.32169342]
[138.81176758 25.86587143]
[147.16954041 13.41005230]
[155.52732849 0.95423287]
[163.49369812 -11.75548744]
[171.06094360 -24.70681381]
[178.62818909 -37.65813828]
[186.19543457 -50.60946274]
[180.75332642 -65.26953125]
[186.05639648 -79.98046112]
[199.60070801 -87.79619598]
[214.99102783 -85.02639771]
[224.96054077 -72.97886658]
[224.80194092 -57.34209061]
[214.59010315 -45.49926758]
[199.14675903 -43.04222107]
[191.57951355 -30.09089661]
[184.01226807 -17.13957024]
[176.44502258 -4.18824482]
[176.82644653 0.73570251]
[173.99275208 5.92028236]
[167.98315430 9.31201744]
[159.62536621 21.76783752]
[151.26757812 34.22365570]
[142.90980530 46.67947769]
[146.03019714 61.19838333]
[137.73165894 73.94941711]
[122.48173523 77.12393951]
[114.12395477 89.57975769]
[117.39567566 97.16667175]
[116.83966064 105.44462585]
[112.54733276 112.58466339]
[105.43910980 116.99492645]
[105.43910980 131.99491882]
[118.00611877 144.04122925]
[118.06070709 161.11387634]
[106.05202484 172.77282715]
[106.51852417 187.76557922]
[106.98502350 202.75831604]
[107.45152283 217.75106812]
[107.91802216 232.74380493]
[118.80265808 240.85549927]
[122.91315460 253.58752441]
[118.94432068 266.15939331]
[108.58084106 273.98754883]
[108.58084106 288.98754883]
[108.58084106 303.98754883]
[108.58084106 318.98754883]
[108.58084106 333.98754883]
[108.58084106 348.98754883]
[120.67542267 358.89990234]
[123.51804352 374.27694702]
[115.76650238 387.85812378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 92]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[20 81]
[21 80]
[22 31]
[23 30]
[24 29]
[44 76]
[45 75]
[48 72]
[49 71]
[50 70]
[51 69]
[52 66]
[53 65]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
