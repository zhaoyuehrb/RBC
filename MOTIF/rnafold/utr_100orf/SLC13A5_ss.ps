%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCCCGGGGACUGUGGCCCCUUCUUAAGCCCGCGGCGCCUCUAGCUGCCCCUCACUCGUCUCGCCCGCCAGUCUCCCUCCCGCGCGAUGGCCUCGGCGCUGAGCUAUGUCUCCAAGUUCAAGUCCUUCGUGAUCUUGUUCGUCACCCCGCUCCUGCUGCUGCCACUCGUCAUUCUGAUGCCCGCCA\
) } def
/len { sequence length } bind def

/coor [
[-103.54975128 245.33979797]
[-111.02995300 241.08915710]
[-117.92531586 235.94696045]
[-124.13021851 229.99261475]
[-129.54965210 223.31791687]
[-134.10073853 216.02569580]
[-137.71397400 208.22825623]
[-140.33428955 200.04557800]
[-155.18481445 202.15785217]
[-170.03533936 204.27014160]
[-184.88587952 206.38243103]
[-199.73640442 208.49470520]
[-214.58694458 210.60699463]
[-229.43746948 212.71926880]
[-244.28799438 214.83155823]
[-259.55310059 227.97842407]
[-277.17245483 220.03974915]
[-291.94458008 222.64447021]
[-306.71667480 225.24919128]
[-307.06463623 240.29148865]
[-310.33963013 254.97215271]
[-316.41397095 268.72735596]
[-325.05245972 281.02920532]
[-335.92156982 291.40594482]
[-348.60226440 299.46011353]
[-362.60620117 304.88375854]
[-377.39443970 307.47018433]
[-392.39831543 307.12182617]
[-407.04122925 303.85391235]
[-420.76077271 297.79391479]
[-433.03042603 289.17642212]
[-443.37973022 278.33416748]
[-451.41220093 265.68518066]
[-456.82077026 251.71659851]
[-471.59289551 254.32131958]
[-486.36502075 256.92602539]
[-501.13714600 259.53076172]
[-515.90924072 262.13549805]
[-523.57080078 275.76757812]
[-538.22064209 281.23721313]
[-552.94152832 275.96179199]
[-560.78265381 262.43218994]
[-558.04180908 247.03668213]
[-546.01300049 237.04455566]
[-530.37597656 237.17379761]
[-518.51397705 247.36337280]
[-503.74185181 244.75865173]
[-488.96972656 242.15391541]
[-474.19763184 239.54919434]
[-459.42550659 236.94447327]
[-459.12063599 221.96846008]
[-455.89877319 207.33502197]
[-449.88189697 193.60697937]
[-441.29956055 181.31271362]
[-430.48004150 170.92581177]
[-417.83789062 162.84681702]
[-403.85803223 157.38783264]
[-389.07699585 154.76039124]
[-374.06262207 155.06733704]
[-359.39196777 158.29873657]
[-345.62927246 164.33221436]
[-333.30426025 172.93762207]
[-322.89172363 183.78575134]
[-314.79315186 196.46093750]
[-309.32141113 210.47708130]
[-294.54928589 207.87234497]
[-279.77716064 205.26762390]
[-274.67858887 196.38560486]
[-265.33209229 191.68670654]
[-254.72531128 192.94386292]
[-246.40028381 199.98103333]
[-231.54975891 197.86874390]
[-216.69921875 195.75645447]
[-201.84869385 193.64418030]
[-186.99816895 191.53189087]
[-172.14762878 189.41960144]
[-157.29710388 187.30732727]
[-142.44656372 185.19503784]
[-139.53009033 162.72319031]
[-129.51687622 142.37681580]
[-113.46677399 126.33363342]
[-93.08641815 116.31461334]
[-70.54774475 113.39935303]
[-48.25653076 117.90977478]
[-28.59560966 129.37460327]
[-13.67015171 146.57859802]
[-0.10199507 140.18289185]
[13.46616173 133.78717041]
[27.03431702 127.39146423]
[40.54885101 120.88320923]
[54.00882721 114.26285553]
[67.46880341 107.64250183]
[80.92877960 101.02215576]
[85.69976044 87.34063721]
[98.70166779 80.94558716]
[112.45086670 85.51786804]
[125.91084290 78.89752197]
[139.37081909 72.27716827]
[152.83079529 65.65681458]
[166.29077148 59.03646851]
[171.18762207 47.09062576]
[182.55010986 41.85794830]
[194.04873657 45.65203094]
[207.61689758 39.25631714]
[221.18505859 32.86060715]
[234.75320435 26.46489334]
[240.45756531 8.41450977]
[257.24789429 0.38529330]
[274.28524780 7.04440117]
[287.63333130 0.20124146]
[288.28387451 -16.31154633]
[297.11776733 -30.16669655]
[311.64721680 -37.63819885]
[327.86828613 -36.77346420]
[341.36419678 -27.90264511]
[354.59667969 -34.96672440]
[367.82919312 -42.03080368]
[381.06167603 -49.09488297]
[389.59191895 -62.41949844]
[404.46328735 -61.58767700]
[417.69577026 -68.65175629]
[430.92825317 -75.71583557]
[432.07159424 -91.10077667]
[441.36938477 -103.41151428]
[455.85476685 -108.71974945]
[470.90548706 -105.33163452]
[481.71893311 -94.32830048]
[484.84454346 -79.22088623]
[479.28497314 -64.83010101]
[466.81427002 -55.74799347]
[451.41174316 -54.87263489]
[437.99234009 -62.48334503]
[424.75985718 -55.41926575]
[411.52734375 -48.35518646]
[403.94357300 -35.53584290]
[388.12573242 -35.86239243]
[374.89324951 -28.79831314]
[361.66076660 -21.73423386]
[348.42828369 -14.67015553]
[348.87359619 -1.01018238]
[343.35977173 11.56776905]
[332.91195679 20.58295250]
[319.53448486 24.23052025]
[305.82638550 21.74264717]
[294.47647095 13.54931831]
[281.12841797 20.39247894]
[280.06170654 31.77372360]
[273.55902100 41.32062912]
[263.14477539 46.58919525]
[251.36138916 46.16325378]
[241.14892578 40.03305054]
[227.58076477 46.42876053]
[214.01260376 52.82447433]
[200.44445801 59.22018433]
[191.24182129 74.15323639]
[172.91113281 72.49644470]
[159.45115662 79.11679077]
[145.99118042 85.73714447]
[132.53120422 92.35749817]
[119.07122040 98.97784424]
[114.30023956 112.65936279]
[101.29833221 119.05441284]
[87.54913330 114.48213196]
[74.08915710 121.10247803]
[60.62917709 127.72283173]
[47.16920090 134.34318542]
[40.83495712 140.95147705]
[33.43003082 140.95962524]
[19.86187363 147.35533142]
[6.29371691 153.75103760]
[-7.27443933 160.14675903]
[-4.97902393 168.47648621]
[-3.73195148 177.02427673]
[-3.55190706 185.65875244]
[-4.44117975 194.24726868]
[-6.38563347 202.65792847]
[-9.35493279 210.76162720]
[-13.30301476 218.43405151]
[-18.16880608 225.55755615]
[-23.87716103 232.02296448]
[-30.34003258 237.73129272]
[-37.45782089 242.59518433]
[-45.12091446 246.54032898]
[-53.21137238 249.50654602]
[-61.60474396 251.44869995]
[-70.17198181 252.33743286]
[-78.78143311 252.15956116]
[-87.30083466 250.91830444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[15 71]
[17 67]
[18 66]
[19 65]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[86 171]
[87 170]
[88 169]
[89 168]
[90 166]
[91 165]
[92 164]
[93 163]
[96 160]
[97 159]
[98 158]
[99 157]
[100 156]
[103 154]
[104 153]
[105 152]
[106 151]
[109 146]
[110 145]
[115 139]
[116 138]
[117 137]
[118 136]
[120 134]
[121 133]
[122 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
