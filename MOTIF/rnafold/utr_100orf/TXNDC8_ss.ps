%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGAUACUGUAAUAAAUAGGAGACAGCUACAGUGAUCCAACUAAACCAACAGGGGAUUUUCAUCAGCACUUCCCUGGUGUAAUCAUGGUACAGAUUAUUAAAGACACGAAUGAAUUUAAAACAUUUUUGACAGCUGCCGGACACAAACUCGCAGUGGUUCAAUUUUCUUCGAAACGGUGUGGUC\
) } def
/len { sequence length } bind def

/coor [
[9.48021984 240.12857056]
[5.65446424 245.68742371]
[0.33292338 249.75244141]
[-5.93899155 251.94731140]
[-12.53079319 252.08532715]
[-18.79027557 250.18489075]
[-29.52827835 260.65844727]
[-40.26628113 271.13198853]
[-51.00428391 281.60556030]
[-61.65486908 292.16796875]
[-72.21730042 302.81857300]
[-82.77973938 313.46914673]
[-93.34217072 324.11975098]
[-103.90460205 334.77032471]
[-114.46704102 345.42089844]
[-107.98135376 359.12170410]
[-106.57584381 374.21475220]
[-110.42022705 388.87753296]
[-119.05027008 401.33938599]
[-131.42387390 410.09552002]
[-146.04682922 414.08859253]
[-161.15338135 412.83639526]
[-174.91932678 406.49017334]
[-185.68235779 395.81622314]
[-192.14277649 382.10351562]
[-193.52047729 367.00787354]
[-189.64907837 352.35223389]
[-180.99607849 339.90628052]
[-168.60636902 331.17297363]
[-153.97605896 327.20684814]
[-138.87184143 328.48687744]
[-125.11762238 334.85848999]
[-114.55519104 324.20788574]
[-103.99275970 313.55731201]
[-93.43032074 302.90670776]
[-82.86788940 292.25613403]
[-72.30545807 281.60556030]
[-69.82307434 274.62908936]
[-61.47783661 270.86755371]
[-50.73983383 260.39398193]
[-40.00183105 249.92044067]
[-29.26382637 239.44688416]
[-25.70182991 216.59303284]
[-2.61071491 210.61875916]
[7.03109932 199.12809753]
[16.67291260 187.63742065]
[26.31472778 176.14675903]
[28.56854439 161.42366028]
[43.36624146 155.82556152]
[53.00805283 144.33488464]
[62.64986801 132.84422302]
[52.67120743 115.28923798]
[50.49372864 95.21413422]
[56.47634506 75.92787933]
[44.59504700 66.77175140]
[32.71374512 57.61562347]
[20.83244324 48.45949554]
[8.95114136 39.30336761]
[-2.93016052 30.14723969]
[-14.81146145 20.99111176]
[-28.18985367 28.26699829]
[-43.37150574 29.46589851]
[-57.72610092 24.38009453]
[-68.76662445 13.89073181]
[-74.58023834 -0.18484269]
[-74.15969849 -15.40795135]
[-67.57785797 -29.14109802]
[-55.97507477 -39.00493240]
[-41.36159134 -43.29048538]
[-26.26928139 -41.25526047]
[-13.31298542 -33.25186920]
[-4.73745489 -20.66695213]
[-2.02845430 -5.68091822]
[-5.65533400 9.10980988]
[6.22596741 18.26593781]
[18.10726929 27.42206573]
[29.98856926 36.57819366]
[41.86987305 45.73432159]
[53.75117111 54.89044952]
[65.63247681 64.04657745]
[72.69357300 58.42916489]
[80.65334320 54.17988968]
[89.24983978 51.43860245]
[88.25324249 36.47174454]
[87.25664520 21.50488663]
[86.26004791 6.53803110]
[85.26345062 -8.42882538]
[84.26686096 -23.39568138]
[71.06379700 -31.54790497]
[65.20520782 -45.91650391]
[68.94384766 -60.97645569]
[80.84212494 -70.93690491]
[96.32491302 -71.96785736]
[109.43876648 -63.67288589]
[115.14113617 -49.24158096]
[111.23934174 -34.22306824]
[99.23371124 -24.39227867]
[100.23030853 -9.42542171]
[101.22690582 5.54143476]
[102.22350311 20.50829124]
[103.22010040 35.47514725]
[104.21669769 50.44200516]
[111.71543121 51.66239166]
[118.94080353 54.01063919]
[125.72423553 57.43194962]
[131.90745544 61.84649658]
[137.34617615 67.15127563]
[141.91349792 73.22250366]
[145.50285339 79.91853333]
[148.03050232 87.08312225]
[149.43746948 94.54910278]
[164.42451477 95.17224884]
[179.41157532 95.79540253]
[194.39862061 96.41855621]
[203.12193298 93.64438629]
[209.62899780 97.17867279]
[224.60360718 98.05084229]
[239.57823181 98.92301941]
[242.29502869 92.89773560]
[246.23037720 87.60675049]
[251.19624329 83.29181671]
[256.95770264 80.14831543]
[263.24404907 78.31642151]
[269.76150513 77.87487793]
[276.20700073 78.83757782]
[282.28219604 81.15330505]
[287.70733643 84.70835114]
[292.23410034 89.33209991]
[295.65701294 94.80522919]
[297.82272339 100.87007904]
[298.63687134 107.24280548]
[313.26077271 110.58061981]
[327.88470459 113.91843414]
[342.53585815 117.13459778]
[357.21322632 120.22887421]
[372.31268311 115.50476837]
[383.17010498 125.70110321]
[397.84750366 128.79539490]
[412.52487183 131.88966370]
[427.20223999 134.98394775]
[441.87963867 138.07823181]
[456.97906494 133.35412598]
[467.83651733 143.55046082]
[482.51388550 146.64474487]
[494.70800781 136.85507202]
[510.34069824 137.24565125]
[522.03070068 147.63206482]
[524.25836182 163.11016846]
[515.97186279 176.37167358]
[501.08377075 181.15489197]
[486.62384033 175.20135498]
[479.41961670 161.32212830]
[464.74224854 158.22784424]
[450.69259644 163.17327881]
[438.78533936 152.75561523]
[424.10797119 149.66133118]
[409.43060303 146.56704712]
[394.75320435 143.47276306]
[380.07583618 140.37847900]
[366.02621460 145.32391357]
[354.11895752 134.90625000]
[339.44155884 131.81196594]
[332.23437500 133.51174927]
[324.54687500 128.54235840]
[309.92297363 125.20453644]
[295.29904175 121.86672974]
[276.81326294 137.16406250]
[252.78611755 133.93699646]
[238.70606995 113.89764404]
[223.73144531 113.02546692]
[208.75682068 112.15329742]
[193.77546692 111.40560913]
[178.78842163 110.78245544]
[163.80136108 110.15930176]
[148.81431580 109.53614807]
[141.66163635 127.16768646]
[128.41188049 140.82328796]
[111.00409698 148.50448608]
[91.98589325 149.08715820]
[74.14053345 142.48603821]
[64.49871826 153.97669983]
[54.85690689 165.46737671]
[51.91344452 181.01235962]
[37.80539322 185.78857422]
[28.16357994 197.27923584]
[18.52176666 208.76991272]
[8.87995148 220.26057434]
[11.20981216 226.75852966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 42]
[7 41]
[8 40]
[9 39]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[44 187]
[45 186]
[46 185]
[47 184]
[49 182]
[50 181]
[51 180]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[111 175]
[112 174]
[113 173]
[114 172]
[116 171]
[117 170]
[118 169]
[131 166]
[132 165]
[133 164]
[134 162]
[135 161]
[137 159]
[138 158]
[139 157]
[140 156]
[141 155]
[143 153]
[144 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
