%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUAGGUAGAUCGCCGGGGGCUGACGAGUGCACCAUGGCCACCGCGGCAACCUCACCCGCGCUGAAGCGGCUGGAUCUGCGCGACCCUGCGGCUCUUUUCGAGACGCAUGGAGCGGAGGAGAUCCGCGGGCUGG\
) } def
/len { sequence length } bind def

/coor [
[205.23774719 157.61784363]
[204.62300110 146.02139282]
[190.81468201 140.16218567]
[177.00636292 134.30297852]
[163.19804382 128.44377136]
[149.38972473 122.58456421]
[135.58140564 116.72535706]
[121.77309418 110.86614227]
[107.96477509 105.00693512]
[108.51970673 110.48335266]
[106.12548065 116.50995636]
[100.61037445 121.70200348]
[92.39588928 124.66600037]
[82.46934509 124.23695374]
[72.26686096 119.69216919]
[57.31514740 120.89477539]
[42.36343384 122.09737396]
[27.41171837 123.29998016]
[12.47477627 124.67393494]
[-2.44543147 126.21904755]
[-17.34694290 127.93513489]
[-32.22779846 129.82196045]
[-47.10865784 131.70878601]
[-61.98951340 133.59561157]
[-65.96013641 148.26879883]
[-75.24766541 160.30252075]
[-88.43580627 167.86169434]
[-103.51347351 169.79364014]
[-118.18143463 165.80371094]
[-130.20292664 156.50036621]
[-137.74475098 143.30229187]
[-139.65684509 128.22209167]
[-135.64762878 113.55939484]
[-126.32848358 101.55015564]
[-113.12049866 94.02569580]
[-98.03779602 92.13343811]
[-83.38038635 96.16193390]
[-71.38341522 105.49687958]
[-63.87633514 118.71475220]
[-48.99547958 116.82792664]
[-34.11462402 114.94110107]
[-19.23376656 113.05427551]
[-12.93848991 109.05712128]
[-3.99055099 111.29884338]
[10.92965698 109.75372314]
[17.31493187 105.90196228]
[26.20911598 108.34826660]
[41.16083145 107.14566040]
[56.11254501 105.94306183]
[71.06425476 104.74045563]
[75.75961304 98.89207458]
[64.06298828 89.50117493]
[73.45406342 77.80469513]
[85.15032959 87.19529724]
[89.84568787 81.34691620]
[87.78837585 66.48867035]
[85.73105621 51.63042450]
[76.17412567 39.02186966]
[82.09270477 25.35367012]
[80.03539276 10.49542522]
[77.97807312 -4.36282015]
[75.92076111 -19.22106552]
[63.16865158 -28.55697632]
[60.83563232 -44.18811798]
[70.30584717 -56.84080887]
[85.96077728 -59.00843430]
[98.51263428 -49.40498352]
[100.51463318 -33.72800446]
[90.77900696 -21.27837944]
[92.83631897 -6.42013454]
[94.89363861 8.43811131]
[96.95095062 23.29635620]
[106.36073303 34.84214783]
[100.58930206 49.57310867]
[102.64662170 64.43135071]
[104.70393372 79.28959656]
[113.82398224 91.19861603]
[127.63230133 97.05782318]
[141.44061279 102.91703033]
[155.24893188 108.77624512]
[169.05725098 114.63545227]
[182.86557007 120.49465942]
[196.67388916 126.35386658]
[210.48220825 132.21307373]
[226.33641052 121.65973663]
[245.20587158 122.68006897]
[259.60174561 134.69131470]
[263.91702271 152.78405762]
[278.09542847 157.68022156]
[292.27383423 162.57638550]
[306.45227051 167.47256470]
[320.63067627 172.36872864]
[334.80911255 177.26489258]
[348.98751831 182.16105652]
[364.55737305 179.35208130]
[374.06198120 190.81991577]
[388.24041748 195.71607971]
[402.41882324 200.61225891]
[416.59725952 205.50842285]
[430.77566528 210.40458679]
[444.95407104 215.30076599]
[459.13250732 220.19692993]
[463.55670166 219.15907288]
[467.65023804 219.59437561]
[470.97689819 221.20455933]
[473.24847412 223.57713318]
[474.34963989 226.24604797]
[488.01998901 232.42033386]
[501.69033813 238.59461975]
[517.14605713 234.29344177]
[530.06036377 243.81185913]
[530.52655029 259.84814453]
[518.18688965 270.10061646]
[502.50744629 266.70449829]
[495.51605225 252.26496887]
[481.84570312 246.09068298]
[468.17538452 239.91639709]
[454.23632812 234.37535095]
[440.05792236 229.47917175]
[425.87948608 224.58300781]
[411.70108032 219.68684387]
[397.52267456 214.79066467]
[383.34423828 209.89450073]
[369.16583252 204.99833679]
[354.61010742 208.15751648]
[344.09133911 196.33947754]
[329.91293335 191.44331360]
[315.73449707 186.54714966]
[301.55609131 181.65097046]
[287.37768555 176.75480652]
[273.19924927 171.85864258]
[259.02084351 166.96246338]
[251.13703918 175.06208801]
[240.73608398 179.61705017]
[229.33387756 179.92102051]
[218.60835266 175.89041138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 84]
[3 83]
[4 82]
[5 81]
[6 80]
[7 79]
[8 78]
[9 77]
[15 50]
[16 49]
[17 48]
[18 47]
[19 45]
[20 44]
[21 42]
[22 41]
[23 40]
[24 39]
[55 76]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
[88 132]
[89 131]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[96 124]
[97 123]
[98 122]
[99 121]
[100 120]
[101 119]
[102 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
