%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGAGAGAGGGCGUGCGUCUCUGUGGUUAUAAAGUUGGGGGUGGAGUGGCCGGGAGAUGAUGGCUGAUGAAGAGGAAGAAGUCAAGCCGAUCUUGCAGAAAUUGCAGGAACUCGUGGAUCAGCUCUACUCAUUUCGAGACUGCUAUUUCGAGACAC\
) } def
/len { sequence length } bind def

/coor [
[-1.52366328 687.36297607]
[-3.85423446 702.28759766]
[-10.29640770 715.95050049]
[-20.32794571 727.24407959]
[-33.13563538 735.25286865]
[-47.68121719 739.32751465]
[-62.78554535 739.13775635]
[-77.22417450 734.69897461]
[-89.82663727 726.37103271]
[-99.57130432 714.82904053]
[-105.66822052 701.00860596]
[-107.62313080 686.03009033]
[-105.27757263 671.10778809]
[-98.82167053 657.45135498]
[-88.77879333 646.16790771]
[-75.96306610 638.17199707]
[-61.41339874 634.11199951]
[-46.30926895 634.31689453]
[-41.90151596 619.97912598]
[-37.49376297 605.64135742]
[-33.08600616 591.30358887]
[-28.67825317 576.96582031]
[-34.41202927 558.53265381]
[-19.56358910 544.95172119]
[-15.72934055 530.45001221]
[-11.89509106 515.94836426]
[-8.06084156 501.44668579]
[-4.22659206 486.94500732]
[-17.37825394 479.79504395]
[-28.44309425 469.69903564]
[-36.77500534 457.24066162]
[-41.88605499 443.14169312]
[-43.47505951 428.22018433]
[-41.44534302 413.34307861]
[-35.91057968 399.37570190]
[-27.18846893 387.13159180]
[-15.78246975 377.32501221]
[-2.35277033 370.52923584]
[12.32194233 367.14321899]
[27.38962555 367.36801147]
[31.22387505 352.86633301]
[35.05812454 338.36465454]
[38.89237595 323.86297607]
[42.72662354 309.36132812]
[46.56087494 294.85964966]
[50.39512253 280.35797119]
[54.22937393 265.85629272]
[57.91926193 251.31721497]
[61.46442795 236.74217224]
[65.00959778 222.16714478]
[68.40969086 207.55757141]
[71.66436768 192.91493225]
[74.91905212 178.27227783]
[70.12763214 164.16938782]
[80.67494202 152.37681580]
[83.92962646 137.73417664]
[87.18431091 123.09152985]
[79.67974854 116.86855316]
[74.94425201 108.34687805]
[73.62313843 98.68775940]
[75.89643097 89.20745850]
[81.45435333 81.19787598]
[89.53951263 75.75048828]
[87.75424194 60.85710526]
[85.96897125 45.96372223]
[84.18369293 31.07034111]
[82.25045013 16.19544411]
[80.16941071 1.34050274]
[78.08837891 -13.51443958]
[63.53539276 -18.11588478]
[52.42598343 -28.58220100]
[46.96593094 -42.83528900]
[48.23933792 -58.04519653]
[55.99336243 -71.19197845]
[68.68843842 -79.66532898]
[83.80395508 -81.78286743]
[98.33870697 -77.12414551]
[109.40682220 -66.61416626]
[114.81069946 -52.33968353]
[113.47740936 -37.13491058]
[105.67166901 -24.01876831]
[92.94332123 -15.59547234]
[95.02435303 -0.74053019]
[97.10539246 14.11441135]
[101.17001343 20.33623886]
[99.07707977 29.28506851]
[100.86235046 44.17845154]
[102.64762115 59.07183075]
[104.43289185 73.96520996]
[108.00800323 74.83390045]
[111.42768860 76.19099426]
[114.62559509 78.01016998]
[126.13753510 68.39376068]
[137.64947510 58.77735901]
[149.16140747 49.16095352]
[160.67335510 39.54454803]
[172.18528748 29.92814445]
[183.69723511 20.31174088]
[186.55712891 4.52565336]
[200.75006104 -2.95368242]
[215.38841248 3.61123919]
[219.24290466 19.18437195]
[209.35668945 31.81934166]
[193.31364441 31.82368088]
[181.80169678 41.44008636]
[170.28976440 51.05648804]
[158.77781677 60.67289352]
[147.26588440 70.28929901]
[135.75393677 79.90570068]
[124.24199677 89.52210999]
[122.55883789 113.73169708]
[101.82695770 126.34621429]
[98.57227325 140.98886108]
[95.31758881 155.63150024]
[99.87621307 170.78173828]
[89.56169891 181.52696228]
[86.30701447 196.16961670]
[83.05233002 210.81225586]
[84.24673462 219.92463684]
[79.58463287 225.71231079]
[76.03946686 240.28733826]
[72.49430084 254.86238098]
[73.50729370 263.99670410]
[68.73104858 269.69055176]
[64.89679718 284.19223022]
[61.06254578 298.69387817]
[57.22829819 313.19555664]
[53.39404678 327.69723511]
[49.55979919 342.19891357]
[45.72554779 356.70059204]
[41.89130020 371.20227051]
[55.10103989 378.45404053]
[66.18453217 388.65054321]
[74.50044250 401.19583130]
[79.56900024 415.35833740]
[81.09967041 430.31326294]
[79.00779724 445.19094849]
[73.41926575 459.12710571]
[64.66297913 471.31329346]
[53.25143051 481.04367065]
[39.85079193 487.75595093]
[25.24195862 491.06384277]
[10.27508163 490.77926636]
[6.44083166 505.28094482]
[2.60658240 519.78259277]
[-1.22766721 534.28430176]
[-5.06191683 548.78594971]
[0.97523052 557.91613770]
[0.95995581 568.64154053]
[-4.85940170 577.38757324]
[-14.34048176 581.37359619]
[-18.74823570 595.71136475]
[-23.15599060 610.04913330]
[-27.56374359 624.38690186]
[-31.97149849 638.72467041]
[-19.36067581 647.03991699]
[-9.60441971 658.57214355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 155]
[19 154]
[20 153]
[21 152]
[22 151]
[24 147]
[25 146]
[26 145]
[27 144]
[28 143]
[40 131]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
[46 125]
[47 124]
[48 122]
[49 121]
[50 120]
[51 118]
[52 117]
[53 116]
[55 114]
[56 113]
[57 112]
[63 89]
[64 88]
[65 87]
[66 86]
[67 84]
[68 83]
[69 82]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
