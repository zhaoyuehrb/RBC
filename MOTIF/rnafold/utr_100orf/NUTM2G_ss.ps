%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGUGCCCAGCCUGAGGGGAUGGCUUCAAAUGGAGCAUACCCAGUGCUGGGACCCGGCGUGACCGUGAACCCUGGCACCUCCCUGUCUGUGUUCACGGCUCUGCCCUUUGCCACACCCU\
) } def
/len { sequence length } bind def

/coor [
[62.77271652 156.65432739]
[64.02341461 141.70655823]
[69.52618408 127.75236511]
[78.81469727 115.97427368]
[91.10531616 107.36864471]
[76.11028290 107.75485992]
[67.49424744 111.13706970]
[60.72531128 107.95295715]
[45.72531128 107.95295715]
[30.72531128 107.95295715]
[15.72531128 107.95295715]
[0.72531080 107.95295715]
[-14.27468872 107.95295715]
[-29.27344513 108.14608765]
[-44.26847458 108.53230286]
[-59.26350021 108.91852570]
[-67.87953949 112.30072784]
[-74.64847565 109.11662292]
[-89.64847565 109.11662292]
[-95.67597961 120.22224426]
[-105.82324982 127.62955475]
[-118.09475708 129.95892334]
[-130.10997009 126.82184601]
[-139.56517029 118.88414764]
[-144.67514038 107.72583008]
[-159.65524292 106.95364380]
[-174.63536072 106.18146515]
[-189.61546326 105.40928650]
[-204.59558105 104.63710022]
[-218.94691467 112.57254028]
[-232.85336304 103.88099670]
[-232.00915527 87.50359344]
[-217.28274536 80.28799438]
[-203.82339478 89.65699005]
[-188.84329224 90.42917633]
[-173.86317444 91.20135498]
[-158.88305664 91.97353363]
[-143.90295410 92.74571991]
[-133.55384827 78.55277252]
[-116.63494110 73.28133392]
[-99.76180267 79.18704987]
[-89.64847565 94.11662292]
[-74.64847565 94.11662292]
[-59.64971924 93.92350006]
[-44.65468979 93.53727722]
[-29.65966415 93.15106201]
[-22.97495651 89.79372406]
[-14.27468872 92.95295715]
[0.72531080 92.95295715]
[15.72531128 92.95295715]
[30.72531128 92.95295715]
[45.72531128 92.95295715]
[60.72531128 92.95295715]
[75.72406769 92.75983429]
[90.71909332 92.37361908]
[94.92172241 88.72348785]
[100.46642303 87.28643036]
[106.22900391 88.50184631]
[119.64630890 81.79544067]
[133.06361389 75.08903503]
[146.48092651 68.38262939]
[152.85072327 61.66689301]
[160.33114624 61.68129730]
[173.91668701 55.32258224]
[187.41921997 48.78947830]
[200.83653259 42.08307266]
[214.25382996 35.37666321]
[227.67114258 28.67025757]
[241.08845520 21.96385002]
[254.50575256 15.25744343]
[267.92306519 8.55103683]
[281.34036255 1.84463012]
[283.99725342 -13.32926655]
[294.95150757 -23.90553474]
[309.85671997 -25.97902107]
[322.96780396 -18.96212578]
[336.38513184 -25.66853333]
[349.80242920 -32.37493896]
[363.21972656 -39.08134842]
[367.98110962 -54.15134430]
[382.04235840 -61.36641312]
[397.06115723 -56.44597626]
[404.12716675 -42.30924225]
[399.04821777 -27.34328842]
[384.83755493 -20.42714500]
[369.92614746 -25.66403961]
[356.50885010 -18.95763397]
[343.09152222 -12.25122643]
[329.67422485 -5.54481983]
[327.41714478 9.15360069]
[316.81237793 19.83081818]
[301.77816772 22.24444389]
[288.04678345 15.26193619]
[274.62945557 21.96834373]
[261.21215820 28.67474937]
[247.79486084 35.38115692]
[234.37754822 42.08756256]
[220.96025085 48.79397202]
[207.54293823 55.50037766]
[194.12562561 62.20678329]
[189.49450684 68.08127594]
[180.27540588 68.90811157]
[166.68986511 75.26683044]
[153.18733215 81.79993439]
[139.77001953 88.50634003]
[126.35271454 95.21274567]
[112.93540955 101.91915131]
[127.82474518 103.73782349]
[141.55941772 109.76766968]
[152.97547913 119.49770355]
[161.10549927 132.10336304]
[165.26052856 146.51640320]
[165.08842468 161.51541138]
[160.60380554 175.82933044]
[152.18669128 188.24513245]
[140.55038452 197.71067810]
[126.68099213 203.42381287]
[111.75384521 204.90037537]
[97.03392792 202.01525879]
[83.76864624 195.01293945]
[73.08216095 184.48683167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 46]
[15 45]
[16 44]
[18 43]
[19 42]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[58 107]
[59 106]
[60 105]
[61 104]
[63 103]
[64 102]
[65 100]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[76 89]
[77 88]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
