%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCACAGCCGGCGGCCGCGCCCCGCCGCCACCAUGAGGGCCGAGGGCCUCGGCGGCCUGGAGCGCUUCUGCAGCCCGGGCAAAGGCCGGGGGCUGCGGGCUCUGCAGCCCUUCCAGGUGGGGGACUUGCUGU\
) } def
/len { sequence length } bind def

/coor [
[121.53690338 211.67666626]
[106.51950073 217.32087708]
[92.81787872 208.97550964]
[90.94275665 193.04240417]
[102.33256531 181.74409485]
[103.73719025 166.81001282]
[105.14180756 151.87591553]
[106.54643250 136.94183350]
[107.95105743 122.00773621]
[94.49148560 115.38655090]
[83.51851654 125.61367035]
[72.54554749 135.84078979]
[68.34916687 144.06195068]
[61.19340515 146.17530823]
[49.98369980 156.14237976]
[38.77399445 166.10945129]
[30.95481682 181.15261841]
[14.33498096 177.80337524]
[12.95250320 160.90588379]
[28.80692291 154.89974976]
[40.01662827 144.93267822]
[51.22633362 134.96560669]
[62.31843185 124.86782074]
[73.29140472 114.64070129]
[84.26437378 104.41358185]
[92.70725250 92.01528931]
[98.20295715 78.05830383]
[96.05976868 62.38293457]
[107.92208099 53.37544250]
[113.41777802 39.41846085]
[118.91348267 25.46148300]
[124.40917969 11.50450325]
[129.90487671 -2.45247650]
[123.84683228 -16.80300903]
[129.61907959 -30.87908363]
[143.33744812 -36.56607056]
[148.83314514 -50.52304840]
[154.32885742 -64.48002625]
[159.82455444 -78.43700409]
[155.65995789 -92.84728241]
[143.56617737 -101.72087097]
[131.47239685 -110.59445190]
[119.37860870 -119.46803284]
[107.28482819 -128.34161377]
[95.19104767 -137.21519470]
[78.84387207 -141.71031189]
[78.63796997 -158.66300964]
[94.87114716 -163.55384827]
[104.06463623 -149.30897522]
[116.15841675 -140.43539429]
[128.25219727 -131.56181335]
[140.34597778 -122.68823242]
[152.43975830 -113.81465149]
[164.53353882 -104.94106293]
[179.45013428 -106.52065277]
[189.41720581 -117.73035431]
[199.38427734 -128.94006348]
[202.79237366 -137.51805115]
[209.71879578 -140.29220581]
[219.94592285 -151.26516724]
[223.69490051 -166.63578796]
[238.03253174 -170.67083740]
[248.25965881 -181.64379883]
[252.00863647 -197.01440430]
[266.34628296 -201.04945374]
[276.57339478 -212.02243042]
[278.47061157 -218.51409912]
[282.75683594 -222.42349243]
[287.54635620 -223.25572205]
[298.27658081 -233.73725891]
[309.00677490 -244.21879578]
[319.73696899 -254.70034790]
[330.46719360 -265.18188477]
[341.19738770 -275.66342163]
[351.92758179 -286.14495850]
[362.65780640 -296.62649536]
[373.38800049 -307.10806274]
[377.89987183 -324.91616821]
[394.99789429 -328.68759155]
[405.47943115 -339.41781616]
[415.96099854 -350.14801025]
[419.49295044 -366.16229248]
[435.20724487 -370.85202026]
[446.93832397 -359.39279175]
[442.61828613 -343.57287598]
[426.69119263 -339.66647339]
[416.20965576 -328.93624878]
[405.72811890 -318.20605469]
[405.53900146 -306.05249023]
[396.81268311 -297.02291870]
[383.86953735 -296.37783813]
[373.13934326 -285.89630127]
[362.40911865 -275.41476440]
[351.67892456 -264.93322754]
[340.94873047 -254.45167542]
[330.21850586 -243.97013855]
[319.48831177 -233.48860168]
[308.75811768 -223.00704956]
[298.02789307 -212.52551270]
[287.54635620 -201.79530334]
[277.31924438 -190.82234192]
[274.30175781 -176.23658752]
[259.23263550 -171.41668701]
[249.00550842 -160.44371033]
[245.98803711 -145.85795593]
[230.91888428 -141.03805542]
[220.69177246 -130.06509399]
[210.59397888 -118.97298431]
[200.62690735 -107.76328278]
[190.65983582 -96.55358124]
[173.78152466 -72.94130707]
[168.28582764 -58.98432922]
[162.79013062 -45.02734756]
[157.29443359 -31.07036781]
[163.45242310 -17.55686569]
[158.07781982 -3.32421541]
[143.86186218 3.04322410]
[138.36616516 17.00020409]
[132.87045288 30.95718384]
[127.37475586 44.91416168]
[121.87905884 58.87114334]
[124.41532898 73.54821777]
[112.15993500 83.55400848]
[106.66423035 97.51098633]
[112.14102936 98.45469666]
[117.26982117 101.80688477]
[121.23833466 107.39573669]
[123.30882263 114.80702972]
[122.88514709 123.41236115]
[121.48052216 138.34645081]
[120.07589722 153.28054810]
[118.67127991 168.21463013]
[117.26665497 183.14872742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 133]
[6 132]
[7 131]
[8 130]
[9 129]
[10 25]
[11 24]
[12 23]
[14 22]
[15 21]
[16 20]
[26 124]
[27 123]
[29 121]
[30 120]
[31 119]
[32 118]
[33 117]
[36 114]
[37 113]
[38 112]
[39 111]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[55 110]
[56 109]
[57 108]
[59 107]
[60 106]
[62 104]
[63 103]
[65 101]
[66 100]
[69 99]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
[77 91]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
