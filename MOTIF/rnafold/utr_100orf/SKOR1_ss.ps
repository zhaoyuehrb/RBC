%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUCCCAAAGAGCCUGGUCCAGGCAGCGGAAACCCAGAGGGGUCUCUGCGAGCCAGGAGGGAAAGGAAGAGAGGGGAGAAGUGGAGGAAAAGGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[199.36035156 360.80447388]
[201.53353882 345.89727783]
[206.96990967 331.84756470]
[215.39674377 319.36013794]
[226.39137268 309.06130981]
[218.82414246 296.10998535]
[211.25689697 283.15866089]
[203.68965149 270.20733643]
[188.10804749 272.60595703]
[172.75315857 268.86746216]
[159.95626831 259.52935791]
[151.67172241 245.98159790]
[149.17852783 230.25971985]
[152.88294983 214.73905945]
[162.25270081 201.77581787]
[154.28633118 189.06608582]
[146.31996155 176.35636902]
[127.18884277 173.62266541]
[115.83506012 157.61756897]
[119.69238281 138.07354736]
[110.57639313 126.16143036]
[101.46040344 114.24930573]
[88.62475586 108.70513153]
[86.62747192 94.86669159]
[77.51148224 82.95456696]
[68.39549255 71.04244232]
[51.28246689 64.47042084]
[49.50259399 47.08843613]
[40.02054977 35.46557999]
[30.53850174 23.84272194]
[21.05645561 12.21986580]
[11.57440948 0.59700906]
[-3.14448428 -5.20512295]
[-5.19455433 -19.95796967]
[-14.67660046 -31.58082581]
[-24.15864754 -43.20368195]
[-33.64069366 -54.82653809]
[-49.15556717 -60.13885498]
[-52.04645538 -76.28118134]
[-39.33946228 -86.64768219]
[-24.10644913 -80.57418823]
[-22.01783752 -64.30858612]
[-12.53579044 -52.68572998]
[-3.05374408 -41.06287384]
[6.42830229 -29.44001579]
[20.46897697 -24.46922874]
[23.19726562 -8.88503742]
[32.67931366 2.73781919]
[42.16135788 14.36067581]
[51.64340591 25.98353195]
[61.12545013 37.60638809]
[73.23038483 39.18390656]
[81.21518707 48.94441605]
[80.30761719 61.92644882]
[89.42360687 73.83856964]
[98.53959656 85.75069427]
[111.37524414 91.29486847]
[113.37252808 105.13330841]
[122.48851776 117.04543304]
[131.60450745 128.95756531]
[142.50497437 127.66043091]
[152.85232544 131.07321167]
[160.72319031 138.48869324]
[164.68550110 148.46261597]
[164.05870056 159.09455872]
[159.02967834 168.38999939]
[166.99604797 181.09973145]
[174.96241760 193.80944824]
[189.02287292 191.02444458]
[203.15531921 193.23056030]
[215.64546204 200.13934326]
[224.98539734 210.89314270]
[230.05564880 224.17156982]
[230.25927734 238.35360718]
[225.59217834 251.71545410]
[216.64097595 262.64010620]
[224.20822144 275.59143066]
[231.77546692 288.54275513]
[239.34271240 301.49407959]
[253.71295166 296.97262573]
[268.72906494 295.76272583]
[283.63787842 297.92507935]
[297.69149780 303.35122681]
[310.18505859 311.76898193]
[320.49188232 322.75613403]
[328.09494019 335.76156616]
[332.61291504 350.13290405]
[333.81918335 365.14932251]
[331.65319824 380.05758667]
[326.22366333 394.10989380]
[317.80285645 406.60140991]
[306.81323242 416.90557861]
[293.80596924 424.50549316]
[279.43353271 429.01998901]
[264.41680908 430.22259521]
[249.50907898 428.05300903]
[235.45806885 422.62005615]
[222.96859741 414.19625854]
[212.66711426 403.20410156]
[205.07034302 390.19500732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 79]
[6 78]
[7 77]
[8 76]
[15 68]
[16 67]
[17 66]
[20 60]
[21 59]
[22 58]
[24 56]
[25 55]
[26 54]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
