%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGACGCCAAGAUGGCGACGAGUCAGUAUUUCGACUUCGCGCAGGGCGGCGGCCCGCAGUACAGCGCCCAGCCUCCGACCCUUCCCCUGCCCACUGUGGGGGCCAGCUAUA\
) } def
/len { sequence length } bind def

/coor [
[87.27316284 213.55718994]
[82.70159149 199.27081299]
[84.29190826 184.35534668]
[91.77326202 171.35368347]
[94.27019501 156.56297302]
[96.76713562 141.77226257]
[87.48481750 153.55523682]
[78.20250702 165.33821106]
[68.92018890 177.12120056]
[59.63787460 188.90417480]
[54.58588028 205.08792114]
[37.63606644 204.71347046]
[33.30371094 188.32240295]
[47.85489273 179.62185669]
[57.13720703 167.83888245]
[66.41952515 156.05590820]
[75.70183563 144.27291870]
[84.98415375 132.48994446]
[74.24449921 119.62842560]
[71.41854095 104.74568939]
[56.48949814 103.28839874]
[41.56045532 101.83111572]
[26.61259842 100.58148956]
[11.64881516 99.53976440]
[-3.31496811 98.49803925]
[-13.18191719 110.47396851]
[-28.21212578 114.33045197]
[-42.62617111 108.58459473]
[-50.88155746 95.44578552]
[-49.80392456 79.96617889]
[-39.80764008 68.09799194]
[-24.73648071 64.40477753]
[-10.38561440 70.30667114]
[-2.27324343 83.53425598]
[12.69054031 84.57598114]
[27.65432358 85.61770630]
[34.64375305 82.90474701]
[43.01774216 86.90206909]
[57.94678497 88.35935974]
[72.87583160 89.81665039]
[77.72709656 81.47058868]
[85.05107880 75.18164062]
[94.03466797 71.64799500]
[103.68052673 71.26195526]
[109.37258148 57.38389969]
[115.06464386 43.50584030]
[120.75669861 29.62778282]
[126.25529480 15.67194462]
[131.55937195 1.64102149]
[136.86343384 -12.38990211]
[134.50581360 -28.03446007]
[146.24366760 -37.20353699]
[151.54774475 -51.23445892]
[156.85182190 -65.26538086]
[151.90483093 -86.01805115]
[168.01879883 -98.78718567]
[172.13554382 -113.21120453]
[176.25227356 -127.63523102]
[168.35504150 -141.32498169]
[172.53160095 -156.56741333]
[186.30407715 -164.31947327]
[201.50151062 -159.98199463]
[209.10751343 -146.12832642]
[204.60960388 -130.97761536]
[190.67630005 -123.51848602]
[186.55955505 -109.09446716]
[182.44282532 -94.67044067]
[188.10287476 -87.51380920]
[189.77844238 -78.40326691]
[186.95159912 -69.43593597]
[180.15628052 -62.73812103]
[170.88273621 -59.96131134]
[165.57867432 -45.93038940]
[160.27459717 -31.89946365]
[163.01159668 -17.25849152]
[150.89436340 -7.08582878]
[145.59028625 6.94509459]
[140.28622437 20.97601700]
[140.87290955 28.45051193]
[134.63475037 35.31983948]
[128.94270325 49.19789886]
[123.25064087 63.07595444]
[117.55858612 76.95401764]
[132.26400757 97.23335266]
[126.22169495 124.36174774]
[139.28102112 131.74104309]
[152.34034729 139.12033081]
[165.39967346 146.49963379]
[178.45899963 153.87892151]
[191.51832581 161.25822449]
[204.57765198 168.63751221]
[220.35769653 165.74449158]
[232.36315918 176.38632202]
[231.38447571 192.39949036]
[218.17239380 201.50007629]
[202.86210632 196.70689392]
[197.19834900 181.69683838]
[184.13902283 174.31755066]
[171.07969666 166.93824768]
[158.02037048 159.55895996]
[144.96104431 152.17965698]
[131.90171814 144.80036926]
[118.84239960 137.42108154]
[126.76521301 150.15798950]
[134.68803406 162.89489746]
[146.54324341 172.08477783]
[153.67475891 185.28105164]
[154.86657715 200.23362732]
[149.91549683 214.39295959]
[139.66571045 225.34475708]
[125.86489105 231.22161865]
[110.86622620 231.02151489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[20 40]
[21 39]
[22 38]
[23 36]
[24 35]
[25 34]
[44 83]
[45 82]
[46 81]
[47 80]
[48 78]
[49 77]
[50 76]
[52 74]
[53 73]
[54 72]
[56 67]
[57 66]
[58 65]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
