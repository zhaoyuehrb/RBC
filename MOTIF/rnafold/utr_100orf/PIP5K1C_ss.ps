%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUUGGCCGGCGGCGCUUGUUGUUCGGCGGCGGCGGUCGCAGCUCGGGUCCCCCUCGGGCGCCCCCGCCGCCGUCCGCGCGCGGCCAUGGAGCUGGAGGUACCGGACGAGGCGGAGAGCGCUGAGGCGGGGGCCGUGCCCUCGGAGGCGGCGUGGGCGGCAGAGAGCGGGGCGGCGGCAGGUUUGG\
) } def
/len { sequence length } bind def

/coor [
[3.74881124 403.03335571]
[-10.93728828 406.08596802]
[-25.79258156 404.00744629]
[-39.07686615 397.04125977]
[-49.23397064 386.00344849]
[-55.07406235 372.18704224]
[-55.91300964 357.21051025]
[-51.65344620 342.83013916]
[-62.51982117 353.17044067]
[-73.38619995 363.51074219]
[-84.25257874 373.85104370]
[-95.11895752 384.19134521]
[-99.78241730 399.30963135]
[-114.33610535 402.47811890]
[-125.20248413 412.81842041]
[-129.86593628 427.93670654]
[-144.41963196 431.10519409]
[-155.28601074 441.44549561]
[-166.15238953 451.78579712]
[-177.01876831 462.12609863]
[-174.83877563 477.48928833]
[-182.13510132 491.18392944]
[-196.10217285 497.94415283]
[-211.36933899 495.17056274]
[-222.06608582 483.92959595]
[-224.07929993 468.54367065]
[-216.63484192 454.92898560]
[-202.59526062 448.32064819]
[-187.35906982 451.25973511]
[-176.49269104 440.91943359]
[-165.62631226 430.57913208]
[-154.75993347 420.23883057]
[-150.87371826 405.86013794]
[-135.54278564 401.95205688]
[-124.67640686 391.61175537]
[-120.79018402 377.23306274]
[-105.45925903 373.32495117]
[-94.59288025 362.98464966]
[-83.72650146 352.64434814]
[-72.86012268 342.30404663]
[-61.99374771 331.96374512]
[-52.58610153 320.28060913]
[-44.80155563 307.45870972]
[-44.81027985 292.56411743]
[-31.03462029 284.78323364]
[-23.25007629 271.96136475]
[-15.46553326 259.13946533]
[-15.95308781 255.63026428]
[-14.75382233 251.71038818]
[-11.69332409 248.18040466]
[-6.96364927 245.88838196]
[1.44707680 233.46824646]
[9.85780239 221.04811096]
[18.26852798 208.62799072]
[26.67925453 196.20785522]
[27.40907478 181.33113098]
[41.55359268 174.24288940]
[49.96431732 161.82276917]
[58.37504196 149.40263367]
[54.49029160 133.04795837]
[63.81213379 118.65588379]
[80.98860168 115.38665771]
[89.19282532 102.82916260]
[97.29294586 90.20426941]
[105.28842163 77.51284027]
[113.28390503 64.82141113]
[121.27938080 52.12998199]
[122.08881378 36.32949448]
[135.41934204 29.68523788]
[143.41482544 16.99380875]
[151.41029358 4.30238104]
[159.40577698 -8.38904762]
[167.40124512 -21.08047676]
[175.39672852 -33.77190399]
[183.39219666 -46.46333313]
[185.32444763 -55.40988541]
[191.62626648 -59.29697418]
[199.83047485 -71.85446930]
[208.03469849 -84.41197205]
[216.23892212 -96.96946716]
[216.42164612 -117.11532593]
[234.00941467 -125.12502289]
[241.79396057 -137.94691467]
[249.57850647 -150.76881409]
[257.36303711 -163.59069824]
[265.14758301 -176.41258240]
[272.93212891 -189.23448181]
[280.71667480 -202.05636597]
[288.50122070 -214.87826538]
[282.18350220 -225.68881226]
[281.07522583 -238.08837891]
[285.32598877 -249.71226501]
[294.06927490 -258.36996460]
[305.59823608 -262.45788574]
[317.69873047 -261.25622559]
[325.90295410 -273.81372070]
[334.10717773 -286.37121582]
[331.07586670 -301.65023804]
[339.57501221 -314.26846313]
[354.15991211 -317.06417847]
[362.36413574 -329.62167358]
[370.46426392 -342.24658203]
[378.45971680 -354.93801880]
[378.30932617 -375.08413696]
[395.76226807 -383.38354492]
[403.33377075 -396.33239746]
[410.90524292 -409.28121948]
[405.46792603 -423.94308472]
[410.77581787 -438.65228271]
[424.32269287 -446.46356201]
[439.71212769 -443.68872070]
[449.67767334 -431.63793945]
[449.51394653 -416.00122070]
[439.29824829 -404.16174316]
[423.85409546 -401.70974731]
[416.28259277 -388.76089478]
[408.71112061 -375.81204224]
[412.18453979 -366.17892456]
[409.72119141 -356.01309204]
[401.90173340 -348.73883057]
[391.15115356 -346.94253540]
[383.15567017 -334.25109863]
[382.24877930 -326.90264893]
[374.92163086 -321.41748047]
[366.71740723 -308.85995483]
[370.01583862 -294.38046265]
[361.87448120 -281.52850342]
[346.66467285 -278.16699219]
[338.46044922 -265.60949707]
[330.25622559 -253.05198669]
[337.30245972 -236.87414551]
[333.20407104 -219.54954529]
[319.41506958 -208.04226685]
[301.32312012 -207.09371948]
[293.53857422 -194.27182007]
[285.75402832 -181.44993591]
[277.96948242 -168.62805176]
[270.18493652 -155.80615234]
[262.40039062 -142.98426819]
[254.61585999 -130.16236877]
[246.83131409 -117.34048462]
[250.14498901 -107.65122223]
[247.51387024 -97.52752686]
[239.57524109 -90.38354492]
[228.79641724 -88.76524353]
[220.59220886 -76.20774841]
[212.38798523 -63.65024948]
[204.18376160 -51.09275436]
[196.08363342 -38.46785736]
[188.08815002 -25.77643013]
[180.09268188 -13.08500099]
[172.09719849 -0.39357200]
[164.10173035 12.29785633]
[156.10624695 24.98928642]
[148.11077881 37.68071365]
[147.87322998 52.57342529]
[133.97080994 60.12545776]
[125.97532654 72.81688690]
[117.97985077 85.50831604]
[109.98437500 98.19974518]
[108.68982697 106.17152405]
[101.75032043 111.03338623]
[93.54609680 123.59088135]
[97.81068420 136.37829590]
[93.98209381 149.09974670]
[83.67475891 157.16925049]
[70.79517365 157.81335449]
[62.38444901 170.23348999]
[53.97372437 182.65362549]
[52.64231110 198.41870117]
[39.09938812 204.61857605]
[30.68866158 217.03871155]
[22.27793503 229.45884705]
[13.86720943 241.87898254]
[5.45648336 254.29910278]
[-2.64364266 266.92401123]
[-10.42818642 279.74588013]
[-18.21273041 292.56777954]
[-18.76081085 308.37948608]
[-31.97966576 315.24325562]
[-39.76420975 328.06515503]
[-26.62138557 320.83560181]
[-11.81046391 318.46145630]
[2.93355131 321.22079468]
[15.88349438 328.79040527]
[25.52236366 340.28353882]
[30.72102547 354.35388184]
[30.87049294 369.35311890]
[25.95325661 383.52426147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[14 35]
[15 34]
[17 32]
[18 31]
[19 30]
[20 29]
[42 181]
[43 180]
[45 178]
[46 177]
[47 176]
[51 175]
[52 174]
[53 173]
[54 172]
[55 171]
[57 169]
[58 168]
[59 167]
[62 163]
[63 162]
[64 160]
[65 159]
[66 158]
[67 157]
[69 155]
[70 154]
[71 153]
[72 152]
[73 151]
[74 150]
[75 149]
[77 148]
[78 147]
[79 146]
[80 145]
[82 141]
[83 140]
[84 139]
[85 138]
[86 137]
[87 136]
[88 135]
[89 134]
[95 130]
[96 129]
[97 128]
[100 125]
[101 124]
[102 122]
[103 121]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
