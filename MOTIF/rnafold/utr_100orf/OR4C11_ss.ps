%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUUCUUCACAUCAACUGAAACAAUGCAGCAAAAUAACAGUGUGCCUGAAUUCAUACUGUUAGGAUUAACACAGGAUCCCUUGAGGCAGAAAAUAGUGUUUGUAAUCUUCUUAAUUUUCUAUA\
) } def
/len { sequence length } bind def

/coor [
[130.27702332 526.03924561]
[122.00081635 513.47338867]
[116.25251770 499.56823730]
[113.23993683 484.82641602]
[113.07196808 469.78088379]
[115.75469208 454.97549438]
[121.19111633 440.94546509]
[129.18473816 428.19796753]
[139.44656372 417.19381714]
[151.60566711 408.33081055]
[165.22247314 401.92935181]
[161.52111816 387.39318848]
[157.81976318 372.85702515]
[143.93692017 367.52740479]
[135.75767517 354.89553833]
[136.59468079 339.69183350]
[146.33621216 327.75833130]
[142.63485718 313.22216797]
[138.93348694 298.68600464]
[135.23213196 284.14984131]
[121.46027374 282.05523682]
[109.49973297 274.82962036]
[101.18682861 263.54354858]
[97.81265259 249.89379883]
[99.92267609 235.94847107]
[107.22885132 223.83352661]
[118.64841461 215.40873718]
[115.31060028 200.78482056]
[111.97278595 186.16090393]
[99.26380920 178.47862244]
[95.67046356 163.69543457]
[103.81451416 150.41717529]
[100.47669983 135.79325867]
[97.13888550 121.16934204]
[81.72576141 115.62188721]
[73.28529358 99.41642761]
[78.50768280 79.93804169]
[69.75152588 67.75897217]
[60.99536896 55.57990265]
[52.23921585 43.40083313]
[43.48305893 31.22176170]
[34.72690582 19.04269218]
[25.97075081 6.86362123]
[17.21459579 -5.31544876]
[8.45843983 -17.49451828]
[-0.29771480 -29.67358971]
[-15.81468391 -29.61630058]
[-28.38213158 -38.71788788]
[-33.16761780 -53.47860336]
[-28.33102417 -68.22265625]
[-15.73212147 -77.28064728]
[-0.21544375 -77.16960144]
[12.25253010 -67.93222046]
[16.87760925 -53.12045670]
[11.88135529 -38.42974472]
[20.63751030 -26.25067329]
[29.39366531 -14.07160378]
[38.14982224 -1.89253378]
[46.90597534 10.28653622]
[55.66213226 22.46560669]
[64.41828918 34.64467621]
[73.17443848 46.82374573]
[81.93059540 59.00281525]
[90.68675232 71.18188477]
[105.65762329 70.24749756]
[112.83142853 57.07416916]
[120.00524139 43.90084839]
[127.17904663 30.72752380]
[134.35285950 17.55419922]
[128.47177124 3.06466007]
[133.32945251 -11.79928684]
[146.63226318 -20.01934052]
[162.09901428 -17.71424294]
[172.42678833 -5.97238874]
[172.73912048 9.66207504]
[162.88853455 21.80703354]
[147.52618408 24.72801018]
[140.35237122 37.90133286]
[133.17855835 51.07465744]
[126.00475311 64.24797821]
[118.83094025 77.42130280]
[125.34147644 101.42062378]
[111.76280975 117.83152771]
[115.10062408 132.45544434]
[118.43843842 147.07936096]
[131.53718567 155.50909424]
[134.71388245 170.38737488]
[126.59670258 182.82308960]
[129.93452454 197.44700623]
[133.27233887 212.07092285]
[149.11611938 215.53878784]
[161.83247375 225.51220703]
[168.92486572 239.96914673]
[169.02876282 256.01379395]
[162.17387390 270.45666504]
[149.76829529 280.44848633]
[153.46965027 294.98464966]
[157.17100525 309.52081299]
[160.87237549 324.05694580]
[175.13484192 329.87829590]
[183.14115906 342.83023071]
[181.99920654 357.83557129]
[172.35591125 369.15567017]
[176.05728149 383.69183350]
[179.75863647 398.22799683]
[194.77874756 397.33761597]
[209.69589233 399.30615234]
[223.97084045 404.06246948]
[237.08753967 411.43460083]
[248.57185364 421.15609741]
[258.00860596 432.87548828]
[265.05667114 446.16912842]
[269.46130371 460.55648804]
[271.06323242 475.51745605]
[269.80453491 490.51119995]
[265.73077393 504.99569702]
[258.98916626 518.44738770]
[249.82344055 530.37988281]
[238.56491089 540.36199951]
[225.62059021 548.03277588]
[211.45838928 553.11492920]
[196.59025574 555.42480469]
[181.55369568 554.87884521]
[166.89224243 551.49676514]
[153.13591003 545.40093994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 105]
[12 104]
[13 103]
[17 99]
[18 98]
[19 97]
[20 96]
[27 90]
[28 89]
[29 88]
[32 85]
[33 84]
[34 83]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
