%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAACACCAAAUCAACCAUAGGUCCAAGAACAAUUGUCUCUGGACGGCAGCUAUGCGACUCACCGUGCUGUGUGCUGUGUGCCUGCUGCCUGGCAGCCUGGCCCUGCCGCUGCCUCAGGAGGCGGGAGGCAUGAGUGAGCUACAGUGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[174.91592407 132.16499329]
[181.95495605 145.41082764]
[185.92741394 159.87525940]
[186.64106750 174.85826111]
[184.06138611 189.63478088]
[178.31320190 203.48968506]
[169.67468262 215.75247192]
[158.56390381 225.82971191]
[145.51856995 233.23368835]
[131.16998291 237.60612488]
[116.21255493 238.73541260]
[101.37013245 236.56687927]
[87.36101532 231.20547485]
[74.86315918 222.91067505]
[64.48139954 212.08390808]
[56.71815491 199.24909973]
[51.94912338 185.02742004]
[50.40509796 170.10710144]
[52.16080475 155.21020508]
[57.13127518 141.05766296]
[65.07596588 128.33438110]
[75.61039734 117.65609741]
[88.22361755 109.54014587]
[73.42292786 111.97728729]
[58.62224197 114.41442871]
[43.82155609 116.85157013]
[29.02086830 119.28871155]
[14.24581051 121.87669373]
[-0.50208324 124.61524200]
[-15.24997616 127.35379028]
[-22.78764343 141.05479431]
[-37.38726807 146.65702820]
[-52.15535736 141.51527405]
[-60.11886597 128.05731201]
[-57.51767349 112.63759613]
[-45.57997894 102.53682709]
[-29.94240189 102.52428436]
[-17.98852348 112.60589600]
[-3.24063063 109.86734772]
[11.50726318 107.12879944]
[17.54587555 102.78933716]
[26.58372688 104.48802948]
[41.38441467 102.05088806]
[56.18510056 99.61374664]
[70.98578644 97.17659760]
[85.78647614 94.73945618]
[87.30588531 87.39498138]
[91.86409760 65.36153412]
[79.24530029 57.25192261]
[66.62649536 49.14231110]
[50.22909546 48.90290451]
[42.47509384 34.45273209]
[51.34114075 20.65689087]
[67.70661163 21.70735931]
[74.73610687 36.52350616]
[87.35491180 44.63311768]
[99.97371674 52.74273300]
[103.72136688 64.94960022]
[104.89197540 77.28324127]
[103.51520538 89.33681488]
[117.15968323 83.10559082]
[130.80416870 76.87436676]
[144.44863892 70.64313507]
[158.09312439 64.41191101]
[167.43200684 51.64101791]
[182.22334290 53.39201355]
[195.86781311 47.16078949]
[209.44802856 40.79071808]
[222.96255493 34.28246307]
[236.47709656 27.77420616]
[239.47886658 23.35684204]
[243.48841858 20.82579613]
[247.60162354 20.24659157]
[251.02317810 21.30972099]
[264.91046143 15.64021969]
[278.79776001 9.97071934]
[292.68502808 4.30121899]
[298.41668701 -7.29736853]
[310.14785767 -11.71641541]
[321.36447144 -7.08740234]
[335.36450195 -12.47244263]
[349.36456299 -17.85748291]
[363.36459351 -23.24252319]
[377.36465454 -28.62756538]
[391.36468506 -34.01260376]
[401.46719360 -46.18840790]
[416.12371826 -43.53602982]
[430.12377930 -48.92107010]
[444.12384033 -54.30611038]
[458.12387085 -59.69115067]
[472.12393188 -65.07619476]
[486.12396240 -70.46123505]
[499.83129883 -76.55296326]
[513.21026611 -83.33554077]
[526.58923340 -90.11811829]
[539.96820068 -96.90069580]
[553.34716797 -103.68327332]
[566.72613525 -110.46585846]
[570.70971680 -115.86417389]
[576.03204346 -118.06392670]
[580.79199219 -117.23963165]
[594.43646240 -123.47085571]
[608.08093262 -129.70207214]
[619.97698975 -141.78182983]
[634.87780762 -133.69470215]
[631.23168945 -117.13746643]
[614.31219482 -116.05760193]
[600.66772461 -109.82637024]
[587.02319336 -103.59514618]
[573.50866699 -97.08689117]
[560.12969971 -90.30431366]
[546.75073242 -83.52173615]
[533.37182617 -76.73915863]
[519.99285889 -69.95658112]
[506.61386108 -63.17399979]
[519.67376709 -55.79569626]
[522.25427246 -41.01933289]
[512.46826172 -29.65125275]
[497.47241211 -30.00523376]
[488.23364258 -41.82239914]
[491.50900269 -56.46118546]
[477.50897217 -51.07614136]
[463.50891113 -45.69110107]
[449.50888062 -40.30606079]
[435.50881958 -34.92102051]
[421.50875854 -29.53598213]
[412.40765381 -17.74535179]
[396.74972534 -20.01255798]
[382.74969482 -14.62751675]
[368.74963379 -9.24247646]
[354.74960327 -3.85743570]
[340.74954224 1.52760482]
[326.74951172 6.91264534]
[316.50421143 21.12883949]
[298.35455322 18.18850708]
[284.46725464 23.85800743]
[270.57995605 29.52750778]
[256.69268799 35.19701004]
[242.98535156 41.28873825]
[229.47082520 47.79699326]
[215.95628357 54.30525208]
[211.26615906 60.07574081]
[202.09904480 60.80527115]
[188.45455933 67.03649139]
[180.09161377 79.36168671]
[164.32435608 78.05639648]
[150.67987061 84.28762054]
[137.03538513 90.51884460]
[123.39090729 96.75006866]
[109.74642944 102.98129272]
[124.74347687 102.68380737]
[139.44268799 105.67266083]
[153.13269043 111.80321503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 40]
[29 39]
[30 38]
[48 57]
[49 56]
[50 55]
[60 150]
[61 149]
[62 148]
[63 147]
[64 146]
[66 144]
[67 143]
[68 141]
[69 140]
[70 139]
[74 138]
[75 137]
[76 136]
[77 135]
[80 133]
[81 132]
[82 131]
[83 130]
[84 129]
[85 128]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
[98 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
