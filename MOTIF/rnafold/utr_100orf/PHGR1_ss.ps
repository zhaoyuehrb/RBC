%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUUCCUGCCCCUGCUCUGCACUCUCAGGUAUUCCCUGCUCUUACUCCAAAAAGAUGGACCCAGUUCCACAGGGGCACUGCCACUGUGGGGGGCAUGGCCAUCCUCCAGGUCACUGCGGGCCACCCCCUGGCCAUGGCCCAGGGCCCUGCGGGC\
) } def
/len { sequence length } bind def

/coor [
[100.99864197 368.30932617]
[87.61383057 376.15957642]
[72.17435455 374.60968018]
[60.61700439 364.25558472]
[57.38581848 349.07864380]
[63.72325516 334.91473389]
[77.19243622 327.21014404]
[78.69069672 312.28515625]
[80.18894958 297.36016846]
[81.68721008 282.43518066]
[83.18547058 267.51019287]
[72.41963959 259.56259155]
[66.95590210 247.22851562]
[68.32527161 233.69915771]
[76.27540588 222.53337097]
[88.80883789 216.72160339]
[90.60543060 201.82958984]
[92.40201569 186.93756104]
[94.19860840 172.04554749]
[95.99519348 157.15351868]
[90.45858002 152.09428406]
[81.74230957 164.30194092]
[74.15934753 177.24406433]
[59.32038116 175.05203247]
[55.80330276 160.47018433]
[68.01096344 151.75453186]
[79.38535309 141.97581482]
[73.84873199 136.91658020]
[59.17860413 140.04502869]
[44.50847244 143.17349243]
[29.83834267 146.30195618]
[19.93835258 158.92613220]
[3.89530420 158.91296387]
[-5.98394775 146.27255249]
[-2.12088776 130.70153809]
[12.52107525 124.14468384]
[26.70988083 131.63182068]
[41.38001251 128.50337219]
[56.05014038 125.37490845]
[70.72027588 122.24644470]
[72.21103668 114.89609528]
[57.51034164 111.91456604]
[42.60778427 113.62153625]
[36.37938309 99.97576904]
[47.43272400 89.83557129]
[60.49187469 97.21386719]
[75.19256592 100.19539642]
[76.68333435 92.84505463]
[64.39127350 84.24823761]
[52.09921265 75.65142059]
[39.80715179 67.05460358]
[24.29010963 70.05410004]
[11.24391747 61.13375854]
[8.40864944 45.58587265]
[17.46641922 32.63471985]
[33.04341507 29.96399117]
[45.89807892 39.15818405]
[48.40396881 54.76254272]
[60.69602966 63.35935974]
[72.98809052 71.95617676]
[85.28015137 80.55299377]
[92.03276062 77.28920746]
[85.36699677 63.85166550]
[75.08264923 52.93231201]
[82.21092224 39.73429489]
[96.98159027 42.34720993]
[99.14929962 57.19017410]
[105.53797913 70.76164246]
[112.29058838 67.49785614]
[113.19049835 52.52487946]
[114.09041595 37.55189896]
[114.99033356 22.57891655]
[115.89025116 7.60593605]
[116.79016113 -7.36704445]
[109.89472961 -21.60655403]
[118.38166046 -33.84670639]
[119.28157806 -48.81968689]
[120.18149567 -63.79266739]
[115.09630585 -79.96601105]
[129.22987366 -89.32970428]
[142.14018250 -78.34060669]
[135.15447998 -62.89274979]
[134.25456238 -47.91976929]
[133.35464478 -32.94678879]
[140.31443787 -19.77824783]
[131.76313782 -6.46712875]
[130.86323547 8.50585175]
[129.96331787 23.47883224]
[129.06340027 38.45181274]
[128.16348267 53.42479324]
[127.26356506 68.39777374]
[137.70979309 79.16235352]
[152.70304871 78.71219635]
[167.69628906 78.26203156]
[181.25804138 70.11406708]
[194.21177673 77.46592712]
[209.20503235 77.01576996]
[224.19827271 76.56560516]
[239.19151306 76.11544800]
[254.18475342 75.66528320]
[269.17800903 75.21512604]
[284.17123413 74.76496124]
[299.16448975 74.31480408]
[318.38507080 59.22635269]
[339.34448242 70.37657166]
[354.12802124 67.83756256]
[368.91159058 65.29854584]
[381.20294189 55.33697891]
[395.05624390 60.80831909]
[409.83981323 58.26931000]
[424.62335205 55.73030090]
[436.87976074 44.83476639]
[452.35638428 50.25745392]
[455.13223267 66.41996765]
[442.35171509 76.69569397]
[427.16235352 70.51385498]
[412.37881470 73.05286407]
[397.59524536 75.59187317]
[386.36129761 85.37183380]
[371.45059204 80.08209991]
[356.66705322 82.62110901]
[341.88348389 85.16011810]
[340.01254272 91.03443909]
[336.52905273 96.17008209]
[331.70022583 100.13204956]
[325.90838623 102.57692719]
[319.62057495 103.28260040]
[313.35101318 102.16821289]
[307.61898804 99.30270386]
[302.90585327 94.90100861]
[299.61465454 89.30804443]
[284.62139893 89.75820923]
[269.62817383 90.20836639]
[254.63491821 90.65853119]
[239.64167786 91.10868835]
[224.64843750 91.55885315]
[209.65518188 92.00901031]
[194.66194153 92.45916748]
[182.17260742 100.57494354]
[168.14645386 93.25527954]
[153.15319824 93.70543671]
[138.15995789 94.15560150]
[110.88721466 158.95011902]
[109.09062958 173.84213257]
[107.29403687 188.73416138]
[105.49745178 203.62617493]
[103.70085907 218.51820374]
[116.23887634 229.83149719]
[119.55067444 246.22207642]
[112.52937317 261.21545410]
[98.11045837 269.00845337]
[96.61219788 283.93344116]
[95.11393738 298.85842896]
[93.61568451 313.78341675]
[92.11742401 328.70840454]
[103.78641510 338.93652344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 155]
[8 154]
[9 153]
[10 152]
[11 151]
[16 147]
[17 146]
[18 145]
[19 144]
[20 143]
[28 40]
[29 39]
[30 38]
[31 37]
[48 61]
[49 60]
[50 59]
[51 58]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[76 84]
[77 83]
[78 82]
[92 142]
[93 141]
[94 140]
[96 138]
[97 137]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[103 131]
[105 122]
[106 121]
[107 120]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
