%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCUCCGAGGGUGCGGCCCCCGGGCCGGCGGCGCCGCUGUGCGGGGCGCUGAGCCUGCUGCUGGGCGCGCUGCUGGGCAAAGUGAUAGAGGGUCACG\
) } def
/len { sequence length } bind def

/coor [
[109.50100708 150.06779480]
[114.41567230 137.41389465]
[106.84842682 124.46257019]
[99.28118134 111.51124573]
[97.47315216 111.85571289]
[95.55080414 111.90618896]
[93.56312561 111.63706970]
[80.49568176 119.00198364]
[67.42823792 126.36688995]
[54.36079407 133.73181152]
[46.13756180 147.24806213]
[31.25106812 146.75662231]
[18.18362427 154.12153625]
[5.11617994 161.48645020]
[-7.95126343 168.85134888]
[-18.78101158 181.89562988]
[-34.31347656 175.10011292]
[-32.08335495 158.29348755]
[-15.31617451 155.78390503]
[-2.24873114 148.41900635]
[10.81871223 141.05409241]
[23.88615608 133.68917847]
[31.17471504 120.69971466]
[46.99588013 120.66436005]
[60.06332397 113.29944611]
[73.13076782 105.93453979]
[86.19821167 98.56962585]
[94.93933105 86.37976074]
[97.72254181 71.64022827]
[100.50576019 56.90069962]
[103.28897858 42.16117096]
[106.07219696 27.42164421]
[108.85540771 12.68211460]
[111.63862610 -2.05741429]
[114.42184448 -16.79694366]
[117.20505524 -31.53647232]
[119.98827362 -46.27600098]
[118.49468231 -55.47174835]
[123.09407043 -61.42751312]
[126.33433533 -76.07335663]
[129.57460022 -90.71919250]
[121.34223175 -103.94287872]
[124.83695984 -118.74968719]
[137.49444580 -126.51650238]
[140.73472595 -141.16233826]
[143.97499084 -155.80818176]
[147.21525574 -170.45402527]
[149.99847412 -185.19355774]
[152.32194519 -200.01251221]
[154.64541626 -214.83146667]
[146.39535522 -228.59068298]
[152.14366150 -243.56854248]
[167.48072815 -248.27532959]
[180.64126587 -239.10038757]
[181.52964783 -223.08195496]
[169.46437073 -212.50799561]
[167.14089966 -197.68904114]
[164.81742859 -182.87008667]
[166.96810913 -178.42427063]
[166.22009277 -172.56335449]
[161.86109924 -167.21376038]
[158.62083435 -152.56791687]
[155.38055420 -137.92207336]
[152.14028931 -123.27623749]
[160.34017944 -110.89489746]
[157.26272583 -95.99577332]
[144.22044373 -87.47892761]
[140.98017883 -72.83308411]
[137.73991394 -58.18724442]
[134.72779846 -43.49278259]
[131.94458008 -28.75325584]
[129.16137695 -14.01372623]
[126.37815094 0.72580212]
[123.59494019 15.46533108]
[120.81172180 30.20485878]
[118.02850342 44.94438934]
[115.24529266 59.68391800]
[112.46207428 74.42344666]
[109.67885590 89.16297150]
[112.23251343 103.94400787]
[119.79975128 116.89533234]
[127.36699677 129.84664917]
[144.29476929 133.90785217]
[152.95477295 148.62121582]
[148.46795654 164.74597168]
[156.43432617 177.45570374]
[164.40069580 190.16542053]
[172.36706543 202.87513733]
[180.33341980 215.58485413]
[195.58583069 220.55917358]
[201.07128906 235.63528442]
[192.58183289 249.24810791]
[176.62983704 250.95503235]
[165.45231628 239.44665527]
[167.62370300 223.55122375]
[159.65733337 210.84150696]
[151.69096375 198.13179016]
[143.72460938 185.42205811]
[135.75823975 172.71234131]
[122.81963348 171.58337402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[7 27]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[14 20]
[15 19]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[39 69]
[40 68]
[41 67]
[44 64]
[45 63]
[46 62]
[47 61]
[48 58]
[49 57]
[50 56]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
