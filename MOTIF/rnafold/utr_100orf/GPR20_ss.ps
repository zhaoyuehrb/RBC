%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGGGCUGCAUGCAGAGCUGAGAGCUGAGGACUCCCAUCUCCAGCCUGCCCGGGUGAAGCGCGGCCUGGGGUGUGCUGGCUGCCGUCAUGCCCUCUGUGUCUCCAGCGGGGCCCUCGGCCGGGGCAGUCCCCAAUGCCACCGCAGUGACAACAGUGCGGACCAAUGCCAGCGGGCUGGAGGUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[-108.51459503 361.55279541]
[-116.71881866 374.11029053]
[-124.92303467 386.66778564]
[-133.12725830 399.22528076]
[-133.70672607 417.62200928]
[-149.64665222 424.94442749]
[-157.64212036 437.63583374]
[-165.63760376 450.32727051]
[-173.63307190 463.01870728]
[-166.59301758 476.59753418]
[-167.29032898 491.77682495]
[-175.43771362 504.48455811]
[-188.76278687 511.36196899]
[-203.64096069 510.65100098]
[-211.63642883 523.34240723]
[-214.96340942 539.96673584]
[-231.85903931 541.37182617]
[-237.88639832 525.52545166]
[-224.32786560 515.34692383]
[-216.33238220 502.65551758]
[-223.39738464 489.54251099]
[-222.94718933 474.55404663]
[-215.00257874 461.71856689]
[-201.61207581 454.53588867]
[-186.32450867 455.02322388]
[-178.32902527 442.33178711]
[-170.33355713 429.64038086]
[-162.33807373 416.94894409]
[-164.70831299 405.07537842]
[-158.13581848 394.43237305]
[-145.68475342 391.02105713]
[-137.48052979 378.46356201]
[-129.27630615 365.90606689]
[-121.07209015 353.34857178]
[-128.11831665 337.17071533]
[-124.01994324 319.84609985]
[-110.23094177 308.33883667]
[-92.13897705 307.39028931]
[-84.35443115 294.56838989]
[-76.56988525 281.74652100]
[-68.78533936 268.92462158]
[-61.00080109 256.10272217]
[-53.21625519 243.28083801]
[-45.43171310 230.45893860]
[-37.64716721 217.63705444]
[-29.86262512 204.81517029]
[-22.07808113 191.99327087]
[-14.29353809 179.17138672]
[-6.50899410 166.34948730]
[-13.55567932 166.48728943]
[-20.62300873 165.51834106]
[-34.04394913 158.81919861]
[-47.46488953 152.12007141]
[-60.88582611 145.42094421]
[-74.30677032 138.72180176]
[-87.72770691 132.02267456]
[-101.14865112 125.32354736]
[-114.85310364 132.60142517]
[-130.21333313 130.40072632]
[-141.32301331 119.56769562]
[-143.91023254 104.26782990]
[-136.98017883 90.38424683]
[-123.19757080 83.25547028]
[-107.86212158 85.62265778]
[-96.87062073 96.57557678]
[-94.44951630 111.90260315]
[-81.02857208 118.60173798]
[-67.60763550 125.30087280]
[-54.18669510 132.00000000]
[-40.76575470 138.69912720]
[-27.34481621 145.39826965]
[-13.92387581 152.09739685]
[-19.67220879 138.24255371]
[-11.70670319 125.53229523]
[3.26818299 124.66467285]
[12.64829159 136.36994934]
[8.53845692 150.79602051]
[21.09595490 142.59179688]
[33.65345001 134.38757324]
[46.21094894 126.18334961]
[58.76844406 117.97912598]
[71.32594299 109.77490234]
[75.34494781 82.39662933]
[99.93482208 69.70567322]
[103.61710358 55.16467285]
[107.29938507 40.62366867]
[110.98166656 26.08266449]
[101.39113617 16.16838646]
[97.98334503 2.91387343]
[101.54587555 -10.18768501]
[111.04366302 -19.73782921]
[123.91674042 -23.31432152]
[127.83893585 -37.79245377]
[131.76113892 -52.27058792]
[135.68333435 -66.74871826]
[139.60552979 -81.22685242]
[143.40791321 -95.73692322]
[147.09019470 -110.27792358]
[150.77247620 -124.81893158]
[142.46820068 -138.26565552]
[146.18572998 -153.62651062]
[159.71951294 -161.78814697]
[175.04019165 -157.90841675]
[183.05828857 -144.28910828]
[179.01679993 -129.01029968]
[165.31347656 -121.13664246]
[161.63119507 -106.59564209]
[157.94891357 -92.05463409]
[159.35719299 -84.78559113]
[154.08366394 -77.30465698]
[150.16146851 -62.82652283]
[146.23927307 -48.34838867]
[142.31707764 -33.87025452]
[138.39486694 -19.39212227]
[149.09228516 -6.95134306]
[150.28486633 9.57932186]
[141.30586243 23.70715141]
[125.52267456 29.76494598]
[121.84039307 44.30595016]
[118.15811157 58.84695435]
[114.47583008 73.38795471]
[120.73427582 70.45915985]
[127.80204010 68.66880035]
[141.22297668 61.96966934]
[154.64392090 55.27053833]
[168.06486511 48.57140732]
[176.65361023 34.60124588]
[193.03678894 35.32465363]
[200.36079407 49.99745178]
[191.09130859 63.52552414]
[174.76399231 61.99234772]
[161.34304810 68.69148254]
[147.92211914 75.39060974]
[134.50117493 82.08974457]
[135.12051392 89.56412506]
[150.06929016 88.32543945]
[163.90370178 82.52812195]
[173.69221497 93.89408875]
[165.90718079 106.71569061]
[151.30798340 103.27420044]
[136.35920715 104.51289368]
[136.97856140 111.98727417]
[151.31909180 116.38603210]
[165.65962219 120.78478241]
[180.00016785 125.18353271]
[194.34069824 129.58227539]
[209.80313110 126.23204803]
[219.70188904 137.36145020]
[234.04241943 141.76020813]
[249.89471436 137.56054688]
[261.26440430 149.37840271]
[256.45535278 165.05657959]
[240.41470337 168.46670532]
[229.64367676 156.10073853]
[215.30313110 151.70199585]
[200.86643982 155.36685181]
[189.94195557 143.92282104]
[175.60140991 139.52406311]
[161.26087952 135.12532043]
[146.92033386 130.72656250]
[132.57980347 126.32781219]
[124.59809875 131.83587646]
[115.88967133 135.15090942]
[107.01814270 136.24607849]
[98.51819611 135.23190308]
[90.86363220 132.34107971]
[84.44099426 127.90625000]
[79.53016663 122.33240509]
[66.97267151 130.53662109]
[54.41517258 138.74084473]
[41.85767365 146.94506836]
[29.30017662 155.14929199]
[16.74267960 163.35351562]
[6.31289673 174.13403320]
[-1.47164702 186.95593262]
[-9.25619030 199.77781677]
[-17.04073334 212.59970093]
[-24.82527733 225.42160034]
[-32.60982132 238.24348450]
[-40.39436340 251.06538391]
[-48.17890930 263.88726807]
[-55.96345139 276.70916748]
[-63.74799728 289.53103638]
[-71.53253937 302.35293579]
[-79.31708527 315.17483521]
[-72.99936676 325.98538208]
[-71.89109039 338.38494873]
[-76.14186096 350.00885010]
[-84.88514709 358.66653442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[6 28]
[7 27]
[8 26]
[9 25]
[14 20]
[15 19]
[38 185]
[39 184]
[40 183]
[41 182]
[42 181]
[43 180]
[44 179]
[45 178]
[46 177]
[47 176]
[48 175]
[49 174]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[77 173]
[78 172]
[79 171]
[80 170]
[81 169]
[82 168]
[84 121]
[85 120]
[86 119]
[87 118]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 108]
[98 107]
[99 106]
[123 134]
[124 133]
[125 132]
[126 131]
[142 161]
[143 160]
[144 159]
[145 158]
[146 157]
[148 155]
[149 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
