%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGCCUCGAAGAAUCCGCUAUCGGCUGUCUGCACAACCGGAAUCAUGUCGAGUUUGGCGGUGAGAGACCCGGCAAUGGAUCGAUCACUGCGUUCCGUGUUCGUGGGGAACAUUCCAUAUGAGGCAACUGAGGAGCAGUUAAAGG\
) } def
/len { sequence length } bind def

/coor [
[93.46623230 362.22698975]
[101.68068695 349.67617798]
[115.00569153 342.78820801]
[129.99537659 343.34429932]
[142.77418518 351.20147705]
[137.74443054 337.06988525]
[132.71466064 322.93832397]
[127.68490601 308.80673218]
[122.65514374 294.67517090]
[117.62538147 280.54357910]
[112.68508911 294.70669556]
[101.41793823 304.60876465]
[86.73763275 307.68914795]
[72.44052887 303.15124512]
[62.22386932 292.16851807]
[58.72970200 277.58117676]
[62.86161804 263.16149902]
[73.55110168 252.63842773]
[88.03384399 248.73326111]
[102.56457520 252.45587158]
[113.38622284 262.84457397]
[111.46807098 247.96771240]
[109.54991150 233.09086609]
[105.54676819 226.81469727]
[107.75323486 217.87602234]
[106.15343475 202.96157837]
[95.05256653 189.40878296]
[102.55156708 172.62667847]
[100.63341522 157.74983215]
[98.71525574 142.87298584]
[96.63823700 128.01747131]
[94.40260315 113.18501282]
[85.83604431 102.13487244]
[90.76493073 89.05062103]
[88.52929688 74.21815491]
[86.29366302 59.38569641]
[83.89966583 44.57796860]
[81.34757233 29.79666901]
[78.79548645 15.01536846]
[76.08559418 0.26218233]
[73.21821594 -14.46120548]
[70.35083771 -29.18459320]
[67.48345947 -43.90797806]
[64.61608124 -58.63136673]
[61.74869919 -73.35475159]
[55.68949509 -59.63301849]
[44.65140152 -49.47622299]
[30.47401047 -44.57708359]
[15.52010155 -45.75208282]
[2.28187013 -52.80539703]
[-7.03442192 -64.56153107]
[-10.87613678 -79.06122589]
[-8.60302067 -93.88799286]
[-0.59390640 -106.57081604]
[11.81641865 -114.99600983]
[26.55967140 -117.75942993]
[41.17876434 -114.40054321]
[53.23730087 -105.47912598]
[60.72581482 -92.48145294]
[62.00653839 -107.42667389]
[63.28725815 -122.37190247]
[64.56797791 -137.31712341]
[65.84870148 -152.26234436]
[67.12942505 -167.20758057]
[68.41014862 -182.15280151]
[58.50593948 -194.17546082]
[60.01767349 -209.31379700]
[71.54048157 -218.68185425]
[72.82120514 -233.62709045]
[66.29043579 -248.03749084]
[75.08615112 -260.05764771]
[76.36687469 -275.00289917]
[77.64759827 -289.94812012]
[70.20436096 -304.56079102]
[79.36338806 -318.16387939]
[95.70265198 -316.76370239]
[102.41371918 -301.80062866]
[92.59281921 -288.66738892]
[91.31209564 -273.72216797]
[90.03137970 -258.77694702]
[96.65375519 -245.43551636]
[87.76642609 -232.34635925]
[86.48570251 -217.40113831]
[96.24663544 -206.20918274]
[95.16070557 -191.03436279]
[83.35536957 -180.87208557]
[82.07464600 -165.92684937]
[80.79393005 -150.98162842]
[79.51320648 -136.03640747]
[78.23248291 -121.09117889]
[76.95176697 -106.14595795]
[75.67104340 -91.20072937]
[76.47208405 -76.22213745]
[79.33946991 -61.49874496]
[82.20684814 -46.77536011]
[85.07422638 -32.05197144]
[87.94160461 -17.32858467]
[90.80898285 -2.60519719]
[95.20601654 3.40158820]
[93.57678986 12.46327877]
[96.12887573 27.24457932]
[98.68096924 42.02587891]
[102.94863129 48.12525558]
[101.12612915 57.15006256]
[103.36176300 71.98252106]
[105.59739685 86.81498718]
[114.16395569 97.86512756]
[109.23506927 110.94937897]
[111.47070312 125.78184509]
[115.87234497 133.86851501]
[113.59210205 140.95481873]
[115.51026154 155.83168030]
[117.42842102 170.70852661]
[127.17330933 179.22882080]
[128.43072510 191.70828247]
[121.06787109 201.36177063]
[122.66767883 216.27621460]
[124.42675781 231.17271423]
[126.34491730 246.04956055]
[128.26307678 260.92642212]
[131.75695801 275.51382446]
[136.78672791 289.64541626]
[141.81648254 303.77697754]
[146.84623718 317.90856934]
[151.87600708 332.04013062]
[156.90576172 346.17172241]
[163.41401672 359.68624878]
[171.32652283 372.42956543]
[179.23904419 385.17288208]
[187.15155029 397.91619873]
[195.06405640 410.65954590]
[210.29527283 415.69836426]
[215.71687317 430.79754639]
[207.16989136 444.37429810]
[191.21081543 446.01370239]
[180.08209229 434.45812988]
[182.32073975 418.57205200]
[174.40823364 405.82873535]
[166.49571228 393.08538818]
[158.58320618 380.34207153]
[150.67070007 367.59875488]
[148.84666443 382.48745728]
[139.93597412 394.55392456]
[126.24296570 400.67776489]
[111.30867004 399.27536011]
[98.99510956 390.70938110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 126]
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[21 120]
[22 119]
[23 118]
[25 117]
[26 116]
[28 113]
[29 112]
[30 111]
[31 109]
[32 108]
[34 106]
[35 105]
[36 104]
[37 102]
[38 101]
[39 100]
[40 98]
[41 97]
[42 96]
[43 95]
[44 94]
[45 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[68 83]
[69 82]
[71 80]
[72 79]
[73 78]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
