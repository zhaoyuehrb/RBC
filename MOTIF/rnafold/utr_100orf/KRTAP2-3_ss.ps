%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCUCAACAGCCCAACCCACACCAGCCUCAGACACCACCAUGACCGGCUCCUGCUGCGGCUCCACCUUGUCCUCCCUGAGCUACGGGGGAGGCUGCUGCCAGCCCUGCUGCUGCCGCGACCCCUGCUGCUGCCGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[46.95067596 185.78097534]
[48.98856735 200.64190674]
[47.83946609 215.59782410]
[43.55528641 229.97300720]
[36.32960510 243.11795044]
[26.48888588 254.43873596]
[14.47775555 263.42388916]
[0.83889908 269.66738892]
[-13.81145287 272.88720703]
[-28.81136703 272.93783569]
[-43.48311996 269.81698608]
[-57.16380692 263.66567993]
[-69.23531342 254.76181030]
[-79.15222931 243.50770569]
[-86.46647644 230.41183472]
[-90.84758759 216.06590271]
[-92.09761810 201.11807251]
[-90.16007996 186.24374390]
[-85.12253571 172.11492920]
[-77.21257019 159.37004089]
[-66.78757477 148.58488464]
[-54.31858444 140.24676514]
[-40.36753082 134.73202515]
[-55.16437531 132.27165222]
[-67.93368530 141.19255066]
[-82.90473938 138.48660278]
[-91.33076477 126.25804138]
[-106.12760925 123.79767609]
[-120.92445374 121.33731079]
[-135.72129822 118.87694550]
[-150.56861877 116.74222565]
[-165.45924377 114.93417358]
[-180.34988403 113.12612152]
[-189.51234436 125.45271301]
[-203.61692810 131.53189087]
[-218.86956787 129.72837830]
[-231.16737366 120.52732086]
[-237.20230103 106.40375519]
[-235.35099792 91.15684509]
[-226.11143494 78.88793945]
[-211.96902466 72.89730835]
[-196.72799683 74.79639435]
[-184.48811340 84.07437134]
[-178.54183960 98.23548889]
[-163.65119934 100.04354095]
[-148.76055908 101.85159302]
[-144.46165466 99.61380768]
[-138.70198059 100.10755157]
[-133.26092529 104.08010101]
[-118.46408844 106.54046631]
[-103.66724396 109.00083160]
[-88.87039948 111.46119690]
[-76.94052887 102.61733246]
[-61.89937973 104.90171051]
[-52.70401001 117.47480774]
[-37.90716553 119.93517303]
[-33.89888000 117.59602356]
[-28.89497375 116.93792725]
[-23.62902451 118.36044312]
[-9.72401237 112.73455048]
[4.18100071 107.10866547]
[18.08601379 101.48278046]
[31.99102592 95.85688782]
[17.24042320 93.13298035]
[4.00989389 86.06522369]
[-6.45515203 75.31893158]
[-13.16962528 61.90566254]
[-15.50148392 47.08802414]
[-13.23122501 32.26082230]
[-6.57255316 18.81976128]
[3.84774280 8.03007030]
[17.04878426 0.90739691]
[31.78794098 -1.87779212]
[46.67779160 -0.06332260]
[60.31673813 6.18000698]
[71.42092133 16.26450348]
[78.94509888 29.24089813]
[82.18099976 43.88770294]
[80.82402802 58.82619858]
[75.00190735 72.65019989]
[65.26270294 84.05843353]
[52.52090454 91.97798920]
[67.52000427 92.14275360]
[82.51909637 92.30751801]
[92.94978333 82.25033569]
[107.43843079 82.40949249]
[117.64566803 92.69338226]
[132.64476013 92.85815430]
[147.64385986 93.02291870]
[162.64295959 93.18768311]
[177.64204407 93.35244751]
[192.64114380 93.51721191]
[203.89326477 82.74560547]
[219.10214233 83.12637329]
[229.30187988 93.91992950]
[244.30096436 94.08470154]
[258.18530273 86.49945068]
[270.82681274 94.37608337]
[285.82589722 94.54084778]
[299.71023560 86.95560455]
[312.35174561 94.83223724]
[327.35083008 94.99700165]
[336.04382324 91.94344330]
[342.67666626 95.33375549]
[357.66851807 95.82797241]
[372.66040039 96.32218933]
[388.69012451 90.80099487]
[398.43304443 104.67587280]
[387.79748535 117.87896729]
[372.16616821 111.31404114]
[357.17431641 110.81982422]
[342.18246460 110.32560730]
[327.18606567 109.99610138]
[312.18698120 109.83133698]
[299.37548828 117.42836761]
[285.66113281 109.53994751]
[270.66204834 109.37518311]
[257.85055542 116.97221375]
[244.13619995 109.08379364]
[229.13710022 108.91902924]
[218.70272827 119.48592377]
[203.48916626 119.53249359]
[192.47637939 108.51631165]
[177.47727966 108.35153961]
[162.47819519 108.18677521]
[147.47909546 108.02201080]
[132.47999573 107.85724640]
[117.48090363 107.69248199]
[107.05021667 117.74966431]
[92.56156921 117.59050751]
[82.35433197 107.30661774]
[67.35523224 107.14184570]
[52.35614014 106.97708130]
[37.61691284 109.76190186]
[23.71190071 115.38778687]
[9.80688858 121.01367950]
[-4.09812403 126.63956451]
[-18.00313759 132.26545715]
[-3.18701339 134.60691833]
[10.79951382 140.02699280]
[23.32450485 148.28074646]
[33.82205963 158.99528503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 56]
[24 55]
[27 52]
[28 51]
[29 50]
[30 49]
[31 46]
[32 45]
[33 44]
[59 138]
[60 137]
[61 136]
[62 135]
[63 134]
[82 133]
[83 132]
[84 131]
[87 128]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[95 120]
[96 119]
[98 117]
[99 116]
[101 114]
[102 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
