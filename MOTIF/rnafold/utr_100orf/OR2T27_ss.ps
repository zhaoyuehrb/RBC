%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCAGAGCAAUUAUUCCGUGUAUGCCGACUUUAUCCUUCUGGGUUUGUUCAGCAACGCCCGUUUCCCCUGGCUUCUCUUUGCCCUCAUUCUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[107.35102081 291.02813721]
[107.02655029 275.22720337]
[118.03020477 263.88281250]
[117.56370544 248.89006042]
[117.09720612 233.89730835]
[116.63070679 218.90457153]
[103.92042542 208.01475525]
[102.91350555 190.97172546]
[114.70729065 178.16744995]
[113.77474976 163.19645691]
[112.84220123 148.22547913]
[100.69452667 149.52792358]
[88.68692017 147.84004211]
[77.53887939 143.30807495]
[67.90736389 136.24732971]
[60.34810638 127.12059784]
[55.28359604 116.50802612]
[52.97963333 105.07033539]
[53.53170013 93.50771332]
[56.86178970 82.51697540]
[62.72584534 72.74957275]
[70.73106384 64.77296448]
[63.16382217 51.82164383]
[55.59658051 38.87031555]
[48.02933502 25.91899109]
[40.87018204 19.95751953]
[40.43534851 12.44510269]
[33.27455139 -0.73529857]
[26.11375237 -13.91569996]
[12.72702122 -22.34813690]
[13.44990826 -37.22518921]
[6.28910971 -50.40559006]
[-8.99808025 -50.90464783]
[-21.89776993 -58.93551636]
[-28.99851036 -72.25639343]
[-28.48167038 -87.24268341]
[-20.58613205 -99.87304688]
[-27.74693108 -113.05345154]
[-34.90773010 -126.23384857]
[-42.06852722 -139.41424561]
[-56.32830048 -147.51307678]
[-56.17381668 -163.91148376]
[-41.76399612 -171.74021912]
[-27.92242432 -162.94573975]
[-28.88812637 -146.57504272]
[-21.72732735 -133.39465332]
[-14.56653023 -120.21424866]
[-7.40573168 -107.03384399]
[7.48733139 -106.78433228]
[20.34138680 -99.06233215]
[27.65272331 -85.85587311]
[27.37017822 -70.66320801]
[19.46951103 -57.56638718]
[26.63030815 -44.38598633]
[39.50485229 -36.89630127]
[39.29415512 -21.07649803]
[46.45495224 -7.89609671]
[53.61574936 5.28430414]
[60.98065948 18.35174751]
[68.54790497 31.30307388]
[76.11515045 44.25439835]
[83.68238831 57.20572281]
[92.56220245 54.46149063]
[101.88140106 53.55397415]
[111.26124573 54.54795837]
[120.31494141 57.43038940]
[128.66352844 62.10977173]
[135.95178223 68.41883087]
[141.86326599 76.12039948]
[146.13404846 84.91623688]
[148.56437683 94.45854187]
[149.02789307 104.36373901]
[147.47787476 114.22783661]
[143.95031738 123.64292145]
[158.30018616 128.01113892]
[172.65005493 132.37936401]
[184.94960022 122.91886902]
[200.46176147 122.52832031]
[213.22178650 131.35787964]
[218.32321167 146.01240540]
[213.80441284 160.85693359]
[201.40295410 170.18344116]
[185.88748169 170.40570068]
[173.22398376 161.43823242]
[168.28182983 146.72923279]
[153.93196106 142.36100769]
[139.58210754 137.99278259]
[127.81318665 147.29292297]
[128.74572754 162.26391602]
[129.67828369 177.23489380]
[140.80992126 185.00416565]
[145.31439209 197.60218811]
[141.73846436 210.29139709]
[131.62345886 218.43807983]
[132.08995056 233.43081665]
[132.55644226 248.42356873]
[133.02294922 263.41632080]
[144.71058655 274.05465698]
[145.36907959 289.84521484]
[134.60775757 301.41973877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[9 90]
[10 89]
[11 88]
[22 62]
[23 61]
[24 60]
[25 59]
[27 58]
[28 57]
[29 56]
[31 54]
[32 53]
[37 48]
[38 47]
[39 46]
[40 45]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
