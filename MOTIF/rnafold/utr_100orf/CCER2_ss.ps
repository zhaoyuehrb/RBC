%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGCCCCGAGGGCCAGCCUCUGAGCUGCUGCUGCUGCGGCUGCUCCUGCUGGGGGCGGCCACCGCUGCUCCCUUGGCACCGAGACCCUCCAAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[122.65428925 190.88313293]
[129.40820312 170.32421875]
[121.44183350 157.61448669]
[113.47547150 144.90476990]
[105.50910187 132.19505310]
[90.53811646 131.26251221]
[81.05606842 142.88536072]
[71.57402802 154.50822449]
[62.09197998 166.13107300]
[56.76453400 182.22625732]
[39.82358170 181.56259155]
[35.77157974 165.09997559]
[50.46912384 156.64903259]
[59.95116806 145.02616882]
[69.43321228 133.40332031]
[78.91526031 121.78045654]
[70.62488556 98.40902710]
[82.49115753 77.48447418]
[70.43870544 68.55484009]
[58.38624954 59.62520599]
[46.98725510 63.68115997]
[35.17967224 61.66738510]
[25.95769501 54.21451569]
[21.60108185 43.31703949]
[23.11214828 31.80069542]
[11.63815975 22.13903999]
[0.16417179 12.47738361]
[-11.30981636 2.81572747]
[-26.84969330 -0.15459457]
[-31.60152054 -14.27087593]
[-43.07550812 -23.93253136]
[-54.54949570 -33.59418869]
[-66.02348328 -43.25584412]
[-77.49747467 -52.91749954]
[-93.72862244 -55.25881958]
[-99.56448364 -70.58444214]
[-89.00162506 -83.12868500]
[-72.90620422 -79.98710632]
[-67.83581543 -64.39148712]
[-56.36182785 -54.72983170]
[-44.88784027 -45.06817627]
[-33.41385269 -35.40652084]
[-21.93986511 -25.74486351]
[-7.22068501 -23.46560860]
[-1.64815998 -8.65826035]
[9.82582760 1.00339556]
[21.29981613 10.66505146]
[32.77380371 20.32670784]
[50.73873901 17.56888580]
[65.37377167 28.86894226]
[67.31587982 47.57275391]
[79.36833954 56.50238800]
[91.42079163 65.43202209]
[106.41353607 64.96552277]
[117.88751984 55.30386353]
[129.36151123 45.64220810]
[140.83549500 35.98055267]
[152.30949402 26.31889725]
[163.78347778 16.65723991]
[175.25746155 6.99558449]
[186.73144531 -2.66607189]
[198.20544434 -12.32772827]
[203.27583313 -27.92334175]
[219.37124634 -31.06492424]
[229.93411255 -18.52068329]
[224.09825134 -3.19505858]
[207.86709595 -0.85374004]
[196.39311218 8.80791569]
[184.91911316 18.46957207]
[173.44512939 28.13122940]
[161.97114563 37.79288483]
[150.49716187 47.45454025]
[139.02316284 57.11619568]
[127.54917908 66.77785492]
[116.07518768 76.43950653]
[127.45879364 90.30680847]
[128.44740295 108.59286499]
[118.21882629 124.22868347]
[126.18518829 136.93840027]
[134.15155029 149.64811707]
[142.11791992 162.35784912]
[151.47068787 161.41218567]
[160.55564880 163.64936829]
[168.32629395 168.78121948]
[173.89772034 176.18789673]
[176.64744568 184.99264526]
[176.28479004 194.16554260]
[172.88136292 202.64390564]
[166.85935974 209.45550537]
[172.76086426 223.24580383]
[178.66236877 237.03608704]
[184.56387329 250.82638550]
[198.00695801 260.21868896]
[196.32514954 276.53137207]
[181.24855042 282.98333740]
[168.28666687 272.93737793]
[170.77357483 256.72790527]
[164.87207031 242.93759155]
[158.97056580 229.14730835]
[153.06906128 215.35700989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 16]
[7 15]
[8 14]
[9 13]
[18 53]
[19 52]
[20 51]
[25 48]
[26 47]
[27 46]
[28 45]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
