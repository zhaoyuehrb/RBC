%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAAGGUAACGGCGCCUGGGUCCGGGCCGCCGGCGGCGGCGAGCGGGAAGGAGAAGCGCUCCUUCAGCAAGCGGCUGUUUCGGAGCGGCCGCGCUG\
) } def
/len { sequence length } bind def

/coor [
[66.78618622 220.08926392]
[66.63387299 235.28942871]
[60.67170715 249.27230835]
[49.80886459 259.90560913]
[35.70185471 265.56784058]
[20.50189781 265.39553833]
[6.52687120 259.41497803]
[-4.09213209 248.53814697]
[-9.73579216 234.42370605]
[-9.54349136 219.22398376]
[-3.54455423 205.25685120]
[7.34622478 194.65216064]
[21.46808052 189.02706909]
[36.66753387 189.23936462]
[42.56903839 175.44906616]
[48.47054291 161.65876770]
[54.37204361 147.86848450]
[45.82155991 135.54414368]
[30.83788490 136.24374390]
[15.85420895 136.94335938]
[0.87053299 137.64295959]
[-14.11314297 138.34255981]
[-27.61771584 147.64625549]
[-42.30899811 140.35940552]
[-43.07386017 123.97810364]
[-29.12547874 115.35402679]
[-14.81274891 123.35888672]
[0.17092714 122.65928650]
[15.15460300 121.95967865]
[30.13827896 121.26007080]
[45.12195587 120.56047058]
[50.80828094 106.68006134]
[40.62199020 95.66918182]
[30.43569565 84.65830231]
[20.24940300 73.64742279]
[10.06310940 62.63654709]
[-5.75201797 58.29906464]
[-9.64087772 42.36768341]
[2.39705682 31.23125076]
[17.97818947 36.34596634]
[21.07398796 52.45025635]
[31.26028061 63.46113205]
[41.44657516 74.47200775]
[51.63286591 85.48288727]
[61.81916046 96.49376678]
[81.25910187 72.04765320]
[108.50378418 72.31099701]
[116.47015381 59.60128021]
[114.35687256 46.76029205]
[121.39746094 36.29822922]
[133.30273438 33.59964752]
[141.66052246 21.14382744]
[150.01831055 8.68800831]
[158.37608337 -3.76781154]
[166.73387146 -16.22363091]
[175.09165955 -28.67945099]
[183.44944763 -41.13526917]
[181.77345276 -57.09053802]
[193.30346680 -68.24572754]
[209.19465637 -66.04352570]
[217.25665283 -52.17327499]
[211.30497742 -37.27504730]
[195.90525818 -32.77748489]
[187.54747009 -20.32166672]
[179.18969727 -7.86584711]
[170.83190918 4.58997250]
[162.47412109 17.04579163]
[154.11633301 29.50161171]
[145.75856018 41.95743179]
[145.60606384 59.42964554]
[129.17987061 67.56764221]
[121.21350861 80.27736664]
[131.92366028 103.27070618]
[120.39313507 128.71055603]
[91.12889099 137.30111694]
[103.45322418 145.85160828]
[115.77755737 154.40208435]
[128.10189819 162.95257568]
[140.42622375 171.50305176]
[152.75056458 180.05354309]
[165.07489014 188.60401917]
[177.39923096 197.15451050]
[189.72357178 205.70498657]
[206.10226440 206.52371216]
[213.34075928 221.23887634]
[203.99272156 234.71278381]
[187.67460632 233.08464050]
[181.17308044 218.02932739]
[168.84875488 209.47883606]
[156.52441406 200.92835999]
[144.20007324 192.37786865]
[131.87574768 183.82739258]
[119.55140686 175.27690125]
[107.22707367 166.72642517]
[94.90274048 158.17593384]
[82.57840729 149.62545776]
[68.16233826 153.76998901]
[62.26083755 167.56027222]
[56.35933304 181.35057068]
[50.45782852 195.14086914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 100]
[15 99]
[16 98]
[17 97]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[47 72]
[48 71]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
