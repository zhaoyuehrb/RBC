%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCACUGCUGUUCCCCUUGCUGUCAGCCUACAUGCUGCAGGACCACCUGCUGCAGGACAACCUGCUGGAAGCCCACCACUGUGACCACCUGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[-12.67070770 186.46310425]
[-16.44230270 196.99302673]
[-22.68821144 206.25595093]
[-31.01686668 213.68269348]
[-40.90896225 218.81874084]
[-51.74982452 221.35220337]
[-62.86760712 221.13267517]
[-73.57492065 218.18014526]
[-83.21134949 212.68336487]
[-91.18415833 204.98785400]
[-97.00479126 195.57409668]
[-111.48356628 199.49392700]
[-125.96234131 203.41375732]
[-140.44111633 207.33358765]
[-142.74273682 222.38757324]
[-150.97384644 235.20040894]
[-163.70835876 243.55218506]
[-178.73992920 245.99592590]
[-193.46424866 242.10823059]
[-205.33024597 232.56265259]
[-212.28205872 219.01304626]
[-213.11526489 203.80693054]
[-207.68547058 189.57888794]
[-196.93345642 178.79399109]
[-182.72204590 173.32080078]
[-167.51347351 174.10757446]
[-153.94270325 181.01800537]
[-144.36094666 192.85481262]
[-129.88217163 188.93498230]
[-115.40339661 185.01515198]
[-100.92462158 181.09532166]
[-98.65584564 161.94728088]
[-88.48185730 145.51457214]
[-72.27739716 134.89794922]
[-53.05927658 132.11973572]
[-34.42479324 137.73864746]
[-19.87836075 150.73799133]
[-6.37832069 144.19973755]
[7.12171888 137.66146851]
[20.62175941 131.12319946]
[34.12179947 124.58493042]
[47.62183762 118.04666901]
[61.12187958 111.50839996]
[74.62191772 104.97013092]
[88.12195587 98.43186951]
[73.13994598 97.69747162]
[58.59338760 94.03720093]
[47.46867371 83.97535706]
[42.37092209 69.86815643]
[44.49390030 55.01915359]
[53.34045410 42.90559006]
[66.83895874 36.36414719]
[81.82840729 36.92666626]
[94.79866028 44.46141434]
[102.71282196 57.20519257]
[99.05240631 71.75171661]
[109.23870087 60.74083710]
[119.42499542 49.72996140]
[129.61128235 38.71908188]
[139.79757690 27.70820427]
[142.89337158 11.60391617]
[158.47451782 6.48919821]
[170.51245117 17.62563324]
[166.62358093 33.55701065]
[150.80845642 37.89449692]
[140.62216187 48.90537643]
[130.43586731 59.91625214]
[120.24958038 70.92713165]
[110.06328583 81.93801117]
[113.98311615 96.41678619]
[128.33297729 100.78500366]
[142.68284607 105.15322876]
[156.50608826 97.97299957]
[170.99667358 102.60741425]
[177.75672913 115.83000946]
[192.10659790 120.19823456]
[204.40614319 110.73773956]
[219.91830444 110.34719086]
[232.67832947 119.17675018]
[237.77975464 133.83128357]
[233.26095581 148.67581177]
[220.85949707 158.00231934]
[205.34402466 158.22456360]
[192.68051147 149.25711060]
[187.73837280 134.54809570]
[173.38850403 130.17988586]
[160.40759277 137.39315796]
[145.79255676 133.16757202]
[138.31462097 119.50308990]
[123.96475983 115.13487244]
[109.61489105 110.76664734]
[94.66022491 111.93190765]
[81.16018677 118.47017670]
[67.66014099 125.00843811]
[54.16010284 131.54670715]
[40.66006470 138.08497620]
[27.16002464 144.62324524]
[13.65998554 151.16149902]
[0.15994535 157.69976807]
[-13.34009457 164.23803711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 31]
[12 30]
[13 29]
[14 28]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[44 93]
[45 92]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[70 91]
[71 90]
[72 89]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
