%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGACGGAAGUGCUCUAUCUUGUUGCCGGAAGUGGGAAGAGAGAAAGGUUGUGAUGGCGGCUAUAGCUGCAUCCGAGGUGCUGGUGGACAGCGCGGAGGAGGGGUCCCUCGCUGCGGCGGCGGAGCUGGCCGCUCAGAAGCGCGAACAGAGAC\
) } def
/len { sequence length } bind def

/coor [
[72.07513428 333.74246216]
[74.65332031 314.53302002]
[74.95537567 299.53607178]
[75.25743866 284.53909302]
[61.29802704 279.20803833]
[49.98361588 269.40429688]
[42.69241714 256.29656982]
[40.32129669 241.45745850]
[43.17549896 226.67491150]
[50.92948532 213.73675537]
[62.66395950 204.21444702]
[76.97480774 199.27229309]
[77.27686310 184.27532959]
[77.57891846 169.27836609]
[77.88097382 154.28141785]
[78.18302917 139.28445435]
[66.46902466 129.91523743]
[51.90489578 133.50497437]
[40.35738754 144.32005310]
[26.14828873 139.85340881]
[11.58416271 143.44314575]
[-2.97996497 147.03288269]
[-17.54409218 150.62261963]
[-30.48869896 163.68177795]
[-47.13869476 158.21487427]
[-61.62758255 162.09716797]
[-72.95496368 173.14257812]
[-87.25112915 168.96298218]
[-101.74001312 172.84526062]
[-116.22890472 176.72753906]
[-127.43592834 188.69978333]
[-143.34416199 184.71731567]
[-147.58857727 168.87695312]
[-135.80288696 157.47390747]
[-120.11119080 162.23866272]
[-105.62229919 158.35636902]
[-91.13341522 154.47409058]
[-80.84236908 143.70637512]
[-65.50987244 147.60827637]
[-51.02098083 143.72599792]
[-44.67581558 133.38502502]
[-32.59213638 130.05532837]
[-21.13382721 136.05848694]
[-6.56969976 132.46875000]
[7.99442720 128.87901306]
[22.55855560 125.28928375]
[33.06433868 114.73097992]
[48.31515884 118.94084930]
[62.87928772 115.35112000]
[63.15583801 92.14585114]
[75.80310822 74.47074890]
[68.04303741 61.63402557]
[60.28297043 48.79730606]
[53.12329865 43.03071976]
[52.49888992 35.62303543]
[44.99888992 22.63265419]
[37.49888992 9.64227295]
[29.99888992 -3.34810781]
[22.95679283 -9.25770283]
[22.48167610 -16.67645645]
[15.24478531 -29.81523132]
[8.00789356 -42.95400620]
[0.77100253 -56.09278107]
[-13.53536320 -64.10900879]
[-13.47570229 -80.50804901]
[0.88861156 -88.41997528]
[14.78080368 -79.70567322]
[13.90977764 -63.32967377]
[21.14666939 -50.19089890]
[28.38356018 -37.05212402]
[35.62045288 -23.91334724]
[42.98926926 -10.84810734]
[50.48926926 2.14227319]
[57.98926926 15.13265419]
[65.48927307 28.12303543]
[73.11968994 41.03723907]
[80.87976074 53.87395859]
[88.63982391 66.71067810]
[95.11640930 59.92471695]
[103.92949677 54.60056305]
[109.80899811 40.80086899]
[115.68849182 27.00117874]
[121.56799316 13.20148754]
[127.44749451 -0.59820443]
[133.32699585 -14.39789581]
[128.69512939 -29.75776100]
[137.93420410 -42.87336349]
[153.95678711 -43.68353653]
[164.47172546 -31.56678200]
[161.41285706 -15.81804085]
[147.12667847 -8.51839733]
[141.24717712 5.28129482]
[135.36769104 19.08098602]
[129.48818970 32.88067627]
[123.60868835 46.68037033]
[117.72918701 60.48006058]
[123.08561707 65.72969055]
[133.58506775 55.01700592]
[144.29757690 65.51662445]
[133.79847717 76.22895813]
[139.15490723 81.47859192]
[152.83340454 75.32240295]
[166.51190186 69.16620636]
[180.19039917 63.01001740]
[189.33181763 49.39508057]
[205.67288208 50.77412415]
[212.40330505 65.72850037]
[202.59941101 78.87443542]
[186.34660339 76.68851471]
[172.66810608 82.84470367]
[158.98960876 89.00090027]
[145.31109619 95.15708923]
[140.35279846 101.23678589]
[134.68052673 105.87307739]
[148.59582520 111.47350311]
[162.51110840 117.07392120]
[171.69909668 117.38286591]
[176.64837646 122.92977142]
[190.44807434 128.80928040]
[204.24777222 134.68876648]
[218.04745483 140.56826782]
[231.84715271 146.44776917]
[245.64683533 152.32727051]
[259.50668335 145.08581543]
[274.76745605 148.49795532]
[284.22351074 160.95257568]
[283.40994263 176.56898499]
[272.71093750 187.97358704]
[257.17819214 189.78149414]
[244.14584351 181.13905334]
[239.76734924 166.12696838]
[225.96765137 160.24746704]
[212.16795349 154.36796570]
[198.36827087 148.48846436]
[184.56857300 142.60896301]
[170.76889038 136.72946167]
[156.91069031 130.98921204]
[142.99540710 125.38879395]
[129.08010864 119.78836823]
[114.71676636 134.67848206]
[93.17998505 139.58650208]
[92.87792969 154.58346558]
[92.57587433 169.58042908]
[92.27381897 184.57737732]
[91.97176361 199.57434082]
[106.07200623 205.08874512]
[117.41353607 215.07582092]
[124.64026642 228.31570435]
[126.89691925 243.20118713]
[123.93021393 257.93280029]
[116.11713409 270.73629761]
[104.41713715 280.07650757]
[90.25439453 284.84115601]
[89.95233917 299.83810425]
[89.65028381 314.83508301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[12 145]
[13 144]
[14 143]
[15 142]
[16 141]
[17 49]
[18 48]
[20 46]
[21 45]
[22 44]
[23 43]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[51 78]
[52 77]
[53 76]
[55 75]
[56 74]
[57 73]
[58 72]
[60 71]
[61 70]
[62 69]
[63 68]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[101 112]
[102 111]
[103 110]
[104 109]
[114 139]
[115 138]
[116 137]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
[123 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
