%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAAGGUUCAGGGUCACUCAAUCUCAACAGCCCAGAAGCAUCUGCAACCUCCCCAAUGGCCUUGCCCUUUGUUUUACUGAUGGCCCUGGUGGUGCUCAACUGCAAGUCAAUCUGUUCUCUGGGCUGUGAUCUGCCUCAGACCCACAGCCUGAGUA\
) } def
/len { sequence length } bind def

/coor [
[95.74478912 678.74212646]
[95.44655609 663.74511719]
[87.45774078 651.17419434]
[94.91913605 637.22290039]
[94.62090302 622.22589111]
[91.32567596 615.56451416]
[94.46881104 606.92840576]
[94.46881104 591.92840576]
[94.46881104 576.92840576]
[94.46881104 561.92840576]
[83.78794098 551.61071777]
[83.57425690 536.39855957]
[94.46881104 525.26544189]
[94.46881104 510.26544189]
[94.46881104 495.26544189]
[94.46881104 480.26544189]
[94.46881104 465.26544189]
[79.92642212 461.71478271]
[66.64846802 454.78253174]
[55.40879059 444.86782837]
[46.86360550 432.54370117]
[41.51320648 418.52410889]
[39.67265701 403.62240601]
[41.45325089 388.70428467]
[46.75580597 374.63745117]
[55.27614594 362.24105835]
[66.52257538 352.23822021]
[79.84424591 345.21359253]
[94.46881104 341.57937622]
[94.46881104 326.57937622]
[94.46881104 311.57937622]
[94.46881104 296.57937622]
[94.46881104 281.57937622]
[94.46881104 266.57937622]
[94.46881104 251.57936096]
[94.46881104 236.57936096]
[94.46881104 221.57936096]
[94.46881104 206.57936096]
[94.31968689 191.58010864]
[94.02145386 176.58306885]
[93.72322083 161.58602905]
[93.42498779 146.58900452]
[81.31834412 143.60136414]
[70.32725525 137.49966431]
[61.24388885 128.66300964]
[54.73861694 117.66963196]
[51.31067276 105.25906372]
[51.25018692 92.28255463]
[54.61438751 79.64465332]
[61.21995163 68.24015808]
[70.65219879 58.89078140]
[82.29084778 52.28601837]
[95.35062408 48.93245697]
[92.09593964 34.28981400]
[88.69584656 19.68025017]
[85.15068054 5.10520935]
[81.60551453 -9.46983051]
[70.98886871 -16.85701752]
[68.35796356 -29.11001396]
[74.59441376 -39.51486969]
[71.33973694 -54.15751648]
[68.08505249 -68.80016327]
[64.83036804 -83.44280243]
[49.75770950 -84.43856049]
[35.57660294 -89.64173126]
[23.43665886 -98.63052368]
[14.32200432 -110.67626190]
[8.97152138 -124.80243683]
[7.81895208 -139.86392212]
[10.95772934 -154.63973999]
[18.13340759 -167.93208313]
[28.76428413 -178.66339111]
[41.98856354 -185.96374512]
[56.73421097 -189.24131775]
[71.80587006 -188.23042297]
[85.98173523 -183.01301575]
[98.11264801 -174.01202393]
[107.21519470 -161.95713806]
[112.55148315 -147.82559204]
[113.68891907 -132.76295471]
[110.53530121 -117.99030304]
[103.34627533 -104.70517731]
[92.70462036 -93.98455048]
[79.47301483 -86.69748688]
[82.72769928 -72.05484009]
[85.98237610 -57.41219711]
[89.23706055 -42.76955414]
[101.78106689 -30.53031158]
[96.18055725 -13.01499748]
[99.72572327 1.56004262]
[103.27088928 16.13508224]
[107.93298340 21.92275810]
[106.73858643 31.03513145]
[109.99327087 45.67777634]
[124.24057007 50.36972427]
[135.55903625 40.52634048]
[146.87750244 30.68295288]
[147.72631836 14.90147400]
[159.54135132 4.40479040]
[175.31297302 5.42039824]
[185.68415833 17.34575462]
[184.50186157 33.10575867]
[172.46751404 43.35027695]
[156.72090149 42.00142288]
[145.40242004 51.84480667]
[134.08395386 61.68819427]
[142.06463623 71.50233459]
[147.33604431 82.87305450]
[149.62580872 95.07703400]
[148.84927368 107.35317230]
[145.11123657 118.95002747]
[138.69598389 129.17181396]
[130.04653931 137.42016602]
[119.73441315 143.22900391]
[108.42202759 146.29077148]
[108.72026062 161.28779602]
[109.01849365 176.28483582]
[109.31672668 191.28187561]
[112.63094330 199.85379028]
[109.46881104 206.57936096]
[109.46881104 221.57936096]
[109.46881104 236.57936096]
[109.46881104 251.57936096]
[109.46881104 266.57937622]
[109.46881104 281.57937622]
[109.46881104 296.57937622]
[109.46881104 311.57937622]
[109.46881104 326.57937622]
[109.46881104 341.57937622]
[124.09337616 345.21359253]
[137.41505432 352.23822021]
[148.66148376 362.24105835]
[157.18182373 374.63745117]
[162.48437500 388.70428467]
[164.26496887 403.62240601]
[162.42442322 418.52410889]
[157.07402039 432.54370117]
[148.52883911 444.86782837]
[137.28915405 454.78253174]
[124.01120758 461.71478271]
[109.46881104 465.26544189]
[109.46881104 480.26544189]
[109.46881104 495.26544189]
[109.46881104 510.26544189]
[109.46881104 525.26544189]
[120.36336517 536.39855957]
[120.14968872 551.61071777]
[109.46881104 561.92840576]
[109.46881104 576.92840576]
[109.46881104 591.92840576]
[109.46881104 606.92840576]
[109.61793518 621.92761230]
[109.91616821 636.92468262]
[117.92631531 650.56829834]
[110.44359589 663.44689941]
[110.74182892 678.44390869]
[113.31511688 697.65399170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[4 153]
[5 152]
[7 151]
[8 150]
[9 149]
[10 148]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[39 118]
[40 117]
[41 116]
[42 115]
[53 94]
[54 93]
[55 91]
[56 90]
[57 89]
[60 87]
[61 86]
[62 85]
[63 84]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
