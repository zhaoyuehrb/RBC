%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGUGAGGAGAUUCUAUGUAUCAACAGAAAGAACAAAGAUCAGGGCUGCCUAAUUGCUGACAUGAUGGGACUCACCGAGGGGGUGUUCCUGAUUCUGUCUGGCACUCAGUUCACACUGGGAAUUCUGGUCAAUUGUUUCAUUGAGUUGGUCAAUGGUAGCA\
) } def
/len { sequence length } bind def

/coor [
[54.65745926 663.45123291]
[42.94618225 672.99182129]
[29.02086830 678.84521484]
[14.01037884 680.53692627]
[-0.86845231 677.92980957]
[-14.40946579 671.23522949]
[-25.51495171 660.99584961]
[-33.28464127 648.04174805]
[-37.08867264 633.42303467]
[-36.61867905 618.32482910]
[-31.91275597 603.97106934]
[-23.35239029 591.52532959]
[-11.63153648 581.99652100]
[2.29965019 576.15710449]
[17.31183052 574.48046875]
[19.90073586 559.70556641]
[22.48963928 544.93066406]
[25.07854271 530.15576172]
[16.33872223 518.14947510]
[18.75376511 503.12875366]
[31.40633202 494.04302979]
[33.99523544 479.26812744]
[36.58414078 464.49325562]
[39.17304230 449.71835327]
[41.76194763 434.94345093]
[44.35084915 420.16854858]
[35.61103058 408.16226196]
[38.02607346 393.14154053]
[50.67863846 384.05581665]
[53.26754379 369.28091431]
[46.35556030 353.17266846]
[58.23368073 339.13073730]
[60.53735733 324.30868530]
[62.84103012 309.48663330]
[65.14470673 294.66458130]
[67.44837952 279.84255981]
[69.75205994 265.02050781]
[62.53091431 249.04846191]
[74.13620758 234.78021240]
[76.15380096 219.91651917]
[78.17139435 205.05282593]
[80.18898010 190.18914795]
[82.20657349 175.32545471]
[84.22416687 160.46176147]
[86.24176025 145.59806824]
[88.25934601 130.73437500]
[79.79918671 126.64685059]
[72.71474457 120.24607086]
[67.63319397 111.98407745]
[65.03585815 102.48111725]
[65.21375275 92.47927094]
[68.23760986 82.78458405]
[73.94544220 74.20204926]
[81.94911194 67.46889496]
[91.65991211 63.19155121]
[102.33151245 61.79171371]
[101.75344849 46.80285645]
[101.17538452 31.81399727]
[100.59732056 16.82514000]
[99.87483978 1.84254932]
[99.00801086 -13.13238335]
[98.14118195 -28.10731697]
[97.27435303 -43.08224869]
[88.75249481 -56.41223145]
[95.74137878 -69.56536102]
[94.87454987 -84.54029083]
[94.00772095 -99.51522827]
[92.99662781 -114.48110962]
[91.84135437 -129.43655396]
[90.68608856 -144.39199829]
[89.53081512 -159.34744263]
[80.24273682 -168.34205627]
[79.61299896 -180.85421753]
[87.43401337 -190.12162781]
[86.56719208 -205.09655762]
[85.70036316 -220.07148743]
[84.83353424 -235.04643250]
[73.85726929 -246.74690247]
[76.30397797 -262.60229492]
[90.29676056 -270.44967651]
[105.10154724 -264.26922607]
[109.36137390 -248.80206299]
[99.80846405 -235.91325378]
[100.67529297 -220.93832397]
[101.54212189 -205.96339417]
[102.40895081 -190.98844910]
[112.82932281 -176.89353943]
[104.48625946 -160.50271606]
[105.64153290 -145.54727173]
[106.79679871 -130.59182739]
[107.95207214 -115.63638306]
[111.62017822 -109.17864227]
[108.98265076 -100.38205719]
[109.84947968 -85.40711975]
[110.71630859 -70.43218994]
[119.17617035 -58.17331314]
[112.24929047 -43.94907761]
[113.11611938 -28.97414398]
[113.98294830 -13.99921131]
[114.84976959 0.97572172]
[118.39274597 7.50295687]
[115.58617401 16.24707603]
[116.16423798 31.23593330]
[116.74230194 46.22478867]
[117.32036591 61.21364594]
[129.72169495 69.65206909]
[143.87654114 64.68814087]
[158.03137207 59.72420883]
[172.18620300 54.76028061]
[186.34104919 49.79634857]
[200.49588013 44.83241653]
[210.76809692 32.04907990]
[226.93136597 34.82046890]
[232.35830688 50.29561996]
[221.46615601 62.55502319]
[205.45980835 58.98725510]
[191.30497742 63.95118332]
[177.15014648 68.91511536]
[162.99530029 73.87904358]
[148.84046936 78.84297943]
[134.68562317 83.80690765]
[135.75386047 107.27458191]
[123.20239258 125.79313660]
[103.12303925 132.75196838]
[101.10544586 147.61566162]
[99.08786011 162.47935486]
[97.07026672 177.34304810]
[95.05267334 192.20672607]
[93.03507996 207.07041931]
[91.01749420 221.93411255]
[88.99990082 236.79780579]
[96.18733215 247.54545593]
[94.17010498 259.91000366]
[84.57410431 267.32418823]
[82.27043152 282.14620972]
[79.96675110 296.96826172]
[77.66307831 311.79031372]
[75.35940552 326.61236572]
[73.05572510 341.43441772]
[80.03469086 352.31857300]
[77.77954102 364.64193726]
[68.04244232 371.86981201]
[65.45353699 386.64471436]
[74.26309204 399.49108887]
[71.42710114 414.43804932]
[59.12574768 422.75744629]
[56.53684235 437.53234863]
[53.94794083 452.30725098]
[51.35903549 467.08215332]
[48.77013397 481.85705566]
[46.18122864 496.63192749]
[54.99078369 509.47833252]
[52.15479279 524.42529297]
[39.85343933 532.74468994]
[37.26453781 547.51959229]
[34.67563248 562.29449463]
[32.08672714 577.06939697]
[45.63446045 583.75036621]
[56.75022888 593.97857666]
[64.53292084 606.92486572]
[68.35164642 621.53973389]
[67.89681244 636.63836670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 157]
[16 156]
[17 155]
[18 154]
[21 151]
[22 150]
[23 149]
[24 148]
[25 147]
[26 146]
[29 143]
[30 142]
[32 139]
[33 138]
[34 137]
[35 136]
[36 135]
[37 134]
[39 131]
[40 130]
[41 129]
[42 128]
[43 127]
[44 126]
[45 125]
[46 124]
[56 105]
[57 104]
[58 103]
[59 102]
[60 100]
[61 99]
[62 98]
[63 97]
[65 95]
[66 94]
[67 93]
[68 91]
[69 90]
[70 89]
[71 88]
[74 86]
[75 85]
[76 84]
[77 83]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
