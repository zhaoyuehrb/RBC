%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUUAGAAAACUUUUUAUUGUUCUACUUUUGUUGCUUGUGACUAUAGAAGAAGCAAGGAUGUCAUCGCUCAGUUUUCUGAAUAUAGAGAAGACUGAAA\
) } def
/len { sequence length } bind def

/coor [
[105.70190430 157.12055969]
[94.29809570 157.12055969]
[83.11930084 154.86631775]
[72.60670471 150.44679260]
[63.17517853 144.03639221]
[55.19692993 135.88810730]
[42.36485672 143.65583801]
[29.53277969 151.42358398]
[16.70070457 159.19132996]
[13.03237152 165.03619385]
[7.72126913 167.62500000]
[2.82047033 167.01434326]
[-10.46969986 173.96929932]
[-12.59680080 189.33988953]
[-23.37651062 200.50131226]
[-38.66381073 203.16178894]
[-52.58042145 196.29829407]
[-59.77512360 182.54998779]
[-57.48140717 167.20336914]
[-46.58124924 156.15954590]
[-31.26598930 153.66506958]
[-17.42465210 160.67912292]
[-4.13448238 153.72416687]
[8.93296146 146.35925293]
[21.76503563 138.59150696]
[34.59711075 130.82377625]
[47.42918396 123.05602264]
[42.60705948 101.14945984]
[46.54818726 79.06738281]
[58.65080261 60.18147659]
[77.06697083 47.37541199]
[72.92244720 32.95935059]
[61.67334366 21.83423424]
[65.59287262 7.46459341]
[61.44834518 -6.95147085]
[57.30381775 -21.36753464]
[53.15929031 -35.78359985]
[49.01476669 -50.19966507]
[44.87023926 -64.61573029]
[29.78228188 -66.68296051]
[16.84298897 -74.71380615]
[8.29416752 -87.31688690]
[5.61695623 -102.30863190]
[9.27519608 -117.09162903]
[18.63507652 -129.10464478]
[32.07493973 -136.26634216]
[47.26625061 -137.33592224]
[61.57701874 -132.12806702]
[72.52782440 -121.54507446]
[78.22136688 -107.42050171]
[77.67120361 -92.20153046]
[70.97266388 -78.52492523]
[59.28630447 -68.76025391]
[63.43082809 -54.34418869]
[67.57535553 -39.92812347]
[71.71987915 -25.51206017]
[75.86441040 -11.09599686]
[80.00893402 3.32006717]
[90.96159363 13.41404915]
[87.33851624 28.81482315]
[91.48303986 43.23088837]
[103.69342041 42.71449280]
[115.73640442 44.79459763]
[127.06611633 49.37692261]
[137.16905212 56.25376892]
[145.58726501 65.11344147]
[151.93920898 75.55436707]
[155.93698120 87.10330200]
[157.39936829 99.23679352]
[156.26010132 111.40487671]
[152.57081604 123.05602264]
[165.40289307 130.82377625]
[178.23497009 138.59150696]
[191.06703186 146.35925293]
[203.89910889 154.12699890]
[216.73118591 161.89474487]
[229.56326294 169.66249084]
[242.39533997 177.43023682]
[255.22741699 185.19798279]
[268.05947876 192.96572876]
[282.31011963 186.82574463]
[297.44067383 190.26753235]
[307.63314819 201.96766663]
[308.96832275 217.42718506]
[300.93283081 230.70161438]
[286.61642456 236.68663025]
[271.52410889 233.08090210]
[261.45913696 221.27090454]
[260.29174805 205.79780579]
[247.45967102 198.03005981]
[234.62759399 190.26231384]
[221.79551697 182.49456787]
[208.96343994 174.72682190]
[196.13136292 166.95907593]
[183.29930115 159.19132996]
[170.46722412 151.42358398]
[157.63514709 143.65583801]
[144.80307007 135.88810730]
[136.82482910 144.03639221]
[127.39329529 150.44679260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 27]
[7 26]
[8 25]
[9 24]
[12 23]
[13 22]
[31 61]
[32 60]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[71 98]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
