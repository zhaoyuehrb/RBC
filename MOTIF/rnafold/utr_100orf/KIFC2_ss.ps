%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACUGCGGCGGGCGGGCGCCGAGUCUGGGCGCGGGGACGCGGGGCGGCGCGAAGCGGGGCCCUCUGCCGCCCCGCGCUCCCAUGUACGCCUUUUACUCGUUGCUCAUCUACAUCUUCUACAGCCUCUUCCGCAGGGAUGGUGGCGCCGCGGCGGCCGCGGAGCCCGGGGACCCCGCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[96.35807800 287.93478394]
[80.57451630 287.12561035]
[70.04819489 275.33697510]
[71.02419281 259.56283569]
[82.92346191 249.16174316]
[83.69145203 234.18142700]
[84.45944214 219.20109558]
[81.65521240 212.34365845]
[85.37058258 203.97221375]
[86.39421844 189.00718689]
[87.41785431 174.04216003]
[88.44149017 159.07711792]
[89.46512604 144.11209106]
[90.48876190 129.14706421]
[72.89914703 114.33731842]
[70.55274200 91.46337128]
[57.60525894 83.88955688]
[44.65777206 76.31575012]
[31.71028709 68.74193573]
[18.76280022 61.16812897]
[2.94424105 60.87870789]
[-4.13478136 47.77387238]
[-17.08226776 40.20006180]
[-30.02975273 32.62625122]
[-42.97724152 25.05244255]
[-55.92472458 17.47863197]
[-72.75077057 22.22252464]
[-87.51730347 13.51137257]
[-91.34921265 -2.85302758]
[-104.42411804 -10.20468044]
[-117.49902344 -17.55633354]
[-130.57392883 -24.90798759]
[-143.64883423 -32.25963974]
[-156.84735107 -39.38699341]
[-170.16563416 -46.28796768]
[-183.54234314 -53.07499695]
[-196.97650146 -59.74758530]
[-210.41065979 -66.42017365]
[-223.84481812 -73.09275818]
[-237.33544922 -79.65041351]
[-250.88156128 -86.09266663]
[-264.42767334 -92.53491974]
[-277.97381592 -98.97716522]
[-291.51992798 -105.41941833]
[-305.06604004 -111.86167145]
[-318.61218262 -118.30392456]
[-332.15829468 -124.74617767]
[-345.70440674 -131.18843079]
[-359.25051880 -137.63067627]
[-372.79666138 -144.07293701]
[-386.34277344 -150.51518250]
[-395.46075439 -151.37956238]
[-400.06375122 -157.18479919]
[-413.49789429 -163.85739136]
[-431.83242798 -162.26991272]
[-440.98068237 -177.23388672]
[-454.52679443 -183.67613220]
[-471.42752075 -185.01847839]
[-474.81622314 -201.63031006]
[-459.79165649 -209.48519897]
[-448.08453369 -197.22224426]
[-434.53842163 -190.77999878]
[-423.02362061 -194.53471375]
[-411.67755127 -189.25906372]
[-406.82531738 -177.29154968]
[-393.39114380 -170.61895752]
[-379.90051270 -164.06130981]
[-366.35440063 -157.61904907]
[-352.80828857 -151.17680359]
[-339.26214600 -144.73454285]
[-325.71603394 -138.29229736]
[-312.16992188 -131.85005188]
[-298.62380981 -125.40779114]
[-285.07766724 -118.96553802]
[-271.53155518 -112.52329254]
[-257.98544312 -106.08103943]
[-244.43931580 -99.63878632]
[-230.89318848 -93.19653320]
[-223.48461914 -93.16307068]
[-217.17222595 -86.52691650]
[-203.73806763 -79.85432434]
[-190.30390930 -73.18173981]
[-176.86975098 -66.50915527]
[-169.46282959 -66.34921265]
[-163.26466370 -59.60624695]
[-149.94638062 -52.70527267]
[-145.18322754 -53.27909088]
[-140.01216125 -50.85016632]
[-136.29718018 -45.33454895]
[-123.22228241 -37.98289490]
[-110.14736938 -30.63124084]
[-97.07246399 -23.27958870]
[-83.99755859 -15.92793465]
[-72.18456268 -21.10864830]
[-59.35459137 -18.49326134]
[-50.24501038 -8.81846523]
[-48.35091782 4.53114557]
[-35.40343094 12.10495567]
[-22.45594406 19.67876625]
[-9.50845718 27.25257683]
[3.43902898 34.82638550]
[18.33149719 34.57407761]
[26.33661079 48.22064209]
[39.28409576 55.79445267]
[52.23158264 63.36826324]
[65.17906952 70.94207001]
[78.12655640 78.51588440]
[85.13591003 73.18444824]
[93.37161255 70.06541443]
[102.15418243 69.41610718]
[110.75903320 71.29010010]
[118.47621155 75.53278351]
[124.66902161 81.79411316]
[128.82653809 89.55751038]
[130.60574341 98.18244934]
[145.34196472 100.98310852]
[160.07818604 103.78376007]
[174.81442261 106.58441925]
[189.55064392 109.38507080]
[195.21127319 100.67411804]
[204.47735596 94.75955200]
[215.95747375 93.11280060]
[227.67672729 96.51425934]
[237.41651917 104.83274078]
[252.23976135 102.53683472]
[267.06301880 100.24092102]
[272.98666382 91.08265686]
[282.77688599 86.79695892]
[293.09069824 88.58280945]
[300.54968262 95.60939026]
[315.44268799 93.82089996]
[330.33566284 92.03240967]
[343.12716675 81.77033997]
[358.30990601 87.96839905]
[360.26522827 104.25055695]
[346.98162842 113.86712646]
[332.12417603 106.92540741]
[317.23117065 108.71389771]
[302.33816528 110.50238800]
[287.78158569 123.20902252]
[269.35891724 115.06417084]
[254.53567505 117.36008453]
[239.71241760 119.65599823]
[236.53532410 134.31567383]
[249.07804871 142.54244995]
[261.62078857 150.76922607]
[277.40377808 151.86816406]
[283.80255127 165.31825256]
[296.34530640 173.54502869]
[308.88803101 181.77180481]
[321.43075562 189.99858093]
[333.97348022 198.22535706]
[346.51620483 206.45214844]
[363.07675171 210.08329773]
[364.17190552 227.00184631]
[348.21771240 232.73771667]
[338.28942871 218.99487305]
[325.74670410 210.76809692]
[313.20397949 202.54132080]
[300.66125488 194.31454468]
[288.11849976 186.08776855]
[275.57577515 177.86097717]
[260.68994141 177.35047913]
[253.39401245 163.31195068]
[240.85127258 155.08517456]
[228.30854797 146.85839844]
[199.28434753 146.29396057]
[186.74998474 124.12129974]
[172.01376343 121.32064056]
[157.27754211 118.51998901]
[142.54130554 115.71932983]
[127.80508423 112.91867065]
[118.73355865 124.27073669]
[105.45379639 130.17070007]
[104.43015289 145.13572693]
[103.40651703 160.10076904]
[102.38288116 175.06579590]
[101.35924530 190.03082275]
[100.33560944 204.99584961]
[99.43976593 219.96908569]
[98.67177582 234.94940186]
[97.90379333 249.92973328]
[108.67701721 261.49316406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 182]
[6 181]
[7 180]
[9 179]
[10 178]
[11 177]
[12 176]
[13 175]
[14 174]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[22 101]
[23 100]
[24 99]
[25 98]
[26 97]
[29 93]
[30 92]
[31 91]
[32 90]
[33 89]
[34 86]
[35 85]
[36 83]
[37 82]
[38 81]
[39 80]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[53 66]
[54 65]
[56 62]
[57 61]
[115 172]
[116 171]
[117 170]
[118 169]
[119 168]
[124 143]
[125 142]
[126 141]
[130 139]
[131 138]
[132 137]
[144 166]
[145 165]
[146 164]
[148 162]
[149 161]
[150 160]
[151 159]
[152 158]
[153 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
