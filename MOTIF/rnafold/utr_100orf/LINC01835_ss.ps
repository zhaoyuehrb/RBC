%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGAUUGAAGGCAGGGAUGCUAGCAGCAAGGACCCCAAAGAAUUAUCAGCAUUGGGGCCCAAACUUCCCCCCAGGCUGGGGGAAACUGGACUUCCUGACAUCAACUAACCAGGCGA\
) } def
/len { sequence length } bind def

/coor [
[115.27059937 438.64782715]
[112.47752380 423.77996826]
[114.41758728 408.77691650]
[120.90072632 395.10855103]
[131.29177856 384.11395264]
[144.57275391 376.87026978]
[141.79342651 362.13000488]
[139.01409912 347.38973999]
[136.23475647 332.64947510]
[122.71480560 326.45684814]
[115.34664154 313.33532715]
[117.13868713 298.21441650]
[127.61183167 286.91754150]
[124.83250427 272.17727661]
[122.05317688 257.43701172]
[119.27384186 242.69674683]
[116.49451447 227.95649719]
[113.71517944 213.21623230]
[101.30751038 205.05625916]
[98.27889252 190.14712524]
[106.92195129 177.18814087]
[104.14262390 162.44787598]
[101.36328888 147.70761108]
[98.58396149 132.96736145]
[88.56282043 130.95225525]
[79.63916779 125.96705627]
[72.66929626 118.49011230]
[68.32202148 109.23889923]
[67.01449585 99.10113525]
[68.87218475 89.04962921]
[73.71682739 80.04889679]
[64.14316559 68.50138092]
[49.37885284 62.81583023]
[47.21218109 48.07965469]
[37.63851929 36.53214645]
[28.06485558 24.98463631]
[18.49119186 13.43712711]
[8.91752911 1.88961732]
[-0.65613329 -9.65789223]
[-15.30823803 -5.50629950]
[-30.38128090 -7.67960405]
[-43.26376724 -15.80126858]
[-51.72372818 -28.46416473]
[-54.29542542 -43.47437286]
[-50.53329468 -58.23127747]
[-41.08914566 -70.17816162]
[-27.59924126 -77.24514771]
[-12.40078449 -78.20784760]
[1.87300003 -72.89945984]
[12.74909210 -62.23970032]
[18.34314346 -48.07543182]
[17.68595123 -32.86070251]
[10.89137650 -19.23155594]
[20.46503830 -7.68404531]
[30.03870201 3.86346436]
[39.61236572 15.41097450]
[49.18602753 26.95848465]
[58.75968933 38.50599289]
[72.83923340 43.36559296]
[75.69067383 58.92772293]
[85.26434326 70.47523499]
[92.14093781 67.95180511]
[99.40480804 67.00761414]
[106.69800568 67.68919373]
[113.66114807 69.96294403]
[119.95110321 73.71682739]
[131.49861145 64.14316559]
[143.04612732 54.56950378]
[154.59362793 44.99584198]
[166.14114380 35.42218018]
[177.68865967 25.84851646]
[189.23616028 16.27485466]
[190.45698547 0.51778775]
[202.51634216 -9.69727707]
[218.25962830 -8.30992508]
[228.34661865 3.85675383]
[226.79289246 19.58448410]
[214.52024841 29.54228210]
[198.80982971 27.82236290]
[187.26231384 37.39602661]
[175.71481323 46.96968842]
[164.16729736 56.54335022]
[152.61978149 66.11701202]
[141.07228088 75.69067383]
[129.52476501 85.26434326]
[131.04100037 111.19412231]
[113.32421875 130.18801880]
[116.10355377 144.92828369]
[118.88288116 159.66854858]
[121.66221619 174.40881348]
[134.43095398 183.33052063]
[137.03961182 198.31883240]
[128.45544434 210.43690491]
[131.23477173 225.17715454]
[134.01409912 239.91741943]
[136.79344177 254.65768433]
[139.57276917 269.39794922]
[142.35209656 284.13821411]
[156.21998596 290.84548950]
[163.39543152 304.27554321]
[161.31152344 319.17929077]
[150.97502136 329.87014771]
[153.75434875 344.61041260]
[156.53369141 359.35067749]
[159.31301880 374.09094238]
[174.31993103 376.00082397]
[188.00129700 382.45648193]
[199.01675415 392.82540894]
[206.28712463 406.09179688]
[209.10012817 420.95593262]
[207.18017578 435.96154785]
[200.71536255 449.63861084]
[190.33903503 460.64709473]
[177.06779480 467.90859985]
[162.20178223 470.71163940]
[147.19744873 468.78161621]
[133.52473450 462.30764771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 105]
[7 104]
[8 103]
[9 102]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[21 90]
[22 89]
[23 88]
[24 87]
[31 61]
[32 60]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
