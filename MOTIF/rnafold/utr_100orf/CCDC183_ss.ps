%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUGAGCCCAGGGAGGCUUUGAGGUACACAGGGUCCCUUGGGGGGCCUGAGAGCAGCCAUGAGGAGGCACAGUGAGACAGAUGUGGAAGAGCAGACCCAGGAGCUGAAGACCAUCACUCAGCUCCAGGAGCAGUGUCGGGCACUCCAGAUCCAAGGGG\
) } def
/len { sequence length } bind def

/coor [
[65.91709137 131.00929260]
[59.02796173 121.08345795]
[54.95586395 109.70804596]
[39.97370529 110.43949127]
[24.99155235 111.17093658]
[10.00939560 111.90238190]
[-3.39706421 120.30342102]
[-16.48649025 113.19594574]
[-31.46864700 113.92739105]
[-46.45080185 114.65884399]
[-61.39301300 115.97427368]
[-76.27252197 117.87169647]
[-88.98311615 127.29249573]
[-102.58687592 121.22727966]
[-117.46638489 123.12469482]
[-127.13198090 135.34002686]
[-142.24894714 137.05230713]
[-153.83482361 127.76236725]
[-168.71432495 129.65979004]
[-183.59384155 131.55720520]
[-198.47335815 133.45462036]
[-213.35285950 135.35205078]
[-226.06344604 144.77284241]
[-239.66722107 138.70762634]
[-254.54672241 140.60504150]
[-269.42623901 142.50247192]
[-284.30575562 144.39988708]
[-292.21395874 159.32438660]
[-307.30175781 166.53982544]
[-323.55798340 163.39028931]
[-334.63510132 151.30662537]
[-349.47476196 153.49401855]
[-364.31442261 155.68139648]
[-379.15408325 157.86878967]
[-391.66564941 168.47032166]
[-407.00921631 162.68179321]
[-409.40063477 146.45796204]
[-396.37982178 136.48847961]
[-381.34146118 143.02912903]
[-366.50180054 140.84175110]
[-351.66213989 138.65435791]
[-336.82250977 136.46697998]
[-331.74255371 124.09030914]
[-321.11730957 115.78343964]
[-307.66604614 113.80850983]
[-294.89944458 118.78941345]
[-286.20315552 129.52038574]
[-271.32366943 127.62296295]
[-256.44415283 125.72554016]
[-241.56463623 123.82811737]
[-229.91833496 114.54303741]
[-215.25027466 120.47253418]
[-200.37077332 118.57511902]
[-185.49125671 116.67769623]
[-170.61175537 114.78027344]
[-155.73223877 112.88285828]
[-146.84851074 100.98265076]
[-131.78559875 98.84642792]
[-119.36380768 108.24518585]
[-104.48429871 106.34777069]
[-92.83798981 97.06269073]
[-78.16994476 102.99218750]
[-63.29043198 101.09476471]
[-61.46129990 98.90745544]
[-58.63375854 97.33206177]
[-55.04359055 96.76083374]
[-51.06695175 97.49075317]
[-47.18224716 99.67668152]
[-32.20009232 98.94523621]
[-17.21793747 98.21379089]
[-4.88310146 89.86507416]
[9.27794838 96.92022705]
[24.26010513 96.18878174]
[39.24225998 95.45733643]
[54.22441483 94.72589111]
[59.68778229 77.68082428]
[71.23404694 64.00360870]
[87.12093353 55.75804901]
[104.95121002 54.18836594]
[122.03437042 59.53140640]
[135.79266357 70.98094177]
[144.15003967 86.80929565]
[159.02954102 84.91188049]
[173.90905762 83.01445770]
[186.61964417 73.59365845]
[200.22341919 79.65887451]
[215.10292053 77.76145172]
[229.98243713 75.86403656]
[238.14770508 71.65524292]
[245.17042542 74.07768250]
[260.08413696 72.47094727]
[272.97610474 63.29995346]
[286.45895386 69.62944794]
[301.37265015 68.02271271]
[315.95401001 56.81535339]
[331.72103882 64.47126007]
[346.60052490 62.57384109]
[361.48004150 60.67641830]
[376.22305298 57.91171646]
[390.77905273 54.28919983]
[402.30218506 43.44816208]
[416.52130127 47.88278961]
[431.07733154 44.26027298]
[445.63333130 40.63775635]
[460.18933105 37.01523972]
[474.74533081 33.39272308]
[489.30136108 29.77020645]
[503.85736084 26.14768982]
[518.41339111 22.52517128]
[522.57604980 7.74114609]
[533.58428955 -2.96934605]
[548.47686768 -6.72523546]
[563.24780273 -2.51620674]
[573.92370605 8.52553272]
[577.63287354 23.42980957]
[573.37762451 38.18745041]
[562.30242920 48.82872009]
[547.38659668 52.49117279]
[532.64239502 48.18962860]
[522.03588867 37.08118057]
[507.47988892 40.70369720]
[492.92385864 44.32621384]
[478.36785889 47.94873047]
[463.81185913 51.57124710]
[449.25582886 55.19376373]
[434.69982910 58.81628036]
[420.14382935 62.43880081]
[409.66183472 73.02072906]
[394.40158081 68.84520721]
[379.84558105 72.46772003]
[391.91152954 81.37911987]
[394.32028198 96.18444824]
[385.70156860 108.46116638]
[370.95843506 111.22521210]
[358.47805786 102.90416718]
[355.36032104 88.23175049]
[363.37747192 75.55593109]
[348.49795532 77.45334625]
[333.61843872 79.35076904]
[325.94317627 88.74137115]
[313.52624512 90.41833496]
[302.97937012 82.93641663]
[288.06567383 84.54314423]
[276.24041748 93.59922028]
[261.69085693 87.38465118]
[246.77716064 88.99138641]
[231.87985229 90.74354553]
[217.00033569 92.64096069]
[202.12083435 94.53838348]
[190.47451782 103.82346344]
[175.80647278 97.89396667]
[160.92697144 99.79138947]
[146.04745483 101.68880463]
[144.02545166 113.60071564]
[138.97648621 124.57751465]
[131.24768066 133.86447144]
[121.37044525 140.82308960]
[110.02388000 144.97491455]
[97.98812103 146.03446960]
[86.09069061 143.92893982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[8 70]
[9 69]
[10 68]
[11 63]
[12 62]
[14 60]
[15 59]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[24 50]
[25 49]
[26 48]
[27 47]
[31 42]
[32 41]
[33 40]
[34 39]
[82 153]
[83 152]
[84 151]
[86 149]
[87 148]
[88 147]
[90 146]
[91 145]
[93 143]
[94 142]
[96 139]
[97 138]
[98 137]
[99 130]
[100 129]
[102 127]
[103 126]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
