%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGUGAGCGCAGUCUCUACAGAGCGGGCUAUGUGGGCUCGCUUCUGAAUCUGCAGUCGCCAGACUCUUUCUACUUCUCCAACCUGAGGCCGAAUGGCG\
) } def
/len { sequence length } bind def

/coor [
[55.51672363 111.58658600]
[57.04497910 87.52956390]
[43.54493713 80.99129486]
[34.27841568 80.02994537]
[29.73152542 74.03400421]
[16.44135475 67.07904816]
[3.15118504 60.12409592]
[-10.13898563 53.16914368]
[-25.05446815 57.65981674]
[-38.43351364 50.41718292]
[-42.62276459 36.16987610]
[-55.91293716 29.21492386]
[-69.20310974 22.25996971]
[-82.49327850 15.30501747]
[-97.40876007 19.79569054]
[-110.78780365 12.55305672]
[-114.97705841 -1.69425070]
[-128.26722717 -8.64920330]
[-138.90039062 -2.87652278]
[-150.87738037 -3.03701949]
[-161.14248657 -8.97146606]
[-167.13452148 -19.06258583]
[-167.42555237 -30.67399216]
[-180.25762939 -38.44173431]
[-193.08970642 -46.20948029]
[-205.92178345 -53.97722626]
[-218.75386047 -61.74496841]
[-231.58592224 -69.51271057]
[-244.41799927 -77.28045654]
[-257.25009155 -85.04820251]
[-270.08215332 -92.81594849]
[-285.94189453 -90.39762115]
[-297.62271118 -101.39481354]
[-296.16406250 -117.37141418]
[-282.68493652 -126.07155609]
[-267.52532959 -120.82122040]
[-262.31442261 -105.64801788]
[-249.48233032 -97.88027954]
[-236.65025330 -90.11253357]
[-223.81817627 -82.34478760]
[-210.98611450 -74.57704163]
[-198.15403748 -66.80930328]
[-185.32196045 -59.04155350]
[-172.48988342 -51.27381134]
[-159.65780640 -43.50606537]
[-142.33688354 -49.01334000]
[-126.12813568 -40.11660767]
[-121.31227875 -21.93937492]
[-108.02210236 -14.98442078]
[-93.92819214 -19.66386223]
[-80.35099030 -12.79987526]
[-75.53832245 2.01484704]
[-62.24815369 8.96980000]
[-48.95798492 15.92475319]
[-35.66781235 22.87970543]
[-21.57389832 18.20026398]
[-7.99670029 25.06425285]
[-3.18403244 39.87897491]
[10.10613823 46.83392715]
[23.39630890 53.78887939]
[36.68647766 60.74383163]
[50.08320236 67.49125671]
[63.58324432 74.02952576]
[69.01548004 67.28503418]
[75.69107056 61.66897202]
[83.37698364 57.40930557]
[91.79866791 54.68610764]
[100.64984131 53.62408447]
[109.60363007 54.28705215]
[118.32464600 56.67466736]
[126.48152161 60.72153091]
[133.75952148 66.29875946]
[139.87266541 73.21796417]
[144.57493591 81.23755646]
[147.67008972 90.07117462]
[149.01979065 99.39782715]
[148.54960632 108.87362671]
[146.25262451 118.14440918]
[159.54280090 125.09936523]
[172.83296204 132.05432129]
[187.83926392 127.09584045]
[201.91873169 134.27525330]
[206.71827698 149.33314514]
[199.39041138 163.33592224]
[184.28262329 167.97599792]
[170.35809326 160.50048828]
[165.87800598 145.34448242]
[152.58784485 138.38954163]
[139.29766846 131.43458557]
[128.28678894 141.62088013]
[134.18829346 155.41116333]
[140.08979797 169.20146179]
[153.53289795 178.59376526]
[151.85108948 194.90644836]
[136.77449036 201.35841370]
[123.81259918 191.31245422]
[126.29950714 175.10296631]
[120.39800262 161.31266785]
[114.49649811 147.52238464]
[88.42436981 147.04205322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[5 61]
[6 60]
[7 59]
[8 58]
[11 55]
[12 54]
[13 53]
[14 52]
[17 49]
[18 48]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[78 89]
[79 88]
[80 87]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
