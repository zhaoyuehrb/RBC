%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCAGCAGGCCUGCCGGGCCCAGCGCGAGCUCCUCUCCACUGUGCACCAUGGUCCAGCGGUGGCUGCUGCUGUCCUGCUGCGGAGCCCUGCUCAGCGCUGGUCUGGCUAACACCUCCUACACCAGCCCAGGCCUCCAGAGGCUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[233.98849487 551.59930420]
[236.19322205 536.11791992]
[247.86784363 525.71417236]
[247.24797058 510.72698975]
[246.62809753 495.73980713]
[246.00822449 480.75262451]
[229.90371704 471.39529419]
[222.56587219 454.11410522]
[227.08879089 435.73910522]
[241.83993530 423.64953613]
[240.29257202 408.72955322]
[238.74519348 393.80960083]
[237.19783020 378.88961792]
[235.65045166 363.96963501]
[234.10308838 349.04965210]
[229.37947083 334.81283569]
[221.70118713 321.92703247]
[214.02291870 309.04119873]
[206.34463501 296.15539551]
[198.66636658 283.26959229]
[190.98808289 270.38378906]
[183.30981445 257.49798584]
[175.63153076 244.61216736]
[169.46688843 240.44972229]
[167.93089294 231.37974548]
[160.52056885 218.33799744]
[153.11024475 205.29626465]
[145.69992065 192.25451660]
[138.28959656 179.21276855]
[130.74488831 166.24830627]
[123.06661224 153.36250305]
[115.38833618 140.47668457]
[107.71006012 127.59088135]
[92.91593933 127.75820160]
[80.01124573 120.52197266]
[72.43787384 107.81221008]
[72.21575165 93.01880646]
[79.40412903 80.08739471]
[71.72585297 67.20159149]
[64.04757690 54.31578064]
[56.36930466 41.42996979]
[49.88260651 54.95486450]
[35.31299210 58.52226257]
[23.31151390 49.52423859]
[22.65179825 34.53874969]
[33.81612778 24.52088165]
[48.64347076 26.79455376]
[42.33543396 13.18541431]
[36.02739716 -0.42372513]
[23.20406342 -9.69047737]
[24.87165451 -24.49143600]
[18.56361771 -38.10057449]
[12.07456493 -44.62099075]
[12.26909351 -52.05678177]
[6.24366188 -65.79338074]
[-5.50032473 -71.22544861]
[-10.21937943 -82.84119415]
[-5.87768984 -94.17407990]
[-11.61794090 -108.03227234]
[-17.35819244 -121.89046478]
[-23.09844398 -135.74865723]
[-28.83869553 -149.60685730]
[-34.57894897 -163.46504211]
[-40.31919861 -177.32324219]
[-53.65182495 -186.87170410]
[-51.77986145 -203.16365051]
[-36.62902451 -209.43933105]
[-23.78519630 -199.24285889]
[-26.46100616 -183.06349182]
[-20.72075462 -169.20529175]
[-14.98050308 -155.34710693]
[-9.24025154 -141.48890686]
[-3.49999976 -127.63072205]
[2.24025178 -113.77252960]
[7.98050308 -99.91433716]
[22.45304298 -90.03668213]
[19.98026276 -71.81880951]
[26.00569344 -58.08221436]
[32.17275620 -44.40861511]
[38.48079300 -30.79947472]
[50.85293579 -22.50613785]
[49.63653564 -6.73176241]
[55.94457245 6.87737656]
[62.25260925 20.48651505]
[69.25511169 33.75169373]
[76.93338776 46.63750458]
[84.61166382 59.52331161]
[92.28993988 72.40911865]
[107.08406067 72.24179840]
[119.98875427 79.47802734]
[127.56212616 92.18778992]
[127.78424835 106.98119354]
[120.59587097 119.91260529]
[128.27413940 132.79841614]
[135.95242310 145.68421936]
[143.63069153 158.57003784]
[150.75776672 164.38626099]
[151.33132935 171.80244446]
[158.74165344 184.84419250]
[166.15199280 197.88594055]
[173.56231689 210.92767334]
[180.97264099 223.96942139]
[188.51734924 236.93388367]
[196.19561768 249.81970215]
[203.87390137 262.70550537]
[211.55216980 275.59130859]
[219.23043823 288.47714233]
[226.90872192 301.36294556]
[234.58699036 314.24874878]
[242.26527405 327.13455200]
[242.35667419 312.13482666]
[246.41841125 297.69522095]
[254.16026306 284.84750366]
[265.02902222 274.50973511]
[278.24807739 267.42053223]
[292.87286377 264.08651733]
[307.85836792 264.74591064]
[322.13378906 269.35156250]
[334.67910767 277.57440186]
[344.59786987 288.82687378]
[351.18136597 302.30493164]
[353.95913696 317.04547119]
[352.73272705 331.99526978]
[347.58975220 346.08602905]
[338.89770508 358.31094360]
[327.27767944 367.79644775]
[313.55996704 373.86480713]
[298.72479248 376.08233643]
[283.83218384 374.29064941]
[269.94628906 368.61773682]
[258.05932617 359.46896362]
[249.02305603 347.50228882]
[250.57043457 362.42227173]
[252.11779785 377.34225464]
[253.66517639 392.26220703]
[255.21253967 407.18218994]
[256.75991821 422.10217285]
[267.62649536 426.07730103]
[276.16589355 433.80856323]
[281.15341187 444.13494873]
[281.89340210 455.52716064]
[278.31613159 466.31414795]
[270.98223877 474.92819214]
[260.99542236 480.13275146]
[261.61529541 495.11993408]
[262.23516846 510.10711670]
[262.85504150 525.09429932]
[275.34890747 534.49841309]
[278.82455444 549.74487305]
[271.64089966 563.63470459]
[257.18978882 569.60968018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 147]
[4 146]
[5 145]
[6 144]
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[21 105]
[22 104]
[23 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[30 96]
[31 95]
[32 94]
[33 93]
[38 88]
[39 87]
[40 86]
[41 85]
[47 84]
[48 83]
[49 82]
[51 80]
[52 79]
[54 78]
[55 77]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
