%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUGCCCCCUUUACCCCGGGCCGCGCCCCGGGGCCCCGCACUGACGGCCCAUGGCGCCGCCAGCCGCCCGCCUCGCCCUGCUCUCCGCCGCGGCGCUCACGCUGGCGGCCCGGCCCGCGCCUAGCCCCGGCCUCGGCCCCGGACCCGAGU\
) } def
/len { sequence length } bind def

/coor [
[-27.91923714 386.03887939]
[-29.29585266 371.10336304]
[-38.16206741 383.20254517]
[-47.02828598 395.30172729]
[-55.89450455 407.40090942]
[-57.81052399 423.10568237]
[-71.57437134 428.79827881]
[-80.44058990 440.89746094]
[-89.30680847 452.99664307]
[-98.17302704 465.09582520]
[-91.90995026 479.11968994]
[-93.51387787 494.39462280]
[-102.55335236 506.81167603]
[-116.59680176 513.03076172]
[-131.86660767 511.37896729]
[-144.25527954 502.30062866]
[-150.43031311 488.23773193]
[-148.73066711 472.97317505]
[-139.61352539 460.61303711]
[-125.53136444 454.48211670]
[-110.27220917 456.22958374]
[-101.40599060 444.13040161]
[-92.53977203 432.03121948]
[-83.67355347 419.93203735]
[-82.39170837 405.09271240]
[-67.99368286 398.53469849]
[-59.12746811 386.43551636]
[-50.26124954 374.33633423]
[-41.39503479 362.23715210]
[-40.51838684 352.06945801]
[-31.23077202 345.30358887]
[-24.72251701 331.78906250]
[-18.21426010 318.27453613]
[-11.70600414 304.76000977]
[-5.19774818 291.24545288]
[1.31050789 277.73092651]
[7.81876373 264.21640015]
[14.32701969 250.70185852]
[5.89142704 239.92059326]
[2.92232132 226.48934937]
[6.05741549 213.02780151]
[14.73807812 202.18692017]
[27.30788612 196.12687683]
[41.32847977 196.08674622]
[48.11105728 182.70779419]
[54.89363480 169.32882690]
[51.43078995 157.69917297]
[57.02136993 146.47895813]
[69.14328766 141.95809937]
[76.19736481 128.72027588]
[83.25144958 115.48244476]
[77.86550903 105.50314331]
[77.95106506 94.16349792]
[83.48696899 84.26659393]
[93.10478210 78.25888062]
[104.42704010 77.62542725]
[112.01520538 64.68634796]
[119.60336304 51.74726486]
[127.19152069 38.80818176]
[134.77967834 25.86910248]
[134.45223999 7.48573112]
[149.98179626 -0.63211322]
[157.30444336 -13.72328949]
[164.62707520 -26.81446648]
[163.92471313 -45.18733215]
[179.28544617 -53.62026978]
[186.33952332 -66.85809326]
[193.39360046 -80.09591675]
[200.44767761 -93.33374023]
[207.50175476 -106.57156372]
[214.55583191 -119.80938721]
[214.21733093 -135.62696838]
[227.03094482 -143.22042847]
[234.08502197 -156.45825195]
[226.47973633 -171.53416443]
[229.30877686 -188.01287842]
[241.26730347 -199.45962524]
[257.52493286 -201.52386475]
[264.30752563 -214.90283203]
[263.64642334 -230.71022034]
[276.30249023 -238.56347656]
[283.08505249 -251.94242859]
[289.86764526 -265.32138062]
[296.65023804 -278.70034790]
[289.45782471 -292.44985962]
[291.75411987 -307.79608154]
[302.65612793 -318.83810425]
[317.97183228 -321.32998657]
[331.81198120 -314.31359863]
[338.85479736 -300.48687744]
[336.39215088 -285.16647339]
[325.37100220 -274.24337769]
[310.02917480 -271.91778564]
[303.24661255 -258.53881836]
[296.46401978 -245.15985107]
[289.68145752 -231.78088379]
[290.82766724 -216.93045044]
[277.68649292 -208.12023926]
[270.90390015 -194.74128723]
[278.07766724 -183.44227600]
[278.72149658 -169.96522522]
[272.55923462 -157.84046936]
[261.11169434 -150.29731750]
[247.32284546 -149.40417480]
[240.26876831 -136.16635132]
[241.11183167 -121.29562378]
[227.79365540 -112.75531006]
[220.73957825 -99.51748657]
[213.68550110 -86.27966309]
[206.63142395 -73.04183960]
[199.57734680 -59.80401230]
[192.52326965 -46.56618881]
[195.74816895 -34.86832047]
[189.92987061 -23.76447105]
[177.71826172 -19.49182320]
[170.39561462 -6.40064669]
[163.07296753 6.69052982]
[166.05857849 18.45174789]
[160.01499939 29.43460083]
[147.71876526 33.45726395]
[140.13059998 46.39634323]
[132.54244995 59.33542633]
[124.95428467 72.27450562]
[117.36611938 85.21358490]
[122.68299103 102.38791656]
[113.90631104 118.07856750]
[96.48927307 122.53652191]
[89.43518829 135.77435303]
[82.38111115 149.01217651]
[83.45811462 167.36688232]
[68.27259827 176.11140442]
[61.49002075 189.49037170]
[54.70743942 202.86932373]
[63.87550735 216.59503174]
[64.88261414 232.97640991]
[57.54911041 247.55439758]
[43.95287323 256.40826416]
[27.84155273 257.21011353]
[21.33329773 270.72463989]
[14.82504082 284.23919678]
[8.31678486 297.75372314]
[1.80852866 311.26824951]
[-4.69972754 324.78277588]
[-11.20798302 338.29730225]
[-17.71623993 351.81185913]
[-3.88673878 346.00280762]
[11.03198242 347.56222534]
[23.36127090 356.10556030]
[30.06097603 369.52621460]
[29.47908783 384.51492310]
[21.75908661 397.37579346]
[8.80456734 404.93756104]
[-6.19014835 405.33566284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[7 24]
[8 23]
[9 22]
[10 21]
[31 145]
[32 144]
[33 143]
[34 142]
[35 141]
[36 140]
[37 139]
[38 138]
[44 133]
[45 132]
[46 131]
[49 129]
[50 128]
[51 127]
[56 124]
[57 123]
[58 122]
[59 121]
[60 120]
[62 117]
[63 116]
[64 115]
[66 112]
[67 111]
[68 110]
[69 109]
[70 108]
[71 107]
[73 105]
[74 104]
[78 99]
[79 98]
[81 96]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
