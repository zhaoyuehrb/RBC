%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGAAGGCAUGGCGCGUACGAAGCAGACUGCUCGCAAGUCCACCGGCGGCAAGGCUCCGCGCAAGCAGCUGGCCACCAAGGCGGCUCGGAAGAGCGCUCCGGCCACCG\
) } def
/len { sequence length } bind def

/coor [
[106.54629517 155.99749756]
[93.32723999 163.08668518]
[78.34825134 162.29307556]
[65.95228577 153.84677124]
[59.73339081 140.19667053]
[61.49465561 125.30042267]
[70.72542572 113.47702026]
[84.74691772 108.15470886]
[69.76042938 108.79132843]
[63.77661133 112.12589264]
[57.91338730 111.86307526]
[53.91305542 109.01560211]
[38.91455460 108.80333710]
[23.91605759 108.59107208]
[15.14391232 111.63348389]
[8.49770927 108.15457916]
[-6.48877478 107.51795959]
[-16.16686058 119.50299072]
[-30.87445259 123.44508362]
[-44.91703415 118.03491211]
[-52.98463058 105.54283905]
[-67.97111511 104.90622711]
[-82.95759583 104.26960754]
[-91.81232452 107.06255341]
[-98.35742188 103.39696503]
[-113.31988525 102.33650208]
[-128.28234863 101.27603149]
[-144.50930786 106.18745422]
[-153.72087097 91.95426941]
[-142.59393311 79.16256714]
[-127.22189331 86.31356812]
[-112.25942230 87.37403107]
[-97.29695892 88.43449402]
[-82.32098389 89.28311920]
[-67.33449554 89.91973877]
[-52.34801102 90.55635834]
[-43.25007629 78.79346466]
[-28.79927063 74.59368134]
[-14.47897530 79.76886749]
[-5.85215712 92.53147888]
[9.13432789 93.16809845]
[24.12832069 93.59257507]
[39.12681961 93.80484009]
[54.12531662 94.01710510]
[69.12381744 93.80484009]
[84.11029816 93.16822052]
[96.53794098 84.76860046]
[102.71646118 71.10017395]
[101.35031891 55.33805847]
[113.64315033 46.92760849]
[119.82167053 33.25918198]
[126.00019073 19.59075546]
[122.17539215 7.17263985]
[127.71613312 -4.13368988]
[139.12040710 -8.43423080]
[145.68325806 -21.92233849]
[152.24609375 -35.41044617]
[158.80894470 -48.89855576]
[158.71916199 -55.74818420]
[161.73713684 -60.78189468]
[166.14375305 -62.94812012]
[173.45918274 -76.04333496]
[172.68620300 -92.42425537]
[186.63032532 -101.05522156]
[200.94700623 -93.05744171]
[200.90849304 -76.65834045]
[186.55438232 -68.72790527]
[179.23896790 -55.63269424]
[172.29704285 -42.33570862]
[165.73420715 -28.84760284]
[159.17135620 -15.35949421]
[152.60852051 -1.87138569]
[154.85107422 15.47036648]
[139.66860962 25.76927376]
[133.49009705 39.43770218]
[127.31157684 53.10612869]
[129.11964417 67.89058685]
[116.38488770 77.27869415]
[110.20636749 90.94712067]
[113.30058289 94.31278229]
[115.23613739 98.73938751]
[115.65310669 103.81337738]
[127.18913269 113.40087891]
[142.74783325 116.27098083]
[147.59054565 130.35633850]
[159.12655640 139.94384766]
[170.66258240 149.53135681]
[179.39892578 152.67509460]
[182.38438416 159.55708313]
[193.64447021 169.46719360]
[204.90455627 179.37731934]
[216.16464233 189.28744507]
[231.59617615 186.75723267]
[245.01733398 194.78257751]
[250.09107971 209.57415771]
[244.42173767 224.14785767]
[230.68618774 231.62240601]
[215.36994934 228.46855164]
[205.70487976 216.17544556]
[206.25451660 200.54753113]
[194.99443054 190.63740540]
[183.73435974 180.72727966]
[172.47427368 170.81716919]
[161.07507324 161.06736755]
[149.53904724 151.47987366]
[138.00303650 141.89236450]
[123.26947021 139.70802307]
[117.60162354 124.93689728]
[106.06560516 115.34939575]
[113.99536133 128.08198547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 46]
[9 45]
[12 44]
[13 43]
[14 42]
[16 41]
[17 40]
[21 36]
[22 35]
[23 34]
[25 33]
[26 32]
[27 31]
[47 79]
[48 78]
[50 76]
[51 75]
[52 74]
[55 72]
[56 71]
[57 70]
[58 69]
[61 68]
[62 67]
[82 109]
[83 108]
[85 106]
[86 105]
[87 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
