%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUUUUGGACUCUGUCUUCAGCUGGACACUCCCUCCCUGCACCAUGUCUUACAGUUGUGGCCUGCCCAGCCUGAGCUGCCGCACCAGCUGCUCCUCCCGGCCCUGUGUGCCCCCCAGCUGCCACGGCUGCACCCUGCCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[-160.12648010 388.86975098]
[-162.60734558 395.92858887]
[-166.77163696 402.11810303]
[-172.34233093 407.04656982]
[-178.95387268 410.40533447]
[-186.17611694 411.98840332]
[-193.54225159 411.70480347]
[-200.57908630 409.58389282]
[-206.83731079 405.77267456]
[-218.81900024 414.79702759]
[-230.80068970 423.82138062]
[-231.70693970 434.75201416]
[-238.37524414 443.18087769]
[-248.38482666 446.44113159]
[-258.31323242 443.67443848]
[-270.67205811 452.17495728]
[-283.03091431 460.67547607]
[-295.38977051 469.17602539]
[-307.74859619 477.67654419]
[-310.37631226 493.26083374]
[-323.30242920 502.35433960]
[-338.85806274 499.56201172]
[-347.81439209 486.54049683]
[-344.85775757 471.01522827]
[-331.74227905 462.19708252]
[-316.24911499 465.31768799]
[-303.89028931 456.81716919]
[-291.53143311 448.31665039]
[-279.17260742 439.81610107]
[-266.81375122 431.31558228]
[-259.88192749 413.30999756]
[-239.82505798 411.83969116]
[-227.84336853 402.81533813]
[-215.86167908 393.79098511]
[-215.55270386 370.72955322]
[-198.33125305 355.00930786]
[-174.83082581 356.83850098]
[-164.57203674 345.89514160]
[-154.31324768 334.95178223]
[-151.28622437 317.69720459]
[-133.67680359 312.42889404]
[-123.65584564 301.26733398]
[-113.63488770 290.10577393]
[-116.92812347 275.60430908]
[-110.98046875 261.78079224]
[-97.88031769 254.01939392]
[-82.54467010 255.47683716]
[-72.52371216 244.31527710]
[-87.35756683 242.08891296]
[-95.05564117 229.21492004]
[-89.99691772 215.09367371]
[-75.87519836 210.03630066]
[-63.00193787 217.73561096]
[-60.77651215 232.56806946]
[-49.61495209 222.54710388]
[-38.45339203 212.52615356]
[-27.29183388 202.50518799]
[-16.13027382 192.48423767]
[-4.96871567 182.46327209]
[6.19284344 172.44232178]
[17.35440254 162.42135620]
[28.51596260 152.40040588]
[39.67752075 142.37944031]
[40.65716171 130.27714539]
[49.93746567 121.83795929]
[62.88166809 122.01934814]
[74.25625610 112.24086761]
[74.49072266 87.27773285]
[94.28969574 72.07202911]
[95.25732422 57.10327148]
[96.22495270 42.13451385]
[97.19257355 27.16575623]
[89.44512177 12.71207237]
[98.31742096 -1.07975006]
[114.68241119 -0.02186647]
[121.70519257 14.79746342]
[112.16133118 28.13338280]
[111.19371033 43.10214233]
[110.22608185 58.07089996]
[109.25845337 73.03965759]
[113.24518585 74.75828552]
[116.92469788 77.06239319]
[120.21163940 79.89854431]
[133.25547791 72.49190521]
[146.29933167 65.08527374]
[159.34317017 57.67864227]
[172.30656433 50.13210297]
[185.18801880 42.44653320]
[198.06948853 34.76095963]
[202.00325012 22.42763710]
[212.95027161 16.30339050]
[224.73837280 19.21308136]
[237.78221130 11.80644894]
[250.82604980 4.39981556]
[254.78373718 -10.90091133]
[268.44369507 -18.84954834]
[283.70175171 -14.73031044]
[291.50552368 -0.98706853]
[287.22518921 14.22655582]
[273.40020752 21.88459015]
[258.23269653 17.44365692]
[245.18884277 24.85029030]
[232.14500427 32.25692368]
[224.13464355 47.83630371]
[205.75505066 47.64241791]
[192.87359619 55.32799149]
[179.99214172 63.01356125]
[175.82942200 69.18650055]
[166.74980164 70.72248077]
[153.70596313 78.12911224]
[140.66210938 85.53575134]
[127.61827850 92.94238281]
[128.37756348 102.70050049]
[125.79134369 112.14025879]
[120.16449738 120.14875031]
[112.16039276 125.78185272]
[102.72266388 128.37545776]
[92.96395111 127.62377930]
[84.03474426 123.61545563]
[72.66015625 133.39393616]
[67.01418304 150.88592529]
[49.69847870 153.54100037]
[38.53691864 163.56196594]
[27.37536049 173.58291626]
[16.21380234 183.60388184]
[5.05224228 193.62483215]
[-6.10931683 203.64579773]
[-17.27087593 213.66674805]
[-28.43243408 223.68771362]
[-39.59399414 233.70866394]
[-50.75555420 243.72962952]
[-61.36215591 254.33622742]
[-71.38311005 265.49780273]
[-68.28733826 280.58825684]
[-74.59716034 294.44610596]
[-87.70207214 301.84375000]
[-102.47332764 300.12673950]
[-112.49428558 311.28829956]
[-122.51524353 322.44985962]
[-122.61240387 335.39495850]
[-131.24929810 344.49154663]
[-143.36988831 345.21057129]
[-153.62867737 356.15393066]
[-163.88746643 367.09729004]
[-160.77642822 373.97476196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 34]
[10 33]
[11 32]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[37 144]
[38 143]
[39 142]
[41 139]
[42 138]
[43 137]
[47 133]
[48 132]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[62 123]
[63 122]
[66 120]
[67 119]
[69 80]
[70 79]
[71 78]
[72 77]
[83 112]
[84 111]
[85 110]
[86 109]
[87 107]
[88 106]
[89 105]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
