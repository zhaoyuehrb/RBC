%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCUCGUUCGCCCUAAAGGUACCAAUAUGGCGGAGGCUUCUUUUGGAAGUUCGAGCCCAGUUUGUUUUAUUCCAGUUGGGUCUUUGUCUUCUGAGGAUCAUGAUUUUGACCCCACUGCUGAGAUGU\
) } def
/len { sequence length } bind def

/coor [
[216.10197449 102.39743042]
[201.10308838 102.58007050]
[186.10420227 102.76271820]
[171.11421204 103.31054688]
[156.14199829 104.22323608]
[141.16978455 105.13592529]
[126.19758606 106.04862213]
[111.22537231 106.96131134]
[92.93294525 128.34230042]
[79.59281158 135.20092773]
[66.25267792 142.05957031]
[52.91254807 148.91819763]
[39.57241440 155.77684021]
[26.23228264 162.63546753]
[17.49702835 175.82659912]
[2.64030790 174.76493835]
[-10.69982433 181.62358093]
[-11.36745930 196.96795654]
[-19.63136673 209.91412354]
[-33.26859665 216.97964478]
[-48.61080551 216.26391602]
[-61.53100967 207.95947266]
[-68.55374908 194.30015564]
[-67.78993225 178.96026611]
[-59.44502640 166.06616211]
[-45.76377106 159.08627319]
[-30.42635155 159.89816284]
[-17.55845833 168.28344727]
[-4.21832705 161.42480469]
[3.56275129 148.72425842]
[19.37364769 149.29533386]
[32.71377945 142.43670654]
[46.05391312 135.57806396]
[59.39404297 128.71943665]
[72.73417664 121.86080170]
[86.07431030 115.00216675]
[87.16923523 100.04218292]
[74.96989441 91.31430054]
[62.77054596 82.58641815]
[50.57120132 73.85852814]
[38.37185287 65.13064575]
[26.17250824 56.40276337]
[13.97316170 47.67488098]
[-2.42675900 43.37616730]
[-2.83598971 26.42715836]
[13.33735752 21.34196854]
[22.70104599 35.47553253]
[34.90039062 44.20341873]
[47.09973907 52.93130112]
[59.29908371 61.65918732]
[71.49842834 70.38706970]
[83.69777679 79.11495209]
[95.89712524 87.84283447]
[110.31268311 91.98909760]
[125.28489685 91.07640839]
[140.25709534 90.16371918]
[155.22930908 89.25102997]
[170.20152283 88.33834076]
[176.06185913 84.92990875]
[181.87448120 85.05419159]
[185.92155457 87.76383209]
[200.92044067 87.58118439]
[215.91932678 87.39853668]
[227.85112000 74.67380524]
[244.95729065 74.46748352]
[256.72039795 86.42140961]
[271.71038818 85.87357330]
[286.70040894 85.32574463]
[301.69039917 84.77791595]
[316.68038940 84.23008728]
[331.67037964 83.68225861]
[338.69393921 75.20722961]
[349.02801514 72.11698151]
[359.12872314 75.21566772]
[365.67233276 83.22749329]
[380.67123413 83.41014099]
[395.67010498 83.59278870]
[410.66900635 83.77542877]
[424.56234741 76.20674133]
[437.19448853 84.09844208]
[452.19335938 84.28108978]
[467.19226074 84.46373749]
[482.19113159 84.64637756]
[497.19003296 84.82902527]
[506.50085449 72.55651093]
[521.08239746 68.17098999]
[535.28228760 73.15357208]
[543.72436523 85.39569092]
[558.72326660 85.57833862]
[573.72216797 85.76097870]
[581.15002441 77.63796234]
[591.62225342 75.05452728]
[601.56018066 78.64131927]
[607.70593262 86.96223450]
[622.67810059 87.87492371]
[637.65032959 88.78761292]
[653.82800293 83.71622467]
[663.17962646 97.85777283]
[652.17950439 110.75870514]
[636.73767090 103.75981903]
[621.76544189 102.84712982]
[606.79321289 101.93444061]
[590.27673340 111.87151337]
[573.53948975 100.75987244]
[558.54058838 100.57722473]
[543.54174805 100.39457703]
[534.80401611 112.42749786]
[520.48699951 117.06282043]
[506.01660156 112.32351685]
[497.00738525 99.82791138]
[482.00848389 99.64527130]
[467.00961304 99.46262360]
[452.01071167 99.27997589]
[437.01184082 99.09732819]
[424.19128418 106.67908478]
[410.48635864 98.77432251]
[395.48745728 98.59167480]
[380.48858643 98.40902710]
[365.48968506 98.22637939]
[349.47659302 108.95581818]
[332.21820068 98.67224884]
[317.22821045 99.22007751]
[302.23822021 99.76790619]
[287.24822998 100.31574249]
[272.25823975 100.86357117]
[257.26824951 101.41139984]
[249.85661316 112.02483368]
[237.49000549 116.46745300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[16 29]
[17 28]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[66 126]
[67 125]
[68 124]
[69 123]
[70 122]
[71 121]
[75 119]
[76 118]
[77 117]
[78 116]
[80 114]
[81 113]
[82 112]
[83 111]
[84 110]
[88 106]
[89 105]
[90 104]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
