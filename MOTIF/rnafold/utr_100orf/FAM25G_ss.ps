%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCGCCACUGUCUGCUGCCACACGAUGCUGGGAGGCCUGGGGAAGCUGGCUGCCGAGGGCCUGGCCCACCGCACCGAGAAGGCCACCGAGGGAGCCAUUCAUGCCGUGGAGGAAGUGGUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[74.65912628 392.71224976]
[71.30024719 377.02474976]
[81.58201599 364.70953369]
[81.58201599 349.70953369]
[81.58201599 334.70953369]
[81.58201599 319.70953369]
[81.58201599 304.70953369]
[81.58201599 289.70953369]
[81.58201599 274.70953369]
[81.58201599 259.70953369]
[81.58201599 244.70951843]
[72.48304749 239.57128906]
[66.33664703 231.02018738]
[64.33542633 220.59834290]
[66.91671753 210.22097778]
[73.66929626 201.82440186]
[83.39715576 197.00483704]
[84.50930023 182.04612732]
[81.83905792 175.06750488]
[85.83845520 166.73265076]
[87.32025146 151.80601501]
[88.80204773 136.87939453]
[90.28384399 121.95275879]
[76.72395325 105.87817383]
[81.02566528 85.29278564]
[72.63435364 72.85952759]
[58.50092697 65.74919891]
[57.79435349 50.87136078]
[49.40304184 38.43810272]
[41.01173019 26.00484657]
[32.31545639 13.78294659]
[23.31954193 1.77988327]
[14.32362652 -10.22317982]
[5.32771206 -22.22624207]
[-3.96233892 -34.00312424]
[-13.54084206 -45.54661942]
[-23.11934662 -57.09011459]
[-32.69784927 -68.63360596]
[-42.27635193 -80.17710114]
[-51.85485458 -91.72059631]
[-67.34818268 -93.33137512]
[-76.89770508 -105.17456818]
[-75.26659393 -119.93516541]
[-84.84510040 -131.47865295]
[-99.61180115 -137.15802002]
[-101.78464508 -151.89328003]
[-111.36315155 -163.43678284]
[-126.92172241 -168.61972046]
[-129.94692993 -184.73741150]
[-117.32669830 -195.20936584]
[-102.04364014 -189.26292419]
[-99.81965637 -173.01528931]
[-90.24114990 -161.47178650]
[-76.15956879 -156.61808777]
[-73.30160522 -141.05715942]
[-63.72310257 -129.51367188]
[-48.91493225 -128.39398193]
[-39.03652573 -116.82367706]
[-40.31136322 -101.29910278]
[-30.73285866 -89.75560760]
[-21.15435410 -78.21211243]
[-11.57585144 -66.66861725]
[-1.99734771 -55.12512207]
[7.58115578 -43.58162689]
[12.27125263 -42.25437546]
[16.13417625 -37.90213776]
[17.33077431 -31.22215652]
[26.32669067 -19.21909523]
[35.32260513 -7.21603107]
[44.31851959 4.78703165]
[48.93724060 6.34460449]
[52.58020020 10.88255119]
[53.44498825 17.61353493]
[61.83629990 30.04679298]
[70.22760773 42.48004913]
[83.76083374 48.70107269]
[85.06761169 64.46822357]
[93.45892334 76.90147400]
[108.98087311 77.73632050]
[120.73755646 87.90531921]
[135.40719604 84.77455139]
[150.07682800 81.64377594]
[164.70661926 78.33180237]
[179.29432678 74.83914948]
[193.88204956 71.34648895]
[201.33316040 60.73231888]
[213.63468933 58.16708374]
[224.01962280 64.50056458]
[238.68925476 61.36979294]
[252.91755676 52.15070724]
[265.71514893 63.27086639]
[258.57229614 78.64669037]
[241.82002258 76.03942871]
[227.15039062 79.17020416]
[214.83926392 91.61166382]
[197.37471008 85.93419647]
[182.78698730 89.42685699]
[168.19927979 92.91951752]
[162.36421204 97.58676910]
[153.20759583 96.31341553]
[138.53796387 99.44418335]
[123.86832428 102.57495880]
[122.82640839 107.43521881]
[120.80590057 111.97671509]
[117.89343262 116.00476837]
[114.21384430 119.34667969]
[109.92490387 121.85917664]
[105.21047211 123.43455505]
[103.72867584 138.36119080]
[102.24687958 153.28781128]
[100.76508331 168.21444702]
[99.46800995 183.15826416]
[98.35587311 198.11697388]
[112.27262878 212.46673584]
[111.33851624 232.13363647]
[96.58201599 244.70951843]
[96.58201599 259.70953369]
[96.58201599 274.70953369]
[96.58201599 289.70953369]
[96.58201599 304.70953369]
[96.58201599 319.70953369]
[96.58201599 334.70953369]
[96.58201599 349.70953369]
[96.58201599 364.70953369]
[106.86378479 377.02474976]
[103.50490570 392.71224976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[17 113]
[18 112]
[20 111]
[21 110]
[22 109]
[23 108]
[25 78]
[26 77]
[28 75]
[29 74]
[30 73]
[31 70]
[32 69]
[33 68]
[34 67]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[43 56]
[44 55]
[46 53]
[47 52]
[80 102]
[81 101]
[82 100]
[83 98]
[84 97]
[85 96]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
