%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGCAUCCUAGUUCACCACUGUCUGCUGCCACACGAUGCUGGGAGGCCUGGGGAAGCUGGCUGCCGAAGGCCUGGCCCACCGCACCGAGAAGGCCACCGAGGGAGCCAUUCAUGCCGUGGAAGAAGUGGUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[58.55367279 435.89611816]
[51.52150726 449.72827148]
[37.68675613 456.75531006]
[22.36916161 454.27520752]
[11.45865250 443.24160767]
[9.15054035 427.89715576]
[16.33234406 414.14208984]
[30.24250984 407.26556396]
[32.63997269 392.45837402]
[35.03743744 377.65121460]
[33.20736694 374.54031372]
[32.84528732 370.36621094]
[34.44403839 365.85348511]
[38.14252853 361.92309570]
[41.55216217 347.31576538]
[44.96179581 332.70840454]
[48.37142944 318.10107422]
[51.78106308 303.49374390]
[55.19069672 288.88638306]
[58.60033035 274.27905273]
[62.00996017 259.67172241]
[54.99422073 241.70849609]
[68.79182434 227.09172058]
[71.52817535 212.34341431]
[74.26452637 197.59510803]
[77.00087738 182.84681702]
[79.73722839 168.09851074]
[74.45151520 154.17333984]
[84.57645416 142.01618958]
[87.31280518 127.26789093]
[77.16689301 119.57427216]
[71.11379242 108.37197876]
[70.23852539 95.66900635]
[74.69797516 83.74237061]
[83.69279480 74.72989655]
[78.95951080 60.49627686]
[67.26284790 49.84270477]
[70.58871460 35.32416916]
[65.85543060 21.09054565]
[61.12214279 6.85692215]
[56.06373596 -7.26442719]
[50.68286514 -21.26607895]
[45.30199432 -35.26773071]
[39.92112350 -49.26937866]
[34.22061920 -63.14397049]
[28.20347786 -76.88420105]
[22.18633842 -90.62443542]
[16.16919708 -104.36466980]
[10.15205574 -118.10490417]
[4.13491488 -131.84513855]
[-10.31063747 -137.67298889]
[-16.21713829 -151.69325256]
[-10.57215595 -165.42895508]
[-16.58929634 -179.16918945]
[-29.21262360 -188.70660400]
[-27.23058891 -203.46875000]
[-33.24773026 -217.20898438]
[-46.76924896 -226.48802185]
[-45.22453690 -242.81425476]
[-30.20266342 -249.39265442]
[-17.15684128 -239.45591736]
[-19.50749588 -223.22612000]
[-13.49035454 -209.48588562]
[-1.29741490 -200.93127441]
[-2.84906363 -185.18634033]
[3.16807723 -171.44610596]
[17.09078598 -166.27949524]
[23.38875771 -152.43066406]
[17.87514877 -137.86227417]
[23.89229012 -124.12204742]
[29.90942955 -110.38181305]
[35.92657089 -96.64157867]
[41.94371033 -82.90134430]
[47.96085358 -69.16110992]
[52.08373260 -66.59520721]
[54.59025574 -61.37125778]
[53.92277527 -54.65024948]
[59.30364609 -40.64860153]
[64.68451691 -26.64694977]
[70.06538391 -12.64529800]
[74.06629181 -9.89307117]
[76.33068085 -4.55969954]
[75.35576630 2.12363744]
[80.08905029 16.35725975]
[84.82233429 30.59088326]
[96.18044281 40.22637177]
[93.19313049 55.76299286]
[97.92642212 69.99661255]
[116.60107422 74.92198181]
[128.42971802 90.18910980]
[143.38143921 88.98650360]
[158.33316040 87.78389740]
[173.27009583 86.40995026]
[188.19030762 84.86483002]
[203.11050415 83.31970978]
[211.88131714 73.78455353]
[224.39991760 72.84847260]
[233.86436462 80.46977997]
[248.81607056 79.26717377]
[264.11947632 71.97042084]
[275.36746216 84.65580750]
[266.29156494 98.97589111]
[250.01867676 94.21888733]
[235.06695557 95.42149353]
[221.23445129 106.15985107]
[204.65562439 98.23992157]
[189.73542786 99.78503418]
[174.81521606 101.33015442]
[168.42994690 105.18191528]
[159.53575134 102.73561096]
[144.58404541 103.93821716]
[129.63232422 105.14082336]
[124.56000519 117.35826111]
[114.73604584 126.21739197]
[102.06111145 130.00424194]
[99.32476044 144.75254822]
[104.41474915 159.73262024]
[94.48552704 170.83486938]
[91.74917603 185.58316040]
[89.01282501 200.33146667]
[86.27647400 215.07975769]
[83.54012299 229.82806396]
[90.26763153 238.51525879]
[91.03736115 249.25459290]
[85.83499908 258.42834473]
[76.61730194 263.08132935]
[73.20767212 277.68869019]
[69.79803467 292.29602051]
[66.38840485 306.90335083]
[62.97877121 321.51071167]
[59.56913757 336.11804199]
[56.15950394 350.72537231]
[52.74987030 365.33273315]
[49.84460449 380.04867554]
[47.44713974 394.85583496]
[45.04967499 409.66302490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 136]
[9 135]
[10 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[29 116]
[30 115]
[35 88]
[36 87]
[38 85]
[39 84]
[40 83]
[41 80]
[42 79]
[43 78]
[44 77]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[53 66]
[54 65]
[56 63]
[57 62]
[90 112]
[91 111]
[92 110]
[93 108]
[94 107]
[95 106]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
