%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCUCUUUGGGUGACCUGUGCCUGCUUCGUGCCUGGUGUGACGUCUCUCAGGAUGCCUGAGCCGGGGAAGAAGCCAGUCUCAGCUUUUAGCAAGAAGCCACGGUCAGUGGAAGUGGCCGCAGGCAGCCCUGCCGUGUUCGAGGCCGAGACAG\
) } def
/len { sequence length } bind def

/coor [
[93.73122406 131.64950562]
[81.78723145 128.42720032]
[75.90773773 142.22689819]
[70.02823639 156.02658081]
[64.28798676 169.88478088]
[58.68756485 183.80006409]
[53.08714294 197.71536255]
[55.92572403 213.86697388]
[43.18521500 224.19224548]
[27.97195816 218.06944275]
[25.93604660 201.79716492]
[39.17185211 192.11494446]
[44.77227402 178.19964600]
[50.37269592 164.28436279]
[49.95011520 156.86242676]
[56.22854614 150.14709473]
[62.10804367 136.34739685]
[67.98754120 122.54770660]
[61.69757080 136.16520691]
[48.84291840 143.89552307]
[33.86580276 143.06729126]
[21.94190025 133.96672058]
[17.19178200 119.73870850]
[21.25695801 105.30006409]
[32.73262024 95.64039612]
[47.65308762 94.09780884]
[60.86251450 101.20563507]
[47.87213135 93.70563507]
[34.88175201 86.20563507]
[21.89137077 78.70563507]
[8.90098953 71.20563507]
[-5.22490311 77.35099030]
[-20.08705902 74.03893280]
[-30.03152847 62.74417496]
[-31.40191650 47.93674088]
[-44.39229965 40.43674088]
[-57.38267899 32.93674088]
[-70.37306213 25.43674088]
[-83.36344147 17.93674088]
[-96.35382080 10.43674183]
[-110.55911255 18.84523773]
[-126.97238159 18.95886612]
[-141.13015747 10.84105587]
[-149.22979736 -3.21909809]
[-149.15068054 -19.35148239]
[-162.28945923 -26.58837318]
[-175.42823792 -33.82526398]
[-188.56700134 -41.06215668]
[-201.70578003 -48.29904556]
[-218.08178711 -47.42802048]
[-226.79608154 -61.32021332]
[-218.88415527 -75.68452454]
[-202.48512268 -75.74418640]
[-194.46888733 -61.43782043]
[-181.33010864 -54.20093155]
[-168.19134521 -46.96403885]
[-155.05256653 -39.72714996]
[-141.91378784 -32.49025726]
[-130.68916321 -40.32358551]
[-117.11741638 -42.55508423]
[-103.84830475 -38.69109726]
[-93.49758911 -29.43373871]
[-88.13136292 -16.55411148]
[-88.85382080 -2.55363941]
[-75.86344147 4.94636059]
[-62.87305832 12.44636059]
[-49.88267899 19.94636154]
[-36.89229965 27.44636154]
[-23.90191650 34.94636154]
[-10.39311028 28.72943687]
[4.36066961 31.69422150]
[14.66007423 42.90919876]
[16.40098953 58.21525574]
[29.39137077 65.71525574]
[42.38175201 73.21525574]
[55.37213135 80.71525574]
[68.36251068 88.21525574]
[88.13950348 71.07034302]
[112.15273285 73.92052460]
[125.02828217 91.99437714]
[140.02523804 91.69232178]
[155.02220154 91.39026642]
[170.01914978 91.08821106]
[185.01611328 90.78615570]
[198.65768433 82.77252960]
[211.53817749 90.25197601]
[226.53514099 89.94992065]
[241.53208923 89.64786530]
[256.52905273 89.34580231]
[271.52600098 89.04374695]
[285.16757202 81.03012085]
[298.04806519 88.50956726]
[313.04504395 88.20751190]
[328.04199219 87.90545654]
[343.03894043 87.60340118]
[349.43103027 75.54895020]
[360.52166748 67.75833893]
[373.84963989 65.85968018]
[386.50253296 70.18457794]
[395.75317383 79.71369171]
[410.16091919 75.54042816]
[424.56869507 71.36716461]
[438.97647095 67.19390106]
[453.38424683 63.02064133]
[460.30584717 52.09259415]
[472.43548584 48.93436050]
[483.10104370 54.71731949]
[497.58993530 50.83503342]
[508.79696655 38.86279297]
[524.70520020 42.84526825]
[528.94958496 58.68562698]
[517.16387939 70.08866882]
[501.47219849 65.32392120]
[486.98330688 69.20620728]
[475.29745483 82.26567078]
[457.55752563 77.42841339]
[443.14974976 81.60167694]
[428.74197388 85.77494049]
[414.33419800 89.94819641]
[399.92642212 94.12145996]
[399.81295776 97.09822083]
[399.38800049 100.04667664]
[412.80749512 106.74865723]
[426.22702026 113.45063019]
[439.64654541 120.15261078]
[453.06607056 126.85459137]
[469.39370728 125.32487488]
[478.66033936 138.85490417]
[471.33322144 153.52615356]
[454.94989014 154.24609375]
[446.36410522 140.27410889]
[432.94458008 133.57212830]
[419.52505493 126.87015533]
[406.10552979 120.16817474]
[392.68600464 113.46620178]
[375.25759888 122.98832703]
[355.61660767 118.78340912]
[343.34100342 102.60035706]
[328.34405518 102.90241241]
[313.34710693 103.20446777]
[298.35012817 103.50652313]
[285.78125000 111.49854279]
[271.82806396 104.04071045]
[256.83111572 104.34276581]
[241.83415222 104.64482117]
[226.83718872 104.94687653]
[211.84024048 105.24893188]
[199.27134705 113.24095154]
[185.31817627 105.78311920]
[170.32121277 106.08517456]
[155.32424927 106.38722992]
[140.32730103 106.68928528]
[125.33033752 106.99134064]
[122.21836853 116.66581726]
[115.37378693 124.90848541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 14]
[6 13]
[7 12]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[80 153]
[81 152]
[82 151]
[83 150]
[84 149]
[86 147]
[87 146]
[88 145]
[89 144]
[90 143]
[92 141]
[93 140]
[94 139]
[95 138]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[107 114]
[108 113]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
