%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCAAGGAAAAAUGUGACUGACUUUGUCCUCUUGGGCUUCACACAGAAUCCAAAGGAGCAGAAAGUACUUUUUGUUAUGUUCUUGCUCUUCUACA\
) } def
/len { sequence length } bind def

/coor [
[54.90562439 128.09899902]
[48.14114380 111.56353760]
[33.18647003 112.72879791]
[18.23180199 113.89405823]
[3.27713060 115.05931091]
[-11.67753983 116.22457123]
[-26.63221169 117.38983154]
[-41.58687973 118.55508423]
[-58.20913315 131.88710022]
[-76.66116333 122.86838531]
[-91.44219208 125.42203522]
[-106.22322083 127.97569275]
[-121.00424957 130.52934265]
[-133.28575134 140.50308228]
[-147.14445496 135.04547119]
[-161.92547607 137.59912109]
[-176.70651245 140.15277100]
[-184.79724121 144.77149963]
[-191.98638916 142.54852295]
[-206.83969116 144.64125061]
[-217.60000610 156.54061890]
[-233.60269165 155.40324402]
[-242.57185364 142.10159302]
[-237.62712097 126.83957672]
[-222.56166077 121.32489777]
[-208.93241882 129.78794861]
[-194.07911682 127.69522095]
[-179.26016235 125.37174988]
[-164.47914124 122.81809235]
[-149.69810486 120.26444244]
[-138.47384644 110.47335052]
[-123.55790710 115.74831390]
[-108.77687836 113.19465637]
[-93.99584961 110.64100647]
[-79.21481323 108.08735657]
[-75.19369507 99.82680511]
[-67.64751434 94.34580994]
[-58.27227783 93.03807831]
[-49.25248337 96.34056854]
[-42.75214005 103.60041809]
[-27.79746819 102.43515778]
[-12.84279823 101.26989746]
[2.11187291 100.10464478]
[17.06654358 98.93938446]
[32.02121353 97.77412415]
[46.97588348 96.60887146]
[49.17363358 84.51656342]
[54.09095764 73.25273132]
[61.46475220 63.42007065]
[70.90045929 55.54470444]
[81.89321136 50.04801559]
[93.85479736 47.22412491]
[106.14520264 47.22412491]
[118.10678864 50.04801559]
[129.09953308 55.54470444]
[138.53524780 63.42007065]
[145.90904236 73.25273132]
[150.82637024 84.51656342]
[153.02410889 96.60887146]
[167.97879028 97.77412415]
[182.93345642 98.93938446]
[197.88812256 100.10464478]
[212.84280396 101.26989746]
[227.79747009 102.43515778]
[242.75213623 103.60041809]
[257.72311401 104.53295898]
[272.70678711 105.23256683]
[287.69049072 105.93217468]
[297.99850464 92.62915802]
[314.02789307 88.07322693]
[329.48257446 93.85042572]
[338.41232300 107.52754211]
[353.41052246 107.76081848]
[365.88415527 97.67182159]
[381.51751709 101.27426147]
[388.31802368 115.80467224]
[381.06890869 130.11654663]
[365.33108521 133.23106384]
[353.17724609 122.75901031]
[338.17904663 122.52572632]
[331.12158203 133.97337341]
[319.21218872 140.45118713]
[305.54953003 140.15060425]
[293.75009155 133.04299927]
[286.99087524 120.91584778]
[272.00720215 120.21623993]
[257.02352905 119.51663971]
[250.07278442 122.39983368]
[241.58688354 118.55508423]
[226.63221741 117.38983154]
[211.67753601 116.22457123]
[196.72286987 115.05931091]
[181.76820374 113.89405823]
[166.81352234 112.72879791]
[151.85885620 111.56353760]
[145.09437561 128.09899902]
[133.23144531 141.45755005]
[117.61130524 150.12881470]
[100.00000000 153.13244629]
[82.38869476 150.12881470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[10 35]
[11 34]
[12 33]
[13 32]
[15 30]
[16 29]
[17 28]
[19 27]
[20 26]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 87]
[67 86]
[68 85]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
