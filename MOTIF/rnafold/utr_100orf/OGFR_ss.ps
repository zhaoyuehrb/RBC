%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUUCCUCUGCUUUCGGUUUCGCUUCCGCCUCCAGCGCGAGCCCCGCCGCCGCCGAGCAUGGACGACCCCGACUGCGACUCCACCUGGGAGGAGGACGAGGAGGAUGCGGAGGACGCGGAGGACGAGGACUGCGAGGACGGCGAGGCCGCCGGCGCGA\
) } def
/len { sequence length } bind def

/coor [
[71.20243835 162.65861511]
[70.61720276 147.67004395]
[70.03195953 132.68145752]
[69.44671631 117.69288635]
[77.64208984 100.91197205]
[91.46674347 95.94759369]
[87.13874054 81.58554840]
[82.81073761 67.22350311]
[78.48272705 52.86145401]
[74.15472412 38.49940872]
[68.65559387 31.14106178]
[69.88533783 23.81476784]
[65.83838654 9.37100887]
[52.34415054 1.59004581]
[48.44572067 -13.11563015]
[55.94684219 -25.93236923]
[51.89989090 -40.37612915]
[48.08967590 -44.09059143]
[46.29937744 -48.46388626]
[46.43723297 -52.60280991]
[48.06534576 -55.78411102]
[44.87036514 -70.43989563]
[41.67538834 -85.09568787]
[38.48040771 -99.75147247]
[35.14259338 -114.37538910]
[31.66226196 -128.96604919]
[28.18193054 -143.55670166]
[24.70159912 -158.14736938]
[21.22126961 -172.73802185]
[17.74093819 -187.32867432]
[14.26060677 -201.91934204]
[3.53250861 -213.54768372]
[8.10565376 -227.72285461]
[4.62532282 -242.31352234]
[1.14499164 -256.90417480]
[-12.03538513 -265.20571899]
[-15.35708714 -280.05227661]
[-7.36161995 -292.56658936]
[-10.84195042 -307.15725708]
[-14.32228184 -321.74792480]
[-17.80261230 -336.33859253]
[-34.29003906 -345.58975220]
[-38.75491714 -363.63308716]
[-28.82978249 -378.97149658]
[-32.87673569 -393.41525269]
[-44.05035782 -404.61618042]
[-40.03375244 -418.95898438]
[-44.08070374 -433.40274048]
[-48.26838303 -447.80633545]
[-52.59638596 -462.16836548]
[-63.98643112 -473.14913940]
[-60.25044632 -487.56759644]
[-64.57845306 -501.92965698]
[-75.96849823 -512.91040039]
[-72.23250580 -527.32885742]
[-76.56051636 -541.69091797]
[-87.95056152 -552.67169189]
[-84.21457672 -567.09014893]
[-88.54257965 -581.45220947]
[-99.54113770 -588.25268555]
[-102.83213043 -600.34246826]
[-97.17188263 -611.06878662]
[-101.21883392 -625.51257324]
[-105.26578522 -639.95629883]
[-109.31273651 -654.40008545]
[-113.64073944 -668.76214600]
[-118.24815369 -683.03698730]
[-133.28178406 -686.18109131]
[-144.71853638 -696.43273926]
[-149.48197937 -711.03430176]
[-146.29075623 -726.05798340]
[-136.00331116 -737.46258545]
[-121.38690186 -742.18023682]
[-106.37327576 -738.94189453]
[-95.00101471 -728.61877441]
[-90.32920837 -713.98767090]
[-93.61454773 -698.98425293]
[-103.97328186 -687.64440918]
[-99.36587524 -673.36956787]
[-95.55432129 -670.41607666]
[-93.58731842 -665.01641846]
[-94.86898041 -658.44702148]
[-90.82202911 -644.00329590]
[-86.77507782 -629.55950928]
[-82.72812653 -615.11578369]
[-69.53640747 -603.57495117]
[-74.18053436 -585.78021240]
[-69.85252380 -571.41815186]
[-58.77204895 -561.46466064]
[-62.19846725 -546.01892090]
[-57.87046432 -531.65686035]
[-46.78998566 -521.70336914]
[-50.21640396 -506.25765991]
[-45.88840103 -491.89559937]
[-34.80792236 -481.94210815]
[-38.23434067 -466.49636841]
[-33.90633392 -452.13433838]
[-28.94025040 -446.60940552]
[-29.63694572 -437.44967651]
[-25.58999443 -423.00592041]
[-14.70583630 -412.83810425]
[-18.43297577 -397.46218872]
[-14.38602352 -383.01843262]
[-3.41162801 -379.69039917]
[4.66027689 -371.37600708]
[7.72513723 -360.07598877]
[4.90323782 -348.58901978]
[-3.21195531 -339.81890869]
[0.26837581 -325.22824097]
[3.74870706 -310.63760376]
[7.22903824 -296.04693604]
[20.01236534 -288.48901367]
[23.74976540 -273.74160767]
[15.73564911 -260.38452148]
[19.21598053 -245.79385376]
[22.69631195 -231.20318604]
[33.17547226 -220.61846924]
[28.85126495 -205.39967346]
[32.33159637 -190.80900574]
[35.81192780 -176.21835327]
[39.29225922 -161.62770081]
[42.77259064 -147.03703308]
[46.25291824 -132.44638062]
[49.73324966 -117.85572052]
[54.36759186 -112.04971313]
[53.13619614 -102.94644928]
[56.33117294 -88.29066467]
[59.52615356 -73.63487244]
[62.72113419 -58.97908783]
[66.34365082 -44.42308044]
[70.39060211 -29.97932053]
[83.45907593 -22.92591095]
[87.76901245 -8.33553600]
[80.28214264 5.32405710]
[84.32909393 19.76781654]
[88.51676941 34.17140579]
[92.84477997 48.53345108]
[97.17278290 62.89549637]
[101.50078583 77.25754547]
[105.82878876 91.61959076]
[111.80480957 105.37776184]
[119.34701538 118.34368134]
[126.88922119 131.30960083]
[134.43142700 144.27552795]
[141.97363281 157.24143982]
[156.46357727 164.92088318]
[156.78747559 181.31683350]
[142.61213684 189.56254578]
[128.51992798 181.17553711]
[129.00772095 164.78364563]
[121.46550751 151.81773376]
[113.92330170 138.85180664]
[106.38108826 125.88588715]
[98.83888245 112.91996765]
[84.43529510 117.10764313]
[85.02053833 132.09622192]
[85.60578156 147.08480835]
[86.19101715 162.07337952]
[92.85073853 177.66455078]
[79.71247101 188.38006592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[12 135]
[13 134]
[16 131]
[17 130]
[21 129]
[22 128]
[23 127]
[24 126]
[25 124]
[26 123]
[27 122]
[28 121]
[29 120]
[30 119]
[31 118]
[33 116]
[34 115]
[35 114]
[38 111]
[39 110]
[40 109]
[41 108]
[44 103]
[45 102]
[47 100]
[48 99]
[49 97]
[50 96]
[52 94]
[53 93]
[55 91]
[56 90]
[58 88]
[59 87]
[62 85]
[63 84]
[64 83]
[65 82]
[66 79]
[67 78]
[141 154]
[142 153]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
