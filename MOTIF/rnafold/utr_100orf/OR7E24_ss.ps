%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUAUUUUCCAAUUCUCUUUUUUUUUUUCCUCAAAAGGUGUCCGAGCUACACAGAGCCACAGAAUCUCACAGGUGUCUCAGAAUUCCUCCUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[86.44529724 325.67385864]
[71.44605255 324.27014160]
[57.13539505 319.56344604]
[44.23113251 311.78991699]
[33.38054657 301.33944702]
[25.12789345 288.73620605]
[19.88712311 274.61239624]
[17.92111206 259.67645264]
[19.32847214 244.67755127]
[24.03861046 230.36802673]
[31.81527138 217.46565247]
[42.26837921 206.61759949]
[54.87361145 198.36801147]
[68.99869537 193.13066101]
[83.93511200 191.16825867]
[85.33280182 176.23352051]
[86.73049164 161.29878235]
[88.12818146 146.36404419]
[89.52587128 131.42930603]
[90.92356110 116.49456024]
[82.95719147 103.78484344]
[68.90665436 98.53294373]
[54.85612106 93.28105164]
[40.80558395 88.02915192]
[26.75504684 82.77725220]
[15.39003086 93.02883911]
[0.55978817 96.81334686]
[-14.32779980 93.26112366]
[-25.85167503 83.18843842]
[-31.36373520 68.90993500]
[-29.59734917 53.70669556]
[-20.95841789 41.07231903]
[-7.43210793 33.91009140]
[7.87333632 33.86584091]
[21.44083595 40.94973373]
[30.15267754 53.53394699]
[32.00694275 68.72671509]
[46.05747986 73.97861481]
[60.10801697 79.23051453]
[74.15855408 84.48240662]
[88.20909119 89.73430634]
[100.12121582 80.61831665]
[98.72352600 65.68357086]
[97.32583618 50.74883270]
[95.92814636 35.81409454]
[82.96255493 27.07181358]
[78.69948578 12.02654076]
[85.15181732 -2.21780491]
[99.27296448 -8.93548012]
[114.39535522 -4.95460320]
[123.37865448 7.84517670]
[121.98122406 23.42019463]
[110.86288452 34.41640472]
[112.26057434 49.35114670]
[113.65826416 64.28588867]
[115.05595398 79.22062683]
[113.46370697 86.03939056]
[110.34605408 91.91626740]
[124.55313110 87.10387421]
[138.76020813 82.29148865]
[149.34855652 70.53574371]
[163.88536072 73.78079987]
[178.09243774 68.96841431]
[192.29951477 64.15602875]
[194.10884094 49.00053406]
[202.32196045 36.13556290]
[215.30813599 28.11546707]
[230.48895264 26.53264046]
[244.85026550 31.70135689]
[255.54060364 42.59535980]
[260.43740845 57.05164337]
[258.56842041 72.19989777]
[250.30468750 85.03242493]
[237.28703308 93.00131989]
[222.10009766 94.52435303]
[207.75924683 89.29912567]
[197.11189270 78.36310577]
[182.90481567 83.17549133]
[168.69775391 87.98787689]
[159.12557983 99.39940643]
[143.57258606 96.49856567]
[129.36552429 101.31095123]
[115.15844727 106.12333679]
[105.85829926 117.89225006]
[104.46060944 132.82699585]
[103.06291962 147.76173401]
[101.66522980 162.69647217]
[100.26754761 177.63121033]
[98.86985779 192.56594849]
[113.18279266 197.26568604]
[126.09082031 205.03297424]
[136.94647217 215.47819519]
[145.20523071 228.07742310]
[150.45285034 242.19868469]
[152.42608643 257.13369751]
[151.02600098 272.13327026]
[146.32279968 286.44506836]
[138.55238342 299.35119629]
[128.10453796 310.20431519]
[115.50331116 318.46002197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[42 56]
[43 55]
[44 54]
[45 53]
[58 83]
[59 82]
[60 81]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
