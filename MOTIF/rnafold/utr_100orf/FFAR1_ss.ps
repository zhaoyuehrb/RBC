%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGCCCCAUGGACCUGCCCCCGCAGCUCUCCUUCGGCCUCUAUGUGGCCGCCUUUGCGCUGGGCUUCCCGCUCAACGUCCUGGCCAUCCGAGGCGCGACGGCCCACG\
) } def
/len { sequence length } bind def

/coor [
[93.66608429 229.04391479]
[93.66608429 214.04391479]
[82.98521423 203.72622681]
[82.77153015 188.51409912]
[93.66608429 177.38096619]
[93.66608429 162.38096619]
[93.66608429 147.38096619]
[93.66608429 132.38096619]
[87.76472473 127.75236511]
[78.50732422 139.55493164]
[66.70491791 130.29733276]
[75.96201324 118.49515533]
[70.06065369 113.86655426]
[55.49263000 117.44042969]
[40.92460251 121.01431274]
[27.18927765 135.63514709]
[8.84413528 129.80500793]
[-5.49836540 134.19734192]
[-19.84086609 138.58969116]
[-34.18336868 142.98202515]
[-44.95991516 155.34318542]
[-60.99905777 151.92588806]
[-65.80110168 136.24557495]
[-54.42611694 124.43279266]
[-38.57571030 128.63952637]
[-24.23320770 124.24718475]
[-9.89070702 119.85484314]
[4.45179415 115.46250153]
[8.50620461 105.88853455]
[17.38996506 100.07207489]
[28.22925377 100.18910217]
[37.35072327 106.44628143]
[51.91875076 102.87240601]
[66.48677826 99.29852295]
[84.89995575 77.82791138]
[106.98014069 81.11825562]
[117.04860687 69.99953461]
[127.11708069 58.88081360]
[137.02720642 47.62072754]
[146.77699280 36.22153473]
[156.52677917 24.82234192]
[166.27656555 13.42314816]
[176.02635193 2.02395439]
[173.44024658 -11.28365231]
[178.95399475 -23.45397568]
[190.32615662 -30.08771324]
[203.24459839 -28.93135452]
[213.31306458 -40.05007553]
[223.38153076 -51.16879654]
[233.44999695 -62.28751373]
[243.51847839 -73.40623474]
[253.58694458 -84.52495575]
[263.65539551 -95.64367676]
[260.42279053 -106.07854462]
[261.88275146 -116.82234955]
[267.69464111 -125.87886810]
[276.71563721 -131.59472656]
[287.22503662 -132.96107483]
[297.25213623 -129.79110718]
[308.22726440 -140.01589966]
[319.20239258 -150.24070740]
[324.02548218 -165.30882263]
[338.61187744 -168.32322693]
[349.58700562 -178.54801941]
[360.56213379 -188.77282715]
[371.53726196 -198.99761963]
[382.51239014 -209.22242737]
[384.51452637 -225.14004517]
[398.28228760 -233.37586975]
[413.25418091 -227.61206055]
[417.94509888 -212.27012634]
[408.75653076 -199.11909485]
[392.73718262 -198.24728394]
[381.76205444 -188.02249146]
[370.78692627 -177.79769897]
[359.81179810 -167.57289124]
[348.83666992 -157.34809875]
[344.79858398 -143.01132202]
[329.42718506 -139.26557922]
[318.45205688 -129.04077148]
[307.47692871 -118.81597137]
[308.37570190 -99.48345184]
[294.72436523 -85.34620667]
[274.77413940 -85.57521057]
[264.70565796 -74.45648956]
[254.63719177 -63.33776855]
[244.56872559 -52.21904755]
[234.50025940 -41.10032654]
[224.43179321 -29.98160553]
[214.36331177 -18.86288643]
[215.95011902 -2.18684268]
[204.82005310 10.77822495]
[187.42555237 11.77374363]
[177.67576599 23.17293739]
[167.92596436 34.57213211]
[158.17617798 45.97132492]
[148.42639160 57.37051773]
[146.44142151 64.60478973]
[138.23579407 68.94927979]
[128.16732788 80.06800079]
[118.09886169 91.18672180]
[124.40508270 111.13574219]
[108.66608429 132.38096619]
[108.66608429 147.38096619]
[108.66608429 162.38096619]
[108.66608429 177.38096619]
[119.56063843 188.51409912]
[119.34696198 203.72622681]
[108.66608429 214.04391479]
[108.66608429 229.04391479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[5 106]
[6 105]
[7 104]
[8 103]
[13 34]
[14 33]
[15 32]
[17 28]
[18 27]
[19 26]
[20 25]
[36 101]
[37 100]
[38 99]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[47 90]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[53 84]
[59 81]
[60 80]
[61 79]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
