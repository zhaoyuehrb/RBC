%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCCCAAAAUACCUCCACUGUGACUAACUUUCAGCUGUUAGGAUUCCAGAACCUUCUUGAAUGGCAGGCCCUGCUCUUUGUCAUUUUCCUGCUCA\
) } def
/len { sequence length } bind def

/coor [
[86.39916992 130.80216980]
[74.41584778 122.58039093]
[64.22956085 133.59126282]
[54.04326248 144.60214233]
[43.85697174 155.61302185]
[33.67067719 166.62390137]
[38.84874344 181.02690125]
[36.72880173 196.18487549]
[27.79800224 208.61465454]
[14.10857582 215.45996094]
[-1.19374871 215.14778137]
[-14.59260750 207.74986267]
[-23.00904274 194.96620178]
[-24.50901604 179.73435974]
[-18.74784851 165.55453491]
[-7.04941082 155.68513489]
[7.89807987 152.39407349]
[22.65979958 156.43760681]
[32.84609222 145.42672729]
[43.03238678 134.41584778]
[53.21867752 123.40497589]
[63.40497208 112.39409637]
[51.60377884 121.65324402]
[36.64019775 120.60864258]
[26.23995590 109.79962158]
[25.77272034 94.80690002]
[35.47972870 83.37125397]
[50.34922791 81.39693451]
[62.70522690 89.90497589]
[51.85409546 79.54867554]
[41.00296402 69.19237518]
[30.15183258 58.83607864]
[19.30070114 48.47977829]
[4.06019831 51.39640045]
[-9.96962643 44.76739883]
[-17.39401817 31.14176178]
[-15.35814762 15.75882149]
[-4.64484787 4.53363371]
[10.62639809 1.78251243]
[24.58348465 8.56332016]
[31.85962868 22.26869774]
[29.65700150 37.62864685]
[40.50813293 47.98494720]
[51.35926437 58.34124756]
[62.21039581 68.69754791]
[73.06152344 79.05384827]
[95.35504150 67.33583832]
[118.70374298 74.20558929]
[125.03126526 60.60549927]
[131.35879517 47.00540924]
[137.68632507 33.40531921]
[136.49252319 17.62921906]
[148.87652588 9.35361385]
[155.20405579 -4.24647522]
[161.53157043 -17.84656334]
[159.54998779 -34.12554932]
[172.81802368 -43.76354599]
[187.68669128 -36.84580994]
[188.86035156 -20.48871613]
[175.13166809 -11.51903820]
[168.80413818 2.08105040]
[162.47660828 15.68113995]
[164.12300110 30.48447227]
[151.28640747 39.73284531]
[144.95887756 53.33293533]
[138.63136292 66.93302155]
[132.30383301 80.53311157]
[137.33657837 94.66362762]
[150.83662415 101.20189667]
[164.33665466 107.74015808]
[177.83670044 114.27842712]
[191.33674622 120.81669617]
[204.83677673 127.35495758]
[218.98175049 117.18636322]
[236.23075867 115.48318481]
[251.93141174 122.61638641]
[261.89321899 136.58547974]
[263.50585938 153.57862854]
[277.38629150 159.26495361]
[292.67999268 154.41917419]
[305.92327881 163.47428894]
[306.95700073 179.48400879]
[294.98818970 190.16703796]
[279.19827271 187.32826233]
[271.69995117 173.14535522]
[257.81954956 167.45903015]
[248.56095886 176.33518982]
[236.56654358 181.00994873]
[223.64903259 180.73806763]
[211.77557373 175.52487183]
[202.76809692 166.13087463]
[198.02380371 153.96110535]
[198.29850769 140.85499573]
[184.79847717 134.31672668]
[171.29843140 127.77846527]
[157.79840088 121.24019623]
[144.29835510 114.70193481]
[130.79830933 108.16366577]
[124.90200043 120.59372711]
[114.19150543 129.53390503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[48 67]
[49 66]
[50 65]
[51 64]
[53 62]
[54 61]
[55 60]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
