%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCACUGUUGCUCCCCUGGCUGUCAGCCUACCUGCUGCAGGACCACUUGCUGCAGGACUACCUGCUGGCAGCCCACCAUUGUGACCACCUGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[82.68211365 226.03463745]
[78.48471832 240.80885315]
[67.45138550 251.49348450]
[52.55002975 255.21440125]
[37.78904724 250.97071838]
[27.13905907 239.90394592]
[23.46486473 224.99099731]
[27.75480080 210.24339294]
[38.85489655 199.62814331]
[53.77928162 196.00071716]
[57.92380905 181.58465576]
[62.06833649 167.16857910]
[66.21286011 152.75251770]
[70.35738373 138.33645630]
[74.50191498 123.92039490]
[71.62954712 113.36818695]
[72.46174622 103.52201080]
[76.25360107 95.53312683]
[81.94499207 90.15819550]
[88.33093262 87.68769836]
[94.24211121 87.94024658]
[98.71194458 90.32122803]
[97.77939606 75.35024261]
[96.84685516 60.37926102]
[95.91430664 45.40827560]
[94.98176575 30.43729210]
[94.04921722 15.46630859]
[93.11667633 0.49532446]
[92.18412781 -14.47565937]
[91.25158691 -29.44664383]
[90.31903839 -44.41762924]
[72.99808502 -53.95129395]
[64.74439240 -71.76376343]
[68.61330414 -90.86819458]
[82.94036865 -103.87827301]
[80.15715790 -118.61779785]
[77.37393951 -133.35733032]
[74.59072113 -148.09686279]
[71.80750275 -162.83638000]
[61.64397049 -174.96128845]
[66.88539886 -188.90318298]
[64.10218048 -203.64271545]
[61.31896591 -218.38224792]
[58.53574753 -233.12178040]
[55.75253296 -247.86129761]
[44.65574265 -259.93579102]
[49.82166672 -275.50003052]
[65.93605042 -278.54284668]
[76.42179108 -265.93408203]
[70.49205780 -250.64451599]
[73.27527618 -235.90498352]
[76.05849457 -221.16546631]
[78.84171295 -206.42593384]
[81.62492371 -191.68640137]
[91.58938599 -180.61578369]
[86.54703522 -165.61959839]
[89.33025360 -150.88008118]
[92.11346436 -136.14054871]
[94.89668274 -121.40101624]
[97.67990112 -106.66148376]
[108.14917755 -104.29988098]
[117.21838379 -98.48901367]
[123.78619385 -89.90315247]
[127.04436493 -79.55534363]
[126.57717133 -68.67797852]
[122.41417694 -58.57596970]
[115.02995300 -50.47024536]
[105.29002380 -45.35017014]
[106.22257233 -30.37918854]
[107.15511322 -15.40820408]
[108.08766174 -0.43722010]
[109.02020264 14.53376389]
[109.95275116 29.50474739]
[110.88529205 44.47573090]
[111.81784058 59.44671631]
[112.75038147 74.41770172]
[113.68292236 89.38868713]
[122.23340607 101.71302032]
[135.93025208 107.82826996]
[149.62710571 113.94352722]
[165.87330627 111.70900726]
[175.71647644 124.82556152]
[169.03082275 139.80000305]
[152.69395447 141.22790527]
[143.51185608 127.64037323]
[129.81500244 121.52512360]
[116.11815643 115.40986633]
[109.31810760 118.57363129]
[122.74475098 125.26132202]
[125.88762665 139.92837524]
[116.38013458 151.53042603]
[101.38146210 151.33108521]
[92.18567657 139.48045349]
[95.71802521 124.90115356]
[88.91797638 128.06491089]
[84.77345276 142.48098755]
[80.62892914 156.89704895]
[76.48439789 171.31311035]
[72.33987427 185.72917175]
[68.19535065 200.14523315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 100]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[31 68]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
