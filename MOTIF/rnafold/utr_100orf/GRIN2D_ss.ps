%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:05:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGCCGGGUUCCGGUCCUGGCCCCCCCGCCAUCCCCCCAACAGAACAGGGUCAUGAAAAGAGGCCGCCCGGCGGGGCCCGCAGGCGAUGCGCGGCGCCGGUGGCCCCCGCGGCCCUCGGGGCCCCGCUAAGAUGCUGCUGCUGCUGGCGCUGGCCUGCGCCAGCCCGUUCCCGGAGGAGGCGCCGG\
) } def
/len { sequence length } bind def

/coor [
[94.45684814 313.75622559]
[93.95827484 298.76449585]
[90.58731079 292.17135620]
[93.57810211 283.51992798]
[93.32878113 268.52197266]
[93.07946014 253.52406311]
[92.83013916 238.52613831]
[82.39904022 230.94293213]
[78.18283081 218.54953003]
[81.93540192 205.80485535]
[92.50000000 197.43173218]
[92.50000000 182.43173218]
[92.50000000 167.43173218]
[92.50000000 152.43173218]
[92.50000000 137.43173218]
[92.50000000 122.43172455]
[85.71591949 119.23387146]
[73.39301300 127.78640747]
[72.14776611 112.83815765]
[65.36368561 109.64030457]
[53.79328537 119.18628693]
[42.22288132 128.73226929]
[30.65247917 138.27824402]
[29.39392090 154.03234863]
[17.31014061 164.21850586]
[1.57022989 162.79345703]
[-8.48760128 150.60266113]
[-6.89621925 134.87869263]
[5.40023613 124.95030975]
[21.10649681 126.70784760]
[32.67689896 117.16186523]
[44.24730301 107.61588287]
[55.81770325 98.06990051]
[53.01971817 91.11135864]
[39.10255432 96.70711517]
[33.50701141 82.78986359]
[47.42374420 77.19428253]
[44.62575912 70.23574066]
[29.66770172 71.35668945]
[14.70964432 72.47764587]
[7.45275593 86.09164429]
[-6.02355146 93.60115814]
[-21.41903687 92.60990906]
[-33.82105637 83.43421173]
[-39.27217102 69.00199127]
[-36.03295135 53.91852188]
[-25.13701820 42.99688339]
[-10.06122589 39.72212982]
[4.38379574 45.13922119]
[13.58869267 57.51958847]
[28.54674911 56.39863586]
[43.50480652 55.27768326]
[47.99593735 40.96580887]
[57.50043869 29.36130714]
[70.64696503 22.13850784]
[85.53869629 20.33954239]
[100.02701569 24.22396851]
[112.02148438 33.23133087]
[119.79151917 46.06201935]
[122.21603394 60.86478043]
[118.94625092 75.50143433]
[122.88871002 61.02880478]
[119.05054474 45.68021774]
[129.86093140 35.43401337]
[133.80339050 20.96138382]
[137.74586487 6.48875427]
[133.90769958 -8.85983086]
[144.71809387 -19.10603714]
[148.66055298 -33.57866669]
[137.76866150 -50.44107437]
[142.68382263 -69.59001923]
[159.81469727 -78.83265686]
[163.03085327 -93.48381042]
[166.24702454 -108.13496399]
[169.46318054 -122.78612518]
[172.67933655 -137.43727112]
[175.89549255 -152.08842468]
[179.11164856 -166.73957825]
[182.32781982 -181.39073181]
[185.54397583 -196.04188538]
[188.76013184 -210.69303894]
[180.50601196 -223.90316772]
[183.97636414 -238.71569824]
[196.62106323 -246.50334167]
[199.83721924 -261.15447998]
[203.05337524 -275.80563354]
[194.52975464 -286.24920654]
[193.59706116 -299.50207520]
[200.37248230 -310.70324707]
[212.18692017 -315.87356567]
[215.64614868 -330.46923828]
[219.10539246 -345.06491089]
[222.56462097 -359.66058350]
[221.49835205 -368.75207520]
[226.20455933 -374.46911621]
[229.90592957 -389.00527954]
[225.81317139 -404.28796387]
[236.45176697 -414.71243286]
[240.15312195 -429.24859619]
[243.85449219 -443.78472900]
[241.90354919 -460.62606812]
[257.54663086 -467.16290283]
[268.15844727 -453.94073486]
[258.39065552 -440.08337402]
[254.68928528 -425.54721069]
[250.98793030 -411.01107788]
[255.34541321 -396.76812744]
[244.44207764 -385.30392456]
[240.74072266 -370.76776123]
[237.16029358 -356.20135498]
[233.70106506 -341.60568237]
[230.24182129 -327.01000977]
[226.78259277 -312.41433716]
[236.21498108 -298.50094604]
[232.60403442 -281.73864746]
[217.70452881 -272.58947754]
[214.48837280 -257.93832397]
[211.27221680 -243.28718567]
[219.49246216 -230.91935730]
[216.43952942 -216.01518250]
[203.41128540 -207.47688293]
[200.19512939 -192.82572937]
[196.97897339 -178.17457581]
[193.76280212 -163.52342224]
[190.54664612 -148.87226868]
[187.33049011 -134.22111511]
[184.11433411 -119.56996155]
[180.89817810 -104.91880798]
[177.68200684 -90.26765442]
[174.46585083 -75.61650085]
[182.14622498 -68.75713348]
[186.30972290 -59.25049210]
[186.14015198 -48.79261398]
[181.60098267 -39.27999496]
[173.45420837 -32.46565628]
[163.13317871 -29.63620567]
[159.19071960 -15.16357517]
[163.31086731 -0.85016924]
[152.21849060 10.43121529]
[148.27603149 24.90384483]
[144.33357239 39.37647247]
[148.45372009 53.68988037]
[137.36134338 64.97126770]
[133.41888428 79.44389343]
[139.58818054 93.11648560]
[153.04815674 99.73683167]
[166.50813293 106.35718536]
[179.96810913 112.97753143]
[193.42808533 119.59788513]
[206.88806152 126.21823883]
[220.34803772 132.83859253]
[233.80801392 139.45893860]
[248.68559265 134.12666321]
[262.94024658 140.95166016]
[268.11492920 155.88479614]
[261.13958740 170.06648254]
[246.15258789 175.08299255]
[232.04544067 167.95811462]
[227.18766785 152.91891479]
[213.72769165 146.29856873]
[200.26771545 139.67820740]
[186.80773926 133.05786133]
[173.34776306 126.43750763]
[159.88778687 119.81716156]
[146.42781067 113.19680786]
[132.96783447 106.57646179]
[126.60087585 110.54027557]
[139.83340454 117.60427094]
[140.33216858 132.59597778]
[127.59839630 140.52384949]
[114.36573029 133.46009827]
[113.86695862 118.46791077]
[107.50000000 122.43172455]
[107.50000000 137.43173218]
[107.50000000 152.43173218]
[107.50000000 167.43173218]
[107.50000000 182.43173218]
[107.50000000 197.43173218]
[120.09132385 209.56274414]
[120.02427673 226.70942688]
[107.82806396 238.27680969]
[108.07738495 253.27473450]
[108.32670593 268.27267456]
[108.57602692 283.27059937]
[108.94998932 298.26593018]
[109.44856262 313.25762939]
[116.01802826 328.88705444]
[102.81802368 339.52642822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 186]
[2 185]
[4 184]
[5 183]
[6 182]
[7 181]
[11 178]
[12 177]
[13 176]
[14 175]
[15 174]
[16 173]
[20 33]
[21 32]
[22 31]
[23 30]
[38 52]
[39 51]
[40 50]
[61 144]
[62 143]
[64 141]
[65 140]
[66 139]
[68 137]
[69 136]
[72 130]
[73 129]
[74 128]
[75 127]
[76 126]
[77 125]
[78 124]
[79 123]
[80 122]
[81 121]
[84 118]
[85 117]
[86 116]
[90 113]
[91 112]
[92 111]
[93 110]
[95 109]
[96 108]
[98 106]
[99 105]
[100 104]
[145 166]
[146 165]
[147 164]
[148 163]
[149 162]
[150 161]
[151 160]
[152 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
