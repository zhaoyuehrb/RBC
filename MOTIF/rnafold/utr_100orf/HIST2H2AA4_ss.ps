%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACUUUCCCGAUCGCCAGGCAGGAGUUUCUCUCGGUGACUACUAUCGCUGUCAUGUCUGGUCGUGGCAAGCAAGGAGGCAAGGCCCGCGCCAAGGCCAAGUCGCGCUCGUCCCGCGCUGGCCUUCAGUUCCCGGUAGGGCGAGUGCAUCGCU\
) } def
/len { sequence length } bind def

/coor [
[79.11872101 131.82592773]
[72.24731445 125.44548035]
[67.21212006 117.65631104]
[64.28058624 108.96440125]
[49.29307175 109.57623291]
[34.30555344 110.18806458]
[20.83245850 118.48181152]
[7.80018568 111.27008057]
[-7.18733120 111.88190460]
[-22.16782761 112.64657593]
[-37.13974762 113.56400299]
[-41.58846283 116.51911163]
[-46.25723648 117.34692383]
[-50.28423309 116.32850647]
[-53.05014801 114.05101013]
[-68.05014801 114.05101013]
[-83.05014801 114.05101013]
[-98.05014801 114.05101013]
[-113.05014801 114.05101013]
[-128.05015564 114.05101013]
[-143.05015564 114.05101013]
[-158.05015564 114.05101013]
[-171.85032654 121.78830719]
[-184.57759094 114.05101013]
[-199.57759094 114.05101013]
[-188.62174988 124.29647064]
[-185.62591553 138.99426270]
[-191.69769287 152.71043396]
[-204.59226990 160.37399292]
[-219.54238892 159.15159607]
[-231.02079773 149.49520874]
[-234.78384399 134.97489929]
[-229.44026184 120.95897675]
[-216.96482849 112.62905884]
[-231.76551819 110.19191742]
[-246.56619263 107.75477600]
[-261.36688232 105.31762695]
[-276.16757202 102.88048553]
[-290.96826172 100.44334412]
[-303.66311646 109.85695648]
[-319.28369141 107.45415497]
[-328.56256104 94.66047668]
[-325.99472046 79.06618500]
[-313.10366821 69.92310333]
[-297.53741455 72.65564728]
[-288.53112793 85.64266205]
[-273.73043823 88.07980347]
[-258.92974854 90.51694489]
[-244.12905884 92.95408630]
[-229.32836914 95.39122772]
[-214.52767944 97.82836914]
[-199.57759094 99.05101013]
[-184.57759094 99.05101013]
[-171.85032654 91.31370544]
[-158.05015564 99.05101013]
[-143.05015564 99.05101013]
[-128.05015564 99.05101013]
[-113.05014801 99.05101013]
[-98.05014801 99.05101013]
[-83.05014801 99.05101013]
[-68.05014801 99.05101013]
[-53.05014801 99.05101013]
[-38.05717087 98.59207916]
[-23.08525276 97.67465973]
[-16.56199455 94.10493469]
[-7.79916000 96.89439392]
[7.18835688 96.28256226]
[19.58944321 88.03256989]
[33.69372559 95.20054626]
[48.68124008 94.58871460]
[63.66875839 93.97689056]
[66.73126984 82.74910736]
[73.23296356 72.85348511]
[82.63859558 65.33251190]
[94.10088348 61.02385330]
[106.53632355 60.46845627]
[118.72744751 63.84593582]
[129.44201660 70.94474030]
[137.29254150 58.16313553]
[145.14306641 45.38153458]
[141.68646240 30.19306374]
[149.83007812 17.34253502]
[164.33126831 14.14079475]
[172.18179321 1.35919344]
[180.03231812 -11.42240810]
[187.88282776 -24.20401001]
[181.83508301 -38.49401855]
[185.37460327 -53.60201263]
[197.14036560 -63.71865845]
[212.60820007 -64.95389557]
[225.83039856 -56.83275604]
[231.72276306 -42.47798157]
[228.01956177 -27.40927315]
[216.14476013 -17.42086029]
[200.66442871 -16.35349083]
[192.81391907 -3.57188845]
[184.96339417 9.20971298]
[177.11286926 21.99131393]
[180.81417847 36.37310791]
[173.03471375 49.44730377]
[157.92466736 53.23205566]
[150.07414246 66.01365662]
[142.22361755 78.79525757]
[146.74232483 93.09844971]
[160.51106262 99.05005646]
[174.27981567 105.00165558]
[188.04856873 110.95325470]
[201.81730652 116.90486145]
[215.58605957 122.85646057]
[229.35481262 128.80805969]
[243.12356567 134.75965881]
[256.89230347 140.71125793]
[270.66107178 146.66285706]
[280.59536743 142.05061340]
[291.20523071 143.66810608]
[298.98745728 150.73501587]
[301.50900269 160.71310425]
[315.02352905 167.22135925]
[328.53808594 173.72961426]
[342.05261230 180.23786926]
[355.56713867 186.74612427]
[368.21188354 178.02798462]
[383.52288818 176.81620789]
[397.38159180 183.43678284]
[406.06005859 196.10877991]
[407.22384644 211.42352295]
[400.55987549 225.26139832]
[387.86071777 233.90011597]
[372.54241943 235.01586914]
[358.72549438 228.30856323]
[350.12661743 215.58239746]
[349.05889893 200.26066589]
[335.54434204 193.75241089]
[322.02981567 187.24415588]
[308.51528931 180.73590088]
[295.00076294 174.22764587]
[275.92028809 177.13742065]
[264.70944214 160.43161011]
[250.94070435 154.48001099]
[237.17195129 148.52841187]
[223.40321350 142.57681274]
[209.63446045 136.62521362]
[195.86570740 130.67359924]
[182.09696960 124.72200775]
[168.32821655 118.77040100]
[154.55946350 112.81880188]
[140.79071045 106.86720276]
[137.47816467 116.50669861]
[131.95248413 124.95009613]
[124.59500885 131.70611572]
[115.89163971 136.39660645]
[106.40088654 138.77745056]
[96.71807098 138.75094604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 71]
[5 70]
[6 69]
[8 67]
[9 66]
[10 64]
[11 63]
[15 62]
[16 61]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[24 53]
[25 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[78 103]
[79 102]
[80 101]
[83 98]
[84 97]
[85 96]
[86 95]
[104 147]
[105 146]
[106 145]
[107 144]
[108 143]
[109 142]
[110 141]
[111 140]
[112 139]
[113 138]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
