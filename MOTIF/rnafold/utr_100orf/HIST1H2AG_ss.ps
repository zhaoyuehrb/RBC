%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGUGGUUGCUCGUAGUGAGUUGCGCUCGCUAUGUCUGGACGUGGCAAGCAGGGAGGCAAAGCCCGCGCUAAGGCCAAGACUCGCUCUUCUAGGGCCGGUCUCCAGUUCCCCGUGGGCCGAGUGCACCGCC\
) } def
/len { sequence length } bind def

/coor [
[-83.53501892 393.59970093]
[-98.65648651 397.58404541]
[-112.77918243 390.86962891]
[-119.23480225 376.62677002]
[-114.97518921 361.58053589]
[-102.01161957 352.83526611]
[-100.61737061 337.90020752]
[-99.22312164 322.96511841]
[-97.82887268 308.03005981]
[-96.43462372 293.09500122]
[-98.96822357 286.07855225]
[-94.83020782 277.83004761]
[-93.08882141 262.93145752]
[-106.95428467 263.82379150]
[-117.37167358 256.60476685]
[-131.40641785 261.89874268]
[-145.44116211 267.19268799]
[-159.47590637 272.48663330]
[-173.51065063 277.78060913]
[-187.54539490 283.07455444]
[-201.58013916 288.36853027]
[-215.61488342 293.66247559]
[-229.64961243 298.95645142]
[-243.68435669 304.25039673]
[-256.37030029 315.49777222]
[-270.68994141 306.42117310]
[-265.93212891 290.14852905]
[-248.97831726 290.21566772]
[-234.94357300 284.92169189]
[-220.90882874 279.62774658]
[-206.87408447 274.33377075]
[-192.83935547 269.03982544]
[-178.80461121 263.74584961]
[-164.76986694 258.45190430]
[-150.73512268 253.15794373]
[-136.70037842 247.86398315]
[-122.66563416 242.57002258]
[-120.53248596 233.67395020]
[-114.23867035 226.61633301]
[-105.06547546 223.27024841]
[-95.09555817 224.70449829]
[-86.74084473 230.86550903]
[-82.15939331 240.52281189]
[-71.49126434 229.97810364]
[-67.87869263 215.52822876]
[-52.62471771 211.32980347]
[-41.95658875 200.78509521]
[-31.28845978 190.24037170]
[-20.62033081 179.69566345]
[-20.79075813 164.84619141]
[-10.12197208 154.00038147]
[5.45466566 153.92230225]
[16.12279510 143.37759399]
[19.73536301 128.92771912]
[34.98934174 124.72930145]
[45.65746689 114.18458557]
[56.32559586 103.63986969]
[66.99372864 93.09515381]
[73.25379944 79.46388245]
[74.30014801 64.50042725]
[75.34649658 49.53696442]
[63.64033127 36.59668732]
[64.84511566 19.52619934]
[77.73576355 8.78939915]
[78.43364716 -6.19435740]
[79.13152313 -21.17811394]
[71.12501526 -35.48992157]
[79.74747467 -49.43929672]
[96.12886810 -48.67632294]
[103.41741180 -33.98587799]
[94.11528015 -20.48023415]
[93.41740417 -5.49647760]
[92.71952057 9.48727894]
[102.67713928 17.74838638]
[106.08172607 30.43289757]
[101.46395874 42.93603134]
[90.30995941 50.58331299]
[89.26361084 65.54677582]
[88.21726227 80.51023102]
[102.42544556 79.33382416]
[113.21621704 86.57128906]
[127.12397003 80.95219421]
[141.03172302 75.33309174]
[154.93948364 69.71399689]
[168.84724426 64.09489441]
[178.74409485 51.75136185]
[193.44306946 54.15753937]
[207.35081482 48.53844070]
[221.25857544 42.91934204]
[235.16633606 37.30024338]
[249.07409668 31.68114471]
[261.49487305 20.14163399]
[276.02185059 28.88255882]
[271.64398193 45.26152802]
[254.69319153 45.58890152]
[240.78543091 51.20800400]
[226.87768555 56.82710266]
[212.96992493 62.44620132]
[199.06216431 68.06529999]
[190.16007996 80.00691986]
[174.46633911 78.00265503]
[160.55859375 83.62174988]
[146.65083313 89.24085236]
[132.74307251 94.85995483]
[118.83531189 100.47904968]
[116.94763184 109.63890839]
[110.73851013 117.05305481]
[101.46131897 120.75664520]
[91.22044373 119.58580017]
[82.49488068 113.52127838]
[77.53844452 103.76328278]
[66.87031555 114.30799866]
[56.20218277 124.85271454]
[45.53405762 135.39743042]
[41.15843201 150.60151672]
[26.66751099 154.04571533]
[15.99938202 164.59043884]
[15.74007225 180.16511536]
[4.77085972 190.70698547]
[-10.07561493 190.36378479]
[-20.74374390 200.90850830]
[-31.41187286 211.45321655]
[-42.08000183 221.99794006]
[-46.45562744 237.20202637]
[-60.94654846 240.64622498]
[-71.61467743 251.19094849]
[-78.19023895 264.67285156]
[-79.93163300 279.57144165]
[-81.49956512 294.48925781]
[-82.89381409 309.42431641]
[-84.28805542 324.35937500]
[-85.68230438 339.29443359]
[-87.07655334 354.22949219]
[-75.95568848 365.22314453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 133]
[7 132]
[8 131]
[9 130]
[10 129]
[12 128]
[13 127]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[43 126]
[44 125]
[46 123]
[47 122]
[48 121]
[49 120]
[52 117]
[53 116]
[55 114]
[56 113]
[57 112]
[58 111]
[59 79]
[60 78]
[61 77]
[64 73]
[65 72]
[66 71]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
