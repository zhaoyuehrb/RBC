%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAUUCCCCAUUGGAUCCCUCGAAACUAACAACUUCCGUCGCUUUACUCCGGAGUCACUGGUGGAGAUAGAGAAGCAAAUUGCUGCCAAGCAGGGAA\
) } def
/len { sequence length } bind def

/coor [
[99.83110046 218.89463806]
[89.69421387 230.80168152]
[74.26667786 233.35614014]
[60.83291626 225.35189819]
[55.73593140 210.56829834]
[61.38236618 195.98571777]
[75.10614777 188.48959351]
[77.88935852 173.75006104]
[80.67257690 159.01052856]
[83.45579529 144.27101135]
[86.23901367 129.53147888]
[77.43953705 122.62236023]
[71.64904022 113.30555725]
[69.43968964 102.78353882]
[70.93247986 92.35652924]
[75.79998016 83.26197052]
[61.01894760 80.70832062]
[46.23791504 78.15466309]
[39.40249634 91.63681793]
[28.89562607 102.50406647]
[15.65156651 109.79010010]
[0.84797007 112.84704590]
[-14.19883728 111.40309143]
[-28.15090179 105.58662415]
[-39.76762009 95.91484833]
[-48.01603317 83.24776459]
[-52.16270828 68.71172333]
[-51.83891678 53.59925842]
[-47.07345581 39.25416183]
[-38.29006195 26.95199013]
[-26.26975441 17.78664207]
[-12.08136559 12.57309723]
[3.01347971 11.77493763]
[17.67255783 15.46313667]
[30.59239578 23.30974197]
[40.62416840 34.61703873]
[46.87585831 48.37958908]
[48.79156876 63.37363434]
[63.57260132 65.92729187]
[78.35363007 68.48094177]
[92.14392853 62.57943726]
[100.50170898 50.12361908]
[97.65821838 34.80851746]
[106.31163788 22.29560471]
[120.92977142 19.67915344]
[129.28755188 7.22333431]
[137.64533997 -5.23248529]
[146.00312805 -17.68830490]
[154.36090088 -30.14412498]
[162.52397156 -42.72841644]
[170.49034119 -55.43813705]
[178.45671082 -68.14785767]
[186.42306519 -80.85758209]
[194.38943481 -93.56729889]
[187.12683105 -107.10059357]
[187.61991882 -122.45156860]
[195.73605347 -135.49089050]
[209.29205322 -142.71104431]
[224.64140320 -142.16984558]
[237.65521240 -134.01287842]
[244.83283997 -120.43431091]
[244.24353027 -105.08673096]
[236.04580688 -92.09854889]
[222.44482422 -84.96351624]
[207.09915161 -85.60092926]
[199.13279724 -72.89121246]
[191.16642761 -60.18149185]
[183.20005798 -47.47177124]
[175.23368835 -34.76205063]
[174.33265686 -27.29119873]
[166.81672668 -21.78634071]
[158.45893860 -9.33052158]
[150.10116577 3.12529850]
[141.74337769 15.58111858]
[133.38558960 28.03693771]
[136.50599670 42.55584335]
[128.20745850 55.30687714]
[112.95752716 58.48140335]
[104.59974670 70.93722534]
[115.98867035 74.54993439]
[125.22396851 82.52338409]
[130.68142700 93.71793365]
[131.29951477 106.40980530]
[126.77966309 118.55593109]
[136.61859131 129.87828064]
[146.45751953 141.20062256]
[156.29644775 152.52296448]
[171.96902466 157.35020447]
[175.36054993 173.39482117]
[162.98208618 184.15148926]
[147.56756592 178.55467224]
[144.97410583 162.36189270]
[135.13517761 151.03955078]
[125.29624176 139.71720886]
[115.45731354 128.39486694]
[100.97853851 132.31469727]
[98.19532013 147.05421448]
[95.41210938 161.79374695]
[92.62889099 176.53327942]
[89.84567261 191.27281189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[16 40]
[17 39]
[18 38]
[41 79]
[42 78]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
