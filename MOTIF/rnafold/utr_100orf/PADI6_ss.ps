%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGUCUGAGGCUGCUGUGCUGAGUGAGGGCUGCGGUGCAGGCCUGAGGAUGGUCAGCGUGGAGGGCCGAGCCAUGUCCUUCCAGAGUAUCAUCCACCUGUCCCUGGACAGCCCUGUCCAUGCCGUUUGUGUGUUGGGCACAGAAAUCU\
) } def
/len { sequence length } bind def

/coor [
[83.18051147 114.90564728]
[69.27795410 120.53760529]
[59.39251709 132.89028931]
[44.69133377 130.49769592]
[30.78877831 136.12965393]
[16.88622093 141.76161194]
[2.98366570 147.39356995]
[-10.91889000 153.02552795]
[-21.86226463 167.79788208]
[-39.12048721 164.77238464]
[-52.90287018 170.69235229]
[-66.68524933 176.61230469]
[-80.46763611 182.53227234]
[-84.79035187 187.67247009]
[-90.24784851 189.52908325]
[-94.94863892 188.39855957]
[-108.96535492 193.74008179]
[-122.98206329 199.08158875]
[-136.99877930 204.42309570]
[-151.01548767 209.76461792]
[-165.03221130 215.10612488]
[-179.04891968 220.44763184]
[-193.06562805 225.78915405]
[-207.02601624 231.27618408]
[-220.92857361 236.90814209]
[-234.83113098 242.54010010]
[-244.48332214 255.79782104]
[-260.76016235 253.79881287]
[-266.91744995 238.59947205]
[-256.62109375 225.83558655]
[-240.46308899 228.63754272]
[-226.56053162 223.00558472]
[-212.65797424 217.37362671]
[-207.60673523 211.91189575]
[-198.40715027 211.77243042]
[-184.39042664 206.43092346]
[-170.37371826 201.08941650]
[-156.35700989 195.74789429]
[-142.34028625 190.40638733]
[-128.32357788 185.06488037]
[-114.30686188 179.72335815]
[-100.29015350 174.38185120]
[-86.38759613 168.74989319]
[-72.60521698 162.82992554]
[-58.82283401 156.90997314]
[-45.04045105 150.99000549]
[-40.24085236 139.84230042]
[-28.75355911 134.81626892]
[-16.55084610 139.12297058]
[-2.64829087 133.49101257]
[11.25426483 127.85906219]
[25.15682030 122.22710419]
[39.05937576 116.59514618]
[47.95040894 104.64530182]
[63.64599609 106.63504791]
[77.54855347 101.00309753]
[86.30333710 82.18216705]
[106.74261475 78.56146240]
[115.76014709 66.57463074]
[124.77767944 54.58779907]
[133.79521179 42.60096741]
[142.81274414 30.61413383]
[151.83026123 18.62730026]
[160.84779358 6.64046860]
[169.61399841 -5.53136826]
[178.12509155 -17.88294029]
[186.63618469 -30.23451424]
[195.14727783 -42.58608627]
[180.32861328 -40.26076889]
[167.39265442 -47.85425186]
[162.19952393 -61.92661285]
[167.10174561 -76.10293579]
[179.87858582 -83.96120453]
[194.74200439 -81.94155121]
[204.95870972 -70.95889282]
[205.90034485 -55.98809814]
[216.11383057 -66.97376251]
[226.32730103 -77.95942688]
[236.54078674 -88.94509125]
[246.75425720 -99.93075562]
[242.72094727 -117.55305481]
[249.96391296 -133.94578552]
[265.43618774 -142.67561340]
[282.90231323 -140.43910217]
[292.64996338 -151.84013367]
[302.39761353 -163.24114990]
[305.62536621 -171.85704041]
[312.46859741 -174.77522278]
[322.45132446 -185.97099304]
[320.02096558 -201.41856384]
[328.13293457 -214.78755188]
[342.95700073 -219.76554871]
[357.49374390 -214.00207520]
[364.87930298 -200.21849060]
[361.62646484 -184.92295837]
[349.27111816 -175.33758545]
[333.64709473 -175.98826599]
[323.66436768 -164.79249573]
[313.79864502 -153.49349976]
[304.05099487 -142.09246826]
[294.30334473 -130.69145203]
[298.86856079 -119.36451721]
[298.15505981 -107.10052490]
[292.23776245 -96.25224304]
[282.19583130 -88.92731476]
[269.91638184 -86.57878876]
[257.73992920 -89.71727753]
[247.52644348 -78.73161316]
[237.31297302 -67.74594879]
[227.09948730 -56.76028442]
[216.88601685 -45.77462006]
[207.49884033 -34.07499695]
[198.98776245 -21.72342300]
[190.47666931 -9.37185097]
[181.96557617 2.97972178]
[181.94989014 7.81451941]
[178.85281372 12.67655945]
[172.83462524 15.65799809]
[163.81709290 27.64483070]
[154.79957581 39.63166428]
[145.78204346 51.61849594]
[136.76451111 63.60532761]
[127.74697876 75.59216309]
[118.72945404 87.57899475]
[122.46290588 100.70124817]
[117.91822052 113.56507111]
[126.17050934 126.09103394]
[134.42279053 138.61700439]
[142.67507935 151.14295959]
[156.72842407 158.41029358]
[157.26922607 173.29507446]
[165.52151489 185.82104492]
[173.77380371 198.34700012]
[182.02609253 210.87295532]
[190.27838135 223.39892578]
[204.04141235 233.29920959]
[198.33801270 249.26502991]
[181.41728210 248.20431519]
[177.75242615 231.65121460]
[169.50013733 219.12524414]
[161.24784851 206.59928894]
[152.99555969 194.07333374]
[144.74327087 181.54736328]
[131.28018188 175.17597961]
[130.14912415 159.39524841]
[121.89683533 146.86929321]
[113.64454651 134.34332275]
[105.39225769 121.81735992]
[99.33287811 122.46394348]
[93.32254791 121.45892334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[10 46]
[11 45]
[12 44]
[13 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 33]
[25 32]
[26 31]
[58 124]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[64 118]
[65 115]
[66 114]
[67 113]
[68 112]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[84 101]
[85 100]
[86 99]
[88 98]
[89 97]
[126 148]
[127 147]
[128 146]
[129 145]
[131 143]
[132 142]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
