%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCAGGCAAGUUCGCCCCAGGAGCGGGCGCCGCUGGCCGAGAUGCUCCUCCGGGACUUGGUGCUGCGCCGUGGCUGCUGCUGGUCCUCGCUGCUGCUGCACUGCGCGCUCCACCCGCUCUGGGGCUUCGUGCAGGUGACGC\
) } def
/len { sequence length } bind def

/coor [
[131.75675964 464.03472900]
[130.44030762 449.09259033]
[129.12385559 434.15048218]
[127.80740356 419.20837402]
[118.71342468 411.15850830]
[117.53573608 398.66708374]
[125.45574951 388.42297363]
[124.46784973 373.45553589]
[123.47994995 358.48809814]
[110.82211304 353.25131226]
[101.62364197 343.01147461]
[97.73184204 329.73931885]
[99.96524811 316.02264404]
[107.94219971 304.56179810]
[120.14470673 297.63806152]
[119.48583984 282.65252686]
[118.82698059 267.66702271]
[118.16811371 252.68148804]
[117.50925446 237.69596863]
[116.85038757 222.71044922]
[116.19152832 207.72491455]
[112.72856140 201.12969971]
[115.68644714 192.40371704]
[115.35694122 177.40733337]
[115.02742767 162.41094971]
[114.69791412 147.41456604]
[114.36840820 132.41819763]
[114.03889465 117.42181396]
[97.13202667 128.24282837]
[73.47023773 121.90110016]
[58.51455688 123.05334473]
[43.55887985 124.20558929]
[28.23100662 131.45077515]
[17.02579308 118.72757721]
[26.14984322 104.43814087]
[42.40663528 109.24990845]
[57.36231232 108.09766388]
[72.31799316 106.94541931]
[74.58855438 99.79737854]
[60.29246902 95.25624084]
[45.99638367 90.71511078]
[31.70037079 86.17374420]
[36.24197769 71.87780762]
[50.53751373 76.41902161]
[64.83360291 80.96015930]
[79.12969208 85.50128937]
[81.40025330 78.35324860]
[69.85096741 68.78173065]
[58.30167389 59.21022034]
[42.05268478 56.99607086]
[36.09699249 41.71661377]
[46.56130600 29.09004593]
[62.68082809 32.10549545]
[67.87318420 47.66092682]
[79.42247772 57.23244095]
[90.97177124 66.80395508]
[107.64022827 70.58332062]
[118.43764496 81.12828064]
[121.51909637 93.87313843]
[130.44216919 81.81582642]
[139.36524963 69.75852203]
[141.35519409 54.06295395]
[155.14569092 48.43521500]
[164.06875610 36.37790680]
[166.68858337 27.54452515]
[173.32266235 24.15662384]
[182.50846863 12.29824162]
[191.69425964 0.43986017]
[200.88005066 -11.41852188]
[202.61662292 -31.45078087]
[220.70747375 -38.14854431]
[229.36352539 -50.39896011]
[238.01959229 -62.64937592]
[246.67564392 -74.89978790]
[255.33169556 -87.15020752]
[256.97634888 -102.88569641]
[270.63989258 -108.81501770]
[279.29595947 -121.06543732]
[280.94061279 -136.80093384]
[294.60415649 -142.73025513]
[303.26022339 -154.98066711]
[298.14373779 -169.62994385]
[302.64727783 -184.47911072]
[315.03915405 -193.81835938]
[330.55438232 -194.05654907]
[343.22711182 -185.10211182]
[348.18435669 -170.39819336]
[343.51998901 -155.59875488]
[331.02755737 -146.39448547]
[315.51062012 -146.32461548]
[306.85458374 -134.07418823]
[305.82904053 -119.21493530]
[291.54638672 -112.40937805]
[282.89031982 -100.15896606]
[281.86480713 -85.29970551]
[267.58212280 -78.49414825]
[258.92605591 -66.24373627]
[250.27000427 -53.99331665]
[241.61393738 -41.74290085]
[232.95788574 -29.49248695]
[235.59959412 -19.52388573]
[232.20776367 -9.55169487]
[223.68649292 -2.99181437]
[212.73843384 -2.23272943]
[203.55264282 9.62565231]
[194.36683655 21.48403358]
[185.18104553 33.34241486]
[176.12606812 45.30098343]
[167.20298767 57.35829163]
[165.85130310 72.19143677]
[151.42256165 78.68159485]
[142.49948120 90.73890686]
[133.57640076 102.79621124]
[129.03527832 117.09230042]
[129.36479187 132.08868408]
[129.69429016 147.08506775]
[130.02380371 162.08143616]
[130.35331726 177.07781982]
[130.68283081 192.07420349]
[131.17704773 207.06605530]
[131.83590698 222.05157471]
[132.49478149 237.03710938]
[133.15364075 252.02262878]
[133.81250000 267.00814819]
[134.47135925 281.99368286]
[135.13023376 296.97918701]
[149.84960938 304.43029785]
[158.77095032 318.19647217]
[159.55076599 334.48843384]
[152.07138062 348.87762451]
[138.44738770 357.50018311]
[139.43528748 372.46762085]
[140.42318726 387.43505859]
[151.01942444 402.45114136]
[142.74952698 417.89190674]
[144.06597900 432.83401489]
[145.38243103 447.77615356]
[146.69888306 462.71826172]
[158.02180481 474.08361816]
[156.05267334 490.00537109]
[142.30204773 498.26971436]
[127.31821442 492.53695679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 135]
[7 133]
[8 132]
[9 131]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[28 114]
[30 38]
[31 37]
[32 36]
[47 56]
[48 55]
[49 54]
[59 113]
[60 112]
[61 111]
[63 109]
[64 108]
[66 107]
[67 106]
[68 105]
[69 104]
[71 100]
[72 99]
[73 98]
[74 97]
[75 96]
[77 94]
[78 93]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
