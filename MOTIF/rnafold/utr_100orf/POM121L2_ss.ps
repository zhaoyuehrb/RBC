%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCCGAAACCUCGGAAGCCAAAACCGUGCUUGAACUCACUGCCCGCGCCUCAUCUCUCCUCAUGGGCAGUUUCCUGAGCAAACUGGAACUUUCGCCCUCGUCCCCAGCCCAGGUGCGCACCGACUUGCCCGAGAGGCCCACGAAACGCCGGCCACCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[109.56284332 144.57820129]
[102.56021881 131.31307983]
[101.76741791 116.33704376]
[96.39639282 130.34246826]
[91.02537537 144.34791565]
[85.65435028 158.35334778]
[80.28333282 172.35877991]
[83.38692474 188.46156311]
[70.81778717 198.99479675]
[55.50598145 193.12278748]
[53.20297241 176.88615417]
[66.27790070 166.98774719]
[71.64891815 152.98231506]
[77.01994324 138.97688293]
[82.39096069 124.97145844]
[87.76198578 110.96602631]
[82.69357300 105.43779755]
[71.63713074 115.57461548]
[60.58068085 125.71142578]
[49.52423477 135.84823608]
[38.46762085 145.98486328]
[28.33117294 134.92808533]
[39.38742065 124.79179382]
[50.44386673 114.65497589]
[61.50031662 104.51816559]
[72.55676270 94.38135529]
[67.48835754 88.85312653]
[53.07031631 92.99077606]
[38.65227509 97.12842560]
[33.47499847 111.75632477]
[20.66938972 120.51965332]
[5.15946150 120.04873657]
[-7.09089947 110.52464294]
[-11.37117863 95.60958862]
[-6.03552294 81.03871918]
[6.86439991 72.41481781]
[22.36830711 73.05396271]
[34.51462936 82.71038818]
[48.93266678 78.57273865]
[63.35070801 74.43508911]
[87.00457764 74.71316528]
[100.14939117 87.82434845]
[108.82524872 75.58795166]
[117.50110626 63.35154724]
[119.17121887 47.61874008]
[132.84432983 41.71152115]
[141.52018738 29.47512245]
[150.19604492 17.23872185]
[147.74800110 1.85545743]
[156.72087097 -10.43040085]
[171.40155029 -12.66943741]
[180.07740784 -24.90583611]
[172.75958252 -37.02651215]
[170.62951660 -50.97992706]
[173.97709656 -64.64762878]
[182.26312256 -75.96730804]
[194.20584106 -83.24399567]
[207.97908020 -85.40379333]
[221.49156189 -82.15229034]
[230.40162659 -94.21921539]
[239.31170654 -106.28614044]
[248.22177124 -118.35305786]
[250.19477844 -134.05076599]
[263.97921753 -139.69337463]
[272.88928223 -151.76028442]
[281.79934692 -163.82720947]
[290.70941162 -175.89413452]
[299.61950684 -187.96105957]
[308.52957153 -200.02798462]
[317.32293701 -212.18020630]
[325.99880981 -224.41661072]
[334.67465210 -236.65299988]
[330.89779663 -249.61151123]
[335.22546387 -262.19067383]
[345.85946655 -269.85458374]
[358.77191162 -269.97738647]
[367.68197632 -282.04431152]
[369.65499878 -297.74200439]
[383.43939209 -303.38461304]
[392.34948730 -315.45153809]
[401.25955200 -327.51846313]
[400.11901855 -340.39752197]
[407.82815552 -350.27273560]
[419.80612183 -352.16540527]
[428.94708252 -364.05834961]
[438.08807373 -375.95132446]
[447.22903442 -387.84429932]
[439.15045166 -400.64904785]
[435.94619751 -415.41741943]
[437.98422241 -430.36288452]
[444.99935913 -443.68420410]
[456.12786865 -453.78259277]
[470.01364136 -459.45355225]
[484.97348022 -460.03045654]
[499.20101929 -455.46301270]
[508.34201050 -467.35595703]
[509.95800781 -483.67529297]
[525.00848389 -490.18801880]
[538.01074219 -480.19439697]
[535.58923340 -463.97503662]
[520.23498535 -458.21499634]
[511.09399414 -446.32202148]
[519.16802979 -433.74841309]
[522.45916748 -419.14370728]
[520.55145264 -404.26638794]
[513.65600586 -390.91445923]
[502.58779907 -380.70831299]
[488.66973877 -374.89392090]
[473.57409668 -374.19088745]
[459.12200928 -378.70330811]
[449.98101807 -366.81033325]
[440.84005737 -354.91738892]
[431.69906616 -343.02441406]
[430.35937500 -325.54711914]
[413.32647705 -318.60836792]
[404.41641235 -306.54147339]
[395.50631714 -294.47454834]
[394.17062378 -279.63995361]
[379.74890137 -273.13421631]
[370.83883667 -261.06729126]
[374.05978394 -244.58283997]
[364.18652344 -230.58033752]
[346.91104126 -227.97714233]
[338.23519897 -215.74075317]
[329.55932617 -203.50434875]
[328.24960327 -196.19393921]
[320.59649658 -191.11790466]
[311.68640137 -179.05099487]
[302.77633667 -166.98406982]
[293.86627197 -154.91714478]
[284.95620728 -142.85021973]
[276.04614258 -130.78329468]
[274.71041870 -115.94869995]
[260.28869629 -109.44298553]
[251.37863159 -97.37606812]
[242.46855164 -85.30914307]
[233.55848694 -73.24221802]
[241.28633118 -59.28059387]
[242.16658020 -43.28906631]
[235.97306824 -28.45639229]
[223.89517212 -17.76232147]
[208.30982971 -13.37901688]
[192.31381226 -16.22997856]
[183.63793945 -3.99357843]
[186.38333130 10.60088921]
[177.75907898 23.13393021]
[162.43244934 25.91458130]
[153.75659180 38.15098190]
[145.08073425 50.38737869]
[144.03117371 65.24495697]
[129.73750305 72.02740479]
[121.06164551 84.26380920]
[112.38578796 96.50020599]
[125.29049683 88.85372925]
[140.21247864 87.32578278]
[154.39906311 92.19821930]
[165.23327637 102.57222748]
[170.71650696 116.53410339]
[169.83728027 131.50831604]
[162.75778198 144.73255920]
[150.78396606 153.76737976]
[136.12464905 156.94609070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[27 40]
[28 39]
[29 38]
[42 153]
[43 152]
[44 151]
[46 149]
[47 148]
[48 147]
[51 144]
[52 143]
[59 137]
[60 136]
[61 135]
[62 134]
[64 132]
[65 131]
[66 130]
[67 129]
[68 128]
[69 127]
[70 125]
[71 124]
[72 123]
[76 120]
[77 119]
[79 117]
[80 116]
[81 115]
[84 113]
[85 112]
[86 111]
[87 110]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
