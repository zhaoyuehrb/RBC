%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCGGGAUCAGGGGCCCUGGGAGGGCGAGCGCGGCGAGGGGCGCAUGCAGGGCCCCGACGCGCCACUGCUCCUGAGCGCGAGGGAGCUGGGGCCCGGGCGCCGGGGCUCGGCCUCCUGGUACCGCCAGGAGGGCGGCGCGGUGU\
) } def
/len { sequence length } bind def

/coor [
[20.16964912 126.51502228]
[17.87722969 124.78948212]
[2.96163464 126.37851715]
[-11.95396042 127.96755219]
[-26.86955452 129.55659485]
[-41.78514862 131.14562988]
[-56.70074463 132.73466492]
[-61.02642441 135.89822388]
[-65.66898346 136.93347168]
[-69.74724579 136.08537292]
[-72.61178589 133.91894531]
[-87.59826660 134.55555725]
[-96.10771942 138.06671143]
[-102.90890503 135.04322815]
[-117.90552521 135.36160278]
[-132.90214539 135.67999268]
[-147.89875793 135.99836731]
[-162.89538574 136.31674194]
[-177.89201355 136.63513184]
[-192.88862610 136.95350647]
[-207.88525391 137.27189636]
[-198.17964172 148.70872498]
[-199.20817566 163.67341614]
[-210.38723755 173.67485046]
[-225.37371826 173.03807068]
[-235.66410828 162.12442017]
[-235.41954041 147.12641907]
[-224.77914429 136.55424500]
[-239.69474792 134.96520996]
[-254.61033630 133.37617493]
[-269.15252686 139.60800171]
[-280.98852539 130.56596375]
[-295.90411377 128.97692871]
[-310.81970215 127.38790131]
[-325.73529053 125.79885864]
[-336.03421021 137.40541077]
[-351.19558716 140.70886230]
[-365.38952637 134.43898010]
[-373.15820312 121.00665283]
[-371.51437378 105.57689667]
[-361.09014893 94.08275604]
[-345.89385986 90.94396973]
[-331.76876831 97.36746216]
[-324.14627075 110.88327026]
[-309.23065186 112.47230530]
[-294.31506348 114.06134033]
[-279.39947510 115.65037537]
[-265.92416382 109.30488586]
[-253.02130127 118.46057892]
[-238.10571289 120.04961395]
[-223.19010925 121.63864899]
[-208.20362854 122.27526855]
[-193.20700073 121.95688629]
[-178.21038818 121.63851166]
[-163.21376038 121.32012939]
[-148.21714783 121.00174713]
[-133.22052002 120.68336487]
[-118.22390747 120.36498260]
[-103.22727966 120.04660797]
[-88.23488617 119.56907654]
[-73.24840546 118.93245697]
[-58.28977966 117.81906891]
[-43.37418365 116.23003387]
[-28.45859146 114.64099884]
[-13.54299641 113.05196381]
[1.37259853 111.46292114]
[16.28819275 109.87388611]
[31.12290764 107.65325165]
[45.85000992 104.80500793]
[60.57711029 101.95676422]
[75.30421448 99.10852051]
[90.03131104 96.26027679]
[90.96470642 85.41957855]
[102.41744995 76.46492767]
[112.32756805 65.20484161]
[122.23769379 53.94475555]
[132.14781189 42.68466949]
[135.50094604 34.11172867]
[142.38977051 31.29363251]
[152.53665161 20.24642944]
[162.68354797 9.19922829]
[172.83042908 -1.84797323]
[172.33790588 -17.41701889]
[182.78567505 -28.47590637]
[197.63140869 -28.84949875]
[207.77830505 -39.89670181]
[217.92518616 -50.94390106]
[214.71763611 -66.12583923]
[221.07711792 -80.27987671]
[234.55827332 -87.96348572]
[249.97734070 -86.22217560]
[261.40536499 -75.72550201]
[264.44802856 -60.50966263]
[257.93536377 -46.42545319]
[244.37165833 -38.88853836]
[228.97238159 -40.79701614]
[218.82550049 -29.74981308]
[208.67861938 -18.70261192]
[209.56536865 -3.87866950]
[199.43235779 7.46931028]
[183.87762451 8.29891491]
[173.73074341 19.34611702]
[163.58386230 30.39331818]
[153.43696594 41.44052124]
[143.40789795 52.59479141]
[133.49777222 63.85487747]
[123.58765411 75.11495972]
[113.67753601 86.37504578]
[115.74060822 101.23249054]
[128.34373474 109.36643982]
[137.31861877 111.41345978]
[141.12550354 117.80917358]
[153.55314636 126.20880127]
[169.31941223 127.52611542]
[175.53138733 141.06349182]
[187.95903015 149.46311951]
[200.38667297 157.86274719]
[212.81433105 166.26235962]
[225.24197388 174.66198730]
[237.66961670 183.06159973]
[250.09725952 191.46122742]
[262.52490234 199.86085510]
[274.95254517 208.26046753]
[291.46121216 212.12052917]
[292.32205200 229.05261230]
[276.29000854 234.56707764]
[266.55291748 220.68811035]
[254.12527466 212.28849792]
[241.69763184 203.88887024]
[229.26998901 195.48925781]
[216.84234619 187.08963013]
[204.41470337 178.69000244]
[191.98706055 170.29039001]
[179.55941772 161.89076233]
[167.13177490 153.49114990]
[152.25440979 152.77461243]
[145.15351868 138.63644409]
[132.72587585 130.23681641]
[120.20978546 121.96957397]
[107.60665894 113.83562469]
[92.87955475 110.98738098]
[78.15245056 113.83562469]
[63.42535400 116.68386841]
[48.69824982 119.53210449]
[33.97114944 122.38034821]
[30.68765640 125.45871735]
[26.96154976 127.12036896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[11 61]
[12 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[28 51]
[29 50]
[30 49]
[32 47]
[33 46]
[34 45]
[35 44]
[68 145]
[69 144]
[70 143]
[71 142]
[72 141]
[74 108]
[75 107]
[76 106]
[77 105]
[79 104]
[80 103]
[81 102]
[82 101]
[85 98]
[86 97]
[87 96]
[109 140]
[110 139]
[112 138]
[113 137]
[115 135]
[116 134]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
