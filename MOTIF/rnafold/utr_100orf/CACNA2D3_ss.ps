%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCUCUCGUCGCCGCCGCAGCGGGCGCGUCGGAGGGAGCCCAGCAUGGCCGGGCCGGGCUCGCCGCGCCGCGCGUCCCGGGGGGCCUCGGCGCUUCUCGCUGCCGCGCUUCUCUACGCCGCGCUGGGGGACGUGGUGCGCUCGG\
) } def
/len { sequence length } bind def

/coor [
[-7.01186037 149.74610901]
[-20.88513374 155.44981384]
[-34.75840759 161.15351868]
[-48.63167953 166.85722351]
[-62.50495529 172.56092834]
[-75.91994476 179.27197266]
[-88.80361938 186.95382690]
[-101.68730164 194.63568115]
[-114.57097626 202.31753540]
[-127.45465851 209.99937439]
[-140.33833313 217.68122864]
[-148.22901917 231.39428711]
[-163.12307739 231.26655579]
[-176.00675964 238.94841003]
[-188.89042664 246.63024902]
[-197.83830261 264.64419556]
[-217.13079834 264.24438477]
[-229.67918396 272.46252441]
[-242.22756958 280.68069458]
[-254.77595520 288.89883423]
[-257.75631714 304.41955566]
[-270.88525391 313.21765137]
[-286.37359619 310.07339478]
[-295.03237915 296.85217285]
[-291.72454834 281.39791870]
[-278.41250610 272.87939453]
[-262.99411011 276.35046387]
[-250.44570923 268.13229370]
[-237.89733887 259.91415405]
[-225.34895325 251.69598389]
[-224.15031433 241.46507263]
[-217.34799194 233.43844604]
[-207.02874756 230.45539856]
[-196.57228088 233.74658203]
[-183.68859863 226.06472778]
[-170.80491638 218.38287354]
[-163.83576965 205.21928406]
[-148.02018738 204.79754639]
[-135.13650513 197.11570740]
[-122.25283051 189.43385315]
[-109.36914825 181.75199890]
[-96.48547363 174.07014465]
[-83.60179138 166.38830566]
[-98.03544617 162.30545044]
[-106.61390686 150.00057983]
[-105.45265961 135.04559326]
[-95.07754517 124.21245575]
[-80.18663788 122.40664673]
[-67.52288055 130.44587708]
[-62.82070160 144.68980408]
[-68.20866394 158.68766785]
[-54.33538818 152.98394775]
[-40.46211624 147.28024292]
[-26.58884239 141.57653809]
[-12.71556759 135.87283325]
[-7.74095345 124.80003357]
[3.82603931 119.95518494]
[15.96066380 124.45588684]
[29.95110512 119.04593658]
[43.94154739 113.63598633]
[57.93198776 108.22603607]
[71.92242432 102.81608582]
[85.91287231 97.40613556]
[94.83387756 86.64011383]
[108.67717743 88.60342407]
[122.66762543 83.19347382]
[136.65806580 77.78352356]
[150.64849854 72.37357330]
[164.63894653 66.96362305]
[178.62937927 61.55367279]
[192.61982727 56.14372253]
[206.55245972 50.58658600]
[220.42573547 44.88287735]
[234.04621887 38.59939194]
[247.38972473 31.74729919]
[260.73321533 24.89520645]
[274.07669067 18.04311371]
[287.42019653 11.19102192]
[288.05099487 -5.29936504]
[296.84466553 -19.15286827]
[311.33224487 -26.65576172]
[327.53384399 -25.85306931]
[341.05181885 -17.05704117]
[354.24789429 -24.18893051]
[367.44396973 -31.32081985]
[380.64001465 -38.45270920]
[393.83609009 -45.58460236]
[407.03216553 -52.71649170]
[420.22821045 -59.84838104]
[424.68026733 -72.00093842]
[435.87350464 -77.65597534]
[447.52587891 -74.25363922]
[460.86935425 -81.10572815]
[474.21286011 -87.95782471]
[487.55633545 -94.80991364]
[500.82687378 -101.80229187]
[514.02294922 -108.93418121]
[519.96856689 -123.83483124]
[535.36645508 -128.33866882]
[548.40466309 -118.99072266]
[549.08142090 -102.96195221]
[536.87756348 -92.54824829]
[521.15484619 -95.73812103]
[507.95877075 -88.60623169]
[503.53982544 -82.61848450]
[494.40844727 -81.46642303]
[481.06494141 -74.61432648]
[467.72146606 -67.76223755]
[454.37796021 -60.91014099]
[445.71722412 -45.68038559]
[427.36010742 -46.65231705]
[414.16403198 -39.52042389]
[400.96798706 -32.38853455]
[387.77191162 -25.25664520]
[374.57583618 -18.12475586]
[361.37979126 -10.99286461]
[348.18371582 -3.86097479]
[348.69534302 9.82266998]
[343.22177124 22.44661522]
[332.78366089 31.51297569]
[319.39001465 35.20093536]
[305.65164185 32.73222351]
[294.27227783 24.53451538]
[280.92880249 31.38660812]
[267.58529663 38.23870087]
[254.24180603 45.09079361]
[240.89831543 51.94288635]
[239.92752075 54.64133835]
[237.79283142 57.10357285]
[234.58404541 58.87041855]
[230.56031799 59.52584076]
[226.12944031 58.75615311]
[212.25616455 64.45986176]
[207.23168945 69.94937134]
[198.02976990 70.13416290]
[184.03933716 75.54411316]
[170.04888916 80.95406342]
[156.05845642 86.36401367]
[142.06800842 91.77396393]
[128.07757568 97.18391418]
[114.08712769 102.59386444]
[105.16612244 113.35988617]
[91.32282257 111.39657593]
[77.33237457 116.80652618]
[63.34193802 122.21647644]
[49.35149765 127.62642670]
[35.36105347 133.03637695]
[21.37061501 138.44631958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[13 36]
[14 35]
[15 34]
[17 30]
[18 29]
[19 28]
[20 27]
[58 148]
[59 147]
[60 146]
[61 145]
[62 144]
[63 143]
[65 141]
[66 140]
[67 139]
[68 138]
[69 137]
[70 136]
[71 135]
[72 133]
[73 132]
[74 127]
[75 126]
[76 125]
[77 124]
[78 123]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[92 109]
[93 108]
[94 107]
[95 106]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
