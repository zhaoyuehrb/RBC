%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACGCGUGCUUGAGAAGGUUCAAUGGCGUGGCAGGGACUAGCGGCCGAGUUCCUGCAGGUGCCGGCGGUGACGCGGGCUUACACCGCAGCCUGUGUCCUCACCACCGCCGCGGUGCAGCUGG\
) } def
/len { sequence length } bind def

/coor [
[90.43273163 126.30385590]
[76.23943329 117.82846069]
[64.28244019 126.88552856]
[52.32545471 135.94259644]
[40.36846924 144.99966431]
[28.41147995 154.05673218]
[16.45449257 163.11380005]
[4.49750566 172.17085266]
[5.19011021 184.16998291]
[0.00997823 194.88171387]
[-9.62851906 201.65072632]
[-21.22272110 202.86274719]
[-31.83099937 198.32817078]
[-44.22458267 206.77796936]
[-56.61816406 215.22776794]
[-69.01174164 223.67756653]
[-81.40532684 232.12738037]
[-88.02927399 247.12921143]
[-104.36012268 248.62438965]
[-113.59809113 235.07476807]
[-106.23995209 220.41906738]
[-89.85512543 219.73379517]
[-77.46154785 211.28399658]
[-65.06796265 202.83419800]
[-52.67438126 194.38438416]
[-40.28079987 185.93458557]
[-38.04998016 167.84573364]
[-23.11655807 156.85444641]
[-4.55956030 160.21386719]
[7.39742708 151.15679932]
[19.35441399 142.09974670]
[31.31140327 133.04267883]
[43.26839066 123.98560333]
[55.22537613 114.92854309]
[67.18236542 105.87147522]
[67.93005371 90.89012146]
[56.93427658 80.68753052]
[45.93849564 70.48493958]
[34.94271851 60.28234863]
[23.94694138 50.07975769]
[12.95116329 39.87716675]
[1.95538497 29.67457390]
[-13.24256992 32.80535507]
[-27.36428070 26.37442207]
[-34.97966003 12.85459805]
[-33.16044235 -2.55546522]
[-22.60615158 -13.93028641]
[-7.37512732 -16.89601326]
[6.67598915 -10.31226540]
[14.14425755 3.28937435]
[12.15797615 18.67879677]
[23.15375328 28.88138771]
[34.14953232 39.08397675]
[45.14530945 49.28656769]
[56.14108658 59.48916245]
[67.13686371 69.69174957]
[78.13264465 79.89434052]
[103.39698792 73.94657898]
[120.21718597 89.36803436]
[135.04965210 87.13240051]
[149.88211060 84.89676666]
[162.37495422 75.18907928]
[176.11326599 80.94305420]
[190.94572449 78.70742035]
[205.77818298 76.47178650]
[220.48077393 73.49959564]
[235.01693726 69.79823303]
[249.55310059 66.09687042]
[264.08926392 62.39551163]
[278.62542725 58.69415283]
[293.16156006 54.99279022]
[307.69772339 51.29143143]
[321.91665649 46.51412964]
[335.73880005 40.68760681]
[349.56094360 34.86108780]
[363.38308716 29.03456497]
[377.20523071 23.20804214]
[391.02734375 17.38152122]
[404.84948730 11.55499935]
[418.67163086 5.72847700]
[432.49377441 -0.09804501]
[446.31591797 -5.92456675]
[449.71292114 -21.06524086]
[461.38284302 -31.29230309]
[476.83834839 -32.67324066]
[490.13647461 -24.67704964]
[496.16384888 -10.37843418]
[492.60281372 4.72449875]
[480.82263184 14.82436275]
[465.35305786 16.03755379]
[452.14245605 7.89757633]
[438.32031250 13.72409821]
[424.49816895 19.55062103]
[410.67602539 25.37714195]
[396.85388184 31.20366478]
[383.03173828 37.03018570]
[369.20959473 42.85670853]
[355.38745117 48.68323135]
[341.56530762 54.50975037]
[327.74316406 60.33627319]
[340.85400391 67.62364960]
[345.19244385 81.98254395]
[338.31045532 95.31063080]
[324.09130859 100.08724213]
[310.55850220 93.61706543]
[305.34823608 79.55104065]
[311.39907837 65.82759094]
[296.86294556 69.52895355]
[282.32678223 73.23030853]
[267.79061890 76.93167114]
[253.25445557 80.63303375]
[238.71829224 84.33439636]
[224.18214417 88.03575897]
[222.63334656 90.49730682]
[219.96250916 92.45750427]
[216.36935425 93.46486664]
[212.22079468 93.15413666]
[208.01382446 91.30425262]
[193.18136597 93.53988647]
[178.34889221 95.77552032]
[166.91696167 105.32330322]
[152.11773682 99.72923279]
[137.28527832 101.96486664]
[122.45281982 104.20050049]
[117.74680328 116.97509003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[59 124]
[60 123]
[61 122]
[63 120]
[64 119]
[65 118]
[66 113]
[67 112]
[68 111]
[69 110]
[70 109]
[71 108]
[72 107]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
