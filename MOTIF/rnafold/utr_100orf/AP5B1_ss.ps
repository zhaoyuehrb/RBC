%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGCCCCUGAGCCGGGACGCCUGGGCCCAGCGCUUGGGGGCCUUCCGGGCCAGCCCGUCUGCCUUCAUGGCAGGUCCCGAGGGGGAGGAUUUGGGUC\
) } def
/len { sequence length } bind def

/coor [
[64.21435547 134.66831970]
[76.37728882 125.88977051]
[90.93241119 122.25647736]
[75.93421936 122.48975372]
[60.93603897 122.72303009]
[45.93785095 122.95630646]
[30.93966484 123.18958282]
[15.94147968 123.42285919]
[0.94329345 123.65613556]
[-14.05489254 123.88941956]
[-29.05307770 124.12269592]
[-44.05126572 124.35597229]
[-59.04944992 124.58924866]
[-74.04763794 124.82252502]
[-89.04582214 125.05580139]
[-105.66268921 136.25688171]
[-122.26649475 126.55500793]
[-137.22117615 127.72026062]
[-152.17584229 128.88552856]
[-159.39236450 142.52096558]
[-172.84637451 150.07035828]
[-188.24472046 149.12472534]
[-200.67387390 139.98580933]
[-206.16770935 125.56980133]
[-202.97319031 110.47679901]
[-192.10966492 99.52293396]
[-177.04364014 96.20352936]
[-162.58262634 101.57781219]
[-153.34109497 113.93084717]
[-138.38642883 112.76559448]
[-123.43175507 111.60033417]
[-117.36467743 103.11112213]
[-107.38472748 99.37549591]
[-96.80298615 101.89691162]
[-89.27909851 110.05761719]
[-74.28091431 109.82434082]
[-59.28272629 109.59106445]
[-44.28454208 109.35778809]
[-29.28635597 109.12450409]
[-14.28816986 108.89122772]
[0.71001625 108.65795135]
[15.70820236 108.42467499]
[30.70638847 108.19139862]
[45.70457458 107.95812225]
[60.70275879 107.72484589]
[75.70094299 107.49156952]
[90.69913483 107.25829315]
[79.61684418 94.73883820]
[88.11714935 72.12233734]
[91.81133270 57.58435440]
[95.50551605 43.04637146]
[99.19969940 28.50838470]
[94.23198700 12.87976170]
[105.48133087 0.94726962]
[121.37536621 4.98603392]
[125.56367493 20.84132004]
[113.73768616 32.20256805]
[110.04350281 46.74055481]
[106.34931946 61.27853775]
[102.65513611 75.81652069]
[114.12911987 85.47817993]
[127.82597351 79.36292267]
[141.52282715 73.24767303]
[155.21966553 67.13241577]
[168.91651917 61.01716232]
[182.61337280 54.90190887]
[189.66697693 40.49267197]
[205.36094666 37.16421127]
[217.65621948 47.46983719]
[217.12089539 63.50395584]
[204.16564941 72.96656036]
[188.72862244 68.59875488]
[175.03176880 74.71401215]
[161.33493042 80.82926941]
[147.63807678 86.94451904]
[133.94122314 93.05977631]
[120.24437714 99.17502594]
[119.77787781 114.16777039]
[133.06805420 121.12272644]
[146.35821533 128.07768250]
[159.64839172 135.03263855]
[176.00207520 133.81245422]
[185.01075745 147.51557922]
[177.40707397 162.04541016]
[161.01304626 162.45489502]
[152.69343567 148.32279968]
[139.40327454 141.36784363]
[126.11309814 134.41290283]
[112.82292938 127.45793915]
[124.18685913 137.24880981]
[131.10151672 150.55998230]
[132.57766724 165.48718262]
[128.40412903 179.89486694]
[119.17798615 191.72189331]
[106.21913910 199.27624512]
[91.38149261 201.47718811]
[76.78773499 198.00987244]
[64.52567291 189.37033081]
[56.34952927 176.79452515]
[53.42899323 162.08158875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[17 31]
[18 30]
[19 29]
[49 60]
[50 59]
[51 58]
[52 57]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
