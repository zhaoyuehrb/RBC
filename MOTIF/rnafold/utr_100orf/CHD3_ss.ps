%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGGCUUCCCCUCUGAGGGACGAGGAGGAGGAGGAGGAGGAGAUGGUGGUGUCGGAGGAGGAAGAAGAGGAGGAAGAAGAGGGCGACGAGGAGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[134.99325562 233.98545837]
[132.27522278 219.20851135]
[131.64027405 204.19708252]
[133.10076904 189.24337769]
[136.62828064 174.63848877]
[142.15412903 160.66670227]
[149.57078552 147.59996033]
[137.68209839 138.45343018]
[125.79341125 129.30688477]
[113.90472412 120.16035461]
[102.01603699 111.01381683]
[89.98925018 102.04964447]
[77.82716370 93.26992035]
[65.66506958 84.49019623]
[53.50298309 75.71047211]
[41.34089279 66.93074799]
[29.17880249 58.15102005]
[17.01671219 49.37129593]
[1.10821879 54.87158966]
[-14.80529499 49.91553879]
[-24.58188438 36.62102127]
[-24.57012367 20.28383255]
[-36.99430466 11.87908840]
[-48.17832947 21.98755264]
[-61.45681381 29.12515068]
[-76.05776215 32.87691498]
[-91.13229370 33.02471924]
[-105.80400085 29.55997086]
[-119.21988678 22.68410873]
[-130.59997559 12.79688549]
[-139.28262329 0.47312933]
[-144.76304626 -13.57067108]
[-146.72262573 -28.51802826]
[-145.04742432 -43.49992371]
[-139.83485413 -57.64532471]
[-131.38793945 -70.13184357]
[-120.19778442 -80.23352051]
[-106.91497803 -87.36306763]
[-92.31175995 -91.10597992]
[-77.23713684 -91.24464417]
[-62.56753540 -87.77100372]
[-49.15581894 -80.88700867]
[-37.78173447 -70.99288940]
[-29.10655594 -58.66387177]
[-23.63464165 -44.61675262]
[-21.68412590 -29.66820908]
[-23.36840630 -14.68733311]
[-28.58956146 -0.54509294]
[-16.16538048 7.85965061]
[-3.99656272 2.14308763]
[9.51262665 3.23792362]
[20.78160858 10.96244335]
[26.76974678 23.36346626]
[25.79643631 37.20920563]
[37.95852661 45.98892975]
[50.12061691 54.76865387]
[62.28270721 63.54837799]
[74.44479370 72.32810211]
[86.60688782 81.10782623]
[98.76898193 89.88755035]
[106.77048492 91.72483063]
[111.16257477 99.12512970]
[123.05126190 108.27166748]
[134.93995667 117.41820526]
[146.82862854 126.56474304]
[158.71731567 135.71128845]
[169.44601440 125.19266510]
[181.53425598 116.26962280]
[194.74673462 109.11584473]
[208.82626343 103.87058258]
[223.49879456 100.63594055]
[238.47871399 99.47486877]
[253.47444153 100.40997314]
[268.19406128 103.42305756]
[282.35107422 108.45547485]
[295.66992188 115.40924835]
[307.89129639 124.14904022]
[318.77734375 134.50471497]
[328.11614990 146.27471924]
[335.72595215 159.22990417]
[341.45858765 173.11813354]
[345.20251465 187.66905212]
[346.88482666 202.59942627]
[346.47277832 217.61862183]
[343.97439575 232.43429565]
[339.43832397 246.75805664]
[332.95281982 260.31109619]
[324.64416504 272.82955933]
[314.67407227 284.06982422]
[303.23663330 293.81307983]
[290.55444336 301.86965942]
[276.87438965 308.08273315]
[262.46276855 312.33135986]
[247.60008240 314.53286743]
[232.57563782 314.64440918]
[217.68191528 312.66375732]
[203.20880127 308.62951660]
[189.43801880 302.62017822]
[176.63764954 294.75274658]
[165.05682373 285.18035889]
[154.92097473 274.08935547]
[146.42741394 261.69558716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[22 49]
[23 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
