%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGAAGUUGACCGGGGUGCGGAGCUCCUGGGCUGCAGCUCCUGGAGUUUCCGAGGUUCGUGCGCGUCUGGUGGCGGCGGCGUGAUGUUCUCGGCAGGAGCGGAGAGUUUGCUCCACCAGGCCAGGGAGAUCCAGGACGAGGAGCUGAAGAAGUUCUGUUCCCGGAUCUGUAAACUGCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[51.38306808 245.47332764]
[46.89262009 259.78543091]
[42.40217209 274.09750366]
[37.91172791 288.40960693]
[33.42127991 302.72167969]
[41.99379730 315.80014038]
[40.10273361 331.32296753]
[28.64098740 341.96075439]
[13.02044773 342.69064331]
[0.61665565 333.16806030]
[-2.71369863 317.88922119]
[4.60187674 304.06835938]
[19.10919189 298.23123169]
[23.59963799 283.91915894]
[28.09008408 269.60705566]
[32.58053207 255.29496765]
[37.07098007 240.98287964]
[31.47146606 222.48847961]
[46.47277451 209.04425049]
[50.47728348 194.58866882]
[54.48178864 180.13308716]
[58.48629379 165.67750549]
[62.49080276 151.22190857]
[66.37308502 136.73303223]
[70.13287354 122.21186829]
[76.71420288 101.88339233]
[91.56269836 95.62846375]
[84.06269836 82.63808441]
[76.56269836 69.64769745]
[69.06269836 56.65731812]
[61.56269836 43.66693878]
[54.06269836 30.67655754]
[40.46191406 22.59390640]
[40.79897690 7.70311594]
[33.29897690 -5.28726482]
[25.79897690 -18.27764702]
[4.87232637 -21.02804947]
[-7.59814692 -40.00357056]
[-0.96227020 -63.38721085]
[-11.29677391 -74.25910187]
[-21.63127708 -85.13099670]
[-31.96578217 -96.00288391]
[-42.30028534 -106.87477875]
[-52.63478851 -117.74667358]
[-62.96929169 -128.61856079]
[-64.57550049 -113.70480347]
[-76.15811157 -104.17363739]
[-91.10211945 -105.46846008]
[-100.87277985 -116.84976196]
[-99.88992310 -131.81753540]
[-88.71486664 -141.82344055]
[-73.72962189 -141.15284729]
[-82.91121674 -153.01448059]
[-92.09280396 -164.87611389]
[-101.27439117 -176.73776245]
[-110.45598602 -188.59939575]
[-119.63757324 -200.46102905]
[-132.32385254 -202.86730957]
[-139.72566223 -212.95426941]
[-138.30809021 -224.98126221]
[-147.28802490 -236.99627686]
[-156.26797485 -249.01129150]
[-165.34906006 -260.95004272]
[-174.53065491 -272.81167603]
[-183.71224976 -284.67330933]
[-192.89382935 -296.53494263]
[-208.32363892 -298.67013550]
[-217.46609497 -310.83032227]
[-215.33543396 -325.52713013]
[-224.51702881 -337.38876343]
[-233.69862366 -349.25039673]
[-249.07250977 -354.95788574]
[-251.54946899 -371.16888428]
[-238.58142090 -381.20690918]
[-223.50877380 -374.74569702]
[-221.83697510 -358.43197632]
[-212.65539551 -346.57034302]
[-203.47380066 -334.70870972]
[-188.71211243 -333.08755493]
[-179.23170471 -321.18896484]
[-181.03219604 -305.71655273]
[-171.85060120 -293.85491943]
[-162.66902161 -281.99328613]
[-153.48742676 -270.13165283]
[-146.89245605 -266.75936890]
[-144.25296021 -257.99124146]
[-135.27301025 -245.97622681]
[-126.29306793 -233.96121216]
[-109.82199097 -227.93260193]
[-107.77593994 -209.64262390]
[-98.59434509 -197.78097534]
[-89.41275787 -185.91934204]
[-80.23117065 -174.05770874]
[-71.04957581 -162.19607544]
[-61.86798859 -150.33444214]
[-52.09740067 -138.95306396]
[-41.76289749 -128.08117676]
[-31.42839432 -117.20928192]
[-21.09388924 -106.33738708]
[-10.75938606 -95.46549988]
[-0.42488217 -84.59360504]
[9.90962124 -73.72171783]
[24.83266068 -75.23924255]
[32.76712036 -87.96890259]
[40.70158005 -100.69857025]
[48.63604355 -113.42823029]
[44.81981659 -128.76484680]
[53.03744888 -142.26470947]
[68.41355896 -145.91857910]
[81.82577515 -137.55867004]
[85.31687164 -122.14479065]
[76.81563568 -108.82170868]
[61.36570740 -105.49377441]
[53.43124390 -92.76410675]
[45.49678421 -80.03444672]
[37.56232452 -67.30477905]
[46.67707825 -53.40615082]
[46.69691086 -37.87152100]
[38.78935623 -25.77764702]
[46.28935623 -12.78726482]
[53.78935623 0.20311601]
[66.85369110 7.35660648]
[67.05307770 23.17655754]
[74.55307770 36.16693878]
[82.05307770 49.15731812]
[89.55307770 62.14770126]
[97.05307770 75.13808441]
[104.55307770 88.12846375]
[116.09784698 97.70542908]
[130.25010681 102.67669678]
[144.40237427 107.64795685]
[158.55464172 112.61921692]
[172.70689392 117.59048462]
[186.85916138 122.56174469]
[202.44367981 119.83535004]
[211.88739014 131.35340881]
[226.03964233 136.32467651]
[240.19190979 141.29592896]
[251.59478760 134.10275269]
[264.86450195 134.78742981]
[275.16018677 142.87551880]
[278.85531616 155.23280334]
[292.92160034 160.44238281]
[306.98788452 165.65196228]
[321.05416870 170.86154175]
[335.12045288 176.07112122]
[349.18673706 181.28070068]
[364.30627441 175.91609192]
[377.85067749 184.51423645]
[379.42987061 200.47938538]
[367.83239746 211.56442261]
[351.95486450 209.26588440]
[343.97714233 195.34698486]
[329.91085815 190.13740540]
[315.84457397 184.92782593]
[301.77828979 179.71824646]
[287.71200562 174.50866699]
[273.64575195 169.29908752]
[258.68957520 176.96855164]
[242.49174500 171.34741211]
[235.22064209 155.44819641]
[221.06838989 150.47692871]
[206.91612244 145.50567627]
[192.34387207 148.58764648]
[181.88789368 136.71400452]
[167.73564148 131.74275208]
[153.58337402 126.77148438]
[139.43110657 121.80021667]
[125.27884674 116.82895660]
[111.12658691 111.85769653]
[104.50844574 115.38618469]
[115.31014252 125.79403687]
[108.74942017 139.28318787]
[93.89313507 137.21176147]
[91.27217102 122.44316864]
[84.65402985 125.97165680]
[80.89424133 140.49281311]
[81.77259827 149.60740662]
[76.94638824 155.22642517]
[72.94187927 169.68200684]
[68.93737030 184.13758850]
[64.93286896 198.59317017]
[60.92835999 213.04875183]
[66.83825684 222.21290588]
[66.71898651 232.89689636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[19 183]
[20 182]
[21 181]
[22 180]
[23 179]
[24 177]
[25 176]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[32 123]
[34 121]
[35 120]
[36 119]
[39 102]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[45 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 90]
[60 88]
[61 87]
[62 86]
[63 84]
[64 83]
[65 82]
[66 81]
[69 78]
[70 77]
[71 76]
[103 116]
[104 115]
[105 114]
[106 113]
[129 170]
[130 169]
[131 168]
[132 167]
[133 166]
[134 165]
[136 163]
[137 162]
[138 161]
[142 158]
[143 157]
[144 156]
[145 155]
[146 154]
[147 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
