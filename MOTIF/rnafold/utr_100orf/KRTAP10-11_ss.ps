%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCACUUACACCUCCCCCAGCUCACCUCCUCCCCACCCCAGCAUGGCCGCGUCCACCAUGUCUGUCUGCUCCAGCGCUUACUCCGACUCCUGGCAGGUGGACGACUGCCCAGAGAGCUGCUGUGAGCCCCCCUGCAGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[38.13787079 175.01884460]
[44.41801453 188.64086914]
[48.84671402 202.97218323]
[51.34659195 217.76240540]
[51.87397385 232.75312805]
[50.41964722 247.68246460]
[47.00902176 262.28958130]
[41.70168304 276.31927490]
[34.59035110 289.52642822]
[25.79927063 301.68029785]
[15.48202896 312.56857300]
[3.81887555 322.00100708]
[-8.98642349 329.81283569]
[-22.71014977 335.86752319]
[-37.11253738 340.05932617]
[-51.94196320 342.31500244]
[-66.93934631 342.59515381]
[-81.84266663 340.89489746]
[-96.39156342 337.24389648]
[-110.33183289 331.70596313]
[-123.41994476 324.37783813]
[-135.42723083 315.38754272]
[-146.14392090 304.89218140]
[-155.38278198 293.07510376]
[-162.98239136 280.14276123]
[-168.80999756 266.32107544]
[-172.76377869 251.85151672]
[-174.77465820 236.98692322]
[-174.80749512 221.98695374]
[-172.86172485 207.11369324]
[-168.97134399 192.62698364]
[-163.20433044 178.77990723]
[-155.66140747 165.81439209]
[-146.47439575 153.95697021]
[-135.80375671 143.41477966]
[-123.83596039 134.37200928]
[-110.78005981 126.98664856]
[-96.86416626 121.38772583]
[-82.33140564 117.67305756]
[-67.43566895 115.90753174]
[-52.43720245 116.12200928]
[-37.59782410 118.31278229]
[-48.31792450 107.82090759]
[-59.03802490 97.32903290]
[-69.87038422 86.95310211]
[-80.81375122 76.69430542]
[-91.75711060 66.43551636]
[-102.70047760 56.17672729]
[-113.64383698 45.91793442]
[-128.57954407 49.78166580]
[-143.22598267 44.93549347]
[-152.90953064 32.92581558]
[-154.54020691 17.58487511]
[-147.59767151 3.80791187]
[-134.29725647 -4.00889587]
[-118.88307190 -3.37123370]
[-106.27374268 5.51742315]
[-100.49284363 19.82073593]
[-103.38504791 34.97457123]
[-92.44168091 45.23336411]
[-81.49832153 55.49215317]
[-70.55495453 65.75094604]
[-59.61159515 76.00973511]
[-52.52928543 78.30631256]
[-48.54615021 86.60893250]
[-37.82604980 97.10080719]
[-27.10594940 107.59268188]
[-24.14490509 107.77140808]
[-21.18981171 108.70243835]
[-18.43497276 110.38944244]
[-3.60480833 108.13861084]
[11.22535515 105.88777924]
[26.05551910 103.63694763]
[37.47766495 94.07745361]
[52.28260803 99.65636444]
[67.11277008 97.40553284]
[81.94293976 95.15470123]
[96.59954834 81.61600494]
[115.12920380 89.01629639]
[129.78327942 85.81348419]
[144.43736267 82.61067200]
[159.09143066 79.40785980]
[173.74551392 76.20503998]
[188.39958191 73.00222778]
[196.94975281 59.98176575]
[211.85668945 56.94240952]
[224.21702576 65.17392731]
[238.87110901 61.97111130]
[250.70094299 51.46561813]
[264.78677368 56.30694580]
[279.44085693 53.10413361]
[294.09494019 49.90132141]
[308.71371460 46.54103470]
[323.29547119 43.02366257]
[337.87725830 39.50629044]
[352.45901489 35.98892212]
[367.00210571 32.31487274]
[381.50482178 28.48457336]
[396.00753784 24.65427399]
[401.49453735 10.13970661]
[414.48348999 1.65050256]
[429.97991943 2.45093465]
[442.02508545 12.23322010]
[445.98742676 27.23587036]
[440.34332275 41.69005966]
[427.26303101 50.03786087]
[411.77621460 49.06936646]
[399.83786011 39.15699005]
[385.33514404 42.98728943]
[370.83242798 46.81758881]
[365.12716675 51.60127640]
[355.97640991 50.57069397]
[341.39462280 54.08806610]
[326.81286621 57.60543442]
[312.23107910 61.12280655]
[306.42422485 65.78263092]
[297.29776001 64.55539703]
[282.64367676 67.75820923]
[267.98959351 70.96102142]
[257.20791626 81.23742676]
[242.07391357 76.62519073]
[227.41984558 79.82800293]
[219.62068176 92.46559906]
[204.80499268 95.92246246]
[191.60240173 87.65630341]
[176.94831848 90.85912323]
[162.29425049 94.06193542]
[147.64016724 97.26474762]
[132.98609924 100.46755981]
[118.33201599 103.67037201]
[114.61090851 111.66429901]
[107.63979340 117.06364441]
[98.96930695 118.66741180]
[90.52808380 116.11885071]
[84.19377136 109.98486328]
[69.36360168 112.23569489]
[54.53343964 114.48652649]
[42.05054092 124.20700836]
[28.30635071 118.46710968]
[13.47618675 120.71794128]
[-1.35397732 122.96877289]
[-16.18414116 125.21960449]
[-2.86153150 132.11221313]
[9.43564415 140.70170593]
[20.49254417 150.83802795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[42 67]
[43 66]
[44 65]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[70 142]
[71 141]
[72 140]
[73 139]
[75 137]
[76 136]
[77 135]
[79 130]
[80 129]
[81 128]
[82 127]
[83 126]
[84 125]
[87 122]
[88 121]
[90 119]
[91 118]
[92 117]
[93 115]
[94 114]
[95 113]
[96 112]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
