%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACUUUCACAAUCUGCUAGCAAAGGUUAUGCAGCGCGUGAACAUGAUCAUGGCAGAAUCACCAGGCCUCAUCACCAUCUGCCUUUUAGGAUAUCUACUCAGUGCUGAAUGUACAGUUUUUCUUGAUC\
) } def
/len { sequence length } bind def

/coor [
[84.98767853 138.26948547]
[73.53802490 131.45930481]
[64.86736298 121.34529877]
[50.84212112 126.66437531]
[44.29573059 140.79881287]
[29.99636841 145.99331665]
[16.56167793 139.66523743]
[2.53643513 144.98429871]
[-11.48880863 150.30337524]
[-25.51405144 155.62245178]
[-39.53929520 160.94152832]
[-43.71293259 175.77011108]
[-55.67797089 185.18771362]
[-70.71627808 185.74743652]
[-83.05288696 177.44404602]
[-97.07812500 182.76312256]
[-111.10337067 188.08219910]
[-125.12861633 193.40127563]
[-139.08856201 198.88941956]
[-152.98118591 204.54583740]
[-166.87380981 210.20227051]
[-180.76641846 215.85868835]
[-190.39526367 229.13339233]
[-206.67561340 227.16302490]
[-212.85963440 211.97454834]
[-202.58575439 199.19256592]
[-186.42285156 201.96606445]
[-172.53022766 196.30964661]
[-158.63760376 190.65322876]
[-144.74499512 184.99679565]
[-139.68510437 179.50515747]
[-130.44769287 179.37602234]
[-116.42244720 174.05696106]
[-102.39720154 168.73788452]
[-88.37195587 163.41880798]
[-84.64403534 149.02294922]
[-73.01654053 139.46966553]
[-57.81555176 138.58456421]
[-44.85836792 146.91627502]
[-30.83312607 141.59721375]
[-16.80788231 136.27813721]
[-2.78263807 130.95906067]
[11.24260521 125.63999176]
[17.10231590 111.99449921]
[31.25013542 106.40040588]
[45.52304840 112.63912964]
[59.54829407 107.32006073]
[59.14081573 95.47772980]
[62.12811279 84.01113129]
[68.26198578 73.87296295]
[77.03279877 65.90554810]
[87.71183777 60.77086639]
[99.41183472 58.89552307]
[101.93718719 44.10963440]
[104.46254730 29.32374191]
[106.98789978 14.53785133]
[109.51325226 -0.24804029]
[112.03861237 -15.03393173]
[98.46228027 -21.65661240]
[87.30263519 -31.83694077]
[79.46434784 -44.74964523]
[75.58283234 -59.34794998]
[75.97274017 -74.44843292]
[80.60246277 -88.82697296]
[89.09669495 -101.31795502]
[100.76683807 -110.90880585]
[114.66686249 -116.82202148]
[129.66993713 -118.57825470]
[144.55984497 -116.03514099]
[158.12951660 -109.39881897]
[169.27891541 -99.20729065]
[177.10423279 -86.28671265]
[180.97108459 -71.68451691]
[180.56600952 -56.58443451]
[175.92184448 -42.21055222]
[167.41506958 -29.72810745]
[155.73529053 -20.14899063]
[141.82933044 -14.24973774]
[126.82450104 -12.50857544]
[124.29914856 2.27731538]
[121.77378845 17.06320572]
[119.24843597 31.84909821]
[116.72307587 46.63499069]
[114.19772339 61.42087936]
[130.89994812 72.88696289]
[140.09744263 90.93805695]
[139.55638123 111.19004059]
[153.00277710 117.83791351]
[166.44918823 124.48578644]
[179.89558411 131.13365173]
[193.34199524 137.78152466]
[206.78839111 144.42939758]
[217.09622192 137.15496826]
[229.45449829 135.00639343]
[241.47282410 138.33622742]
[250.85350037 146.44338989]
[255.83078003 157.71972656]
[255.50303650 169.96873474]
[268.61254883 177.25848389]
[281.72207642 184.54823303]
[288.49234009 184.82994080]
[293.32278442 188.06079102]
[295.27648926 192.52014160]
[308.01849365 200.43473816]
[320.76052856 208.34934998]
[333.50253296 216.26394653]
[349.38900757 214.02792358]
[360.94274902 225.15853882]
[359.30072021 241.11734009]
[345.72253418 249.66209412]
[330.62423706 244.23800659]
[325.58792114 229.00596619]
[312.84591675 221.09136963]
[300.10388184 213.17675781]
[287.36187744 205.26216125]
[274.43231201 197.65776062]
[261.32281494 190.36801147]
[248.21328735 183.07826233]
[232.65550232 191.26293945]
[215.13331604 188.52195740]
[202.59977722 175.75459290]
[200.14051819 157.87580872]
[186.69412231 151.22793579]
[173.24771118 144.58006287]
[159.80131531 137.93218994]
[146.35490417 131.28431702]
[132.90850830 124.63644409]
[123.30218506 133.86637878]
[111.24870300 139.53973389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 47]
[4 46]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[15 35]
[16 34]
[17 33]
[18 32]
[19 30]
[20 29]
[21 28]
[22 27]
[53 84]
[54 83]
[55 82]
[56 81]
[57 80]
[58 79]
[87 127]
[88 126]
[89 125]
[90 124]
[91 123]
[92 122]
[98 118]
[99 117]
[100 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
