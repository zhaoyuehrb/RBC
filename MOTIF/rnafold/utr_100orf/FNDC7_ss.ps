%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGGUGGACGAGAGACAUGUUUGCCUUUGAUUGGAUUCAUUCUUAUCUGUCUUAAAAUGGUUGCUUCAGCAAAAUCAGCUCCUGAAAUACCCACUA\
) } def
/len { sequence length } bind def

/coor [
[114.12552643 216.05203247]
[121.86948395 203.07040405]
[133.09690857 192.94932556]
[126.76938629 179.34924316]
[120.44185638 165.74914551]
[114.11433411 152.14906311]
[107.78681183 138.54896545]
[101.45928192 124.94888306]
[95.13175964 111.34879303]
[84.77545929 100.49766541]
[71.48529053 93.54270935]
[58.19511795 86.58775330]
[44.90494537 79.63280487]
[31.50822067 72.88537598]
[18.00818062 66.34711456]
[4.40809202 60.01958466]
[-9.28875637 53.90433121]
[-22.98560524 47.78907776]
[-36.68245316 41.67382431]
[-45.97439194 41.00112152]
[-50.70555496 35.14949036]
[-64.20559692 28.61122322]
[-77.70563507 22.07295609]
[-89.43424988 29.50224495]
[-103.19541168 30.11474991]
[-115.34418488 23.85650635]
[-122.71647644 12.47911644]
[-123.45288849 -0.94899958]
[-136.74305725 -7.90395260]
[-151.13334656 -1.78401995]
[-166.07560730 -6.39520168]
[-174.51454163 -19.56023979]
[-172.46557617 -35.06300354]
[-160.89613342 -45.58356476]
[-145.26898193 -46.15443420]
[-132.96275330 -36.50606537]
[-129.78810120 -21.19412231]
[-116.49793243 -14.23917007]
[-102.12215424 -21.99422073]
[-85.78426361 -19.69274902]
[-73.87429810 -8.03727627]
[-71.16736603 8.57291698]
[-57.66732788 15.11118317]
[-44.16728973 21.64945030]
[-30.56719971 27.97697449]
[-16.87035179 34.09222794]
[-3.17350245 40.20748520]
[10.52334595 46.32273865]
[18.04684067 46.17266083]
[24.54644775 52.84707260]
[38.04648590 59.38533783]
[45.57101059 59.46931458]
[51.85989761 66.34263611]
[65.15007019 73.29758453]
[78.44023895 80.25254059]
[91.73040771 87.20748901]
[81.63703918 76.11137390]
[79.52243042 61.26117325]
[86.11733246 47.78871155]
[99.14273834 40.34970093]
[114.09741211 41.51485443]
[125.81344604 50.88153076]
[130.24209595 65.21286774]
[125.85293579 79.55634308]
[114.16241455 88.95537567]
[128.36949158 84.14299011]
[142.57656860 79.33060455]
[156.78363037 74.51821899]
[167.19186401 61.84537888]
[183.32460022 64.78933716]
[188.58586121 80.32159424]
[177.56332397 92.46390533]
[161.59602356 88.72529602]
[147.38894653 93.53768158]
[133.18186951 98.35006714]
[118.97480011 103.16245270]
[113.79843903 104.93559265]
[108.73184967 105.02127075]
[115.05937195 118.62136078]
[121.38689423 132.22145081]
[127.71442413 145.82153320]
[134.04194641 159.42163086]
[140.36947632 173.02171326]
[146.69700623 186.62179565]
[161.67063904 184.55267334]
[176.58866882 186.99067688]
[190.12458801 193.71900940]
[201.07476807 204.13941956]
[208.46554565 217.32531738]
[211.63973999 232.10421753]
[210.31509399 247.16198730]
[204.60939026 261.15972900]
[195.02999878 272.85272217]
[182.42868042 281.20129395]
[167.92596436 285.46304321]
[152.81141663 285.25906372]
[138.42900085 280.60745239]
[126.05759430 271.92184448]
[116.79725647 259.97454834]
[111.47141266 245.82792664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 84]
[4 83]
[5 82]
[6 81]
[7 80]
[8 79]
[9 78]
[10 56]
[11 55]
[12 54]
[13 53]
[14 51]
[15 50]
[16 48]
[17 47]
[18 46]
[19 45]
[21 44]
[22 43]
[23 42]
[28 38]
[29 37]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
