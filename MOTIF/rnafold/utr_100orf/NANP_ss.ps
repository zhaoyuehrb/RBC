%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCGCCUUGCGCAUGCGCAGGCGGCGGUGGCAAGGCUACGGUUCGCGCCAGCGGCCGGCGCUAUGGGGCUGAGCCGCGUGCGGGCGGUUUUCUUUGACUUGGACAACACUCUCAUCGACACGGCCGGGGCGAGCAGGAGAGGCAUGUUGGAGGUGAUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[151.03761292 163.12088013]
[151.61840820 155.25471497]
[138.35192871 148.25471497]
[125.08542633 141.25469971]
[111.81893158 134.25468445]
[96.93366241 136.10635376]
[85.78649139 146.14331055]
[74.63931274 156.18026733]
[63.49214172 166.21722412]
[52.34497070 176.25418091]
[41.19779968 186.29115295]
[30.05062675 196.32810974]
[25.74119759 204.43472290]
[18.59436035 206.44755554]
[7.25811720 216.27047729]
[-4.07812643 226.09338379]
[-8.54111385 234.11648560]
[-15.72497845 235.99288940]
[-27.24618340 245.59819031]
[-38.76738739 255.20349121]
[-41.64250565 270.98681641]
[-55.84263229 278.45245361]
[-70.47464752 271.87344360]
[-74.31412506 256.29660034]
[-64.41574097 243.67115784]
[-48.37269211 243.68229675]
[-36.85148621 234.07698059]
[-25.33028030 224.47167969]
[-13.90103722 214.75714111]
[-2.56479406 204.93423462]
[8.77145004 195.11131287]
[20.01366615 185.18093872]
[31.16083908 175.14396667]
[42.30801010 165.10700989]
[53.45518494 155.07005310]
[64.60235596 145.03309631]
[75.74952698 134.99613953]
[86.89669800 124.95917511]
[78.42872620 118.92465210]
[72.59734344 110.09333038]
[70.29425049 99.57492828]
[71.95743561 88.74964905]
[77.49528503 79.08706665]
[68.22290039 67.29627228]
[58.95051575 55.50547409]
[49.67813110 43.71467590]
[40.40574646 31.92387962]
[31.13336182 20.13308334]
[21.86097717 8.34228706]
[12.58859348 -3.44850945]
[6.53631449 -6.28705883]
[3.33869147 -11.05418491]
[3.19791317 -15.86930943]
[-5.61886549 -28.00456429]
[-14.43564415 -40.13982010]
[-23.25242233 -52.27507401]
[-32.06920242 -64.41033173]
[-41.00110626 -76.46109772]
[-50.04732895 -88.42629242]
[-59.09355164 -100.39148712]
[-68.13977051 -112.35668182]
[-83.65088654 -111.92662811]
[-96.43336487 -120.72366333]
[-101.57208252 -135.36515808]
[-97.09110260 -150.22114563]
[-84.71344757 -159.57919312]
[-69.19858551 -159.84097290]
[-56.51228714 -150.90577698]
[-51.53269958 -136.20941162]
[-56.17457581 -121.40290833]
[-47.12835693 -109.43771362]
[-38.08213425 -97.47251892]
[-29.03591347 -85.50732422]
[-22.46374321 -82.05255890]
[-19.93394661 -73.22711182]
[-11.11716843 -61.09185410]
[-2.30038953 -48.95660019]
[6.51638937 -36.82134247]
[15.33316803 -24.68608856]
[24.37938881 -12.72089386]
[33.65177536 -0.93009782]
[42.92416000 10.86069870]
[52.19654465 22.65149498]
[61.46892929 34.44229126]
[70.74131012 46.23308945]
[80.01369476 58.02388382]
[89.28607941 69.81468201]
[104.20391083 68.24675751]
[110.82222748 54.78577805]
[117.44054413 41.32480240]
[124.05886078 27.86382484]
[118.72434235 12.98705006]
[125.54718781 -1.26862609]
[140.47952271 -6.44556379]
[154.66227722 0.52762181]
[159.68104553 15.51386356]
[152.55830383 29.62208939]
[137.51983643 34.48213959]
[130.90151978 47.94311905]
[124.28320312 61.40409470]
[117.66488647 74.86506653]
[129.40403748 98.25792694]
[118.81894684 120.98819733]
[132.08543396 127.98820496]
[145.35192871 134.98822021]
[158.61842346 141.98822021]
[179.86956787 133.06686401]
[200.60377502 142.51031494]
[207.65696716 163.89637756]
[221.73600769 169.07138062]
[235.81504822 174.24638367]
[244.99588013 174.27468872]
[250.11129761 179.65626526]
[264.08926392 185.09837341]
[278.06719971 190.54049683]
[284.72219849 189.90922546]
[289.89883423 192.38969421]
[292.46722412 196.46507263]
[306.22787476 202.43537903]
[319.98852539 208.40570068]
[333.74917603 214.37602234]
[347.50979614 220.34634399]
[359.80142212 216.34083557]
[371.15563965 221.63154602]
[375.69332886 232.87538147]
[389.33782959 239.10659790]
[402.98229980 245.33782959]
[413.82846069 234.72062683]
[427.77914429 228.74205017]
[442.94760132 228.21067810]
[457.28244019 233.19836426]
[468.84497070 243.03054810]
[476.07150269 256.37753296]
[477.98464966 271.43423462]
[474.32571411 286.16436768]
[465.58950806 298.57577515]
[452.95758057 306.98995972]
[438.13824463 310.26895142]
[423.13571167 307.96926880]
[409.97894287 300.40194702]
[400.44729614 288.59042358]
[395.82986450 274.13208008]
[396.75106812 258.98229980]
[383.10659790 252.75108337]
[369.46212769 246.51985168]
[352.13015747 249.14517212]
[341.53948975 234.10699463]
[327.77883911 228.13667297]
[314.01818848 222.16635132]
[300.25756836 216.19602966]
[286.49691772 210.22570801]
[272.62509155 204.51844788]
[258.64712524 199.07633972]
[244.66917419 193.63421631]
[230.64004517 188.32542419]
[216.56100464 183.15042114]
[202.48196411 177.97541809]
[197.28067017 183.57733154]
[190.73410034 187.57627869]
[183.32345581 189.66117859]
[175.59806824 189.66227722]
[168.13478088 187.56483459]
[161.49479675 183.51141357]
[156.18150330 177.79214478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 106]
[3 105]
[4 104]
[5 103]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[14 31]
[15 30]
[16 29]
[18 28]
[19 27]
[20 26]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 81]
[50 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 73]
[59 72]
[60 71]
[61 70]
[88 101]
[89 100]
[90 99]
[91 98]
[109 157]
[110 156]
[111 155]
[113 154]
[114 153]
[115 152]
[118 151]
[119 150]
[120 149]
[121 148]
[122 147]
[125 145]
[126 144]
[127 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
