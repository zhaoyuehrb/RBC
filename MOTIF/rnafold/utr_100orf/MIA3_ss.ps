%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCACAACAUGGCUGCGGCGCCUGGGCUGCUCGUCUGGCUGCUCGUGCUCCGGCUGCCCUGGCGGGUGCCGGGCCAGCUGGACCCCAGCACUGGCCGGCGGUUCUCGG\
) } def
/len { sequence length } bind def

/coor [
[100.65369415 157.24659729]
[98.51897430 142.39927673]
[96.38424683 127.55195618]
[94.24952698 112.70463562]
[88.05848694 108.47130585]
[79.59163666 120.85324860]
[67.20983887 112.38618469]
[75.67640686 100.00466156]
[69.48536682 95.77133179]
[54.87519073 99.16878510]
[47.08836365 104.23097229]
[39.79939270 102.44832611]
[25.09815407 105.42718506]
[10.39691639 108.40603638]
[-3.02317071 120.91314697]
[-19.42973518 114.86768341]
[-34.03991318 118.26513672]
[-48.65009308 121.66259003]
[-63.26027298 125.06004333]
[-77.87045288 128.45748901]
[-86.01036072 142.00434875]
[-101.36521912 145.74652100]
[-114.82526398 137.46383667]
[-118.40488434 122.07027435]
[-109.98035431 108.69855499]
[-94.54980469 105.28188324]
[-81.26789856 113.84731293]
[-66.65772247 110.44985962]
[-52.04754639 107.05241394]
[-37.43736649 103.65496063]
[-22.82718658 100.25750732]
[-16.09576988 90.09468842]
[-3.83795619 87.20954132]
[7.41805935 93.70480347]
[22.11929703 90.72594452]
[36.82053757 87.74708557]
[51.47773743 84.55860901]
[66.08792114 81.16115570]
[103.99496460 85.39112854]
[115.04608154 75.24850464]
[126.09719849 65.10588074]
[137.14831543 54.96325684]
[148.05348206 44.66386414]
[158.81045532 34.20980072]
[163.31457520 19.04327583]
[177.83412170 15.72182655]
[188.59111023 5.26776314]
[199.34808350 -5.18630028]
[210.10505676 -15.64036369]
[220.08883667 -26.83518600]
[229.24856567 -38.71371841]
[238.40827942 -50.59225464]
[247.56799316 -62.47078705]
[256.72772217 -74.34931946]
[265.88742065 -86.22785187]
[275.04714966 -98.10638428]
[284.20687866 -109.98492432]
[286.50674438 -125.63807678]
[300.40579224 -130.99206543]
[309.56552124 -142.87059021]
[318.72521973 -154.74913025]
[327.88494873 -166.62767029]
[337.04467773 -178.50619507]
[346.20437622 -190.38473511]
[347.84613037 -206.70149231]
[362.90682983 -213.19047546]
[375.89337158 -203.17637634]
[373.44625854 -186.96083069]
[358.08291626 -181.22502136]
[348.92321777 -169.34648132]
[339.76348877 -157.46794128]
[330.60375977 -145.58941650]
[321.44406128 -133.71087646]
[312.28433228 -121.83234406]
[310.63964844 -107.02882385]
[296.08541870 -100.82520294]
[286.92568970 -88.94667053]
[277.76596069 -77.06813812]
[268.60626221 -65.18960571]
[259.44653320 -53.31106949]
[250.28681946 -41.43253326]
[241.12709045 -29.55400085]
[231.96737671 -17.67546654]
[246.88670349 -16.12179947]
[255.21839905 -3.64852142]
[250.94017029 10.72843075]
[237.14439392 16.61710930]
[223.80293274 9.76106167]
[220.55912781 -4.88338661]
[209.80213928 5.57067680]
[199.04516602 16.02474022]
[188.28819275 26.47880363]
[184.55346680 40.89758301]
[169.26451111 44.96677780]
[158.50753784 55.42084122]
[155.86485291 62.44388199]
[147.29093933 66.01437378]
[136.23982239 76.15699768]
[125.18870544 86.29962158]
[114.13758850 96.44224548]
[109.09684753 110.56990814]
[111.23156738 125.41722870]
[113.36629486 140.26455688]
[115.50101471 155.11187744]
[128.30160522 164.38119507]
[130.71606445 179.99996948]
[121.31192017 192.70184326]
[105.66849518 194.95103455]
[93.06674957 185.41311646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[9 38]
[10 37]
[12 36]
[13 35]
[14 34]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[39 100]
[40 99]
[41 98]
[42 97]
[43 95]
[44 94]
[46 92]
[47 91]
[48 90]
[49 89]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
