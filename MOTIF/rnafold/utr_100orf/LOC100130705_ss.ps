%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCUUGCUGUGCUCACCCCUCAGCUGUGGCCACCCUGGUGCCACUCCUUCCCUGGCCACCAUGUCACGGCAGCUCAACAUAGACGCGUUACGGCAGAACUUCUGGAAGGAGGAAUAUCUGAGGGAAAAGAUGUUGCGCUGUGAAUGGUACCGCAAGUAUG\
) } def
/len { sequence length } bind def

/coor [
[67.83778381 337.15109253]
[64.47890472 321.46359253]
[74.76067352 309.14837646]
[74.76067352 294.14837646]
[74.76067352 279.14837646]
[74.76067352 264.14837646]
[74.76067352 249.14837646]
[74.76067352 234.14837646]
[74.76067352 219.14837646]
[67.02337646 206.42109680]
[74.76067352 192.62092590]
[74.76067352 177.62092590]
[74.76067352 162.62092590]
[74.76067352 147.62092590]
[74.76067352 132.62092590]
[73.97685242 147.60043335]
[65.53865051 160.00192261]
[51.89261627 166.22973633]
[36.99522781 164.47819519]
[25.16579247 155.25517273]
[19.83409309 141.23471069]
[22.54598999 126.48189545]
[32.51520157 115.27409363]
[46.85128784 110.86086273]
[61.39556503 114.52054596]
[47.05994415 110.10579681]
[32.72432709 105.69104767]
[18.38870621 101.27629852]
[4.05308723 96.86154938]
[-10.28253174 92.44679260]
[-24.61815071 88.03204346]
[-38.95376968 83.61729431]
[-45.56269455 88.88968658]
[-53.63400650 91.06777191]
[-61.81150436 89.86336517]
[-68.75186920 85.55023193]
[-73.34532166 78.90646362]
[-74.89286041 71.07512665]
[-88.84588623 65.56938934]
[-102.79891205 60.06365204]
[-116.75193024 54.55791473]
[-130.70495605 49.05218124]
[-144.71038818 43.68115997]
[-158.76693726 38.44535446]
[-172.82347107 33.20954514]
[-185.10772705 42.54231644]
[-200.48934937 43.72938919]
[-214.06011963 36.39197540]
[-221.48966980 22.87141418]
[-220.40722656 7.48207140]
[-211.15821838 -4.86537123]
[-196.69395447 -10.23089027]
[-181.62994385 -6.90236759]
[-170.77304077 4.05807734]
[-167.58766174 19.15300560]
[-153.53112793 24.38881302]
[-139.47457886 29.62461853]
[-132.07328796 29.00952530]
[-125.19921875 35.09915543]
[-111.24620056 40.60489273]
[-97.29317474 46.11063004]
[-83.34014893 51.61636353]
[-69.38712311 57.12210083]
[-48.44125748 51.73760605]
[-34.53902054 69.28167725]
[-20.20340157 73.69642639]
[-5.86778259 78.11117554]
[8.46783733 82.52592468]
[22.80345726 86.94067383]
[37.13907623 91.35542297]
[51.47469711 95.77017212]
[65.81031799 100.18492126]
[75.13125610 81.65636444]
[91.98920441 73.57335663]
[91.70011902 58.57614136]
[91.26652527 43.58240891]
[90.68846130 28.59355354]
[78.92197418 18.04247856]
[78.14597321 2.25725102]
[88.82086182 -9.39703178]
[104.61341095 -10.00609112]
[116.15418243 0.79141694]
[116.59623718 16.58952141]
[105.67732239 28.01548958]
[106.25538635 43.00434494]
[109.67190552 49.59865189]
[106.69733429 58.28705597]
[106.98641968 73.28427124]
[117.45385742 78.60132599]
[124.76629639 87.78645325]
[139.51556396 85.05529022]
[154.26481628 82.32412720]
[169.01408386 79.59295654]
[183.76335144 76.86179352]
[198.51260376 74.13063049]
[213.26187134 71.39946747]
[215.73037720 59.20497513]
[223.45742798 48.75185013]
[235.36882019 42.27908325]
[249.45616150 41.40990067]
[263.11257935 46.77349472]
[275.75265503 38.69707489]
[288.39273071 30.62065506]
[301.03280640 22.54423523]
[313.67288208 14.46781635]
[320.74130249 -0.32980403]
[337.10946655 -1.33725798]
[345.93923950 12.48183727]
[338.14727783 26.91158104]
[321.74929810 27.10788918]
[309.10922241 35.18431091]
[296.46914673 43.26072693]
[283.82907104 51.33714676]
[271.18899536 59.41356659]
[274.48654175 74.04662323]
[289.36898804 75.92088318]
[304.25143433 77.79514313]
[319.13388062 79.66940308]
[334.01632690 81.54367065]
[348.89877319 83.41793060]
[363.78121948 85.29219055]
[374.30041504 73.88491821]
[389.52221680 70.87229156]
[403.59356689 77.41272736]
[411.10369873 90.99130249]
[409.16482544 106.38676453]
[398.52249146 117.67926025]
[383.26889038 120.52658081]
[369.26931763 113.83387756]
[361.90695190 100.17463684]
[347.02450562 98.30037689]
[332.14205933 96.42610931]
[317.25961304 94.55184937]
[302.37716675 92.67758942]
[287.49472046 90.80332947]
[272.61227417 88.92906189]
[253.25051880 104.11574554]
[230.31082153 102.11658478]
[215.99304199 86.14872742]
[201.24377441 88.87989807]
[186.49450684 91.61106110]
[171.74525452 94.34222412]
[156.99598694 97.07338715]
[142.24671936 99.80455017]
[127.49745941 102.53571320]
[123.05818176 118.88721466]
[109.15548706 130.66040039]
[89.76067352 132.62092590]
[89.76067352 147.62092590]
[89.76067352 162.62092590]
[89.76067352 177.62092590]
[89.76067352 192.62092590]
[97.49797058 206.42109680]
[89.76067352 219.14837646]
[89.76067352 234.14837646]
[89.76067352 249.14837646]
[89.76067352 264.14837646]
[89.76067352 279.14837646]
[89.76067352 294.14837646]
[89.76067352 309.14837646]
[100.04244232 321.46359253]
[96.68356323 337.15109253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[11 152]
[12 151]
[13 150]
[14 149]
[15 148]
[25 72]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 57]
[44 56]
[45 55]
[74 88]
[75 87]
[76 85]
[77 84]
[90 145]
[91 144]
[92 143]
[93 142]
[94 141]
[95 140]
[96 139]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
[115 136]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
