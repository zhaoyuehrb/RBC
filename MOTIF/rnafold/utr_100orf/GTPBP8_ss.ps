%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCCACAGGAGUAAAAUCUCUCUGCCCGUCUUCUGGGAAGGGAGAAUGGCGGCGCCCGGGCUGCGGCUGGGAGCGGGAAGACUCUUUGAAAUGCCUGCGGUGCUAGAGCGACUGAGCCGCUAUAAUAGCACGUCCCAAGCUUUUG\
) } def
/len { sequence length } bind def

/coor [
[102.84519958 250.02029419]
[95.97855377 263.93536377]
[82.22862244 271.12695312]
[66.88253021 268.82977295]
[55.84116364 257.92709351]
[53.35015488 242.61128235]
[60.36734772 228.77153015]
[74.19448090 221.72952271]
[76.41512299 206.89480591]
[78.63576508 192.06008911]
[80.85640717 177.22537231]
[83.07704163 162.39067078]
[85.29768372 147.55595398]
[87.51832581 132.72123718]
[82.33910370 130.24176025]
[77.63467407 126.94927979]
[73.53150177 122.93229675]
[70.13990784 118.29881287]
[67.55106354 113.17338562]
[52.76682663 115.70839691]
[37.98258591 118.24340820]
[23.19834900 120.77841949]
[8.41410923 123.31343079]
[-6.37012911 125.84844208]
[-21.15436745 128.38345337]
[-33.44842529 138.34170532]
[-47.30023956 132.86662292]
[-62.08447647 135.40162659]
[-76.86871338 137.93664551]
[-91.65295410 140.47164917]
[-102.05340576 152.68681335]
[-118.08290863 152.02745056]
[-127.44499207 138.99935913]
[-122.95786285 123.59658813]
[-108.06367493 117.63482666]
[-94.18796539 125.68741608]
[-79.40372467 123.15240479]
[-64.61949158 120.61739349]
[-49.83525085 118.08238220]
[-38.59865952 108.30545044]
[-23.68938065 113.59922028]
[-8.90514088 111.06420898]
[5.87909746 108.52919769]
[20.66333580 105.99417877]
[35.44757462 103.45916748]
[50.23181152 100.92415619]
[65.01605225 98.38914490]
[65.73921204 92.74259949]
[67.36763000 87.28781128]
[69.85827637 82.16890717]
[73.14533997 77.52114868]
[63.97187424 65.65322876]
[54.79840851 53.78530884]
[45.62494278 41.91738892]
[36.45147705 30.04946899]
[20.74533463 28.29089737]
[10.94833183 15.88951397]
[12.87285900 0.20284045]
[25.37712860 -9.46249962]
[41.04257965 -7.37223053]
[50.57517624 5.23352766]
[48.31940079 20.87600327]
[57.49286270 32.74392319]
[66.66632843 44.61184311]
[75.83979797 56.47976303]
[85.01325989 68.34768677]
[97.83353424 65.04605865]
[110.96339417 66.73928070]
[122.52660370 73.18538666]
[130.87081909 83.46324158]
[145.30331421 79.37631226]
[159.73580933 75.28939056]
[174.16830444 71.20246124]
[188.60081482 67.11553192]
[200.66076660 58.19603729]
[208.79470825 45.59290695]
[216.92866516 32.98977661]
[225.06260681 20.38664436]
[233.19656372 7.78351498]
[224.02003479 -4.28160429]
[219.52638245 -18.75858688]
[220.25827026 -33.89926529]
[226.12728882 -47.87533188]
[236.42474365 -58.99910355]
[249.90715027 -65.92733765]
[264.94644165 -67.82341003]
[279.72659302 -64.45836639]
[292.46276855 -56.23854446]
[301.61703491 -44.15653229]
[306.08401489 -29.67129517]
[305.32421875 -14.53199100]
[299.42944336 -0.56676549]
[289.11151123 10.53801250]
[275.61636353 17.44138718]
[260.57357788 19.30974007]
[245.79968262 15.91746235]
[237.66574097 28.52059364]
[229.53179932 41.12372208]
[221.39784241 53.72685242]
[213.26390076 66.32998657]
[224.12477112 72.81864166]
[227.99734497 83.34856415]
[242.42984009 87.43549347]
[256.86233521 91.52242279]
[271.29483032 95.60934448]
[285.72735596 99.69627380]
[300.15985107 103.78320312]
[320.49871826 97.18048859]
[334.41857910 112.36781311]
[349.08190918 115.52799988]
[363.74523926 118.68818665]
[378.40856934 121.84838104]
[390.64654541 112.11358643]
[406.27734375 112.57439423]
[417.92056274 123.01322174]
[420.07867432 138.50117493]
[411.73263550 151.72531128]
[396.82321167 156.44160461]
[382.39019775 150.42315674]
[375.24838257 136.51170349]
[360.58505249 133.35151672]
[345.92172241 130.19132996]
[331.25839233 127.03113556]
[324.58758545 133.07150269]
[315.74142456 135.36048889]
[306.70870972 133.25102234]
[299.58200073 127.10012054]
[296.07290649 118.21569824]
[281.64041138 114.12876892]
[267.20791626 110.04184723]
[252.77542114 105.95491791]
[238.34292603 101.86798859]
[223.91041565 97.78106689]
[203.54367065 102.58351135]
[192.68772888 81.54803467]
[178.25523376 85.63495636]
[163.82273865 89.72188568]
[149.39024353 93.80881500]
[134.95773315 97.89573669]
[126.28930664 123.13749695]
[102.35304260 134.94187927]
[100.13240051 149.77659607]
[97.91175842 164.61129761]
[95.69111633 179.44601440]
[93.47048187 194.28073120]
[91.24983978 209.11544800]
[89.02919769 223.95016479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[13 142]
[14 141]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[27 39]
[28 38]
[29 37]
[30 36]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[70 139]
[71 138]
[72 137]
[73 136]
[74 135]
[75 100]
[76 99]
[77 98]
[78 97]
[79 96]
[102 133]
[103 132]
[104 131]
[105 130]
[106 129]
[107 128]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
