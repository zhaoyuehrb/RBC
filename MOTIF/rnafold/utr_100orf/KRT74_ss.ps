%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGGAGACUGCUUUUCUCCAGCUCUGUCAACUCAACCUUUCCCACCAUGAGUCGGCAACUGAACAUCAAGUCCAGUGGUGACAAGGGCAACUUCAGUGUGCAUUCGGCAGUGGUGCCAAGGAAGGCUGUGGGUAGCCUGGCUUCUU\
) } def
/len { sequence length } bind def

/coor [
[28.32351685 438.26461792]
[13.88988113 442.34753418]
[-0.50285989 438.12271118]
[-10.43966198 426.88616943]
[-12.87250519 412.08596802]
[-20.68974876 424.88793945]
[-28.50699234 437.68991089]
[-36.32423782 450.49191284]
[-44.14147949 463.29388428]
[-38.98500061 478.05682373]
[-44.57266617 492.66204834]
[-58.26614761 500.21337891]
[-73.59980774 497.14532471]
[-83.33355713 484.90652466]
[-82.87141418 469.27575684]
[-72.43159485 457.63342285]
[-56.94346237 455.47662354]
[-49.12621689 442.67465210]
[-41.30897141 429.87268066]
[-33.49172974 417.07070923]
[-25.67448616 404.26870728]
[-19.10523605 390.78372192]
[-13.84307480 376.73703003]
[-8.58091259 362.69033813]
[-3.31875157 348.64364624]
[-9.70126247 335.23471069]
[-4.56478262 320.91439819]
[9.54300213 314.31076050]
[14.80516338 300.26406860]
[10.07743740 289.08361816]
[14.39937687 277.31124878]
[25.95519066 271.48300171]
[31.51232719 257.55035400]
[37.06946564 243.61773682]
[42.62660217 229.68510437]
[48.18373871 215.75247192]
[40.88460541 200.63513184]
[46.86433411 184.58900452]
[62.89509583 177.66795349]
[68.15725708 163.62126160]
[73.41941833 149.57456970]
[78.68157959 135.52786255]
[83.94374084 121.48117065]
[89.20590210 107.43447876]
[93.87122345 93.17843628]
[97.93141937 78.73838806]
[101.99160767 64.29834747]
[106.05179596 49.85830307]
[110.11199188 35.41825867]
[114.17218018 20.97821617]
[108.54211426 9.32455730]
[112.26933289 -2.64940119]
[122.82104492 -8.65065575]
[127.18477631 -23.00188828]
[131.54849243 -37.35312271]
[135.91223145 -51.70435333]
[139.81996155 -66.18640137]
[143.26780701 -80.78476715]
[146.71563721 -95.38314056]
[150.00939941 -110.01704407]
[153.14868164 -124.68486023]
[156.28797913 -139.35267639]
[159.42727661 -154.02049255]
[162.56657410 -168.68830872]
[165.70587158 -183.35612488]
[156.59396362 -190.50003052]
[150.86036682 -200.49989319]
[149.31208801 -211.87040710]
[152.13772583 -222.93933105]
[158.88546753 -232.09344482]
[168.53488159 -238.01370239]
[179.65098572 -239.86512756]
[183.71118164 -254.30517578]
[187.77136230 -268.74520874]
[191.83155823 -283.18524170]
[186.20149231 -294.83892822]
[189.92871094 -306.81286621]
[200.48042297 -312.81411743]
[204.84414673 -327.16537476]
[200.60580444 -343.00735474]
[212.39587402 -354.40588379]
[228.08573914 -349.63510132]
[231.53501892 -333.60281372]
[219.19538879 -322.80163574]
[214.83166504 -308.45040894]
[219.74319458 -291.63281250]
[206.27160645 -279.12506104]
[202.21141052 -264.68502808]
[198.15121460 -250.24497986]
[194.09103394 -235.80493164]
[206.49763489 -221.91906738]
[208.12092590 -203.21958923]
[198.13565063 -187.15072632]
[180.37368774 -180.21682739]
[177.23439026 -165.54901123]
[174.09509277 -150.88119507]
[170.95579529 -136.21337891]
[167.81649780 -121.54556274]
[164.67721558 -106.87774658]
[166.36428833 -99.62973022]
[161.31401062 -91.93530273]
[157.86618042 -77.33692932]
[154.41833496 -62.73855972]
[156.00520325 -59.51828003]
[156.07011414 -55.35529327]
[154.18112183 -50.99270248]
[150.26345825 -47.34062576]
[145.89973450 -32.98939514]
[141.53601074 -18.63816261]
[137.17227173 -4.28692865]
[142.08381653 12.53065014]
[128.61222839 25.03840637]
[124.55203247 39.47845078]
[120.49184418 53.91849518]
[116.43164825 68.35853577]
[112.37145996 82.79857635]
[108.31127167 97.23862457]
[109.62745667 100.07110596]
[109.91202545 103.45661163]
[108.95414734 107.00257874]
[106.69527435 110.24281311]
[103.25259399 112.69664001]
[97.99043274 126.74333191]
[92.72827148 140.79002380]
[87.46611023 154.83673096]
[82.20394897 168.88342285]
[76.94178772 182.93011475]
[83.90778351 194.50517273]
[82.92766571 207.78355408]
[74.58553314 217.90925598]
[62.11637115 221.30961609]
[56.55923462 235.24224854]
[51.00209808 249.17488098]
[45.44495773 263.10751343]
[39.88782120 277.04013062]
[42.97723389 295.16149902]
[28.85185814 305.52621460]
[23.58969688 319.57293701]
[29.88624191 333.82043457]
[24.34956169 347.99081421]
[10.72794437 353.90579224]
[5.46578264 367.95248413]
[0.20362128 381.99920654]
[-5.05853987 396.04589844]
[8.09642887 388.83847046]
[23.06946182 389.73751831]
[35.26750946 398.46722412]
[40.94875717 412.34970093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[22 144]
[23 143]
[24 142]
[25 141]
[28 138]
[29 137]
[32 135]
[33 134]
[34 133]
[35 132]
[36 131]
[39 127]
[40 126]
[41 125]
[42 124]
[43 123]
[44 122]
[45 117]
[46 116]
[47 115]
[48 114]
[49 113]
[50 112]
[53 110]
[54 109]
[55 108]
[56 107]
[57 103]
[58 102]
[59 101]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[72 90]
[73 89]
[74 88]
[75 87]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
