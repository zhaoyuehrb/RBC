%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUUUGCGGCCGGCGCCAGGGUGGAGAGUUGUGCGCCGGUCCCUGGGCCUGAGCUCCGGCUCCGGCUGGGGCGCCUGCGAUGUCUCAAGAUGGCGGAGCUGGGCGAAUUAAAGCACAUGGUGAUGAGUUUCCGGGUGUCUGAGCUCCAGGUGCUUCUUGGCUUUGCUGGCCGGAACAAGAGUGGACGGA\
) } def
/len { sequence length } bind def

/coor [
[111.48946381 577.01184082]
[123.65129852 567.52008057]
[122.18103790 552.59228516]
[113.23350525 540.68469238]
[119.58089447 526.19262695]
[118.11064148 511.26483154]
[116.64038086 496.33706665]
[115.17012787 481.40930176]
[113.33396912 466.52209473]
[111.13301086 451.68444824]
[108.93205261 436.84680176]
[106.73109436 422.00915527]
[104.53013611 407.17150879]
[102.32917786 392.33386230]
[100.12821960 377.49621582]
[97.92726898 362.65856934]
[95.72631073 347.82092285]
[93.11145020 345.43301392]
[91.53098297 341.65332031]
[91.62934875 336.98547363]
[93.80002594 332.20303345]
[92.32976532 317.27523804]
[90.85951233 302.34747314]
[89.38925171 287.41970825]
[80.44171906 275.51211548]
[86.78910828 261.01998901]
[85.31885529 246.09222412]
[83.84859467 231.16445923]
[82.37834167 216.23669434]
[80.90808105 201.30891418]
[78.81178284 199.42488098]
[77.34169769 196.59033203]
[76.86610413 193.04187012]
[77.66004944 189.14575195]
[79.86283875 185.36155701]
[79.37204742 170.36959839]
[78.88126373 155.37762451]
[78.39048004 140.38565063]
[77.89968872 125.39368439]
[69.06306458 113.27287292]
[54.93990707 108.21952820]
[40.81674576 103.16617584]
[25.21665764 105.80204773]
[15.83998871 94.22935486]
[1.71682763 89.17600250]
[-12.40633297 84.12265778]
[-28.00642204 86.75852966]
[-37.38309097 75.18582916]
[-51.50625229 70.13248444]
[-65.62940979 65.07913208]
[-79.75257111 60.02578354]
[-95.35266113 62.66165543]
[-104.72933197 51.08895874]
[-118.85249329 46.03561020]
[-132.97564697 40.98226166]
[-147.09881592 35.92891693]
[-163.12739563 39.39538574]
[-173.94181824 27.06734467]
[-168.41709900 11.62682438]
[-152.23663330 8.95770836]
[-142.04547119 21.80575371]
[-127.92230225 26.85910225]
[-113.79914856 31.91245079]
[-99.67598724 36.96579742]
[-85.08607483 33.96847534]
[-74.69922638 45.90262604]
[-60.57606506 50.95597076]
[-46.45290375 56.00931931]
[-32.32974243 61.06266785]
[-17.73983765 58.06534576]
[-7.35298538 69.99949646]
[6.77017546 75.05284119]
[20.89333725 80.10619354]
[35.48324203 77.10887146]
[45.87009430 89.04301453]
[59.99325562 94.09636688]
[74.11641693 99.14971161]
[76.98464966 85.40645599]
[86.95695496 74.53980255]
[82.83812714 60.11637878]
[71.60886383 48.97123337]
[75.55399323 34.60860062]
[71.43516541 20.18517303]
[56.81402969 14.98881340]
[48.06742096 2.17177701]
[48.55857849 -13.33752346]
[58.09864807 -25.57544518]
[73.01927185 -29.83625603]
[87.58317566 -24.48159027]
[96.19023132 -11.57042408]
[95.53085327 3.93263483]
[85.85858917 16.06634521]
[89.97741699 30.48977089]
[100.91207123 40.60325623]
[97.26155090 55.99754715]
[101.38037872 70.42097473]
[115.69837952 74.89253235]
[127.29354095 65.37663269]
[138.88870239 55.86073303]
[150.48385620 46.34483337]
[162.07901001 36.82893753]
[173.67416382 27.31303596]
[185.19108582 17.70259476]
[196.62899780 7.99825191]
[208.06689453 -1.70609033]
[219.50480652 -11.41043282]
[230.94271851 -21.11477470]
[227.18473816 -35.86736679]
[230.19244385 -50.72808075]
[239.31674194 -62.76000214]
[252.70524597 -69.60903931]
[267.67797852 -69.96440887]
[281.26394653 -63.80916595]
[292.70187378 -73.51350403]
[304.13977051 -83.21784973]
[315.57766724 -92.92218781]
[321.09500122 -107.75019836]
[335.80557251 -110.08428192]
[347.24346924 -119.78862762]
[358.68139648 -129.49296570]
[363.69363403 -145.10736084]
[379.77722168 -148.30889893]
[390.38677979 -135.80410767]
[384.60806274 -120.45684052]
[368.38574219 -118.05506134]
[356.94781494 -108.35071564]
[345.50991821 -98.64637756]
[340.81072998 -84.51248932]
[325.28201294 -81.48428345]
[313.84411621 -71.77993774]
[302.40618896 -62.07559967]
[290.96829224 -52.37125778]
[294.82821655 -37.96409225]
[292.03860474 -23.24921799]
[283.10012817 -11.15522957]
[269.74261475 -4.11273670]
[254.59045410 -3.56595635]
[240.64706421 -9.67686653]
[229.20915222 0.02747548]
[217.77124023 9.73181820]
[206.33332825 19.43615913]
[194.89543152 29.14050293]
[191.82403564 35.87606430]
[183.19006348 38.90819168]
[171.59490967 48.42409134]
[159.99975586 57.93999100]
[148.40460205 67.45589447]
[136.80943298 76.97179413]
[125.21427917 86.48768616]
[121.21710968 117.10298920]
[92.89166260 124.90290070]
[93.38244629 139.89486694]
[93.87322998 154.88684082]
[94.36402130 169.87879944]
[94.85480499 184.87077332]
[95.83585358 199.83865356]
[97.30610657 214.76643372]
[98.77636719 229.69419861]
[100.24662018 244.62197876]
[101.71688080 259.54974365]
[110.76957703 272.52508545]
[104.31702423 285.94946289]
[105.78728485 300.87722778]
[107.25753784 315.80499268]
[108.72779846 330.73275757]
[110.56395721 345.61996460]
[112.76491547 360.45761108]
[114.96587372 375.29525757]
[117.16682434 390.13290405]
[119.36778259 404.97055054]
[121.56874084 419.80819702]
[123.76969910 434.64584351]
[125.97065735 449.48348999]
[128.17161560 464.32113647]
[131.43927002 468.43283081]
[132.66888428 472.93688965]
[132.05416870 476.98733521]
[130.09790039 479.93902588]
[131.56816101 494.86679077]
[133.03840637 509.79458618]
[134.50866699 524.72235107]
[143.56137085 537.69769287]
[137.10881042 551.12207031]
[138.57907104 566.04980469]
[152.35896301 572.98651123]
[160.18139648 586.28363037]
[159.55026245 601.69805908]
[150.66694641 614.31115723]
[136.36607361 620.09814453]
[121.21101379 617.21234131]
[110.03769684 606.57464600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 184]
[3 183]
[5 181]
[6 180]
[7 179]
[8 178]
[9 174]
[10 173]
[11 172]
[12 171]
[13 170]
[14 169]
[15 168]
[16 167]
[17 166]
[21 165]
[22 164]
[23 163]
[24 162]
[26 160]
[27 159]
[28 158]
[29 157]
[30 156]
[35 155]
[36 154]
[37 153]
[38 152]
[39 151]
[40 77]
[41 76]
[42 75]
[44 73]
[45 72]
[46 71]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[55 62]
[56 61]
[79 96]
[80 95]
[82 93]
[83 92]
[97 149]
[98 148]
[99 147]
[100 146]
[101 145]
[102 144]
[103 142]
[104 141]
[105 140]
[106 139]
[107 138]
[113 132]
[114 131]
[115 130]
[116 129]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
