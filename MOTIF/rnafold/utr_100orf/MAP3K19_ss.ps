%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAAGAAACAGCAGCUUUUGGACAUUUUAAUGAGUUCUAUGCCAAAACCAGAAAGACAUGCUGAGUCAUUGCUUGACAUUUGUCAUGAUACAAACUCUUCUCCAACUGAUUUGAUGACAGUUACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[74.46133423 210.06912231]
[61.08525467 203.28083801]
[50.09770584 193.06939697]
[42.34951019 180.22550964]
[38.44067001 165.74375916]
[38.67386246 150.74557495]
[43.03103638 136.39234924]
[51.17478561 123.79554749]
[62.47449112 113.93062592]
[76.05513763 107.56148529]
[90.86022186 105.18141937]
[76.28305054 101.64503479]
[61.70587540 98.10865021]
[47.12870026 94.57226562]
[32.55152893 91.03588104]
[13.69311428 105.97600555]
[-9.89288902 102.67796326]
[-23.64544678 83.53398132]
[-38.64119720 83.17701721]
[-53.63695145 82.82004547]
[-68.63270569 82.46308136]
[-83.62845612 82.10611725]
[-98.62420654 81.74915314]
[-107.37572479 84.69561005]
[-113.97141266 81.20102692]
[-128.95442200 80.48729706]
[-143.93743896 79.77356720]
[-150.74882507 93.39431763]
[-162.51553345 103.06202698]
[-177.19888306 107.10170746]
[-192.25491333 104.81346893]
[-205.07505798 96.59375000]
[-213.43815613 83.86667633]
[-215.89526367 68.83728790]
[-212.02064514 54.10951614]
[-202.48562622 42.23503494]
[-188.94219971 35.27117157]
[-173.73684692 34.42445755]
[-159.50396729 39.84159470]
[-148.70951843 50.58402252]
[-143.22370911 64.79055786]
[-128.24069214 65.50428772]
[-113.25768280 66.21801758]
[-98.26724243 66.75340271]
[-83.27149200 67.11036682]
[-68.27573395 67.46733093]
[-53.27998352 67.82429504]
[-38.28423309 68.18125916]
[-23.28848076 68.53823090]
[-20.62022209 61.97859192]
[-16.47036552 56.21770859]
[-11.06569195 51.58522415]
[-4.70507479 48.34871674]
[2.25704551 46.69825745]
[9.43040752 46.73527145]
[16.41080666 48.46633148]
[22.80286789 51.80231476]
[28.24244690 56.56294632]
[32.41735840 62.48653030]
[35.08530426 69.24430084]
[36.08790970 76.45870972]
[50.66508484 79.99509430]
[65.24225616 83.53147888]
[79.81943512 87.06786346]
[94.39660645 90.60424805]
[88.88622284 77.73963928]
[85.29929352 64.06979370]
[90.20531464 49.89477921]
[95.11132812 35.71976852]
[100.01734924 21.54475594]
[94.32898712 6.54402113]
[102.63401031 -7.18209076]
[118.56151581 -9.10408020]
[129.89329529 2.25243759]
[127.93656158 18.17571449]
[114.19235992 26.45077515]
[109.28634644 40.62578964]
[104.38032532 54.80080032]
[99.47430420 68.97581482]
[103.37781525 75.37992096]
[111.18482971 88.18814087]
[115.08834076 94.59225464]
[129.93565369 96.72697449]
[144.78298950 98.86169434]
[159.63031006 100.99642181]
[174.47763062 103.13114166]
[189.32495117 105.26586151]
[204.17227173 107.40058899]
[208.34094238 105.53630066]
[212.46224976 105.19423676]
[216.04557800 106.16071320]
[218.72639465 108.07981873]
[220.30285645 110.50950623]
[234.88003540 114.04589081]
[249.45721436 117.58227539]
[264.03439331 121.11865234]
[273.21221924 120.09980011]
[278.91433716 124.91654205]
[293.40322876 128.79882812]
[304.20672607 117.88185883]
[319.02554321 113.84471893]
[333.87347412 117.77336884]
[344.75653076 128.61102295]
[348.74719238 143.44241333]
[344.77200317 158.27796936]
[333.90029907 169.12699890]
[319.05645752 173.07115173]
[304.23345947 169.04949951]
[293.41854858 158.14382935]
[289.52093506 143.28771973]
[275.03204346 139.40542603]
[260.49798584 135.69583130]
[245.92082214 132.15943909]
[231.34364319 128.62306213]
[216.76647949 125.08667755]
[202.03755188 122.24790955]
[187.19023132 120.11318970]
[172.34291077 117.97846222]
[157.49557495 115.84374237]
[142.64825439 113.70901489]
[127.80094147 111.57429504]
[112.95361328 109.43957520]
[125.81739044 117.15470886]
[136.05706787 128.11595154]
[142.87971497 141.47453308]
[145.75703430 156.19598389]
[144.46618652 171.14033508]
[139.10714722 185.15036011]
[130.09489441 197.14115906]
[118.12731171 206.18421936]
[104.13111877 211.57926941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[25 43]
[26 42]
[27 41]
[67 79]
[68 78]
[69 77]
[70 76]
[82 122]
[83 121]
[84 120]
[85 119]
[86 118]
[87 117]
[88 116]
[93 115]
[94 114]
[95 113]
[96 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
