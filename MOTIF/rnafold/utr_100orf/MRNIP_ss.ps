%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCGCACGCGCUUGGCUGCCUGGCGACUGCACAAGCAGGGAUGGCGUCGCUUCAGCGUUCUCGGGUGCUACGCUGCUGCAGCUGCCGCCUCUUCCAGGCGCACCAGGUAAAAAAGAGUGUCAAGUGGACAUGCAAAGCUU\
) } def
/len { sequence length } bind def

/coor [
[140.43353271 506.76632690]
[124.06900787 505.70117188]
[117.05282593 490.87872314]
[126.60262299 477.54702759]
[127.57691193 462.57870483]
[128.55120850 447.61038208]
[129.52549744 432.64205933]
[130.01289368 417.64999390]
[130.01289368 402.64999390]
[130.01289368 387.64999390]
[116.31996918 375.58148193]
[115.71129608 357.02182007]
[129.03157043 343.63195801]
[128.38179016 328.64602661]
[127.73200989 313.66012573]
[127.08222961 298.67419434]
[126.43244171 283.68826294]
[125.78266144 268.70236206]
[125.13288116 253.71643066]
[124.48310089 238.73051453]
[122.37762451 223.87901306]
[118.83645630 209.30300903]
[115.29528809 194.72698975]
[111.75411987 180.15098572]
[108.21295166 165.57496643]
[104.67178345 150.99896240]
[101.13061523 136.42294312]
[88.52632141 134.58705139]
[77.32384491 128.52545166]
[68.89184570 118.97872162]
[64.26051331 107.11325836]
[49.26139450 106.95075989]
[34.26227188 106.78826904]
[19.26315308 106.62577820]
[5.24631453 115.13813782]
[-9.00200462 107.01918030]
[-8.82435513 90.62099457]
[5.59651279 82.81262970]
[19.42564583 91.62665558]
[34.42476654 91.78915405]
[49.42388535 91.95164490]
[64.42300415 92.11413574]
[66.76047516 82.76918793]
[71.57095337 74.12699127]
[78.64025116 66.84522247]
[87.57890320 61.51560974]
[97.84262085 58.61727142]
[95.25567627 43.84203339]
[92.66873932 29.06679153]
[89.92189026 14.32044125]
[87.01546478 -0.39528689]
[76.75084686 -12.43473148]
[81.87545013 -26.41999817]
[78.96902466 -41.13572693]
[66.12375641 -49.94691086]
[63.38585663 -64.91215515]
[71.86513519 -77.10385132]
[68.95870209 -91.81958008]
[66.05227661 -106.53530884]
[63.14584351 -121.25103760]
[60.23941422 -135.96676636]
[57.33298492 -150.68249512]
[42.64126205 -154.97340393]
[31.63452721 -165.60873413]
[26.84204865 -180.14457703]
[29.36509895 -195.24069214]
[38.62390518 -207.42811584]
[52.49085617 -213.90625000]
[67.77942657 -213.18647766]
[80.97642517 -205.43418884]
[89.04927063 -192.43081665]
[90.14287567 -177.16442871]
[84.00595093 -163.14312744]
[72.04871368 -153.58892822]
[74.95513916 -138.87319946]
[77.86157227 -124.15746307]
[80.76800537 -109.44173431]
[83.67443085 -94.72600555]
[86.58086395 -80.01028442]
[99.05849457 -71.95767975]
[102.21566010 -57.07524490]
[93.68475342 -44.04215622]
[96.59117889 -29.32642746]
[106.64791107 -18.33955193]
[101.73119354 -3.30171728]
[104.63761902 11.41401100]
[109.05207825 17.41103172]
[107.44397736 26.47985077]
[110.03092194 41.25509262]
[112.61785889 56.03033447]
[126.16246796 62.47577286]
[139.25981140 55.16418457]
[152.35717773 47.85259628]
[165.45452881 40.54100418]
[171.19590759 25.56048393]
[186.53080750 20.84661293]
[199.69558716 30.01547241]
[200.59136963 46.03349686]
[188.53097534 56.61302948]
[172.76611328 53.63835907]
[159.66876221 60.94994736]
[146.57141113 68.26153564]
[133.47406006 75.57312775]
[139.45460510 92.35046387]
[137.75421143 109.53520966]
[129.15739441 123.88283539]
[115.70662689 132.88177490]
[119.24779510 147.45779419]
[122.78896332 162.03379822]
[126.33013153 176.60981750]
[129.87130737 191.18582153]
[133.41247559 205.76184082]
[136.95364380 220.33784485]
[143.83581543 207.00984192]
[156.75341797 199.38517761]
[171.74766541 199.80052185]
[184.22335815 208.12861633]
[190.35714722 221.81716919]
[188.26924133 236.67115784]
[178.59950256 248.13833618]
[164.31138611 252.70445251]
[149.78364563 248.97013855]
[139.46902466 238.08073425]
[140.11880493 253.06665039]
[140.76858521 268.05258179]
[141.41836548 283.03848267]
[142.06814575 298.02441406]
[142.71792603 313.01034546]
[143.36770630 327.99624634]
[144.01748657 342.98217773]
[154.24717712 349.21069336]
[160.10958862 359.51626587]
[160.23312378 371.25158691]
[154.70349121 381.46661377]
[145.01289368 387.64999390]
[145.01289368 402.64999390]
[145.01289368 417.64999390]
[147.70573425 422.29461670]
[148.24168396 427.02893066]
[146.95964050 430.99880981]
[144.49382019 433.61636353]
[143.51953125 448.58468628]
[142.54524231 463.55300903]
[141.57095337 478.52133179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 144]
[5 143]
[6 142]
[7 141]
[8 137]
[9 136]
[10 135]
[13 130]
[14 129]
[15 128]
[16 127]
[17 126]
[18 125]
[19 124]
[20 123]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 107]
[31 42]
[32 41]
[33 40]
[34 39]
[47 90]
[48 89]
[49 88]
[50 86]
[51 85]
[53 83]
[54 82]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
