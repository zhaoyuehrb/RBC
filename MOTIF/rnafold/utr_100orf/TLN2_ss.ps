%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGCCCUGUCCUUAAAGAUUUGUGUGCGCCACUGCAACGUGGUGAAGACCAUGCAGUUUGAACCAUCUACAGCUGUGUACGAUGCGUGUCGAGUCA\
) } def
/len { sequence length } bind def

/coor [
[82.84849548 142.22993469]
[81.45829010 127.29449463]
[89.43672943 114.59273529]
[75.73988342 120.70798492]
[62.04303360 126.82324219]
[48.34618759 132.93849182]
[34.74609756 139.26602173]
[21.24605751 145.80429077]
[18.53912926 162.41447449]
[6.62915945 174.06994629]
[-9.70872974 176.37142944]
[-24.08450890 168.61637878]
[-37.37467957 175.57131958]
[-50.66484833 182.52627563]
[-55.14493179 197.68228149]
[-69.06945801 205.15779114]
[-84.17724609 200.51771545]
[-91.50511932 186.51493835]
[-86.70557404 171.45704651]
[-72.62610626 164.27763367]
[-57.61980057 169.23611450]
[-44.32963181 162.28115845]
[-31.03946114 155.32620239]
[-30.30304909 141.89808655]
[-22.93076324 130.52069092]
[-10.78198910 124.26245117]
[2.97917199 124.87496185]
[14.70779037 132.30424500]
[28.20783043 125.76598358]
[32.93899536 119.91435242]
[42.23093033 119.24164581]
[55.92778015 113.12638855]
[69.62462616 107.01113892]
[83.32147980 100.89588165]
[90.48227692 87.71548462]
[88.15880585 72.89652252]
[85.83532715 58.07756805]
[83.51185608 43.25861359]
[81.18838501 28.43965530]
[78.86491394 13.62069988]
[75.34230042 9.29189873]
[74.08921051 4.51537418]
[74.87245941 0.27967259]
[77.08309937 -2.68142605]
[76.15055847 -17.65241051]
[75.21800995 -32.62339401]
[74.28546906 -47.59437943]
[64.77288818 -60.95262909]
[71.83038330 -75.75545502]
[88.19780731 -76.77498627]
[97.03775787 -62.96240997]
[89.25645447 -48.52692413]
[90.18899536 -33.55593872]
[91.12154388 -18.58495522]
[92.05408478 -3.61397076]
[93.68386841 11.29722691]
[96.00733948 26.11618423]
[98.33081055 40.93513870]
[100.65428925 55.75409698]
[102.97776031 70.57305145]
[105.30123138 85.39201355]
[115.65753174 96.24314117]
[130.35198975 99.25524902]
[145.04646301 102.26734924]
[159.74092102 105.27945709]
[174.48045349 108.06267548]
[189.26147461 110.61632538]
[204.08042908 112.93980408]
[218.93373108 115.03253174]
[233.78703308 117.12525940]
[248.64033508 119.21799469]
[263.52438354 121.07947540]
[278.43557739 122.70925140]
[293.34677124 124.33903503]
[308.25796509 125.96881866]
[323.04067993 118.86925507]
[336.42593384 128.34381104]
[334.64410400 144.64587402]
[319.52822876 151.00527954]
[306.62817383 140.88002014]
[291.71697998 139.25022888]
[276.80578613 137.62045288]
[261.89459229 135.99067688]
[254.77806091 138.43615723]
[246.54760742 134.07128906]
[231.69430542 131.97856140]
[216.84100342 129.88583374]
[201.98770142 127.79309845]
[194.79855347 130.01608276]
[186.70782471 125.39736176]
[171.92678833 122.84370422]
[164.67199707 124.84203339]
[156.72880554 119.97392273]
[142.03434753 116.96181488]
[127.33988953 113.94970703]
[112.64542389 110.93759918]
[124.14180756 120.57260132]
[127.40917969 135.21241760]
[121.10043335 148.82122803]
[107.81659698 155.78826904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[7 29]
[8 28]
[12 23]
[13 22]
[14 21]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[44 55]
[45 54]
[46 53]
[47 52]
[62 96]
[63 95]
[64 94]
[65 93]
[66 91]
[67 90]
[68 88]
[69 87]
[70 86]
[71 85]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
