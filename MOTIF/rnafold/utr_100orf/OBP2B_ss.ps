%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUUCAGACGCCCAGUGACCUGCCGAGGUCGGCAGCACAGAGCUCUGGAGAUGAAGACCCUGUUCCUGGGUGUCACGCUCGGCCUGGCCGCUGCCCUGUCCUUCACCCUGGAGGAGGAGGAUAUCACAGGGACCUGGUACGUGAAGGCCA\
) } def
/len { sequence length } bind def

/coor [
[318.49673462 168.42767334]
[306.40570068 172.43399048]
[293.65728760 172.85897827]
[281.29147339 169.65779114]
[270.31982422 163.08178711]
[261.64285278 153.65887451]
[255.97607422 142.15106201]
[253.79103088 129.49290466]
[238.94775391 127.33028412]
[224.10446167 125.16767120]
[209.26118469 123.00505066]
[194.41789246 120.84243774]
[179.57461548 118.67981720]
[164.73133850 116.51720428]
[149.88804626 114.35459137]
[135.04476929 112.19197083]
[127.92741394 114.35348511]
[119.91831970 109.82821655]
[105.12289429 107.35929871]
[105.02116394 126.67658997]
[89.40193176 144.06675720]
[75.54373932 149.80700684]
[61.68554688 155.54727173]
[47.82735443 161.28752136]
[33.96916199 167.02777100]
[20.11096954 172.76802063]
[10.56250763 186.10064697]
[-5.72944736 184.22868347]
[-12.00512886 169.07785034]
[-1.80865479 156.23402405]
[14.37071705 158.90982056]
[28.22891045 153.16957092]
[42.08710480 147.42932129]
[55.94529724 141.68907166]
[69.80348969 135.94882202]
[83.66168213 130.20857239]
[84.74586487 115.24713135]
[85.82997131 100.28702545]
[72.94416046 92.60874939]
[60.05834961 84.93048096]
[47.17254257 77.25220490]
[34.54517746 82.04627991]
[21.65537643 78.72101593]
[13.17527580 68.71405029]
[12.04407310 55.84180450]
[-0.68029767 47.89886093]
[-13.40466881 39.95591354]
[-27.73813248 45.89993668]
[-42.82007599 42.25102234]
[-52.85118484 30.41225243]
[-53.97429276 14.93587494]
[-45.75754166 1.77287340]
[-31.36043930 -4.01530981]
[-16.31896591 -0.20299952]
[-6.41687489 11.74389267]
[-5.46172333 27.23154259]
[7.26264763 35.17448807]
[19.98701859 43.11743546]
[36.16261292 38.61956406]
[50.89181900 47.35790253]
[54.85081863 64.36639404]
[67.73662567 72.04467010]
[80.62243652 79.72294617]
[93.50824738 87.40122223]
[107.59181213 92.56388092]
[122.38723755 95.03279877]
[137.20738220 97.34868622]
[152.05065918 99.51130676]
[166.89395142 101.67391968]
[181.73722839 103.83653259]
[196.58052063 105.99915314]
[211.42379761 108.16176605]
[226.26708984 110.32438660]
[241.11036682 112.48699951]
[255.95365906 114.64961243]
[264.54281616 99.40339661]
[278.27505493 88.61344147]
[295.05300903 83.89370728]
[312.32714844 85.93363953]
[327.48309326 94.39759064]
[338.23730469 107.97970581]
[342.98120117 124.60531616]
[357.92996216 125.84400940]
[372.87872314 127.08269501]
[387.82748413 128.32138062]
[402.77627563 129.56007385]
[410.71823120 122.01226044]
[421.29244995 120.15509796]
[430.92709351 124.36865997]
[436.50326538 133.02316284]
[451.38809204 134.87855530]
[466.27288818 136.73394775]
[481.17608643 138.43542480]
[496.09606934 139.98278809]
[511.01602173 141.53015137]
[525.93603516 143.07752991]
[538.13360596 133.38957214]
[553.24255371 135.17135620]
[562.40332031 146.85960388]
[577.32330322 148.40698242]
[592.24328613 149.95434570]
[607.16326904 151.50170898]
[622.08325195 153.04908752]
[637.07604980 153.51405334]
[652.06323242 152.89418030]
[662.73663330 141.54885864]
[677.94458008 141.13371277]
[688.69482422 151.37907410]
[703.68200684 150.75920105]
[718.66918945 150.13932800]
[730.54901123 139.35742188]
[746.36193848 142.06513977]
[753.97760010 156.18537903]
[747.55395508 170.88627625]
[732.01867676 174.89057922]
[719.28906250 165.12651062]
[704.30187988 165.74639893]
[689.31469727 166.36627197]
[679.44726562 177.46438599]
[664.25695801 178.30653381]
[652.68310547 167.88136292]
[637.69592285 168.50123596]
[648.46759033 178.94013977]
[650.18218994 193.84182739]
[642.06274414 206.45431519]
[627.78826904 211.06288147]
[613.82647705 205.57936096]
[606.50354004 192.48835754]
[609.13745117 177.72142029]
[620.53588867 167.96905518]
[605.61590576 166.42169189]
[590.69592285 164.87431335]
[575.77593994 163.32695007]
[560.85595703 161.77958679]
[549.49151611 171.33911133]
[534.33850098 169.98240662]
[524.38861084 157.99749756]
[509.46865845 156.45013428]
[494.54867554 154.90275574]
[479.62872314 153.35539246]
[472.60675049 155.80917358]
[464.41751099 151.61875916]
[449.53268433 149.76336670]
[434.64788818 147.90797424]
[417.49649048 156.75633240]
[401.53756714 144.50885010]
[386.58880615 143.27015686]
[371.64004517 142.03146362]
[356.69125366 140.79277039]
[341.74249268 139.55407715]
[336.90951538 151.28076172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[18 66]
[19 65]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[38 64]
[39 63]
[40 62]
[41 61]
[45 58]
[46 57]
[47 56]
[82 150]
[83 149]
[84 148]
[85 147]
[86 146]
[90 144]
[91 143]
[92 142]
[93 140]
[94 139]
[95 138]
[96 137]
[99 134]
[100 133]
[101 132]
[102 131]
[103 130]
[104 122]
[105 121]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
