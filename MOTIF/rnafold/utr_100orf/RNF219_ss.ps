%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAAGAGUAGCGGUAGGUCGGCGGGACUUCCGUGUUGGCGGGAUUCUGAACGCUGCCAUGGCUCAGACCGUGCAGAAUGUUACAUUGUCGCUCACUCUGCCCAUCACGUGCCACAUUUGCUUGGGGAAGGUACGUCAGCCUGUCAUAUGCAUCAACA\
) } def
/len { sequence length } bind def

/coor [
[333.18359375 309.61715698]
[321.58843994 300.10125732]
[309.99328613 290.58535767]
[298.39813232 281.06945801]
[287.12927246 288.54208374]
[274.19204712 292.53100586]
[260.63803101 292.70196533]
[247.57183838 289.03158569]
[236.06094360 281.80975342]
[227.04858398 271.61706543]
[221.27644348 259.27789307]
[219.22355652 245.79389954]
[221.06669617 232.26263428]
[226.66506958 219.78819275]
[215.45243835 209.82441711]
[204.23980713 199.86062622]
[193.02719116 189.89683533]
[181.81455994 179.93304443]
[170.50466919 170.07981873]
[159.09857178 160.33810425]
[144.39570618 157.95588684]
[138.92694092 143.10990906]
[127.52085876 133.36817932]
[116.11476898 123.62646484]
[104.70867920 113.88474274]
[90.39801025 109.38976288]
[75.47023773 110.86002350]
[60.54246902 112.33027649]
[47.56713867 121.38297272]
[34.14276123 114.93041992]
[19.21499062 116.40068054]
[4.28722048 117.87093353]
[-10.64055061 119.34119415]
[-25.56832123 120.81144714]
[-40.49609375 122.28170776]
[-53.50365829 132.26846313]
[-68.55068207 125.74780273]
[-70.15808105 109.42761993]
[-56.67229843 100.09672546]
[-41.96635056 107.35393524]
[-27.03857803 105.88368225]
[-12.11080742 104.41342163]
[2.81696320 102.94316864]
[17.74473381 101.47290802]
[32.67250443 100.00265503]
[44.58010483 91.05511475]
[59.07221222 97.40250397]
[73.99998474 95.93225098]
[88.92775726 94.46199036]
[87.98076630 93.47329712]
[87.08911133 92.41523743]
[79.75978851 79.32779694]
[72.43047333 66.24035645]
[65.10115051 53.15291595]
[57.51629257 40.21189880]
[49.67881393 27.42229843]
[41.84133530 14.63269615]
[34.00385666 1.84309328]
[26.81352997 -3.87617087]
[26.14090347 -11.27545357]
[18.55604172 -24.21646881]
[10.97118187 -37.15748596]
[3.38632083 -50.09849930]
[-11.96725464 -53.84593582]
[-20.10251999 -67.39558411]
[-16.19296646 -82.70868683]
[-2.55806208 -90.70024109]
[12.71284485 -86.62900543]
[20.55979729 -72.91036987]
[16.32733727 -57.68336105]
[23.91219711 -44.74234772]
[31.49705696 -31.80133057]
[39.08191681 -18.86031342]
[46.79346085 -5.99438524]
[54.63093948 6.79521751]
[62.46841812 19.58481979]
[70.30589294 32.37442398]
[74.70671082 34.34807968]
[77.88973236 39.13484955]
[78.18859100 45.82359695]
[85.51791382 58.91103745]
[92.84722900 71.99848175]
[100.17655182 85.08591461]
[102.39910126 70.25148773]
[113.23717499 59.88153076]
[128.15522766 58.31570435]
[140.91027832 66.20928192]
[146.16456604 80.25892639]
[141.71923828 94.58509064]
[129.43460083 103.19251251]
[114.45040131 102.47865295]
[125.85649109 112.22037506]
[137.26257324 121.96209717]
[148.66867065 131.70381165]
[164.18737793 134.78282166]
[168.84028625 148.93200684]
[180.24638367 158.67373657]
[188.85214233 161.89114380]
[191.77835083 168.72042847]
[202.99098206 178.68421936]
[214.20359802 188.64799500]
[225.41622925 198.61178589]
[236.62884521 208.57557678]
[251.12123108 200.49481201]
[267.47604370 197.84901428]
[283.72680664 200.93862915]
[297.92562866 209.37553406]
[308.37658691 222.13174438]
[313.83837891 237.66459656]
[313.67169189 254.10330200]
[307.91403198 269.47430420]
[319.50918579 278.99020386]
[331.10433960 288.50610352]
[342.69949341 298.02200317]
[358.08868408 290.50387573]
[375.16088867 290.44277954]
[390.50405884 297.80291748]
[401.07263184 311.07003784]
[404.79208374 327.56274414]
[400.96591187 343.97439575]
[412.92572021 353.02774048]
[424.88552856 362.08108521]
[439.01754761 356.23019409]
[454.08129883 358.22534180]
[466.04434204 367.43142700]
[471.75491333 381.29666138]
[469.77197266 396.05923462]
[481.73178101 405.11257935]
[497.40484619 407.27264404]
[502.88265991 421.12338257]
[514.84246826 430.17669678]
[526.80230713 439.23004150]
[538.76208496 448.28338623]
[554.38104248 445.86999512]
[567.08227539 455.27502441]
[569.33038330 470.91860962]
[559.79162598 483.51968384]
[544.12512207 485.60229492]
[531.62561035 475.93081665]
[529.70874023 460.24319458]
[517.74896240 451.18984985]
[505.78912354 442.13653564]
[493.82931519 433.08319092]
[479.01171875 431.57067871]
[472.67843628 417.07238770]
[460.71862793 408.01904297]
[447.04858398 413.93469238]
[432.15380859 412.20211792]
[420.04611206 403.18713379]
[414.03695679 389.23049927]
[415.83218384 374.04089355]
[403.87237549 364.98754883]
[391.91256714 355.93420410]
[380.82702637 362.81085205]
[368.02972412 365.50201416]
[355.05001831 363.66381836]
[343.44668579 357.49493408]
[334.62072754 347.71545410]
[329.64624023 335.48294067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[4 111]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[19 97]
[20 96]
[22 94]
[23 93]
[24 92]
[25 91]
[26 49]
[27 48]
[28 47]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[51 83]
[52 82]
[53 81]
[54 80]
[55 77]
[56 76]
[57 75]
[58 74]
[60 73]
[61 72]
[62 71]
[63 70]
[120 153]
[121 152]
[122 151]
[127 146]
[128 145]
[130 143]
[131 142]
[132 141]
[133 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
