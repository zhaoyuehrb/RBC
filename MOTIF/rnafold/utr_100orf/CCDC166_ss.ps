%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCCCAAGAAAAAGCGCGGGCCGAGCGCAGGGAGCCAGCCAGGUGGUGCGGCGGCCGCGGGUGCCGAGCAGCCGCUAUCGGAGCGCGCGCAGUACC\
) } def
/len { sequence length } bind def

/coor [
[16.60649681 136.46907043]
[1.80229008 125.92488861]
[-12.79138756 129.39253235]
[-27.38506508 132.86018372]
[-41.97874451 136.32781982]
[-53.61641312 147.04580688]
[-67.78761292 142.46034241]
[-82.38128662 145.92797852]
[-96.97496796 149.39562988]
[-98.77238464 156.05104065]
[-102.42463684 161.84954834]
[-107.58872986 166.29182434]
[-113.79281616 169.00372314]
[-120.47921753 169.76774597]
[-127.05457306 168.54035950]
[-132.94245911 165.45362854]
[-137.63397217 160.80155945]
[-140.73159790 155.01219177]
[-155.72978210 155.24546814]
[-170.72798157 155.47874451]
[-185.72616577 155.71202087]
[-195.44923401 167.95930481]
[-210.78021240 171.04071045]
[-224.48027039 163.50132751]
[-230.08065796 148.90098572]
[-224.93705750 134.13354492]
[-211.47810364 126.17173767]
[-196.05870056 128.77487183]
[-185.95944214 140.71383667]
[-170.96125793 140.48056030]
[-155.96307373 140.24728394]
[-140.96487427 140.01400757]
[-122.73358154 124.69175720]
[-100.44261169 134.80195618]
[-85.84893036 131.33430481]
[-71.25525665 127.86666107]
[-60.66142273 117.39670563]
[-45.44638824 121.73414612]
[-30.85271072 118.26650238]
[-16.25903320 114.79885101]
[-1.66535473 111.33120728]
[2.16546798 100.36607361]
[10.95841885 92.59309387]
[22.54721451 90.08513641]
[33.99859619 93.59799194]
[42.35472870 102.34801483]
[57.13576126 99.79435730]
[71.91679382 97.24070740]
[86.69782257 94.68704987]
[97.56143951 85.88515472]
[110.74852753 90.53192139]
[125.52955627 87.97826385]
[140.31059265 85.42461395]
[155.09161377 82.87095642]
[169.83114624 80.08773804]
[184.52560425 77.07563782]
[199.22006226 74.06352997]
[212.59420776 61.52639771]
[229.01385498 67.50105286]
[243.60752869 64.03340149]
[257.95739746 59.66518402]
[272.00793457 54.41328812]
[286.05847168 49.16139221]
[300.10900879 43.90949249]
[310.32662964 31.83014107]
[324.95733643 34.62153244]
[339.00787354 29.36963844]
[353.05841064 24.11774063]
[365.77798462 12.90842056]
[380.07034302 22.02785683]
[375.26382446 38.28619766]
[358.31030273 38.16827774]
[344.25976562 43.42017365]
[330.20922852 48.67206955]
[320.99658203 60.37577438]
[305.36090088 57.96002960]
[291.31036377 63.21192932]
[277.25982666 68.46382141]
[263.20928955 73.71572113]
[261.94598389 76.40799713]
[259.44442749 78.71262360]
[255.86633301 80.11692047]
[251.57011414 80.18465424]
[247.07518005 78.62708282]
[232.48150635 82.09472656]
[225.78538513 92.30158234]
[213.52044678 95.23347473]
[202.23217773 88.75798798]
[187.53771973 91.77009583]
[172.84324646 94.78220367]
[166.81668091 99.28841400]
[157.64526367 97.65198517]
[142.86424255 100.20564270]
[128.08320618 102.75929260]
[113.30217743 105.31295013]
[102.43856049 114.11484528]
[89.25147247 109.46807861]
[74.47044373 112.02173615]
[59.68941498 114.57538605]
[44.90838242 117.12904358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[7 36]
[8 35]
[9 34]
[18 32]
[19 31]
[20 30]
[21 29]
[46 100]
[47 99]
[48 98]
[49 97]
[51 95]
[52 94]
[53 93]
[54 92]
[55 90]
[56 89]
[57 88]
[59 85]
[60 84]
[61 79]
[62 78]
[63 77]
[64 76]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
