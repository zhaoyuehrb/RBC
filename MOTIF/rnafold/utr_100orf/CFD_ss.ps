%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCAGUGUCUCAGCCACAGCGGCUUCACCAUGCACAGCUGGGAGCGCCUGGCAGUUCUGGUCCUCCUAGGAGCGGCCGCCUGCGGUGAGGAGGCCUGGGCCUGGGCGGCGCCGCCCCGUGGUCGGAUCC\
) } def
/len { sequence length } bind def

/coor [
[77.27508545 83.23571777]
[68.00270081 71.44492340]
[53.39007187 65.38013458]
[51.60452271 50.59294510]
[42.33213806 38.80214691]
[33.05975342 27.01135063]
[23.78736687 15.22055531]
[15.94328880 10.34806538]
[14.43862343 3.03703523]
[5.44945860 -8.97108364]
[-3.53970623 -20.97920227]
[-12.52887154 -32.98731995]
[-21.51803589 -44.99543762]
[-40.36187744 -51.97237015]
[-42.05660248 -71.17671967]
[-51.60695648 -82.74351501]
[-61.15730667 -94.31031036]
[-75.91012573 -100.02563477]
[-78.04707336 -114.76614380]
[-87.59742737 -126.33293915]
[-97.14777374 -137.89973450]
[-106.83509827 -149.35206604]
[-116.65800476 -160.68830872]
[-126.48091888 -172.02455139]
[-136.30383301 -183.36079407]
[-146.12673950 -194.69703674]
[-147.83457947 -179.79458618]
[-158.58357239 -169.33230591]
[-173.52673340 -168.02786255]
[-185.92590332 -176.46946716]
[-190.19000244 -190.85061646]
[-184.39628601 -204.68653870]
[-171.15722656 -211.73831177]
[-156.44435120 -208.82717896]
[-164.25137329 -221.63539124]
[-176.24461365 -222.15242004]
[-186.37167358 -228.37092590]
[-192.13998413 -238.62295532]
[-192.19694519 -250.26573181]
[-186.64530945 -260.36251831]
[-193.83404541 -273.52770996]
[-201.02278137 -286.69290161]
[-208.21151733 -299.85809326]
[-215.40025330 -313.02325439]
[-222.58898926 -326.18844604]
[-229.77772522 -339.35363770]
[-243.18229675 -347.75765991]
[-242.49096680 -362.63623047]
[-249.67970276 -375.80139160]
[-256.86843872 -388.96658325]
[-270.27301025 -397.37060547]
[-269.58169556 -412.24917603]
[-276.77041626 -425.41436768]
[-291.04733276 -433.48291016]
[-290.92764282 -449.88162231]
[-276.53445435 -457.74090576]
[-262.67425537 -448.97579956]
[-263.60522461 -432.60308838]
[-256.41650391 -419.43789673]
[-243.52610779 -411.97552490]
[-243.70324707 -396.15533447]
[-236.51452637 -382.99014282]
[-229.32579041 -369.82495117]
[-216.43537903 -362.36257935]
[-216.61253357 -346.54235840]
[-209.42379761 -333.37719727]
[-202.23506165 -320.21200562]
[-195.04632568 -307.04681396]
[-187.85758972 -293.88162231]
[-180.66885376 -280.71646118]
[-173.48011780 -267.55126953]
[-155.69160461 -263.54043579]
[-146.23722839 -247.57852173]
[-151.44314575 -229.44241333]
[-143.63612366 -216.63418579]
[-134.79049683 -204.51995850]
[-124.96758270 -193.18371582]
[-115.14467621 -181.84747314]
[-105.32176208 -170.51123047]
[-95.49884796 -159.17497253]
[-88.67474365 -156.15063477]
[-85.58097839 -147.45008850]
[-76.03063202 -135.88330078]
[-66.48027802 -124.31649780]
[-52.41056061 -119.42851257]
[-49.59051132 -103.86066437]
[-40.04016113 -92.29386902]
[-30.48980713 -80.72707367]
[-20.15294838 -80.65734863]
[-11.40763474 -74.74223328]
[-7.32781410 -64.76549530]
[-9.50991726 -53.98460388]
[-0.52075255 -41.97648621]
[8.46841240 -29.96836662]
[17.45757675 -17.96024895]
[26.44674301 -5.95212984]
[35.57816315 5.94817019]
[44.85054779 17.73896599]
[54.12293243 29.52976227]
[63.39531708 41.32056046]
[77.34472656 46.54198837]
[79.79349518 62.17253876]
[89.06587982 73.96333313]
[109.78028870 70.83996582]
[128.77589417 83.29432678]
[135.11096191 106.94224548]
[147.53320312 115.34986115]
[159.95542908 123.75746918]
[172.37767029 132.16508484]
[188.76473999 132.79464722]
[196.17265320 147.42524719]
[186.98080444 161.00619507]
[170.64497375 159.56655884]
[163.97006226 144.58732605]
[151.54782104 136.17971802]
[139.12557983 127.77209473]
[126.70333862 119.36448669]
[115.36709595 129.18739319]
[121.92126465 142.67971802]
[128.47543335 156.17204285]
[142.35226440 164.91079712]
[141.45240784 181.28523254]
[126.70156860 188.45074463]
[113.27413940 179.03607178]
[114.98310852 162.72621155]
[108.42893982 149.23388672]
[101.87477112 135.74156189]
[89.00437927 132.73477173]
[78.55123901 125.43782043]
[71.80966187 115.17456818]
[69.45501709 103.60079956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[4 100]
[5 99]
[6 98]
[7 97]
[9 96]
[10 95]
[11 94]
[12 93]
[13 92]
[15 88]
[16 87]
[17 86]
[19 84]
[20 83]
[21 82]
[22 80]
[23 79]
[24 78]
[25 77]
[26 76]
[34 75]
[35 74]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[48 63]
[49 62]
[50 61]
[52 59]
[53 58]
[106 117]
[107 116]
[108 115]
[109 114]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
