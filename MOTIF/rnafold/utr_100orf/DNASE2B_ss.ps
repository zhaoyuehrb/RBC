%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAAAGUGUCCUGCUGUGGCAUGAAAUAAAUGAAACAGAAAAUGAUGGCAAGACUGCUAAGAACAUCCUUUGCUUUGCUCUUCCUUGGCCUCUUUGGGGUGCUGGGGGCAGCAACAAUUUCAUGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[44.83314514 314.69006348]
[33.01473618 321.00891113]
[19.84226418 323.34896851]
[6.61594582 321.49362183]
[-0.16255884 334.87463379]
[-6.94106340 348.25567627]
[-13.71956825 361.63668823]
[-10.11278057 377.26907349]
[-20.19831657 389.74548340]
[-36.23941803 389.49514771]
[-45.93072128 376.71008301]
[-41.83789062 361.19787598]
[-27.10059547 354.85818481]
[-20.32209015 341.47717285]
[-13.54358578 328.09613037]
[-6.76508093 314.71511841]
[-17.86734772 302.41372681]
[-23.44272232 286.77050781]
[-22.61981964 270.14724731]
[-15.49552917 255.06510925]
[-3.12453461 243.82214355]
[12.63672352 238.14320374]
[29.40860748 238.91532898]
[35.55246353 225.23127747]
[41.69631958 211.54724121]
[47.84017181 197.86318970]
[53.98402786 184.17915344]
[60.12788391 170.49510193]
[66.27173615 156.81106567]
[72.41559601 143.12702942]
[78.55944824 129.44297791]
[72.91232300 124.34838867]
[68.44633484 118.19210052]
[65.35622406 111.24256134]
[63.77673340 103.80279541]
[63.77673340 96.19720459]
[65.35622406 88.75743866]
[68.44633484 81.80789948]
[72.91232300 75.65161133]
[78.55944824 70.55702209]
[72.41559601 56.87297821]
[66.27173615 43.18893433]
[60.12788391 29.50489044]
[45.62909317 23.81078339]
[39.59328461 9.84569645]
[45.11109924 -3.94159269]
[38.96724319 -17.62563515]
[32.82338715 -31.30967903]
[14.68646526 -42.60633850]
[17.28063202 -63.02993774]
[10.19030380 -76.24838257]
[3.09997654 -89.46682739]
[-3.99035096 -102.68526459]
[-11.08067894 -115.90370941]
[-25.29701042 -124.07854462]
[-25.05498123 -140.47590637]
[-10.60356617 -148.22760010]
[3.19085455 -139.35934448]
[2.13776517 -122.99404144]
[9.22809315 -109.77559662]
[16.31842041 -96.55715179]
[23.40874863 -83.33870697]
[30.49907494 -70.12026215]
[39.46340561 -68.94226074]
[46.96203232 -63.64683914]
[51.19668198 -55.34617615]
[51.07908249 -45.88995361]
[46.50743103 -37.45353317]
[52.65128708 -23.76949120]
[58.79513931 -10.08544827]
[72.76499939 -5.04772377]
[79.19067383 8.74232006]
[73.81192780 23.36103439]
[79.95578003 37.04507828]
[86.09963989 50.72912216]
[92.24349213 64.41316223]
[110.07028961 64.99748993]
[125.48207092 73.97596741]
[134.78285217 89.19540405]
[149.71694946 87.79078674]
[164.65103149 86.38616180]
[179.58512878 84.98153687]
[194.51921082 83.57691956]
[209.43580627 81.99732971]
[224.33287048 80.24300385]
[239.22993469 78.48867035]
[254.12698364 76.73434448]
[269.02404785 74.98001099]
[276.67340088 61.60863876]
[290.56707764 55.37818527]
[305.29125977 58.48676300]
[315.24246216 69.53717041]
[330.13949585 67.78284454]
[345.03656006 66.02851105]
[359.93362427 64.27418518]
[374.83068848 62.51985168]
[389.85397339 54.66253662]
[401.56307983 66.92357635]
[393.02258301 81.56928253]
[376.58502197 77.41690826]
[361.68795776 79.17124176]
[346.79089355 80.92556763]
[331.89382935 82.67990112]
[316.99676514 84.43422699]
[309.88488770 97.49404907]
[296.28567505 103.93807983]
[281.32470703 101.10565948]
[270.77838135 89.87706757]
[255.88131714 91.63140106]
[240.98425293 93.38572693]
[226.08720398 95.14006042]
[211.19013977 96.89438629]
[204.85600281 100.83772278]
[195.92382812 98.51100922]
[180.98974609 99.91562653]
[166.05564880 101.32025146]
[151.12156677 102.72487640]
[136.18746948 104.12949371]
[128.52865601 122.64292145]
[112.23751831 134.30494690]
[92.24349213 135.58683777]
[86.09963989 149.27087402]
[79.95578003 162.95492554]
[73.81192780 176.63896179]
[67.66807556 190.32301331]
[61.52421570 204.00704956]
[55.38035965 217.69110107]
[49.23650742 231.37513733]
[43.09265137 245.05918884]
[52.91063690 254.38177490]
[59.34421539 266.26843262]
[61.77204132 279.54141235]
[59.96888733 292.89044189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[31 121]
[40 76]
[41 75]
[42 74]
[43 73]
[46 70]
[47 69]
[48 68]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[79 118]
[80 117]
[81 116]
[82 115]
[83 114]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
