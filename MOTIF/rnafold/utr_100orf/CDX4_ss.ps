%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUACGGAAGCUGUCUUUUGGAGAAAGAAGCAGGCAUGUACCCGGGCACUCUCAUGAGCCCUGGGGGCGACGGCACAGCUGGGACAGGCGGCACAGGGG\
) } def
/len { sequence length } bind def

/coor [
[56.28133774 137.20309448]
[64.35017395 124.55817413]
[76.43152618 115.67241669]
[88.17881012 106.34497070]
[73.39778137 108.89862061]
[58.61674881 111.45227814]
[43.83572006 114.00592804]
[38.63371658 126.87814331]
[27.80753136 135.39509583]
[14.28779984 137.38887024]
[1.66658068 132.43908691]
[-6.75698519 121.95575714]
[-21.61028290 124.04848480]
[-36.46358109 126.14121246]
[-44.69404602 130.50608826]
[-51.81057739 128.06059265]
[-66.72177887 129.69038391]
[-81.63297272 131.32015991]
[-96.54417419 132.94993591]
[-111.45536804 134.57972717]
[-121.15363312 147.05847168]
[-136.84532166 148.94165039]
[-149.22084045 139.11199951]
[-150.93800354 123.40127563]
[-140.97807312 111.13037109]
[-125.25006104 109.57939911]
[-113.08515167 119.66852570]
[-98.17395020 118.03874207]
[-83.26275635 116.40895844]
[-68.35155487 114.77918243]
[-53.44036102 113.14939880]
[-38.55631256 111.28791809]
[-23.70301437 109.19518280]
[-8.84971523 107.10245514]
[-1.68631136 92.42289734]
[12.93196583 84.77244568]
[29.40281868 87.30393219]
[41.28206635 99.22489929]
[56.06309509 96.67124176]
[70.84412384 94.11759186]
[85.62516022 91.56394196]
[96.47628784 81.20764160]
[99.71655273 66.56179810]
[102.95682526 51.91595459]
[106.19709015 37.27011490]
[109.43735504 22.62427330]
[112.67762756 7.97843170]
[106.37847900 -3.40917754]
[109.50075531 -15.62703228]
[119.81051636 -22.16360855]
[123.50469971 -36.70159149]
[127.19888306 -51.23957825]
[122.23117065 -66.86820221]
[133.48051453 -78.80069733]
[149.37454224 -74.76193237]
[153.56285095 -58.90664291]
[141.73686218 -47.54539490]
[138.04267883 -33.00740814]
[134.34849548 -18.46942520]
[140.06707764 -1.95884013]
[127.32346344 11.21869850]
[124.08319855 25.86454010]
[120.84293365 40.51037979]
[117.60266113 55.15622330]
[114.36239624 69.80206299]
[111.12213135 84.44790649]
[116.54769135 89.62605286]
[132.82438660 105.16050720]
[147.30316162 101.24067688]
[158.47912598 89.23942566]
[174.39762878 93.18065643]
[178.68309021 109.00995636]
[166.92698669 120.44351196]
[151.22299194 115.71945190]
[136.74421692 119.63928223]
[135.35261536 127.00904846]
[146.72583008 136.78912354]
[132.56939697 141.74858093]
[131.17778015 149.11833191]
[143.23023987 158.04797363]
[155.28269958 166.97760010]
[167.33514404 175.90724182]
[182.49972534 172.09019470]
[196.54736328 178.96025085]
[202.84521484 193.27357483]
[198.41961670 208.27185059]
[185.36021423 216.87333679]
[169.83323669 215.01670837]
[159.17005920 203.57856750]
[158.40551758 187.95968628]
[146.35305786 179.03005981]
[134.30061340 170.10043335]
[122.24815369 161.17079163]
[128.54408264 174.78553772]
[118.21132660 185.65908813]
[104.65405273 192.07783508]
[89.69452667 193.17903137]
[75.34349823 188.81465149]
[63.52990723 179.57131958]
[55.84165192 166.69146729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 41]
[5 40]
[6 39]
[7 38]
[12 34]
[13 33]
[14 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[50 59]
[51 58]
[52 57]
[68 75]
[69 74]
[79 93]
[80 92]
[81 91]
[82 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
