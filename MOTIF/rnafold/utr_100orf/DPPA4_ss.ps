%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGGAGGAGACUUUGCAAAUAGCAAUCUUGGGGCAGGGGCCAUUUUGGAAGCAUGUUGCGAGGCUCCGCUUCUUCUACAAGUAUGGAGAAGGCAAAAGGCAAGGAGUGGACCUCCACAGAGAAGUCGAGGGAAGAGGAUCAGCAGGCUUCUA\
) } def
/len { sequence length } bind def

/coor [
[172.41398621 189.38970947]
[170.18014526 177.76582336]
[173.89765930 166.40159607]
[164.64686584 154.59384155]
[155.39608765 142.78608704]
[146.14530945 130.97834778]
[109.72364807 145.75769043]
[79.79994202 132.16229248]
[71.65509796 106.93062592]
[56.65814209 106.62857056]
[41.66118240 106.32650757]
[26.66422462 106.02445221]
[17.96376038 108.99369049]
[11.36913395 105.56228638]
[-3.61870074 104.95829773]
[-18.60653496 104.35430908]
[-33.59437180 103.75032043]
[-48.58220673 103.14633179]
[-63.57004166 102.54234314]
[-78.55787659 101.93835449]
[-93.54570770 101.33436584]
[-103.19767761 113.34043121]
[-117.89665222 117.31453705]
[-131.95097351 111.93495178]
[-140.04576111 99.46047211]
[-155.03358459 98.85648346]
[-165.05955505 107.03028870]
[-177.56504822 106.18492126]
[-185.85044861 97.32213593]
[-200.82307434 96.41645813]
[-215.79571533 95.51078033]
[-226.84634399 109.82569122]
[-244.11470032 114.64244843]
[-260.68734741 108.22704315]
[-270.04525757 93.30384064]
[-285.04220581 93.00178528]
[-300.03915405 92.69972992]
[-314.13461304 101.08129120]
[-328.30676270 92.83010101]
[-327.97653198 76.43428040]
[-313.48361206 68.76043701]
[-299.73712158 77.70276642]
[-284.74014282 78.00482941]
[-269.74319458 78.30688477]
[-263.88851929 67.59873962]
[-253.96475220 60.37153244]
[-241.83444214 58.05815125]
[-229.80712891 61.16196060]
[-220.19969177 69.14888763]
[-214.89002991 80.53814697]
[-199.91740417 81.44382477]
[-184.94476318 82.34950256]
[-169.72477722 73.66266632]
[-154.42959595 83.86865234]
[-139.44177246 84.47264099]
[-130.36946106 72.68997192]
[-115.92783356 68.45873260]
[-101.59630585 73.60272980]
[-92.94171906 86.34652710]
[-77.95388794 86.95051575]
[-62.96605301 87.55450439]
[-47.97821808 88.15849304]
[-32.99038315 88.76248169]
[-18.00254631 89.36647034]
[-3.01471162 89.97045898]
[11.97312355 90.57444763]
[26.96627998 91.02749634]
[41.96323776 91.32955170]
[56.96019745 91.63160706]
[71.95715332 91.93366241]
[76.68950653 64.60724640]
[106.97824860 44.86062241]
[109.97863770 30.16376495]
[112.97901917 15.46690464]
[115.97940826 0.77004457]
[118.97978973 -13.92681503]
[121.98017883 -28.62367439]
[124.98056030 -43.32053375]
[113.86134338 -54.01475906]
[110.31122589 -69.02809906]
[115.46304321 -83.56983948]
[127.67287445 -92.99977112]
[143.04460144 -94.30883789]
[156.67315674 -87.07932281]
[164.20973206 -73.61813354]
[163.24942017 -58.22068787]
[154.09866333 -45.80025482]
[139.67742920 -40.32014847]
[136.67703247 -25.62328911]
[133.67665100 -10.92642975]
[130.67626953 3.77043009]
[127.67588043 18.46728897]
[124.67549896 33.16415024]
[121.67510986 47.86100769]
[134.66549683 55.36100769]
[145.89315796 45.41416931]
[148.29315186 29.55164909]
[162.26277161 21.66307640]
[177.08569336 27.79988861]
[181.39105225 43.25444794]
[171.87614441 56.17134094]
[155.83999634 56.64183044]
[144.61233521 66.58866882]
[151.71688843 79.80023193]
[158.82078552 93.01062775]
[173.30967712 89.12834167]
[187.79856873 85.24605560]
[195.48266602 71.43553925]
[210.70433044 67.18392181]
[224.43283081 75.01360321]
[228.52328491 90.27937317]
[220.54888916 103.92432404]
[205.24072266 107.85314941]
[191.68084717 99.73493958]
[177.19197083 103.61722565]
[162.70307922 107.49951172]
[157.95304871 121.72756195]
[167.20384216 133.53530884]
[176.45462036 145.34306335]
[185.70539856 157.15081787]
[204.54409790 158.67405701]
[216.13595581 173.19755554]
[213.53468323 191.27587891]
[223.25341797 202.70156860]
[232.97213745 214.12724304]
[242.69087219 225.55293274]
[252.40960693 236.97862244]
[262.12832642 248.40429688]
[271.84707642 259.82998657]
[286.91003418 257.17398071]
[301.18572998 262.37982178]
[310.87460327 273.95532227]
[313.45129395 288.72747803]
[308.32250977 302.71179199]
[318.04122925 314.13748169]
[333.81246948 315.15921021]
[344.17901611 327.08862305]
[342.99060059 342.84814453]
[330.95227051 353.08798218]
[315.20617676 351.73303223]
[305.09417725 339.58709717]
[306.61553955 323.85623169]
[296.89682007 312.43054199]
[282.27087402 315.24966431]
[268.10336304 310.33673096]
[258.23193359 298.91650391]
[255.38349915 283.99057007]
[260.42138672 269.54870605]
[250.70265198 258.12301636]
[240.98391724 246.69734192]
[231.26518250 235.27166748]
[221.54646301 223.84597778]
[211.82772827 212.42028809]
[202.10899353 200.99461365]
[190.74084473 202.56332397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 120]
[4 119]
[5 118]
[6 117]
[9 70]
[10 69]
[11 68]
[12 67]
[14 66]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[25 55]
[26 54]
[29 52]
[30 51]
[31 50]
[35 44]
[36 43]
[37 42]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[95 103]
[96 102]
[105 116]
[106 115]
[107 114]
[123 154]
[124 153]
[125 152]
[126 151]
[127 150]
[128 149]
[129 148]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
