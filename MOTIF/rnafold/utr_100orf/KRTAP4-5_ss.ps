%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAAUCCACCCAGAACCUCCACCCUCUGACACCAUGGUCAGCUCCUGUUGUGGCUCUGUCAGCUCUGAGCAGAGCUGUGGCCUGGAGAACUGCUGCCGCCCCAGCUGCUGCCAGACCACCUGCUGCAGGACCA\
) } def
/len { sequence length } bind def

/coor [
[32.87719727 213.01237488]
[23.26564407 224.52836609]
[10.36801720 232.18678284]
[-4.34367895 235.11355591]
[-19.19040108 232.97465515]
[-32.47769165 226.01420593]
[-42.68907928 215.02659607]
[-48.65913391 201.26583862]
[-49.70650101 186.30244446]
[-45.71163559 171.84419250]
[-37.13047791 159.54119873]
[-24.94012070 150.79649353]
[-39.93611908 151.14295959]
[-54.93211746 151.48942566]
[-68.54989624 159.54341125]
[-81.45248413 152.10215759]
[-96.44848633 152.44862366]
[-111.44448090 152.79508972]
[-115.04814911 164.18426514]
[-121.71780396 174.07122803]
[-130.89863586 181.65319824]
[-141.83250427 186.31828308]
[-153.62046814 187.69490051]
[-165.29679871 185.68133545]
[-175.90800476 180.45315552]
[-184.59075928 172.44798279]
[-190.64207458 162.32885742]
[-193.57629395 150.92938232]
[-208.54028320 149.89071655]
[-223.50427246 148.85205078]
[-238.46827698 147.81338501]
[-253.43226624 146.77471924]
[-265.18856812 157.33714294]
[-280.96560669 156.40954590]
[-291.40316772 144.54223633]
[-290.30880737 128.77587891]
[-278.33178711 118.46437836]
[-262.57791138 119.72537231]
[-252.39360046 131.81071472]
[-237.42961121 132.84938049]
[-222.46560669 133.88804626]
[-207.50161743 134.92671204]
[-192.53762817 135.96537781]
[-184.25335693 119.67575073]
[-169.69538879 108.54545593]
[-151.70529175 104.80167389]
[-133.81828308 109.22446442]
[-119.56855011 120.98470306]
[-111.79094696 137.79908752]
[-96.79495239 137.45262146]
[-81.79895020 137.10615540]
[-69.25379181 129.07695007]
[-55.27858734 136.49342346]
[-40.28258896 136.14695740]
[-25.28659058 135.80049133]
[-18.01371193 130.94299316]
[-8.29107761 132.41987610]
[5.69600582 127.00125122]
[19.68309021 121.58262634]
[33.67017365 116.16400146]
[38.81708145 110.76604462]
[48.04342651 110.78585815]
[62.15193558 105.69174957]
[76.26044464 100.59764099]
[90.36895752 95.50353241]
[104.09086609 89.44471741]
[117.36029816 82.45027924]
[130.62973022 75.45584106]
[143.89916992 68.46141052]
[150.10026550 61.62970734]
[157.55685425 61.46267700]
[170.98429871 54.77660370]
[184.41175842 48.09052658]
[197.83920288 41.40445328]
[211.18853760 34.56373978]
[224.45796204 27.56930161]
[237.72740173 20.57486534]
[250.99684143 13.58042812]
[264.26626587 6.58599043]
[272.86642456 -6.69361162]
[287.73321533 -5.78364611]
[301.00265503 -12.77808380]
[314.27206421 -19.77252007]
[318.19711304 -25.27272034]
[323.52603149 -27.55355453]
[328.31982422 -26.76746368]
[341.89813232 -33.14160919]
[355.40188599 -39.67215729]
[368.82934570 -46.35823059]
[375.27050781 -61.05146408]
[390.81054688 -65.03723145]
[403.52850342 -55.25799942]
[403.66821289 -39.21555328]
[391.12252808 -29.21628761]
[375.51541138 -32.93078232]
[362.08798218 -26.24470711]
[357.46109009 -20.39488029]
[348.27227783 -19.56330872]
[334.69396973 -13.18916321]
[321.26651001 -6.50308800]
[307.99707031 0.49134946]
[294.72766113 7.48578691]
[287.07659912 20.26510048]
[271.26071167 19.85542297]
[257.99127197 26.84986115]
[244.72183228 33.84429932]
[231.45240784 40.83873367]
[218.18296814 47.83317184]
[213.69242859 53.78831100]
[204.52528381 54.83190155]
[191.09782410 61.51797867]
[177.67037964 68.20405579]
[164.24293518 74.89012909]
[150.89360046 81.73084259]
[137.62416077 88.72528076]
[124.35473633 95.71971130]
[111.08530426 102.71414948]
[124.82846832 108.72459412]
[130.49443054 122.61332703]
[124.87732697 136.52188110]
[111.15537262 142.58059692]
[97.09267426 137.36137390]
[90.64611053 123.81729889]
[95.46306610 109.61204529]
[81.35455322 114.70615387]
[67.24604034 119.80026245]
[53.13753128 124.89436340]
[39.08879852 130.15107727]
[25.10171509 135.56970215]
[11.11463070 140.98832703]
[-2.87245250 146.40695190]
[11.73409557 149.81997681]
[24.37066460 157.90188599]
[33.59504318 169.73027039]
[38.35445786 183.95518494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 55]
[13 54]
[14 53]
[16 51]
[17 50]
[18 49]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[57 131]
[58 130]
[59 129]
[60 128]
[62 127]
[63 126]
[64 125]
[65 124]
[66 117]
[67 116]
[68 115]
[69 114]
[71 113]
[72 112]
[73 111]
[74 110]
[75 108]
[76 107]
[77 106]
[78 105]
[79 104]
[81 102]
[82 101]
[83 100]
[86 99]
[87 98]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
