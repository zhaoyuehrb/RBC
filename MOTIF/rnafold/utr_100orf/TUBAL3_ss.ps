%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUACUACAGGGCAGGAAGGGCACGUUCUCAUCAGCAUGAGGGAGUGCCUUUCCAUCCACAUCGGUCAAGCUGGCAUCCAGAUUGGGGACGCCUGCUGGGAACUCUAUUGCCUGGAACAUGGAAUCCAGCCAAAUG\
) } def
/len { sequence length } bind def

/coor [
[99.30904388 158.36947632]
[91.99278259 157.82177734]
[84.80300903 156.36067200]
[77.85330200 154.00923157]
[71.25344849 150.80462646]
[65.10769653 146.79745483]
[59.51314163 142.05102539]
[54.55815125 136.64030457]
[50.32100677 130.65080261]
[46.86863327 124.17709351]
[44.25557709 117.32147217]
[42.52311325 110.19221497]
[41.69860458 102.90196228]
[26.74551392 101.71662140]
[14.78629017 111.69734192]
[-0.36138698 110.28223419]
[-9.80277538 98.81943512]
[-24.75586891 97.63409424]
[-39.70896149 96.44876099]
[-54.66205215 95.26342773]
[-69.61514282 94.07808685]
[-84.56823730 92.89275360]
[-99.52133179 91.70742035]
[-114.47442627 90.52207947]
[-129.42752075 89.33674622]
[-144.38061523 88.15141296]
[-158.74903870 94.77399445]
[-170.82510376 86.05515289]
[-185.77819824 84.86981201]
[-200.73127747 83.68447876]
[-215.68437195 82.49914551]
[-230.63746643 81.31380463]
[-245.59056091 80.12847137]
[-260.54364014 78.94313812]
[-275.10855103 86.47945404]
[-288.76980591 77.40740967]
[-287.47390747 61.05954361]
[-272.55395508 54.25313950]
[-259.35830688 63.99004364]
[-244.40522766 65.17537689]
[-229.45213318 66.36071777]
[-214.49903870 67.54605103]
[-199.54594421 68.73138428]
[-184.59284973 69.91671753]
[-169.63975525 71.10205841]
[-156.34086609 64.39469147]
[-143.19526672 73.19831848]
[-128.24218750 74.38365173]
[-113.28908539 75.56899261]
[-98.33599854 76.75432587]
[-83.38290405 77.93965912]
[-68.42980957 79.12500000]
[-53.47671890 80.31033325]
[-38.52362442 81.49566650]
[-23.57053185 82.68100739]
[-8.61744022 83.86634064]
[2.51200438 74.03419495]
[17.69345284 75.02328491]
[27.93084908 86.76353455]
[42.88394165 87.94886780]
[49.87017441 70.09223175]
[62.26542282 55.46265030]
[78.73223114 45.63865280]
[97.49384308 41.68025208]
[116.52586365 44.01455688]
[133.77473450 52.38969803]
[143.95364380 41.37198639]
[154.00738525 30.23994827]
[163.93469238 18.99501038]
[167.12446594 0.89889419]
[183.90429688 -4.11536598]
[193.57493591 -15.58178329]
[203.24557495 -27.04820061]
[206.22805786 -42.58574677]
[220.34806824 -47.32651520]
[230.01870728 -58.79293442]
[239.68934631 -70.25935364]
[242.67182922 -85.79689789]
[256.79183960 -90.53766632]
[266.46246338 -102.00408173]
[276.13311768 -113.47050476]
[273.27825928 -128.84529114]
[281.01901245 -142.43258667]
[295.70040894 -147.81690979]
[310.39031982 -142.45593262]
[318.15264893 -128.88093567]
[315.32226562 -113.50164032]
[303.23556519 -103.57966614]
[287.59951782 -103.79986572]
[277.92889404 -92.33344269]
[268.25823975 -80.86702728]
[265.96746826 -66.14963531]
[251.15576172 -60.58871078]
[241.48512268 -49.12229538]
[231.81448364 -37.65587616]
[229.52369690 -22.93848610]
[214.71199036 -17.37756157]
[205.04135132 -5.91114330]
[195.37071228 5.55527401]
[196.07020569 17.68441391]
[188.03404236 27.32566261]
[175.17962646 28.92231560]
[165.25231934 40.16725540]
[163.16607666 47.32369232]
[154.97135925 51.55088425]
[144.79244995 62.56859970]
[154.87335205 80.09047699]
[158.37356567 100.00000000]
[154.87335205 119.90952301]
[144.79244995 137.43139648]
[154.97135925 148.44911194]
[165.15025330 159.46682739]
[180.19812012 164.35276794]
[183.15159607 178.95161438]
[193.33049011 189.96932983]
[203.50939941 200.98704529]
[213.68829346 212.00476074]
[223.86718750 223.02247620]
[239.26084900 221.06932068]
[252.84638977 228.56684875]
[259.39987183 242.63211060]
[256.40136719 257.85671997]
[245.00386047 268.38650513]
[229.58992004 270.17254639]
[216.08651733 262.52807617]
[209.68598938 248.39254761]
[212.84948730 233.20137024]
[202.67057800 222.18365479]
[192.49168396 211.16593933]
[182.31278992 200.14822388]
[172.13388062 189.13050842]
[157.81408691 185.03263855]
[154.13253784 169.64572144]
[143.95364380 158.62802124]
[133.77473450 147.61030579]
[127.53585815 151.47087097]
[120.86199188 154.51835632]
[113.85856628 156.70462036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 60]
[14 59]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[66 106]
[67 105]
[68 103]
[69 102]
[71 99]
[72 98]
[73 97]
[75 95]
[76 94]
[77 93]
[79 91]
[80 90]
[81 89]
[110 135]
[111 134]
[112 133]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
