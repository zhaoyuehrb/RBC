%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACCGAAUUGGACAAAAUCUUUCUGAUUCUGGCAAUAGCAGAAUUCAUCAUCAGCAUGCUGGGGAAUGUGUUCAUUGGACUGGUAAACUGCUCUG\
) } def
/len { sequence length } bind def

/coor [
[84.64707184 162.93618774]
[65.79189301 155.01345825]
[50.34627151 141.60748291]
[39.84969711 124.05444336]
[25.37092018 127.97427368]
[10.89214420 131.89410400]
[-3.58663106 135.81393433]
[-8.72710609 140.41769409]
[-14.54674435 141.43824768]
[-19.08803177 139.49726868]
[-33.78249359 142.50936890]
[-48.47695541 145.52146912]
[-63.17141724 148.53358459]
[-77.86588287 151.54568481]
[-92.56034088 154.55778503]
[-107.25480652 157.56990051]
[-121.94926453 160.58200073]
[-127.41786957 175.00759888]
[-139.83099365 184.16827393]
[-155.22767639 185.14085388]
[-168.69487000 177.61502075]
[-175.93525696 163.99223328]
[-174.63844299 148.61947632]
[-165.21826172 136.40213013]
[-150.68061829 131.23870850]
[-135.66445923 134.77685547]
[-124.96137238 145.88754272]
[-110.26691437 142.87544250]
[-95.57244873 139.86332703]
[-80.87798309 136.85122681]
[-66.18352509 133.83911133]
[-51.48906326 130.82701111]
[-36.79460144 127.81490326]
[-22.10013771 124.80280304]
[-7.50645971 121.33515167]
[6.97231579 117.41532898]
[21.45109177 113.49549866]
[35.92986679 109.57566833]
[35.22631454 98.97769928]
[36.26396179 88.40721893]
[39.01490784 78.14836121]
[43.40521240 68.47690582]
[49.31685638 59.65282822]
[56.59092712 51.91333389]
[65.03188324 45.46646500]
[74.41282654 40.48553085]
[84.48159027 37.10441589]
[94.96750641 35.41401672]
[105.58869934 35.45976639]
[116.05966187 37.24043655]
[126.09892273 40.70816422]
[135.43661499 45.76972961]
[143.82171631 52.28907394]
[151.02883911 60.09094620]
[156.86424255 68.96562195]
[161.17106628 78.67453766]
[163.83354187 88.95671844]
[164.78009033 99.53574371]
[179.69128418 101.16552734]
[194.60247803 102.79531097]
[209.51368713 104.42509460]
[224.48466492 105.35763550]
[239.48284912 105.59091949]
[254.48103333 105.82419586]
[269.47921753 106.05747223]
[284.47741699 106.29074860]
[299.47558594 106.52402496]
[311.71588135 94.14587402]
[328.78732300 94.35680389]
[340.25808716 106.54534912]
[355.25628662 106.31207275]
[370.25448608 106.07879639]
[385.25265503 105.84552002]
[399.04003906 96.96632385]
[413.49758911 104.70655060]
[413.75262451 121.10371399]
[399.54278564 129.28982544]
[385.48593140 120.84370422]
[370.48776245 121.07698059]
[355.48956299 121.31025696]
[340.49136353 121.54353333]
[332.82531738 132.02751160]
[320.31671143 136.19137573]
[307.52230835 132.27937317]
[299.24230957 121.52220917]
[284.24414062 121.28893280]
[269.24594116 121.05565643]
[254.24775696 120.82238007]
[239.24957275 120.58910370]
[224.25138855 120.35582733]
[221.39662170 122.70216370]
[217.20205688 123.68212128]
[212.37228394 122.65317535]
[207.88389587 119.33628845]
[192.97270203 117.70651245]
[178.06150818 116.07672882]
[163.15029907 114.44694519]
[155.49935913 133.41403198]
[142.31671143 149.05070496]
[124.91632843 159.79843140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 38]
[5 37]
[6 36]
[7 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[58 97]
[59 96]
[60 95]
[61 94]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
