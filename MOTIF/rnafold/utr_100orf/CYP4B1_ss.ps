%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAUGCAUGGGUCCAGAGUAUAAAGGAACCCAGGAGCAGCUGAAGGCAGGUCAGAUGAAGGCUAGGUGGCUGGAACUGCAACCAUGGUGCCCAGCUUCCUCUCCCUGAGCUUCUCCUCCUUGGGCCUGUGGGCUUCUGGGCUGAUCUUGGUCUUAGGCUUUCUCAAGCUCAUCCACCUGCUGC\
) } def
/len { sequence length } bind def

/coor [
[2.58369899 236.81745911]
[-10.48161030 234.01081848]
[-20.67530632 245.01484680]
[-24.37752724 260.39678955]
[-38.70281982 264.47543335]
[-48.89651489 275.47946167]
[-59.09020996 286.48345947]
[-62.64299774 306.31118774]
[-81.31897736 311.26928711]
[-91.13314056 322.61312866]
[-100.94729614 333.95693970]
[-110.76145172 345.30078125]
[-120.57561493 356.64459229]
[-130.29310608 368.07131958]
[-139.91320801 379.58016968]
[-134.55766296 393.97509766]
[-137.13290405 409.11654663]
[-146.94621277 420.93157959]
[-161.35784912 426.24197388]
[-176.49114990 423.61929321]
[-188.27536011 413.76898193]
[-193.54055786 399.34078979]
[-190.87043762 384.21575928]
[-180.98326111 372.46249390]
[-166.53862000 367.24255371]
[-151.42205811 369.96005249]
[-141.80194092 358.45123291]
[-139.92012024 351.28631592]
[-131.91943359 346.83044434]
[-122.10527802 335.48660278]
[-112.29112244 324.14279175]
[-102.47695923 312.79898071]
[-92.66280365 301.45513916]
[-94.31404877 291.34289551]
[-90.02550507 281.79583740]
[-80.99794769 276.07815552]
[-70.09423828 276.28976440]
[-59.90053940 265.28576660]
[-49.70684433 254.28172302]
[-46.73374557 239.68685913]
[-31.67933083 234.82115173]
[-21.48563385 223.81712341]
[-25.18770790 207.83499146]
[-18.57547188 192.63998413]
[-4.06949711 184.29026794]
[12.72081757 186.24284363]
[22.72618675 175.06730652]
[32.73155594 163.89178467]
[42.73692703 152.71624756]
[52.74229431 141.54071045]
[62.74766541 130.36517334]
[72.75303650 119.18963623]
[69.73482513 113.95200348]
[67.71240234 108.25532532]
[66.75231171 102.28702545]
[66.88613892 96.24348450]
[68.10948181 90.32353210]
[70.38208771 84.72196198]
[73.62918091 79.62306976]
[77.74393463 75.19461823]
[82.59095764 71.58232117]
[77.83474731 57.35634232]
[63.97226715 50.25215912]
[59.35144424 35.75724030]
[66.20962524 22.58526611]
[61.45341110 8.35928822]
[56.69719696 -5.86668825]
[44.98337936 -16.50139999]
[48.28584671 -31.02527618]
[43.52963257 -45.25125122]
[38.77341843 -59.47723007]
[34.01720428 -73.70320892]
[29.26098824 -87.92918396]
[24.50477409 -102.15515900]
[10.43848801 -114.02243805]
[14.58193874 -131.06524658]
[9.58484173 -145.20840454]
[4.58774471 -159.35157776]
[-10.32498932 -163.63992310]
[-19.84244537 -175.89544678]
[-20.30496788 -191.40562439]
[-11.53470612 -204.20648193]
[3.09599471 -209.37583923]
[17.96133041 -204.92596436]
[27.34527779 -192.56791687]
[27.63951683 -177.05363464]
[18.73090553 -164.34866333]
[23.72800255 -150.20550537]
[28.72509956 -136.06234741]
[39.51165390 -130.55566406]
[43.78272629 -118.79523468]
[38.73075104 -106.91137695]
[43.48696518 -92.68540192]
[48.24317932 -78.45941925]
[52.99939346 -64.23344421]
[57.75561142 -50.00746918]
[62.51182556 -35.78149033]
[73.88544464 -26.16431618]
[70.92317200 -10.62290287]
[75.67938995 3.60307407]
[80.43560028 17.82905006]
[93.83686829 24.22762299]
[98.86299896 38.58703232]
[92.06072235 52.60012817]
[96.81694031 66.82610321]
[119.81689453 73.20578766]
[132.65185547 93.32946777]
[147.64698792 93.71150970]
[162.64212036 94.09355164]
[177.63725281 94.47560120]
[192.63238525 94.85764313]
[207.62751770 95.23968506]
[222.62265015 95.62173462]
[230.16230774 80.21506500]
[243.62733459 69.67882538]
[260.28695679 66.08857727]
[276.78912354 70.11734772]
[289.83496094 80.91012573]
[296.83825684 96.26471710]
[311.83773804 96.13735962]
[326.83718872 96.01000214]
[340.57116699 88.15580750]
[353.36367798 95.78476715]
[368.36312866 95.65740204]
[383.36257935 95.53004456]
[398.36206055 95.40267944]
[413.36151123 95.27532196]
[430.22866821 84.26354218]
[446.64489746 94.45581055]
[461.63137817 93.81919098]
[475.09072876 85.50316620]
[488.13491821 92.69333649]
[503.12139893 92.05671692]
[518.10791016 91.42009735]
[533.09436035 90.78347778]
[546.63793945 81.53664398]
[561.29846191 88.88517761]
[561.99444580 105.26955414]
[548.00994873 113.83491516]
[533.73101807 105.76996613]
[518.74450684 106.40658569]
[503.75802612 107.04319763]
[488.77154541 107.67981720]
[476.38412476 115.95030975]
[462.26800537 108.80567169]
[447.28152466 109.44229126]
[441.05416870 117.57890320]
[431.16473389 121.00489807]
[420.81243896 118.35568237]
[413.48886108 110.27478027]
[398.48941040 110.40214539]
[383.48995972 110.52950287]
[368.49047852 110.65686035]
[353.49102783 110.78422546]
[340.82992554 118.62931061]
[326.96453857 111.00946045]
[311.96508789 111.13681793]
[296.96563721 111.26418304]
[292.39505005 123.44964600]
[283.92944336 133.37648010]
[272.56292725 139.84536743]
[259.64184570 142.06506348]
[246.70518494 139.74909973]
[235.30131531 133.15257263]
[226.80268860 123.04420471]
[222.24061584 110.61686707]
[207.24546814 110.23482513]
[192.25033569 109.85277557]
[177.25520325 109.47073364]
[162.26007080 109.08869171]
[147.26493835 108.70664215]
[132.26980591 108.32460022]
[125.31997681 121.66882324]
[113.20948029 130.59655762]
[98.40664673 133.28814697]
[83.92856598 129.19500732]
[73.92320251 140.37054443]
[63.91783142 151.54608154]
[53.91246033 162.72161865]
[43.90709305 173.89714050]
[33.90172195 185.07267761]
[23.89635277 196.24821472]
[27.79627991 209.48219299]
[24.66682434 222.80798340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[5 39]
[6 38]
[7 37]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 27]
[15 26]
[46 182]
[47 181]
[48 180]
[49 179]
[50 178]
[51 177]
[52 176]
[61 105]
[62 104]
[65 101]
[66 100]
[67 99]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[76 89]
[77 88]
[78 87]
[107 172]
[108 171]
[109 170]
[110 169]
[111 168]
[112 167]
[113 166]
[119 158]
[120 157]
[121 156]
[123 154]
[124 153]
[125 152]
[126 151]
[127 150]
[129 146]
[130 145]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
