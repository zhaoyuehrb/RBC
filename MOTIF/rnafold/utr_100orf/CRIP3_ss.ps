%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCUGGACCUGUCCGCGUUGCCAGCAACCUGUUUUCUUCGCUGAGAAGGUGAGCUCCCUGGGCAAGAACUGGCACCGCUUCUGCCUGAAAUGUGAGC\
) } def
/len { sequence length } bind def

/coor [
[105.42677307 172.82958984]
[90.24350739 178.01107788]
[76.80398560 169.24986267]
[75.41786194 153.26679993]
[87.14846039 142.32272339]
[89.00994110 127.43868256]
[90.87142181 112.55463409]
[77.37138367 106.01636505]
[66.84757996 116.70513153]
[56.32377625 127.39389038]
[52.72863388 143.39410400]
[36.99597168 148.02177429]
[25.31020164 136.51635742]
[29.69264412 120.71362305]
[45.63501740 116.87008667]
[56.15881729 106.18132782]
[66.68262482 95.49256897]
[71.93451691 81.44203186]
[71.00197601 66.47104645]
[70.06942749 51.50006104]
[61.48914337 38.20760727]
[68.42022705 25.02393150]
[67.48768616 10.05294800]
[66.55513763 -4.91803646]
[65.62259674 -19.88902092]
[64.69004822 -34.86000443]
[63.75750351 -49.83098984]
[53.92314529 -38.50467300]
[39.58986664 -34.08233261]
[25.08345795 -37.89862823]
[14.78196144 -48.80179977]
[11.79437447 -63.50126648]
[17.02235222 -77.56072235]
[28.88808823 -86.73701477]
[43.81049728 -88.26073456]
[57.28598785 -81.67201996]
[65.24790192 -68.95847321]
[68.48817444 -83.60430908]
[71.72843933 -98.25015259]
[74.96870422 -112.89599609]
[78.20897675 -127.54183960]
[77.00209045 -136.77958679]
[81.78447723 -142.58943176]
[85.47866058 -157.12741089]
[89.17284393 -171.66540527]
[85.07254791 -186.94604492]
[95.70599365 -197.37577820]
[99.40017700 -211.91375732]
[97.91349030 -218.65237427]
[99.88182068 -224.22331238]
[103.80249023 -227.22650146]
[108.39334869 -241.50669861]
[100.95252991 -255.44978333]
[105.63020325 -270.54595947]
[119.65118408 -277.83895874]
[134.69708252 -273.00195312]
[141.84141541 -258.90463257]
[136.84559631 -243.91073608]
[122.67354584 -236.91583252]
[118.08268738 -222.63563538]
[113.93816376 -208.21957397]
[110.24398041 -193.68159485]
[114.60850525 -179.44079590]
[103.71083069 -167.97122192]
[100.01664734 -153.43322754]
[96.32246399 -138.89524841]
[92.85481262 -124.30156708]
[89.61454773 -109.65572357]
[86.37428284 -95.00988770]
[83.13401031 -80.36404419]
[79.89374542 -65.71820068]
[78.72848511 -50.76353455]
[79.66103363 -35.79254913]
[80.59357452 -20.82156563]
[81.52612305 -5.85058069]
[82.45866394 9.12040329]
[83.39121246 24.09138680]
[91.90479279 36.31301498]
[85.04041290 50.56751633]
[85.97295380 65.53849792]
[86.90550232 80.50948334]
[143.35144043 92.00257874]
[154.82543945 101.66423798]
[166.29942322 111.32589722]
[182.34233093 111.39340210]
[192.17871094 124.06719971]
[188.26293945 139.62503052]
[173.59884644 146.13226318]
[159.43548584 138.59710693]
[156.63777161 122.79988098]
[145.16377258 113.13822937]
[133.68978882 103.47657013]
[126.70620728 106.21145630]
[136.22421265 117.80487823]
[128.13928223 130.43951416]
[113.62470245 126.65441895]
[112.73905182 111.68122864]
[105.75547028 114.41611481]
[103.89398956 129.30017090]
[102.03250885 144.18421936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 17]
[9 16]
[10 15]
[18 81]
[19 80]
[20 79]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[43 66]
[44 65]
[45 64]
[47 62]
[48 61]
[51 60]
[52 59]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
