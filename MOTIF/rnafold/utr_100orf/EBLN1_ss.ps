%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:21:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCCGCCCAAGAAACAACCCACAGACCAGCAGCCCACAAGACAGUACAAAGGAUGGGAGCAGCUUCCAUUACUUUCAAGGGAGAUUUGAGCUCUCUG\
) } def
/len { sequence length } bind def

/coor [
[73.26822662 123.80913544]
[65.68537140 110.19650269]
[50.73070145 111.36176300]
[35.77603149 112.52702332]
[20.82135963 113.69227600]
[19.57240105 128.67347717]
[15.93632889 143.26028442]
[10.00732708 157.07489014]
[1.93897116 169.75944519]
[-8.05974865 180.98538208]
[-19.72984314 190.46192932]
[-32.76902771 197.94363403]
[-46.83955383 203.23669434]
[-61.57696533 206.20399475]
[-76.59952545 206.76869202]
[-91.51811218 204.91615295]
[-105.94629669 200.69435120]
[-119.51036835 194.21266174]
[-131.85896301 185.63897705]
[-142.67224121 175.19534302]
[-151.67010498 163.15231323]
[-158.61947632 149.82180786]
[-163.34037781 135.54913330]
[-165.71051025 120.70397949]
[-165.66847229 105.67086792]
[-163.21536255 90.83920288]
[-158.41473389 76.59314728]
[-151.39091492 63.30171204]
[-142.32585144 51.30918503]
[-131.45434570 40.92619324]
[-119.05799103 32.42168808]
[-105.45789337 26.01594925]
[-91.00631714 21.87490463]
[-76.07760620 20.10581779]
[-61.05844116 20.75451088]
[-46.33785248 23.80418205]
[-32.29714584 29.17583656]
[-19.30000305 36.73033524]
[-7.68308544 46.27200317]
[2.25270271 57.55368042]
[10.25000000 70.28314972]
[16.10165787 84.13069153]
[19.65610313 98.73760986]
[34.61077499 97.57234955]
[49.56544495 96.40708923]
[64.52011108 95.24183655]
[69.53391266 81.20426178]
[79.83020020 70.42565918]
[93.62371063 64.77493286]
[108.52280426 65.23184967]
[121.94412994 71.71718597]
[133.41812134 62.05553055]
[144.89210510 52.39387512]
[156.36608887 42.73221970]
[167.68844604 32.89329147]
[178.85639954 22.87946701]
[190.02436829 12.86564541]
[201.19232178 2.85182333]
[212.36029053 -7.16199875]
[223.52824402 -17.17582130]
[234.69621277 -27.18964386]
[245.86416626 -37.20346451]
[253.62042236 -52.27916718]
[270.25411987 -48.99939728]
[271.70718384 -32.10783386]
[255.87799072 -26.03550339]
[244.71003723 -16.02168083]
[233.54206848 -6.00785923]
[222.37411499 4.00596285]
[211.20614624 14.01978493]
[200.03817749 24.03360748]
[188.87022400 34.04742813]
[177.70225525 44.06125259]
[174.77209473 50.99231339]
[166.02775574 54.20620728]
[154.55375671 63.86786270]
[143.07977295 73.52951813]
[131.60578918 83.19117737]
[135.61610413 96.40062714]
[134.32978821 110.14535522]
[127.93811798 122.38132477]
[137.42016602 134.00418091]
[146.90222168 145.62704468]
[156.38426208 157.24989319]
[165.86630249 168.87275696]
[175.34835815 180.49560547]
[190.98590088 180.53085327]
[202.90890503 190.64894104]
[205.48771667 206.07241821]
[197.50466919 219.51879883]
[182.72914124 224.63911438]
[168.13766479 219.01568604]
[160.61988831 205.30375671]
[163.72549438 189.97766113]
[154.24345398 178.35479736]
[144.76139832 166.73194885]
[135.27935791 155.10908508]
[125.79730988 143.48623657]
[116.31526184 131.86337280]
[101.23241425 135.77630615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[51 78]
[52 77]
[53 76]
[54 75]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
