%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGUACCUGAGCGAGUGUCGCCUGCGACUGGAGAAAGGCUUUAUCUUGGACGGGGUGGCUGUGAGCACCGCUGCCCGCGCUUAUGGGCGCUCUAGGC\
) } def
/len { sequence length } bind def

/coor [
[100.59915161 330.05776978]
[105.29311371 315.36184692]
[117.20168304 305.55422974]
[115.34020233 290.67016602]
[113.47872162 275.78613281]
[111.61724091 260.90206909]
[109.75576019 246.01803589]
[105.73133850 239.65960693]
[108.07528687 230.64303589]
[106.67759705 215.70829773]
[105.04781342 200.79710388]
[103.18633270 185.91305542]
[101.32485199 171.02900696]
[99.46337128 156.14495850]
[97.60189056 141.26091003]
[95.74040985 126.37686157]
[83.27944183 124.14141846]
[72.20803833 115.89075470]
[65.43225098 102.55458069]
[65.24037933 86.44301605]
[50.24219513 86.20973969]
[35.24401093 85.97646332]
[20.24582481 85.74318695]
[6.18896914 94.18930054]
[-8.02087498 86.00319672]
[-7.76583910 69.60603333]
[6.69171858 61.86580658]
[20.47910118 70.74500275]
[35.47728729 70.97827911]
[50.47547531 71.21155548]
[65.47365570 71.44483185]
[71.80118561 57.84474564]
[61.96225739 46.52239990]
[52.12332535 35.20005798]
[42.28439713 23.87771225]
[32.44546890 12.55536842]
[16.60664558 10.00366020]
[8.85213089 -4.04080677]
[15.13052559 -18.80431938]
[30.62558174 -22.96157455]
[43.45082092 -13.32348156]
[43.76781464 2.71643949]
[53.60674286 14.03878403]
[63.44567108 25.36112785]
[73.28459930 36.68347168]
[83.12352753 48.00581741]
[73.32995605 36.64421463]
[70.84799194 21.85097885]
[76.39725494 7.91520786]
[88.36879730 -1.12260604]
[103.29164124 -2.64206767]
[116.83910370 3.79737020]
[125.08326721 16.32867813]
[125.63385773 31.31856918]
[118.33123779 44.42092514]
[105.29507446 51.83629608]
[118.36251831 44.47138596]
[131.42996216 37.10647202]
[144.49740601 29.74156189]
[157.56484985 22.37665176]
[170.63229370 15.01173973]
[183.69973755 7.64682865]
[191.92295837 -5.86942339]
[206.80946350 -5.37798977]
[219.87690735 -12.74290085]
[227.75297546 -27.12690163]
[244.15182495 -27.22746277]
[252.20370483 -12.94113255]
[243.62554932 1.03553438]
[227.24182129 0.32454285]
[214.17437744 7.68945408]
[206.88581848 20.67891884]
[191.06465149 20.71427155]
[177.99720764 28.07918358]
[164.92976379 35.44409561]
[151.86231995 42.80900574]
[138.79487610 50.17391586]
[125.72743225 57.53882980]
[112.65998840 64.90373993]
[131.99844360 98.99568939]
[110.62445831 124.51538086]
[112.48593903 139.39942932]
[114.34741974 154.28347778]
[116.20890045 169.16752625]
[118.07038116 184.05157471]
[119.93186188 198.93562317]
[124.16821289 207.23297119]
[121.61233521 214.31060791]
[123.01002502 229.24534607]
[124.63980865 244.15653992]
[126.50128937 259.04058838]
[128.36277771 273.92465210]
[130.22425842 288.80868530]
[132.08573914 303.69274902]
[146.04292297 310.26544189]
[154.21159363 323.35269165]
[153.98516846 338.77841187]
[145.43589783 351.62026978]
[131.29182434 357.78051758]
[116.06625366 355.29339600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[9 89]
[10 88]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[20 31]
[21 30]
[22 29]
[23 28]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
