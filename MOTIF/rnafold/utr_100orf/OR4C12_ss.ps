%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCCUGGAGGUUUUAUCACCCACACUACAUAGAUGGAGAAGAAAAAGAAUGUGACUGAAUUCAUUUUAAUAGGUCUUACACAGAACCCCAUAAUGGAGAAAGUCACGUUUGUAGUAUUUUUGGUUCUUUACA\
) } def
/len { sequence length } bind def

/coor [
[11.41116047 319.91506958]
[1.29479647 325.14276123]
[-9.65982151 328.22705078]
[-21.00421906 329.04449463]
[-32.27452850 327.56436157]
[-43.01045990 323.84982300]
[-52.77409363 318.05529785]
[-63.19396973 328.84539795]
[-63.09080124 344.42187500]
[-73.81174469 355.21612549]
[-88.66218567 355.21850586]
[-99.08206177 366.00860596]
[-109.50193787 376.79870605]
[-108.97555542 392.59420776]
[-119.83332825 404.07830811]
[-135.63352966 404.43765259]
[-147.00218201 393.45907593]
[-147.19447327 377.65594482]
[-136.09629822 366.40402222]
[-120.29203033 366.37881470]
[-109.87216187 355.58871460]
[-99.45228577 344.79861450]
[-99.96819305 329.95715332]
[-89.55467224 318.86602783]
[-73.98406219 318.42550659]
[-63.56418991 307.63540649]
[-72.69334412 291.02783203]
[-75.78376770 272.30883789]
[-72.46990204 253.60675049]
[-63.11515427 237.05267334]
[-48.77209854 224.53762817]
[-31.06405449 217.49664307]
[-12.00136566 216.74407959]
[6.24682379 222.37959290]
[14.77884102 210.04246521]
[23.31085777 197.70533752]
[24.18640709 182.83650208]
[38.39969635 175.88717651]
[46.93171310 163.55004883]
[55.46372986 151.21293640]
[63.99574661 138.87580872]
[72.52776337 126.53867340]
[64.46819305 114.01840973]
[61.80804443 99.36789703]
[64.95155334 84.81343842]
[73.42103577 72.56674194]
[85.92946625 64.48880005]
[100.57605743 61.80715942]
[115.13510895 64.92930603]
[123.66712189 52.59217834]
[132.19914246 40.25505447]
[140.73115540 27.91792679]
[149.26316833 15.58080101]
[157.79519653 3.24367452]
[166.32720947 -9.09345150]
[174.85922241 -21.43057823]
[183.39125061 -33.76770401]
[191.92326355 -46.10483170]
[186.94754028 -60.68387222]
[191.45779419 -75.22729492]
[203.52416992 -84.21987152]
[218.39401245 -84.38100433]
[226.92602539 -96.71813202]
[235.45803833 -109.05525208]
[243.99005127 -121.39237976]
[252.52207947 -133.72950745]
[261.05407715 -146.06663513]
[254.40194702 -157.25343323]
[252.51374817 -170.08349609]
[255.63824463 -182.62135315]
[263.27069092 -192.98934937]
[274.23403931 -199.64878845]
[286.86029053 -201.62831116]
[299.24429321 -198.66539001]
[308.34106445 -210.59219360]
[317.43783569 -222.51901245]
[326.39520264 -234.55085754]
[335.21200562 -246.68611145]
[334.13256836 -262.69281006]
[346.07086182 -273.40997314]
[361.86877441 -270.61627197]
[369.40756226 -256.45483398]
[362.90408325 -241.78909302]
[347.34725952 -237.86933899]
[338.53045654 -225.73408508]
[337.13104248 -218.40664673]
[329.36465454 -213.42224121]
[320.26788330 -201.49543762]
[311.17111206 -189.56861877]
[318.37796021 -174.01562500]
[316.76147461 -156.86161804]
[306.67303467 -142.78500366]
[290.78680420 -135.66989136]
[273.39120483 -137.53462219]
[264.85919189 -125.19749451]
[256.32717896 -112.86036682]
[247.79516602 -100.52323914]
[239.26315308 -88.18611145]
[230.73112488 -75.84898376]
[235.82838440 -61.87916183]
[231.67308044 -47.41550446]
[219.65734863 -38.06267929]
[204.26039124 -37.57281494]
[195.72836304 -25.23568726]
[187.19635010 -12.89856148]
[178.66433716 -0.56143510]
[170.13232422 11.77569103]
[161.60029602 24.11281776]
[153.06828308 36.44994354]
[144.53627014 48.78707123]
[136.00425720 61.12419891]
[127.47223663 73.46132660]
[135.53179932 85.98159027]
[138.19195557 100.63210297]
[135.04844666 115.18656158]
[126.57896423 127.43325806]
[114.07053375 135.51119995]
[99.42394257 138.19284058]
[84.86489105 135.07069397]
[76.33287811 147.40782166]
[67.80085754 159.74494934]
[59.26884079 172.08207703]
[50.73682404 184.41920471]
[49.25100708 200.17048645]
[35.64798355 206.23736572]
[27.11596680 218.57449341]
[18.58395004 230.91162109]
[26.20787239 239.45133972]
[31.95499039 249.34414673]
[35.59274292 260.18435669]
[36.97500992 271.52804565]
[36.04798126 282.91122437]
[32.85224152 293.86886597]
[27.52099991 303.95385742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[34 127]
[35 126]
[36 125]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[74 89]
[75 88]
[76 87]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
