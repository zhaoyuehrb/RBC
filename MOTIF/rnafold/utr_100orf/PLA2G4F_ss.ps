%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCAGUGCUGCCUGUCACACCUGAGCCAGCAGUUUGUGCAACCAGAGGAGCGCAGGCAGGGUUCCCUGCUGGGGCCCGGGCUGCCCAGCCAUGCUUUGGGCACUCUGGCCAAGGUGGCUGGCAGACAAGAUGCUGCCCCUCCUGGGGGCAGUGCUGCUUCAGAAGAGAGAGAAGAGGGGCCCUCUGUGGA\
) } def
/len { sequence length } bind def

/coor [
[84.03659821 218.96339417]
[81.59987640 221.02513123]
[78.94556427 221.97048950]
[71.90827942 235.21723938]
[64.87099457 248.46400452]
[57.83371735 261.71075439]
[50.79643250 274.95751953]
[43.86719513 288.26110840]
[37.04646301 301.62066650]
[35.92794037 310.70199585]
[30.00443649 315.14080811]
[22.96715355 328.38757324]
[26.26944733 344.08709717]
[15.94333935 356.36514282]
[-0.08986543 355.80310059]
[-9.53086376 342.83209229]
[-5.13732958 327.40237427]
[9.72039318 321.35031128]
[16.75767517 308.10354614]
[23.68691254 294.79992676]
[30.50764656 281.44039917]
[30.74946785 274.04223633]
[37.54967499 267.92025757]
[44.58695602 254.67347717]
[51.62423706 241.42672729]
[58.66151810 228.17996216]
[65.69879913 214.93319702]
[72.30117798 201.46440125]
[78.46165466 187.78782654]
[84.62212372 174.11126709]
[84.50253296 166.71012878]
[90.99578857 160.26348877]
[97.37805939 146.68899536]
[103.76033020 133.11451721]
[99.56188965 126.89977264]
[91.16500092 114.47027588]
[86.96655273 108.25553131]
[71.99089050 109.10964966]
[57.01522827 109.96376801]
[42.03956604 110.81787872]
[27.06390381 111.67199707]
[17.90252304 120.76528168]
[5.40170288 121.16039276]
[-3.71119308 113.19097137]
[-18.69877434 113.80121613]
[-34.27881241 120.48693085]
[-45.01623154 107.36656189]
[-35.38102341 93.41667938]
[-19.30901909 98.81362915]
[-4.32143784 98.20338440]
[9.97018337 88.03038025]
[26.20978737 96.69633484]
[41.18545151 95.84221649]
[56.16111374 94.98809814]
[71.13677979 94.13398743]
[86.11244202 93.27986908]
[89.62005615 78.69574738]
[76.67056274 71.12537384]
[63.72106552 63.55500031]
[50.77156830 55.98462677]
[37.82207108 48.41425323]
[24.87257576 40.84387970]
[8.47966385 41.29602432]
[0.12331564 27.18562126]
[8.39982700 13.02824116]
[24.79503250 13.38778400]
[32.44295120 27.89438248]
[45.39244461 35.46475601]
[58.34194183 43.03512955]
[71.29143524 50.60550308]
[84.24093628 58.17587662]
[97.19042969 65.74625397]
[112.18993378 65.86833191]
[125.26093292 58.50973892]
[138.33193970 51.15114594]
[151.40293884 43.79255676]
[164.47393799 36.43396378]
[177.54495239 29.07537079]
[190.61595154 21.71677780]
[189.45407104 3.30097437]
[197.00425720 -13.43835163]
[211.43684387 -24.64750481]
[229.34849548 -27.78882027]
[233.21112061 -42.28295898]
[237.07374573 -56.77709961]
[240.93637085 -71.27124023]
[244.79899597 -85.76538086]
[243.98518372 -94.87907410]
[248.84425354 -100.46301270]
[252.94229126 -114.89236450]
[257.04034424 -129.32171631]
[261.13836670 -143.75105286]
[259.89093018 -150.26872253]
[261.83978271 -155.62748718]
[265.61175537 -158.57928467]
[270.17730713 -172.86759949]
[274.74282837 -187.15591431]
[279.30838013 -201.44422913]
[283.87390137 -215.73254395]
[288.43945312 -230.02085876]
[293.00497437 -244.30917358]
[289.83511353 -259.80957031]
[301.07910156 -269.57800293]
[305.64465332 -283.86630249]
[304.70611572 -300.79425049]
[320.71270752 -306.38223267]
[330.51336670 -292.54809570]
[319.93295288 -279.30078125]
[315.36743164 -265.01245117]
[318.86383057 -250.53404236]
[307.29330444 -239.74363708]
[302.72775269 -225.45532227]
[298.16223145 -211.16700745]
[293.59667969 -196.87869263]
[289.03115845 -182.59037781]
[284.46560669 -168.30206299]
[279.90008545 -154.01374817]
[275.56771851 -139.65301514]
[271.46969604 -125.22367096]
[267.37164307 -110.79432678]
[263.27362061 -96.36497498]
[259.29315186 -81.90275574]
[255.43051147 -67.40861511]
[251.56788635 -52.91447067]
[247.70526123 -38.42033386]
[243.84263611 -23.92619133]
[250.71173096 -19.52728271]
[256.47195435 -13.75191402]
[260.85278320 -6.87127829]
[263.64855957 0.79153144]
[278.63613892 0.18128683]
[287.09832764 -3.29908967]
[293.87222290 -0.31490478]
[308.86776733 -0.68111622]
[323.86328125 -1.04732776]
[338.85882568 -1.41353917]
[353.85433960 -1.77975059]
[368.84988403 -2.14596200]
[383.84539795 -2.51217365]
[398.84094238 -2.87838507]
[413.83645630 -3.24459648]
[428.83200073 -3.61080790]
[444.51879883 -10.04204369]
[455.04122925 3.25136280]
[445.18023682 17.04256058]
[429.19821167 11.38472080]
[414.20266724 11.75093269]
[399.20715332 12.11714363]
[384.21160889 12.48335552]
[369.21609497 12.84956646]
[354.22055054 13.21577835]
[339.22503662 13.58199024]
[324.22949219 13.94820118]
[309.23397827 14.31441307]
[294.23843384 14.68062401]
[279.24639893 15.16886806]
[264.25881958 15.77911282]
[262.45718384 22.69240570]
[259.38186646 29.14079857]
[270.45248413 39.26214218]
[281.52307129 49.38348770]
[292.59368896 59.50483322]
[307.21206665 54.79333878]
[322.22433472 58.03794479]
[333.59225464 68.36587524]
[338.25790405 82.99896240]
[334.96627808 98.00098419]
[324.60275269 109.33646393]
[309.95510864 113.95623016]
[294.96347046 110.61757660]
[283.66055298 100.21858215]
[279.08670044 85.55653381]
[282.47235107 70.57543945]
[271.40173340 60.45409775]
[260.33111572 50.33275223]
[249.26051331 40.21140671]
[232.10568237 47.34233856]
[213.50581360 45.41752625]
[197.97454834 34.78778076]
[184.90353394 42.14637375]
[171.83253479 49.50496674]
[158.76153564 56.86355972]
[145.69053650 64.22215271]
[132.61952209 71.58074188]
[119.54852295 78.93933868]
[117.33481598 139.49678040]
[110.95254517 153.07127380]
[104.57027435 166.64575195]
[98.29869843 180.27172852]
[92.13822174 193.94830322]
[85.97774506 207.62487793]
[86.57381439 211.96061707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 21]
[9 20]
[11 19]
[12 18]
[28 191]
[29 190]
[30 189]
[32 188]
[33 187]
[34 186]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[44 50]
[45 49]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[73 185]
[74 184]
[75 183]
[76 182]
[77 181]
[78 180]
[79 179]
[83 126]
[84 125]
[85 124]
[86 123]
[87 122]
[89 121]
[90 120]
[91 119]
[92 118]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[103 109]
[104 108]
[130 157]
[131 156]
[133 155]
[134 154]
[135 153]
[136 152]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
[142 146]
[159 176]
[160 175]
[161 174]
[162 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
