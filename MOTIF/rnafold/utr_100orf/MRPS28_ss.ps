%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGGUCAGAGGUAAAGAAGUCAUGGCGGCGCUGUGUCGGACCCGUGCUGUGGCUGCCGAGAGCCAUUUUCUGCGAGUGUUUCUCUUCUUCAGGCCCUUUCGGGGUGUAGGCACUGAGAGUG\
) } def
/len { sequence length } bind def

/coor [
[229.69482422 410.12145996]
[225.20347595 395.80966187]
[230.76533508 381.87890625]
[243.87849426 374.59573364]
[258.64462280 377.23654175]
[250.71015930 364.50686646]
[242.77569580 351.77719116]
[234.84123230 339.04754639]
[221.54275513 332.33935547]
[220.80917358 316.53518677]
[212.87471008 303.80551147]
[204.94026184 291.07583618]
[197.00579834 278.34619141]
[182.16052246 277.47668457]
[170.53634644 267.91934204]
[166.72422791 253.17753601]
[172.38897705 238.85215759]
[164.45451355 226.12249756]
[156.52006531 213.39282227]
[148.58560181 200.66316223]
[140.65113831 187.93350220]
[134.37138367 183.87515259]
[132.68165588 174.77932739]
[125.07221222 161.85273743]
[117.46277618 148.92616272]
[101.76759338 141.18559265]
[101.62221527 122.82501984]
[93.68775940 110.09535217]
[82.43106842 100.18137360]
[68.80097198 93.91873932]
[55.17088318 87.65610504]
[41.54079056 81.39347076]
[27.91069984 75.13083649]
[9.67887211 77.30627441]
[0.01741999 62.71478653]
[-13.76694679 56.79944992]
[-29.13879585 61.39138031]
[-42.23034668 52.11825562]
[-42.99888229 36.09362030]
[-30.85484695 25.61020660]
[-15.11410618 28.70998955]
[-7.85160923 43.01508331]
[5.93275785 48.93041992]
[17.35275459 44.73007202]
[28.92587852 49.63674545]
[34.17333221 61.50074387]
[47.80342484 67.76338196]
[61.43351746 74.02601624]
[75.06360626 80.28865051]
[88.69370270 86.55128479]
[100.78412628 77.67312622]
[98.88904572 62.79332352]
[96.99396515 47.91351318]
[95.09889221 33.03370667]
[93.20381165 18.15389824]
[91.30873108 3.27409101]
[78.65924072 -6.20039797]
[76.49691010 -21.85606384]
[86.10460663 -34.40467834]
[101.78225708 -36.40136719]
[114.22859192 -26.66153717]
[116.05941772 -10.96365070]
[106.18853760 1.37901211]
[108.08361816 16.25881958]
[109.97869873 31.13862801]
[111.87377167 46.01843643]
[113.76885223 60.89824295]
[115.66393280 75.77805328]
[117.95307922 82.36371613]
[118.24818420 88.65471649]
[116.81276703 94.12866211]
[114.03497314 98.36858368]
[110.39341736 101.09049225]
[106.41741943 102.16088867]
[114.35188293 114.89055634]
[126.78377533 118.59708405]
[133.11326599 129.45756531]
[130.38935852 141.31672668]
[137.99879456 154.24330139]
[145.60823059 167.16989136]
[153.38079834 179.99903870]
[161.31526184 192.72869873]
[169.24972534 205.45837402]
[177.18418884 218.18803406]
[185.11863708 230.91769409]
[200.47476196 232.14067078]
[212.03120422 242.05541992]
[215.49258423 256.70065308]
[209.73545837 270.41171265]
[217.66992188 283.14138794]
[225.60438538 295.87106323]
[233.53883362 308.60070801]
[247.40484619 316.21939087]
[247.57090759 331.11306763]
[255.50535583 343.84274292]
[263.43981934 356.57241821]
[271.37426758 369.30206299]
[280.40487671 381.27905273]
[290.46066284 392.40927124]
[300.51641846 403.53945923]
[310.57220459 414.66967773]
[320.62796021 425.79986572]
[330.68374634 436.93008423]
[340.73950195 448.06027222]
[355.73211670 453.11322021]
[358.52310181 467.74401855]
[368.57888794 478.87420654]
[384.34176636 483.39785767]
[388.04254150 499.37396240]
[375.87414551 510.36770630]
[360.35440063 505.06964111]
[357.44866943 488.92999268]
[347.39291382 477.79977417]
[333.11956787 473.54293823]
[329.60931396 458.11605835]
[319.55352783 446.98583984]
[309.49777222 435.85565186]
[299.44198608 424.72543335]
[289.38623047 413.59524536]
[279.33044434 402.46502686]
[269.27468872 391.33483887]
[267.75167847 406.25732422]
[257.14230347 416.86114502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 97]
[6 96]
[7 95]
[8 94]
[10 92]
[11 91]
[12 90]
[13 89]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[23 80]
[24 79]
[25 78]
[27 75]
[28 74]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 43]
[36 42]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
