%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUAGUCAGGCCUCAGAAAGAUGGCGUCCUCGGAGCAGGCAGAGCAGCCGAGCCAGCCAAGCUCUACUCCAGGAAGUGAAAAUGUGCUGCCUCGAGAGCCGCUGAUUGCCACGGCAGUGA\
) } def
/len { sequence length } bind def

/coor [
[228.75842285 493.55102539]
[223.83029175 479.38369751]
[218.90216064 465.21636963]
[213.97401428 451.04901123]
[209.04588318 436.88168335]
[204.11775208 422.71435547]
[199.18960571 408.54699707]
[195.25164795 405.65725708]
[193.15696716 400.21286011]
[194.39297485 393.52160645]
[190.20069885 379.11938477]
[186.00840759 364.71713257]
[181.63104248 350.37005615]
[177.06932068 336.08050537]
[172.50759888 321.79098511]
[162.88006592 333.29360962]
[147.88034058 333.20193481]
[138.39413452 321.58248901]
[141.30583191 306.86779785]
[154.50233459 299.73672485]
[168.40716553 305.36508179]
[165.71795654 290.60809326]
[161.37190247 284.51968384]
[163.15461731 275.43688965]
[160.84625244 260.61557007]
[158.53790283 245.79425049]
[156.22953796 230.97293091]
[151.48422241 216.74331665]
[144.43457031 203.50312805]
[137.38491821 190.26295471]
[130.33526611 177.02276611]
[124.34347534 172.54443359]
[123.27954102 163.34967041]
[116.57313538 149.93237305]
[109.86672211 136.51506042]
[103.16031647 123.09775543]
[86.56119537 122.41670227]
[72.84308624 110.05837250]
[69.84346008 89.96235657]
[58.57648087 80.06007385]
[47.30950165 70.15779114]
[31.55605698 71.42450714]
[19.57530785 61.11735916]
[18.47521973 45.35140610]
[28.90845490 33.48030090]
[44.68516159 32.54695892]
[56.44529724 43.10511780]
[57.21178436 58.89081192]
[68.47875977 68.79309082]
[79.74574280 78.69537354]
[92.89405823 71.47583771]
[90.58570099 56.65452194]
[88.27734375 41.83320236]
[85.96898651 27.01188469]
[72.49305725 19.07883263]
[67.31791687 4.32241297]
[72.88710785 -10.28984547]
[86.57102966 -17.85848045]
[101.90855408 -14.80981541]
[111.65776825 -2.58333492]
[111.21539307 13.04798985]
[100.79030609 24.70352554]
[103.09866333 39.52484512]
[105.40702057 54.34616089]
[107.71537781 69.16748047]
[123.50537872 83.08355713]
[126.05696869 102.03570557]
[116.57762146 116.39134979]
[123.28403473 129.80865479]
[129.99043274 143.22596741]
[136.69683838 156.64326477]
[143.57543945 169.97311401]
[150.62509155 183.21330261]
[157.67474365 196.45347595]
[164.72439575 209.69366455]
[167.07666016 194.87925720]
[175.13385010 182.22691345]
[187.56311035 173.82968140]
[202.30830383 171.07667542]
[216.93020630 174.42332458]
[229.00996399 183.31597900]
[236.54927063 196.28359985]
[238.30091858 211.18096924]
[233.97515869 225.54368591]
[224.28755188 236.99578857]
[210.84072876 243.64279175]
[195.85910034 244.38510132]
[181.82104492 239.09992981]
[171.05085754 228.66456604]
[173.35922241 243.48588562]
[175.66757202 258.30722046]
[177.97593689 273.12854004]
[180.47492981 287.91888428]
[183.16413879 302.67587280]
[186.79713440 317.22924805]
[191.35885620 331.51879883]
[195.92057800 345.80831909]
[201.57606506 353.13574219]
[200.41065979 360.52484131]
[204.60293579 374.92709351]
[208.79522705 389.32934570]
[213.35694885 403.61886597]
[218.28507996 417.78619385]
[223.21322632 431.95355225]
[228.14135742 446.12088013]
[233.06948853 460.28820801]
[237.99763489 474.45556641]
[242.92576599 488.62289429]
[256.87326050 495.55868530]
[261.66928101 509.99658203]
[254.97109985 523.25067139]
[259.89923096 537.41796875]
[264.82736206 551.58532715]
[277.58468628 561.88983154]
[274.77246094 578.04602051]
[259.28363037 583.43383789]
[247.05181885 572.51074219]
[250.66001892 556.51348877]
[245.73188782 542.34613037]
[240.80375671 528.17877197]
[227.32598877 521.94299316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[10 101]
[11 100]
[12 99]
[13 97]
[14 96]
[15 95]
[21 94]
[22 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 75]
[29 74]
[30 73]
[31 72]
[33 71]
[34 70]
[35 69]
[36 68]
[39 50]
[40 49]
[41 48]
[51 65]
[52 64]
[53 63]
[54 62]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
