%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGACAUUGCAUCCUUCACCCAUCACUUGUGAAUUUUUGUUUUCCACAGCUCUCAUUUCUCCAAAAAUGUGUUUGAGCCACUUGGAAAAUAUGCCUUUAA\
) } def
/len { sequence length } bind def

/coor [
[-21.32069206 272.12161255]
[-28.01500130 276.28143311]
[-35.20836258 279.49600220]
[-42.76815414 281.70681763]
[-50.55509186 282.87384033]
[-58.42580032 282.97631836]
[-66.23546600 282.01300049]
[-73.84047699 280.00231934]
[-81.10108948 276.98190308]
[-87.88397217 273.00799561]
[-94.06468201 268.15426636]
[-99.52992249 262.51055908]
[-104.17962646 256.18121338]
[-107.92880249 249.28305054]
[-110.70906830 241.94334412]
[-112.46990967 234.29737854]
[-127.46279144 234.75930786]
[-142.45567322 235.22122192]
[-157.44856262 235.68315125]
[-172.44145203 236.14508057]
[-180.29014587 249.42671204]
[-194.08370972 256.33618164]
[-209.42070007 254.66871643]
[-221.40711975 244.95637512]
[-226.21813965 230.29835510]
[-222.31860352 215.37197876]
[-210.95281982 204.94017029]
[-195.74757385 202.33171082]
[-181.55480957 208.37892151]
[-172.90338135 221.15219116]
[-157.91049194 220.69026184]
[-142.91760254 220.22834778]
[-127.92472076 219.76641846]
[-112.93183136 219.30448914]
[-104.87833405 194.93251038]
[-87.04821014 176.40830994]
[-62.92090607 167.40039062]
[-37.22797394 169.71488953]
[-15.02515888 182.93367004]
[-3.33895040 173.52981567]
[8.34725857 164.12596130]
[20.03346634 154.72209167]
[31.71967506 145.31823730]
[43.40588379 135.91438293]
[55.09209442 126.51052856]
[66.77830505 117.10666656]
[78.46450806 107.70281219]
[79.51022339 89.83734131]
[93.10057068 78.19384003]
[110.91501617 79.90091705]
[122.00015259 69.79548645]
[133.08528137 59.69004822]
[144.17042542 49.58461380]
[149.21035767 30.18678856]
[168.08061218 26.47126579]
[178.52262878 15.70258617]
[188.96463013 4.93390751]
[183.65396118 -9.37551308]
[185.08638000 -24.57126617]
[192.97749329 -37.63622665]
[205.76049805 -45.97633362]
[220.89733887 -47.93565369]
[235.38256836 -43.12516403]
[246.34014893 -32.49998856]
[251.59443665 -18.16976547]
[250.10217285 -2.97977138]
[242.15968323 10.05401134]
[229.34391785 18.34371376]
[214.19949341 20.24341202]
[199.73330688 15.37591648]
[189.29130554 26.14459610]
[178.84928894 36.91327286]
[179.91735840 47.28876495]
[174.91021729 56.69063950]
[165.31340027 61.80356216]
[154.27584839 60.66975021]
[143.19071960 70.77518463]
[132.10559082 80.88061523]
[121.02045441 90.98605347]
[122.75297546 102.32656860]
[118.76109314 113.08174133]
[110.04913330 120.54569244]
[98.80891418 122.84057617]
[87.86837006 119.38902283]
[76.18215942 128.79287720]
[64.49594879 138.19673157]
[52.80974197 147.60058594]
[41.12353134 157.00445557]
[29.43732452 166.40830994]
[17.75111580 175.81216431]
[6.06490660 185.21601868]
[-5.62130213 194.61987305]
[-1.98007727 201.64114380]
[0.67661554 209.08819580]
[2.30054045 216.82379150]
[2.86248827 224.70547485]
[2.35280204 232.58819580]
[0.78154176 240.32693481]
[-1.82171321 247.77944946]
[-5.40842056 254.80886841]
[-9.91197968 261.28616333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[39 92]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[50 79]
[51 78]
[52 77]
[53 76]
[55 72]
[56 71]
[57 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
