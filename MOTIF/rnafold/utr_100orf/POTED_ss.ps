%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGACGCGAUCUGUUCGCUACUACCGGCCUCCCCUGGCUGUUAAAAGCAGAUGGUGGCUGAGGUUUGUUCAAUGCCCACUGCCUCUACUGUGAAGAAGCCAUUUGAUCUCAGGAGCAAGAUGGGCAAGUGGUGCCACCACCGCUUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[79.83094025 126.82218170]
[71.67427063 139.41061401]
[63.51760864 151.99905396]
[55.36094284 164.58749390]
[47.20427704 177.17593384]
[50.29335785 192.44338989]
[41.84201050 205.09367371]
[27.26778603 207.94454956]
[19.11112022 220.53298950]
[10.95445442 233.12142944]
[2.79778886 245.70986938]
[4.72980547 261.63616943]
[-6.61957645 272.97506714]
[-22.54408264 271.02838135]
[-30.82779503 257.28939819]
[-25.11615753 242.29750061]
[-9.79065037 237.55320740]
[-1.63398480 224.96476746]
[6.52268076 212.37632751]
[14.67934704 199.78788757]
[11.32617092 185.32096863]
[19.41886330 172.43829346]
[34.61583710 169.01927185]
[42.77250290 156.43083191]
[50.92916870 143.84239197]
[59.08583450 131.25395203]
[67.24250031 118.66551208]
[62.69520950 104.37138367]
[48.76449203 98.80944824]
[34.83377838 93.24750519]
[20.90306091 87.68556976]
[6.97234392 82.12363434]
[-6.95837212 76.56169891]
[-21.00034904 71.28695679]
[-35.14766312 66.30163574]
[-49.34541702 61.46181488]
[-63.59210968 56.76801682]
[-77.57524872 63.63166046]
[-91.95655060 58.66852951]
[-98.41381836 45.29544830]
[-112.66050720 40.60164642]
[-126.90720367 35.90784454]
[-141.15390015 31.21404457]
[-155.40058899 26.52024460]
[-172.33628845 27.30655289]
[-177.78013611 11.25037384]
[-163.85844421 1.57448149]
[-150.70678711 12.27355289]
[-136.46009827 16.96735382]
[-122.21340179 21.66115379]
[-107.96670532 26.35495377]
[-93.72001648 31.04875565]
[-80.57823181 24.13289070]
[-66.06320190 28.69012260]
[-58.89830780 42.52132416]
[-44.65161514 47.21512604]
[-37.26900482 46.31555176]
[-30.16234207 52.15431595]
[-16.01502609 57.13963699]
[-11.34676361 55.89202499]
[-5.84731150 57.60780334]
[-1.39643478 62.63098145]
[12.53428173 68.19291687]
[26.46499825 73.75485229]
[40.39571381 79.31679535]
[54.32643127 84.87873077]
[68.25714874 90.44066620]
[73.62799835 82.75207520]
[80.64402771 77.24741364]
[88.53381348 74.20084381]
[96.51223755 73.63681793]
[103.85613251 75.34638977]
[109.96915436 78.92510986]
[114.43020630 83.82765961]
[117.02147675 89.43299866]
[129.85513306 81.66786194]
[142.68878174 73.90272522]
[155.52244568 66.13759613]
[168.35609436 58.37245941]
[181.18974304 50.60732269]
[193.94300842 42.71083832]
[206.61451721 34.68384171]
[210.18939209 19.52277184]
[223.15444946 11.56276512]
[237.58618164 15.06428814]
[250.25770569 7.03729153]
[262.92922974 -0.98970568]
[266.38131714 -6.74519873]
[271.47183228 -9.44228649]
[276.28988647 -9.07370663]
[289.28024292 -16.57370567]
[302.27062988 -24.07370567]
[310.35327148 -37.67449188]
[325.24407959 -37.33742905]
[338.23446655 -44.83742905]
[347.03213501 -60.98152161]
[364.54406738 -60.36774445]
[377.37771606 -68.13288116]
[390.21136475 -75.89801788]
[397.63925171 -90.51849365]
[414.02716064 -91.12567902]
[422.51660156 -77.09494019]
[414.37435913 -62.85991287]
[397.97650146 -63.06436157]
[385.14285278 -55.29922867]
[372.30920410 -47.53409195]
[369.09475708 -35.83240128]
[358.41342163 -29.26881218]
[345.73446655 -31.84704781]
[332.74407959 -24.34704781]
[325.59057617 -11.28271294]
[309.77062988 -11.08332539]
[296.78024292 -3.58332515]
[283.78988647 3.91667485]
[270.95620728 11.68181038]
[258.28469849 19.70880699]
[245.61318970 27.73580360]
[242.61282349 42.27999496]
[229.87646484 50.60102081]
[214.64152527 47.35535812]
[201.97000122 55.38235474]
[197.97787476 61.65731430]
[188.95487976 63.44097519]
[176.12123108 71.20610809]
[163.28758240 78.97124481]
[150.45391846 86.73638153]
[137.62026978 94.50151825]
[124.78661346 102.26665497]
[121.87914276 116.98217773]
[130.79528809 129.04460144]
[139.71144104 141.10704041]
[148.62759399 153.16946411]
[157.54374695 165.23190308]
[166.45989990 177.29432678]
[175.37605286 189.35676575]
[190.61952209 195.40396118]
[192.73619080 211.66593933]
[179.54861450 221.41375732]
[164.62304688 214.61970520]
[163.31361389 198.27291870]
[154.39746094 186.21047974]
[145.48130798 174.14805603]
[136.56517029 162.08561707]
[127.64900970 150.02319336]
[118.73286438 137.96075439]
[109.81671143 125.89832306]
[102.32026672 126.12928772]
[104.36188507 140.98970032]
[108.12608337 155.50971985]
[95.99433136 164.33131409]
[83.34176636 156.27449036]
[86.20445251 141.54911804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[8 20]
[9 19]
[10 18]
[11 17]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 59]
[35 58]
[36 56]
[37 55]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[75 128]
[76 127]
[77 126]
[78 125]
[79 124]
[80 123]
[81 121]
[82 120]
[85 117]
[86 116]
[87 115]
[90 114]
[91 113]
[92 112]
[94 110]
[95 109]
[97 106]
[98 105]
[99 104]
[129 146]
[130 145]
[131 144]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
