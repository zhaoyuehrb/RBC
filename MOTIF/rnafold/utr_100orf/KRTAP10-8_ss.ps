%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACCCAGUCCAGCACCCACCAUGGCUGACGCCUGCUGCACCAGGACGUAUGUGAUUGCUGCAUCCACCAUGUCUGUCUGCUCCAGUGACGUGGGCCAUGUCAGCCGAGUCUCCUCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[105.53912354 191.76115417]
[92.97691345 183.56414795]
[83.65532684 171.81221008]
[78.53299713 157.71392822]
[78.13670349 142.71916199]
[82.50721741 128.36999512]
[91.19459534 116.14255524]
[79.26520538 125.23593903]
[67.33580780 134.32931519]
[62.33323669 142.11431885]
[54.98363876 143.49795532]
[42.82590485 152.28370667]
[30.66816902 161.06947327]
[32.31438828 176.33987427]
[26.09017754 190.38105774]
[13.66981411 199.41600037]
[-1.60568476 201.01434326]
[-15.62728596 194.74615479]
[-24.62325096 182.29753113]
[-26.17370796 167.01708984]
[-19.86159325 153.01521301]
[-7.38483477 144.05831909]
[7.90038395 142.55575562]
[21.88241386 148.91172791]
[34.04014969 140.12597656]
[46.19788361 131.34022522]
[58.24243164 122.39992523]
[70.17182159 113.30654144]
[82.10121918 104.21316528]
[80.76207733 89.27305603]
[67.40568542 82.44613647]
[54.04929733 75.61921692]
[40.60681534 68.96341705]
[27.08042908 62.47983170]
[13.55404568 55.99624252]
[0.02766144 49.51265335]
[-14.79511070 54.99544144]
[-29.11819649 48.31526566]
[-34.44396591 33.43535233]
[-27.61273003 19.18369484]
[-12.67734241 14.01554489]
[1.50129545 20.99707413]
[6.51125097 35.98626709]
[20.03763580 42.46985626]
[33.56401825 48.95344543]
[47.09040451 55.43703461]
[54.56890869 55.49157715]
[60.87621689 62.26282883]
[74.23260498 69.08974457]
[87.58899689 75.91666412]
[93.01114655 77.39579010]
[97.50068665 79.92822266]
[100.87453461 83.22919464]
[103.02087402 86.98560333]
[103.90291595 90.87220764]
[117.42929840 84.38861847]
[130.95568848 77.90502930]
[144.48207092 71.42144012]
[157.83845520 64.59451294]
[171.01614380 57.42871857]
[184.19381714 50.26292038]
[197.37150574 43.09712601]
[210.45660400 35.76362991]
[223.44699097 28.26362801]
[236.43736267 20.76362801]
[238.17828369 5.45757055]
[248.47769165 -5.75740433]
[263.23147583 -8.72218990]
[276.74026489 -2.50526571]
[289.73065186 -10.00526524]
[302.72103882 -17.50526619]
[315.71142578 -25.00526619]
[328.70181274 -32.50526428]
[341.69216919 -40.00526428]
[354.68255615 -47.50526428]
[356.92739868 -58.29771042]
[364.63095093 -65.87046814]
[375.02600098 -67.84725952]
[384.56433105 -63.80302811]
[397.92071533 -70.62995148]
[411.27709961 -77.45687103]
[422.62884521 -90.04952240]
[437.87182617 -82.62742615]
[434.95947266 -65.92549133]
[418.10403442 -64.10047913]
[404.74765015 -57.27355957]
[391.39126587 -50.44664001]
[382.23764038 -33.49227905]
[362.18255615 -34.51488495]
[349.19216919 -27.01488495]
[336.20181274 -19.51488495]
[323.21142578 -12.01488495]
[310.22103882 -4.51488447]
[297.23065186 2.98511553]
[284.24026489 10.48511505]
[282.86987305 25.29254723]
[272.92541504 36.58730316]
[258.06326294 39.89936066]
[243.93736267 33.75400925]
[230.94699097 41.25400925]
[217.95660400 48.75400925]
[213.68754578 54.89453888]
[204.53730774 56.27480698]
[191.35961914 63.44060516]
[178.18193054 70.60639954]
[165.00425720 77.77220154]
[162.79356384 82.12541962]
[157.76513672 85.07663727]
[150.96565247 84.94782257]
[137.43927002 91.43141174]
[123.91288757 97.91500092]
[110.38650513 104.39859009]
[125.22865295 102.22817993]
[139.99462891 104.86747742]
[153.16589355 112.04505920]
[163.38790894 123.02278900]
[169.60943604 136.67169189]
[171.19064331 151.58811951]
[167.96891785 166.23805237]
[160.27558899 179.11488342]
[148.90185547 188.89434814]
[135.01736450 194.57072449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 29]
[8 28]
[9 27]
[11 26]
[12 25]
[13 24]
[30 50]
[31 49]
[32 48]
[33 46]
[34 45]
[35 44]
[36 43]
[55 112]
[56 111]
[57 110]
[58 109]
[59 106]
[60 105]
[61 104]
[62 103]
[63 101]
[64 100]
[65 99]
[69 95]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
