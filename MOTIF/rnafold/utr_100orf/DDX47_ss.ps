%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGAGACCUCACACAAGAUGGCGGCACCCGAGGAACACGAUUCUCCGACCGAAGCGUCCCAGCCGAUUGUGGAAGAGGAGGAAACUAAAACAUUUAAAGACCUGGGUGUGACAGAUG\
) } def
/len { sequence length } bind def

/coor [
[325.34060669 359.90231323]
[324.04992676 352.26226807]
[325.57101440 344.59457397]
[314.63125610 334.33197021]
[303.69146729 324.06933594]
[292.75170898 313.80673218]
[284.86340332 315.78704834]
[276.75253296 314.40417480]
[269.80776978 309.81735229]
[265.24926758 302.74084473]
[263.91448975 294.33364868]
[266.10528564 286.00976562]
[256.26922607 274.68493652]
[246.43316650 263.36010742]
[236.59710693 252.03526306]
[217.94006348 247.22341919]
[214.11408997 227.51011658]
[203.71261597 216.70230103]
[193.31112671 205.89447021]
[182.90963745 195.08665466]
[172.50814819 184.27882385]
[160.35209656 183.70985413]
[151.59591675 174.68887329]
[151.37455750 161.71661377]
[141.25247192 150.64668274]
[131.13040161 139.57673645]
[121.00832367 128.50680542]
[110.74570465 117.56702423]
[100.34421539 106.75920105]
[97.81177521 113.21142578]
[92.59162140 118.59331512]
[85.08694458 122.07264709]
[75.92707062 122.95301819]
[65.92543793 120.73060608]
[56.02409744 115.13869476]
[43.64595032 106.66629791]
[31.26780510 98.19390106]
[18.88965988 89.72150421]
[6.51151419 81.24910736]
[-8.97448444 84.40495300]
[-22.10998726 75.61665344]
[-25.10193062 60.09815598]
[-16.17524910 47.05630493]
[-0.62598467 44.22859955]
[12.32076073 53.29266739]
[14.98391151 68.87095642]
[27.36205673 77.34335327]
[39.74020386 85.81575012]
[52.11834717 94.28815460]
[64.49649048 102.76055145]
[70.73915863 98.60372925]
[89.46715546 86.13328552]
[86.42346954 71.44532776]
[83.37978363 56.75737381]
[70.03342438 48.29273605]
[66.66310120 32.85199356]
[75.26837158 19.59587097]
[90.74388123 16.38898468]
[103.90828705 25.13392830]
[106.95137787 40.64247894]
[98.06774139 53.71368790]
[101.11142731 68.40164185]
[104.15511322 83.08959961]
[111.15203857 96.35771942]
[121.55352783 107.16554260]
[129.86087036 111.24229431]
[132.07826233 118.38471985]
[142.20033264 129.45466614]
[152.32241821 140.52459717]
[162.44448853 151.59454346]
[180.08662415 156.67871094]
[183.31596375 173.87733459]
[193.71745300 184.68516541]
[204.11894226 195.49298096]
[214.52043152 206.30081177]
[224.92192078 217.10862732]
[235.93757629 216.69461060]
[245.13941956 222.35299683]
[249.55592346 231.96856689]
[247.92193604 242.19920349]
[257.75799561 253.52403259]
[267.59405518 264.84887695]
[277.43014526 276.17370605]
[299.10226440 281.62420654]
[303.01431274 302.86694336]
[313.95410156 313.12957764]
[324.89385986 323.39218140]
[335.83364868 333.65481567]
[358.79989624 336.66726685]
[365.36486816 358.12713623]
[377.52261353 366.91290283]
[392.20159912 362.24026489]
[406.64846802 367.05081177]
[415.38912964 379.30087280]
[415.24221802 394.17086792]
[427.39993286 402.95660400]
[439.55767822 411.74237061]
[451.71539307 420.52813721]
[463.87313843 429.31387329]
[476.03088379 438.09963989]
[488.18859863 446.88540649]
[503.75015259 444.12606812]
[516.65692139 453.24694824]
[519.25158691 468.83679199]
[509.99475098 481.64642334]
[494.37832642 484.07611084]
[481.66729736 474.68435669]
[479.40286255 459.04312134]
[467.24511719 450.25738525]
[455.08737183 441.47161865]
[442.92965698 432.68585205]
[430.77191162 423.90011597]
[418.61419678 415.11434937]
[406.45645142 406.32858276]
[392.38403320 411.13537598]
[378.00955200 406.68133545]
[368.90765381 394.47442627]
[368.73684692 379.07061768]
[356.57910156 370.28488159]
[349.79605103 373.25378418]
[342.33203125 373.62249756]
[335.15850830 371.29418945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[12 83]
[13 82]
[14 81]
[15 80]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[24 70]
[25 69]
[26 68]
[27 67]
[28 65]
[29 64]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[52 63]
[53 62]
[54 61]
[90 119]
[91 118]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
