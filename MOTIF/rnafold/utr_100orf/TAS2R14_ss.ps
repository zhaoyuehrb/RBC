%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGUGGUGUCAUAAAGAGCAUAUUUACAUUCGUUUUAAUUGUGGAAUUUAUAAUUGGAAAUUUAGGAAAUAGUUUCAUAGCACUGGUGAACUGUAUUG\
) } def
/len { sequence length } bind def

/coor [
[147.36189270 255.33212280]
[142.32913208 241.20161438]
[130.77012634 231.80809021]
[133.42874146 216.21185303]
[128.39598083 202.08134460]
[123.36323547 187.95082092]
[118.33049011 173.82031250]
[106.77146912 164.42677307]
[109.43008423 148.83055115]
[104.39733887 134.70004272]
[99.36458588 120.56952667]
[92.07489014 118.99214935]
[85.82615662 114.92015839]
[81.43914795 108.88841248]
[79.49010468 101.68917847]
[80.23503113 94.26807404]
[83.57607269 87.59984589]
[89.07439423 82.56037903]
[86.29118347 67.82085419]
[83.50796509 53.08132553]
[80.72474670 38.34179688]
[75.98075104 30.32386971]
[78.09166718 23.10102272]
[75.76819611 8.28206539]
[73.44472504 -6.53689098]
[71.12124634 -21.35584831]
[68.79777527 -36.17480469]
[53.95082855 -39.14017487]
[41.03848267 -46.99150085]
[31.60914803 -58.76468658]
[26.78582382 -73.02671814]
[27.13237000 -88.05007935]
[32.58766174 -102.02199554]
[42.47529984 -113.26315308]
[55.58742523 -120.42957306]
[53.26395035 -135.24853516]
[50.94047928 -150.06748962]
[48.61700439 -164.88644409]
[46.29353333 -179.70539856]
[43.97005844 -194.52435303]
[41.64658737 -209.34330750]
[39.32311630 -224.16226196]
[36.99964142 -238.98123169]
[34.67617035 -253.80018616]
[32.35269547 -268.61914062]
[20.28741837 -279.19308472]
[21.17579651 -295.21154785]
[34.33634186 -304.38647461]
[49.67341232 -299.67968750]
[55.42171860 -284.70181274]
[47.17165375 -270.94259644]
[49.49512482 -256.12365723]
[51.81859970 -241.30470276]
[54.14207077 -226.48573303]
[56.46554565 -211.66677856]
[58.78901672 -196.84782410]
[61.11248779 -182.02886963]
[63.43596268 -167.20991516]
[65.75943756 -152.39096069]
[68.08290863 -137.57200623]
[70.40637970 -122.75304413]
[85.08262634 -119.94358063]
[97.93622589 -112.26803589]
[107.40594482 -100.63622284]
[112.33386230 -86.43984985]
[112.10699463 -71.38599396]
[106.73342133 -57.29184723]
[96.84365082 -45.86536407]
[83.61672974 -38.49827576]
[85.94020844 -23.67932129]
[88.26367950 -8.86036396]
[90.58715057 5.95859289]
[92.91062164 20.77754974]
[95.46427917 35.55857849]
[98.24749756 50.29810715]
[101.03070831 65.03763580]
[103.81392670 79.77716827]
[119.86424255 94.62216949]
[113.49510193 115.53677368]
[118.52784729 129.66728210]
[123.56060028 143.79780579]
[135.47958374 154.20204163]
[132.46099854 168.78756714]
[137.49374390 182.91807556]
[142.52650452 197.04858398]
[147.55924988 211.17910767]
[159.47824097 221.58334351]
[156.45965576 236.16886902]
[161.49240112 250.29937744]
[176.67420959 251.87280273]
[189.66534424 259.88485718]
[197.88642883 272.74472046]
[199.70515442 287.89910889]
[194.76040649 302.33905029]
[184.03398132 313.19750977]
[169.65559387 318.31854248]
[154.48010254 316.68536377]
[141.52061462 308.62222290]
[133.35023499 295.73007202]
[131.59120178 280.56863403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[4 86]
[5 85]
[6 84]
[7 83]
[9 81]
[10 80]
[11 79]
[18 77]
[19 76]
[20 75]
[21 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
