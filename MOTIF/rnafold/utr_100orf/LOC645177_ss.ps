%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCAGUUCUCAGAUGGUUCUUGGAGCACUGGCGAAGUCAAGCGAAAAUAAGGUGCCACUUCAUCUGUAUACUAGGAGGAAAGUCAACAAUGGCCUCUCCAAGGAAGGUAACUGAGAAGCGGCAUAACCCAGUGGAAAGCAUCUGUAGAAAGAUCAGAGCCAUCCACAAGAGAGAAGCAAUUUCAAAUC\
) } def
/len { sequence length } bind def

/coor [
[57.11242676 168.21226501]
[47.98100662 180.11256409]
[38.84958649 192.01286316]
[29.71816254 203.91317749]
[20.68440437 215.88777161]
[11.74891567 227.93589783]
[2.81342626 239.98400879]
[-6.12206316 252.03211975]
[-15.05755329 264.08023071]
[-17.06364822 279.77374268]
[-30.85993385 285.38726807]
[-39.79542160 297.43539429]
[-48.73091125 309.48348999]
[-57.46807861 321.67620850]
[-66.00457764 334.01022339]
[-74.54108429 346.34423828]
[-75.34123230 362.72384644]
[-90.04817963 369.97903442]
[-103.53267670 360.64630127]
[-101.92303467 344.32632446]
[-86.87510681 337.80773926]
[-78.33860016 325.47372437]
[-69.80210114 313.13970947]
[-69.76445770 308.34933472]
[-66.70628357 303.53524780]
[-60.77902603 300.54800415]
[-51.84353638 288.49990845]
[-42.90804672 276.45178223]
[-41.54107666 261.62002563]
[-27.10566521 255.14474487]
[-18.17017555 243.09663391]
[-9.23468685 231.04850769]
[-0.29919723 219.00039673]
[8.63629246 206.95228577]
[10.09797096 199.69523621]
[17.81786346 194.78175354]
[26.94928360 182.88145447]
[36.08070755 170.98115540]
[45.21212769 159.08084106]
[37.83241653 151.25865173]
[31.56010056 142.52337646]
[26.50690842 133.03063965]
[22.76285172 122.94952393]
[20.39462280 112.45960236]
[19.44441032 101.74774170]
[19.92913818 91.00474548]
[21.84017181 80.42198181]
[25.14346886 70.18796539]
[29.78019142 60.48498917]
[35.66773987 51.48589706]
[42.70124435 43.35099030]
[50.75541306 36.22517395]
[59.68677902 30.23538208]
[69.33625031 25.48830986]
[79.53192902 22.06851959]
[77.08850098 7.26886892]
[74.64506531 -7.53078079]
[72.20162964 -22.33043098]
[69.75820160 -37.13008118]
[59.87625885 -49.48555756]
[65.43700409 -63.30320740]
[62.99356842 -78.10285950]
[60.55013657 -92.90250397]
[58.10670471 -107.70215607]
[53.61456680 -115.67459869]
[55.74643326 -122.76377869]
[53.54547501 -137.60142517]
[43.86701584 -150.11692810]
[49.65309143 -163.84175110]
[47.45213699 -178.67939758]
[43.09104538 -186.72427368]
[45.33861542 -193.77761841]
[43.38072205 -208.64929199]
[41.42282867 -223.52096558]
[39.46493530 -238.39263916]
[23.82132721 -255.51394653]
[32.99903870 -276.00323486]
[29.83236504 -290.66516113]
[26.66569328 -305.32708740]
[23.49901962 -319.98901367]
[20.33234596 -334.65093994]
[10.84859562 -340.01831055]
[5.99246073 -349.52758789]
[7.15625334 -359.92031860]
[13.71415806 -367.78219604]
[11.02890587 -382.53988647]
[8.34365273 -397.29757690]
[5.65839958 -412.05526733]
[-5.35794544 -424.20318604]
[-0.08875328 -439.73275757]
[16.04548264 -442.66848755]
[26.44724274 -429.99035645]
[20.41609001 -414.74050903]
[23.10134315 -399.98281860]
[25.78659630 -385.22512817]
[28.47184753 -370.46743774]
[42.03222656 -356.69635010]
[34.99427414 -337.81762695]
[38.16094971 -323.15570068]
[41.32762146 -308.49377441]
[44.49429703 -293.83184814]
[47.66096878 -279.16992188]
[54.44300461 -276.92254639]
[60.07312393 -272.41397095]
[63.81865311 -266.17019653]
[65.17124939 -258.94653320]
[63.91543579 -251.63621521]
[60.16130829 -245.16009521]
[54.33660889 -240.35052490]
[56.29450226 -225.47885132]
[58.25239563 -210.60717773]
[60.21028900 -195.73550415]
[62.28978348 -180.88035583]
[64.49073792 -166.04270935]
[74.01177216 -154.58848572]
[68.38312531 -139.80238342]
[70.58408356 -124.96473694]
[72.90635681 -110.14559174]
[75.34978485 -95.34593964]
[77.79322052 -80.54628754]
[80.23664856 -65.74663544]
[89.94382477 -54.44973373]
[84.55785370 -39.57351303]
[87.00128174 -24.77386284]
[89.44471741 -9.97421265]
[91.88814545 4.82543707]
[94.33158112 19.62508774]
[114.88439941 20.81217003]
[134.46553040 27.16879463]
[151.79669189 38.27998352]
[165.74645996 53.42037964]
[175.40415955 71.60158539]
[180.13932800 91.63670349]
[179.64285278 112.21778870]
[194.19331360 115.86248779]
[208.74378967 119.50719452]
[223.29425049 123.15189362]
[237.84472656 126.79659271]
[251.29136658 118.93367004]
[265.99569702 122.83718872]
[273.40893555 135.70497131]
[287.95938110 139.34967041]
[297.06079102 138.39918518]
[302.71713257 143.17486572]
[317.20602417 147.05715942]
[331.69491577 150.93943787]
[346.18380737 154.82173157]
[357.52987671 144.36848450]
[372.73016357 141.73133850]
[386.93432617 147.75177002]
[395.60983276 160.50868225]
[395.98840332 175.93139648]
[387.94918823 189.09858704]
[374.05752563 195.80863953]
[358.74615479 193.92041016]
[346.90087891 184.03642273]
[342.30151367 169.31060791]
[327.81262207 165.42832947]
[313.32373047 161.54603577]
[298.83483887 157.66375732]
[284.31469727 153.90013123]
[269.76422119 150.25543213]
[257.16049194 158.10922241]
[242.35234070 154.62025452]
[234.20002747 141.34706116]
[219.64955139 137.70236206]
[205.09909058 134.05766296]
[190.54861450 130.41296387]
[175.99815369 126.76825714]
[167.55227661 143.91978455]
[155.30329895 158.59866333]
[139.94079590 169.97850037]
[146.13139343 183.64146423]
[152.32200623 197.30441284]
[158.51260376 210.96737671]
[173.62002563 215.00466919]
[182.55548096 227.83790588]
[181.09991455 243.40759277]
[169.94061279 254.36222839]
[154.34664917 255.52934265]
[141.68101501 246.35787964]
[137.92404175 231.17831421]
[144.84965515 217.15797424]
[138.65904236 203.49502563]
[132.46844482 189.83206177]
[126.27783203 176.16911316]
[116.36811066 178.89450073]
[106.19207001 180.33627319]
[95.91529083 180.47094727]
[85.70496368 179.29634094]
[75.72722626 176.83157349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[11 28]
[12 27]
[13 26]
[14 23]
[15 22]
[16 21]
[55 127]
[56 126]
[57 125]
[58 124]
[59 123]
[61 121]
[62 120]
[63 119]
[64 118]
[66 117]
[67 116]
[69 114]
[70 113]
[72 112]
[73 111]
[74 110]
[75 109]
[77 102]
[78 101]
[79 100]
[80 99]
[81 98]
[85 96]
[86 95]
[87 94]
[88 93]
[134 169]
[135 168]
[136 167]
[137 166]
[138 165]
[141 162]
[142 161]
[144 160]
[145 159]
[146 158]
[147 157]
[172 186]
[173 185]
[174 184]
[175 183]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
