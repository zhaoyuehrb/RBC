%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGCUGUGGGCGGUGCCGCGCGGACCCCCGGGAAGUGUCUCUGUGGGCGGCCGCCGGGUUGAGCUGCGGCACACGUGCGACGGCCGUGAUGAAGUUCGCUUACCGGUUUUCAAAUUUGCUGGGUACGGUGUACCGGCGUGGGAACCUAAAUUUUACCUGCGAUGGAAAUUCAGUUAUCAGUCCCGUGG\
) } def
/len { sequence length } bind def

/coor [
[90.55612183 106.96591187]
[75.61745453 108.32103729]
[60.67879486 109.67615509]
[52.39841843 113.57385254]
[45.48360825 110.92864227]
[30.52467728 112.03787994]
[15.56574631 113.14710999]
[0.60681581 114.25634766]
[-14.34248638 115.48856354]
[-29.28114891 116.84368896]
[-42.32589340 125.79607391]
[-55.70011902 119.24021149]
[-70.63877869 120.59533691]
[-85.57744598 121.95045471]
[-100.50445557 123.42838287]
[-115.41881561 125.02902222]
[-130.33316040 126.62966156]
[-145.24751282 128.23030090]
[-160.16188049 129.83094788]
[-175.07623291 131.43157959]
[-189.99058533 133.03221130]
[-204.89126587 134.75546265]
[-219.77728271 136.60118103]
[-224.55621338 149.75730896]
[-234.49252319 159.52166748]
[-247.60485840 164.02719116]
[-261.31274414 162.44755554]
[-272.94448853 155.14808655]
[-280.25772095 143.60331726]
[-295.17208862 145.20394897]
[-310.08642578 146.80459595]
[-325.00079346 148.40522766]
[-339.91513062 150.00587463]
[-346.19940186 163.95059204]
[-358.53833008 172.81895447]
[-373.55969238 174.31054688]
[-387.21942139 168.12445068]
[-395.89031982 156.01324463]
[-410.80465698 157.61387634]
[-425.71902466 159.21452332]
[-440.63336182 160.81515503]
[-455.54772949 162.41580200]
[-468.46752930 172.51583862]
[-483.57095337 166.12690735]
[-485.32089233 149.82138062]
[-471.91717529 140.37300110]
[-457.14837646 147.50144958]
[-442.23400879 145.90080261]
[-427.31967163 144.30017090]
[-412.40530396 142.69952393]
[-397.49093628 141.09889221]
[-391.58752441 127.42353058]
[-379.55157471 118.47972107]
[-364.55578613 116.74981689]
[-350.61599731 122.79788971]
[-341.51577759 135.09152222]
[-326.60144043 133.49087524]
[-311.68707275 131.89024353]
[-296.77270508 130.28959656]
[-281.85836792 128.68896484]
[-275.68710327 113.76330566]
[-262.75936890 103.92594910]
[-246.54241943 101.93412781]
[-231.44592285 108.42475128]
[-221.62300110 121.71517181]
[-206.73699951 119.86944580]
[-200.47515869 115.91961670]
[-191.59121704 118.11786652]
[-176.67686462 116.51722717]
[-161.76251221 114.91658783]
[-146.84815979 113.31594849]
[-131.93380737 111.71530914]
[-117.01944733 110.11466980]
[-102.10509491 108.51403046]
[-95.77914429 104.66772461]
[-86.93256378 107.01178741]
[-71.99390411 105.65666962]
[-57.05524063 104.30155182]
[-45.07901001 95.44609070]
[-30.63627052 101.90502167]
[-15.69760704 100.54990387]
[-9.30924892 96.80815887]
[-0.50241941 99.29741669]
[14.45651054 98.18817902]
[29.41544151 97.07894897]
[44.37437057 95.96971130]
[59.32367325 94.73748779]
[74.26233673 93.38237000]
[89.20099640 92.02725220]
[74.27540588 90.53503418]
[60.58963776 84.39502716]
[49.55114365 74.23866272]
[42.29513168 61.11044312]
[39.56781006 46.36046982]
[41.64966583 31.50564194]
[48.32659149 18.07364082]
[58.91193390 7.44582272]
[72.31708527 0.71515757]
[87.16345978 -1.42616820]
[101.92424011 1.24206066]
[115.08141327 8.44544220]
[125.28189850 19.44317436]
[131.47666931 33.10424423]
[133.02864075 48.02374268]
[129.77821350 62.66733170]
[122.05967712 75.52906036]
[110.66734314 85.28588867]
[123.69865417 77.85722351]
[136.72994995 70.42855835]
[149.76126099 62.99988937]
[162.79257202 55.57122421]
[175.82386780 48.14255905]
[188.85517883 40.71389389]
[201.88648987 33.28522873]
[203.95884705 29.42564964]
[206.86468506 26.70893669]
[210.13890076 25.25704956]
[213.32490540 25.02717972]
[216.02789307 25.82898331]
[229.51939392 19.27313423]
[243.01091003 12.71728516]
[256.50241089 6.16143608]
[269.99392700 -0.39441288]
[283.48544312 -6.95026159]
[289.84973145 -13.52690697]
[297.25320435 -13.50093651]
[310.85070801 -19.83399963]
[324.44821167 -26.16706085]
[336.25360107 -38.33541870]
[351.21447754 -30.35991859]
[347.69226074 -13.77588463]
[330.78128052 -12.56954861]
[317.18377686 -6.23648691]
[303.58627319 0.09657501]
[290.04129028 6.54124832]
[276.54977417 13.09709740]
[263.05825806 19.65294647]
[249.56675720 26.20879555]
[236.07524109 32.76464462]
[222.58374023 39.32049179]
[209.31515503 46.31653595]
[196.28384399 53.74520111]
[183.25253296 61.17386627]
[170.22123718 68.60253143]
[157.18992615 76.03119659]
[144.15861511 83.45986176]
[131.12731934 90.88852692]
[118.09600830 98.31719208]
[116.20455933 105.57476807]
[131.20210266 105.30303955]
[145.20004272 99.91253662]
[159.21974182 105.24619293]
[166.09507751 118.57772827]
[162.31172180 133.09275818]
[149.80352783 141.37196350]
[134.96405029 139.18345642]
[125.37885284 127.64712524]
[112.42166138 120.08992004]
[110.53021240 127.34749603]
[118.27809906 140.19157410]
[126.02597809 153.03565979]
[133.77386475 165.87973022]
[141.52174377 178.72380066]
[147.13896179 182.26258850]
[149.72492981 187.34727478]
[149.30520630 192.12022400]
[156.62644958 205.21217346]
[163.94769287 218.30413818]
[179.04023743 216.49201965]
[193.67604065 220.59831238]
[205.62326050 229.99685669]
[213.06001282 243.25440979]
[214.85227966 258.34933472]
[210.72673035 272.97970581]
[201.31248474 284.91455078]
[188.04515076 292.33386230]
[172.94790649 294.10626221]
[158.32295227 289.96148682]
[146.40049744 280.53155518]
[138.99864197 267.25445557]
[137.24610901 252.15489197]
[141.41012573 237.53541565]
[150.85574341 225.62538147]
[143.53450012 212.53341675]
[136.21325684 199.44146729]
[128.67767334 186.47169495]
[120.92978668 173.62760925]
[113.18190002 160.78353882]
[105.43402100 147.93945312]
[97.68614197 135.09538269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 81]
[10 80]
[12 78]
[13 77]
[14 76]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[22 66]
[23 65]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[107 148]
[108 147]
[109 146]
[110 145]
[111 144]
[112 143]
[113 142]
[114 141]
[119 140]
[120 139]
[121 138]
[122 137]
[123 136]
[124 135]
[126 134]
[127 133]
[128 132]
[159 190]
[160 189]
[161 188]
[162 187]
[163 186]
[166 185]
[167 184]
[168 183]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
