%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGUGGGUGCUCGCGGAAGCGCUGCUCUCGCAGAGCCGGGACCCCCGGGCCCUGCUUGGGGCGCUGUGCCAAGGGGAGGCAUCCGCGGAGCGCGUGG\
) } def
/len { sequence length } bind def

/coor [
[52.44360352 589.36907959]
[37.66938400 592.94549561]
[22.65191650 590.59094238]
[9.68125820 582.66436768]
[0.73533905 570.37457275]
[-2.82165337 555.59564209]
[-0.44730335 540.58129883]
[7.49631834 527.62109375]
[19.79786682 518.69134521]
[34.58144379 515.15380859]
[36.90491867 500.33483887]
[39.22838974 485.51586914]
[41.55186462 470.69689941]
[43.87533569 455.87796021]
[46.19880676 441.05899048]
[48.29153824 426.20568848]
[50.15301895 411.32165527]
[52.01449966 396.43759155]
[53.87598419 381.55355835]
[55.73746490 366.66949463]
[49.63941193 353.08044434]
[59.02948761 340.34713745]
[60.89096832 325.46307373]
[58.55644608 318.30935669]
[63.04878998 310.14779663]
[65.37226105 295.32882690]
[59.69977951 281.55667114]
[69.48131561 269.12155151]
[71.80478668 254.30259705]
[74.12825775 239.48364258]
[76.45173645 224.66468811]
[69.21959686 208.75878906]
[80.67988586 194.45114136]
[82.54136658 179.56709290]
[84.40284729 164.68304443]
[78.30479431 151.09396362]
[87.69487000 138.36065674]
[89.55635071 123.47661591]
[91.41783142 108.59256744]
[89.78804779 93.68136597]
[84.75530243 79.55085754]
[79.72254944 65.42034149]
[74.68979645 51.28982544]
[63.67964935 38.39746857]
[73.02025604 24.24863815]
[89.20188141 29.30742264]
[88.82031250 46.25707626]
[93.85306549 60.38759232]
[98.88581085 74.51810455]
[103.91856384 88.64862061]
[111.39589691 89.23124695]
[133.82791138 90.97913361]
[140.98870850 77.79873657]
[148.14950562 64.61833191]
[155.31030273 51.43793106]
[162.47109985 38.25753021]
[161.50540161 21.88684082]
[175.34696960 13.09235764]
[189.75679016 20.92108917]
[189.91127014 37.31950760]
[175.65150452 45.41832733]
[168.49070740 58.59872818]
[161.32991028 71.77912903]
[154.16909790 84.95953369]
[147.00830078 98.13993073]
[106.30187988 110.45404816]
[104.44039917 125.33809662]
[102.57891846 140.22213745]
[108.54382324 154.87582397]
[99.28689575 166.54452515]
[97.42541504 181.42857361]
[95.56393433 196.31262207]
[102.89675903 207.06373596]
[100.92652130 219.51936340]
[91.27069092 226.98815918]
[88.94721985 241.80711365]
[86.62374115 256.62606812]
[84.30027008 271.44503784]
[89.80656433 286.27713013]
[80.19121552 297.65231323]
[77.86774445 312.47125244]
[75.77501678 327.32455444]
[73.91353607 342.20861816]
[79.87844086 356.86230469]
[70.62151337 368.53097534]
[68.76003265 383.41503906]
[66.89855194 398.29907227]
[65.03707123 413.18313599]
[63.17558670 428.06716919]
[65.23799133 437.15228271]
[61.01776505 443.38247681]
[58.69429398 458.20141602]
[56.37081909 473.02038574]
[54.04734802 487.83935547]
[51.72387314 502.65829468]
[49.40040207 517.47723389]
[62.39186859 525.36968994]
[71.37009430 537.63586426]
[74.96595764 552.40539551]
[72.63111115 567.42596436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 96]
[11 95]
[12 94]
[13 93]
[14 92]
[15 91]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[22 83]
[23 82]
[25 81]
[26 80]
[28 78]
[29 77]
[30 76]
[31 75]
[33 72]
[34 71]
[35 70]
[37 68]
[38 67]
[39 66]
[40 50]
[41 49]
[42 48]
[43 47]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
