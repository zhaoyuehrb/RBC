%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCCCCUGCGCCCGCCCCUCCCCCUUCGCUUUCCUUCUCCCCCCGCCUCGGCUCCGACAUGAGGGGCCGGCGGGGCAGGCCGCCCAAGCAGCCCGCGGCUCCCGCUGCGGAGCGCUGCGCCCCGGCCCCGCCGCCACCGCCGCCGCCGCCCACGUCCG\
) } def
/len { sequence length } bind def

/coor [
[-35.58329391 242.19985962]
[-50.23842239 245.39785767]
[-65.19144440 244.21165466]
[-79.15906525 238.74304199]
[-90.94254303 229.46136475]
[-99.53060150 217.16317749]
[-104.18619537 202.90396118]
[-104.50976562 187.90744019]
[-100.47354889 173.46067810]
[-92.42394257 160.80351257]
[-81.05177307 151.02221680]
[-67.33610535 144.95707703]
[-82.23468018 143.21568298]
[-97.13325500 141.47428894]
[-112.03182983 139.73289490]
[-126.63694000 145.81578064]
[-138.37991333 136.65324402]
[-153.27848816 134.91184998]
[-168.17706299 133.17045593]
[-183.07563782 131.42906189]
[-197.97421265 129.68766785]
[-212.87278748 127.94628143]
[-227.77136230 126.20488739]
[-234.99494934 136.47593689]
[-245.84701538 142.64805603]
[-258.22296143 143.59526062]
[-269.75265503 139.19807434]
[-278.25454712 130.35459900]
[-282.14813232 118.79784393]
[-296.96795654 116.48006439]
[-311.78781128 114.16228485]
[-320.78375244 124.64234924]
[-333.68536377 129.26013184]
[-347.07473755 126.90621948]
[-357.46078491 118.30329132]
[-362.18951416 105.78900909]
[-376.96163940 103.18428802]
[-384.79367065 116.18519592]
[-396.79571533 125.47582245]
[-411.34454346 129.79969788]
[-426.47256470 128.57203674]
[-440.13385010 121.95889282]
[-450.48083496 110.85462189]
[-456.11413574 96.76099396]
[-456.27191162 81.58405304]
[-450.93283081 67.37635803]
[-440.81893921 56.05937576]
[-427.29809570 49.16364670]
[-412.19885254 47.62175369]
[-397.56326294 51.64222717]
[-385.37069702 60.68133163]
[-377.27005005 73.51660156]
[-374.35690308 88.41217041]
[-359.58480835 91.01689911]
[-348.17089844 79.24996948]
[-331.83166504 76.56047058]
[-316.95321655 84.19965363]
[-309.47003174 99.34243774]
[-294.65017700 101.66021729]
[-279.83035278 103.97799683]
[-268.00619507 90.91315460]
[-250.56030273 87.49480438]
[-234.39765930 95.26695251]
[-226.02996826 111.30631256]
[-211.13139343 113.04770660]
[-196.23281860 114.78910065]
[-181.33424377 116.53049469]
[-166.43566895 118.27188873]
[-151.53709412 120.01328278]
[-136.63851929 121.75467682]
[-123.09905243 115.54723358]
[-110.29043579 124.83432007]
[-95.39186096 126.57571411]
[-80.49328613 128.31710815]
[-65.59471130 130.05850220]
[-50.62924957 129.04118347]
[-36.10340118 125.29956055]
[-21.57755089 121.55794525]
[-7.05170250 117.81632233]
[-1.33054423 113.07919312]
[7.79212236 114.14590454]
[22.38779640 110.68666840]
[36.98346710 107.22743225]
[47.58333206 96.76358032]
[62.79586029 101.10977936]
[77.39153290 97.65054321]
[80.27423859 85.13727570]
[90.03684998 75.26474762]
[104.54103088 71.72786713]
[119.74811554 76.62200928]
[131.60400391 67.43300629]
[143.45989990 58.24399567]
[148.35693359 50.47353745]
[155.63595581 48.99441910]
[167.66780090 40.03704071]
[179.61222839 30.96341896]
[191.46812439 21.77441216]
[203.32402039 12.58540344]
[215.17990112 3.39639497]
[227.03579712 -5.79261303]
[238.89167786 -14.98162174]
[250.74757385 -24.17062950]
[256.44546509 -39.54808426]
[272.65490723 -42.03519058]
[282.70104980 -29.07342529]
[276.24923706 -13.99674225]
[259.93658447 -12.31473923]
[248.08068848 -3.12573123]
[236.22480774 6.06327677]
[224.36891174 15.25228500]
[212.51301575 24.44129372]
[200.65713501 33.63030243]
[188.80123901 42.81930923]
[185.42427063 49.43505478]
[176.62518311 52.06888580]
[164.59333801 61.02626801]
[152.64891052 70.09988403]
[140.79301453 79.28889465]
[128.93711853 88.47790527]
[130.96708679 103.33991241]
[144.85295105 109.01290894]
[158.73881531 114.68590546]
[172.96992493 105.58770752]
[189.65551758 106.73497772]
[202.25497437 117.48011017]
[205.94721985 133.45211792]
[219.94047546 138.85478210]
[233.93373108 144.25744629]
[247.92698669 149.66012573]
[264.88079834 149.72448730]
[269.51223755 166.03356934]
[255.12261963 174.99880981]
[242.52430725 163.65338135]
[228.53105164 158.25070190]
[214.53779602 152.84803772]
[200.54454041 147.44537354]
[190.02984619 155.71635437]
[176.69252014 157.71542358]
[164.01271057 152.81248474]
[155.35278320 142.19264221]
[153.06581116 128.57176208]
[139.17996216 122.89876556]
[125.29409790 117.22576904]
[99.61462402 126.66361237]
[80.85077667 112.24621582]
[66.25509644 115.70545197]
[54.61125565 126.41673279]
[40.44270706 121.82310486]
[25.84703445 125.28234100]
[11.25136089 128.74157715]
[-3.31008530 132.34217834]
[-17.83593559 136.08378601]
[-32.36178589 139.82540894]
[-46.88763428 143.56703186]
[-32.47444153 147.72152710]
[-19.88368607 155.87461853]
[-10.19593239 167.32658386]
[-4.24260521 181.09458923]
[-2.53463125 195.99702454]
[-5.21859264 210.75494385]
[-12.06414604 224.10180664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 75]
[13 74]
[14 73]
[15 72]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[29 60]
[30 59]
[31 58]
[36 54]
[37 53]
[76 154]
[77 153]
[78 152]
[79 151]
[81 150]
[82 149]
[83 148]
[85 146]
[86 145]
[90 119]
[91 118]
[92 117]
[94 116]
[95 115]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[120 143]
[121 142]
[122 141]
[126 136]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
