%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGCAUUCUUCCAUGUCCUCAGCCUCCUCUUUCCUUCCUAGGACUGGCUUCCAUGGAGGUGAAGAACUGCUGCAUGGUGACAGAGUUCAUCCUUUUGGGAAUCCCACACACAGAGGGGCUGGAGAUGACACUUUUUGUCUUAUUCUUGCCCU\
) } def
/len { sequence length } bind def

/coor [
[124.57118988 452.10034180]
[113.68507385 440.64312744]
[114.17241669 424.84634399]
[125.74409485 414.08197021]
[126.04809570 399.08505249]
[126.35210419 384.08813477]
[126.65610504 369.09121704]
[111.97761536 366.00222778]
[100.32172394 356.56082153]
[94.25218201 342.84365845]
[95.10399628 327.86785889]
[102.68981934 314.92739868]
[115.34111786 306.86859131]
[130.27520752 305.46395874]
[144.20729065 311.02246094]
[154.07296753 322.32150269]
[157.70227051 336.87692261]
[154.68278503 322.18399048]
[151.66331482 307.49102783]
[141.52241516 296.58178711]
[146.32337952 281.50659180]
[143.30389404 266.81365967]
[140.28442383 252.12071228]
[137.26493835 237.42774963]
[134.24546814 222.73480225]
[131.22598267 208.04185486]
[126.77275085 202.08801270]
[128.29737854 193.02066040]
[125.57630157 178.26953125]
[122.85522461 163.51840210]
[120.13415527 148.76728821]
[117.41307831 134.01615906]
[74.14940643 104.30982971]
[60.42569733 98.25510406]
[46.70198059 92.20038605]
[32.91761398 86.28504181]
[19.07400894 80.50970459]
[5.23040438 74.73435974]
[-8.61320114 68.95901489]
[-22.45680618 63.18367004]
[-36.92629623 68.95182037]
[-50.88341141 62.89759445]
[-56.29328918 49.06760025]
[-70.13689423 43.29225540]
[-83.98049927 37.51691437]
[-98.49987030 43.75898361]
[-113.14928436 37.82851791]
[-119.23749542 23.24396515]
[-113.15248108 8.65807629]
[-98.50437164 2.72440147]
[-83.98363495 8.96328545]
[-78.20515442 23.67330742]
[-64.36154938 29.44865227]
[-50.51794815 35.22399521]
[-36.88330460 29.33908653]
[-22.76165009 34.99889755]
[-16.68146324 49.34006500]
[-2.83785748 55.11540985]
[11.00574780 60.89075089]
[24.84935379 66.66609955]
[38.69295883 72.44143677]
[46.12069702 72.11235046]
[52.75670624 78.47666931]
[66.48042297 84.53139496]
[80.20413208 90.58612061]
[92.85273743 82.52306366]
[93.15673828 67.52614594]
[93.46074677 52.52922440]
[93.76474762 37.53230667]
[94.06875610 22.53538704]
[91.10031891 13.83311176]
[94.53396606 7.23843956]
[95.14184570 -7.74923801]
[95.74973297 -22.73691559]
[96.20569611 -37.72998428]
[96.50970459 -52.72690201]
[90.78561401 -68.68532562]
[104.53578949 -78.60343933]
[117.87272644 -68.13623810]
[111.50662231 -52.42289734]
[111.20261383 -37.42597961]
[114.22917175 -30.63484001]
[110.73740387 -22.12903214]
[110.12952423 -7.14135408]
[109.52163696 7.84632349]
[109.06567383 22.83939171]
[108.76166534 37.83631134]
[108.45766449 52.83322906]
[108.15365601 67.83014679]
[107.84965515 82.82706451]
[114.33213806 86.59898376]
[121.78883362 73.58370209]
[125.04270935 58.94087601]
[139.96867371 57.45244217]
[146.05012512 71.16433716]
[134.92774963 81.22875214]
[127.29711151 94.14282990]
[133.77960205 97.91474915]
[146.66744995 90.23990631]
[159.55531311 82.56507111]
[172.44316101 74.89022827]
[182.95835876 61.59108734]
[198.64865112 68.01376343]
[196.82048035 84.86885834]
[180.11801147 87.77808380]
[167.23014832 95.45292664]
[154.34230042 103.12776184]
[141.45443726 110.80260468]
[156.40655518 109.60504913]
[167.37550354 119.83648682]
[167.21989441 134.83567810]
[156.04104614 144.83734131]
[141.11698914 143.32983398]
[132.16419983 131.29507446]
[134.88528442 146.04620361]
[137.60635376 160.79733276]
[140.32743835 175.54846191]
[143.04850769 190.29959106]
[145.91893005 205.02238464]
[148.93841553 219.71533203]
[151.95788574 234.40827942]
[154.97737122 249.10122681]
[157.99684143 263.79418945]
[161.01632690 278.48712158]
[171.37319946 290.44729614]
[166.35626221 304.47155762]
[169.37573242 319.16448975]
[172.39521790 333.85745239]
[179.67474365 346.97265625]
[190.54663086 357.30715942]
[201.41851807 367.64166260]
[212.29042053 377.97616577]
[228.30020142 379.00878906]
[237.35623169 392.25143433]
[232.51147461 407.54550171]
[217.48243713 413.15866089]
[203.79809570 404.78497314]
[201.95591736 388.84805298]
[191.08401489 378.51354980]
[180.21212769 368.17904663]
[169.34024048 357.84454346]
[162.41844177 360.73220825]
[168.19377136 374.57580566]
[177.96434021 385.95721436]
[170.15925598 398.76660156]
[155.56489563 395.30181885]
[154.35017395 380.35116577]
[148.57482910 366.50756836]
[141.65303040 369.39523315]
[141.34902954 384.39215088]
[141.04501343 399.38906860]
[140.74101257 414.38598633]
[151.86695862 425.61047363]
[151.71372986 441.41400146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 152]
[5 151]
[6 150]
[7 149]
[17 128]
[18 127]
[19 126]
[21 124]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[28 118]
[29 117]
[30 116]
[31 115]
[32 114]
[33 65]
[34 64]
[35 63]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[43 54]
[44 53]
[45 52]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[72 85]
[73 84]
[74 83]
[75 81]
[76 80]
[98 108]
[99 107]
[100 106]
[101 105]
[129 141]
[130 140]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
