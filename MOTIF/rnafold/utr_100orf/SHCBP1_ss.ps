%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUCACGUCGUUGCCUGGGCUGCCGUCCGCGGAAAUUUGAAAUGGCUGACGGGUCGCUGACGGGCGGCGGUCUGGAGGCAGCGGCCAUGGCGCCGGAGCGCAUGGGCUGGGCGGUGGAGCAGGAGCUGGCGUCUCUGGAGA\
) } def
/len { sequence length } bind def

/coor [
[81.34262085 98.74295044]
[68.03746033 91.81671906]
[54.73229980 84.89048767]
[41.42713547 77.96426392]
[28.12197304 71.03803253]
[17.86295700 74.92941284]
[7.38035583 72.53891754]
[0.12671968 64.90409088]
[-1.64798033 54.74731064]
[-14.63836098 47.24731064]
[-27.62874222 39.74731064]
[-40.61912537 32.24731064]
[-53.60950470 24.74731064]
[-66.59988403 17.24731064]
[-79.59026337 9.74731159]
[-92.58065033 2.24731135]
[-105.57102966 -5.25268841]
[-118.56140900 -12.75268841]
[-131.71231079 -19.96751976]
[-145.01747131 -26.89374924]
[-158.32263184 -33.81997681]
[-171.62779236 -40.74620819]
[-184.93296814 -47.67243576]
[-198.23812866 -54.59866714]
[-211.54328918 -61.52489471]
[-224.84844971 -68.45112610]
[-238.15361023 -75.37735748]
[-251.45877075 -82.30358124]
[-264.76394653 -89.22981262]
[-278.06909180 -96.15604401]
[-291.37426758 -103.08226776]
[-304.75418091 -109.86295319]
[-318.20727539 -116.49728394]
[-331.66036987 -123.13161469]
[-346.46389771 -118.28464508]
[-360.01272583 -125.20443726]
[-364.54235840 -139.34721375]
[-377.99545288 -145.98155212]
[-391.44854736 -152.61587524]
[-404.90164185 -159.25021362]
[-418.35473633 -165.88453674]
[-431.08041382 -157.28500366]
[-446.40209961 -156.21643066]
[-460.19830322 -162.96629333]
[-468.75790405 -175.71888733]
[-469.77844238 -191.04382324]
[-462.98538208 -204.81880188]
[-450.20602417 -213.33839417]
[-434.87792969 -214.31088257]
[-421.12432861 -207.47468567]
[-412.64483643 -194.66867065]
[-411.72039795 -179.33763123]
[-398.26730347 -172.70329285]
[-384.81420898 -166.06896973]
[-371.36111450 -159.43464661]
[-357.90802002 -152.80030823]
[-343.93035889 -157.81629944]
[-330.19250488 -151.27978516]
[-325.02603149 -136.58470154]
[-311.57293701 -129.95037842]
[-298.11984253 -123.31604767]
[-290.67330933 -123.17760468]
[-284.44802856 -116.38743591]
[-271.14288330 -109.46120453]
[-257.83770752 -102.53497314]
[-244.53254700 -95.60874176]
[-231.22738647 -88.68251801]
[-217.92222595 -81.75628662]
[-204.61705017 -74.83005524]
[-191.31188965 -67.90383148]
[-178.00672913 -60.97760010]
[-164.70156860 -54.05136871]
[-151.39640808 -47.12514114]
[-138.09124756 -40.19891357]
[-124.78607941 -33.27268219]
[-119.97639465 -33.85617065]
[-114.75934601 -31.37110901]
[-111.06140900 -25.74307060]
[-98.07102966 -18.24307060]
[-85.08065033 -10.74306965]
[-72.09026337 -3.24306965]
[-59.09988403 4.25693035]
[-46.10950470 11.75693035]
[-33.11912537 19.25692940]
[-20.12874222 26.75692940]
[-7.13836145 34.25693130]
[5.85201979 41.75693130]
[25.08617401 40.26547241]
[35.04820251 57.73286819]
[48.35336304 64.65909576]
[61.65852737 71.58532715]
[74.96369171 78.51155853]
[88.26885223 85.43778992]
[108.08721924 83.13954926]
[118.69964600 100.03411102]
[132.42932129 106.07530975]
[146.15899658 112.11650848]
[159.88865662 118.15770721]
[173.61833191 124.19891357]
[187.34800720 130.24011230]
[201.14276123 136.13117981]
[215.00094604 141.87144470]
[228.85914612 147.61169434]
[238.73995972 142.84098816]
[249.39102173 144.30876160]
[257.28247070 151.28234863]
[259.93563843 161.24580383]
[273.53027344 167.58506775]
[287.12487793 173.92434692]
[300.71948242 180.26362610]
[317.00411987 173.97373962]
[332.51062012 181.23023987]
[337.89834595 197.12557983]
[351.62802124 203.16677856]
[366.26507568 197.20582581]
[380.79739380 203.41766357]
[386.60327148 218.11689758]
[380.23812866 232.58273315]
[365.47833252 238.23286438]
[351.08059692 231.71516418]
[345.58682251 216.89645386]
[331.85714722 210.85525513]
[320.57617188 217.17198181]
[307.52453613 215.79391479]
[297.51834106 207.00312805]
[294.38021851 193.85823059]
[280.78561401 187.51896667]
[267.19097900 181.17968750]
[253.59637451 174.84040833]
[234.56539917 178.00256348]
[223.11889648 161.46987915]
[209.26069641 155.72962952]
[195.40251160 149.98937988]
[187.96284485 150.33827209]
[181.30680847 143.96978760]
[167.57713318 137.92858887]
[153.84745789 131.88737488]
[140.11778259 125.84618378]
[126.38811493 119.80498505]
[112.65844727 113.76377869]
[104.93833923 118.03582001]
[96.11878967 118.29245758]
[88.16333008 114.47657776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 61]
[33 60]
[34 59]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[95 140]
[96 139]
[97 138]
[98 137]
[99 136]
[100 135]
[101 133]
[102 132]
[103 131]
[107 129]
[108 128]
[109 127]
[110 126]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
