%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUACCAUGGAGACCGGUAGUAACACCAGUUGUAAACCCAAGGCCAAGAGACCAUGGCCACGUUAGCCCGGCUGCAAGCUAGGUCGUCGACUGUAGGAAAUCAGUACUACUUUAGGAACAGUGUUGUAGAUCCAUUUAGAAAAAAGGAGAAUG\
) } def
/len { sequence length } bind def

/coor [
[105.05257416 166.95581055]
[106.31130219 152.00871277]
[107.57003021 137.06161499]
[99.29936981 149.57545471]
[91.02871704 162.08929443]
[82.75805664 174.60314941]
[74.48740387 187.11698914]
[78.30952454 204.15960693]
[68.83382416 218.42886353]
[52.30651474 221.39816284]
[44.28952789 234.07601929]
[36.27254105 246.75386047]
[32.91736984 263.37249756]
[16.01939201 264.74896240]
[10.01890755 248.89239502]
[23.59468842 238.73687744]
[31.61167526 226.05902100]
[39.62866211 213.38117981]
[35.06230164 201.29663086]
[38.35638428 188.60366821]
[48.52072144 180.01300049]
[61.97356033 178.84632874]
[70.24421692 166.33248901]
[78.51486969 153.81864929]
[86.78553009 141.30480957]
[95.05618286 128.79095459]
[79.93582153 118.19561768]
[75.10581207 101.80688477]
[81.04830933 87.26442719]
[72.03717041 75.27278900]
[63.02603912 63.28114700]
[54.01490402 51.28950500]
[45.00376892 39.29786301]
[35.99263763 27.30622292]
[38.15155029 42.15004730]
[37.38881302 57.13064194]
[29.14969254 69.66526794]
[15.70009327 76.30667114]
[0.73890281 75.22835541]
[-11.61927795 66.72686005]
[-17.97572327 53.14026260]
[-16.58229446 38.20512390]
[-7.82334328 26.02980232]
[7.16231203 26.68565178]
[-5.67440748 18.92558289]
[-18.51112556 11.16551685]
[-31.34784508 3.40544939]
[-44.18456268 -4.35461807]
[-58.43151093 1.79388571]
[-73.56412506 -1.63885701]
[-83.76359558 -13.33288670]
[-85.10803223 -28.79160881]
[-77.08045959 -42.07083130]
[-62.76765442 -48.06442261]
[-47.67317200 -44.46772003]
[-37.60115433 -32.66373444]
[-36.42449570 -17.19133759]
[-23.58777809 -9.43126965]
[-10.75105953 -1.67120254]
[2.08565998 6.08886480]
[14.92237949 13.84893227]
[27.60023117 5.83194447]
[26.09239960 -9.09207821]
[24.58456993 -24.01609993]
[21.45975494 -28.34016991]
[20.44777489 -32.96767044]
[21.30273056 -37.02872467]
[23.46436691 -39.88269806]
[22.86037636 -54.87053299]
[22.25638771 -69.85836792]
[13.96968555 -83.33580017]
[21.18823624 -96.36429596]
[20.58424568 -111.35213470]
[19.98025703 -126.33996582]
[19.37626839 -141.32780457]
[12.69705486 -156.91062927]
[25.82190704 -167.64256287]
[39.76776123 -158.00154114]
[34.36410141 -141.93179321]
[34.96809387 -126.94395447]
[35.57208252 -111.95612335]
[36.17607117 -96.96828461]
[44.41957092 -84.56288910]
[37.24422455 -70.46235657]
[37.84821320 -55.47452164]
[38.45220184 -40.48668671]
[39.50859451 -25.52393150]
[41.01642227 -10.59990788]
[42.52425385 4.32411432]
[47.98427582 18.29508972]
[56.99541092 30.28672981]
[66.00654602 42.27837372]
[75.01767731 54.27001190]
[84.02881622 66.26165771]
[93.03994751 78.25329590]
[110.82000732 77.50749969]
[125.30842590 90.34933472]
[126.97613525 111.20932007]
[141.97309875 110.90726471]
[156.97004700 110.60520935]
[166.41966248 96.60968781]
[182.18572998 91.03942108]
[198.01292419 95.89521027]
[207.74543762 109.08206177]
[222.73327637 108.47807312]
[237.72111511 107.87408447]
[252.70893860 107.27009583]
[267.69677734 106.66610718]
[282.68460083 106.06211853]
[297.67245483 105.45812988]
[304.17611694 91.60313416]
[316.38058472 82.36680603]
[331.48132324 79.87157440]
[346.00830078 84.69083405]
[356.62335205 95.71714783]
[360.88717651 110.41674805]
[357.82000732 125.41178131]
[348.12664795 137.25650024]
[334.03454590 143.22906494]
[318.78198242 141.95703125]
[305.87390137 133.73269653]
[298.27642822 120.44596100]
[283.28860474 121.04994965]
[268.30078125 121.65393829]
[253.31292725 122.25792694]
[238.32510376 122.86191559]
[223.33726501 123.46590424]
[208.34942627 124.06989288]
[201.98521423 135.84211731]
[190.53565979 142.97724915]
[176.94694519 143.51280212]
[164.77882385 137.20108032]
[157.27210999 125.60217285]
[142.27514648 125.90422821]
[127.27819061 126.20628357]
[140.58407593 133.13113403]
[153.88995361 140.05596924]
[168.74803162 142.11454773]
[182.55879211 147.96798706]
[194.37097168 157.21311951]
[203.37095642 169.21313477]
[208.93882751 183.14147949]
[210.69108582 198.03877258]
[208.50701904 212.87892151]
[202.53707886 226.63972473]
[193.19245911 238.37336731]
[181.11682129 247.27162170]
[167.14192200 252.72158813]
[152.23034668 254.34788513]
[137.40919495 252.03849792]
[123.69932556 245.95248413]
[112.04508209 236.50904846]
[103.24918365 224.35864258]
[97.91750336 210.33818054]
[96.41727448 195.41339111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[10 18]
[11 17]
[12 16]
[29 95]
[30 94]
[31 93]
[32 92]
[33 91]
[34 90]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[62 89]
[63 88]
[64 87]
[68 86]
[69 85]
[70 84]
[72 82]
[73 81]
[74 80]
[75 79]
[98 135]
[99 134]
[100 133]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
