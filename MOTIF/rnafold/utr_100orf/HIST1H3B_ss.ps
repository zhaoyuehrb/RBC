%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCGUACUAAACAGACAGCUCGGAAAUCCACCGGCGGUAAAGCGCCACGCAAGCAGCUGGCUACCAAGGCUGCUCGCAAGAGCGCGCCGGCUACCG\
) } def
/len { sequence length } bind def

/coor [
[97.57458496 131.91934204]
[89.33697510 130.18321228]
[81.83684540 126.35956573]
[70.66888428 136.37338257]
[59.50092316 146.38720703]
[48.33296204 156.40103149]
[43.93053055 164.61146545]
[36.65845108 166.54598999]
[25.18446350 176.20764160]
[20.52881813 184.27719116]
[13.20009327 185.98461914]
[1.43117952 195.28475952]
[-4.12177801 210.71513367]
[-20.30711365 213.35462952]
[-30.47474289 200.48796082]
[-24.16507721 185.35124207]
[-7.86896372 183.51583862]
[3.89995027 174.21569824]
[15.52280712 164.73365784]
[26.99679565 155.07199097]
[38.31913757 145.23306274]
[49.48709869 135.21925354]
[60.65506363 125.20542145]
[71.82302094 115.19160461]
[68.85577393 107.40026855]
[68.00110626 99.10695648]
[53.52233124 95.18712616]
[37.81834030 99.91118622]
[26.06223869 88.47763062]
[30.34769630 72.64833069]
[46.26620102 68.70709991]
[57.44215775 80.70835114]
[71.92093658 84.62818146]
[93.08497620 68.74445343]
[118.97414398 74.21805573]
[130.44813538 64.55640411]
[141.92211914 54.89474487]
[153.39611816 45.23308945]
[164.87010193 35.57143402]
[150.28631592 32.06242371]
[142.21240234 19.42074394]
[145.16201782 4.71361113]
[157.48620605 -3.83709264]
[172.29522705 -1.45117629]
[181.31025696 10.53753662]
[179.49118042 25.42749405]
[192.55862427 18.06258392]
[205.62606812 10.69767189]
[218.69351196 3.33276081]
[220.36254883 -13.41359043]
[231.52487183 -25.78695488]
[247.68806458 -29.09969521]
[262.51815796 -22.25338364]
[275.35025024 -30.02112770]
[283.14913940 -43.78658295]
[298.04373169 -43.75835419]
[310.87579346 -51.52610016]
[323.70785522 -59.29384232]
[336.53994751 -67.06158447]
[349.37200928 -74.82933044]
[362.20410156 -82.59707642]
[375.03616333 -90.36482239]
[387.62045288 -98.52788544]
[399.94479370 -107.07836914]
[409.51196289 -121.07498932]
[425.61004639 -115.75635529]
[424.95568848 -98.81504059]
[408.49526978 -94.75403595]
[396.17095947 -86.20355225]
[394.43966675 -81.57823944]
[389.68341064 -78.07287598]
[382.80392456 -77.53274536]
[369.97183228 -69.76499939]
[357.13977051 -61.99725723]
[344.30767822 -54.22951126]
[331.47561646 -46.46176910]
[318.64352417 -38.69402313]
[305.81146240 -30.92627907]
[298.93038940 -17.71642494]
[283.11798096 -17.18905258]
[270.28591919 -9.42130852]
[270.38574219 4.02661514]
[263.73504639 15.84032917]
[251.99885559 22.84175110]
[238.22622681 23.08595657]
[226.05842590 16.40020370]
[212.99098206 23.76511574]
[199.92353821 31.13002777]
[186.85609436 38.49493790]
[174.53175354 47.04542160]
[163.05776978 56.70707703]
[151.58378601 66.36873627]
[140.10978699 76.03038788]
[128.63580322 85.69204712]
[131.37568665 93.65228271]
[131.94554138 102.05154419]
[130.30598450 110.30890656]
[126.57041168 117.85329437]
[120.99716187 124.16290283]
[113.97170258 128.80136108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[8 20]
[9 19]
[11 18]
[12 17]
[26 33]
[27 32]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[46 89]
[47 88]
[48 87]
[49 86]
[53 81]
[54 80]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
