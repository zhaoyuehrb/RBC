%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCACCGGACGACAACAGCAGCAGCAACAACGCGGCAGCCGCCACCAUGGCCCUGCAGGCUGAUUUUGACAGGGCUGCAGAAGAUGUGAGGAAGCUGAAAGCAAGACCAGAUGAUGGAGAACUGAAAGAACUCUAUGGGCUUUACA\
) } def
/len { sequence length } bind def

/coor [
[93.21361542 257.25296021]
[92.26544189 242.28297424]
[91.31726837 227.31297302]
[90.36910248 212.34297180]
[89.42092896 197.37297058]
[85.83494568 190.85217285]
[88.61396027 182.07797241]
[87.98161316 167.09130859]
[81.88622284 162.72138977]
[75.25617218 176.17658997]
[68.62612152 189.63179016]
[66.13880157 204.42413330]
[53.70589828 212.81596375]
[39.05686569 209.59016418]
[31.29890060 196.75216675]
[35.25507736 182.28327942]
[48.46618271 175.17868042]
[59.08081436 164.58010864]
[69.69544220 153.98155212]
[63.60005188 149.61161804]
[49.20361328 153.82382202]
[38.13145828 165.12506104]
[23.74356842 161.27307129]
[9.34712982 165.48526001]
[-1.72502530 176.78649902]
[-16.11291695 172.93450928]
[-30.50935555 177.14669800]
[-37.87602234 191.12910461]
[-52.99661636 195.72727966]
[-66.90036011 188.21319580]
[-71.33840942 173.04483032]
[-63.67774582 159.22129822]
[-48.46330643 154.94387817]
[-34.72154999 162.75025940]
[-20.32511139 158.53807068]
[-10.28268528 147.53811646]
[5.13493681 151.08882141]
[19.53137398 146.87663269]
[29.57380104 135.87667847]
[44.99142075 139.42738342]
[59.38785934 135.21517944]
[53.25555038 110.46164703]
[59.52042389 88.62287140]
[46.03543091 82.05361938]
[32.55044174 75.48437500]
[19.06545258 68.91512299]
[2.17808795 67.41403198]
[-1.05437064 50.77108765]
[14.04332638 43.05773163]
[25.63470078 55.43013382]
[39.11968994 61.99938202]
[52.60468292 68.56863403]
[66.08966827 75.13788605]
[73.38932800 67.44378662]
[82.38197327 61.82094193]
[78.62712860 47.29850769]
[74.87227631 32.77607346]
[71.11742401 18.25363922]
[67.36257935 3.73120427]
[63.60772705 -10.79123020]
[52.66226196 -22.21520996]
[56.96728897 -36.47410202]
[53.21244049 -50.99653625]
[38.39113998 -55.02451324]
[27.58089828 -65.93479919]
[23.68961906 -80.79257202]
[27.76403427 -95.60117340]
[38.70814896 -106.37716675]
[53.57804871 -110.22185516]
[68.37380981 -106.10104370]
[79.11544037 -95.12319946]
[82.91349792 -80.24132538]
[78.74633026 -65.45855713]
[67.73487854 -54.75138474]
[71.48972321 -40.22895050]
[82.16661835 -29.84371376]
[78.13016510 -14.54607964]
[81.88500977 -0.02364518]
[85.63986206 14.49878979]
[89.39470673 29.02122307]
[93.14955902 43.54365921]
[96.90441132 58.06609344]
[107.06116486 58.54912186]
[116.80499268 61.45616150]
[125.56607819 66.61720276]
[132.83207703 73.73044586]
[146.02815247 66.59854889]
[154.48991394 53.23033524]
[169.36534119 53.98583221]
[182.56140137 46.85394287]
[181.93240356 31.64323044]
[187.94544983 17.72452736]
[199.35871887 7.83728218]
[213.87336731 3.90208769]
[228.59651184 6.64777327]
[240.61767578 15.47709179]
[253.81375122 8.34520149]
[267.00979614 1.21331131]
[278.06930542 -11.63674450]
[293.47875977 -4.56671047]
[290.95077515 12.19770622]
[274.14169312 14.40937710]
[260.94564819 21.54126740]
[247.74957275 28.67315674]
[248.54969788 43.56695557]
[242.78015137 57.38802338]
[231.53588867 67.37438965]
[217.01156616 71.50526428]
[202.07333374 68.90979767]
[189.69329834 60.05000687]
[176.49722290 67.18190002]
[168.97933960 80.03999329]
[153.16003418 79.79461670]
[139.96397400 86.92650604]
[144.43040466 117.90053558]
[125.23371887 147.46276855]
[137.23751831 156.45768738]
[149.24133301 165.45260620]
[161.24514771 174.44752502]
[173.24894714 183.44244385]
[185.25276184 192.43736267]
[200.69512939 190.39506531]
[212.74057007 199.68818665]
[214.59242249 214.42271423]
[226.59623718 223.41761780]
[242.89732361 228.07713318]
[242.93249512 245.03103638]
[226.65089417 249.75814819]
[217.60131836 235.42143250]
[205.59750366 226.42651367]
[190.93583679 228.78681946]
[178.63414001 219.83569336]
[176.25784302 204.44117737]
[164.25404358 195.44625854]
[152.25022888 186.45133972]
[140.24641418 177.45642090]
[128.24261475 168.46150208]
[116.23880005 159.46658325]
[102.96827698 166.45896912]
[103.60063171 181.44563293]
[104.39093018 196.42478943]
[105.33910370 211.39479065]
[106.28726959 226.36479187]
[107.23544312 241.33480835]
[108.18361664 256.30480957]
[117.71013641 269.65310669]
[110.66809082 284.46331787]
[94.30174255 285.49990845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[5 141]
[7 140]
[8 139]
[20 41]
[21 40]
[23 38]
[24 37]
[26 35]
[27 34]
[43 53]
[44 52]
[45 51]
[46 50]
[55 82]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
[62 75]
[63 74]
[86 114]
[87 113]
[89 111]
[90 110]
[96 104]
[97 103]
[98 102]
[116 138]
[117 137]
[118 136]
[119 135]
[120 134]
[121 133]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
