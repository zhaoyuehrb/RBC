%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGUUCGGAUUACUUCUUUAAGUCUCUUUUCUCUUUUUUCGCGCAAAAAUGCCGGAUCCAGCGAAAUCCGCUCCUGCUCCCAAGAAGGGCUCCAAAAAGGCUGUUACGAAAGUGCAGAAGAAGGACGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[86.18925476 774.12561035]
[70.41574097 773.13983154]
[60.02203751 761.23406982]
[61.17454910 745.47186279]
[73.18950653 735.20465088]
[74.12512970 720.23382568]
[75.06076050 705.26306152]
[75.84060669 690.28332520]
[76.46458435 675.29632568]
[62.24922943 668.06280518]
[52.56395340 655.31713867]
[49.37983704 639.56982422]
[53.38117981 623.95013428]
[63.81923676 611.58447266]
[78.65171051 604.97070312]
[78.96376038 589.97393799]
[79.27581787 574.97723389]
[79.58787537 559.98046875]
[79.89993286 544.98370361]
[80.21199036 529.98693848]
[68.25491333 521.14575195]
[63.74329376 506.78927612]
[68.60727692 492.36029053]
[81.18014526 483.45922852]
[81.49220276 468.46246338]
[81.80426025 453.46572876]
[82.11631775 438.46896362]
[74.64546967 425.58349609]
[82.66819000 411.94726562]
[82.98024750 396.95050049]
[83.29229736 381.95376587]
[83.60435486 366.95700073]
[83.91641235 351.96026611]
[84.22846985 336.96350098]
[72.27139282 328.12231445]
[67.75977325 313.76580811]
[72.62375641 299.33685303]
[85.19663239 290.43579102]
[85.50868225 275.43902588]
[85.82073975 260.44226074]
[86.13279724 245.44552612]
[86.44485474 230.44876099]
[86.75691223 215.45201111]
[77.47293091 200.59242249]
[87.05565643 184.90321350]
[87.05565643 169.90321350]
[87.05565643 154.90321350]
[74.55517578 163.19404602]
[60.21521378 158.79344177]
[54.51711273 144.91786194]
[61.62572861 131.70924377]
[76.34523773 128.82202148]
[87.91658783 138.36592102]
[89.47416687 123.44699860]
[91.03174591 108.52809143]
[88.08626556 93.82012939]
[80.90375519 80.65154266]
[73.72124481 67.48296356]
[66.53874207 54.31438065]
[51.13383865 52.45196152]
[39.78865433 41.86581802]
[36.86564255 26.62653732]
[43.48876190 12.59393692]
[57.11128998 5.16383457]
[72.49507904 7.19325781]
[83.72475433 17.90185165]
[86.48227692 33.17194366]
[79.70732117 47.13187027]
[86.88983154 60.30045319]
[94.07234192 73.46903992]
[101.25485229 86.63761902]
[116.15675354 84.92492676]
[120.16448975 70.47023773]
[119.44329071 61.29790497]
[124.40888214 55.75817871]
[128.71646118 41.38999557]
[133.02404785 27.02181244]
[129.57568359 11.58097935]
[140.64199829 1.61173177]
[144.94958496 -12.75645256]
[140.64933777 -28.58174515]
[152.39474487 -40.02627945]
[168.10314941 -35.31689835]
[171.61508179 -19.29821014]
[159.31776428 -8.44886780]
[155.01017761 5.91931629]
[158.76666260 20.33244133]
[147.39224243 31.32939720]
[143.08465576 45.69758224]
[138.77706909 60.06576538]
[134.61918640 74.47798157]
[130.61143494 88.93267059]
[145.29273987 92.00827789]
[156.13394165 102.37496948]
[159.86309814 116.90402222]
[155.35473633 131.21047974]
[143.96951294 140.97656250]
[129.14353943 143.25482178]
[115.35138702 137.35765076]
[106.75561523 125.06485748]
[105.95066071 110.08567047]
[104.39308167 125.00458527]
[102.83550262 139.92349243]
[102.05565643 154.90321350]
[102.05565643 169.90321350]
[102.05565643 184.90321350]
[110.62894440 194.59613037]
[110.28369141 207.13006592]
[101.75366211 215.76406860]
[101.44160461 230.76081848]
[101.12955475 245.75758362]
[100.81749725 260.75433350]
[100.50543976 275.75109863]
[100.19338226 290.74783325]
[112.38510132 300.16421509]
[116.64464569 314.78302002]
[111.53972626 328.93942261]
[99.22521973 337.27554321]
[98.91316986 352.27230835]
[98.60111237 367.26907349]
[98.28905487 382.26580811]
[97.97699738 397.26257324]
[97.66493988 412.25933838]
[105.11347198 426.21746826]
[97.11306763 438.78103638]
[96.80101776 453.77777100]
[96.48896027 468.77453613]
[96.17690277 483.77130127]
[108.36862183 493.18765259]
[112.62816620 507.80648804]
[107.52324677 521.96289062]
[95.20874023 530.29901123]
[94.89668274 545.29577637]
[94.58463287 560.29248047]
[94.27257538 575.28924561]
[93.96051788 590.28601074]
[93.64846039 605.28277588]
[106.51553345 611.21148682]
[116.11309052 621.57342529]
[121.01013184 634.77484131]
[120.49517059 648.80249023]
[114.67942047 661.53039551]
[104.47490692 671.04235840]
[91.45159912 675.92028809]
[90.82762146 690.90728760]
[93.61090088 699.67687988]
[90.03155518 706.19866943]
[89.09592438 721.16949463]
[88.16029358 736.14025879]
[98.80341339 747.82354736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 149]
[6 148]
[7 147]
[8 145]
[9 144]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[24 128]
[25 127]
[26 126]
[27 125]
[29 123]
[30 122]
[31 121]
[32 120]
[33 119]
[34 118]
[38 114]
[39 113]
[40 112]
[41 111]
[42 110]
[43 109]
[45 106]
[46 105]
[47 104]
[53 103]
[54 102]
[55 101]
[56 71]
[57 70]
[58 69]
[59 68]
[72 92]
[73 91]
[75 90]
[76 89]
[77 88]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
