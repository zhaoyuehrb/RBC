%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGUGGGGGCGGCACUGGGAGCGCCUUCCGGAGAGACGCAGUCGGCUGCCACCCCGGGAUGGGUCGCUGGUGCCAGACCGUCGCGCGCGGGCAGCGCCCCCGGACGUCUGCCCCCUCCCGCGCCGGUGCCCUGCUGCUGCUGCUUCUGUUGCUGAGGU\
) } def
/len { sequence length } bind def

/coor [
[80.53606415 92.89698029]
[66.46318817 98.08873749]
[52.39031982 103.28048706]
[42.12113190 115.31603241]
[27.50250244 112.46208954]
[13.42963219 117.65384674]
[-0.64323789 122.84560394]
[-14.71610832 128.03735352]
[-28.78897858 133.22911072]
[-34.90995026 144.62084961]
[-46.77870178 148.63917542]
[-57.82907867 143.63893127]
[-72.00116730 148.55339050]
[-86.17325592 153.46783447]
[-100.34535217 158.38229370]
[-114.46851349 163.43563843]
[-128.54138184 168.62739563]
[-142.61425781 173.81915283]
[-156.68711853 179.01091003]
[-163.36132812 193.08544922]
[-177.70718384 198.15014648]
[-191.08396912 191.70057678]
[-205.15684509 196.89233398]
[-219.22970581 202.08409119]
[-229.49890137 214.11962891]
[-244.11753845 211.26568604]
[-258.19039917 216.45744324]
[-272.26327515 221.64920044]
[-280.25860596 235.55796814]
[-296.13903809 237.83641052]
[-307.72247314 226.73667908]
[-306.12307739 210.77355957]
[-292.56774902 202.19256592]
[-277.45501709 207.57632446]
[-263.38217163 202.38456726]
[-249.30928040 197.19281006]
[-240.04667664 185.52862549]
[-224.42146301 188.01121521]
[-210.34860229 182.81945801]
[-196.27572632 177.62770081]
[-190.29260254 164.03587341]
[-176.09466553 158.57022095]
[-161.87887573 164.93803406]
[-147.80599976 159.74627686]
[-133.73313904 154.55451965]
[-119.66026306 149.36276245]
[-114.44626617 144.06974792]
[-105.25980377 144.21020508]
[-91.08770752 139.29574585]
[-76.91561890 134.38128662]
[-62.74353027 129.46684265]
[-52.02384186 115.60033417]
[-33.98073196 119.15624237]
[-19.90786362 113.96449280]
[-5.83499384 108.77273560]
[8.23787594 103.58097839]
[22.31074715 98.38922119]
[31.57335091 86.72502899]
[47.19856644 89.20761871]
[61.27143478 84.01586151]
[75.34430695 78.82411194]
[87.47956085 70.00733185]
[96.76596832 58.22757721]
[106.05237579 46.44782257]
[108.92945099 37.72238541]
[115.63858032 34.53031540]
[125.15447998 22.93515587]
[134.67037964 11.34000015]
[144.18627930 -0.25515684]
[153.70217896 -11.85031319]
[163.21807861 -23.44547081]
[172.73397827 -35.04062653]
[182.24987793 -46.63578415]
[191.76577759 -58.23094177]
[200.22137451 -70.62056732]
[207.55068970 -83.70800781]
[214.88000488 -96.79544830]
[222.20932007 -109.88288879]
[229.53865051 -122.97032928]
[231.01533508 -132.03842163]
[237.14251709 -136.24072266]
[244.72738647 -149.18174744]
[252.31224060 -162.12275696]
[253.96669006 -171.16011047]
[260.17520142 -175.24130249]
[268.01266479 -188.03091431]
[264.85269165 -198.50695801]
[267.94485474 -208.77342224]
[276.02618408 -215.48011780]
[286.24880981 -216.57955933]
[294.58236694 -229.05160522]
[302.91592407 -241.52365112]
[311.24948120 -253.99569702]
[315.02188110 -270.52462769]
[331.94915771 -271.47531128]
[337.54861450 -255.47273254]
[323.72152710 -245.66213989]
[315.38796997 -233.19009399]
[307.05441284 -220.71804810]
[298.72085571 -208.24600220]
[298.92596436 -188.94111633]
[280.80227661 -180.19343567]
[272.96478271 -167.40382385]
[265.25326538 -154.53790283]
[257.66839600 -141.59687805]
[250.08354187 -128.65586853]
[242.62608337 -115.64101410]
[235.29676819 -102.55357361]
[227.96745300 -89.46613312]
[220.63812256 -76.37869263]
[213.30880737 -63.29125214]
[227.35391235 -68.55767822]
[242.04553223 -65.53179169]
[252.86648560 -55.14395142]
[256.48962402 -40.58810043]
[251.80097961 -26.33971405]
[240.24214172 -16.77972794]
[225.36711121 -14.84754372]
[211.74948120 -21.13724899]
[203.57627869 -33.71495056]
[203.36093140 -48.71504211]
[193.84503174 -37.11988449]
[184.32913208 -25.52472878]
[174.81323242 -13.92957115]
[165.29733276 -2.33441448]
[155.78143311 9.26074219]
[146.26553345 20.85589981]
[136.74963379 32.45105743]
[127.23374176 44.04621124]
[117.83213043 55.73423004]
[108.54572296 67.51398468]
[99.25931549 79.29373932]
[118.12606812 79.42541504]
[133.98092651 96.91247559]
[145.57609558 106.42837524]
[161.83552551 108.56440735]
[167.86457825 123.81506348]
[157.46107483 136.49177551]
[141.32723999 133.55383301]
[136.06019592 118.02352905]
[124.46503448 108.50762939]
[118.35441589 112.85623932]
[100.02257538 125.90206909]
[105.21433258 139.97492981]
[110.40608978 154.04780579]
[115.59784698 168.12068176]
[120.78960419 182.19354248]
[135.56747437 187.30711365]
[143.55665588 200.74983215]
[140.98489380 216.17449951]
[129.06649780 226.29803467]
[113.42897034 226.34040833]
[101.45587921 216.28163147]
[98.80053711 200.87113953]
[106.71672821 187.38529968]
[101.52497864 173.31243896]
[96.33322144 159.23956299]
[91.14146423 145.16668701]
[85.94970703 131.09382629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[12 51]
[13 50]
[14 49]
[15 48]
[16 46]
[17 45]
[18 44]
[19 43]
[22 40]
[23 39]
[24 38]
[26 36]
[27 35]
[28 34]
[62 132]
[63 131]
[64 130]
[66 129]
[67 128]
[68 127]
[69 126]
[70 125]
[71 124]
[72 123]
[73 122]
[74 121]
[75 111]
[76 110]
[77 109]
[78 108]
[79 107]
[81 106]
[82 105]
[83 104]
[85 103]
[86 102]
[90 100]
[91 99]
[92 98]
[93 97]
[134 141]
[135 140]
[143 159]
[144 158]
[145 157]
[146 156]
[147 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
