%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCAUGGUCCCGCAGCCCCAGGCCCACACUGAAAGCAUGUCGAUCCAGGAGAACAUAUCAUCCCUGCAGCUUCGGUCAUGGGUCUCUAAGUCCCAAAGAGACUUAGCAAAGUCCAUCCUGAUUGGGGCUCCAGGAG\
) } def
/len { sequence length } bind def

/coor [
[57.47119904 347.73037720]
[43.37804031 340.06469727]
[40.72635651 324.24230957]
[51.55029297 312.40078735]
[52.22326660 297.41589355]
[52.89624023 282.43096924]
[50.03032684 275.55102539]
[53.75616837 267.11853027]
[54.76520538 252.15249634]
[55.77423859 237.18647766]
[43.47345352 245.77079773]
[28.67053032 243.34729004]
[19.74940491 231.28852844]
[21.76274109 216.42425537]
[33.57024384 207.17315674]
[48.48449326 208.77478027]
[58.05863190 220.32241821]
[61.06747055 205.62728882]
[64.07631683 190.93215942]
[67.08515167 176.23703003]
[70.09399414 161.54190063]
[73.10283661 146.84677124]
[86.47802734 93.02706909]
[77.39118195 81.09270477]
[68.30432892 69.15833282]
[59.21747971 57.22396851]
[50.13062668 45.28960037]
[41.04377747 33.35523224]
[31.95692635 21.42086411]
[14.83328247 14.75339127]
[13.19860935 -2.68391061]
[3.84626245 -14.41138268]
[-5.50608444 -26.13885498]
[-14.85843182 -37.86632919]
[-24.21077919 -49.59379959]
[-33.56312561 -61.32126999]
[-41.42796707 -66.13101196]
[-42.99020004 -73.41843414]
[-52.07705307 -85.35279846]
[-59.83198929 -90.33779907]
[-61.23031616 -97.65843964]
[-70.04709625 -109.79369354]
[-73.98824310 -95.32070923]
[-86.90480042 -87.69427490]
[-101.48121643 -91.23377991]
[-109.46183777 -103.93456268]
[-106.32667542 -118.60325623]
[-93.85139465 -126.93196869]
[-79.10125732 -124.20330811]
[-86.20928192 -137.41224670]
[-93.31731415 -150.62117004]
[-100.42534637 -163.83010864]
[-107.30498505 -169.96687317]
[-107.54089355 -177.41613770]
[-114.35074615 -190.78123474]
[-129.69726562 -193.07553101]
[-140.74069214 -203.97612000]
[-143.23457336 -219.29147339]
[-136.21998596 -233.13253784]
[-122.39416504 -240.17713928]
[-107.07343292 -237.71649170]
[-96.14891815 -226.69676208]
[-93.82131958 -211.35523987]
[-100.98564911 -197.59109497]
[-94.17579651 -184.22598267]
[-87.21640778 -170.93814087]
[-80.10838318 -157.72920227]
[-73.00035095 -144.52027893]
[-65.89231873 -131.31134033]
[-57.91183853 -118.61047363]
[-49.09506226 -106.47521973]
[-40.14268494 -94.43965149]
[-31.05583191 -82.50528717]
[-21.83565331 -70.67362213]
[-12.48330688 -58.94614792]
[-3.13095951 -47.21867371]
[6.22138739 -35.49120331]
[15.57373428 -23.76372910]
[24.92608070 -12.03625774]
[36.95656204 -10.34921455]
[44.83898163 -0.58331978]
[43.89129257 12.33401299]
[52.97814560 24.26838112]
[62.06499481 36.20274734]
[71.15184784 48.13711929]
[80.23869324 60.07148743]
[89.32554626 72.00585175]
[98.41239929 83.94022369]
[112.62534332 88.73524475]
[127.08478546 84.74468994]
[141.54421997 80.75414276]
[156.00367737 76.76358795]
[170.46311951 72.77303314]
[184.92256165 68.78247833]
[199.38200378 64.79193115]
[205.71955872 50.49614334]
[219.78620911 43.66510391]
[234.94012451 47.52421570]
[244.02609253 60.25132370]
[242.75398254 75.83708191]
[231.72445679 86.92236328]
[216.14530945 88.27304077]
[203.37255859 79.25137329]
[188.91310120 83.24192047]
[174.45365906 87.23247528]
[159.99421692 91.22303009]
[145.53477478 95.21358490]
[131.07533264 99.20413208]
[116.61589050 103.19468689]
[115.19400787 110.55867004]
[126.52711487 120.38520050]
[112.35022736 125.28663635]
[110.92834473 132.65061951]
[122.86270905 141.73747253]
[134.79707336 150.82431030]
[146.73144531 159.91116333]
[162.35708618 157.54161072]
[175.03189087 166.98220825]
[177.23611450 182.63203430]
[167.66203308 195.20631409]
[151.98977661 197.24494934]
[139.51742554 187.53846741]
[137.64459229 171.84553528]
[125.71022797 162.75868225]
[113.77585602 153.67182922]
[101.84149170 144.58499146]
[87.79796600 149.85560608]
[84.78912354 164.55073547]
[81.78028870 179.24586487]
[78.77144623 193.94099426]
[75.76260376 208.63612366]
[72.75376129 223.33126831]
[70.74026489 238.19551086]
[69.73122406 253.16152954]
[68.72219086 268.12756348]
[67.88113403 283.10394287]
[67.20816040 298.08886719]
[66.53519440 313.07376099]
[76.25408936 325.83786011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[6 136]
[8 135]
[9 134]
[10 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 74]
[38 73]
[39 72]
[41 71]
[42 70]
[49 69]
[50 68]
[51 67]
[52 66]
[54 65]
[55 64]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
