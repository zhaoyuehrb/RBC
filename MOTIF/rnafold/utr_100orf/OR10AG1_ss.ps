%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAUUUGUUCUUUUGGGGUUUUCUGAUAUUCCCAAUCUCCACUGGAUGCUUUUUAGUAUAUUUUUACUUAUGUAUUUGAUGAUCCUGAUGUGCAAUG\
) } def
/len { sequence length } bind def

/coor [
[47.52153015 510.92373657]
[33.19713211 516.46514893]
[18.02361298 514.08605957]
[6.08258009 504.42651367]
[0.58610934 490.08480835]
[3.01272368 474.91882324]
[12.70967579 463.00811768]
[27.06853485 457.55664062]
[29.39200783 442.73767090]
[31.71548080 427.91870117]
[34.03895187 413.09976196]
[23.68789673 404.51419067]
[18.93498421 391.81750488]
[21.13877869 378.33041382]
[29.82306480 367.63800049]
[42.77462769 362.63681030]
[45.55784225 347.89727783]
[48.34106064 333.15774536]
[51.12427521 318.41821289]
[53.90748978 303.67868042]
[56.69070816 288.93914795]
[59.47392273 274.19964600]
[62.25714111 259.46011353]
[57.01571274 245.51820374]
[67.17924500 233.39329529]
[69.96246338 218.65377808]
[64.72103882 204.71186829]
[74.88457489 192.58697510]
[77.66778564 177.84744263]
[80.45100403 163.10791016]
[83.23422241 148.36839294]
[86.01744080 133.62886047]
[65.97334290 117.60276031]
[60.78552628 91.15125275]
[74.54335022 66.48008728]
[66.57698059 53.77036285]
[58.61061478 41.06064224]
[43.12123108 40.13401794]
[31.15612221 30.25394630]
[27.31611633 15.21952057]
[33.07777405 0.81178212]
[46.22562027 -7.42919874]
[61.70404053 -6.33459711]
[73.56126404 3.67469049]
[77.23795319 18.74988937]
[71.32033539 33.09427643]
[79.28670502 45.80399704]
[87.25306702 58.51371765]
[102.13711548 56.65223694]
[106.72797394 42.37203979]
[111.31883240 28.09184265]
[115.90969086 13.81164646]
[120.50054932 -0.46854973]
[116.51407623 -16.37578201]
[128.48348999 -27.58582497]
[144.09570312 -22.56674576]
[147.29019165 -6.48174477]
[134.78074646 4.12230921]
[130.18989563 18.40250587]
[125.59902954 32.68270111]
[121.00817108 46.96289825]
[116.41731262 61.24309540]
[123.85983276 65.85613251]
[130.11300659 71.85479736]
[134.92883301 78.94882202]
[138.12745667 86.80593109]
[139.60362244 95.06733704]
[139.32980347 103.36408997]
[137.35578918 111.33354187]
[133.80484009 118.63518524]
[128.86672974 124.96522522]
[122.78795624 130.06916809]
[115.85954285 133.75196838]
[108.40332031 135.88537598]
[100.75696564 136.41207886]
[97.97374725 151.15159607]
[95.19053650 165.89112854]
[92.40731812 180.63066101]
[89.62409973 195.37019348]
[94.66645050 210.36636353]
[84.70199585 221.43699646]
[81.91877747 236.17651367]
[86.96112823 251.17269897]
[76.99666595 262.24331665]
[74.21345520 276.98284912]
[71.43023682 291.72238159]
[68.64701843 306.46191406]
[65.86380768 321.20144653]
[63.08058929 335.94097900]
[60.29737091 350.68048096]
[57.51415634 365.42001343]
[69.24893951 377.48321533]
[71.52396393 393.99145508]
[63.64709854 408.48898315]
[48.85791016 415.42321777]
[46.53443909 430.24218750]
[44.21096420 445.06115723]
[41.88749313 459.88009644]
[53.88884735 469.46463013]
[59.47511673 483.77157593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 98]
[9 97]
[10 96]
[11 95]
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[25 82]
[26 81]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[35 48]
[36 47]
[37 46]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
