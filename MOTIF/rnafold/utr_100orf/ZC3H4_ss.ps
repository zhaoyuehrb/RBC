%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGACUCUCGGCACCUGGCCUCCAGCUUUCGGAACUAUGGAGGCCGCGCCCGGGACCCCCCCGCCGCCGCCAUCAGAGUCGCCGCCGCCGCCAUCGCCGCCGCCGCCAUCAACGCCUUCGCCUCCUCCGUGUUCCC\
) } def
/len { sequence length } bind def

/coor [
[43.10350418 123.04460907]
[48.07896805 108.89382172]
[59.52946472 99.20433807]
[74.30843353 96.63879395]
[88.35336304 101.90126801]
[74.51144409 96.12188721]
[60.66952515 90.34250641]
[46.82760620 84.56312561]
[32.98568344 78.78374481]
[19.14376450 73.00436401]
[-0.64342880 76.55236053]
[-11.83429432 60.84423828]
[-25.92323112 55.69623947]
[-40.01216507 50.54824448]
[-48.30761719 58.93328094]
[-59.99901581 62.91062546]
[-72.78639984 61.17960739]
[-83.91967773 53.61719894]
[-90.78911591 41.40255356]
[-105.74221039 42.58788681]
[-120.69529724 43.77322388]
[-135.64839172 44.95856094]
[-150.60148621 46.14389420]
[-165.55458069 47.32923126]
[-180.50767517 48.51456833]
[-195.46076965 49.69990158]
[-200.49636841 64.07218933]
[-210.94706726 75.14931488]
[-225.00224304 81.01208496]
[-240.22671509 80.64476013]
[-253.98278809 74.11096954]
[-263.88711548 62.54272842]
[-268.22372437 47.94431305]
[-266.24127197 32.84498596]
[-258.28320312 19.86079216]
[-245.72834778 11.24132538]
[-230.75187683 8.47995853]
[-215.94856262 12.05511570]
[-203.88316345 21.34737968]
[-196.64610291 34.74681091]
[-181.69300842 33.56147385]
[-166.73991394 32.37613678]
[-151.78681946 31.19080353]
[-136.83372498 30.00546646]
[-121.88063812 28.82013130]
[-106.92754364 27.63479614]
[-91.97444916 26.44946098]
[-84.81954956 13.26585579]
[-91.97444916 0.08225128]
[-99.12934875 -13.10135365]
[-111.29904938 -17.53800583]
[-116.97027588 -28.73491096]
[-113.57049561 -40.39882278]
[-120.42562103 -53.74075699]
[-127.28075409 -67.08268738]
[-134.13587952 -80.42462158]
[-148.90928650 -86.67969513]
[-153.09100342 -102.16816711]
[-143.47317505 -115.00861359]
[-127.43378448 -115.35093689]
[-117.27686310 -102.93254089]
[-120.79394531 -87.27975464]
[-113.93881989 -73.93782043]
[-107.08368683 -60.59588623]
[-100.22856140 -47.25395203]
[-84.99916077 -38.60694885]
[-85.94574738 -20.25625229]
[-78.79084778 -7.07264709]
[-71.63594818 6.11095715]
[-43.61117554 12.22723198]
[-34.86417007 36.45930862]
[-20.77523422 41.60730362]
[-6.68629742 46.75529861]
[2.25127816 41.59339523]
[12.77177525 42.26250458]
[21.33465958 48.78217697]
[24.92314339 59.16244125]
[38.76506424 64.94182587]
[52.60698318 70.72119904]
[66.44890594 76.50057983]
[80.29082489 82.27996063]
[94.13274384 88.05934143]
[109.13274384 88.05934143]
[122.97467041 82.27996063]
[132.72827148 69.82292938]
[147.45405579 72.05915070]
[161.29597473 66.27976990]
[171.04957581 53.82273483]
[185.77536011 56.05895615]
[199.61727905 50.27957916]
[209.37088013 37.82254028]
[224.09666443 40.05876541]
[237.93858337 34.27938461]
[247.44934082 20.91983604]
[263.74652100 22.74576187]
[270.06497192 37.87881088]
[259.90481567 50.75139236]
[243.71795654 48.12130356]
[229.87603760 53.90068436]
[221.11250305 65.94434357]
[205.39665222 64.12149811]
[191.55473328 69.90087891]
[182.79119873 81.94453430]
[167.07534790 80.12168884]
[153.23342896 85.90106964]
[144.46989441 97.94472504]
[128.75404358 96.12188721]
[114.91212463 101.90126801]
[113.06665802 109.17066956]
[127.60541534 112.86183929]
[123.91400146 127.40052795]
[109.37573242 123.70948029]
[107.53026581 130.97888184]
[116.93930054 142.66091919]
[126.34833527 154.34297180]
[135.75737000 166.02500916]
[145.16641235 177.70704651]
[159.87588501 173.76353455]
[174.91661072 176.15025330]
[187.68269348 184.45368958]
[195.96232605 197.23522949]
[198.32101440 212.28038025]
[194.35011292 226.98246765]
[184.73759460 238.79429626]
[171.14888000 245.66938782]
[155.93829346 246.41658020]
[141.74118042 240.90641785]
[131.01727295 230.09358215]
[125.62453461 215.85144043]
[126.49730682 200.64755249]
[133.48435974 187.11608887]
[124.07533264 175.43403625]
[114.66629791 163.75199890]
[105.25726318 152.06996155]
[95.84822845 140.38792419]
[84.80294037 150.53689575]
[70.14105988 153.70378113]
[55.89161682 149.01834106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 82]
[6 81]
[7 80]
[8 79]
[9 78]
[10 77]
[12 73]
[13 72]
[14 71]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[48 69]
[49 68]
[50 67]
[53 65]
[54 64]
[55 63]
[56 62]
[83 108]
[84 107]
[86 105]
[87 104]
[89 102]
[90 101]
[92 99]
[93 98]
[113 135]
[114 134]
[115 133]
[116 132]
[117 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
