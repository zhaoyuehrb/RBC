%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:37:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCCGCGCUGAGCCGCCUCGGGACGGAGCCAUGCGGCGCUGGGCCUGGGCCGCGGUCGUGGUCCUCCUCGGGCCGCAGCUCGUGCUCCUCGGGGGCGUCGGGGCCCGGCGGGAGGCACAGAGGACGCAGC\
) } def
/len { sequence length } bind def

/coor [
[217.75318909 353.12954712]
[211.56594849 339.46505737]
[205.37869263 325.80059814]
[199.19145203 312.13610840]
[193.00421143 298.47161865]
[186.81697083 284.80715942]
[180.30871582 271.29260254]
[173.48307800 257.93557739]
[160.80178833 250.12312317]
[161.41195679 234.31369019]
[154.58631897 220.95663452]
[147.76068115 207.59959412]
[140.93504333 194.24255371]
[133.95213318 180.96704102]
[126.81292725 167.77493286]
[119.67371368 154.58282471]
[113.66624451 150.15525818]
[112.52586365 140.99375916]
[105.70022583 127.63671112]
[98.87458801 114.27966309]
[87.24496460 106.51800537]
[87.76836395 92.54597473]
[80.94272614 79.18892670]
[74.11708832 65.83187866]
[67.29145050 52.47483444]
[60.30854034 39.19933319]
[53.16933060 26.00722694]
[45.87481689 12.90035629]
[38.42601395 -0.11945038]
[30.97721481 -13.13925648]
[23.52841377 -26.15906334]
[17.88809395 -29.89679146]
[15.42484856 -35.15187836]
[16.05196381 -39.97433472]
[9.22632599 -53.33137894]
[2.40068817 -66.68842316]
[-4.42494965 -80.04547119]
[-11.25058746 -93.40251923]
[-18.07622528 -106.75955963]
[-24.83261871 -113.05120850]
[-24.90112305 -120.51367188]
[-31.40937996 -134.02819824]
[-37.91763687 -147.54273987]
[-44.42589188 -161.05726624]
[-50.93414688 -174.57180786]
[-64.12812042 -177.55062866]
[-73.04438019 -187.46086121]
[-74.57180786 -200.50746155]
[-68.37263489 -211.86650085]
[-74.55988312 -225.53097534]
[-80.74712372 -239.19546509]
[-86.93436432 -252.85993958]
[-93.12161255 -266.52441406]
[-99.30885315 -280.18890381]
[-105.49609375 -293.85339355]
[-119.13175964 -302.96383667]
[-117.78983307 -319.30801392]
[-102.85078430 -326.07235718]
[-89.68261719 -316.29833984]
[-91.83161926 -300.04061890]
[-85.64437103 -286.37612915]
[-79.45713043 -272.71166992]
[-73.26988983 -259.04718018]
[-67.08264160 -245.38270569]
[-60.89540100 -231.71821594]
[-54.70815659 -218.05374146]
[-38.76295853 -212.84411621]
[-31.33137703 -197.43103027]
[-37.41961670 -181.08006287]
[-30.91135979 -167.56552124]
[-24.40310287 -154.05099487]
[-17.89484596 -140.53645325]
[-11.38659096 -127.02192688]
[-4.71917868 -113.58519745]
[2.10645866 -100.22815704]
[8.93209648 -86.87110901]
[15.75773430 -73.51406097]
[22.58337212 -60.15701675]
[29.40900993 -46.79997253]
[36.54822159 -33.60786438]
[43.99702072 -20.58805847]
[51.44582367 -7.56825161]
[58.89462280 5.45155525]
[65.00498962 9.73600006]
[66.36143494 18.86801529]
[73.50064850 32.06012344]
[79.50811768 36.48768997]
[80.64849854 45.64919662]
[87.47413635 59.00624466]
[94.29977417 72.36328888]
[101.12541199 85.72033691]
[112.75503540 93.48199463]
[112.23163605 107.45402527]
[119.05727386 120.81107330]
[125.88291168 134.16812134]
[132.86581421 147.44361877]
[140.00503540 160.63572693]
[147.14424133 173.82783508]
[154.04734802 179.95814514]
[154.29209900 187.41691589]
[161.11773682 200.77395630]
[167.94337463 214.13099670]
[174.76901245 227.48805237]
[187.93850708 236.25587463]
[186.84011841 251.10993958]
[193.66575623 264.46697998]
[199.12327576 268.46688843]
[201.33560181 273.83245850]
[200.48144531 278.61990356]
[206.66868591 292.28439331]
[212.85594177 305.94885254]
[219.04318237 319.61334229]
[225.23042297 333.27783203]
[231.41766357 346.94229126]
[246.41180420 345.02737427]
[261.30395508 347.61874390]
[274.76992798 354.48602295]
[285.61230469 365.01855469]
[292.86700439 378.27978516]
[295.88894653 393.09057617]
[294.40942383 408.13394165]
[288.55999756 422.07220459]
[278.86077881 433.66601562]
[266.17422485 441.88446045]
[251.62841797 445.99676514]
[236.51676941 445.63723755]
[222.18296814 440.83789062]
[209.90159607 432.02545166]
[200.76469421 419.98348999]
[195.58470154 405.78283691]
[194.82223511 390.68612671]
[198.54507446 376.03582764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[4 111]
[5 110]
[6 109]
[7 106]
[8 105]
[10 103]
[11 102]
[12 101]
[13 100]
[14 98]
[15 97]
[16 96]
[18 95]
[19 94]
[20 93]
[22 91]
[23 90]
[24 89]
[25 88]
[26 86]
[27 85]
[28 83]
[29 82]
[30 81]
[31 80]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
