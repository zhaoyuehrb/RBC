%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACCACUGCCACGCCGGCCACGAACCAGGGCUGGCCAGAGGACUUUGGCUUCCGGCUAGGUGGCUCUGGCCCCUGCUUCGUCCUGGAGGUGGCCA\
) } def
/len { sequence length } bind def

/coor [
[82.03134155 295.79470825]
[84.82003021 276.61468506]
[85.28652954 261.62194824]
[85.75302887 246.62921143]
[86.21952820 231.63645935]
[86.68602753 216.64372253]
[87.15252686 201.65097046]
[87.61901855 186.65823364]
[88.08551788 171.66548157]
[80.74777985 158.70375061]
[88.91052246 145.15087891]
[89.37701416 130.15812683]
[76.79272461 121.99507141]
[63.29268646 128.53334045]
[49.79264450 135.07159424]
[43.19057465 149.69323730]
[27.60770226 153.50816345]
[14.99787807 143.58990479]
[15.03427887 127.54689026]
[27.68898010 117.68595886]
[43.25437927 121.57156372]
[56.75441742 115.03329468]
[70.25445557 108.49502563]
[78.21224976 83.84317017]
[99.61621094 76.68858337]
[104.20706940 62.40838623]
[108.79792786 48.12818909]
[113.38878632 33.84799194]
[117.97964478 19.56779671]
[114.83728027 4.06179476]
[126.09856415 -5.68667841]
[130.68942261 -19.96687508]
[135.28028870 -34.24707031]
[139.87113953 -48.52726746]
[144.46200562 -62.80746460]
[143.26312256 -68.25815582]
[144.29257202 -73.08781433]
[146.89746094 -76.51845551]
[150.20379639 -78.16864777]
[156.10530090 -91.95893860]
[162.00680542 -105.74923706]
[167.90830994 -119.53953552]
[173.80981445 -133.32983398]
[179.71131897 -147.12011719]
[185.61282349 -160.91041565]
[177.83078003 -174.20500183]
[179.35142517 -189.35562134]
[189.38305664 -200.57302856]
[203.92234802 -203.69508362]
[209.82385254 -217.48536682]
[215.72535706 -231.27566528]
[221.62686157 -245.06596375]
[227.52836609 -258.85626221]
[233.42987061 -272.64654541]
[239.33137512 -286.43685913]
[240.00430298 -303.37744141]
[256.46911621 -307.42044067]
[264.91204834 -292.71826172]
[253.12167358 -280.53533936]
[247.22016907 -266.74505615]
[241.31866455 -252.95475769]
[235.41716003 -239.16445923]
[229.51565552 -225.37416077]
[223.61415100 -211.58386230]
[217.71264648 -197.79357910]
[225.49234009 -185.12020874]
[224.30361938 -170.11849976]
[214.39341736 -158.55816650]
[199.40312195 -155.00891113]
[193.50161743 -141.21862793]
[187.60011292 -127.42832184]
[181.69860840 -113.63803101]
[175.79710388 -99.84773254]
[169.89559937 -86.05744171]
[163.99409485 -72.26714325]
[158.74220276 -58.21660614]
[154.15133667 -43.93640900]
[149.56047058 -29.65621185]
[144.96961975 -15.37601566]
[140.37875366 -1.09581935]
[143.84950256 13.38876724]
[132.25984192 24.15865517]
[127.66898346 38.43885040]
[123.07812500 52.71904755]
[118.48726654 66.99924469]
[113.89640808 81.27944183]
[123.75981140 91.54415131]
[126.29206085 106.66907501]
[119.40351105 121.59236908]
[104.36975861 130.62463379]
[103.90326691 145.61737061]
[111.20763397 159.65150452]
[103.07826233 172.13198853]
[102.61176300 187.12472534]
[102.14527130 202.11747742]
[101.67877197 217.11021423]
[101.21227264 232.10296631]
[100.74577332 247.09570312]
[100.27927399 262.08843994]
[99.81277466 277.08120728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[11 91]
[12 90]
[13 23]
[14 22]
[15 21]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[31 80]
[32 79]
[33 78]
[34 77]
[35 76]
[39 75]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
