%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUGAGUGGGGCGGAGCUGCGCGUGCGCAGGGCCGCGGUGCGGCCCUGGCGGCCGUUGAAAAAUGGCGACUGUGGCAGAGUUGAAGGCUGUUUUAAAGGACACCUUGGAAAAAAAGGGGGUAUUAGGGCAUUUAAAAGCAAGGAUCCGAGCUGAAGUUUUCA\
) } def
/len { sequence length } bind def

/coor [
[191.64627075 159.17805481]
[178.51544189 151.92674255]
[165.38462830 144.67541504]
[152.25381470 137.42410278]
[139.12300110 130.17279053]
[125.99217987 122.92146301]
[107.84930420 133.75463867]
[86.78809357 132.03797913]
[78.20395660 144.33889771]
[69.61981201 156.63981628]
[68.06736755 172.38467407]
[54.43879700 178.39393616]
[45.85465622 190.69485474]
[37.27051544 202.99577332]
[33.16452789 219.44500732]
[16.22148895 220.05308533]
[10.94687653 203.94052124]
[24.96960068 194.41163635]
[33.55374146 182.11071777]
[42.13787842 169.80979919]
[43.07633209 154.94479370]
[57.31890106 148.05567932]
[65.90303802 135.75476074]
[74.48718262 123.45384216]
[66.44210052 117.05068207]
[60.15738297 107.94528198]
[45.19067764 108.94414520]
[30.22397041 109.94300079]
[21.82535362 113.65132141]
[14.96330547 110.81563568]
[-0.01970503 111.52936554]
[-15.00271511 112.24309540]
[-29.98572540 112.95682526]
[-44.96873474 113.67055511]
[-59.95174408 114.38427734]
[-74.93475342 115.09800720]
[-89.91776276 115.81173706]
[-104.90077209 116.52546692]
[-120.43427277 123.31861115]
[-131.26203918 110.27270508]
[-121.72339630 96.25662231]
[-105.61450195 101.54245758]
[-90.63149261 100.82872772]
[-75.64848328 100.11499786]
[-60.66547394 99.40126801]
[-45.68246460 98.68753815]
[-30.69945335 97.97381592]
[-15.71644402 97.26008606]
[-0.73343378 96.54635620]
[14.24957657 95.83262634]
[29.22511292 94.97629547]
[44.19181824 93.97743988]
[59.15852356 92.97857666]
[64.33352661 78.89954376]
[53.57655334 68.44548035]
[42.81957626 57.99141312]
[32.06259918 47.53734970]
[21.30562210 37.08328629]
[10.54864502 26.62922287]
[-5.47461748 23.13821793]
[-10.20451260 7.43598461]
[1.22466922 -4.32436562]
[17.05556679 -0.04479259]
[21.00270844 15.87224579]
[31.75968552 26.32630920]
[42.51666260 36.78037262]
[53.27363968 47.23443604]
[64.03061676 57.68849945]
[74.78759003 68.14256287]
[82.34344482 65.63396454]
[89.88197327 64.77861786]
[97.06255341 65.46945953]
[99.05583954 50.60248947]
[86.99217987 36.04084778]
[89.31600189 17.59520531]
[104.09972382 6.85488558]
[105.52556610 -8.07719326]
[106.95140839 -23.00927162]
[108.37724304 -37.94135284]
[109.80308533 -52.87342834]
[97.61306763 -62.32895279]
[92.49176025 -76.88146973]
[96.07335663 -91.88732910]
[107.21498108 -102.55820465]
[122.36138916 -105.48907471]
[136.67939758 -99.74469757]
[145.60020447 -87.15808105]
[146.27720642 -71.74558258]
[138.49436951 -58.42526245]
[124.73516846 -51.44758987]
[123.30932617 -36.51551056]
[121.88348389 -21.58343124]
[120.45764160 -6.65135241]
[119.03179932 8.28072643]
[128.06724548 15.33309174]
[132.60415649 25.98957443]
[131.40043640 37.62971878]
[124.64150238 47.32949066]
[113.92280579 52.59577179]
[111.92952728 67.46273804]
[126.11235046 77.21553040]
[133.85356140 92.58898163]
[133.24349976 109.79064941]
[146.37431335 117.04196930]
[159.50512695 124.29328918]
[172.63595581 131.54460144]
[185.76676941 138.79592896]
[198.89758301 146.04724121]
[212.16407776 153.04725647]
[225.56143188 159.79341125]
[238.95880127 166.53958130]
[252.35615540 173.28573608]
[265.75350952 180.03190613]
[280.65728760 172.07945251]
[297.20269775 174.53622437]
[308.91796875 186.24162292]
[311.33959961 202.45678711]
[324.86297607 208.94665527]
[341.23309326 202.84089661]
[356.66061401 210.29634094]
[361.83999634 226.27523804]
[375.48446655 232.50645447]
[384.63653564 233.23321533]
[389.32766724 238.98840332]
[402.85104370 245.47827148]
[416.37442017 251.96813965]
[429.99176025 244.76582336]
[445.06283569 246.93746948]
[455.83786011 257.44284058]
[458.33093262 272.10308838]
[471.85430908 278.59295654]
[485.44406128 271.10311890]
[500.83660889 273.06494141]
[512.11322021 283.72412109]
[514.93774414 298.98196411]
[508.22418213 312.97149658]
[494.55395508 320.31350708]
[479.18359375 318.18478394]
[468.02328491 307.40390015]
[465.36444092 292.11633301]
[451.84106445 285.62646484]
[438.84442139 292.85321045]
[423.90783691 291.01956177]
[412.78497314 280.62072754]
[409.88452148 265.49151611]
[396.36117554 259.00164795]
[382.83779907 252.51177979]
[369.25326538 246.15093994]
[355.60876465 239.91970825]
[344.25860596 246.07453918]
[331.24337769 244.53125000]
[321.35757446 235.63206482]
[318.37310791 222.47003174]
[304.84973145 215.98016357]
[293.71725464 223.39494324]
[280.26602173 224.33676147]
[268.01345825 218.45181274]
[260.21679688 207.18556213]
[259.00735474 193.42926025]
[245.61000061 186.68310547]
[232.21263123 179.93693542]
[218.81527710 173.19078064]
[205.41790771 166.44461060]
[200.64302063 167.08155823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[8 24]
[9 23]
[10 22]
[12 20]
[13 19]
[14 18]
[26 53]
[27 52]
[28 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[72 100]
[73 99]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[109 163]
[110 162]
[111 161]
[112 160]
[113 159]
[117 154]
[118 153]
[121 149]
[122 148]
[124 147]
[125 146]
[126 145]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
