%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACACAGACCACUGGACAAAGUUCUGCUGCCUCUUUCUCUUGGGAAGUCUGUAAAUAUGAAGCUGUUUCUGGUUCUCAUUAUUCUGCUGUUUGAGGUACUCACAGACGGGGCAAGACUCAAAAAAUGCUUCAAUAAAGUAACAGGCUAUUGCAGGA\
) } def
/len { sequence length } bind def

/coor [
[-88.88319397 311.80679321]
[-98.21897888 323.54745483]
[-107.55477142 335.28811646]
[-116.89055634 347.02877808]
[-116.21173096 359.94387817]
[-124.27340698 369.53790283]
[-136.31524658 370.99661255]
[-145.88117981 382.55053711]
[-155.44709778 394.10443115]
[-165.01303101 405.65835571]
[-166.51179504 412.18612671]
[-170.50646973 416.32217407]
[-175.19229126 417.47003174]
[-185.20721436 428.63699341]
[-195.22212219 439.80398560]
[-194.11364746 455.56936646]
[-204.54057312 467.44601440]
[-220.31678772 468.38772583]
[-232.08253479 457.83581543]
[-232.85740662 442.05053711]
[-222.18170166 430.39700317]
[-206.38909912 429.78906250]
[-196.37419128 418.62210083]
[-186.35928345 407.45510864]
[-176.56694031 396.09243774]
[-167.00102234 384.53851318]
[-157.43508911 372.98458862]
[-147.86917114 361.43066406]
[-145.89976501 344.01538086]
[-128.63121033 337.69299316]
[-119.29542542 325.95233154]
[-109.95964050 314.21166992]
[-100.62385559 302.47100830]
[-103.21781158 295.71127319]
[-103.27783966 288.40277100]
[-100.74839020 281.47280884]
[-95.90550232 275.81744385]
[-89.32747650 272.18572998]
[-81.82606506 271.08056641]
[-74.34639740 272.68963623]
[-63.89812851 261.92703247]
[-53.44986343 251.16442871]
[-43.00159836 240.40182495]
[-32.55333328 229.63920593]
[-29.23970795 215.11787415]
[-14.07561493 210.60557556]
[-3.62734985 199.84297180]
[6.71408129 188.97766113]
[16.94766808 178.01072693]
[27.18125534 167.04379272]
[37.41484451 156.07685852]
[47.64842987 145.10992432]
[57.88201904 134.14299011]
[68.11560822 123.17604828]
[61.20965958 107.00379944]
[62.02395630 89.43762207]
[70.39643097 73.97362518]
[84.66075134 63.68951797]
[101.97796631 60.63210297]
[118.90151215 65.40987396]
[128.46743774 53.85595703]
[138.03337097 42.30204010]
[147.59928894 30.74811935]
[157.16522217 19.19420052]
[166.73114014 7.64028072]
[165.43940735 -7.88290071]
[175.30520630 -19.46394730]
[190.11213684 -20.59976196]
[199.67807007 -32.15368271]
[209.24400330 -43.70759964]
[212.08502197 -59.27163696]
[226.16130066 -64.14066315]
[235.72723389 -75.69458771]
[245.29315186 -87.24850464]
[248.13417053 -102.81253815]
[262.21044922 -107.68156433]
[271.77639771 -119.23548889]
[281.34231567 -130.78941345]
[277.69805908 -140.91514587]
[278.60772705 -151.55685425]
[283.83773804 -160.77615356]
[292.37374878 -166.92214966]
[302.61676025 -168.92694092]
[312.68240356 -166.49066162]
[322.91598511 -177.45759583]
[333.14959717 -188.42453003]
[343.38317871 -199.39146423]
[353.61676025 -210.35841370]
[363.74151611 -221.42590332]
[373.75640869 -232.59289551]
[383.77133179 -243.75987244]
[393.78625488 -254.92684937]
[395.54174805 -261.39031982]
[399.69671631 -265.36532593]
[404.42422485 -266.32714844]
[414.87246704 -277.08975220]
[425.32073975 -287.85235596]
[432.01522827 -303.42861938]
[448.83596802 -301.30773926]
[451.45440674 -284.55718994]
[436.08334351 -277.40408325]
[425.63507080 -266.64147949]
[415.18682861 -255.87887573]
[404.95324707 -244.91194153]
[394.93832397 -233.74494934]
[384.92340088 -222.57797241]
[374.90847778 -211.41099548]
[372.77246094 -204.29380798]
[364.58370972 -200.12481689]
[354.35009766 -189.15788269]
[344.11651611 -178.19094849]
[333.88293457 -167.22401428]
[323.64935303 -156.25708008]
[325.80386353 -136.94093323]
[312.92382812 -121.98328400]
[292.89624023 -121.22348022]
[283.33029175 -109.66956329]
[273.76437378 -98.11563873]
[271.60757446 -83.37802124]
[256.84707642 -77.68257904]
[247.28114319 -66.12865448]
[237.71522522 -54.57473755]
[235.55842590 -39.83711624]
[220.79791260 -34.14167404]
[211.23199463 -22.58775520]
[201.66606140 -11.03383636]
[203.31324768 3.72497058]
[193.77662659 15.57855797]
[178.28506470 17.20620728]
[168.71913147 28.76012611]
[159.15321350 40.31404495]
[149.58728027 51.86796570]
[140.02136230 63.42188263]
[130.45542908 74.97580719]
[136.68263245 85.57333374]
[139.34281921 97.57370758]
[138.17732239 109.81001282]
[133.29946899 121.09239960]
[125.18358612 130.32376099]
[114.61886597 136.60646057]
[102.63260651 139.32954407]
[90.39035797 138.22824097]
[79.08254242 133.40963745]
[68.84895325 144.37657166]
[58.61536789 155.34350586]
[48.38177872 166.31044006]
[38.14819336 177.27737427]
[27.91460419 188.24430847]
[17.68101692 199.21125793]
[14.08783531 207.66851807]
[7.13525915 210.29122925]
[-3.31300640 221.05384827]
[-7.37396145 236.34498596]
[-21.79072571 240.08747864]
[-32.23899078 250.85008240]
[-42.68725586 261.61270142]
[-53.13552094 272.37530518]
[-63.58378601 283.13790894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[7 28]
[8 27]
[9 26]
[10 25]
[13 24]
[14 23]
[15 22]
[40 158]
[41 157]
[42 156]
[43 155]
[44 154]
[46 152]
[47 151]
[48 149]
[49 148]
[50 147]
[51 146]
[52 145]
[53 144]
[54 143]
[60 134]
[61 133]
[62 132]
[63 131]
[64 130]
[65 129]
[68 126]
[69 125]
[70 124]
[72 122]
[73 121]
[74 120]
[76 118]
[77 117]
[78 116]
[84 113]
[85 112]
[86 111]
[87 110]
[88 109]
[89 107]
[90 106]
[91 105]
[92 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
