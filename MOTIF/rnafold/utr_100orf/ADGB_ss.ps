%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUGCUCAGAGCUCAGCCCUACAUAGAUCGGCUUCUGCCAUGGCCUCCAAACAAACCAAAAAGAAAGAGGUGCAUCGUAUCAACUCGGCGCACGGAUCGGAUAAAUCGAAAGAUUUCUAUCCUUUUGGCAGUAAUGUAC\
) } def
/len { sequence length } bind def

/coor [
[78.01074219 247.76028442]
[63.08829880 246.23692322]
[49.79905701 239.28019714]
[40.04418945 227.88534546]
[35.21923828 213.68254089]
[36.01490021 198.70190430]
[29.59220123 212.25730896]
[23.16950226 225.81271362]
[21.85153961 242.71534729]
[5.24461126 246.12802124]
[-2.63193774 231.11480713]
[9.61409950 219.39001465]
[16.03679848 205.83460999]
[22.45949936 192.27920532]
[17.21518707 186.91757202]
[6.72656059 176.19429016]
[1.48224783 170.83264160]
[-12.21192074 176.95390320]
[-25.90608978 183.07514954]
[-39.60025787 189.19641113]
[-40.49971390 204.47546387]
[-48.40660858 217.58041382]
[-61.50399017 225.49983215]
[-76.78218079 226.41389465]
[-90.73036194 220.11254883]
[-100.14334106 208.04382324]
[-102.85809326 192.98098755]
[-98.25077820 178.38540649]
[-87.38012695 167.61100769]
[-72.74414062 163.13368225]
[-57.70605087 165.98229980]
[-45.72151184 175.50224304]
[-32.02734375 169.38098145]
[-18.33317375 163.25973511]
[-4.63900614 157.13847351]
[20.94031143 157.08515930]
[35.19548798 170.59078979]
[43.90453339 158.37797546]
[52.61357498 146.16517639]
[61.32262039 133.95237732]
[70.03166199 121.73957062]
[78.74070740 109.52677155]
[75.44912720 94.89237213]
[62.34954453 87.58478546]
[49.24996185 80.27719116]
[32.47194672 77.84109497]
[30.16821861 61.04439545]
[45.67076492 54.18090820]
[56.55755234 67.17760468]
[69.65713501 74.48519897]
[82.75672150 81.79279327]
[74.76419830 69.09950256]
[66.77168274 56.40620804]
[58.77916336 43.71291733]
[45.68918228 36.38813782]
[35.78645325 25.12155342]
[30.20192909 11.19987679]
[29.57339859 -3.78694940]
[33.97264481 -18.12733459]
[42.89724731 -30.18351555]
[55.32795334 -38.57860184]
[69.84510803 -42.35382080]
[84.79075623 -41.07801819]
[98.45800781 -34.89690018]
[109.28598022 -24.51638985]
[116.03804779 -11.12200546]
[117.94308472 3.75653005]
[114.78353119 18.41999435]
[106.92066193 31.19321442]
[106.12458038 46.17207336]
[105.32849121 61.15093613]
[104.53240967 76.12979126]
[112.41228485 63.36627197]
[120.29216003 50.60274887]
[128.17204285 37.83922577]
[128.83793640 22.03203964]
[142.10757446 15.26698399]
[149.98745728 2.50346088]
[157.86734009 -10.26006222]
[151.85244751 -24.56393623]
[155.42668152 -39.66375351]
[167.21566772 -49.75332642]
[182.68629456 -50.95300674]
[195.88980103 -42.80149841]
[201.74916077 -28.43321419]
[198.01133728 -13.37305927]
[186.11358643 -3.41196799]
[170.63085938 -2.38018322]
[162.75097656 10.38333988]
[154.87109375 23.14686203]
[154.76882935 38.04111481]
[140.93556213 45.71910477]
[133.05567932 58.48262787]
[125.17580414 71.24614716]
[117.29592896 84.00967407]
[123.56829071 97.63529205]
[138.38876343 99.94902802]
[153.20924377 102.26275635]
[168.02972412 104.57649231]
[177.07244873 102.80078125]
[183.15100098 107.10884094]
[197.91667175 109.74986267]
[212.68234253 112.39089203]
[219.14273071 110.47083282]
[224.73657227 111.93761444]
[228.03651428 115.48919678]
[242.67091370 118.78077698]
[257.30529785 122.07234955]
[271.93969727 125.36392975]
[287.42529297 119.96681213]
[299.66366577 130.88256836]
[296.06506348 146.88201904]
[280.33142090 151.50628662]
[268.64813232 139.99832153]
[254.01373291 136.70674133]
[239.37933350 133.41516113]
[224.74494934 130.12359619]
[210.04132080 127.15656281]
[195.27565002 124.51553345]
[180.50997925 121.87450409]
[165.71600342 119.39697266]
[150.89552307 117.08323669]
[136.07504272 114.76950836]
[121.25455475 112.45577240]
[114.54895782 118.53827667]
[106.43495178 121.55590820]
[98.17661285 121.34843445]
[90.95350647 118.23580933]
[82.24446869 130.44860840]
[73.53542328 142.66142273]
[64.82637787 154.87422180]
[56.11733627 167.08702087]
[47.40829086 179.29983521]
[60.10168076 171.30746460]
[74.85553741 168.60122681]
[89.55915833 171.56829834]
[102.10903168 179.78417969]
[110.70975494 192.07350159]
[114.13088989 206.67816162]
[111.88301086 221.50877380]
[104.28771210 234.44366455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 14]
[7 13]
[8 12]
[17 35]
[18 34]
[19 33]
[20 32]
[37 133]
[38 132]
[39 131]
[40 130]
[41 129]
[42 128]
[43 51]
[44 50]
[45 49]
[72 95]
[73 94]
[74 93]
[75 92]
[77 90]
[78 89]
[79 88]
[96 124]
[97 123]
[98 122]
[99 121]
[101 120]
[102 119]
[103 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
