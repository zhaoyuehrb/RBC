%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGCUACCUGCAGCCCUCUGUCUGACAUCAUGUCCUUCAACUGCUCCACAAGAAAUUGCUCUUCCAGGCCCAUUGGAGGACGCUGCAUUGUUCCAGUGGCCCAAGUUACCACGACUUCCACCACUGAUG\
) } def
/len { sequence length } bind def

/coor [
[181.97917175 246.34979248]
[171.81744385 243.14762878]
[162.50401306 237.95837402]
[154.42301941 230.99273682]
[147.90847778 222.53477478]
[143.23039246 212.93026733]
[140.58363342 202.57266235]
[140.07980347 191.88688660]
[141.74249268 181.31193542]
[145.50628662 171.28282166]
[151.21920776 162.21275330]
[140.86802673 151.35673523]
[130.51684570 140.50073242]
[120.16565704 129.64471436]
[109.81446838 118.78871155]
[99.46328735 107.93270111]
[97.01202393 114.20319366]
[92.82918549 119.82003784]
[87.06632233 124.42790222]
[73.73378754 131.30130005]
[67.49896240 146.08326721]
[52.01623154 150.28619385]
[39.16262817 140.68597412]
[38.79833221 124.64704895]
[51.20280457 114.47313690]
[66.86038971 117.96877289]
[80.19292450 111.09537506]
[65.71760559 115.02795410]
[52.34204865 108.23867035]
[46.97208023 94.23283386]
[52.38022232 80.24169922]
[65.77424622 73.48890686]
[80.23878479 77.46095276]
[88.30617523 90.10906219]
[83.06420898 76.05481720]
[77.82225037 62.00057220]
[72.58028412 47.94632721]
[67.33832550 33.89208221]
[62.09635925 19.83783531]
[56.85439682 5.78358841]
[51.61243439 -8.27065754]
[46.37047195 -22.32490349]
[40.38246155 -29.35444641]
[41.17535400 -36.77647400]
[36.26933670 -50.95148849]
[22.33268547 -57.90903854]
[17.55921173 -72.35440826]
[24.27806282 -85.59799194]
[19.37204361 -99.77301025]
[3.53051805 -107.08287048]
[-2.05943060 -123.25423431]
[5.58002567 -138.18736267]
[0.33806294 -152.24160767]
[-4.90389967 -166.29585266]
[-10.14586258 -180.35009766]
[-24.62425804 -186.68663025]
[-30.30353928 -201.43522644]
[-23.81428909 -215.84582520]
[-9.00646591 -221.36886597]
[5.33471346 -214.72761536]
[10.70088005 -199.86222839]
[3.90838337 -185.59205627]
[9.15034580 -171.53781128]
[14.39230919 -157.48356628]
[19.63427162 -143.42932129]
[32.03898621 -139.74018860]
[40.15103912 -129.40716553]
[40.80952454 -116.09140778]
[33.54705429 -104.67902374]
[38.45307541 -90.50401306]
[51.92108917 -84.24716949]
[57.09841919 -69.94158173]
[50.44434738 -55.85750580]
[55.35036850 -41.68249512]
[60.42471695 -27.56686592]
[65.66667938 -13.51261997]
[70.90864563 0.54162592]
[76.15060425 14.59587193]
[81.39257050 28.65011787]
[86.63452911 42.70436478]
[91.87649536 56.75860977]
[97.11845398 70.81285858]
[102.36042023 84.86710358]
[110.31929779 97.58151245]
[120.67047882 108.43752289]
[131.02166748 119.29353333]
[141.37284851 130.14955139]
[151.72404480 141.00555420]
[162.07522583 151.86157227]
[180.29777527 143.60971069]
[200.25299072 142.72183228]
[219.08183289 149.30366516]
[234.09461975 162.39222717]
[243.15521240 180.09674072]
[244.98504639 199.87165833]
[239.34339905 218.88273621]
[251.56204224 227.58358765]
[263.78067017 236.28443909]
[275.99932861 244.98529053]
[288.21795654 253.68614197]
[300.43658447 262.38699341]
[315.08267212 257.61221313]
[329.56271362 262.32202148]
[338.38851929 274.51092529]
[338.34515381 289.38156128]
[350.56381226 298.08242798]
[362.78244019 306.78326416]
[375.00106812 315.48413086]
[387.21972656 324.18496704]
[403.21542358 322.95321655]
[414.04571533 334.78894043]
[411.40255737 350.61276245]
[397.31353760 358.28601074]
[382.58654785 351.92242432]
[378.51885986 336.40362549]
[366.30023193 327.70275879]
[354.08157349 319.00192261]
[341.86294556 310.30105591]
[329.64431763 301.60021973]
[315.60571289 306.50488281]
[301.20056152 302.15109253]
[292.01385498 290.00787354]
[291.73574829 274.60565186]
[279.51712036 265.90478516]
[267.29846191 257.20391846]
[255.07983398 248.50308228]
[242.86119080 239.80223083]
[230.64254761 231.10137939]
[222.59060669 238.02326965]
[213.30181885 243.18255615]
[203.15650940 246.36466980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 89]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[19 27]
[20 26]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[44 74]
[45 73]
[48 70]
[49 69]
[52 65]
[53 64]
[54 63]
[55 62]
[96 128]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
