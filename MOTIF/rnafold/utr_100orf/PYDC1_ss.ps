%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCAGGAAAGGUAGGACCUGAUGGCUCCAGGCCCUCGGAGGCUCAGAGGCGCAGGGCUGAGCCAUGGGAACGAAGCGCGAGGCCAUCCUGAAGGUGCUGGAGAACCUGACACCGGAGGAGCUCAAGAAGUUCAAGAUGAAGCUGGGGACGGUGCCGCUGCGCG\
) } def
/len { sequence length } bind def

/coor [
[110.99576569 140.55078125]
[93.25704193 141.47053528]
[88.24548340 155.60858154]
[83.23391724 169.74662781]
[78.22235870 183.88467407]
[86.31017303 197.26828003]
[83.85190582 212.71144104]
[72.00828552 222.92234802]
[56.37149048 223.07971191]
[44.32474899 213.10925293]
[41.55615997 197.71871948]
[49.37296677 184.17501831]
[64.08431244 178.87310791]
[69.09587860 164.73506165]
[74.10743713 150.59701538]
[79.11900330 136.45898438]
[70.72030640 130.13258362]
[64.15543365 121.91895294]
[59.83555603 112.33250427]
[58.03122711 101.97365570]
[43.16265869 99.99230957]
[28.46138954 105.83895111]
[16.86765480 96.48831177]
[1.99908829 94.50696564]
[-12.86947823 92.52561951]
[-27.73804474 90.54427338]
[-42.60661316 88.56292725]
[-57.47517776 86.58158875]
[-72.34374237 84.60024261]
[-78.65864563 86.78708649]
[-84.27372742 85.60262299]
[-87.73338318 82.25225067]
[-102.51631927 79.70967865]
[-117.29926300 77.16709900]
[-132.08219910 74.62452698]
[-146.86514282 72.08195496]
[-161.64808655 69.53938293]
[-176.45442200 67.13680267]
[-191.28283691 64.87443542]
[-199.86100769 77.49892426]
[-213.07153320 85.14383698]
[-228.29145813 86.29126740]
[-242.49885559 80.71339417]
[-252.87283325 69.51770782]
[-257.35363770 54.92712402]
[-255.05157471 39.83860779]
[-246.42375183 27.24799728]
[-233.18322754 19.65516853]
[-217.95889282 18.56768227]
[-203.77357483 24.20145988]
[-193.44377136 35.43791199]
[-189.02046204 50.04602814]
[-174.19206238 52.30839539]
[-167.07402039 50.19928741]
[-159.10551453 54.75643921]
[-144.32257080 57.29901505]
[-129.53962708 59.84158707]
[-114.75669098 62.38416290]
[-99.97374725 64.92673492]
[-85.19081116 67.46930695]
[-70.36240387 69.73167419]
[-55.49383545 71.71302032]
[-40.62526703 73.69436646]
[-25.75670052 75.67570496]
[-10.88813400 77.65705109]
[3.98043299 79.63839722]
[18.84899902 81.61974335]
[32.48677063 75.63137817]
[45.14400482 85.12374115]
[60.01256943 87.10508728]
[67.03929138 73.94496918]
[78.22164917 64.06983185]
[92.14980316 58.72473145]
[107.06769562 58.58356476]
[121.09450531 63.66413116]
[132.46174622 73.32588196]
[139.73623657 86.35066986]
[154.56465149 84.08830261]
[169.39306641 81.82594299]
[184.22146606 79.56357574]
[199.04988098 77.30120850]
[213.12725830 65.46237183]
[229.21595764 72.42382050]
[243.99888611 69.88124847]
[258.78182983 67.33867645]
[287.84841919 35.54174423]
[301.44967651 29.21676826]
[315.05096436 22.89179039]
[328.65222168 16.56681442]
[337.90301514 3.73195243]
[352.70605469 5.38111544]
[366.30731201 -0.94386166]
[379.90859985 -7.26883888]
[393.50985718 -13.59381580]
[395.14761353 -27.30499649]
[403.29110718 -38.32227325]
[415.72033691 -43.82258987]
[429.13507080 -42.46279144]
[440.03106689 -34.70588684]
[453.74960327 -40.77234268]
[463.24163818 -53.42984009]
[478.01080322 -51.50083923]
[491.72930908 -57.56729126]
[505.44784546 -63.63374329]
[511.22378540 -78.10013580]
[525.22271729 -84.05695343]
[538.97863770 -78.46134186]
[552.69720459 -84.52779388]
[566.41571045 -90.59424591]
[569.54840088 -105.79180145]
[581.03839111 -116.22063446]
[596.46746826 -117.87062836]
[609.90289307 -110.10733795]
[616.17846680 -95.91590118]
[612.88110352 -80.75321960]
[601.27868652 -70.44965363]
[585.83258057 -68.96713257]
[572.48217773 -76.87570953]
[558.76361084 -70.80925751]
[545.04510498 -64.74280548]
[539.92852783 -50.80163193]
[526.10241699 -44.45396042]
[511.51431274 -49.91521072]
[497.79577637 -43.84875870]
[484.07723999 -37.78230667]
[475.56646729 -25.55871964]
[459.81607056 -27.05380821]
[446.09753418 -20.98735619]
[443.17276001 -4.85477066]
[431.09844971 6.48074579]
[414.48394775 8.42100906]
[399.83483887 0.00745877]
[386.23355103 6.33243561]
[372.63229370 12.65741253]
[359.03100586 18.98238945]
[350.75308228 31.36484718]
[334.97720337 30.16808891]
[321.37594604 36.49306488]
[307.77465820 42.81804276]
[294.17340088 49.14302063]
[292.41564941 56.43413162]
[288.90017700 71.01636505]
[287.14242554 78.30747986]
[296.36740112 90.13539886]
[305.59237671 101.96332550]
[314.81735229 113.79125214]
[330.21203613 119.44239807]
[332.74838257 135.64422607]
[319.81719971 145.72967529]
[304.72097778 139.32369995]
[302.98944092 123.01622772]
[293.76446533 111.18830109]
[284.53948975 99.36037445]
[275.31451416 87.53245544]
[261.32440186 82.12161255]
[246.54147339 84.66419220]
[231.75852966 87.20676422]
[224.50213623 96.91965485]
[212.17456055 99.13796997]
[201.31224060 92.12962341]
[186.48384094 94.39198303]
[171.65542603 96.65435028]
[156.82701111 98.91670990]
[141.99861145 101.17907715]
[137.75817871 118.42804718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[20 70]
[21 69]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 53]
[39 52]
[77 164]
[78 163]
[79 162]
[80 161]
[81 160]
[83 157]
[84 156]
[85 155]
[86 140]
[87 139]
[88 138]
[89 137]
[91 135]
[92 134]
[93 133]
[94 132]
[99 128]
[100 127]
[102 125]
[103 124]
[104 123]
[107 120]
[108 119]
[109 118]
[143 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
