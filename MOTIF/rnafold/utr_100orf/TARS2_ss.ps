%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGGACCAGAAGCCAAUGAAGAAUUACGUGGAGGAGAAGCGGCGAUAAUCUGUUUGAGGAUGUAGGCACUGGUGUGAAGGAACAUGGCCCUGUAUCAGAGGUGGCGGUGUCUCCGGCUCCAAGGUUUACAGGCUUGCAGGCUACACACGGCAGUUGUGUCGACCCCUCCACGCUGGUUGGCAG\
) } def
/len { sequence length } bind def

/coor [
[-27.43798065 478.55520630]
[-33.52376175 492.26516724]
[-39.60954285 505.97515869]
[-45.69532013 519.68511963]
[-51.78110123 533.39508057]
[-57.86688232 547.10504150]
[-63.95265961 560.81500244]
[-70.03844452 574.52502441]
[-62.14868164 587.88653564]
[-63.65297318 603.33056641]
[-73.97288513 614.91845703]
[-89.14019775 618.19445801]
[-103.32277679 611.89886475]
[-111.06712341 598.45251465]
[-109.39537811 583.02575684]
[-98.95037079 571.55047607]
[-83.74841309 568.43920898]
[-77.66262817 554.72924805]
[-71.57685089 541.01928711]
[-65.49107361 527.30932617]
[-59.40529251 513.59936523]
[-53.31951141 499.88937378]
[-47.23373032 486.17941284]
[-41.14795303 472.46942139]
[-45.97329330 450.54339600]
[-27.18851852 436.94363403]
[-22.26814651 422.77359009]
[-17.34777260 408.60354614]
[-12.42739964 394.43350220]
[-7.50702715 380.26348877]
[-2.70521951 366.05282593]
[1.97768760 351.80255127]
[6.66059446 337.55227661]
[11.34350204 323.30200195]
[16.02640915 309.05172729]
[20.70931625 294.80145264]
[25.39222336 280.55117798]
[30.07513046 266.30087280]
[21.57775116 257.59957886]
[17.56993103 246.04023743]
[18.87256622 233.80268860]
[25.29890442 223.22251892]
[35.67846680 216.34526062]
[48.06980133 214.53108215]
[53.22626495 200.44523621]
[58.38273239 186.35940552]
[63.53919601 172.27355957]
[62.88487625 164.89686584]
[68.90129852 157.99664307]
[74.29241943 143.99893188]
[79.68353271 130.00122070]
[85.07465363 116.00351715]
[90.46576691 102.00580597]
[94.30768585 87.50616455]
[96.55512238 72.67548370]
[98.80255890 57.84480667]
[101.04999542 43.01412582]
[98.98892975 36.69829178]
[100.25146484 31.13156891]
[103.62831116 27.72876167]
[106.37006378 12.98146248]
[109.11180878 -1.76583576]
[100.43574524 -14.70274448]
[103.42634583 -29.61954498]
[115.81317902 -37.81112289]
[118.55492401 -52.55842209]
[121.29667664 -67.30571747]
[124.03842163 -82.05301666]
[126.78016663 -96.80031586]
[129.52191162 -111.54761505]
[132.26367188 -126.29491425]
[123.58760071 -139.23182678]
[126.57820129 -154.14862061]
[138.96502686 -162.34020996]
[141.70678711 -177.08750916]
[144.44853210 -191.83480835]
[139.36401367 -206.81672668]
[149.29730225 -217.91534424]
[152.03904724 -232.66264343]
[145.36151123 -241.28036499]
[144.55699158 -251.93223572]
[149.65058899 -261.07098389]
[158.74316406 -265.78640747]
[161.97616577 -280.43386841]
[165.20915222 -295.08132935]
[168.31965637 -309.75527954]
[171.30744934 -324.45468140]
[174.29524231 -339.15411377]
[177.28303528 -353.85354614]
[172.44956970 -368.91833496]
[182.56692505 -379.84942627]
[185.55471802 -394.54885864]
[188.54251099 -409.24826050]
[191.40737915 -423.97213745]
[194.14912415 -438.71945190]
[183.37681580 -449.88803101]
[181.25990295 -465.26000977]
[188.61236572 -478.92459106]
[202.60707092 -485.62744141]
[217.86273193 -482.79119873]
[228.51324463 -471.50640869]
[230.46328735 -456.11236572]
[222.96299744 -442.52835083]
[208.89642334 -435.97769165]
[206.15467834 -421.23040771]
[208.02684021 -414.06530762]
[203.24192810 -406.26049805]
[200.25413513 -391.56106567]
[197.26635742 -376.86163330]
[202.31352234 -362.84823608]
[191.98245239 -350.86575317]
[188.99465942 -336.16632080]
[186.00688171 -321.46688843]
[183.01908875 -306.76748657]
[184.77127075 -299.57208252]
[179.85661316 -291.84832764]
[176.62361145 -277.20086670]
[173.39060974 -262.55343628]
[180.57060242 -244.61213684]
[166.78634644 -229.92089844]
[164.04460144 -215.17359924]
[169.32522583 -201.24649048]
[159.19583130 -189.09304810]
[156.45408630 -174.34574890]
[153.71232605 -159.59844971]
[162.32736206 -147.50230408]
[159.75692749 -132.50740051]
[147.01097107 -123.55316925]
[144.26921082 -108.80587006]
[141.52746582 -94.05857086]
[138.78572083 -79.31127167]
[136.04397583 -64.56397247]
[133.30223083 -49.81667328]
[130.56047058 -35.06937408]
[139.17550659 -22.97323036]
[136.60507202 -7.97831440]
[123.85910797 0.97591203]
[121.11736298 15.72321033]
[118.37561035 30.47050858]
[115.88066864 45.26156235]
[113.63323212 60.09224319]
[111.38580322 74.92292023]
[109.13836670 89.75360107]
[117.20960236 102.39698029]
[131.60839844 106.60110474]
[146.00718689 110.80522156]
[159.74456787 102.99113464]
[174.96141052 107.26003265]
[182.62982178 121.07925415]
[178.20027161 136.25010681]
[164.30075073 143.77198792]
[149.17758179 139.18229675]
[141.80307007 125.20401764]
[127.40427399 120.99990082]
[113.00547791 116.79578400]
[108.44748688 112.32351685]
[104.46347809 107.39692688]
[99.07235718 121.39463043]
[93.68124390 135.39234924]
[88.29012299 149.39004517]
[82.89900970 163.38775635]
[77.62503815 177.43002319]
[72.46856689 191.51586914]
[67.31210327 205.60169983]
[62.15563965 219.68754578]
[72.70917511 234.41113281]
[72.33065796 252.36537170]
[61.35944366 266.38378906]
[44.32540512 270.98379517]
[39.64249802 285.23406982]
[34.95959091 299.48434448]
[30.27668571 313.73461914]
[25.59377861 327.98489380]
[20.91087151 342.23516846]
[16.22796440 356.48544312]
[11.54505730 370.73571777]
[11.83747673 379.88586426]
[6.66300917 385.18383789]
[1.74263632 399.35388184]
[-3.17773652 413.52392578]
[-8.09810925 427.69396973]
[-13.01848221 441.86398315]
[-8.27825546 447.75799561]
[-5.90761614 454.86871338]
[-6.15805244 462.29174805]
[-8.95081997 469.10031128]
[-13.89270782 474.46078491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[26 182]
[27 181]
[28 180]
[29 179]
[30 178]
[31 176]
[32 175]
[33 174]
[34 173]
[35 172]
[36 171]
[37 170]
[38 169]
[44 165]
[45 164]
[46 163]
[47 162]
[49 161]
[50 160]
[51 159]
[52 158]
[53 157]
[54 143]
[55 142]
[56 141]
[57 140]
[60 139]
[61 138]
[62 137]
[65 134]
[66 133]
[67 132]
[68 131]
[69 130]
[70 129]
[71 128]
[74 125]
[75 124]
[76 123]
[78 121]
[79 120]
[83 118]
[84 117]
[85 116]
[86 114]
[87 113]
[88 112]
[89 111]
[91 109]
[92 108]
[93 107]
[94 105]
[95 104]
[144 155]
[145 154]
[146 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
