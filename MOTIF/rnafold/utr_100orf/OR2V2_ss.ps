%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGACGUGGGUGAACCAGUCCUACACAGAUGGCUUCUUCCUCUUAGGCAUCUUCUCCCACAGUACUGCUGACCUUGUCCUCUUCUCCGUGGUUAUGG\
) } def
/len { sequence length } bind def

/coor [
[104.03752899 222.61875916]
[100.34334564 208.08078003]
[96.64916229 193.54280090]
[92.95497894 179.00480652]
[89.26079559 164.46682739]
[85.56661224 149.92883301]
[81.87242889 135.39085388]
[75.98193359 111.63312531]
[86.64810181 97.35827637]
[74.87918854 88.05813599]
[63.11027145 78.75799561]
[51.34135818 69.45784760]
[39.57244492 60.15770721]
[23.94770813 57.67210770]
[18.75916481 43.71043777]
[6.99025011 34.41029358]
[-4.77866364 25.11015129]
[-15.71321964 27.01839256]
[-25.64897156 22.58988762]
[-31.30420113 13.55812836]
[-30.96315002 3.12932658]
[-42.13111115 -6.88449526]
[-53.45345688 -16.72342491]
[-64.92744446 -26.38508034]
[-76.40142822 -36.04673767]
[-87.87541962 -45.70839310]
[-93.37375641 -46.66528702]
[-97.45267487 -49.44878006]
[-99.63977051 -53.15974426]
[-99.91339874 -56.84487152]
[-110.43720245 -67.53363037]
[-120.96100616 -78.22238922]
[-129.36782837 -82.23709106]
[-131.63941956 -89.41103363]
[-141.82571411 -100.42190552]
[-157.62582397 -100.78572083]
[-168.48034668 -112.27287292]
[-167.94950867 -128.06825256]
[-156.34823608 -138.80072021]
[-140.55935669 -138.10290527]
[-129.95013428 -126.38881683]
[-130.81483459 -110.60820007]
[-120.62854767 -99.59732056]
[-110.27224731 -88.74619293]
[-99.74844360 -78.05743408]
[-89.22463989 -67.36867523]
[-78.21376038 -57.18238068]
[-66.73977661 -47.52072525]
[-55.26578903 -37.85906982]
[-43.79179764 -28.19741249]
[-36.51972198 -26.26289177]
[-32.11729050 -18.05245781]
[-20.94932747 -8.03863525]
[-1.86740482 -5.65262222]
[4.52147961 13.34123707]
[16.29039383 22.64138031]
[28.05930710 31.94152260]
[42.84225082 33.76191330]
[48.87258911 48.38879013]
[60.64150238 57.68893433]
[72.41041565 66.98907471]
[84.17932892 76.28922272]
[95.94824219 85.58936310]
[88.63565063 72.49257660]
[89.17482758 57.50226593]
[97.40945435 44.96468735]
[110.95200348 38.51493835]
[125.87599945 40.02303696]
[137.85443115 49.05173492]
[143.41429138 62.98327637]
[140.94358826 77.77839661]
[131.15867615 89.14745331]
[116.89898682 93.79402161]
[131.85365295 94.95928192]
[146.80831909 96.12454224]
[163.06929016 91.32691956]
[172.18090820 105.62429047]
[160.96463013 118.33772278]
[145.64306641 111.07920837]
[130.68840027 109.91395569]
[115.73372650 108.74869537]
[110.90290070 114.48568726]
[122.37672424 124.14753723]
[112.71469116 135.62120056]
[101.24124146 125.95967865]
[96.41041565 131.69667053]
[100.10459900 146.23464966]
[103.79878235 160.77264404]
[107.49296570 175.31062317]
[111.18714905 189.84861755]
[114.88133240 204.38659668]
[118.57551575 218.92457581]
[133.24047852 223.71441650]
[142.97012329 235.68678284]
[144.65975952 251.02133179]
[137.77023315 264.82489014]
[124.49996185 272.69277954]
[109.08345032 272.11434937]
[96.44004059 263.27423096]
[90.60420227 248.99325562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[15 57]
[16 56]
[17 55]
[21 53]
[22 52]
[23 50]
[24 49]
[25 48]
[26 47]
[30 46]
[31 45]
[32 44]
[34 43]
[35 42]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
