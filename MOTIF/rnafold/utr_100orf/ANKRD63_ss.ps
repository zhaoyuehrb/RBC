%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCAAACCCAAGGACCUGUGCCCCCGAGCGGGGACGCGCACCUUCCUGGAGGCCAUGCAGGCGGGCAAAGUGCACUUGGCCCGCUUCGUGUUGGAUG\
) } def
/len { sequence length } bind def

/coor [
[111.49927521 137.36639404]
[103.59306335 138.93032837]
[95.53415680 138.83988953]
[87.66503143 137.09890747]
[80.32009125 133.78138733]
[73.81147003 129.02828979]
[68.41574860 123.04161072]
[64.36222839 116.07575989]
[61.82316589 108.42675781]
[60.90645981 100.41964722]
[61.65106964 92.39470673]
[47.77066422 86.70838165]
[33.89025497 81.02205658]
[24.58189201 80.63865662]
[19.67103195 74.93699646]
[5.97418356 68.82173920]
[-7.72266531 62.70648575]
[-23.84578323 69.27063751]
[-39.45748138 62.36023712]
[-45.20779419 46.64167404]
[-59.08820343 40.95534897]
[-72.96860504 35.26902390]
[-86.84901428 29.58269691]
[-100.72942352 23.89636993]
[-114.77996063 18.64447403]
[-128.98703003 13.83208656]
[-143.19410706 9.01970005]
[-157.40118408 4.20731354]
[-173.36848450 7.94592285]
[-184.39102173 -4.19638491]
[-179.12976074 -19.72864532]
[-162.99702454 -22.67259789]
[-152.58879089 -9.99975967]
[-138.38171387 -5.18737316]
[-124.17464447 -0.37498659]
[-109.96757507 4.43739986]
[-105.22051239 3.07497907]
[-99.57251740 4.80985928]
[-95.04309845 10.01596355]
[-81.16268921 15.70228958]
[-67.28227997 21.38861465]
[-53.40187454 27.07494164]
[-39.52146912 32.76126862]
[-28.34891891 26.13887405]
[-15.21088886 27.23212051]
[-4.98741627 35.86237335]
[-1.60741115 49.00963974]
[12.08943748 55.12489319]
[25.78628731 61.24014664]
[39.57658386 67.14164734]
[53.45698929 72.82798004]
[67.33739471 78.51430511]
[85.29515076 63.77503204]
[108.44538879 61.82728195]
[128.61344910 73.35883331]
[138.67770386 94.29773712]
[153.66137695 94.99734497]
[168.64506531 95.69695282]
[183.63780212 96.16344452]
[198.63598633 96.39672852]
[213.63417053 96.63000488]
[228.63417053 96.63000488]
[243.63237000 96.39672852]
[258.63055420 96.16344452]
[273.62872314 95.93016815]
[288.62692261 95.69689178]
[303.62509155 95.46361542]
[318.62329102 95.23033905]
[333.62149048 94.99706268]
[347.29965210 87.04608154]
[360.14572144 94.58451080]
[375.14389038 94.35123444]
[390.14208984 94.11795807]
[403.92947388 85.23876190]
[418.38702393 92.97898865]
[418.64205933 109.37615204]
[404.43222046 117.56225586]
[390.37536621 109.11614227]
[375.37716675 109.34941864]
[360.37899780 109.58269501]
[347.77359009 117.51699829]
[333.85476685 109.99524689]
[318.85656738 110.22852325]
[303.85839844 110.46179962]
[288.86019897 110.69507599]
[273.86199951 110.92835999]
[258.86383057 111.16163635]
[243.86564636 111.39491272]
[228.86744690 111.62818909]
[222.10942078 114.93792725]
[213.40089417 111.62818909]
[198.40270996 111.39491272]
[183.40452576 111.16163635]
[176.54682922 114.25959778]
[167.94544983 110.68062592]
[152.96177673 109.98101807]
[137.97810364 109.28141785]
[135.26802063 116.87151337]
[131.05918884 123.74463654]
[125.53047180 129.60871887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 52]
[12 51]
[13 50]
[15 49]
[16 48]
[17 47]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 36]
[26 35]
[27 34]
[28 33]
[56 97]
[57 96]
[58 95]
[59 93]
[60 92]
[61 91]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
