%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGAGGGAGGCCGGGCCUGCGGCCGGGGACCGAGCCGCAAAGACAGAGCGGGCAGAGGCGAUGGAGGGCGACGGGGUGCCAUGGGGCAGCGAGCCCGUCUCGGGUCCCGGCCCCGGCGGCGGCGGAAUGAUCCGCGAGCUGUGCCGGGGCUUCGGCCGCU\
) } def
/len { sequence length } bind def

/coor [
[63.75069809 208.78724670]
[60.50203705 210.26460266]
[53.88372040 223.72557068]
[47.26540375 237.18655396]
[54.59681702 248.88905334]
[55.17205811 262.57794189]
[48.94754791 274.66152954]
[37.64977646 282.02246094]
[24.29789734 282.82162476]
[17.42449951 296.15414429]
[18.74485016 312.50006104]
[5.09717369 321.59252930]
[-9.47896957 314.07800293]
[-9.98889351 297.68679810]
[4.09196806 289.28076172]
[10.96536636 275.94821167]
[3.11800265 261.55328369]
[5.40371704 245.15086365]
[17.12001228 233.21290588]
[33.80442810 230.56823730]
[40.42274475 217.10725403]
[47.04106140 203.64628601]
[53.27228546 190.00180054]
[59.11133575 176.18495178]
[64.95038605 162.36808777]
[70.78944397 148.55123901]
[76.62849426 134.73437500]
[82.46754456 120.91752625]
[88.30659485 107.10066986]
[88.02101135 92.10338593]
[81.66017914 78.51884460]
[75.29933929 64.93430328]
[68.93850708 51.34976578]
[62.57766724 37.76522446]
[56.21683121 24.18068314]
[51.21390152 29.70858002]
[43.95805359 33.69014359]
[34.92876434 35.44325638]
[24.78668022 34.42893600]
[10.14482021 31.17072296]
[-4.49703979 27.91251183]
[-19.13889885 24.65430260]
[-30.02688789 35.58386230]
[-45.10029602 38.86957550]
[-59.54925156 33.46298981]
[-68.76315308 21.08932304]
[-69.80186462 5.69696712]
[-62.33395004 -7.80243254]
[-48.74238968 -15.10126591]
[-33.36419678 -13.87050343]
[-21.10650253 -4.50287485]
[-15.88068867 10.01244164]
[-1.23882866 13.27065277]
[13.40303135 16.52886391]
[28.04489136 19.78707504]
[34.07027817 15.32112217]
[19.57345390 11.46857166]
[13.54671955 -2.26745677]
[20.52821541 -15.54370308]
[35.26086044 -18.36312485]
[46.65094376 -8.60269165]
[46.12104797 6.38921785]
[52.14643097 1.92326534]
[53.28772736 -13.03325367]
[54.42901993 -27.98977280]
[51.95369339 -36.83065414]
[55.73708344 -43.21929550]
[57.16292572 -58.15137482]
[50.77244949 -72.62453461]
[59.68451691 -84.55870056]
[61.11035919 -99.49077606]
[62.53620148 -114.42285919]
[63.96203995 -129.35493469]
[56.35424423 -139.80718994]
[57.87736511 -152.24061584]
[67.16866302 -160.03076172]
[68.87853241 -174.93298340]
[61.59866333 -183.09126282]
[60.06763840 -193.69523621]
[64.55450439 -203.18141174]
[73.34637451 -208.49655151]
[75.62234497 -223.32287598]
[77.89831543 -238.14920044]
[80.17428589 -252.97552490]
[73.72356415 -268.05267334]
[83.77062225 -281.01373291]
[99.97989655 -278.52545166]
[105.67668152 -263.14758301]
[95.00061035 -250.69955444]
[92.72463989 -235.87322998]
[90.44866943 -221.04690552]
[88.17269897 -206.22058105]
[96.51950073 -188.80796814]
[83.78076172 -173.22311401]
[82.07088470 -158.32089233]
[89.92357635 -142.64848328]
[78.89411926 -127.92909241]
[77.46827698 -112.99701691]
[76.04243469 -98.06494141]
[74.61660004 -83.13285828]
[81.10906219 -69.72773743]
[72.09500122 -56.72553253]
[70.66916656 -41.79345322]
[69.38553619 -26.84847832]
[68.24424744 -11.89196014]
[67.10295105 3.06455851]
[69.80137634 17.81984711]
[76.16220856 31.40438843]
[82.52304840 44.98892975]
[88.88388062 58.57347107]
[95.24472046 72.15801239]
[101.60555267 85.74255371]
[112.46156311 96.09373474]
[126.33338165 101.80099487]
[140.20520020 107.50824738]
[154.07701111 113.21549988]
[167.94882202 118.92275238]
[181.82064819 124.63000488]
[195.69245911 130.33724976]
[209.56427002 136.04450989]
[223.43609619 141.75175476]
[237.41404724 147.19387817]
[251.49308777 152.36888123]
[265.57211304 157.54388428]
[283.61450195 153.96864319]
[294.34655762 167.82910156]
[308.52154541 172.73512268]
[322.69656372 177.64114380]
[336.87158203 182.54716492]
[351.04660034 187.45317078]
[367.03820801 183.82000732]
[377.98040771 196.03477478]
[372.61676025 211.53198242]
[356.46496582 214.36943054]
[346.14056396 201.62818909]
[331.96557617 196.72216797]
[317.79055786 191.81614685]
[303.61553955 186.91012573]
[289.44052124 182.00410461]
[278.39730835 187.01028442]
[266.52886963 183.00404358]
[260.39712524 171.62292480]
[246.31808472 166.44792175]
[232.23904419 161.27291870]
[227.56788635 162.44999695]
[222.10966492 160.67291260]
[217.72883606 155.62358093]
[203.85702515 149.91632080]
[189.98519897 144.20907593]
[176.11338806 138.50181580]
[162.24157715 132.79457092]
[148.36975098 127.08731079]
[134.49794006 121.38005829]
[120.62612915 115.67280579]
[106.75431061 109.96555328]
[104.65470123 111.68266296]
[102.12345123 112.93972015]
[96.28440094 126.75657654]
[90.44534302 140.57342529]
[84.60629272 154.39028931]
[78.76724243 168.20713806]
[72.92819214 182.02400208]
[67.08914185 195.84085083]
[67.75124359 201.11016846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[9 16]
[10 15]
[23 163]
[24 162]
[25 161]
[26 160]
[27 159]
[28 158]
[29 157]
[30 112]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[39 55]
[40 54]
[41 53]
[42 52]
[63 106]
[64 105]
[65 104]
[67 103]
[68 102]
[70 100]
[71 99]
[72 98]
[73 97]
[76 95]
[77 94]
[81 92]
[82 91]
[83 90]
[84 89]
[113 155]
[114 154]
[115 153]
[116 152]
[117 151]
[118 150]
[119 149]
[120 148]
[121 147]
[122 144]
[123 143]
[124 142]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
