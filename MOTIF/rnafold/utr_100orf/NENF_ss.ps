%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGUGCUAGGGCCCCGCCGCCCUGGCCCGGCCUUGCCUUGCGCUGCGCGCUCACCAUGGUGGGCCCCGCGCCGCGGCGGCGGCUGCGGCCGCUGGCAGCGCUGGCCCUGGUCCUGGCGCUGGCCCCGGGGCUGCCCACAGCCCGGGCCGGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[260.73294067 276.56130981]
[249.81477356 266.27572632]
[238.89659119 255.99014282]
[235.32716370 255.74916077]
[231.70378113 253.73315430]
[228.87522888 249.93928528]
[227.65739441 244.75094604]
[217.37179565 233.83276367]
[207.08621216 222.91458130]
[196.80062866 211.99639893]
[186.51504517 201.07821655]
[176.22946167 190.16003418]
[165.94386292 179.24185181]
[155.65827942 168.32366943]
[145.37269592 157.40548706]
[128.33378601 153.30348206]
[124.18846130 135.38790894]
[113.68783569 124.67637634]
[103.18720245 113.96485138]
[89.77124786 110.02736664]
[86.10127258 96.53577423]
[75.60064697 85.82425690]
[65.10001373 75.11273193]
[47.27038574 70.61203003]
[43.50796890 53.49492645]
[32.79644394 42.99429703]
[22.08492088 32.49366379]
[11.37339592 21.99303436]
[0.66187209 11.49240303]
[-10.15351582 1.09878063]
[-21.07169724 -9.18680668]
[-31.98987961 -19.47239304]
[-42.90806198 -29.75798035]
[-53.82624435 -40.04356766]
[-64.84613800 -50.22010040]
[-75.96666718 -60.28657913]
[-87.08718872 -70.35305786]
[-98.20771027 -80.41953278]
[-109.32823944 -90.48600769]
[-115.78565216 -92.27196503]
[-119.74191284 -96.44715881]
[-120.68057251 -101.18059540]
[-131.39210510 -111.68122864]
[-142.10362244 -122.18185425]
[-157.37478638 -126.31733704]
[-161.04690552 -140.75218201]
[-171.75843811 -151.25280762]
[-182.46995544 -161.75344849]
[-193.18148804 -172.25407410]
[-211.09707642 -176.39939880]
[-215.19906616 -193.43830872]
[-226.11724854 -203.72389221]
[-237.03543091 -214.00947571]
[-247.95361328 -224.29507446]
[-258.87179565 -234.58065796]
[-269.78997803 -244.86624146]
[-285.86557007 -248.10774231]
[-290.83898926 -263.73455811]
[-279.59399414 -275.67114258]
[-263.69848633 -271.63818359]
[-259.50439453 -255.78442383]
[-248.58621216 -245.49884033]
[-237.66802979 -235.21325684]
[-226.74984741 -224.92765808]
[-215.83166504 -214.64207458]
[-204.91348267 -204.35649109]
[-192.78282166 -204.39419556]
[-183.59909058 -195.86679077]
[-182.68084717 -182.96560669]
[-171.96932983 -172.46496582]
[-161.25781250 -161.96434021]
[-150.54627991 -151.46371460]
[-136.04127502 -148.07929993]
[-131.60299683 -132.89338684]
[-120.89146423 -122.39274597]
[-110.17994690 -111.89212036]
[-99.26176453 -101.60652924]
[-88.14123535 -91.54005432]
[-77.02071381 -81.47357941]
[-65.90019226 -71.40710449]
[-54.77966690 -61.34062576]
[-47.67144012 -59.17141342]
[-43.54065704 -50.96175003]
[-32.62247467 -40.67616272]
[-21.70429230 -30.39057541]
[-10.78611088 -20.10498810]
[0.13207145 -9.81940174]
[7.19576168 -7.50929022]
[11.16250324 0.78087932]
[21.87402725 11.28151035]
[32.58555222 21.78214073]
[43.29707336 32.28277206]
[54.00859833 42.78340530]
[66.13761139 42.98688889]
[75.14998627 51.69520569]
[75.81153870 64.61209869]
[86.31216431 75.32362366]
[96.81279755 86.03514862]
[110.22875214 89.97263336]
[113.89872742 103.46422577]
[124.39935303 114.17574310]
[134.89999390 124.88726807]
[147.80117798 125.80551147]
[156.32858276 134.98924255]
[156.29087830 147.11990356]
[166.57646179 158.03808594]
[176.86204529 168.95626831]
[187.14764404 179.87445068]
[197.43322754 190.79263306]
[207.71881104 201.71081543]
[218.00439453 212.62899780]
[228.28997803 223.54718018]
[238.57557678 234.46536255]
[249.18217468 245.07196045]
[260.10034180 255.35754395]
[271.01852417 265.64312744]
[292.11502075 269.19638062]
[297.40258789 289.11608887]
[308.91455078 298.73248291]
[317.55749512 301.85681152]
[320.55728149 308.65634155]
[331.87576294 318.49972534]
[343.19421387 328.34310913]
[354.51269531 338.18649292]
[365.83117676 348.02987671]
[377.14962769 357.87326050]
[388.46810913 367.71664429]
[394.95974731 369.37387085]
[398.99826050 373.46957397]
[400.03082275 378.18341064]
[410.94900513 388.46899414]
[421.86718750 398.75460815]
[432.78536987 409.04019165]
[443.70355225 419.32577515]
[454.62173462 429.61135864]
[470.69732666 432.85287476]
[475.67074585 448.47967529]
[464.42575073 460.41625977]
[448.53024292 456.38330078]
[444.33615112 440.52954102]
[433.41796875 430.24395752]
[422.49978638 419.95837402]
[411.58160400 409.67279053]
[400.66342163 399.38717651]
[389.74523926 389.10159302]
[378.62472534 379.03512573]
[367.30624390 369.19174194]
[355.98779297 359.34835815]
[344.66931152 349.50497437]
[333.35083008 339.66159058]
[322.03237915 329.81820679]
[310.71389771 319.97482300]
[299.29812622 310.24444580]
[287.78619385 300.62802124]
[279.09680176 302.86883545]
[270.22351074 300.79763794]
[263.21472168 294.76129150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[17 102]
[18 101]
[19 100]
[21 98]
[22 97]
[23 96]
[25 93]
[26 92]
[27 91]
[28 90]
[29 89]
[30 87]
[31 86]
[32 85]
[33 84]
[34 83]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[42 76]
[43 75]
[44 74]
[46 72]
[47 71]
[48 70]
[49 69]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[118 154]
[119 153]
[121 152]
[122 151]
[123 150]
[124 149]
[125 148]
[126 147]
[127 146]
[130 145]
[131 144]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
