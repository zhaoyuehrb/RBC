%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCAGGGGUGAGACCGGCGGCCACCCGUGAGCCCUCCGCACCCGCACCAUGCAGAAGAGCGUGCGCUACAACGAGGGGCACGCCCUGUACCUGGCCUUUCUGGCGCGCAAGGAGGGCACCAAGCGCGGCUUCCUGAGUAAGAAGACGG\
) } def
/len { sequence length } bind def

/coor [
[100.24462128 163.55526733]
[85.34275055 161.84225464]
[79.37543488 148.08032227]
[88.30945587 136.03181458]
[80.85850525 135.17547607]
[70.64502716 146.16113281]
[66.91513062 161.53639221]
[52.58252335 165.58924866]
[42.36904526 176.57490540]
[32.15556717 187.56057739]
[21.94208527 198.54623413]
[11.72860527 209.53190613]
[12.75312424 220.44226074]
[7.67541981 229.90379333]
[-1.59446228 234.87252808]
[-11.84598732 233.90397644]
[-22.50761223 244.45526123]
[-29.51256180 259.89440918]
[-46.28749466 257.43719482]
[-48.57007599 240.63760376]
[-33.05890274 233.79364014]
[-22.39727783 223.24234009]
[-18.74838448 204.29200745]
[0.74294102 199.31842041]
[10.95642090 188.33276367]
[21.16990089 177.34709167]
[31.38338089 166.36143494]
[41.59685898 155.37576294]
[44.59621811 140.78628540]
[59.65936279 135.94766235]
[69.87284088 124.96199036]
[67.98010254 89.55091095]
[93.06799316 72.62540436]
[93.38005066 57.62865448]
[93.69210815 42.63190079]
[94.00416565 27.63514519]
[94.31621552 12.63839245]
[94.62827301 -2.35836124]
[94.94033051 -17.35511398]
[84.01261902 -23.57617760]
[76.82986450 -33.80888367]
[74.71729279 -46.05762863]
[78.01861572 -57.96563721]
[86.04187012 -67.26844025]
[97.20334625 -72.22445679]
[98.13897705 -87.19525146]
[99.07460022 -102.16603851]
[92.21315765 -116.42195892]
[100.72925568 -128.64183044]
[101.66488647 -143.61262512]
[102.60051727 -158.58341980]
[101.82067108 -173.56312561]
[99.33554840 -188.35583496]
[96.85043335 -203.14854431]
[94.36531067 -217.94125366]
[91.88019562 -232.73396301]
[83.43968964 -237.18902588]
[78.10671234 -244.93692017]
[76.99242401 -254.13732910]
[80.22387695 -262.67572021]
[86.94392395 -268.64920044]
[85.38634491 -283.56811523]
[83.82876587 -298.48703003]
[82.27117920 -313.40594482]
[80.71360016 -328.32485962]
[79.15602112 -343.24377441]
[70.02755737 -356.16592407]
[76.40144348 -369.62780762]
[74.84386444 -384.54672241]
[61.78537369 -393.14962769]
[57.36138916 -408.14837646]
[63.66077805 -422.46102905]
[77.70915985 -429.32955933]
[92.87332153 -425.51089478]
[101.99320984 -412.80807495]
[100.76268768 -397.21899414]
[89.76277924 -386.10430908]
[91.32035828 -371.18539429]
[100.33741760 -359.33035278]
[94.07493591 -344.80136108]
[95.63251495 -329.88244629]
[97.19009399 -314.96353149]
[98.74767303 -300.04461670]
[100.30525970 -285.12570190]
[101.86283875 -270.20678711]
[115.45318604 -254.72048950]
[106.67290497 -235.21907043]
[109.15802002 -220.42636108]
[111.64314270 -205.63366699]
[114.12825775 -190.84095764]
[116.61338043 -176.04824829]
[123.51869202 -189.36427307]
[135.74734497 -198.05105591]
[150.59446716 -200.18713379]
[164.77601624 -195.30004883]
[175.15516663 -184.47076416]
[179.43614197 -170.09463501]
[176.67202759 -155.35150146]
[167.47422791 -143.50244141]
[153.87719727 -137.16833496]
[138.88848877 -137.75022888]
[125.82346344 -145.11943054]
[117.57130432 -157.64778137]
[116.63568115 -142.67698669]
[115.70005035 -127.70619965]
[122.62841797 -114.52109528]
[114.04539490 -101.23041534]
[113.10976410 -86.25962067]
[112.17414093 -71.28883362]
[126.27233887 -60.73854446]
[131.30641174 -43.70156479]
[125.09812927 -26.88967896]
[109.93708801 -17.04305840]
[109.62503052 -2.04630494]
[109.31297302 12.95044899]
[109.00091553 27.94720268]
[108.68885803 42.94395447]
[108.37680054 57.94070816]
[108.06475067 72.93746185]
[114.99578857 74.65589142]
[121.53797913 78.18222809]
[127.21437073 83.41971588]
[131.57473755 90.14514923]
[134.22909546 98.01690674]
[134.87861633 106.59178162]
[133.34194946 115.34983063]
[129.57435608 123.72591400]
[123.67861938 131.14593506]
[131.13352966 144.16224670]
[144.70620728 152.29200745]
[144.31750488 167.18154907]
[151.77241516 180.19786072]
[159.22732544 193.21417236]
[166.68223572 206.23046875]
[182.12255859 207.77201843]
[193.68551636 218.11984253]
[196.92492676 233.29501343]
[190.59516907 247.46235657]
[177.13017273 255.17425537]
[161.70748901 253.46531677]
[150.25746155 242.99266052]
[147.18286133 227.78323364]
[153.66593933 213.68537903]
[146.21102905 200.66908264]
[138.75611877 187.65277100]
[131.30120850 174.63645935]
[118.26174927 167.43771362]
[118.11721802 151.61715698]
[110.66230774 138.60086060]
[103.21135712 137.74450684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[6 30]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[16 22]
[17 21]
[33 119]
[34 118]
[35 117]
[36 116]
[37 115]
[38 114]
[39 113]
[45 109]
[46 108]
[47 107]
[49 105]
[50 104]
[51 103]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[68 78]
[69 77]
[128 149]
[129 148]
[131 146]
[132 145]
[133 144]
[134 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
