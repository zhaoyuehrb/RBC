%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGUCGCGGCAAAGGCGGAAAGGGACUGGGUAAAGGAGGCGCUAAGCGUCACCGUAAGGUCCUGCGAGAUAACAUCCAGGGCAUUACCAAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[34.17121887 168.38316345]
[24.85926819 168.90638733]
[16.52168083 165.04754639]
[3.45423746 172.41246033]
[-9.61320591 179.77737427]
[-22.68065071 187.14228821]
[-26.92886734 205.46049500]
[-42.85309219 214.85700989]
[-60.33691406 209.89108276]
[-72.92120361 218.05415344]
[-85.50550079 226.21720886]
[-98.08979034 234.38026428]
[-99.82387543 249.92140198]
[-111.17752838 260.67449951]
[-126.78989410 261.56222534]
[-139.28929138 252.16546631]
[-142.77389526 236.92106628]
[-135.59837341 223.02697754]
[-121.15078735 217.04354858]
[-106.25285339 221.79597473]
[-93.66856384 213.63291931]
[-81.08426666 205.46984863]
[-68.49997711 197.30679321]
[-68.57019806 185.69195557]
[-62.89489746 175.41935730]
[-52.81931686 169.16854858]
[-40.85310364 168.63563538]
[-30.04556084 174.07484436]
[-16.97811699 166.70993042]
[-3.91067386 159.34501648]
[9.15676975 151.98010254]
[17.75340080 133.32769775]
[39.06091690 133.15055847]
[51.38525391 124.60008240]
[63.70958710 116.04959869]
[76.03392029 107.49911499]
[73.98770142 94.87316895]
[78.51544189 82.17930603]
[89.11331940 72.78222656]
[103.59644318 69.49623108]
[102.19875336 54.56148911]
[93.20922852 41.54231262]
[99.72694397 28.14945602]
[98.32926178 13.21471500]
[96.93157196 -1.72002518]
[95.53388214 -16.65476608]
[94.13619232 -31.58950615]
[86.64028168 -46.79633331]
[99.17774200 -58.20897293]
[113.61508942 -49.32080841]
[109.07093048 -32.98719406]
[110.46862030 -18.05245399]
[111.86631012 -3.11771417]
[113.26399994 11.81702614]
[114.66168976 26.75176620]
[123.55124664 38.70270920]
[117.13349152 53.16379929]
[118.53118134 68.09854126]
[129.69914246 78.11235809]
[144.69732666 77.87908173]
[159.69551086 77.64580536]
[174.69371033 77.41252899]
[188.37187195 69.46154785]
[201.21794128 76.99997711]
[216.21612549 76.76670074]
[231.21430969 76.53342438]
[246.21249390 76.30014801]
[261.21069336 76.06687164]
[276.20886230 75.83359528]
[284.91738892 72.52384949]
[291.67541504 75.83359528]
[306.67361450 76.06687164]
[316.77288818 64.12790680]
[332.19226074 61.52477264]
[345.65121460 69.48658752]
[350.79483032 84.25402832]
[345.19445801 98.85435486]
[331.49438477 106.39374542]
[316.16342163 103.31233215]
[306.44033813 91.06505585]
[291.44213867 90.83177948]
[276.44213867 90.83177948]
[261.44396973 91.06505585]
[246.44577026 91.29833221]
[231.44758606 91.53160858]
[216.44940186 91.76488495]
[201.45121765 91.99816895]
[188.84580994 99.93246460]
[174.92698669 92.41071320]
[159.92880249 92.64398956]
[144.93060303 92.87727356]
[129.93241882 93.11054993]
[127.13229370 111.09799957]
[115.01673126 123.53000641]
[98.76854706 126.48410797]
[84.58440399 119.82344818]
[72.26007080 128.37393188]
[59.93573761 136.92440796]
[47.61140060 145.47489929]
[47.16377640 155.20935059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[9 23]
[10 22]
[11 21]
[12 20]
[33 99]
[34 98]
[35 97]
[36 96]
[40 58]
[41 57]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[59 92]
[60 91]
[61 90]
[62 89]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[71 81]
[72 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
