%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUGGGGCUUGCGUGGGAGGAAGGUGACUGUGAGGAAGGUGUGUGUCCACCGAGCACUUGGAUUCAGCUUCUUCAUUUCCAACAUGGAAGAAACUUACACCGACUCCCUGGACCCUGAGAAGCUAUUGCAAUGCCCCUAUGACAAAAACCAUCAAAUCAGGGCUUGCAGGUUUCCUUAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[293.98489380 328.39828491]
[292.12890625 313.51354980]
[295.33511353 298.86022949]
[303.23757935 286.11065674]
[314.93438721 276.72000122]
[329.09060669 271.75997925]
[344.09304810 271.79711914]
[331.27389526 264.00802612]
[318.45477295 256.21896362]
[305.63562012 248.42987061]
[295.37850952 253.48097229]
[283.83786011 252.93830872]
[273.89550781 246.82130432]
[268.09020996 236.55570984]
[267.96972656 224.64292908]
[255.41947937 216.42759705]
[248.08576965 215.39259338]
[242.72901917 207.96736145]
[230.31857300 199.54237366]
[217.90811157 191.11737061]
[205.49765015 182.69238281]
[193.08720398 174.26737976]
[180.88220215 178.43630981]
[168.31887817 174.75320435]
[160.05430603 164.34954834]
[159.28614807 150.88992310]
[147.01898193 142.25762939]
[134.75181580 133.62533569]
[122.48464203 124.99304962]
[103.17652893 134.93139648]
[80.86634064 131.12109375]
[64.68730164 114.00733948]
[61.92344666 89.69536591]
[47.64210510 85.10807037]
[33.36076355 80.52077484]
[19.07942009 75.93347931]
[4.79807854 71.34618378]
[-9.48326302 66.75888824]
[-23.76460457 62.17159653]
[-38.04594803 57.58430099]
[-52.32728958 52.99700546]
[-67.83250427 56.14324188]
[-77.58378601 44.88438797]
[-91.86512756 40.29709244]
[-101.26022339 45.83003616]
[-111.92939758 45.27841187]
[-120.34978485 39.06681442]
[-123.87461090 29.44858932]
[-137.99378967 24.38412094]
[-152.11296082 19.31965256]
[-166.23214722 14.25518513]
[-180.35131836 9.19071674]
[-192.52116394 18.67219353]
[-207.88722229 20.04624367]
[-221.54621887 12.87441349]
[-229.13963318 -0.55479050]
[-228.24444580 -15.95615959]
[-219.14628601 -28.41517258]
[-204.74835205 -33.95620346]
[-189.64497375 -30.81113052]
[-178.65557861 -19.98353386]
[-175.28684998 -4.92846012]
[-161.16767883 0.13600819]
[-147.04849243 5.20047617]
[-132.92932129 10.26494503]
[-118.81014252 15.32941246]
[-100.10396576 10.48182964]
[-87.27783203 26.01575089]
[-72.99649048 30.60304642]
[-58.51277161 27.12869644]
[-47.73999405 38.71566391]
[-33.45865250 43.30295944]
[-19.17730904 47.89025497]
[-4.89596748 52.47755051]
[9.38537407 57.06484604]
[23.66671562 61.65214157]
[37.94805908 66.23943329]
[52.22940063 70.82672882]
[66.51074219 75.41402435]
[77.42454529 65.12379456]
[73.68443298 50.59756088]
[69.94432831 36.07132339]
[66.20421600 21.54508591]
[62.46410370 7.01884890]
[52.65939331 -6.81241894]
[63.23591614 -20.06283379]
[78.89636993 -13.56772709]
[76.99034119 3.27873826]
[80.73045349 17.80497551]
[84.47056580 32.33121109]
[88.21067047 46.85744858]
[91.95078278 61.38368607]
[101.35778046 61.22499847]
[110.37834930 63.28750229]
[118.50467682 67.37935638]
[125.29753113 73.19673157]
[130.40986633 80.34525299]
[133.60429382 88.36608124]
[134.76347351 96.76509857]
[133.89297485 105.04319000]
[131.11692810 112.72587585]
[143.38410950 121.35816956]
[155.65127563 129.99046326]
[167.91844177 138.62275696]
[185.08444214 135.30628967]
[199.06874084 145.22706604]
[201.51219177 161.85691833]
[213.92265320 170.28192139]
[226.33309937 178.70692444]
[238.74356079 187.13191223]
[251.15402222 195.55691528]
[263.63479614 203.87736511]
[276.18505859 212.09268188]
[294.54998779 207.50717163]
[310.17892456 217.60995483]
[313.42471313 235.61073303]
[326.24383545 243.39981079]
[339.06298828 251.18890381]
[351.88211060 258.97796631]
[359.62231445 258.41925049]
[365.85964966 261.57623291]
[369.14706421 266.86260986]
[383.42840576 271.44989014]
[397.70974731 276.03720093]
[411.99108887 280.62448120]
[426.27243042 285.21179199]
[440.55377197 289.79907227]
[447.11926270 288.77297974]
[452.41378784 290.90945435]
[455.23321533 294.78781128]
[469.35238647 299.85229492]
[483.47155762 304.91674805]
[497.59072876 309.98123169]
[511.70989990 315.04568481]
[520.86560059 314.99957275]
[526.02252197 320.31564331]
[540.05462646 325.61657715]
[554.08673096 330.91754150]
[568.11883545 336.21847534]
[582.38366699 329.96130371]
[596.53869629 335.53710938]
[602.41607666 349.17501831]
[616.44818115 354.47598267]
[626.55688477 343.15441895]
[640.07464600 336.25256348]
[655.17315674 334.70382690]
[669.81054688 338.71768188]
[682.00726318 347.75128174]
[690.11370850 360.58288574]
[693.03356934 375.47711182]
[690.37200928 390.41970825]
[682.48895264 403.38973999]
[670.45050049 412.63314819]
[655.88482666 416.89984131]
[640.76171875 415.61276245]
[627.12652588 408.94598389]
[616.82324219 397.80117798]
[611.24536133 383.68551636]
[611.14721680 368.50808716]
[597.11511230 363.20712280]
[583.68859863 369.55258179]
[569.38256836 364.37655640]
[562.81787109 350.25057983]
[548.78576660 344.94964600]
[534.75366211 339.64868164]
[520.72155762 334.34774780]
[506.64544678 329.16485596]
[492.52627563 324.10040283]
[478.40707397 319.03591919]
[464.28790283 313.97146606]
[450.16873169 308.90698242]
[435.96646118 304.08041382]
[421.68511963 299.49313354]
[407.40377808 294.90582275]
[393.12243652 290.31854248]
[378.84109497 285.73123169]
[364.55975342 281.14395142]
[374.41101074 292.45556641]
[379.93362427 306.40191650]
[380.49725342 321.39132690]
[376.03762817 335.71304321]
[367.06365967 347.73254395]
[354.59960938 356.07800293]
[340.06793213 359.79702759]
[325.12719727 358.46508789]
[311.48254395 352.23425293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 119]
[8 118]
[9 117]
[10 116]
[15 113]
[16 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[26 104]
[27 103]
[28 102]
[29 101]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[43 69]
[44 68]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[80 92]
[81 91]
[82 90]
[83 89]
[84 88]
[122 177]
[123 176]
[124 175]
[125 174]
[126 173]
[127 172]
[130 171]
[131 170]
[132 169]
[133 168]
[134 167]
[136 166]
[137 165]
[138 164]
[139 163]
[142 160]
[143 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
