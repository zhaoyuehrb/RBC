%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGGUAGAGCUUUGGCCGAGGACGAGGGGAAGAUGUCACGCAAGAUAGAAGGCUUUUUGUUAUUACUUCUCUUUGGCUAUGAAGCCACAUUGGGAUUAUCGUCUACCGAGGAUGAAGGCGAGGACCCCUGGU\
) } def
/len { sequence length } bind def

/coor [
[90.79879761 154.27827454]
[81.11051941 151.71054077]
[72.04833221 147.42886353]
[63.91261292 141.57514954]
[56.97301102 134.34342957]
[51.45954132 125.97338867]
[47.55495071 116.74245453]
[45.38865662 106.95658875]
[45.03245926 96.94015503]
[46.49816895 87.02513123]
[49.73720169 77.54016113]
[54.64220047 68.79962921]
[43.55706787 58.69419479]
[32.47193146 48.58876038]
[21.38679886 38.48332596]
[10.30166531 28.37789154]
[-1.01392496 18.53119659]
[-12.55393410 8.94849396]
[-24.09394455 -0.63420838]
[-35.63395309 -10.21691036]
[-47.17396164 -19.79961205]
[-58.71397400 -29.38231468]
[-70.25398254 -38.96501541]
[-81.79399109 -48.54771805]
[-93.33399963 -58.13042068]
[-105.90146637 -66.31936646]
[-119.32891083 -73.00544739]
[-132.75636292 -79.69152069]
[-146.18380737 -86.37759399]
[-159.61126709 -93.06367493]
[-173.03871155 -99.74974823]
[-186.46615601 -106.43582153]
[-200.11122131 -97.17315674]
[-216.47010803 -96.03578186]
[-231.09777832 -103.23841095]
[-240.06697083 -116.74237061]
[-241.02255249 -132.83164978]
[-254.60086060 -139.20579529]
[-268.17916870 -145.57994080]
[-281.75744629 -151.95408630]
[-296.53546143 -146.35177612]
[-310.91204834 -152.91607666]
[-316.35778809 -167.75248718]
[-309.64187622 -182.05885315]
[-294.74871826 -187.34744263]
[-280.51416016 -180.48063660]
[-275.38330078 -165.53239441]
[-261.80502319 -159.15824890]
[-248.22671509 -152.78410339]
[-234.64840698 -146.40995789]
[-223.93711853 -154.95939636]
[-210.51849365 -158.05586243]
[-197.01454163 -155.03546143]
[-186.08944702 -146.43533325]
[-179.92391968 -133.89916992]
[-179.78009033 -119.86327362]
[-166.35263062 -113.17719269]
[-152.92518616 -106.49111938]
[-139.49774170 -99.80504608]
[-126.07028961 -93.11897278]
[-112.64283752 -86.43289185]
[-99.21538544 -79.74681854]
[-105.31594086 -93.45022583]
[-103.89931488 -108.38317871]
[-95.33081818 -120.69499969]
[-81.81996918 -127.21089172]
[-66.85073853 -126.25064087]
[-54.28316879 -118.06185150]
[-47.35800171 -104.75613403]
[-47.86099243 -89.76457214]
[-55.66244507 -76.95296478]
[-68.75062561 -69.62496948]
[-83.75129700 -69.67043304]
[-72.21128845 -60.08772659]
[-60.67127991 -50.50502777]
[-49.13127136 -40.92232513]
[-37.59126282 -31.33962250]
[-26.05125237 -21.75691986]
[-14.51124191 -12.17421818]
[-2.97123241 -2.59151578]
[8.56877708 6.99118614]
[13.40625095 7.43537235]
[17.99070740 10.98251724]
[20.40710068 17.29275703]
[31.49223328 27.39819145]
[42.57736969 37.50362778]
[53.66250229 47.60906219]
[64.74763489 57.71449661]
[82.77710724 47.71075821]
[103.22246552 45.04175568]
[123.21581268 50.08187485]
[139.95262146 62.12413025]
[151.08517456 79.47932434]
[155.05189514 99.71299744]
[151.29635620 119.98693085]
[164.40068054 127.28600311]
[177.50502014 134.58506775]
[193.32617188 134.54081726]
[200.67999268 147.49343872]
[213.78433228 154.79251099]
[229.60546875 154.74826050]
[236.95928955 167.70088196]
[250.06362915 174.99995422]
[263.16796875 182.29901123]
[276.27230835 189.59808350]
[289.37664795 196.89715576]
[302.48098755 204.19621277]
[315.25451660 195.76440430]
[330.48452759 194.24610901]
[344.67126465 199.99020386]
[354.55474854 211.67675781]
[357.86380005 226.62026978]
[353.83801270 241.38685608]
[343.40252686 252.58323669]
[328.95529175 257.63656616]
[313.81622314 255.38565063]
[301.46411133 246.34771729]
[294.73742676 232.59960938]
[295.18191528 217.30055237]
[282.07757568 210.00148010]
[268.97323608 202.70242310]
[255.86889648 195.40335083]
[242.76457214 188.10427856]
[229.66023254 180.80522156]
[214.77639771 181.37155151]
[206.48526001 167.89685059]
[193.38092041 160.59777832]
[178.49708557 161.16410828]
[170.20594788 147.68940735]
[157.10162354 140.39033508]
[143.99728394 133.09127808]
[137.26861572 140.51966858]
[129.30468750 146.60502625]
[120.36943817 151.14566040]
[110.75904846 153.99107361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[37 50]
[38 49]
[39 48]
[40 47]
[95 131]
[96 130]
[97 129]
[99 127]
[100 126]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
