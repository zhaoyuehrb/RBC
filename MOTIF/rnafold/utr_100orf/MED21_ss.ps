%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCUGCCCAGUCGCGGAAGAGCAGCUGUUUUGGCGUCUGUUUGCUGCGGUAGGAACAUGGCGGAUCGGCUCACGCAGCUUCAGGACGCUGUGAAUUCGCUUGCAGAUCAGUUUUGUAAUGCCAUUGGAGUAUUGCAGCAAUGUGGUCCUCCUGCCU\
) } def
/len { sequence length } bind def

/coor [
[31.45628357 127.03755188]
[28.31832123 125.32209778]
[13.58179569 128.12117004]
[1.46784091 138.29774475]
[-12.47969532 133.07131958]
[-27.21622086 135.87039185]
[-41.95274734 138.66946411]
[-56.68927383 141.46853638]
[-71.42579651 144.26760864]
[-80.33039093 157.04829407]
[-95.31520081 159.67703247]
[-107.44475555 151.10910034]
[-122.18128204 153.90817261]
[-136.72610474 157.57533264]
[-151.02813721 162.09770203]
[-165.33016968 166.62005615]
[-179.63221741 171.14242554]
[-193.93424988 175.66477966]
[-200.58621216 186.75587463]
[-212.63227844 190.20956421]
[-223.43475342 184.69229126]
[-237.82333374 188.93121338]
[-252.21192932 193.17012024]
[-266.60052490 197.40902710]
[-280.98910522 201.64794922]
[-295.37771606 205.88685608]
[-306.42886353 217.20863342]
[-320.82388306 213.38336182]
[-335.21249390 217.62226868]
[-349.60107422 221.86117554]
[-360.50903320 234.10653687]
[-376.51077271 230.51814270]
[-381.14505005 214.78742981]
[-369.64456177 203.09680176]
[-353.83999634 207.47259521]
[-339.45138550 203.23367310]
[-325.06280518 198.99476624]
[-315.04080200 187.97618103]
[-299.61663818 191.49826050]
[-285.22802734 187.25935364]
[-270.83944702 183.02043152]
[-256.45083618 178.78152466]
[-242.06225586 174.54261780]
[-227.67366028 170.30369568]
[-216.31121826 156.95954895]
[-198.45661926 161.36274719]
[-184.15457153 156.84037781]
[-169.85253906 152.31802368]
[-155.55050659 147.79565430]
[-141.24847412 143.27330017]
[-153.83653259 135.11605835]
[-157.14799500 120.48615265]
[-149.29969788 107.70317841]
[-134.75476074 104.03646088]
[-121.78447723 111.57115173]
[-117.76466370 126.02248383]
[-124.98035431 139.17164612]
[-110.24382782 136.37257385]
[-102.10047913 123.95397949]
[-87.19541931 120.90539551]
[-74.22486877 129.53108215]
[-59.48834610 126.73201752]
[-44.75181961 123.93294525]
[-30.01529503 121.13386536]
[-15.27876854 118.33479309]
[-4.21886921 108.35842896]
[10.78272152 113.38464355]
[25.51924706 110.58557129]
[40.16635513 107.35103607]
[54.71118164 103.68387604]
[69.25600433 100.01671600]
[68.49194336 83.38835907]
[77.13941956 66.57639313]
[94.83220673 54.92665863]
[118.24253082 53.18526459]
[121.18705750 38.47711182]
[124.13157654 23.76895714]
[127.07609558 9.06080341]
[130.02061462 -5.64735079]
[132.96513367 -20.35550499]
[122.34761047 -31.67132378]
[120.44252777 -47.07100677]
[127.98242950 -60.63306808]
[142.06808472 -67.14260864]
[157.28324890 -64.09658813]
[167.77738953 -52.66625595]
[169.51530457 -37.24681091]
[161.82872009 -23.76734352]
[147.67329407 -17.41098404]
[144.72877502 -2.70283079]
[141.78425598 12.00532341]
[138.83972168 26.71347809]
[135.89520264 41.42163086]
[132.95068359 56.12978745]
[138.53417969 61.13724518]
[144.60830688 47.42210770]
[159.52917480 48.96092987]
[162.67628479 63.62707138]
[149.70115662 71.15216064]
[155.28465271 76.15961456]
[169.58668518 71.63725281]
[183.84335327 66.97381592]
[198.05323792 62.16977310]
[212.26313782 57.36572266]
[226.47303772 52.56167603]
[240.68293762 47.75762939]
[254.89282227 42.95357895]
[269.10272217 38.14953232]
[277.47631836 24.46514511]
[293.41323853 22.62287331]
[304.68804932 34.03594589]
[302.65167236 49.94923401]
[288.86624146 58.15542221]
[273.90676880 52.35942841]
[259.69686890 57.16347504]
[245.48698425 61.96752167]
[231.27708435 66.77156830]
[217.06718445 71.57562256]
[202.85729980 76.37966919]
[188.64739990 81.18371582]
[183.28955078 86.33254242]
[174.10905457 85.93928528]
[159.80702209 90.46165466]
[157.83010864 97.69641876]
[172.29957581 101.65046692]
[168.34529114 116.11986542]
[153.87629700 112.16595459]
[151.89939880 119.40071869]
[161.91432190 130.56770325]
[171.92922974 141.73468018]
[181.94413757 152.90167236]
[196.91813660 158.00952148]
[199.65548706 172.65043640]
[209.67039490 183.81741333]
[219.68531799 194.98439026]
[229.70022583 206.15138245]
[239.71513367 217.31835938]
[249.73005676 228.48533630]
[265.47625732 233.06671143]
[269.11843872 249.05628967]
[256.90985107 260.00537109]
[241.40962219 254.65046692]
[238.56307983 238.50025940]
[228.54815674 227.33326721]
[218.53324890 216.16629028]
[208.51832581 204.99931335]
[198.50341797 193.83232117]
[188.48849487 182.66534424]
[174.23085022 178.35623169]
[170.77716064 162.91658020]
[160.76225281 151.74960327]
[150.74732971 140.58261108]
[140.73242188 129.41563416]
[97.32871246 140.40554810]
[72.92316437 114.56153870]
[58.37833786 118.22869873]
[43.83351517 121.89585876]
[40.01682663 125.61143494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[12 58]
[13 57]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[69 157]
[70 156]
[71 155]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[100 123]
[101 122]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[128 153]
[129 152]
[130 151]
[131 150]
[133 148]
[134 147]
[135 146]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
