%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAACCGGAAGCGGCGGCUGUCCGCGGUGCCGGCUGGGGGCGGAGAGGCGGCGGUGGGCUCCCUGGGGUGUGUGAGCCCGGUGAUGGAGCCGGGCCCGACAGCCGCGCAGCGGAGGUGUUCGUUGCCGCCGUGGCUGCCGCUGGGGCUGCUGCUGUGGUCGGGGCUGGCCCUGGGCGCGCUCC\
) } def
/len { sequence length } bind def

/coor [
[230.37490845 384.17041016]
[223.13095093 371.03552246]
[215.88697815 357.90066528]
[208.64302063 344.76577759]
[193.86528015 343.10543823]
[182.76759338 332.94152832]
[179.74745178 318.01730347]
[186.16847229 304.01458740]
[178.92451477 290.87969971]
[166.15559387 289.06402588]
[156.62614441 280.08670044]
[153.97457886 267.06716919]
[159.39031982 254.72128296]
[152.36804199 241.46656799]
[145.34574890 228.21185303]
[138.32345581 214.95713806]
[131.30117798 201.70242310]
[124.27888489 188.44770813]
[117.25659943 175.19299316]
[110.23431396 161.93827820]
[103.21202087 148.68356323]
[96.18973541 135.42884827]
[81.94743347 130.72175598]
[68.40955353 137.18130493]
[54.87168121 143.64086914]
[41.33380508 150.10043335]
[32.21077728 163.02641296]
[17.39212418 161.52413940]
[3.85424852 167.98370361]
[-9.68362617 174.44326782]
[-23.22150230 180.90283203]
[-32.05716705 194.71815491]
[-48.42490768 193.70370483]
[-55.48699570 178.90306091]
[-45.97855759 165.54185486]
[-29.68106270 167.36495972]
[-16.14318848 160.90539551]
[-2.60531330 154.44583130]
[10.93256187 147.98626709]
[19.08727074 135.52232361]
[34.87424469 136.56256104]
[48.41211700 130.10299683]
[61.94999313 123.64343262]
[75.48786926 117.18387604]
[72.44887543 108.88223267]
[72.04252625 100.34445190]
[74.13329315 92.35900116]
[78.36260986 85.61322784]
[84.19615936 80.63428497]
[90.98549652 77.74872589]
[89.97825623 62.78258133]
[88.97101593 47.81643677]
[87.96377563 32.85029221]
[86.95654297 17.88414764]
[85.94930267 2.91800332]
[84.94206238 -12.04814053]
[83.93482208 -27.01428413]
[82.92758179 -41.98043060]
[81.92034149 -56.94657135]
[80.91310883 -71.91271973]
[79.90586853 -86.87886047]
[78.89862823 -101.84500885]
[70.25212097 -115.09447479]
[77.11732483 -128.31257629]
[76.11009216 -143.27871704]
[74.97717285 -158.23587036]
[73.71865845 -173.18298340]
[72.46013641 -188.13009644]
[60.66991806 -198.30990601]
[59.60653305 -213.48632812]
[69.38407898 -224.66377258]
[68.12556458 -239.61088562]
[66.86705017 -254.55798340]
[65.60853577 -269.50509644]
[64.35001373 -284.45220947]
[62.46501923 -299.33331299]
[59.95686340 -314.12213135]
[50.02096176 -326.43423462]
[55.52119446 -340.27609253]
[53.01303864 -355.06491089]
[50.50488281 -369.85372925]
[47.99672699 -384.64254761]
[45.48856735 -399.43136597]
[42.98041153 -414.22018433]
[40.47225571 -429.00900269]
[27.44216537 -437.95285034]
[24.63492966 -453.50582886]
[33.71603394 -466.44061279]
[49.29781723 -469.08325195]
[62.13588715 -459.86590576]
[64.61363983 -444.25704956]
[55.26107407 -431.51715088]
[57.76922989 -416.72833252]
[60.27738571 -401.93951416]
[62.78554535 -387.15069580]
[65.29370117 -372.36187744]
[67.80185699 -357.57305908]
[70.31001282 -342.78424072]
[80.06651306 -331.52990723]
[74.74568176 -316.63027954]
[77.25383759 -301.84146118]
[88.01771545 -312.28842163]
[102.91753387 -310.55770874]
[111.00016022 -297.92160034]
[106.32390594 -283.66912842]
[92.32636261 -278.27755737]
[79.29712677 -285.71072388]
[80.55564117 -270.76361084]
[81.81416321 -255.81651306]
[83.07267761 -240.86940002]
[84.33119202 -225.92228699]
[95.84006500 -216.53712463]
[97.32930756 -201.39654541]
[87.40724945 -189.38861084]
[88.66576385 -174.44149780]
[89.92428589 -159.49438477]
[93.62617493 -153.07951355]
[91.07623291 -144.28596497]
[92.08347321 -129.31980896]
[100.65793610 -117.14082336]
[93.86476898 -102.85224152]
[94.87200928 -87.88610077]
[95.87924957 -72.91996002]
[96.88648987 -57.95381165]
[97.89373016 -42.98766708]
[98.90096283 -28.02152443]
[99.90820312 -13.05537987]
[100.91544342 1.91076410]
[101.92268372 16.87690735]
[102.92992401 31.84305191]
[103.93716431 46.80919647]
[104.94440460 61.77534103]
[105.95163727 76.74148560]
[123.24135590 88.38125610]
[125.82680511 110.71051788]
[109.44445038 128.40655518]
[116.46673584 141.66127014]
[123.48902893 154.91598511]
[130.51130676 168.17070007]
[137.53359985 181.42541504]
[144.55589294 194.68013000]
[151.57817078 207.93484497]
[158.60046387 221.18955994]
[165.62275696 234.44427490]
[172.64503479 247.69898987]
[189.44975281 252.52310181]
[197.41867065 267.70462036]
[192.05938721 283.63574219]
[199.30334473 296.77059937]
[214.57235718 298.81115723]
[225.58331299 309.32839966]
[228.25837708 324.13745117]
[221.77789307 337.52182007]
[229.02185059 350.65670776]
[236.26582336 363.79156494]
[243.50978088 376.92645264]
[251.29885864 389.74557495]
[259.61932373 402.22637939]
[267.93975830 414.70715332]
[276.26022339 427.18795776]
[290.35296631 434.37857056]
[290.97491455 449.26016235]
[299.29537964 461.74096680]
[307.61581421 474.22174072]
[315.93627930 486.70254517]
[324.25671387 499.18331909]
[332.57717896 511.66412354]
[347.50933838 518.44372559]
[348.83456421 534.78924561]
[335.18963623 543.88580322]
[320.61123657 536.37561035]
[320.09640503 519.98455811]
[311.77593994 507.50378418]
[303.45547485 495.02297974]
[295.13504028 482.54220581]
[286.81457520 470.06140137]
[278.49414062 457.58062744]
[264.99652100 451.28271484]
[263.77944946 435.50839233]
[255.45898438 423.02761841]
[247.13853455 410.54681396]
[238.81808472 398.06604004]
[233.24954224 411.99411011]
[218.93896484 416.48934937]
[206.40631104 408.24722290]
[204.86457825 393.32669067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[8 149]
[9 148]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 44]
[24 43]
[25 42]
[26 41]
[28 39]
[29 38]
[30 37]
[31 36]
[50 133]
[51 132]
[52 131]
[53 130]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[61 122]
[62 121]
[64 119]
[65 118]
[66 116]
[67 115]
[68 114]
[71 111]
[72 110]
[73 109]
[74 108]
[75 107]
[76 101]
[77 100]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
[157 182]
[158 181]
[159 180]
[160 179]
[162 177]
[163 176]
[164 175]
[165 174]
[166 173]
[167 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
