%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCCACACCGCCCCUGCCAGCCACCAUGGGGCUGCCACUAGCCCGCCUGGCGGCUGUGUGCCUGGCCCUGUCUUUGGCAGGGGGCUCGGAGCUCCAGACAGAGGGCAGAACCCGAAACCACGGCC\
) } def
/len { sequence length } bind def

/coor [
[58.88423538 169.68740845]
[46.72731781 160.90052795]
[41.60818481 146.80107117]
[45.29587173 132.26144409]
[56.51601028 122.30612183]
[71.39158630 120.37545013]
[56.46381378 118.90519714]
[41.53604126 117.43493652]
[26.60827065 115.96468353]
[11.68050003 114.49442291]
[-2.81160903 120.84181213]
[-14.71920776 111.89427948]
[-29.64697838 110.42402649]
[-44.57474899 108.95376587]
[-49.51785278 111.20812225]
[-54.33457947 111.26110077]
[-58.18392181 109.54927063]
[-60.53245926 106.78645325]
[-75.31162262 104.22202301]
[-90.09078979 101.65759277]
[-104.86995697 99.09316254]
[-119.64911652 96.52873993]
[-124.53890991 103.60656738]
[-131.30117798 108.86897278]
[-139.29948425 111.84656525]
[-147.78877258 112.28379059]
[-155.98474121 110.16072083]
[-163.13636780 105.69300079]
[-168.59465027 99.31018066]
[-171.87152100 91.61442566]
[-172.68347168 83.32376862]
[-186.92639160 78.61854553]
[-201.16931152 73.91331482]
[-215.41223145 69.20809174]
[-229.65516663 64.50286102]
[-243.89808655 59.79763794]
[-259.83676147 63.65642548]
[-270.95046997 51.59749603]
[-265.80636597 36.02604294]
[-249.69625854 32.96064377]
[-239.19285583 45.55471420]
[-224.94993591 50.25994110]
[-210.70701599 54.96516800]
[-196.46409607 59.67039490]
[-182.22116089 64.37561798]
[-167.97824097 69.08084869]
[-149.68768311 57.09573746]
[-128.16960144 62.28291321]
[-117.08469391 81.74957275]
[-102.30552673 84.31400299]
[-87.52635956 86.87842560]
[-72.74720001 89.44285583]
[-57.96803284 92.00728607]
[-43.10449219 94.02599335]
[-28.17672157 95.49625397]
[-13.24895000 96.96650696]
[0.17542422 90.51395416]
[13.15075684 99.56665802]
[28.07852745 101.03691101]
[43.00629807 102.50717163]
[57.93407059 103.97742462]
[72.86183929 105.44768524]
[88.30586243 79.04627991]
[113.85818481 85.14900970]
[127.41802216 78.73567963]
[140.97785950 72.32235718]
[150.14494324 59.42758560]
[164.95838928 60.98041153]
[178.51823425 54.56708527]
[191.99835205 47.98784256]
[205.39671326 41.24367142]
[218.79507446 34.49950027]
[232.19343567 27.75533104]
[245.59181213 21.01116180]
[258.99017334 14.26699162]
[244.98265076 8.90140629]
[237.52172852 -4.11145449]
[239.96774292 -18.91067696]
[251.21903992 -28.83078003]
[266.20809937 -29.40380859]
[278.18392944 -20.37167358]
[281.75268555 -5.80239534]
[275.30764771 7.74149275]
[289.66177368 3.38722277]
[304.01586914 -0.96704745]
[318.36996460 -5.32131767]
[332.72409058 -9.67558765]
[347.07818604 -14.02985764]
[360.48013306 -24.41370201]
[374.16818237 -14.41004372]
[368.34472656 1.51237595]
[351.43246460 0.32424712]
[337.07833862 4.67851734]
[322.72424316 9.03278732]
[308.37014771 13.38705730]
[294.01602173 17.74132729]
[279.66192627 22.09559822]
[265.73434448 27.66535568]
[252.33596802 34.40952682]
[238.93760681 41.15369415]
[225.53924561 47.89786530]
[212.14088440 54.64203644]
[198.74252319 61.38620377]
[194.13389587 67.26565552]
[184.93154907 68.12692261]
[171.37171936 74.54025269]
[163.17451477 86.97629547]
[147.39118958 85.88219452]
[133.83134460 92.29551697]
[120.27151489 98.70884705]
[121.06594849 106.85858154]
[118.45922089 115.33193970]
[112.37193298 122.68318939]
[103.34001923 127.47728729]
[109.41864014 141.19042969]
[115.49725342 154.90357971]
[130.33088684 160.35690308]
[136.88784790 174.73683167]
[131.27798462 189.51197815]
[116.82955170 195.91651917]
[102.11454010 190.15077209]
[95.86309814 175.63543701]
[101.78411102 160.98219299]
[95.70549011 147.26905823]
[89.62686920 133.55590820]
[92.45988464 148.28594971]
[86.52676392 162.06266785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[12 56]
[13 55]
[14 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[64 110]
[65 109]
[66 108]
[68 106]
[69 105]
[70 103]
[71 102]
[72 101]
[73 100]
[74 99]
[75 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
