%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCCACAGAACUAUUCCUUGGUGUCAGAAUUUGUGUUGCAUGGACUCUGCACUUCACGACAUCUUCAAAAUUUUUUCUUUAUAUUUUUCUUUGGGG\
) } def
/len { sequence length } bind def

/coor [
[87.92788696 314.86480713]
[72.68901062 318.37344360]
[58.78360748 311.21984863]
[52.77739334 296.78173828]
[57.50630951 281.87634277]
[70.73751068 273.54150391]
[72.59899139 258.65744019]
[74.46047211 243.77340698]
[76.32196045 228.88935852]
[70.22390747 215.30027771]
[79.61398315 202.56697083]
[81.47546387 187.68292236]
[83.33694458 172.79887390]
[85.19842529 157.91482544]
[75.88052368 146.35142517]
[77.55630493 131.23036194]
[89.74824524 121.53530121]
[91.60973358 106.65125275]
[88.14208221 92.05757141]
[79.78430176 79.60175323]
[62.95890045 79.23867798]
[49.75579453 69.07130432]
[45.19744492 53.21429443]
[50.87100983 37.89716339]
[42.12989426 25.70729446]
[33.38877869 13.51742554]
[24.64766312 1.32755661]
[16.96417046 -3.94089341]
[15.83122826 -11.38010979]
[7.47344351 -23.83592987]
[-0.88434035 -36.29174805]
[-9.24212456 -48.74757004]
[-23.35634232 -55.89595413]
[-24.02283478 -70.77564240]
[-32.38061905 -83.23146057]
[-40.73840332 -95.68727875]
[-49.09618759 -108.14309692]
[-57.45397186 -120.59891510]
[-65.81175232 -133.05473328]
[-79.65789795 -142.83842468]
[-74.08955383 -158.85185242]
[-57.16046524 -157.93408203]
[-53.35593414 -141.41252136]
[-44.99814987 -128.95669556]
[-36.64036560 -116.50088501]
[-28.28258324 -104.04506683]
[-19.92479897 -91.58924103]
[-11.56701469 -79.13342285]
[1.94939911 -72.87596130]
[3.21369529 -57.10535431]
[11.57147980 -44.64953232]
[19.92926407 -32.19371414]
[28.28704834 -19.73789406]
[36.83753204 -7.41355896]
[45.57864761 4.77630997]
[54.31976318 16.96617889]
[63.06087875 29.15604782]
[76.46040344 28.01182938]
[88.75507355 33.72469330]
[96.64704895 44.88153076]
[97.96042633 58.59355927]
[92.24011993 71.24397278]
[100.59790802 83.69979095]
[102.06089783 68.77130890]
[107.09279633 54.64048767]
[115.39452362 42.14723587]
[126.47264099 32.03411484]
[139.66870117 24.90221596]
[154.19836426 21.17544365]
[169.19802856 21.07530403]
[183.77616882 24.60775185]
[197.06626892 31.56282806]
[208.27842712 41.52714157]
[216.74621582 53.90843964]
[221.96633911 67.97080994]
[223.62850952 82.87843323]
[221.63395691 97.74523163]
[216.10121155 111.68756866]
[207.35914612 123.87675476]
[195.92733765 133.58828735]
[182.48529053 140.24494934]
[167.83193970 143.45108032]
[152.83824158 143.01612854]
[138.39538574 138.96592712]
[125.36183167 131.54121399]
[114.51222992 121.18331146]
[106.49377441 108.51273346]
[104.63229370 123.39678192]
[114.06102753 135.79585266]
[111.96118927 150.86387634]
[100.08247375 159.77630615]
[98.22099304 174.66035461]
[96.35951233 189.54440308]
[94.49803162 204.42845154]
[100.46293640 219.08213806]
[91.20600128 230.75083923]
[89.34452057 245.63488770]
[87.48303986 260.51895142]
[85.62155914 275.40298462]
[96.39253998 286.73965454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 99]
[7 98]
[8 97]
[9 96]
[11 94]
[12 93]
[13 92]
[14 91]
[17 88]
[18 87]
[19 63]
[20 62]
[24 57]
[25 56]
[26 55]
[27 54]
[29 53]
[30 52]
[31 51]
[32 50]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
