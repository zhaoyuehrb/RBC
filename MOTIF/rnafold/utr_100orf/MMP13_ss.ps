%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACAGUCCCCAGGCAUCACCAUUCAAGAUGCAUCCAGGGGUCCUGGCUGCCUUCCUCUUCUUGAGCUGGACUCAUUGUCGGGCCCUGCCCCUUCCCAGUGGUGGUGAUGAAGAUGAUUUGUCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[78.08822632 335.53616333]
[74.82104492 350.54354858]
[64.47603607 361.89590454]
[49.83594513 366.53955078]
[34.83889389 363.22534180]
[23.51900673 352.84478760]
[18.92127991 338.19021606]
[22.28247833 323.20364380]
[32.69845581 311.91635132]
[47.36736679 307.36456299]
[50.60412979 292.71795654]
[53.66368484 278.03329468]
[56.54558563 263.31274414]
[59.42748642 248.59219360]
[62.30938721 233.87164307]
[65.19129181 219.15109253]
[68.07318878 204.43054199]
[68.97886658 189.45790100]
[67.89234924 174.49729919]
[66.80582428 159.53671265]
[65.71929932 144.57611084]
[64.63278198 129.61550903]
[63.54625702 114.65491486]
[62.45973587 99.69432068]
[55.16998291 86.58480072]
[43.03472900 77.76802063]
[30.89947510 68.95124054]
[18.76421928 60.13446426]
[6.62896442 51.31768417]
[-5.50629044 42.50090408]
[-29.95767975 42.89337921]
[-40.15825653 21.42077827]
[-53.60466003 14.77290535]
[-67.05106354 8.12503147]
[-82.85102081 8.94483662]
[-90.83097839 -3.63170719]
[-104.27738190 -10.27958012]
[-117.72379303 -16.92745399]
[-131.17019653 -23.57532692]
[-144.61659241 -30.22319984]
[-161.49490356 -31.82286835]
[-164.63014221 -48.48440170]
[-149.48765564 -56.10947418]
[-137.96871948 -43.66960526]
[-124.52232361 -37.02173233]
[-111.07591248 -30.37385750]
[-97.62950897 -23.72598457]
[-84.18310547 -17.07811165]
[-69.34493256 -18.37341690]
[-60.40319443 -5.32137251]
[-46.95678711 1.32650089]
[-33.51038361 7.97437382]
[-28.42451859 4.23305368]
[-22.43927002 2.09854102]
[-16.05235863 1.77318799]
[-9.80209827 3.30785394]
[-4.22202492 6.59563828]
[0.20463893 11.37899399]
[3.08680558 17.26978111]
[4.16000366 23.78071404]
[3.31048846 30.36565018]
[15.44574356 39.18243027]
[27.58099747 47.99920654]
[39.71625137 56.81598663]
[51.85150909 65.63276672]
[63.98676300 74.44954681]
[78.67141724 71.38999176]
[86.27581787 58.46044540]
[93.88021851 45.53089905]
[94.20703125 29.71306801]
[107.32856750 22.66504669]
[114.93296051 9.73550129]
[122.53736115 -3.19404364]
[119.91811371 -19.02183914]
[130.76629639 -30.84116364]
[146.76011658 -29.58524513]
[155.63047791 -16.21751404]
[150.57279968 -0.99255240]
[135.46690369 4.41035414]
[127.86250305 17.33989906]
[120.25811005 30.26944351]
[120.47521210 45.16246796]
[106.80976105 53.13529587]
[99.20536041 66.06484222]
[91.60096741 78.99438477]
[106.10579681 80.04507446]
[115.81234741 89.26197815]
[130.53289795 86.38007355]
[145.25344849 83.49817657]
[151.66999817 69.36991882]
[165.18205261 61.74076843]
[180.59396362 63.54428482]
[191.97953796 74.08698273]
[194.96076965 89.31497192]
[188.39134216 103.37279510]
[174.79731750 110.85491180]
[159.40588379 108.88431549]
[148.13536072 98.21872711]
[133.41481018 101.10063171]
[118.69425201 103.98252869]
[107.20488739 118.96058655]
[87.28120422 117.27603149]
[77.42033386 98.60779572]
[78.50685120 113.56839752]
[79.59337616 128.52899170]
[80.67990112 143.48959351]
[81.76641846 158.45018005]
[82.85294342 173.41078186]
[83.93946838 188.37138367]
[92.38807678 175.97698975]
[105.55836487 168.79760742]
[120.55342102 168.41241455]
[134.07493591 174.90612793]
[143.14875793 186.85041809]
[145.77902222 201.61801147]
[141.38714600 215.96064758]
[130.93920898 226.72357178]
[116.73328400 231.53935242]
[101.89410400 229.34873962]
[89.68567657 220.63356018]
[82.79373932 207.31243896]
[79.91184235 222.03298950]
[77.02993774 236.75354004]
[74.14804077 251.47409058]
[71.26613617 266.19464111]
[68.38423920 280.91519165]
[69.81213379 290.04251099]
[65.25074768 295.95471191]
[62.01398468 310.60131836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 129]
[11 128]
[12 126]
[13 125]
[14 124]
[15 123]
[16 122]
[17 121]
[18 109]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[24 103]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[32 52]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[67 85]
[68 84]
[69 83]
[71 81]
[72 80]
[73 79]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
