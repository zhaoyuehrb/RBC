%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCUGUCGCCGCCGCGGAGACAAAGAUGGCUGCGAGAGUCGGCGCCUUCCUCAAGAAUGCCUGGGACAAGGAGCCAGUGCUGGUCGUGUCCUUCGUCGUCGGGGGCCUCGCUGUAAUUCUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.50687408 113.40257263]
[71.94703674 119.81589508]
[58.38719940 126.22922516]
[44.82735825 132.64254761]
[31.34724236 139.22178650]
[17.94887733 145.96595764]
[9.10100555 159.08181763]
[-5.74608040 157.89300537]
[-19.14444542 164.63717651]
[-32.54280853 171.38134766]
[-45.94117355 178.12551880]
[-54.78904724 191.24136353]
[-69.63613129 190.05255127]
[-83.03450012 196.79672241]
[-96.43286133 203.54089355]
[-109.83122253 210.28506470]
[-109.51214600 225.54484558]
[-115.85345459 239.42831421]
[-127.59606934 249.17887878]
[-142.40849304 252.86059570]
[-157.34970093 249.74241638]
[-169.45310974 240.44348145]
[-176.31558228 226.81008911]
[-176.57455444 211.54917908]
[-170.17863464 197.69078064]
[-158.39770508 187.98652649]
[-143.57090759 184.36318970]
[-128.64208984 187.54017639]
[-116.57539368 196.88670349]
[-103.17703247 190.14253235]
[-89.77866364 183.39836121]
[-76.38030243 176.65419006]
[-68.49076843 164.02072144]
[-52.68534470 164.72714233]
[-39.28697968 157.98297119]
[-25.88861465 151.23881531]
[-12.49025059 144.49464417]
[-4.60071993 131.86116028]
[11.20470715 132.56759644]
[24.60307121 125.82342529]
[29.21169090 119.94397736]
[38.41403198 119.08271027]
[51.97387314 112.66938019]
[65.53371429 106.25605774]
[79.09355164 99.84272766]
[83.79877472 85.59980774]
[76.72782898 72.37098694]
[63.39878082 63.84766388]
[64.22287750 48.97587204]
[57.15192413 35.74705505]
[50.08097458 22.51823425]
[35.20790482 16.50396729]
[30.77514076 1.08546686]
[40.18312073 -11.90951347]
[56.21484375 -12.51233673]
[66.57214355 -0.26056847]
[63.30979156 15.44728279]
[70.38074493 28.67610168]
[77.45169067 41.90492249]
[90.27497864 49.48203659]
[89.95664215 65.30004120]
[97.02759552 78.52885437]
[111.62169647 81.99472809]
[123.88546753 73.35760498]
[136.14924622 64.72048187]
[148.41300964 56.08335876]
[160.56987000 47.29639053]
[172.61798096 38.36090469]
[184.66609192 29.42541313]
[196.60365295 20.34274673]
[208.42884827 11.11427402]
[220.25404358 1.88579988]
[232.07923889 -7.34267378]
[243.90443420 -16.57114792]
[255.26257324 -26.36874008]
[266.12628174 -36.71184921]
[276.98999023 -47.05495834]
[287.85369873 -57.39806366]
[291.96398926 -73.27375031]
[307.83798218 -77.39061737]
[319.14584351 -65.51358795]
[314.25503540 -49.86072540]
[298.19680786 -46.53435898]
[287.33309937 -36.19124985]
[276.46939087 -25.84814262]
[265.60568237 -15.50503445]
[265.45767212 -12.60465717]
[264.08996582 -9.59324265]
[261.45611572 -6.95959711]
[257.69613647 -5.19916296]
[253.13290405 -4.74595118]
[241.30770874 4.48252249]
[229.48251343 13.71099663]
[217.65731812 22.93947029]
[205.83212280 32.16794586]
[202.45907593 38.83351898]
[193.60157776 41.47352600]
[181.55346680 50.40901566]
[169.50535583 59.34450531]
[165.96975708 65.92529297]
[157.05014038 68.34712982]
[144.78636169 76.98425293]
[132.52258301 85.62137604]
[120.25881958 94.25849915]
[117.69438934 109.03766632]
[126.33151245 121.30143738]
[134.96862793 133.56521606]
[143.60575867 145.82897949]
[158.42964172 142.46430969]
[173.41188049 145.03352356]
[186.26779175 153.14486694]
[195.03695679 165.56138611]
[198.38214111 180.38967896]
[195.79321289 195.36853027]
[187.66496277 208.21377563]
[175.23690796 216.96659851]
[160.40423584 220.29226685]
[145.42880249 217.68362427]
[132.59426880 209.53849792]
[123.85780334 197.09893799]
[120.55165100 182.26190186]
[123.17997742 167.28991699]
[131.34197998 154.46611023]
[122.70486450 142.20233154]
[114.06774139 129.93856812]
[105.43061829 117.67478943]
[98.56270599 118.85223389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 40]
[6 39]
[8 37]
[9 36]
[10 35]
[11 34]
[13 32]
[14 31]
[15 30]
[16 29]
[46 62]
[47 61]
[49 59]
[50 58]
[51 57]
[63 104]
[64 103]
[65 102]
[66 101]
[67 99]
[68 98]
[69 97]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 86]
[76 85]
[77 84]
[78 83]
[105 126]
[106 125]
[107 124]
[108 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
