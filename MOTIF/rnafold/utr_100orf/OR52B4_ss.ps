%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCUGGUGACAUCGCAAAGAAUGUUGCAGAUUUUAUCUUCUUCUACCUCUGUGAGUAGGAGGUGAGGUUCUGAAAGUUCUCCCCAGCUAUGCCUACUGUAAACCACAGUGGCACUAGCCACACAGUCUUCCACUUGCUGGGCAUCCCUGGCCUACAGGACCAGCACAUGUGGAUUUCUAUCCCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[104.68126678 184.97528076]
[113.65401459 172.95489502]
[125.48310852 163.73141479]
[139.32833862 157.95997620]
[154.20631409 156.05052185]
[169.05783081 158.13798523]
[156.86512756 149.40083313]
[144.67242432 140.66366577]
[132.40864563 132.02653503]
[120.07463074 123.49003601]
[107.74060059 114.95352936]
[116.50601959 127.12593842]
[118.15054321 142.03552246]
[112.24880981 155.82571411]
[100.32736206 164.92951965]
[85.46984863 166.99211121]
[71.51934814 161.47999573]
[62.08433914 149.81892395]
[59.60530090 135.02519226]
[64.72346497 120.92539215]
[76.11738586 111.16544342]
[61.24571228 109.20755005]
[46.37403870 107.24965668]
[31.50236511 105.29176331]
[16.63069344 103.33386993]
[7.90584040 114.01651764]
[-4.85842848 118.95003510]
[-18.28565407 116.94416809]
[-28.88039970 108.62933350]
[-33.93818665 96.26412201]
[-48.77583313 94.06316376]
[-63.61348343 91.86221313]
[-78.45112610 89.66125488]
[-93.30628967 87.58175659]
[-108.17796326 85.62386322]
[-123.04962921 83.66596985]
[-137.92131042 81.70807648]
[-152.79298401 79.75018311]
[-167.66465759 77.79229736]
[-182.53633118 75.83440399]
[-197.40800476 73.87651062]
[-212.27966309 71.91861725]
[-227.15133667 69.96072388]
[-242.02301025 68.00283051]
[-256.71505737 73.87265015]
[-268.32351685 64.54030609]
[-283.19519043 62.58240891]
[-298.08236694 60.74625015]
[-312.98410034 59.03194427]
[-327.80682373 66.04756927]
[-341.13812256 56.49727249]
[-339.26391602 40.20557785]
[-324.11221313 33.93198395]
[-311.26980591 44.13022995]
[-296.36807251 45.84453201]
[-289.35244751 43.48185730]
[-281.23730469 47.71073914]
[-266.36563110 49.66862869]
[-252.73731995 43.65876770]
[-240.06512451 53.13115692]
[-225.19345093 55.08905029]
[-210.32177734 57.04694366]
[-195.45010376 59.00483704]
[-180.57843018 60.96272659]
[-165.70675659 62.92061996]
[-150.83508301 64.87851715]
[-135.96340942 66.83641052]
[-121.09174347 68.79429626]
[-106.22006989 70.75218964]
[-91.34839630 72.71008301]
[-84.29504395 70.46251678]
[-76.25017548 74.82360840]
[-61.41252518 77.02455902]
[-46.57487869 79.22551727]
[-31.73723030 81.42647552]
[-20.63290405 69.34633636]
[-4.35431814 66.22837067]
[10.72721577 73.49439240]
[18.58858490 88.46219635]
[33.46025848 90.42008972]
[48.33193207 92.37798309]
[63.20360565 94.33587646]
[78.07527924 96.29376984]
[64.85835266 89.20061493]
[61.18077469 74.65841675]
[69.43684387 62.13494873]
[84.25141907 59.78366852]
[95.97939301 69.13539124]
[96.98536682 84.10121155]
[101.33963776 69.74710083]
[105.69390869 55.39299774]
[110.04817963 41.03889465]
[114.28486633 26.64964676]
[118.40369415 12.22621918]
[122.52252960 -2.19720745]
[126.64135742 -16.62063408]
[125.98917389 -25.74827194]
[130.94737244 -31.24532318]
[135.30163574 -45.59942627]
[139.65591431 -59.95353317]
[144.01017761 -74.30764008]
[148.36445618 -88.66174316]
[142.10032654 -103.43132019]
[149.86842346 -117.46828461]
[165.70970154 -120.00467682]
[177.47210693 -109.09479523]
[176.13252258 -93.10776520]
[162.71855164 -84.30747223]
[158.36428833 -69.95336914]
[154.01000977 -55.59926224]
[149.65574646 -41.24515915]
[145.30146790 -26.89105225]
[141.06478882 -12.50180531]
[136.94595337 1.92162180]
[132.82711792 16.34504890]
[128.70829773 30.76847649]
[129.89659119 38.07527161]
[124.40228271 45.39316559]
[120.04801178 59.74726868]
[115.69374084 74.10137177]
[111.33946991 88.45548248]
[116.27710724 102.61950684]
[128.61112976 111.15601349]
[140.94515991 119.69251251]
[149.79801941 122.00892639]
[153.40959167 128.47096252]
[165.60229492 137.20812988]
[177.79498291 145.94529724]
[183.41603088 145.63714600]
[188.32966614 147.29417419]
[191.93054199 150.38256836]
[193.89352417 154.21437073]
[208.09747314 159.03596497]
[222.30143738 163.85755920]
[236.50538635 168.67915344]
[250.70933533 173.50074768]
[270.26870728 168.66650391]
[282.39981079 183.71188354]
[296.75390625 188.06614685]
[311.10800171 192.42042542]
[325.46212769 196.77468872]
[339.81622314 201.12896729]
[354.17031860 205.48323059]
[360.70285034 200.22875977]
[368.69216919 198.01832581]
[376.81018066 199.14210510]
[383.73767090 203.34226990]
[388.37887573 209.86730957]
[390.03436279 217.60543823]
[404.07293701 222.88919067]
[418.11154175 228.17294312]
[432.15011597 233.45669556]
[447.29776001 228.17196655]
[460.79660034 236.84149170]
[462.29150391 252.81474304]
[450.63568115 263.83840942]
[434.77050781 261.45608521]
[426.86636353 247.49528503]
[412.82778931 242.21153259]
[398.78918457 236.92778015]
[384.75061035 231.64402771]
[363.86151123 237.28765869]
[349.81604004 219.83734131]
[335.46194458 215.48306274]
[321.10784912 211.12879944]
[306.75375366 206.77453613]
[292.39962769 202.42025757]
[278.04553223 198.06599426]
[269.48568726 203.68241882]
[259.02804565 203.65083313]
[250.13606262 197.73973083]
[245.88774109 187.70469666]
[231.68379211 182.88310242]
[217.47984314 178.06150818]
[203.27589417 173.23991394]
[189.07192993 168.41833496]
[199.42088318 179.27647400]
[206.53428650 192.48251343]
[209.90687561 207.09844971]
[209.29911804 222.08613586]
[204.75416565 236.38101196]
[196.59484863 248.96772766]
[185.40071106 258.95230103]
[171.96685791 265.62548828]
[157.24748230 268.51333618]
[142.28805542 267.41073608]
[128.15115356 262.39599609]
[115.84087372 253.82527161]
[106.23161316 242.30737305]
[100.00589752 228.66036987]
[97.60592651 213.85360718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[8 126]
[9 124]
[10 123]
[11 122]
[21 83]
[22 82]
[23 81]
[24 80]
[25 79]
[30 75]
[31 74]
[32 73]
[33 72]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[46 58]
[47 57]
[48 55]
[49 54]
[89 121]
[90 120]
[91 119]
[92 118]
[93 116]
[94 115]
[95 114]
[96 113]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
[132 176]
[133 175]
[134 174]
[135 173]
[136 172]
[138 168]
[139 167]
[140 166]
[141 165]
[142 164]
[143 163]
[149 161]
[150 160]
[151 159]
[152 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
