%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCGCUAGCGGCCCCGAGGCUCCUGGGGACAUUCCCGCGCUACCGCCGCCUCCCCAGCCAGGUUCGGGGCCCGCACCGCCCGCUCCCGCCGCCGCUG\
) } def
/len { sequence length } bind def

/coor [
[142.16050720 281.36859131]
[145.25482178 270.92160034]
[152.53417969 262.70492554]
[147.94332886 248.42474365]
[143.35246277 234.14454651]
[138.76161194 219.86434937]
[134.17074585 205.58415222]
[116.24805450 200.97373962]
[104.47035980 186.50952148]
[103.57318878 167.73149109]
[114.08085632 151.96627808]
[108.17935181 138.17597961]
[102.27784729 124.38568115]
[96.37634277 110.59538269]
[90.26108551 96.89853668]
[83.93356323 83.29844666]
[77.60604095 69.69835663]
[71.27851105 56.09826660]
[64.95098877 42.49818039]
[58.62346268 28.89809036]
[52.29593658 15.29800129]
[39.45934296 6.04962730]
[41.10573196 -8.75370598]
[34.77820587 -22.35379410]
[19.48890114 -32.46735764]
[21.50587273 -49.82343292]
[14.75844765 -63.22015762]
[8.01102257 -76.61688232]
[1.26359642 -90.01361084]
[-5.48382902 -103.41033173]
[-12.23125458 -116.80706024]
[-18.97867966 -130.20378113]
[-31.25986481 -129.34616089]
[-43.05572128 -132.74606323]
[-52.93984222 -139.96733093]
[-59.72560120 -150.11323547]
[-62.60859299 -161.93778992]
[-61.26193237 -173.99874878]
[-55.87312317 -184.83349609]
[-47.11838531 -193.13644409]
[-52.58815765 -207.10360718]
[-58.05792999 -221.07075500]
[-71.20242310 -230.87660217]
[-69.01410675 -247.12908936]
[-53.74414062 -253.10905457]
[-41.10094833 -242.66484070]
[-44.09077072 -226.54054260]
[-38.62099457 -212.57337952]
[-33.15122223 -198.60621643]
[-15.31584835 -196.84609985]
[-0.67847002 -186.36112976]
[6.79591227 -169.88920593]
[5.03164053 -151.80345154]
[-5.58195543 -136.95120239]
[1.16547048 -123.55448151]
[7.91289616 -110.15776062]
[14.66032124 -96.76103210]
[21.40774727 -83.36431122]
[28.15517235 -69.96758270]
[34.90259933 -56.57085800]
[46.38095474 -52.41570663]
[52.06878662 -41.16078949]
[48.37829590 -28.68132019]
[54.70581818 -15.08123112]
[67.08982849 -6.80562687]
[65.89602661 8.97047615]
[72.22354889 22.57056427]
[78.55107880 36.17065430]
[84.87860107 49.77074432]
[91.20612335 63.37083054]
[97.53365326 76.97092438]
[103.86117554 90.57100677]
[109.95111084 96.08533478]
[110.16664124 104.69387817]
[116.06814575 118.48417664]
[121.96964264 132.27447510]
[127.87114716 146.06477356]
[139.61975098 146.66136169]
[150.21295166 151.65638733]
[158.07765198 160.26445007]
[162.06260681 171.16691589]
[161.60676575 182.71391296]
[156.81799316 193.17387390]
[148.45094299 200.99328613]
[153.04180908 215.27348328]
[157.63265991 229.55368042]
[162.22352600 243.83387756]
[166.81437683 258.11407471]
[185.07096863 266.08554077]
[191.74909973 284.53747559]
[183.08982849 301.81433105]
[188.99133301 315.60461426]
[202.43441772 324.99691772]
[200.75262451 341.30960083]
[185.67601013 347.76159668]
[172.71412659 337.71560669]
[175.20103455 321.50613403]
[169.29953003 307.71585083]
[158.79547119 306.54907227]
[149.70274353 301.00354004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[11 77]
[12 76]
[13 75]
[14 74]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[23 64]
[24 63]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[40 49]
[41 48]
[42 47]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
