%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAAACAUAUGUUGAUCCCAAACAUGCAAUGACAUCCAUAUAAACCUUGCAAAAUGAUGGCUGUGAUGACACCCAGUGAUGGUCUUUCUCAACUCUCUGUACCUCAUCUCACUCAUCAGAGACUUUGGAGCCUCAGUUGCCUUGCAAUGCUGU\
) } def
/len { sequence length } bind def

/coor [
[83.14365387 192.88999939]
[82.84159851 177.89303589]
[82.53954315 162.89608765]
[75.55405426 160.16607666]
[70.09403229 174.13703918]
[69.21832275 189.11146545]
[54.70615005 192.90577698]
[46.61318588 180.27629089]
[56.12305832 168.67701721]
[61.58308029 154.70603943]
[54.59759521 151.97602844]
[44.20672989 162.79406738]
[33.81586456 173.61210632]
[23.42499733 184.43014526]
[13.03413296 195.24818420]
[14.89023495 210.77522278]
[6.28828526 223.83433533]
[-8.71013832 228.25941467]
[-23.02323914 221.96105957]
[-29.89280701 207.91317749]
[-26.07524490 192.74873352]
[-13.37308693 183.62792969]
[2.21609592 184.85731506]
[12.60696125 174.03927612]
[22.99782562 163.22123718]
[33.38869095 152.40319824]
[43.77955627 141.58517456]
[38.17913437 127.66987610]
[23.19129944 127.06588745]
[8.20346546 126.46189880]
[-6.78436947 125.85791016]
[-12.25387001 139.97752380]
[-22.01355362 151.55453491]
[-35.00476456 159.33317566]
[-49.81830978 162.46966553]
[-64.84732819 160.62377930]
[-78.46158600 153.99575806]
[-89.18431091 143.30455017]
[-95.85237885 129.70985413]
[-97.74249268 114.68634033]
[-94.64962006 99.86362457]
[-86.90925598 86.84957123]
[-75.36101532 77.05585480]
[-61.25757217 71.54481506]
[-46.12875366 70.91425323]
[-31.61562538 75.23256683]
[-19.29246330 84.03134155]
[-10.49598885 96.35614014]
[-6.18038034 110.87007904]
[8.80745411 111.47406769]
[23.79528999 112.07805634]
[38.78312302 112.68204498]
[45.09379578 83.31056213]
[63.38508987 62.71594620]
[87.11318970 54.66964340]
[109.26261139 59.03771591]
[124.35761261 72.32618713]
[130.51380920 58.64768982]
[136.66999817 44.96919250]
[142.82618713 31.29069519]
[148.98237610 17.61219788]
[155.13858032 3.93370032]
[153.74670410 -11.82616138]
[166.02577209 -20.25667191]
[172.18197632 -33.93516922]
[170.79010010 -49.69503021]
[183.06916809 -58.12554169]
[189.22537231 -71.80403900]
[195.38156128 -85.48253632]
[201.53775024 -99.16103363]
[207.69393921 -112.83953094]
[198.83699036 -125.30956268]
[197.42031860 -140.43867493]
[203.72468567 -154.15440369]
[215.96597290 -162.81504822]
[230.79878235 -164.17640686]
[236.95498657 -177.85490417]
[243.11117554 -191.53340149]
[241.71929932 -207.29325867]
[253.99838257 -215.72377014]
[260.15457153 -229.40226746]
[266.03405762 -243.20195007]
[271.63449097 -257.11724854]
[277.23492432 -271.03253174]
[270.81036377 -285.47207642]
[276.55572510 -300.19506836]
[291.06240845 -306.46661377]
[305.72381592 -300.56588745]
[311.84161377 -285.99371338]
[305.78622437 -271.39550781]
[291.15020752 -265.43212891]
[285.54977417 -251.51683044]
[279.94937134 -237.60153198]
[280.98928833 -232.88670349]
[279.03762817 -227.47229004]
[273.83306885 -223.24607849]
[267.67687988 -209.56758118]
[269.50909424 -194.78608704]
[256.78967285 -185.37719727]
[250.63348389 -171.69869995]
[244.47729492 -158.02020264]
[253.29428101 -146.01493835]
[254.92916870 -131.10913086]
[248.84336853 -117.29503632]
[236.57963562 -108.32298279]
[221.37243652 -106.68334198]
[215.21624756 -93.00484467]
[209.06005859 -79.32634735]
[202.90386963 -65.64785004]
[196.74766541 -51.96934891]
[198.57987976 -37.18786621]
[185.86047363 -27.77897835]
[179.70426941 -14.10048008]
[181.53648376 0.68100452]
[168.81707764 10.08989239]
[162.66087341 23.76839066]
[156.50468445 37.44688797]
[150.34849548 51.12538528]
[144.19230652 64.80388641]
[138.03611755 78.48238373]
[143.07168579 92.61189270]
[156.49119568 99.31386566]
[169.91072083 106.01584625]
[185.71385193 105.25968170]
[193.64309692 117.86826324]
[207.06260681 124.57024384]
[223.39025879 123.04052734]
[232.65687561 136.57057190]
[225.32975769 151.24180603]
[208.94642639 151.96174622]
[200.36062622 137.98976135]
[186.94111633 131.28778076]
[172.09783936 132.52331543]
[163.20874023 119.43536377]
[149.78923035 112.73339081]
[136.36970520 106.03141022]
[143.07995605 124.76629639]
[139.87283325 148.15077209]
[146.84367371 161.43261719]
[153.81452942 174.71446228]
[160.78536987 187.99630737]
[167.75622559 201.27813721]
[180.47079468 212.49311829]
[173.21385193 227.81542969]
[156.48143005 225.08372498]
[154.47438049 208.24899292]
[147.50352478 194.96714783]
[140.53268433 181.68530273]
[133.56184387 168.40347290]
[126.59098816 155.12162781]
[119.32736969 156.98973083]
[97.53649902 162.59402466]
[97.83855438 177.59098816]
[98.14060974 192.58793640]
[100.71880341 211.79739380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[28 52]
[29 51]
[30 50]
[31 49]
[57 120]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[64 113]
[65 112]
[67 110]
[68 109]
[69 108]
[70 107]
[71 106]
[76 101]
[77 100]
[78 99]
[80 97]
[81 96]
[82 93]
[83 92]
[84 91]
[121 136]
[122 135]
[123 134]
[125 132]
[126 131]
[138 150]
[139 149]
[140 148]
[141 147]
[142 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
