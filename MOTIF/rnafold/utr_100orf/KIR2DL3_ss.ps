%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGGGCGCGGCCGCCUGUCUGCACAGACAGCACCAUGUCGCUCAUGGUCGUCAGCAUGGUGUGUGUUGGGUUCUUCUUGCUGCAGGGGGCCUGGCCACAUGAGGGAGUCCACAGAAAACCUUCCCUCCUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[85.89710999 190.69303894]
[94.24161530 176.57563782]
[93.90016937 161.57951355]
[93.55871582 146.58340454]
[93.21726990 131.58729553]
[92.87582397 116.59117889]
[87.37300873 102.63700104]
[77.38690948 91.44424438]
[67.40080261 80.25149536]
[51.85969925 79.19707489]
[41.89181900 67.70377350]
[42.99281693 52.89420700]
[33.00671387 41.70145035]
[23.02061272 30.50869560]
[13.03451061 19.31593895]
[-1.92626524 14.16950703]
[-4.62587357 -0.47840670]
[-14.61197567 -11.67116165]
[-24.59807777 -22.86391640]
[-34.58417892 -34.05667114]
[-44.57028198 -45.24942780]
[-57.43402100 -46.77906799]
[-65.52058411 -56.37957764]
[-64.88293457 -68.51324463]
[-74.61166382 -79.93041229]
[-84.34039307 -91.34758759]
[-92.36045837 -95.90117645]
[-94.15704346 -103.13716888]
[-103.62335968 -114.77283478]
[-113.08968353 -126.40850067]
[-130.41802979 -132.51931763]
[-132.61697388 -149.89294434]
[-142.34570312 -161.31010437]
[-152.07443237 -172.72727966]
[-160.09449768 -177.28086853]
[-161.89108276 -184.51686096]
[-171.35740662 -196.15252686]
[-180.82371521 -207.78819275]
[-196.21209717 -207.07824707]
[-208.91931152 -215.46754456]
[-214.18769836 -229.56391907]
[-210.19316101 -243.88809204]
[-219.65948486 -255.52375793]
[-229.12579346 -267.15942383]
[-238.72393799 -278.68658447]
[-248.45268250 -290.10375977]
[-258.18139648 -301.52093506]
[-267.91012573 -312.93811035]
[-277.63885498 -324.35528564]
[-293.09848022 -323.02120972]
[-306.37231445 -331.05767822]
[-312.35632324 -345.37451172]
[-308.74948120 -360.46658325]
[-296.93875122 -370.53067017]
[-281.46557617 -371.69696045]
[-268.27969360 -363.51696777]
[-262.45135498 -349.13604736]
[-266.22171021 -334.08401489]
[-256.49298096 -322.66683960]
[-246.76423645 -311.24966431]
[-237.03550720 -299.83248901]
[-227.30677795 -288.41531372]
[-220.51585388 -285.33789062]
[-217.49012756 -276.62573242]
[-208.02380371 -264.99008179]
[-198.55749512 -253.35440063]
[-183.72021484 -254.35105896]
[-170.99055481 -246.32487488]
[-165.36209106 -232.17658997]
[-169.18804932 -217.25451660]
[-159.72174072 -205.61885071]
[-150.25541687 -193.98318481]
[-140.65727234 -182.45600891]
[-130.92854309 -171.03883362]
[-121.19980621 -159.62167358]
[-109.11869049 -158.32583618]
[-100.92301941 -148.81829834]
[-101.45401001 -135.87481689]
[-91.98769379 -124.23915100]
[-82.52136993 -112.60348511]
[-72.92322540 -101.07631683]
[-63.19449615 -89.65914917]
[-53.46576309 -78.24197388]
[-36.66120529 -73.31399536]
[-33.37752533 -55.23553085]
[-23.39142418 -44.04277420]
[-13.40532207 -32.85001755]
[-3.41921997 -21.65726471]
[6.56688166 -10.46450806]
[20.81338501 -6.11865711]
[24.22726631 9.32983780]
[34.21336746 20.52259254]
[44.19947052 31.71534729]
[54.18556976 42.90810394]
[69.02436066 43.49630356]
[79.31113434 54.70509338]
[78.59355927 70.26538849]
[88.57966614 81.45814514]
[98.56576538 92.65090179]
[101.66491699 88.14260101]
[107.47980499 85.33802032]
[115.08329773 85.46677399]
[123.06754303 89.29225922]
[129.76100159 96.94306183]
[142.01554871 105.59326935]
[154.27011108 114.24346924]
[166.52465820 122.89367676]
[178.77920532 131.54388428]
[191.03375244 140.19409180]
[203.28829956 148.84428406]
[216.35005188 141.01417542]
[231.46812439 139.18014526]
[246.02322388 143.65997314]
[257.49359131 153.67745972]
[263.89193726 167.49705505]
[264.10968018 182.72442627]
[258.10910034 196.72131348]
[246.92985535 207.06269836]
[232.50878906 211.95684814]
[217.34445190 210.55584717]
[204.06416321 203.10241699]
[194.96879578 190.88790894]
[191.63420105 176.02856445]
[194.63809204 161.09884644]
[182.38354492 152.44863892]
[170.12899780 143.79843140]
[157.87445068 135.14822388]
[145.61990356 126.49801636]
[133.36535645 117.84781647]
[121.11080170 109.19760895]
[107.87193298 116.24973297]
[108.21338654 131.24584961]
[108.55483246 146.24195862]
[108.89627838 161.23806763]
[109.23772430 176.23419189]
[118.21613312 189.95716858]
[110.58039093 204.47016907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 135]
[3 134]
[4 133]
[5 132]
[6 131]
[7 99]
[8 98]
[9 97]
[12 94]
[13 93]
[14 92]
[15 91]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[24 83]
[25 82]
[26 81]
[28 80]
[29 79]
[30 78]
[32 75]
[33 74]
[34 73]
[36 72]
[37 71]
[38 70]
[42 66]
[43 65]
[44 64]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
