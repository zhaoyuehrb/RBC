%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:33:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCUUCUUGCCCAAGCUUCUCCUCCUGGCCUCAUUCUUCCCAGCAGGCCAGGCCUCAUGGGGCGUCUCCAGUCCCCAGGACGUGCAGGGUGUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[43.33386993 242.61999512]
[30.39526749 243.74896240]
[22.42890167 256.45867920]
[14.46253395 269.16839600]
[6.49616718 281.87811279]
[-1.47019982 294.58786011]
[0.70118725 310.48327637]
[-10.47633171 321.99163818]
[-26.42832184 320.28472900]
[-34.91778183 306.67190552]
[-29.43232155 291.59579468]
[-14.17992020 286.62149048]
[-6.21355343 273.91174316]
[1.75281358 261.20202637]
[9.71918011 248.49230957]
[17.68554688 235.78259277]
[13.19873333 219.65783691]
[21.85873032 204.94447327]
[38.78651047 200.88327026]
[46.35375214 187.93194580]
[53.92099380 174.98062134]
[61.48823929 162.02929688]
[68.44319153 148.73913574]
[74.77071381 135.13903809]
[81.09824371 121.53894806]
[87.42576599 107.93885803]
[86.26050568 92.98419189]
[77.90272522 80.52837372]
[69.54494476 68.07254791]
[61.18715668 55.61673355]
[52.82937241 43.16091156]
[44.47158813 30.70509148]
[36.11380386 18.24927330]
[27.75602150 5.79345274]
[12.75939751 8.44320202]
[-2.01688027 4.75789213]
[-14.01273251 -4.62397432]
[-21.14980507 -18.07693291]
[-22.19155884 -33.27017593]
[-16.95750046 -47.57138443]
[-6.35446453 -58.50278473]
[7.78050947 -64.17044830]
[22.99845123 -63.59241486]
[36.66276169 -56.86883545]
[46.40601730 -45.16461182]
[50.54013443 -30.50756645]
[48.34886169 -15.43712425]
[40.21184158 -2.56433129]
[48.56962585 9.89148808]
[56.92741013 22.34730721]
[65.28519440 34.80312729]
[73.64297485 47.25894928]
[82.00076294 59.71476746]
[90.35854340 72.17058563]
[98.71633148 84.62640381]
[113.13239288 88.77093506]
[126.82923889 82.65567780]
[140.52609253 76.54042816]
[143.90531921 65.96749878]
[152.43586731 59.21764755]
[163.06024170 58.39474869]
[172.14213562 63.53237915]
[186.19267273 58.28048325]
[200.24320984 53.02858353]
[214.29374695 47.77668762]
[228.34428406 42.52479172]
[233.39459229 27.72518349]
[246.80303955 19.67858505]
[262.23855591 22.18435287]
[272.41296387 34.05934143]
[272.52221680 49.69654083]
[262.51473999 61.71254730]
[247.11575317 64.43376923]
[233.59619141 56.57532883]
[219.54565430 61.82722473]
[205.49511719 67.07912445]
[191.44458008 72.33101654]
[177.39404297 77.58291626]
[166.43241882 93.38340759]
[146.64134216 90.23727417]
[132.94450378 96.35252380]
[119.24765015 102.46778107]
[133.35675049 107.56022644]
[140.33964539 120.83574677]
[136.54205322 135.34706116]
[123.95133209 143.50019836]
[109.15637207 141.02850342]
[99.89959717 129.22544861]
[101.02585602 114.26638794]
[94.69833374 127.86647797]
[88.37080383 141.46656799]
[82.04328156 155.06665039]
[82.55647278 160.62399292]
[80.93560791 165.28855896]
[77.92513275 168.36941528]
[74.43955994 169.59654236]
[66.87232208 182.54786682]
[59.30507660 195.49919128]
[51.73783493 208.45051575]
[56.65249634 221.10441589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[19 99]
[20 98]
[21 97]
[22 96]
[23 92]
[24 91]
[25 90]
[26 89]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[56 82]
[57 81]
[58 80]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
