%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGUCCUGGCCAUGGCCGGCCUGUCGGACCUGGAACUGCGGCGGGAGCUGCAGGCCCUGGGCUUCCAGCCAGGACCCAUCACCGACACCACCCGGGAUGUCUACCGCAACA\
) } def
/len { sequence length } bind def

/coor [
[133.84416199 497.03631592]
[145.58224487 487.28030396]
[141.89996338 472.73928833]
[138.21768188 458.19830322]
[134.53540039 443.65728760]
[130.85311890 429.11630249]
[127.17082977 414.57528687]
[123.48854828 400.03427124]
[119.80626678 385.49328613]
[116.12398529 370.95227051]
[112.44170380 356.41125488]
[103.08684540 351.89688110]
[97.71387482 342.74972534]
[98.35211945 331.93875122]
[105.03134155 323.13446045]
[102.15568542 308.41268921]
[99.28002167 293.69091797]
[89.32188416 304.90856934]
[74.36557770 306.05258179]
[62.81715012 296.48004150]
[61.16730118 281.57104492]
[70.34330750 269.70507812]
[85.18787384 267.55130005]
[97.35736847 276.31961060]
[96.94405365 261.32531738]
[96.53073883 246.33100891]
[96.11742401 231.33670044]
[95.70410919 216.34239197]
[95.29079437 201.34808350]
[82.92028046 193.09530640]
[77.71987915 178.97369385]
[81.88061523 164.32646179]
[94.00847626 154.82797241]
[93.59516144 139.83366394]
[93.18184662 124.83936310]
[79.28414917 115.30799866]
[74.25355530 99.22428131]
[80.24332428 83.47260284]
[72.03910065 70.91510773]
[63.83487701 58.35760880]
[55.63065338 45.80011368]
[47.42643356 33.24261475]
[39.22220993 20.68511772]
[31.01798820 8.12762165]
[16.14942741 1.20967638]
[14.97599030 -15.14743423]
[28.70480728 -24.11691856]
[43.21284866 -16.47173882]
[43.57548523 -0.07660103]
[51.77970886 12.48089600]
[59.98392868 25.03839302]
[68.18814850 37.59589005]
[76.39237213 50.15338898]
[84.59659576 62.71088409]
[92.80081940 75.26837921]
[97.10080719 74.40554810]
[101.48484802 74.28470612]
[105.82583618 74.90934753]
[113.32583618 61.91896820]
[120.82583618 48.92858887]
[128.32583618 35.93820572]
[135.82583618 22.94782639]
[129.39169312 8.82757950]
[132.51901245 -6.37108850]
[144.00527954 -16.80397987]
[159.43379211 -18.45943260]
[172.87197876 -10.70089626]
[179.15257263 3.48831797]
[175.86056519 18.65216637]
[164.26177979 28.95983887]
[148.81622314 30.44782639]
[141.31622314 43.43820572]
[133.81622314 56.42858887]
[126.31622314 69.41896820]
[118.81622314 82.40934753]
[125.66461945 97.80715179]
[121.52767181 114.14356232]
[108.17614746 124.42604828]
[108.58946228 139.42034912]
[109.00277710 154.41465759]
[121.63546753 163.23062134]
[126.59677124 177.62641907]
[122.18219757 192.01306152]
[110.28509521 200.93476868]
[110.69841003 215.92907715]
[111.11172485 230.92338562]
[111.52503967 245.91769409]
[111.93835449 260.91198730]
[112.35166931 275.90631104]
[114.00179291 290.81524658]
[116.87745667 305.53701782]
[119.75311279 320.25878906]
[133.70089722 334.68484497]
[126.98271179 352.72897339]
[130.66499329 367.26998901]
[134.34727478 381.81100464]
[138.02955627 396.35198975]
[141.71183777 410.89300537]
[145.39411926 425.43399048]
[149.07640076 439.97500610]
[152.75868225 454.51602173]
[156.44096375 469.05700684]
[160.12324524 483.59802246]
[175.08995056 486.59149170]
[187.27049255 495.78915405]
[194.24641418 509.36483765]
[194.63267517 524.62304688]
[188.35253906 538.53430176]
[176.65296936 548.33648682]
[161.85688782 552.08337402]
[146.90209961 549.03100586]
[134.75787354 539.78540039]
[127.83545685 526.18237305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[10 95]
[11 94]
[15 92]
[16 91]
[17 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[33 80]
[34 79]
[35 78]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
