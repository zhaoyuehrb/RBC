%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUACAUUUUGGAUCCUCGCGGAGUACUGGUCAGGCGGUUAAGUCCUGUACCUAGGAAAGAGGGCGAGCUCUGGGGCGCUCUCCGGUGUCAUGAGGAGCUUCAAAAGAGUCAACUUUGGGACUCUGCUAAGCAGCCAGAAGGAGGCUGAAGAGUUGCUGCCCGCCUUGAAGGAGUUCCUGUCCAACCCUC\
) } def
/len { sequence length } bind def

/coor [
[60.38746262 459.26080322]
[59.65144730 444.27886963]
[58.91543579 429.29693604]
[58.17942047 414.31500244]
[57.19837189 399.34713745]
[55.97255707 384.39730835]
[54.74673843 369.44747925]
[52.68154907 367.52938843]
[51.25803757 364.67117310]
[50.84056473 361.11538696]
[51.69815445 357.23278809]
[53.96256256 353.48513794]
[53.71713638 338.48715210]
[53.47171021 323.48916626]
[52.98092270 308.49719238]
[52.24490738 293.51525879]
[51.50889206 278.53332520]
[50.77287674 263.55139160]
[49.91431808 248.57598877]
[48.93326950 233.60810852]
[40.38013458 221.41412354]
[47.19829178 207.13746643]
[46.21724701 192.16957092]
[41.39213943 190.70422363]
[36.90693665 188.39947510]
[32.90628815 185.32966614]
[29.51921463 181.59379578]
[26.85495758 177.31237793]
[12.14317703 180.23872375]
[-2.54416847 183.28533936]
[-17.20609856 186.45201111]
[-31.86802864 189.61868286]
[-46.50355911 192.90521240]
[-61.11171341 196.31135559]
[-75.71987152 199.71749878]
[-90.32802582 203.12364197]
[-95.40675354 217.69107056]
[-107.56906891 227.18220520]
[-122.93402100 228.56845093]
[-136.59870911 221.40747070]
[-144.20278931 207.98429871]
[-143.31982422 192.58221436]
[-134.23155212 180.11598206]
[-119.83802032 174.56353760]
[-104.73214722 177.69660950]
[-93.73416901 188.51548767]
[-79.12601471 185.10934448]
[-64.51786041 181.70320129]
[-49.90970230 178.29705811]
[-44.10013962 173.70899963]
[-35.03470230 174.95675659]
[-20.37277222 171.79008484]
[-5.71084166 168.62341309]
[0.17301279 164.13102722]
[9.21682262 165.52694702]
[23.92860222 162.60058594]
[25.23415756 155.53169250]
[28.30305672 148.99159241]
[32.95156479 143.41464233]
[38.89040375 139.17628479]
[45.74273300 136.56779480]
[53.06802368 135.77630615]
[60.39038467 136.87155151]
[68.31140137 124.13352203]
[76.23242188 111.39549255]
[84.15344238 98.65746307]
[85.50151825 83.71816254]
[79.98878479 69.76789856]
[74.47604370 55.81764221]
[68.96330261 41.86738586]
[63.45056534 27.91712570]
[57.93782425 13.96686840]
[52.42508698 0.01660985]
[34.77613068 -6.83570194]
[27.84344482 -24.10999107]
[35.58880615 -40.68405533]
[29.62258148 -54.44647217]
[23.65635300 -68.20888519]
[17.69012642 -81.97130585]
[11.72389984 -95.73372650]
[5.75767231 -109.49613953]
[-7.72939873 -118.82518005]
[-6.12425137 -135.14558411]
[8.92187595 -141.66831970]
[21.93081856 -131.68334961]
[19.52009010 -115.46237183]
[25.48631668 -101.69995117]
[31.45254326 -87.93753052]
[37.41876984 -74.17511749]
[43.38499832 -60.41269684]
[49.35122681 -46.65028000]
[60.63654709 -44.85125351]
[69.74171448 -37.74863434]
[74.32777405 -27.01995468]
[73.14598846 -15.29161930]
[66.37534332 -5.49612904]
[71.88808441 8.45412922]
[77.40082550 22.40438843]
[82.91355896 36.35464478]
[88.42630005 50.30490494]
[93.93904114 64.25516510]
[99.45178223 78.20542145]
[106.87060547 79.30590057]
[109.07179260 64.46828461]
[123.90937042 66.66970062]
[121.70825195 81.50685883]
[129.12707520 82.60733795]
[138.45198059 70.85803223]
[147.77688599 59.10873413]
[157.10180664 47.35943222]
[166.42671204 35.61013031]
[175.75161743 23.86082840]
[171.45898438 8.94932747]
[176.78256226 -5.62596416]
[189.67532349 -14.26054859]
[205.17976379 -13.63425159]
[217.33407593 -3.98789811]
[221.46470642 10.96929264]
[215.98332214 25.48597717]
[202.99765015 33.98019028]
[187.50091553 33.18573761]
[178.17601013 44.93503952]
[168.85110474 56.68434143]
[159.52619934 68.43363953]
[150.20127869 80.18294525]
[140.87637329 91.93224335]
[148.05531311 105.10276794]
[162.98309326 103.63251495]
[177.91085815 102.16225433]
[185.81350708 88.93901062]
[199.82336426 82.97433472]
[214.48564148 86.36280823]
[224.22454834 97.60075378]
[239.15232849 96.13050079]
[254.08009338 94.66024017]
[269.00787354 93.18998718]
[283.93563843 91.71972656]
[292.61480713 78.71179962]
[307.63919067 74.37565613]
[321.91470337 80.75868988]
[328.70092773 94.84702301]
[324.79360962 109.98857880]
[312.03762817 119.03398132]
[296.45602417 117.71225739]
[285.40588379 106.64749908]
[270.47811890 108.11775970]
[255.55035400 109.58801270]
[240.62258911 111.05827332]
[225.69480896 112.52852631]
[218.33544922 125.45051575]
[204.61596680 131.63433838]
[189.71165466 128.51745605]
[179.38111877 117.09002686]
[164.45333862 118.56028748]
[149.52557373 120.03054047]
[133.51715088 128.80392456]
[117.83528137 130.07310486]
[105.35774994 125.17082214]
[98.09208679 116.39469147]
[96.89147186 106.57847595]
[88.97045135 119.31651306]
[81.04943848 132.05455017]
[73.12841797 144.79257202]
[79.67927551 171.48982239]
[61.18513107 191.18853760]
[62.16617584 206.15641785]
[70.78948212 219.42098999]
[63.90115356 232.62705994]
[64.88220215 247.59494019]
[68.57127380 255.96929932]
[65.75480652 262.81539917]
[66.49082184 277.79733276]
[67.22683716 292.77923584]
[67.96285248 307.76116943]
[71.23155975 313.53799438]
[71.09978485 319.23977661]
[68.46970367 323.24374390]
[68.71512604 338.24172974]
[68.96055603 353.23971558]
[69.69657135 368.22164917]
[70.92238617 383.17147827]
[72.14820099 398.12130737]
[75.60416412 403.78808594]
[75.65901947 409.49111938]
[73.16135406 413.57901001]
[73.89736938 428.56094360]
[74.63338470 443.54287720]
[75.36939240 458.52478027]
[84.70587158 472.00671387]
[77.45474243 486.71566772]
[61.07534790 487.52032471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 188]
[2 187]
[3 186]
[4 185]
[5 182]
[6 181]
[7 180]
[12 179]
[13 178]
[14 177]
[15 174]
[16 173]
[17 172]
[18 171]
[19 169]
[20 168]
[22 166]
[23 165]
[28 56]
[29 55]
[30 53]
[31 52]
[32 51]
[33 49]
[34 48]
[35 47]
[36 46]
[63 163]
[64 162]
[65 161]
[66 160]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[127 155]
[128 154]
[129 153]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
