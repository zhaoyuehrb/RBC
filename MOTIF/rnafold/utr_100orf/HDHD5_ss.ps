%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUGCACGUGCGCACGGCGACGGCCGGAUGGCUGCGUGGGGCUGUGUGGCUGCGCUCGGCGCGGCGCGUGGGCUUUGCUGGCGGGCGGCGCGCGCGGCUGCGGGGCUCCAGGGCCGCCCCGCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[12.15064621 315.45355225]
[8.83249760 316.91101074]
[2.13680625 330.33367920]
[-4.55888510 343.75634766]
[-11.25457668 357.17898560]
[-17.95026779 370.60165405]
[-12.70146847 385.50888062]
[-19.60626221 399.72503662]
[-34.56815720 404.81594849]
[-48.71052551 397.76123047]
[-53.64295197 382.74636841]
[-46.43911743 368.67935181]
[-31.37292480 363.90594482]
[-24.67723274 350.48330688]
[-17.98154259 337.06063843]
[-11.28585052 323.63796997]
[-4.59015894 310.21533203]
[1.61084270 296.55709839]
[7.30888081 282.68148804]
[13.00691891 268.80587769]
[11.97970390 264.04501343]
[14.00657272 258.59582520]
[19.33503151 254.40432739]
[25.70188332 240.82260132]
[32.06873322 227.24089050]
[30.46518326 212.43284607]
[43.32848358 203.22166443]
[49.69533539 189.63993835]
[48.09178543 174.83189392]
[60.95508575 165.62071228]
[67.32193756 152.03898621]
[73.68878937 138.45726013]
[80.05564117 124.87553406]
[86.42248535 111.29380798]
[82.45712280 102.03631592]
[84.19646454 92.11664581]
[91.07489777 84.76052856]
[100.85565186 82.36007690]
[107.87621307 69.10444641]
[114.89677429 55.84881973]
[121.91733551 42.59318924]
[128.93789673 29.33755875]
[135.95845032 16.08192825]
[142.97901917 2.82629943]
[142.60049438 -12.99037838]
[155.39485168 -20.61623192]
[162.41542053 -33.87186050]
[169.43597412 -47.12749100]
[176.45654297 -60.38312149]
[183.47709656 -73.63874817]
[190.49766541 -86.89437866]
[197.51821899 -100.15000916]
[204.53878784 -113.40563965]
[211.55934143 -126.66127014]
[218.57991028 -139.91690063]
[225.60046387 -153.17253113]
[225.38909912 -158.59706116]
[227.16406250 -163.07138062]
[230.20413208 -165.98393250]
[233.64830017 -167.11178589]
[241.61772156 -179.81958008]
[249.58715820 -192.52737427]
[257.55657959 -205.23518372]
[258.33361816 -221.03729248]
[271.65051270 -227.70887756]
[279.61993408 -240.41667175]
[280.39697266 -256.21878052]
[293.71383667 -262.89038086]
[301.68328857 -275.59817505]
[309.65270996 -288.30596924]
[310.42974854 -304.10809326]
[323.74661255 -310.77966309]
[331.71603394 -323.48745728]
[339.68548584 -336.19525146]
[342.97836304 -352.82635498]
[359.87106323 -354.26611328]
[365.93090820 -338.43212891]
[352.39328003 -328.22583008]
[344.42385864 -315.51803589]
[336.45440674 -302.81024170]
[336.24740601 -287.91705322]
[322.36050415 -280.33654785]
[314.39108276 -267.62872314]
[306.42163086 -254.92094421]
[306.21463013 -240.02777100]
[292.32772827 -232.44723511]
[284.35830688 -219.73944092]
[284.15130615 -204.84628296]
[270.26440430 -197.26574707]
[262.29495239 -184.55795288]
[254.32553101 -171.85014343]
[246.35609436 -159.14234924]
[238.85609436 -146.15196228]
[231.83554077 -132.89633179]
[224.81497192 -119.64070892]
[217.79441833 -106.38507843]
[210.77384949 -93.12944794]
[203.75329590 -79.87381744]
[196.73272705 -66.61818695]
[189.71217346 -53.36256027]
[182.69160461 -40.10692978]
[175.67105103 -26.85130119]
[168.65048218 -13.59567070]
[169.53115845 1.27287519]
[156.23464966 9.84686089]
[149.21408081 23.10248947]
[142.19352722 36.35811996]
[135.17295837 49.61375046]
[128.15240479 62.86938095]
[121.13183594 76.12500763]
[114.11127472 89.38063812]
[115.80353546 107.88335419]
[100.00421143 117.66065979]
[93.63735962 131.24238586]
[87.27050781 144.82411194]
[80.90366364 158.40583801]
[74.53681183 171.98754883]
[75.68495941 187.76704407]
[63.27705765 196.00679016]
[56.91020966 209.58850098]
[58.05835724 225.36799622]
[45.65045547 233.60774231]
[39.28360748 247.18945312]
[32.91675568 260.77117920]
[26.88252258 274.50390625]
[21.18448448 288.37951660]
[15.48644543 302.25512695]
[16.22440529 307.63339233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[18 127]
[19 126]
[20 125]
[23 124]
[24 123]
[25 122]
[27 120]
[28 119]
[30 117]
[31 116]
[32 115]
[33 114]
[34 113]
[38 111]
[39 110]
[40 109]
[41 108]
[42 107]
[43 106]
[44 105]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[56 93]
[60 92]
[61 91]
[62 90]
[63 89]
[65 87]
[66 86]
[68 84]
[69 83]
[70 82]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
