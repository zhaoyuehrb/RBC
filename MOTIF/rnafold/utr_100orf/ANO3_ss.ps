%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAGAAUUCAAUAGUGUGAACUUUACUUUACAUAGUUAUAUGGGAAUUUUGCAAUGUCAGUUUUAAAAUUUGAACUGGAUAAUUUUUCUCCUGAAGGCUUCAGACAUGAGCACGCUUCCAACUCAUGUUUUGCUUUACCCUGUUUGACUGAAC\
) } def
/len { sequence length } bind def

/coor [
[14.90054131 364.12188721]
[18.28564072 378.73492432]
[17.29416656 393.70211792]
[12.01108170 407.74096680]
[2.88907933 419.64846802]
[-9.29019356 428.40435791]
[-23.48311996 433.25830078]
[-38.47353745 433.79440308]
[-52.97694397 429.96673584]
[-65.75057983 422.10324097]
[-75.69989014 410.87777710]
[-81.97233582 397.25219727]
[-84.03045654 382.39407349]
[-81.69788361 367.57653809]
[-75.17438507 354.06912231]
[-87.74063110 362.25994873]
[-100.30686951 370.45077515]
[-112.87311554 378.64160156]
[-125.43935394 386.83242798]
[-138.00559998 395.02322388]
[-150.57183838 403.21405029]
[-153.58596802 418.72827148]
[-166.73402405 427.49777222]
[-182.21548462 424.31979370]
[-190.84550476 411.07974243]
[-187.50401306 395.63275146]
[-174.17347717 387.14318848]
[-158.76266479 390.64782715]
[-146.19641113 382.45700073]
[-133.63017273 374.26617432]
[-121.06393433 366.07534790]
[-108.49769592 357.88452148]
[-95.93144989 349.69369507]
[-83.36521149 341.50289917]
[-72.59860229 331.05874634]
[-64.02957916 318.74728394]
[-55.46055984 306.43582153]
[-46.89153671 294.12438965]
[-38.32251358 281.81292725]
[-37.40232086 266.94677734]
[-23.16822624 260.04016113]
[-14.59920311 247.72871399]
[-6.03017950 235.41726685]
[2.53884363 223.10581970]
[11.10786724 210.79437256]
[3.68949509 199.03494263]
[1.31665063 185.29106140]
[4.38165426 171.64031982]
[12.45225811 160.15910339]
[24.33226395 152.60675049]
[38.23873138 150.15596008]
[52.06953430 153.21086121]
[60.88631058 141.07560730]
[69.70308685 128.94035339]
[78.51986694 116.80509949]
[66.83511353 100.58709717]
[68.39776611 77.03143311]
[86.87886047 56.99245453]
[81.52700043 42.97969055]
[76.17514038 28.96692276]
[70.82328033 14.95415783]
[65.47142792 0.94139177]
[60.11956406 -13.07137394]
[54.76770782 -27.08414078]
[39.75165939 -30.99539375]
[29.92843628 -43.00721741]
[29.07526970 -58.50082397]
[37.52021790 -71.51860046]
[52.01602936 -77.05494690]
[66.98876190 -72.98102570]
[76.68109894 -60.86334229]
[77.36614227 -45.36139679]
[68.78047180 -32.43599701]
[74.13233185 -18.42323303]
[79.48419189 -4.41046715]
[84.83605194 9.60229874]
[90.18790436 23.61506462]
[95.53976440 37.62783051]
[100.89162445 51.64059448]
[108.18881226 53.37295532]
[110.21018982 38.50977707]
[112.23157501 23.64660072]
[114.25295258 8.78342342]
[113.19825745 -6.17945099]
[124.63180542 -15.88893414]
[139.22613525 -12.42406178]
[145.07525635 1.38853371]
[137.40777588 14.28039646]
[132.53291321 28.46615410]
[127.65805054 42.65191269]
[122.78318787 56.83766937]
[130.08036804 58.57003021]
[141.15948486 48.45798874]
[152.23858643 38.34594727]
[163.31770325 28.23390579]
[174.39680481 18.12186432]
[182.01963806 2.97826409]
[198.68164062 6.11103582]
[200.28379822 22.98911095]
[184.50885010 29.20097160]
[173.42973328 39.31301117]
[162.35063171 49.42505264]
[151.27151489 59.53709412]
[140.19241333 69.64913940]
[145.40199280 83.71541595]
[160.39506531 84.17138672]
[175.38812256 84.62734985]
[190.38119507 85.08332062]
[205.37426758 85.53929138]
[220.36734009 85.99525452]
[235.36039734 86.45122528]
[242.82629395 73.09011841]
[255.65254211 64.73873138]
[270.89181519 63.31615448]
[285.04217529 69.14927673]
[294.85202026 80.89770508]
[298.06710815 95.86171722]
[293.94863892 110.60270691]
[283.44299316 121.73329926]
[268.96429443 126.69576263]
[253.83966064 124.34976196]
[241.54460144 115.23439026]
[234.90443420 101.44429016]
[219.91136169 100.98831940]
[204.91830444 100.53235626]
[189.92523193 100.07638550]
[174.93215942 99.62042236]
[159.93908691 99.16445160]
[144.94602966 98.70848846]
[121.12992859 129.29312134]
[90.65512085 125.62187958]
[81.83834839 137.75714111]
[73.02156830 149.89239502]
[64.20478821 162.02764893]
[72.02325439 176.26512146]
[72.86143494 192.42829895]
[66.60263824 207.29107666]
[54.54167938 217.90892029]
[39.11733627 222.20220947]
[23.41931915 219.36338806]
[14.85029507 231.67483521]
[6.28127193 243.98629761]
[-2.28775120 256.29772949]
[-10.85677433 268.60919189]
[-12.38988113 284.35595703]
[-26.01106071 290.38195801]
[-34.58008194 302.69338989]
[-43.14910507 315.00485229]
[-51.71812820 327.31631470]
[-60.28715134 339.62774658]
[-46.58788681 333.51791382]
[-31.70630836 331.63677979]
[-16.91759300 334.14556885]
[-3.48895454 340.82925415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[35 150]
[36 149]
[37 148]
[38 147]
[39 146]
[41 144]
[42 143]
[43 142]
[44 141]
[45 140]
[52 134]
[53 133]
[54 132]
[55 131]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
