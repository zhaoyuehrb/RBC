%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCACUGCGCAGAGGCUGGGAAGGCUUUAAUUAAAUUCAACCACUGUGAGAAAUACAUCUACAGCUUCAGUGUGCCCCAGUGCUGCCCUCUCUGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[77.48584747 332.76464844]
[62.24697113 336.27328491]
[48.34157181 329.11968994]
[42.33535385 314.68157959]
[47.06427383 299.77615356]
[60.29547501 291.44134521]
[62.15695572 276.55728149]
[64.01844025 261.67324829]
[61.68391418 254.51953125]
[66.17626190 246.35794067]
[68.49973297 231.53898621]
[70.82320404 216.72003174]
[73.14667511 201.90107727]
[75.47014618 187.08212280]
[77.79362488 172.26316833]
[80.11709595 157.44419861]
[77.96640778 152.99838257]
[78.71442413 147.13748169]
[83.07342529 141.78788757]
[86.31369019 127.14204407]
[89.55396271 112.49620056]
[83.86309814 102.20797729]
[86.58110046 90.76918793]
[96.29163361 84.14053345]
[99.98581696 69.60254669]
[103.68000031 55.06455994]
[91.29342651 47.55406952]
[81.55416107 36.85275650]
[75.25420380 23.84433174]
[72.90203857 9.59955788]
[74.68162537 -4.71188974]
[80.43801117 -17.91746330]
[89.69081116 -28.93781090]
[101.67427063 -36.87500000]
[115.40061188 -41.08566666]
[129.74151611 -41.23317719]
[133.88603210 -55.64924240]
[121.67561340 -64.60082245]
[113.28031158 -77.16629028]
[109.69733429 -91.81833649]
[111.34038544 -106.78398132]
[117.99196625 -120.25906372]
[128.83197021 -130.62577820]
[142.53874207 -136.64688110]
[157.45018005 -137.61332703]
[161.59471130 -152.02938843]
[165.73924255 -166.44544983]
[169.88375854 -180.86151123]
[169.25352478 -190.15643311]
[174.38784790 -195.65771484]
[178.97871399 -209.93791199]
[183.56956482 -224.21810913]
[176.12875366 -238.16119385]
[180.80642700 -253.25738525]
[194.82740784 -260.55038452]
[209.87329102 -255.71334839]
[217.01763916 -241.61604309]
[212.02182007 -226.62214661]
[197.84976196 -219.62724304]
[193.25891113 -205.34704590]
[188.66804504 -191.06684875]
[184.29983521 -176.71697998]
[180.15530396 -162.30091858]
[176.01077271 -147.88485718]
[171.86625671 -133.46879578]
[183.98767090 -124.73057556]
[192.40386963 -112.34926605]
[196.08308411 -97.80836487]
[194.56257629 -82.85813141]
[188.00663757 -69.30491638]
[177.18914795 -58.79290390]
[163.40228271 -52.60467529]
[148.30210876 -51.50471497]
[144.15757751 -37.08865356]
[157.16857910 -28.51579285]
[166.92739868 -16.34418297]
[172.48022461 -1.74446571]
[173.27850342 13.87450027]
[169.23312378 29.00158882]
[160.72416687 42.16960907]
[148.56521606 52.09761047]
[133.92561340 57.81548309]
[118.21797943 58.75874710]
[114.52379608 73.29673004]
[110.82961273 87.83471680]
[115.84606171 103.76522827]
[104.19980621 115.73646545]
[100.95953369 130.38230896]
[97.71926880 145.02815247]
[94.93605042 159.76768494]
[92.61257935 174.58663940]
[90.28910828 189.40559387]
[87.96562958 204.22454834]
[85.64215851 219.04350281]
[83.31868744 233.86245728]
[80.99521637 248.68141174]
[78.90248871 263.53472900]
[77.04100037 278.41876221]
[75.17951965 293.30282593]
[85.95050049 304.63949585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 99]
[7 98]
[8 97]
[10 96]
[11 95]
[12 94]
[13 93]
[14 92]
[15 91]
[16 90]
[19 89]
[20 88]
[21 87]
[24 85]
[25 84]
[26 83]
[36 74]
[37 73]
[45 65]
[46 64]
[47 63]
[48 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
