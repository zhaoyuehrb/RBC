%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCUGGGCACCUGGGCAGCCGCCGCGGCGCUGGCUAGACGUGCGCGAUGGAGGGCGACGGCGGGACCCCAUGGGCCCUGGCGCUGCUGCGCACCUUCGACGCGGGCGAGUUCACGGGCUGGGAGAAGGUGGGCUCGGGCGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[134.44084167 129.98229980]
[129.65608215 125.66157532]
[126.27835846 120.12274933]
[124.60695648 113.81224823]
[110.04574585 110.21070099]
[96.56077576 113.90493011]
[86.35271454 104.35050964]
[71.79150391 100.74896240]
[57.23028946 97.14742279]
[42.66907883 93.54587555]
[33.51737976 94.52355957]
[27.84045029 89.71186066]
[13.35840702 85.80412292]
[-1.16402769 82.04927063]
[-15.72523880 78.44773102]
[-30.28645134 74.84618378]
[-44.84766006 71.24463654]
[-56.71406174 81.06781006]
[-71.91167450 82.00910187]
[-84.59935760 73.91672516]
[-90.02410126 60.07077789]
[-104.58531189 56.46923447]
[-119.14652252 52.86768723]
[-133.70773315 49.26614380]
[-148.26895142 45.66460037]
[-162.83015442 42.06305695]
[-171.87692261 48.25382996]
[-182.61764526 48.40182495]
[-191.46083069 42.70126724]
[-195.58395386 33.26153946]
[-209.98039246 29.04934692]
[-224.37683105 24.83715439]
[-238.77326965 20.62496185]
[-252.51776123 27.95482063]
[-267.05780029 23.47797585]
[-273.96099854 10.32953739]
[-288.35742188 6.11734390]
[-302.75387573 1.90515113]
[-314.46621704 7.41205025]
[-326.40023804 3.55880523]
[-332.28991699 -7.05558443]
[-346.59432983 -11.57036018]
[-362.48013306 -7.49926043]
[-373.75372314 -19.40883636]
[-368.81784058 -35.04753494]
[-352.75006104 -38.32760620]
[-342.07955933 -25.87479401]
[-327.77514648 -21.36001778]
[-310.90670776 -26.09398651]
[-298.54165649 -12.49128723]
[-284.14523315 -8.27909374]
[-269.74877930 -4.06690121]
[-256.84695435 -11.42066479]
[-242.18690491 -7.35398483]
[-234.56108093 6.22852373]
[-220.16464233 10.44071674]
[-205.76820374 14.65290928]
[-191.37176514 18.86510277]
[-173.03001404 12.87009811]
[-159.22860718 27.50184441]
[-144.66740417 31.10338783]
[-130.10618591 34.70493317]
[-115.54497528 38.30647659]
[-100.98376465 41.90802383]
[-86.42255402 45.50956726]
[-75.16886902 35.78883362]
[-60.17173004 34.54396820]
[-47.16518021 42.46123123]
[-41.24611664 56.68342590]
[-26.68490601 60.28497314]
[-12.12369442 63.88651657]
[2.43751693 67.48806000]
[9.73526096 66.03102875]
[17.26614380 71.32207489]
[31.74818802 75.22981262]
[46.27062225 78.98466492]
[60.83183289 82.58621216]
[75.39304352 86.18775177]
[89.95425415 89.78929901]
[103.43922424 86.09506989]
[113.64728546 95.64949036]
[128.20849609 99.25103760]
[150.76409912 89.83837891]
[168.03976440 106.13510132]
[182.97229004 107.55616760]
[197.90483093 108.97724152]
[212.83735657 110.39830780]
[227.76989746 111.81938171]
[242.70242310 113.24044800]
[257.67242432 114.18862152]
[272.66491699 114.66294098]
[286.70288086 107.36589813]
[299.17910767 115.50177765]
[314.17160034 115.97610474]
[329.16409302 116.45042419]
[344.15661621 116.92475128]
[359.14910889 117.39907074]
[374.14160156 117.87339020]
[389.13409424 118.34771729]
[396.77767944 106.83152771]
[409.02435303 100.66070557]
[422.61145020 101.35897064]
[433.97827148 108.63577271]
[440.19934082 120.49071503]
[455.17849731 121.28102112]
[470.15765381 122.07131958]
[486.32809448 113.32804871]
[500.67883301 123.37846375]
[515.67132568 123.85278320]
[527.02142334 112.85505676]
[542.82226562 113.18777466]
[553.69934082 124.65354156]
[553.19958496 140.44993591]
[541.61944580 151.20521545]
[525.82922363 150.53848267]
[515.19702148 138.84527588]
[500.20449829 138.37095642]
[491.13354492 146.43763733]
[478.59683228 146.12365723]
[469.36737061 137.05049133]
[454.38818359 136.26019287]
[439.40902710 135.46987915]
[429.51791382 148.53225708]
[413.63790894 153.19529724]
[397.94351196 147.44039917]
[388.65979004 133.34020996]
[373.66726685 132.86589050]
[358.67477417 132.39157104]
[343.68228149 131.91725159]
[328.68978882 131.44293213]
[313.69729614 130.96859741]
[298.70477295 130.49427795]
[285.73922729 137.82525635]
[272.19061279 129.65544128]
[257.19812012 129.18112183]
[254.35794067 131.37698364]
[250.29110718 132.26890564]
[245.63989258 131.28569031]
[241.28135681 128.17298889]
[226.34883118 126.75191498]
[211.41629028 125.33084106]
[196.48376465 123.90977478]
[181.55122375 122.48870087]
[166.61869812 121.06763458]
[163.25532532 126.28003693]
[158.51629639 130.34553528]
[152.77883911 132.91004944]
[146.50843811 133.74023438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 82]
[5 81]
[7 79]
[8 78]
[9 77]
[10 76]
[12 75]
[13 74]
[14 72]
[15 71]
[16 70]
[17 69]
[21 65]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[30 58]
[31 57]
[32 56]
[33 55]
[36 52]
[37 51]
[38 50]
[41 48]
[42 47]
[84 144]
[85 143]
[86 142]
[87 141]
[88 140]
[89 139]
[90 135]
[91 134]
[93 132]
[94 131]
[95 130]
[96 129]
[97 128]
[98 127]
[99 126]
[104 122]
[105 121]
[106 120]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
