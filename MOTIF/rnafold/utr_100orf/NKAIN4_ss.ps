%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCCAGGCUGCGGCGCGUGGGGAGCGGGCGGAGCGGGGGCGGGGGCCGAGCGCGGGGCACCCGGGGGCCUCCUGUAUAGGCGGGCACCAUGGGCUCCUGCUCCGGCCGCUGCGCGCUCGUCGUCCUCUGCGCUUUUCAGCUGGUCGCCGCCCUGGAGAGGCAGGUGUUUGACUUCCUGGGCUACCAGU\
) } def
/len { sequence length } bind def

/coor [
[409.60031128 487.12268066]
[421.44961548 477.10400391]
[420.21740723 462.15469360]
[418.98516846 447.20538330]
[417.75296021 432.25610352]
[416.52075195 417.30679321]
[415.28851318 402.35748291]
[414.05630493 387.40817261]
[412.82409668 372.45889282]
[405.16381836 369.51626587]
[398.83096313 364.18215942]
[394.55334473 357.00643921]
[392.84320068 348.75384521]
[393.93600464 340.32244873]
[381.70004272 331.64599609]
[369.46408081 322.96951294]
[357.22811890 314.29302979]
[344.99215698 305.61654663]
[332.75619507 296.94009399]
[320.52023315 288.26361084]
[317.72244263 288.61199951]
[314.61709595 287.86355591]
[311.62478638 285.89514160]
[309.20300293 282.73928833]
[307.79058838 278.59246826]
[296.15151978 269.13031006]
[284.51248169 259.66815186]
[272.87341309 250.20599365]
[261.23437500 240.74383545]
[246.47804260 238.71899414]
[240.65074158 224.01005554]
[229.01168823 214.54789734]
[217.37263489 205.08573914]
[205.73358154 195.62358093]
[194.09452820 186.16142273]
[182.45547485 176.69926453]
[170.81642151 167.23710632]
[159.17736816 157.77494812]
[147.53831482 148.31278992]
[135.89926147 138.85063171]
[124.26020813 129.38847351]
[112.62115479 119.92630768]
[89.14354706 128.40187073]
[64.18354034 110.14315033]
[49.49946594 107.08081055]
[34.81539154 104.01847076]
[20.10662651 101.07698822]
[5.37417078 98.25657654]
[-9.35828495 95.43616486]
[-20.58418655 106.14871216]
[-35.96726227 108.18356323]
[-49.59240723 100.75826263]
[-56.22047424 86.72799683]
[-53.30283737 71.48768616]
[-41.96138382 60.89754486]
[-26.55714035 59.02969742]
[-13.01334763 66.60236359]
[-6.53787231 80.70370483]
[8.19458389 83.52412415]
[22.92704010 86.34453583]
[30.09995842 84.51123047]
[37.87773132 89.33438873]
[52.56180573 92.39673615]
[67.24588013 95.45907593]
[71.53366089 89.30562592]
[80.10921478 76.99871826]
[84.39698792 70.84526825]
[76.43890381 58.13036346]
[68.37651825 45.48133087]
[60.21038437 32.89903259]
[52.04424667 20.31673622]
[43.87811279 7.73443937]
[35.60877609 -4.78027487]
[27.23679733 -17.22655869]
[18.86481857 -29.67284203]
[3.90477371 -36.39066315]
[2.51196504 -52.73055649]
[16.11919403 -61.88344193]
[30.72851181 -54.43361664]
[31.31110382 -38.04482269]
[39.68308258 -25.59853745]
[48.05505753 -13.15225315]
[54.40784073 -9.35041904]
[56.46040726 -0.43169737]
[64.62654877 12.15060043]
[72.79267883 24.73289871]
[80.95881653 37.31519699]
[87.24820709 41.22100067]
[89.15381622 50.17227554]
[97.11190033 62.88718414]
[110.97710419 67.29561615]
[121.07543182 76.22711945]
[126.22662354 87.52532196]
[126.29094696 98.88237000]
[122.08331299 108.28725433]
[133.72236633 117.74941254]
[145.36141968 127.21157074]
[157.00047302 136.67373657]
[168.63952637 146.13589478]
[180.27857971 155.59805298]
[191.91763306 165.06021118]
[203.55668640 174.52236938]
[215.19573975 183.98452759]
[226.83479309 193.44668579]
[238.47384644 202.90884399]
[250.11289978 212.37100220]
[265.70175171 215.07263184]
[270.69653320 229.10478210]
[282.33557129 238.56694031]
[293.97463989 248.02909851]
[305.61367798 257.49127197]
[317.25274658 266.95343018]
[329.19671631 276.02764893]
[341.43267822 284.70413208]
[353.66864014 293.38058472]
[365.90460205 302.05706787]
[378.14056396 310.73355103]
[390.37652588 319.41003418]
[402.61248779 328.08648682]
[427.51449585 324.97808838]
[442.65423584 344.29840088]
[457.50787354 346.38870239]
[472.36151123 348.47903442]
[487.21514893 350.56933594]
[498.79238892 338.24908447]
[515.26721191 335.28024292]
[530.11914062 342.63681030]
[537.58953857 357.24554443]
[552.47552490 359.09124756]
[567.36157227 360.93698120]
[582.24755859 362.78271484]
[597.13360596 364.62844849]
[606.05249023 362.57659912]
[612.24847412 366.62887573]
[627.10211182 368.71920776]
[641.95574951 370.80950928]
[656.80938721 372.89981079]
[671.66302490 374.99014282]
[686.51666260 377.08044434]
[701.37030029 379.17074585]
[716.22393799 381.26107788]
[722.51324463 379.13476562]
[728.08990479 380.33569336]
[731.52862549 383.67218018]
[746.30548096 386.24990845]
[761.08233643 388.82763672]
[776.28784180 382.68560791]
[789.04138184 392.99475098]
[786.22320557 409.14993286]
[770.73242188 414.53207397]
[758.50463867 403.60449219]
[743.72778320 401.02676392]
[728.95092773 398.44903564]
[714.13366699 396.11471558]
[699.28002930 394.02438354]
[684.42639160 391.93408203]
[669.57275391 389.84378052]
[654.71911621 387.75344849]
[639.86547852 385.66314697]
[625.01184082 383.57284546]
[610.15820312 381.48254395]
[595.28784180 379.51443481]
[580.40185547 377.66873169]
[565.51580811 375.82299805]
[550.62982178 373.97726440]
[535.74383545 372.13156128]
[527.56408691 382.69494629]
[515.13153076 387.87472534]
[501.65631104 386.21740723]
[490.67556763 378.05017090]
[485.12484741 365.42297363]
[470.27120972 363.33267212]
[455.41757202 361.24234009]
[440.56393433 359.15203857]
[437.33239746 364.18453979]
[432.98345947 368.29003906]
[427.77337646 371.22665405]
[429.00561523 386.17596436]
[430.23782349 401.12527466]
[431.47003174 416.07455444]
[432.70227051 431.02386475]
[433.93447876 445.97317505]
[435.16668701 460.92248535]
[436.39892578 475.87176514]
[449.72875977 483.81503296]
[455.81292725 498.08956909]
[452.31198120 513.20654297]
[440.57205200 523.35314941]
[425.10742188 524.62786865]
[411.86456299 516.54046631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 184]
[3 183]
[4 182]
[5 181]
[6 180]
[7 179]
[8 178]
[9 177]
[14 119]
[15 118]
[16 117]
[17 116]
[18 115]
[19 114]
[20 113]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[31 106]
[32 105]
[33 104]
[34 103]
[35 102]
[36 101]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[42 95]
[44 64]
[45 63]
[46 62]
[47 60]
[48 59]
[49 58]
[67 90]
[68 89]
[69 87]
[70 86]
[71 85]
[72 84]
[73 82]
[74 81]
[75 80]
[121 174]
[122 173]
[123 172]
[124 171]
[128 166]
[129 165]
[130 164]
[131 163]
[132 162]
[134 161]
[135 160]
[136 159]
[137 158]
[138 157]
[139 156]
[140 155]
[141 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
