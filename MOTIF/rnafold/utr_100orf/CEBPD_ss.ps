%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGACAGCCUCGCUUGGACGCAGAGCCCGGCCCGACGCCGCCAUGAGCGCCGCGCUCUUCAGCCUGGACGGCCCGGCGCGCGGCGCGCCCUGGCCUGCGGAGCCUGCGCCCUUCUACGAACCGGGCCGGGCGGGCAAGCCGG\
) } def
/len { sequence length } bind def

/coor [
[79.82546997 221.29359436]
[75.65621185 235.70251465]
[71.48695374 250.11145020]
[67.31769562 264.52038574]
[71.76987457 280.30358887]
[60.13502502 291.86050415]
[44.38208008 287.30236816]
[40.71632004 271.31817627]
[52.90876389 260.35110474]
[57.07802200 245.94218445]
[61.24728012 231.53326416]
[65.41654205 217.12432861]
[58.63676071 197.67333984]
[74.07645416 182.88336182]
[77.30101013 168.23403931]
[80.52556610 153.58473206]
[83.75012207 138.93542480]
[86.97467804 124.28612518]
[75.22574615 112.07108307]
[72.84680176 95.29058838]
[80.73759460 80.29125977]
[73.56831360 67.11547089]
[66.39903259 53.93968201]
[59.22975540 40.76389313]
[52.06047821 27.58810234]
[45.15832901 21.48975563]
[44.88212204 14.04829216]
[37.99997330 0.72027594]
[31.11782455 -12.60774040]
[17.91131020 -21.31971741]
[18.94676781 -36.17828751]
[12.06461811 -49.50630188]
[-0.00551137 -54.18869019]
[-5.44740200 -65.49159241]
[-1.81940055 -77.07984924]
[-8.41119099 -90.55383301]
[-15.04268646 -96.94544983]
[-14.99627781 -104.39189148]
[-21.29461479 -118.00552368]
[-27.59295082 -131.61915588]
[-33.89128876 -145.23278809]
[-40.18962479 -158.84642029]
[-46.48796082 -172.46005249]
[-54.39789581 -159.71513367]
[-69.26631927 -157.73272705]
[-80.23913574 -167.96000671]
[-79.30608368 -182.93095398]
[-67.14830017 -191.71662903]
[-52.64119720 -187.90351868]
[-57.43072128 -202.11831665]
[-62.22024536 -216.33311462]
[-67.00976562 -230.54789734]
[-71.79929352 -244.76269531]
[-76.58881378 -258.97750854]
[-88.32750702 -269.58474731]
[-85.05906677 -284.11630249]
[-89.84858704 -298.33111572]
[-94.63811493 -312.54589844]
[-106.37680817 -323.15316772]
[-103.10836792 -337.68472290]
[-107.89788818 -351.89953613]
[-112.68741608 -366.11431885]
[-117.47693634 -380.32913208]
[-128.26422119 -393.40850830]
[-118.68219757 -407.39498901]
[-102.58976746 -402.05926514]
[-103.26213837 -385.11865234]
[-98.47261810 -370.90383911]
[-93.68309021 -356.68905640]
[-88.89356995 -342.47424316]
[-77.49745178 -332.88375854]
[-80.42331696 -317.33544922]
[-75.63378906 -303.12063599]
[-70.84426880 -288.90585327]
[-59.44815445 -279.31533813]
[-62.37401581 -263.76702881]
[-57.58449173 -249.55223083]
[-52.79497147 -235.33743286]
[-48.00544739 -221.12263489]
[-43.21592331 -206.90783691]
[-38.42640305 -192.69303894]
[-32.87432861 -178.75837708]
[-26.57599258 -165.14476013]
[-20.27765656 -151.53112793]
[-13.97931957 -137.91749573]
[-7.68098307 -124.30385590]
[-1.38264632 -110.69023132]
[5.06279516 -97.14562225]
[11.65458584 -83.67163849]
[26.71254539 -74.72085571]
[25.39263344 -56.38845444]
[32.27478409 -43.06043625]
[44.98904037 -35.30176926]
[44.44583893 -19.48988914]
[51.32799149 -6.16187382]
[58.21014023 7.16614199]
[65.23626709 20.41882324]
[72.40554810 33.59461212]
[79.57482147 46.77040100]
[86.74410248 59.94619370]
[93.91338348 73.12198639]
[111.34009552 74.88273621]
[124.18596649 86.78963470]
[127.26188660 104.03287506]
[140.94294739 110.18337250]
[154.62400818 116.33386230]
[168.30506897 122.48435211]
[181.98612976 128.63484192]
[191.17144775 129.31269836]
[195.89471436 135.06964111]
[209.43931580 141.51507568]
[222.98391724 147.96052551]
[236.52853394 154.40596008]
[248.73625183 145.17395020]
[263.83786011 142.68405151]
[278.36315918 147.50843811]
[288.97430420 158.53851318]
[293.23294067 173.23962402]
[290.16046143 188.23356628]
[280.46289062 200.07485962]
[266.36871338 206.04243469]
[251.11659241 204.76501465]
[238.21139526 196.53611755]
[230.61865234 183.24670410]
[230.08308411 167.95057678]
[216.53848267 161.50512695]
[202.99388123 155.05969238]
[189.44927979 148.61424255]
[175.83564758 142.31590271]
[162.15458679 136.16542053]
[148.47352600 130.01492310]
[134.79246521 123.86443329]
[121.11139679 117.71393585]
[117.09732819 121.61379242]
[112.37814331 124.62227631]
[107.14846802 126.61529541]
[101.62398529 127.51068115]
[98.39942932 142.15998840]
[95.17487335 156.80929565]
[91.95031738 171.45860291]
[88.72576141 186.10791016]
[94.89969635 193.40808105]
[96.94767761 202.60534668]
[94.52659607 211.56832886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[21 101]
[22 100]
[23 99]
[24 98]
[25 97]
[27 96]
[28 95]
[29 94]
[31 92]
[32 91]
[35 89]
[36 88]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[56 74]
[57 73]
[58 72]
[60 70]
[61 69]
[62 68]
[63 67]
[104 133]
[105 132]
[106 131]
[107 130]
[108 129]
[110 128]
[111 127]
[112 126]
[113 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
