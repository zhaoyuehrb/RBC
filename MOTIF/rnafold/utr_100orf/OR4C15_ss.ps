%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCUCAAUGACAACAGAAGCACUCAAUAAUUUUGCACUUGGAUGUACCAACUUGUUAAUGACUAUGAUACCACAAAUUGAUCUGAAGCAAAUUUUCC\
) } def
/len { sequence length } bind def

/coor [
[-13.87415218 251.52980042]
[-31.08330727 245.16664124]
[-39.82442093 257.35650635]
[-48.56553650 269.54638672]
[-57.30665207 281.73623657]
[-59.06080246 297.45989990]
[-72.76528168 303.29397583]
[-81.50640106 315.48385620]
[-85.82290649 331.87908936]
[-102.77234650 332.26992798]
[-107.83998871 316.09109497]
[-93.69626617 306.74273682]
[-84.95515442 294.55285645]
[-83.82622528 279.70111084]
[-69.49652100 272.99511719]
[-60.75540543 260.80526733]
[-52.01428986 248.61538696]
[-43.27317429 236.42552185]
[-51.30656052 227.48417664]
[-57.46000290 217.15214539]
[-61.49888992 205.81921387]
[-63.26843262 193.91334534]
[-62.69956970 181.88462830]
[-59.81169510 170.18818665]
[-54.71197891 159.26701355]
[-47.59140778 149.53512573]
[-38.71761703 141.36192322]
[-28.42484474 135.05818176]
[-17.10134315 130.86418152]
[-5.17472363 128.94056702]
[6.90418386 129.36221313]
[18.67837524 132.11529541]
[29.70195961 137.09777832]
[39.55704880 144.12309265]
[50.72500992 134.10926819]
[61.89297104 124.09544373]
[73.06093597 114.08161926]
[84.22889709 104.06780243]
[85.59954071 92.39069366]
[94.47419739 84.67876434]
[106.22832489 84.95066071]
[117.70231628 75.28900146]
[129.17630005 65.62734985]
[140.65029907 55.96569061]
[152.12428284 46.30403519]
[163.59826660 36.64237976]
[165.02264404 32.10347366]
[167.63464355 28.69179535]
[170.89306641 26.65279198]
[174.23400879 26.01477623]
[177.14932251 26.60244179]
[189.73361206 18.43937874]
[202.31790161 10.27631569]
[209.68492126 -3.72502589]
[224.57316589 -4.16003084]
[237.15747070 -12.32309341]
[249.74176025 -20.48615646]
[262.32604980 -28.64921951]
[258.89962769 -43.41524124]
[260.73318481 -58.46229553]
[267.60534668 -71.97337341]
[278.68624878 -82.31694794]
[292.63781738 -88.24398804]
[307.77532959 -89.03876495]
[322.27084351 -84.60531616]
[334.37399292 -75.47898865]
[342.62322998 -62.76184082]
[346.02243042 -47.98952866]
[344.16113281 -32.94588089]
[337.26409912 -19.44748878]
[326.16415405 -9.12435150]
[312.20169067 -3.22303534]
[297.06274414 -2.45615482]
[282.57540894 -6.91631365]
[270.48910522 -16.06492615]
[257.90481567 -7.90186405]
[245.32052612 0.26119864]
[232.73623657 8.42426109]
[226.26933289 21.84172630]
[210.48095703 22.86060715]
[197.89666748 31.02367020]
[185.31237793 39.18673325]
[173.25991821 48.11636734]
[161.78593445 57.77802277]
[150.31195068 67.43968201]
[138.83796692 77.10133362]
[127.36397552 86.76299286]
[115.88998413 96.42464447]
[110.68328094 112.29399872]
[94.24271393 115.23576355]
[83.07475281 125.24958038]
[71.90679169 135.26341248]
[60.73883438 145.27722168]
[49.57086945 155.29104614]
[57.74478912 171.85116577]
[60.69507599 190.06636047]
[58.17044830 208.33033752]
[50.40205002 225.03501892]
[38.08231354 238.71231079]
[22.30325127 248.16294861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[7 13]
[8 12]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[51 82]
[52 81]
[53 80]
[55 78]
[56 77]
[57 76]
[58 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
