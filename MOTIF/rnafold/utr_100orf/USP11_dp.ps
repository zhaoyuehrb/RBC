%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:05:23 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (USP11)
} def

/sequence { (\
AUGGCAGUAGCCCCGCGACUGUUUGGGGGGCUCUGCUUCCGUUUCCGGGACCAGAAUCCGGAAGUGGCUGUUGAGGGGCGUCUUCCAAUCUCGCACAGCU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 42 0.068039976 ubox
1 65 0.007620450 ubox
2 41 0.082823248 ubox
2 64 0.007091832 ubox
3 37 0.919846906 ubox
3 38 0.042538759 ubox
3 39 0.031783003 ubox
3 40 0.088541708 ubox
3 100 0.003896549 ubox
4 36 0.996766077 ubox
4 37 0.007198329 ubox
4 38 0.005107166 ubox
4 39 0.073883618 ubox
5 35 0.998235248 ubox
6 34 0.997993931 ubox
6 37 0.057517855 ubox
7 33 0.997830422 ubox
7 36 0.058671520 ubox
8 35 0.057519187 ubox
9 32 0.985579072 ubox
9 34 0.031621261 ubox
10 31 0.999854822 ubox
10 33 0.014727792 ubox
11 29 0.006631299 ubox
11 30 0.999967664 ubox
12 28 0.008720400 ubox
12 29 0.999951958 ubox
13 27 0.010393782 ubox
13 28 0.999935774 ubox
14 26 0.011824300 ubox
14 27 0.999797085 ubox
15 22 0.012568072 ubox
16 21 0.012624410 ubox
16 25 0.998533276 ubox
17 23 0.030669498 ubox
17 24 0.953687346 ubox
18 22 0.037172253 ubox
18 23 0.845692483 ubox
19 26 0.005445685 ubox
20 25 0.005101943 ubox
35 65 0.005492469 ubox
36 64 0.013445984 ubox
37 50 0.005798851 ubox
37 63 0.023995890 ubox
38 49 0.008730652 ubox
38 50 0.003403031 ubox
38 62 0.034780936 ubox
38 63 0.003534132 ubox
38 66 0.014423739 ubox
38 67 0.006291346 ubox
39 48 0.009801370 ubox
39 49 0.003642471 ubox
39 61 0.035737586 ubox
39 66 0.069355686 ubox
39 67 0.325120408 ubox
40 47 0.009893909 ubox
40 48 0.003605267 ubox
40 60 0.035737133 ubox
40 66 0.795247754 ubox
41 46 0.009626745 ubox
41 59 0.035485325 ubox
41 65 0.775280000 ubox
42 63 0.030063246 ubox
42 64 0.869265224 ubox
43 56 0.034489387 ubox
43 62 0.022858043 ubox
43 63 0.978724353 ubox
43 64 0.013697986 ubox
44 55 0.035154583 ubox
44 61 0.004019008 ubox
44 62 0.997017466 ubox
44 63 0.012539194 ubox
45 54 0.035192062 ubox
45 60 0.003352942 ubox
45 61 0.999278643 ubox
46 60 0.999181353 ubox
47 58 0.009596553 ubox
47 59 0.986789044 ubox
48 57 0.013170069 ubox
48 58 0.973581142 ubox
48 59 0.157137300 ubox
49 57 0.733500752 ubox
49 58 0.221807577 ubox
50 57 0.251195790 ubox
51 61 0.006646407 ubox
52 60 0.006673826 ubox
64 94 0.003545977 ubox
64 96 0.004353648 ubox
65 93 0.003550788 ubox
65 95 0.004340984 ubox
66 92 0.003553657 ubox
66 94 0.004006570 ubox
66 100 0.533309758 ubox
67 91 0.003179758 ubox
67 94 0.005427430 ubox
67 99 0.944055431 ubox
68 93 0.005813985 ubox
68 98 0.998753038 ubox
69 95 0.022009414 ubox
69 97 0.999134225 ubox
70 89 0.009618562 ubox
70 94 0.026160368 ubox
70 96 0.999373418 ubox
70 99 0.011077746 ubox
71 88 0.011715824 ubox
71 93 0.021125247 ubox
71 95 0.988967868 ubox
71 98 0.011080302 ubox
72 87 0.016663535 ubox
72 93 0.967684498 ubox
72 95 0.079030172 ubox
72 97 0.010657620 ubox
73 84 0.003770362 ubox
73 85 0.013922666 ubox
73 86 0.015421078 ubox
73 90 0.049394121 ubox
73 92 0.990516668 ubox
73 94 0.111141915 ubox
73 96 0.010305502 ubox
74 83 0.005110988 ubox
74 84 0.015443087 ubox
74 89 0.049756047 ubox
74 91 0.990273860 ubox
75 82 0.005876822 ubox
75 83 0.016115943 ubox
75 84 0.008942574 ubox
75 85 0.021199406 ubox
75 86 0.095015336 ubox
75 90 0.984249501 ubox
75 91 0.014404479 ubox
75 92 0.117215038 ubox
76 81 0.006505940 ubox
76 82 0.019116517 ubox
76 83 0.037976059 ubox
76 84 0.034515197 ubox
76 85 0.108678388 ubox
76 86 0.503717994 ubox
76 89 0.719683124 ubox
76 90 0.025818986 ubox
76 91 0.117824026 ubox
76 92 0.025039940 ubox
77 81 0.012756858 ubox
77 82 0.044584307 ubox
77 83 0.054859442 ubox
77 84 0.101370878 ubox
77 85 0.509809353 ubox
77 86 0.761875117 ubox
77 89 0.026825010 ubox
77 90 0.117496710 ubox
77 91 0.024979193 ubox
78 82 0.057031316 ubox
78 83 0.074576457 ubox
78 84 0.423781080 ubox
78 85 0.756407074 ubox
78 89 0.091734642 ubox
78 90 0.024964119 ubox
78 94 0.023715582 ubox
79 93 0.023749267 ubox
80 89 0.029422527 ubox
80 92 0.023598572 ubox
81 88 0.033508494 ubox
93 99 0.006290603 ubox
94 98 0.006255918 ubox
3 37 0.9500000 lbox
4 36 0.9500000 lbox
5 35 0.9500000 lbox
6 34 0.9500000 lbox
7 33 0.9500000 lbox
9 32 0.9500000 lbox
10 31 0.9500000 lbox
11 30 0.9500000 lbox
12 29 0.9500000 lbox
13 28 0.9500000 lbox
14 27 0.9500000 lbox
16 25 0.9500000 lbox
17 24 0.9500000 lbox
18 23 0.9500000 lbox
40 66 0.9500000 lbox
41 65 0.9500000 lbox
42 64 0.9500000 lbox
43 63 0.9500000 lbox
44 62 0.9500000 lbox
45 61 0.9500000 lbox
46 60 0.9500000 lbox
47 59 0.9500000 lbox
48 58 0.9500000 lbox
49 57 0.9500000 lbox
67 99 0.9500000 lbox
68 98 0.9500000 lbox
69 97 0.9500000 lbox
70 96 0.9500000 lbox
71 95 0.9500000 lbox
72 93 0.9500000 lbox
73 92 0.9500000 lbox
74 91 0.9500000 lbox
75 90 0.9500000 lbox
76 89 0.9500000 lbox
77 86 0.9500000 lbox
78 85 0.9500000 lbox
showpage
end
%%EOF
