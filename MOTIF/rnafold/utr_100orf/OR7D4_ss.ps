%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCCUCCUUCCCCAGCAGACACAACAGCUACAUGGAAGCAGAAAACCUUACAGAAUUAUCAAAAUUUCUCCUCCUGGGACUCUCAGAUGAUCCUGAACUGCAGCCCGUCCUCUUUGGGCUGUUCCUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[57.44652557 135.73176575]
[52.41609192 128.69371033]
[38.64284897 134.63490295]
[24.86960793 140.57609558]
[11.09636688 146.51728821]
[-2.67687464 152.45849609]
[-6.20023155 165.51522827]
[-16.46952057 174.01193237]
[-29.56586838 174.99871826]
[-40.65772247 168.33757019]
[-54.56547928 173.95666504]
[-68.47323608 179.57577515]
[-82.38099670 185.19487000]
[-96.28875732 190.81396484]
[-102.93890381 208.47660828]
[-120.05832672 215.63610840]
[-136.72357178 208.22372437]
[-150.35482788 214.48379517]
[-163.98609924 220.74388123]
[-165.33380127 236.04353333]
[-174.16389465 248.61035156]
[-188.10115051 255.06391907]
[-203.39649963 253.66827393]
[-215.93557739 244.79882812]
[-222.34542847 230.84141541]
[-220.90185547 215.55052185]
[-211.99313354 203.03930664]
[-198.01570129 196.67321777]
[-182.72940063 198.16473389]
[-170.24618530 207.11260986]
[-156.61491394 200.85253906]
[-142.98364258 194.59245300]
[-141.40316772 183.18572998]
[-134.40690613 173.88774109]
[-123.66418457 169.11158752]
[-111.83415222 170.16758728]
[-101.90785217 176.90620422]
[-88.00009155 171.28710938]
[-74.09233856 165.66801453]
[-60.18457794 160.04890442]
[-46.27682114 154.42980957]
[-40.41310883 138.71151733]
[-24.70410919 131.92326355]
[-8.61807156 138.68525696]
[5.15517044 132.74404907]
[18.92841148 126.80285645]
[32.70165253 120.86166382]
[46.47489548 114.92046356]
[44.60586548 95.63572693]
[49.47181702 76.88161469]
[60.48113251 60.93830109]
[76.29527283 49.74422455]
[94.99150085 44.66039276]
[114.29667664 46.30491638]
[120.07721710 32.46347809]
[125.85775757 18.62204170]
[124.03622437 2.90604305]
[136.08061218 -5.85648775]
[141.86116028 -19.69792366]
[147.64169312 -33.53936005]
[153.42222595 -47.38079834]
[159.20277405 -61.22223282]
[164.98330688 -75.06367493]
[154.33126831 -85.87152863]
[148.64398193 -99.89642334]
[148.75921631 -114.98947906]
[154.62829590 -128.85099792]
[165.32817078 -139.38082886]
[179.20652771 -144.99659729]
[194.13681030 -144.87141418]
[199.91735840 -158.71284485]
[200.35076904 -167.93095398]
[205.99681091 -172.80659485]
[212.09785461 -186.50978088]
[209.84648132 -202.75364685]
[222.95283508 -212.61042786]
[237.93418884 -205.94029236]
[239.37904358 -189.60491943]
[225.80104065 -180.40873718]
[219.69998169 -166.70555115]
[213.75878906 -152.93231201]
[207.97825623 -139.09086609]
[218.56300354 -128.56031799]
[224.32522583 -114.74214935]
[224.35813904 -99.73002625]
[218.62554932 -85.81150818]
[207.97225952 -75.11941528]
[193.99957275 -69.30503082]
[178.82475281 -69.28313446]
[173.04420471 -55.44169617]
[167.26367188 -41.60025787]
[161.48312378 -27.75882149]
[155.70259094 -13.91738510]
[149.92205811 -0.07594880]
[152.15704346 14.65001774]
[139.69918823 24.40258026]
[133.91865540 38.24401855]
[128.13810730 52.08545303]
[141.02478027 62.52300644]
[150.25735474 76.29862976]
[155.01351929 92.18533325]
[154.86964417 108.76808929]
[149.83851624 124.56987762]
[162.27409363 132.95776367]
[174.70965576 141.34565735]
[187.14521790 149.73355103]
[199.58078003 158.12144470]
[212.01634216 166.50933838]
[224.45190430 174.89723206]
[236.88746643 183.28512573]
[251.86840820 178.80119324]
[266.20611572 185.04328918]
[273.13079834 199.06408691]
[269.37280273 214.24340820]
[256.70657349 223.41401672]
[241.11267090 222.24584961]
[229.95410156 211.29048157]
[228.49957275 195.72068787]
[216.06401062 187.33279419]
[203.62844849 178.94490051]
[191.19288635 170.55700684]
[178.75732422 162.16911316]
[166.32176208 153.78121948]
[153.88619995 145.39332581]
[141.45062256 137.00543213]
[135.20440674 142.99076843]
[128.10487366 147.93405151]
[120.32408905 151.71545410]
[112.05067444 154.24333191]
[103.48516083 155.45639038]
[94.83516693 155.32524109]
[86.31037140 153.85305786]
[78.11739349 151.07551575]
[70.45483398 147.05996704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[17 32]
[18 31]
[19 30]
[54 98]
[55 97]
[56 96]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[70 82]
[71 81]
[73 80]
[74 79]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
