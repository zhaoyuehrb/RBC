%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAACGCCAGCCUCGUGACAGCAUUCAUCCUCACAGGCCUUCCCCAUGCCCCAGGGCUGGACGCCCUCCUCUUUGGAAUCUUCCUGGUGGUUUACG\
) } def
/len { sequence length } bind def

/coor [
[83.58866882 282.34490967]
[76.07422638 267.76873779]
[85.16676331 254.12110901]
[85.63326263 239.12837219]
[72.90014648 231.39964294]
[65.69728851 218.24765015]
[66.04695892 203.15644836]
[73.95535278 190.18132019]
[87.38407898 182.85899353]
[87.85057831 167.86624146]
[88.31707764 152.87350464]
[88.78357697 137.88075256]
[89.25006866 122.88801575]
[79.76802826 111.26515961]
[64.98699188 108.71150208]
[50.20596313 106.15785217]
[35.42493439 103.60419464]
[26.25352478 105.24062347]
[20.22695351 100.73441315]
[5.53249073 97.72230530]
[-9.16197109 94.71019745]
[-23.85643387 91.69809723]
[-33.06433868 103.87090302]
[-46.64588165 110.83541870]
[-61.90443039 111.20883942]
[-75.81039429 104.91702271]
[-85.60272980 93.20920563]
[-89.33715820 78.40999603]
[-86.27221680 63.45777130]
[-77.01644897 51.32131958]
[-63.40758514 44.41033936]
[-48.14768600 44.09700775]
[-34.26660919 50.44354248]
[-24.52045441 62.18982697]
[-20.84432793 77.00363159]
[-6.14986563 80.01573944]
[8.54459667 83.02784729]
[23.23905945 86.03994751]
[37.97858810 88.82316589]
[52.75961685 91.37682343]
[67.54064941 93.93047333]
[82.32167816 96.48412323]
[70.57439423 87.15668488]
[61.18992996 75.45489502]
[61.84783554 60.46932602]
[72.22169495 49.63498306]
[87.16342926 48.32693481]
[89.52130890 63.14045715]
[94.55405426 49.00994110]
[99.58680725 34.87942886]
[99.53564453 25.56331253]
[105.00205994 20.39186859]
[110.47183228 6.42470741]
[115.94160461 -7.54245329]
[112.95178223 -23.66675186]
[125.59497070 -34.11097717]
[140.86494446 -28.13100052]
[143.05325317 -11.87851429]
[129.90876770 -2.07268047]
[124.43899536 11.89448071]
[118.96921539 25.86164093]
[113.71732330 39.91217804]
[108.68457031 54.04269028]
[103.65182495 68.17320251]
[107.92706299 74.33537292]
[114.32510376 60.76831436]
[129.27355957 59.52576447]
[137.82377625 71.85028839]
[131.42543030 85.41720581]
[116.47754669 86.65970612]
[120.75279236 92.82187653]
[135.75097656 93.05515289]
[150.74916077 93.28842926]
[163.22279358 83.19942474]
[178.85615540 86.80187225]
[185.65666199 101.33227539]
[178.40754700 115.64415741]
[162.66972351 118.75866699]
[150.51588440 108.28661346]
[135.51770020 108.05333710]
[120.51950836 107.82006073]
[135.47860718 108.92712402]
[146.62995911 118.95943451]
[149.30691528 133.71862793]
[142.38922119 147.02822876]
[128.77180481 153.31837463]
[114.15334320 149.95675659]
[104.65142059 138.35014343]
[104.24281311 123.35451508]
[103.77632141 138.34725952]
[103.30982208 153.33999634]
[102.84332275 168.33274841]
[102.37682343 183.32548523]
[115.32434845 191.46850586]
[122.41078949 204.91020203]
[121.82156372 219.99394226]
[113.81498718 232.67269897]
[100.62600708 239.59486389]
[100.15950775 254.58761597]
[108.38599396 268.77410889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 42]
[15 41]
[16 40]
[17 39]
[19 38]
[20 37]
[21 36]
[22 35]
[48 64]
[49 63]
[50 62]
[52 61]
[53 60]
[54 59]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
