%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUCGAGGCUGCAGCGCGGCCGCCGGGCGCAGCAUGACUGCCGUCGGCGUGCAGGCCCAGAGGCCUUUGGGCCAAAGGCAGCCCCGCCGGUCCUUCUUUGAAUCCUUCAUCCGGACCCUCAUCAUCACGUGUG\
) } def
/len { sequence length } bind def

/coor [
[120.86039734 263.69754028]
[132.96604919 254.40151978]
[129.84738159 239.72930908]
[126.72869873 225.05708313]
[122.21974182 219.11410522]
[123.71235657 210.00732422]
[120.93593597 195.26652527]
[118.15950775 180.52571106]
[103.64827728 176.72778320]
[94.00646973 188.21844482]
[84.36465454 199.70912170]
[74.72283936 211.19978333]
[65.08102417 222.69044495]
[59.53158951 238.71043396]
[42.60142899 237.81265259]
[38.77739334 221.29560852]
[53.59035873 213.04862976]
[63.23217010 201.55796814]
[72.87398529 190.06730652]
[82.51580048 178.57662964]
[92.15761566 167.08596802]
[86.53851318 153.17820740]
[71.62068939 151.61029053]
[56.70285797 150.04235840]
[41.78503036 148.47442627]
[26.86720085 146.90650940]
[11.94937229 145.33857727]
[-0.26155460 155.00971985]
[-15.36801815 153.20710754]
[-24.51272392 141.50625610]
[-39.43055344 139.93832397]
[-54.34838104 138.37040710]
[-69.26621246 136.80247498]
[-82.58870697 145.74063110]
[-97.83916473 140.76036072]
[-103.31873322 125.68209839]
[-94.82395935 112.07260132]
[-78.87130737 110.37191010]
[-67.69828033 121.88464355]
[-52.78045273 123.45257568]
[-37.86262512 125.02050018]
[-22.94479561 126.58842468]
[-11.56718063 117.04455566]
[3.58395410 118.42214966]
[13.51729965 130.42074585]
[28.43512726 131.98867798]
[43.35295486 133.55659485]
[58.27078629 135.12452698]
[73.18861389 136.69245911]
[88.10644531 138.26037598]
[72.19766235 127.15879822]
[63.78008652 110.33569336]
[64.39562988 92.12237549]
[73.33607483 76.92047882]
[87.94841766 68.13824463]
[85.86081696 53.28422165]
[83.77322388 38.43020248]
[81.68562317 23.57618141]
[79.59803009 8.72216034]
[77.51042938 -6.13186073]
[75.42283630 -20.98588181]
[73.33524323 -35.83990479]
[62.81803131 -48.42244720]
[68.70954895 -63.72676086]
[84.94910431 -66.00907898]
[94.83083344 -52.92155075]
[88.18926239 -37.92749786]
[90.27685547 -23.07347870]
[92.36445618 -8.21945763]
[94.45204926 6.63456392]
[96.53964996 21.48858452]
[98.62724304 36.34260559]
[100.71484375 51.19662857]
[102.80243683 66.05065155]
[121.39054871 71.58647156]
[134.65632629 86.85475922]
[137.79406738 107.67742157]
[128.94862366 127.70000458]
[139.11460876 116.67037201]
[149.28059387 105.64073944]
[148.38681030 89.86174011]
[158.97441101 78.12811279]
[174.76197815 77.40119934]
[186.38301086 88.11227417]
[186.94296265 103.90663910]
[176.10963440 115.41378021]
[160.31022644 115.80671692]
[150.14424133 126.83634949]
[139.97827148 137.86598206]
[145.10856628 151.96138000]
[159.98587036 153.87600708]
[174.86317444 155.79063416]
[189.74047852 157.70524597]
[204.61778259 159.61987305]
[211.99281311 149.39747620]
[222.96879578 143.34825134]
[235.40519714 142.58111572]
[246.90675354 147.18161011]
[255.28483582 156.20750427]
[258.97384644 167.88093567]
[273.74594116 170.48565674]
[288.51806641 173.09037781]
[303.29019165 175.69509888]
[319.93862915 172.49105835]
[327.62619019 187.60189819]
[315.23403931 199.17213440]
[300.68545532 190.46720886]
[285.91336060 187.86248779]
[271.14123535 185.25776672]
[256.36911011 182.65304565]
[244.33200073 195.47558594]
[226.86624146 198.60136414]
[210.84980774 190.61018372]
[202.70317078 174.49717712]
[187.82585144 172.58255005]
[172.94854736 170.66793823]
[158.07124329 168.75331116]
[143.19393921 166.83868408]
[132.90031433 177.74928284]
[135.67674255 192.49009705]
[138.45317078 207.23091125]
[141.40090942 221.93841553]
[144.51959229 236.61062622]
[147.63825989 251.28283691]
[162.47836304 254.85136414]
[174.29507446 264.51199341]
[180.74218750 278.34664917]
[180.53961182 293.60842896]
[173.72758484 307.26708984]
[161.65863037 316.61068726]
[146.72904968 319.78408813]
[131.90312195 316.15716553]
[120.12454224 306.45004272]
[113.73196411 292.59011841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[6 121]
[7 120]
[8 119]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[30 42]
[31 41]
[32 40]
[33 39]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[78 89]
[79 88]
[80 87]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
