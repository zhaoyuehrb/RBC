%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAGGGGUUCGCACGCCAAGAACCGCCAUGCCUGGGGAUCACCGCCGCAUCCGCGGCCCUGAAGAAUCGCAGCCGCCGCAGCUGUACGCGGCCGACGAGGAGGAGGCGCCCGGCACCCGCGACCCAA\
) } def
/len { sequence length } bind def

/coor [
[62.18843079 280.62664795]
[59.68217087 265.83749390]
[57.17591095 251.04835510]
[54.66965103 236.25921631]
[47.64969635 233.61909485]
[33.60978699 228.33885193]
[26.58983231 225.69873047]
[14.95910072 235.17111206]
[3.44278264 244.78227234]
[-7.95746422 254.53083801]
[-19.35771179 264.27938843]
[-30.75795746 274.02795410]
[-42.15820312 283.77651978]
[-39.96075439 299.04656982]
[-46.38853836 313.07107544]
[-59.39048004 321.37487793]
[-74.81769562 321.30825806]
[-87.74742889 312.89245605]
[-94.05384064 298.81295776]
[-91.72458649 283.56243896]
[-81.50290680 272.00732422]
[-66.65052032 267.83477783]
[-51.90676117 272.37625122]
[-40.50651550 262.62768555]
[-29.10626793 252.87915039]
[-17.70602226 243.13058472]
[-6.30577469 233.38203430]
[-3.23627853 226.57644653]
[5.48671627 223.54037476]
[17.11744881 214.06799316]
[29.32484627 188.37503052]
[51.68735886 185.56825256]
[58.28806305 172.09863281]
[64.88876343 158.62899780]
[71.48947144 145.15937805]
[71.60906219 137.69458008]
[78.41336060 131.44877625]
[85.33515167 118.14131165]
[92.25695038 104.83383942]
[85.96243286 103.07851410]
[80.54192352 97.52915192]
[77.82102203 88.77560425]
[69.65647125 76.19227600]
[61.49191284 63.60895538]
[46.29279709 60.19945526]
[38.19203186 47.32186890]
[41.53613663 32.85284805]
[33.37157822 20.26952553]
[25.20702171 7.68620348]
[17.04246521 -4.89711952]
[8.87790871 -17.48044205]
[-5.96874809 -24.44527054]
[-7.09056568 -40.80600357]
[6.66648531 -49.73212051]
[21.15032959 -42.04119873]
[21.46123123 -25.64499855]
[29.62578773 -13.06167603]
[37.79034424 -0.47835317]
[45.95490265 12.10496998]
[54.11945724 24.68829346]
[68.69546509 27.53003502]
[77.15474701 40.17500687]
[74.07523346 55.44440079]
[82.23979187 68.02772522]
[90.40435028 80.61104584]
[87.69226837 65.85826111]
[96.75502777 53.90558624]
[111.69226837 52.53486252]
[122.77902985 62.63850784]
[122.79723358 77.63849640]
[111.73544312 87.76887512]
[125.83765411 82.65735626]
[139.93986511 77.54583740]
[146.69412231 63.50954056]
[161.06858826 58.52662659]
[174.40843201 65.05228424]
[188.51065063 59.94076920]
[201.98027039 53.34006500]
[214.66058350 45.32697678]
[227.34089661 37.31388855]
[240.02120972 29.30079842]
[252.70152283 21.28771019]
[253.57113647 5.79502106]
[263.40710449 -6.20636845]
[278.42730713 -10.10168076]
[292.85614014 -4.39308739]
[301.14547729 8.72434044]
[300.10784912 24.20668411]
[290.14224243 36.10066605]
[275.08068848 39.83280945]
[260.71463013 33.96802521]
[248.03430176 41.98111343]
[235.35398865 49.99420166]
[222.67367554 58.00729370]
[209.99336243 66.02037811]
[224.78543091 68.50925446]
[235.99781799 78.47331238]
[240.20736694 92.87052155]
[236.12892151 107.30541992]
[225.00761414 117.37102509]
[210.23878479 119.99431610]
[196.33135986 114.37439728]
[187.53126526 102.22703552]
[186.52519226 87.26081085]
[193.62216187 74.04298401]
[179.51995850 79.15449524]
[173.45950317 92.71202850]
[159.23066711 98.09672546]
[145.05137634 91.64804840]
[130.94917297 96.75956726]
[116.84695435 101.87108612]
[105.56442261 111.75563812]
[98.64262390 125.06311035]
[91.72082520 138.37057495]
[84.95909119 151.76008606]
[78.35839081 165.22970581]
[71.75768280 178.69932556]
[65.15698242 192.16894531]
[77.04845428 208.98612976]
[69.45878601 233.75296021]
[71.96504974 248.54209900]
[74.47131348 263.33123779]
[76.97756958 278.12036133]
[90.93791962 284.89447021]
[98.22064972 298.59634399]
[96.02541351 313.95736694]
[85.19631958 325.07086182]
[69.89736938 327.66351318]
[56.01133347 320.73840332]
[48.87766647 306.95831299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[7 30]
[8 29]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[32 118]
[33 117]
[34 116]
[35 115]
[37 114]
[38 113]
[39 112]
[42 65]
[43 64]
[44 63]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[71 111]
[72 110]
[73 109]
[76 106]
[77 105]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
