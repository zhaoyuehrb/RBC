%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCGCCAUCUUGCAGCCGGCGGCGCGGAUUGAAUGAGCCCGCCGAGCCCGGGCCGCCGUCGGGAGCAGCGCAGGCCGCGAGCCGCCGCCACCAUGGCCACGCCGCUGCCCGGCCGCGCGGGCGGGCCCGCCA\
) } def
/len { sequence length } bind def

/coor [
[81.77989960 237.27250671]
[90.11968231 223.15229797]
[89.77321625 208.15629578]
[89.42675018 193.16030884]
[89.08027649 178.16430664]
[85.75106049 171.49011230]
[88.90303040 162.81883240]
[88.90303040 147.81883240]
[88.90303040 132.81883240]
[83.53883362 127.57714081]
[76.34745026 140.74087524]
[74.08000183 155.56851196]
[62.49309158 165.09445190]
[47.50687408 164.45153809]
[36.77835083 153.96827698]
[35.78910065 139.00093079]
[45.04457474 127.19686127]
[59.81631470 124.58726501]
[72.81043243 117.09375000]
[67.44623566 111.85205078]
[52.45023727 112.19852448]
[37.45423889 112.54499054]
[22.45824242 112.89145660]
[7.46224403 113.23793030]
[-7.53375435 113.58439636]
[-16.12990570 116.93581390]
[-22.87922287 113.76164246]
[-37.87922287 113.76164246]
[-44.93550873 127.34352112]
[-57.50197601 136.08093262]
[-72.69094849 137.96609497]
[-87.01210022 132.56581116]
[-97.17454529 121.12100983]
[-100.84301758 106.26164246]
[-97.17454529 91.40227509]
[-87.01210022 79.95748138]
[-72.69094849 74.55718994]
[-57.50197601 76.44235229]
[-44.93550873 85.17976379]
[-37.87922287 98.76164246]
[-22.87922287 98.76164246]
[-7.88022280 98.58839417]
[7.11577559 98.24192810]
[22.11177444 97.89546204]
[37.10777283 97.54899597]
[52.10377121 97.20252228]
[67.09976959 96.85605621]
[87.48822784 76.18956757]
[110.08903503 81.87348175]
[121.62904358 72.29077911]
[133.16905212 62.70807648]
[144.70906067 53.12537766]
[156.24906921 43.54267502]
[161.92306519 28.77391052]
[176.65753174 26.59570122]
[188.19754028 17.01299858]
[193.87153625 2.24423480]
[208.60600281 0.06602576]
[220.14601135 -9.51667595]
[231.68601990 -19.09937859]
[243.22604370 -28.68208122]
[245.93127441 -34.87398911]
[250.67466736 -38.20562363]
[255.52749634 -38.42592621]
[267.49774170 -47.46544266]
[273.84774780 -61.95640564]
[288.66711426 -63.45180130]
[300.63735962 -72.49131775]
[312.60763550 -81.53083801]
[318.95764160 -96.02180481]
[333.77697754 -97.51719666]
[345.74725342 -106.55671692]
[357.71749878 -115.59623718]
[360.29263306 -128.29450989]
[370.52401733 -135.57046509]
[382.56701660 -133.94117737]
[394.74285889 -142.70179749]
[406.91873169 -151.46241760]
[419.09457397 -160.22303772]
[430.63458252 -169.80574036]
[441.48336792 -180.16452026]
[452.33212280 -190.52331543]
[452.44656372 -206.32717896]
[463.76098633 -217.36163330]
[479.56277466 -217.08012390]
[490.47698975 -205.64965820]
[490.02841187 -189.85173035]
[478.48318481 -179.05897522]
[462.69088745 -179.67454529]
[451.84213257 -169.31576538]
[440.99337769 -158.95698547]
[455.85675049 -156.93698120]
[465.10723877 -145.12901306]
[463.51083374 -130.21420288]
[451.97073364 -120.63158417]
[437.01657104 -121.80313873]
[427.10958862 -133.06597900]
[427.85519409 -148.04718018]
[415.67935181 -139.28656006]
[403.50347900 -130.52593994]
[391.32763672 -121.76532745]
[385.04159546 -105.42185211]
[366.75701904 -103.62597656]
[354.78674316 -94.58645630]
[342.81649780 -85.54693604]
[337.32269287 -71.70254517]
[321.64715576 -69.56058502]
[309.67687988 -60.52106094]
[297.70663452 -51.48154449]
[292.21279907 -37.63714981]
[276.53726196 -35.49518585]
[264.56701660 -26.45566559]
[252.80873108 -17.14207077]
[241.26872253 -7.55936861]
[229.72871399 2.02333331]
[218.18870544 11.60603523]
[213.34013367 25.68938065]
[197.78024292 28.55300903]
[186.24023438 38.13571167]
[181.39166260 52.21905518]
[165.83177185 55.08268356]
[154.29176331 64.66538239]
[142.75175476 74.24808502]
[131.21174622 83.83078766]
[119.67173767 93.41349030]
[122.72218323 114.39386749]
[103.90303040 132.81883240]
[103.90303040 147.81883240]
[103.90303040 162.81883240]
[104.07627869 177.81784058]
[104.42274475 192.81382751]
[104.76921082 207.80982971]
[105.11568451 222.80583191]
[114.09868622 236.52580261]
[106.46779633 251.04136658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 133]
[3 132]
[4 131]
[5 130]
[7 129]
[8 128]
[9 127]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[27 41]
[28 40]
[49 125]
[50 124]
[51 123]
[52 122]
[53 121]
[55 119]
[56 118]
[58 116]
[59 115]
[60 114]
[61 113]
[64 112]
[65 111]
[67 109]
[68 108]
[69 107]
[71 105]
[72 104]
[73 103]
[76 101]
[77 100]
[78 99]
[79 98]
[80 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
