%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGGGAUGCAUGGGAGACCUUGCGGAUGUAGGAACUGCUCCUUUUGUUGCUGGAGUGGUGGAUGGGAGACUCUACACAUUGGCUCAGAUCCAUGGAACUGCACAGCCCUGAGACUGAACUUUCGUGUGUGCAAACUAAAAAAAUCAACCAGGAUGGAAAUA\
) } def
/len { sequence length } bind def

/coor [
[92.15016174 248.37557983]
[97.38241577 234.14886475]
[107.16732025 222.57167053]
[120.32329559 215.04197693]
[117.75002289 200.26435852]
[105.78652954 187.45245361]
[112.20258331 170.21522522]
[109.34671783 155.48959351]
[106.49085236 140.76397705]
[91.91882324 137.20643616]
[82.59860992 148.95945740]
[73.27838898 160.71247864]
[70.76612091 176.33296204]
[56.79561615 181.49766541]
[47.47539520 193.25068665]
[45.61218262 209.54364014]
[30.46471786 215.82745361]
[17.61541557 205.63787842]
[20.28253555 189.45707703]
[35.72237396 183.93046570]
[45.04259491 172.17744446]
[46.88821411 157.39762878]
[61.52536774 151.39227295]
[70.84558868 139.63923645]
[80.16580200 127.88622284]
[77.90290070 120.73574829]
[64.08893585 126.58164215]
[50.27497864 132.42753601]
[38.69082642 141.95683289]
[24.30841446 137.69699097]
[19.78237534 123.39611816]
[29.09502602 111.63710022]
[44.05289841 112.76660156]
[58.71499252 109.60070038]
[73.37709045 106.43480682]
[71.11418915 99.28433228]
[56.72917175 95.03328705]
[42.34415817 90.78224182]
[27.95914650 86.53119659]
[13.57413292 82.28015137]
[-0.81088078 78.02909851]
[-15.19589424 73.77805328]
[-29.58090782 69.52700806]
[-40.65967941 80.16450500]
[-55.57675934 83.82188416]
[-70.31951904 79.51531219]
[-80.92224121 68.40325165]
[-84.53283691 53.47478485]
[-80.18007660 38.74559402]
[-69.03483582 28.17775726]
[-54.09512711 24.61397171]
[-39.37965012 29.01287651]
[-28.84680176 40.19118881]
[-25.32986259 55.14199829]
[-10.94484806 59.39304352]
[3.44016480 63.64408875]
[17.82517815 67.89513397]
[32.21018982 72.14617920]
[46.59520340 76.39722443]
[60.98021698 80.64826965]
[75.36523438 84.89931488]
[86.56352997 74.91943359]
[83.99025726 60.14180374]
[81.41697693 45.36417770]
[78.84370422 30.58655167]
[66.20075989 21.48745155]
[63.80160141 6.46417999]
[72.55411530 -5.53286505]
[69.98084259 -20.31049156]
[67.40756989 -35.08811951]
[62.83281326 -43.04952240]
[64.92936707 -50.17324829]
[62.63962936 -64.99745941]
[48.49878693 -71.16512299]
[39.95626068 -84.01147461]
[39.73794556 -99.43729401]
[47.91349792 -112.52025604]
[61.87413788 -119.08563232]
[77.16506958 -117.03843689]
[88.90701294 -107.03192139]
[93.35315704 -92.25913239]
[89.08475494 -77.43400574]
[77.46383667 -67.28719330]
[79.75357819 -52.46298981]
[82.18519592 -37.66139221]
[84.75846863 -22.88376617]
[87.33174133 -8.10614014]
[99.62429047 0.22626185]
[102.44446564 15.17621994]
[93.62133026 28.01327515]
[96.19461060 42.79090118]
[98.76788330 57.56853104]
[101.34115601 72.34615326]
[107.55715179 76.54274750]
[106.36783600 61.58997345]
[117.31675720 51.33711243]
[132.15933228 53.50462341]
[139.71902466 66.46035004]
[134.30335999 80.44858551]
[119.98914337 84.93593597]
[126.20513916 89.13253021]
[140.87336731 85.99511719]
[155.54158020 82.85771179]
[170.20979309 79.72029877]
[184.87802124 76.58288574]
[199.54623413 73.44548035]
[203.96824646 62.35015869]
[213.11770630 54.86074448]
[224.63156128 52.76119232]
[235.60787964 56.46239471]
[243.33728027 64.92794800]
[258.11489868 62.35467529]
[272.89251709 59.78139877]
[287.67016602 57.20812607]
[302.44778442 54.63484955]
[311.33413696 41.56549072]
[326.87460327 38.68977356]
[339.84927368 47.71381378]
[342.56051636 63.28380585]
[333.39981079 76.16235352]
[317.80203247 78.70883179]
[305.02105713 69.41247559]
[290.24343872 71.98574829]
[275.46578979 74.55902863]
[260.68817139 77.13230133]
[245.91055298 79.70557404]
[236.34367371 95.27330017]
[218.13360596 99.01483154]
[202.68365479 88.11370087]
[188.01542664 91.25110626]
[173.34721375 94.38851929]
[158.67898560 97.52592468]
[144.01077271 100.66333771]
[129.34254456 103.80075073]
[143.71928406 108.07973480]
[158.46536255 105.33144379]
[172.65475464 110.19571686]
[182.61329651 121.41299438]
[185.76235962 136.07872009]
[181.28651428 150.39538574]
[170.34475708 160.65586853]
[155.77027893 164.20336914]
[141.33697510 160.11929321]
[130.78257751 149.46188354]
[121.21647644 137.90811157]
[124.07234192 152.63372803]
[126.92820740 167.35935974]
[137.18228149 175.23359680]
[139.23754883 187.59103394]
[132.52764893 197.69108582]
[135.10092163 212.46870422]
[150.02769470 215.10824585]
[163.14994812 222.69654846]
[172.88310242 234.31729126]
[178.05183411 248.56719971]
[178.03198242 263.72555542]
[172.82595825 277.96188354]
[163.06240845 289.55709839]
[149.92031860 297.11099243]
[134.98669434 299.71145630]
[120.06480408 297.04440308]
[106.95655823 289.43191528]
[97.24483490 277.79327393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 151]
[5 150]
[7 147]
[8 146]
[9 145]
[10 25]
[11 24]
[12 23]
[14 21]
[15 20]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[62 93]
[63 92]
[64 91]
[65 90]
[68 87]
[69 86]
[70 85]
[72 84]
[73 83]
[101 134]
[102 133]
[103 132]
[104 131]
[105 130]
[106 129]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
