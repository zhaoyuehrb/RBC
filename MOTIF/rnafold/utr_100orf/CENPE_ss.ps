%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUUUAAAGGCGGGGCGGCCUGUGAGCCCUGAAGUGCCGGCCGCGGAGGGUCCUGGCCAUUUUCCUGGGACCAGUUCAGCCUGAUAGGAUGGCGGAGGAAGGAGCCGUGGCCGUCUGCGUGCGAGUGCGGCCGCUGAACAGCAGAGAAGAAUCACUUGGAGAAACUGCCCAAGUUUACUGGAAAACUG\
) } def
/len { sequence length } bind def

/coor [
[174.87515259 230.72732544]
[166.60542297 243.24177551]
[155.43232727 253.24986267]
[142.08641052 260.09722900]
[127.44027710 263.33615112]
[112.45153809 262.75488281]
[98.10023499 258.39138794]
[85.32469940 250.53100586]
[74.96024323 239.68766785]
[67.68454742 226.57034302]
[63.97330856 212.03669739]
[64.06919098 197.03700256]
[67.96452332 182.55541992]
[57.66757584 193.46289062]
[47.37062836 204.37036133]
[37.07368088 215.27783203]
[26.77673149 226.18528748]
[16.47978401 237.09275818]
[20.29133034 252.04187012]
[15.39403629 266.67129517]
[3.35061240 276.31283569]
[-11.99592876 277.88992310]
[-25.74856186 270.89932251]
[-33.51887131 257.57168579]
[-32.82738113 242.15983582]
[-23.89474106 229.58161926]
[-9.57132530 223.85070801]
[5.57231569 226.79582214]
[15.86926270 215.88835144]
[26.16621017 204.98088074]
[36.46315765 194.07341003]
[46.76010513 183.16593933]
[57.05705261 172.25846863]
[58.71903610 163.66261292]
[66.61891937 157.78765869]
[72.61460876 144.03805542]
[78.61029816 130.28843689]
[84.60597992 116.53883362]
[75.74327087 84.59291077]
[113.00790405 67.63857269]
[104.63592529 55.19229126]
[96.26394653 42.74600601]
[87.89196777 30.29972076]
[79.51998901 17.85343742]
[71.14801788 5.40715313]
[62.77603531 -7.03913069]
[54.40406036 -19.48541451]
[46.03208160 -31.93169975]
[29.55713463 -30.62735558]
[14.75506020 -37.76394653]
[5.62026310 -51.31063080]
[4.56474304 -67.52128601]
[11.78188324 -81.97025299]
[3.20632863 -94.27715302]
[-5.36922598 -106.58405304]
[-13.94478035 -118.89096069]
[-30.78859901 -126.31238556]
[-31.61382294 -143.83470154]
[-40.39063263 -155.99890137]
[-49.16744232 -168.16308594]
[-57.94425583 -180.32728577]
[-66.72106171 -192.49148560]
[-75.49787903 -204.65567017]
[-84.27468872 -216.81987000]
[-93.05149841 -228.98405457]
[-108.40061188 -231.63778687]
[-117.12826538 -244.09904480]
[-114.50374603 -258.71572876]
[-123.28055573 -270.87991333]
[-132.05735779 -283.04412842]
[-140.83416748 -295.20831299]
[-156.10578918 -293.57333374]
[-170.14239502 -299.80786133]
[-179.16819763 -312.23486328]
[-180.75531006 -327.51153564]
[-174.47680664 -341.52853394]
[-162.02156067 -350.51531982]
[-146.73999023 -352.05453491]
[-132.74275208 -345.73214722]
[-123.79503632 -333.24877930]
[-122.30372620 -317.96246338]
[-128.66998291 -303.98510742]
[-119.89317322 -291.82092285]
[-111.11636353 -279.65673828]
[-102.33954620 -267.49255371]
[-87.64084625 -265.37506104]
[-78.56662750 -253.16386414]
[-80.88730621 -237.76086426]
[-72.11049652 -225.59667969]
[-63.33368301 -213.43247986]
[-54.55687332 -201.26829529]
[-45.78005981 -189.10409546]
[-37.00325012 -176.93989563]
[-28.22644043 -164.77571106]
[-19.44962883 -152.61151123]
[-7.55244589 -150.36610413]
[-0.14252485 -140.28892517]
[-1.63787675 -127.46651459]
[6.93767738 -115.15960693]
[15.51323223 -102.85270691]
[24.08878517 -90.54580688]
[37.59984970 -92.59924316]
[50.73955917 -88.60835266]
[60.92406845 -79.29827881]
[66.12499237 -66.44590759]
[65.27327728 -52.54095840]
[58.47836304 -40.30367661]
[66.85034180 -27.85739326]
[75.22232056 -15.41110897]
[83.59429932 -2.96482468]
[91.96627808 9.48145962]
[100.33825684 21.92774391]
[108.71023560 34.37402725]
[117.08220673 46.82031250]
[125.45418549 59.26659393]
[139.80155945 63.64299393]
[153.69490051 57.98833084]
[167.58822632 52.33366394]
[181.48156738 46.67900085]
[195.37490845 41.02433395]
[196.40364075 25.83542252]
[203.89454651 12.65311050]
[216.31526184 4.06556749]
[231.17176819 1.73202598]
[245.50903320 6.06241798]
[256.49884033 16.14655876]
[270.39215088 10.49189377]
[284.28549194 4.83722878]
[298.17883301 -0.81743586]
[307.80935669 -14.09091377]
[324.08944702 -12.11849785]
[330.27154541 3.07075906]
[319.99606323 15.85145187]
[303.83349609 13.07589912]
[289.94015503 18.73056412]
[276.04681396 24.38522911]
[262.15350342 30.03989410]
[261.32931519 44.93238449]
[254.09109497 58.04411697]
[241.82759094 66.74856567]
[226.94020081 69.27558136]
[212.37278748 65.07112122]
[201.02957153 54.91767120]
[187.13623047 60.57233429]
[173.24288940 66.22699738]
[159.34956360 71.88166809]
[145.45622253 77.53633118]
[144.10664368 84.91390991]
[159.01019287 86.61228943]
[173.37895203 82.30667114]
[184.55352783 92.31311035]
[181.85409546 107.06821442]
[167.86054993 112.47015381]
[155.94712830 103.35671234]
[141.40748596 99.66905975]
[140.05790710 107.04663849]
[151.04969788 117.25353241]
[162.04147339 127.46042633]
[173.03324890 137.66732788]
[184.02503967 147.87422180]
[195.01681519 158.08111572]
[209.93406677 154.14675903]
[224.60327148 158.92358398]
[234.34353638 170.88729858]
[236.04679871 186.22035217]
[229.16952515 200.03001404]
[215.90623474 207.90966797]
[200.48921204 207.34494019]
[187.83796692 198.51605225]
[181.98945618 184.24024963]
[184.80992126 169.07290649]
[173.81814575 158.86599731]
[162.82635498 148.65910339]
[151.83457947 138.45220947]
[140.84278870 128.24531555]
[129.85101318 118.03842163]
[113.19822693 125.52595520]
[98.35559082 122.53452301]
[92.35990143 136.28413391]
[86.36421204 150.03373718]
[80.36853027 163.78334045]
[92.16567230 154.51904297]
[105.92662048 148.54942322]
[120.75160980 146.26478577]
[135.67134094 147.81452942]
[149.71029663 153.09730530]
[161.95056152 161.76771545]
[171.59179688 173.25885010]
[178.00366211 186.81939697]
[180.76689148 201.56268311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[35 181]
[36 180]
[37 179]
[38 178]
[40 115]
[41 114]
[42 113]
[43 112]
[44 111]
[45 110]
[46 109]
[47 108]
[48 107]
[53 101]
[54 100]
[55 99]
[56 98]
[58 95]
[59 94]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[68 85]
[69 84]
[70 83]
[71 82]
[116 147]
[117 146]
[118 145]
[119 144]
[120 143]
[126 137]
[127 136]
[128 135]
[129 134]
[156 176]
[157 175]
[158 174]
[159 173]
[160 172]
[161 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
