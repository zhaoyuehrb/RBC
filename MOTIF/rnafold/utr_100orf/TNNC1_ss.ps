%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAGCUGUCCUGUGAGCCGCCAGCAUGGAUGACAUCUACAAGGCUGCGGUAGAGCAGCUGACAGAAGAGCAGAAAAAUGAGUUCAAGGCAGCCUUCGACAUCUUCGUGCUGGGCGCUGAGGAUG\
) } def
/len { sequence length } bind def

/coor [
[48.92356491 475.73690796]
[39.09187317 487.53662109]
[24.67198563 492.82458496]
[9.54277802 490.17831421]
[-2.22606802 480.30969238]
[-7.46879196 465.87329102]
[-4.77512789 450.75247192]
[5.13034248 439.01461792]
[19.58309746 433.81716919]
[22.16751671 419.04147339]
[24.75193596 404.26580811]
[27.33635521 389.49011230]
[29.92077446 374.71441650]
[23.24924469 366.80212402]
[22.06739998 356.29791260]
[27.01630402 346.70812988]
[36.64895630 341.37103271]
[39.96092606 326.74124146]
[43.27289581 312.11145020]
[35.13375473 299.69009399]
[38.28415680 284.80624390]
[51.36799622 276.35336304]
[54.67996597 261.72357178]
[57.99193573 247.09378052]
[61.30390549 232.46398926]
[64.61587524 217.83419800]
[67.92784882 203.20440674]
[71.23981476 188.57461548]
[74.55178070 173.94482422]
[77.86375427 159.31503296]
[81.17572021 144.68522644]
[79.56681824 137.38847351]
[84.75477600 129.73667908]
[88.42759705 115.19327545]
[81.09284973 102.69737244]
[84.64067078 88.64891052]
[97.02900696 81.13390350]
[100.70182037 66.59050751]
[94.53076935 57.46961975]
[94.46157837 46.67839813]
[100.27251434 37.84841156]
[109.80401611 33.81552124]
[114.19156647 19.47155190]
[118.57910919 5.12758350]
[122.96665955 -9.21638489]
[127.35420990 -23.56035423]
[131.74176025 -37.90432358]
[136.12930298 -52.24829102]
[140.51684570 -66.59226227]
[131.39503479 -77.00675964]
[128.65963745 -90.46750641]
[132.92515564 -103.40998840]
[142.96653748 -112.46122742]
[156.06861877 -115.31874847]
[160.80961609 -129.54980469]
[165.55061340 -143.78086853]
[170.29159546 -158.01191711]
[168.33689880 -168.92518616]
[174.29219055 -176.75717163]
[175.77398682 -191.68380737]
[177.25578308 -206.61044312]
[165.57551575 -216.82566833]
[162.16317749 -231.96289062]
[168.33088684 -246.20153809]
[181.70703125 -254.06655884]
[197.14820862 -252.53367615]
[208.71697998 -242.19233704]
[211.96488953 -227.01898193]
[205.64308167 -212.84808350]
[192.18240356 -205.12864685]
[190.70060730 -190.20201111]
[189.21881104 -175.27537537]
[200.41639709 -185.25607300]
[215.03433228 -188.62001038]
[229.46813965 -184.53770447]
[240.15872192 -174.01576233]
[244.47003174 -159.64869690]
[241.33895874 -144.97911072]
[231.53758240 -133.62425232]
[217.48269653 -128.38398743]
[202.63998413 -130.55044556]
[190.66932678 -139.58943176]
[184.52265930 -153.27091980]
[179.78166199 -139.03987122]
[175.04066467 -124.80880737]
[170.29968262 -110.57775116]
[180.26086426 -97.59192657]
[180.56089783 -81.06279755]
[170.88577271 -67.45420837]
[154.86080933 -62.20471191]
[150.47326660 -47.86074448]
[146.08572388 -33.51677322]
[141.69818115 -19.17280579]
[137.31062317 -4.82883787]
[132.92308044 9.51513004]
[128.53553772 23.85909843]
[124.14798737 38.20306778]
[129.95202637 56.58119965]
[115.24522400 70.26332092]
[111.57240295 84.80672455]
[118.90715027 97.30262756]
[115.35932922 111.35108948]
[102.97099304 118.86609650]
[99.29817963 133.40948486]
[95.80551910 147.99720764]
[92.49354553 162.62699890]
[89.18157959 177.25679016]
[85.86960602 191.88658142]
[82.55764008 206.51637268]
[79.24566650 221.14616394]
[75.93370056 235.77597046]
[72.62172699 250.40576172]
[69.30976105 265.03555298]
[65.99779510 279.66534424]
[74.16529083 292.92919922]
[70.59807587 307.71871948]
[57.90269089 315.42343140]
[54.59072113 330.05322266]
[51.27875137 344.68301392]
[58.19438553 363.54208374]
[44.69645691 377.29885864]
[42.11203766 392.07452393]
[39.52761841 406.85021973]
[36.94319916 421.62588501]
[34.35877991 436.40158081]
[46.18925858 446.19622803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 125]
[10 124]
[11 123]
[12 122]
[13 121]
[17 119]
[18 118]
[19 117]
[22 114]
[23 113]
[24 112]
[25 111]
[26 110]
[27 109]
[28 108]
[29 107]
[30 106]
[31 105]
[33 104]
[34 103]
[37 100]
[38 99]
[42 97]
[43 96]
[44 95]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[54 86]
[55 85]
[56 84]
[57 83]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
