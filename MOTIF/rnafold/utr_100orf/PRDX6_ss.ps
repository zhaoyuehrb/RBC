%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCAACCGGUUGCUUGCUGUCCCAGCGGCGCCCCCUCAUCACCGUCGCCAUGCCCGGAGGUCUGCUUCUCGGGGACGUGGCUCCCAACUUUGAGGCCAAUACCACCGUCGGCCGCAUCCGUUUCCACGACUUUCUGGGAGACUCAUGGG\
) } def
/len { sequence length } bind def

/coor [
[93.52568817 256.53436279]
[79.40546417 248.91867065]
[76.69773102 233.10575867]
[87.47964478 221.22595215]
[88.09951782 206.23876953]
[88.71939087 191.25158691]
[72.44603729 187.72047424]
[57.07643509 181.31217957]
[43.11470795 172.23687744]
[31.01879501 160.79223633]
[18.99380684 169.75883484]
[12.55582523 184.21092224]
[-2.27233839 185.61619568]
[-14.29732609 194.58279419]
[-26.32231331 203.54937744]
[-38.34730148 212.51596069]
[-43.39728928 220.20500183]
[-50.71474075 221.54054260]
[-62.92247391 230.25669861]
[-75.13020325 238.97285461]
[-87.33793640 247.68901062]
[-96.71520233 261.81356812]
[-112.88365173 256.71282959]
[-112.45812988 239.76422119]
[-96.05408478 235.48127747]
[-83.84635162 226.76512146]
[-71.63862610 218.04896545]
[-59.43089294 209.33280945]
[-47.31388855 200.49098206]
[-35.28889847 191.52438354]
[-23.26391220 182.55780029]
[-11.23892498 173.59121704]
[-5.66105080 159.78047180]
[10.02722073 157.73384094]
[22.05220795 148.76725769]
[16.90126801 139.35357666]
[12.88217735 129.40388489]
[10.04967976 119.05368805]
[8.44235420 108.44397736]
[8.08209419 97.71925354]
[8.97380543 87.02558899]
[11.10534477 76.50865173]
[14.44767666 66.31167603]
[18.95527840 56.57355118]
[24.56675339 47.42692184]
[31.20567131 38.99636459]
[38.78160477 31.39670944]
[47.19136810 24.73147011]
[56.32041168 19.09142876]
[50.29497910 5.35482979]
[44.26954651 -8.38177013]
[38.24411774 -22.11837006]
[32.21868515 -35.85496902]
[26.19325447 -49.59157181]
[20.02618980 -63.26517105]
[13.71815300 -76.87430573]
[7.41011572 -90.48344421]
[-5.41321754 -99.75019836]
[-3.74562502 -114.55116272]
[-10.05366230 -128.16029358]
[-16.36170006 -141.76943970]
[-22.66973686 -155.37857056]
[-37.59285355 -160.58204651]
[-44.39035034 -174.84982300]
[-39.02939606 -189.71710205]
[-24.69054413 -196.36337280]
[-9.88078499 -190.84552002]
[-3.38648558 -176.43721008]
[-9.06059837 -161.68661499]
[-2.75256085 -148.07746887]
[3.55547667 -134.46833801]
[9.86351395 -120.85919952]
[22.23565483 -112.56586456]
[21.01925468 -96.79148865]
[27.32729149 -83.18234253]
[33.63533020 -69.57320404]
[39.33769608 -64.79703522]
[39.92985535 -55.61700058]
[45.95528412 -41.88040161]
[51.98071671 -28.14380074]
[58.00614929 -14.40720177]
[64.03157806 -0.67060173]
[70.05701447 13.06599808]
[83.10858154 9.61867905]
[96.52424622 8.11952114]
[110.01483154 8.60083961]
[123.28954315 11.05225945]
[136.06225586 15.42094135]
[148.05764771 21.61271667]
[159.01715088 29.49412346]
[168.70455933 38.89527893]
[176.91104126 49.61354446]
[183.45971680 61.41788101]
[197.54328918 56.25522232]
[207.83732605 44.24092865]
[222.45002747 47.12508011]
[236.53359985 41.96242142]
[250.61717224 36.79976273]
[264.70074463 31.63710594]
[274.99478149 19.62281227]
[289.60748291 22.50696373]
[303.69104004 17.34430504]
[310.10910034 2.90185690]
[324.88946533 -2.69419932]
[339.26324463 3.87617683]
[344.70272827 18.71489716]
[337.98074341 33.01841354]
[323.08535767 38.30070114]
[308.85369873 31.42787552]
[294.77014160 36.59053421]
[285.48342896 48.23555756]
[269.86340332 45.72067642]
[255.77981567 50.88333511]
[241.69625854 56.04599380]
[227.61268616 61.20865250]
[218.32598877 72.85367584]
[202.70593262 70.33879089]
[188.62237549 75.50144958]
[191.91429138 97.57822418]
[189.78950500 119.79771423]
[182.37318420 140.85047913]
[170.10243225 159.49581909]
[180.70903015 170.10243225]
[191.31562805 180.70903015]
[201.92222595 191.31562805]
[212.52883911 201.92222595]
[223.13543701 212.52883911]
[231.47221375 216.41749573]
[233.84880066 223.46594238]
[244.23393250 234.28948975]
[260.03802490 234.36549377]
[271.09997559 245.65306091]
[270.85687256 261.45547485]
[259.45297241 272.39746094]
[243.65402222 271.98730469]
[232.83322144 260.46835327]
[233.41038513 244.67462158]
[223.02525330 233.85107422]
[212.52883911 223.13543701]
[201.92222595 212.52883911]
[191.31562805 201.92222595]
[180.70903015 191.31562805]
[170.10243225 180.70903015]
[159.49581909 170.10243225]
[147.10589600 178.96289062]
[133.42317200 185.65626526]
[118.82317352 189.99884033]
[103.70658112 191.87145996]
[103.08670807 206.85864258]
[102.46683502 221.84582520]
[112.23088837 234.57542419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 150]
[5 149]
[6 148]
[10 35]
[11 34]
[13 32]
[14 31]
[15 30]
[16 29]
[18 28]
[19 27]
[20 26]
[21 25]
[49 83]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 76]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
[93 118]
[94 117]
[96 115]
[97 114]
[98 113]
[99 112]
[101 110]
[102 109]
[122 144]
[123 143]
[124 142]
[125 141]
[126 140]
[127 139]
[129 138]
[130 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
