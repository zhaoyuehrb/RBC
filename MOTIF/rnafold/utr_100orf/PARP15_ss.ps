%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAAAAGAAGUUCGAGGCACAAGCCUGUUGGGUGGGGCGCAACUGCAGUCCCAGCGAGCUGAGGAUGGCUGCGCCAGGCCCCCUUCCUGCCGCUGCUCUGAGUCCAGGGGCUCCGACCCCCAGAGAACUUAUGCACGGAGUUGCAGGUGUUACUUCCAGAGCCG\
) } def
/len { sequence length } bind def

/coor [
[90.65042114 414.32916260]
[82.56276703 427.20001221]
[70.16239929 435.99200439]
[55.34029007 439.36447144]
[40.35670090 436.80313110]
[27.49652481 428.69854736]
[18.72083855 416.28662109]
[15.36787605 401.46008301]
[17.94893646 386.47988892]
[26.07042885 373.63037109]
[38.49388504 364.87103271]
[53.32481384 361.53756714]
[55.85231018 346.75204468]
[58.37980270 331.96652222]
[60.90729904 317.18096924]
[63.15621948 302.35052490]
[65.12577057 287.48040771]
[67.09532166 272.61026001]
[69.06486511 257.74014282]
[57.69472885 250.13342285]
[50.68549347 238.30847168]
[49.45825195 224.55061340]
[54.31014633 211.54760742]
[64.34507751 201.86448669]
[77.63861084 197.43766785]
[79.88753510 182.60720825]
[82.13645172 167.77676392]
[84.38537598 152.94630432]
[86.63429260 138.11585999]
[88.88320923 123.28540039]
[76.37547302 110.37662506]
[75.33167267 92.43253326]
[62.88910294 84.05503845]
[50.44652939 75.67755127]
[38.00395966 67.30005646]
[22.68437386 70.11929321]
[10.18517780 61.44607544]
[7.59187365 46.82381821]
[-4.85069847 38.44632721]
[-17.29327011 30.06883240]
[-29.73584366 21.69133949]
[-42.17841721 13.31384563]
[-54.62098694 4.93635225]
[-59.91453552 4.57695723]
[-64.10280609 2.41595864]
[-66.68012238 -0.81284070]
[-67.51074219 -4.28121185]
[-79.46096039 -13.34720135]
[-95.13172150 -15.52385235]
[-100.59488678 -29.38037109]
[-112.54511261 -38.44636154]
[-124.49533081 -47.51234818]
[-136.44555664 -56.57833862]
[-148.48052979 -65.53152466]
[-160.59916687 -74.37111664]
[-172.71781921 -83.21070862]
[-189.07257080 -84.41660309]
[-195.96099854 -99.29885864]
[-186.29687500 -112.54788971]
[-170.02183533 -110.53423309]
[-163.87821960 -95.32936096]
[-151.75958252 -86.48976898]
[-139.64093018 -77.65017700]
[-132.35255432 -76.24289703]
[-127.37957001 -68.52856445]
[-115.42934418 -59.46257401]
[-103.47911835 -50.39658356]
[-91.52890015 -41.33059311]
[-76.71289825 -39.80240250]
[-70.39497375 -25.29742432]
[-58.44474792 -16.23143578]
[-46.24349594 -7.50622034]
[-33.80092239 0.87127322]
[-21.35834885 9.24876690]
[-8.91577721 17.62626076]
[3.52679467 26.00375366]
[15.96936703 34.38124847]
[30.49319649 31.28383255]
[43.23107529 39.60255432]
[46.38145065 54.85748291]
[58.82402420 63.23497772]
[71.26659393 71.61247253]
[83.70916748 79.98995972]
[95.60076141 74.57482910]
[108.62047577 75.67963409]
[119.42958832 83.02107239]
[133.10585022 76.85993195]
[146.78211975 70.69879150]
[160.45838928 64.53765106]
[174.07611084 58.24814606]
[187.63406372 51.83083725]
[201.19201660 45.41352463]
[200.97294617 28.27965736]
[208.22229004 12.81432533]
[221.44606018 2.09144306]
[237.96807861 -1.78089881]
[254.47163391 1.92524981]
[267.66519165 12.42141724]
[280.97216797 5.49866486]
[294.27914429 -1.42408752]
[307.58612061 -8.34683990]
[320.89306641 -15.26959324]
[307.05938721 -21.06861877]
[301.21728516 -34.88419342]
[306.69372559 -48.84874344]
[320.36999512 -55.00986481]
[334.45788574 -49.85897827]
[340.93472290 -36.32936478]
[336.11218262 -22.12578201]
[350.11419678 -27.50569153]
[364.11624146 -32.88560104]
[378.11825562 -38.26551056]
[384.31210327 -52.80551529]
[399.00415039 -58.62955093]
[413.47784424 -52.28231812]
[419.14624023 -37.52952194]
[412.64633179 -23.12372971]
[397.83441162 -17.61164474]
[383.49816895 -24.26349068]
[369.49615479 -18.88358116]
[355.49411011 -13.50367069]
[341.49209595 -8.12376118]
[327.81582642 -1.96262109]
[314.50885010 4.96013165]
[301.20187378 11.88288403]
[287.89492798 18.80563736]
[274.58795166 25.72838974]
[276.04721069 38.68211365]
[272.99725342 51.38887405]
[265.78204346 62.32240295]
[255.24711609 70.16179657]
[242.64059448 73.95106506]
[229.46540833 73.21569061]
[217.30000305 68.02192688]
[207.60932922 58.97147751]
[194.05137634 65.38878632]
[180.49342346 71.80609894]
[175.77267456 77.53457642]
[166.61953735 78.21392059]
[152.94326782 84.37506104]
[139.26699829 90.53620148]
[125.59072876 96.69734192]
[123.86645508 109.80741119]
[115.87449646 120.34190369]
[103.71366882 125.53431702]
[101.46474457 140.36477661]
[99.21582794 155.19522095]
[96.96690369 170.02568054]
[94.71798706 184.85614014]
[92.46906281 199.68658447]
[105.48098755 209.85566711]
[111.56599426 225.10708618]
[109.15566254 241.25494385]
[98.99938202 253.91828918]
[83.93499756 259.70968628]
[81.96545410 274.57980347]
[79.99590302 289.44995117]
[78.02635193 304.32006836]
[80.21754456 310.63134766]
[79.03865814 316.24600220]
[75.69282532 319.70846558]
[73.16532898 334.49401855]
[70.63783264 349.27954102]
[68.11033630 364.06506348]
[80.99179840 372.13577271]
[89.80010223 384.52456665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 164]
[13 163]
[14 162]
[15 161]
[16 158]
[17 157]
[18 156]
[19 155]
[25 150]
[26 149]
[27 148]
[28 147]
[29 146]
[30 145]
[32 83]
[33 82]
[34 81]
[35 80]
[38 77]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[47 71]
[48 70]
[50 68]
[51 67]
[52 66]
[53 65]
[54 63]
[55 62]
[56 61]
[86 142]
[87 141]
[88 140]
[89 139]
[90 137]
[91 136]
[92 135]
[98 127]
[99 126]
[100 125]
[101 124]
[102 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
