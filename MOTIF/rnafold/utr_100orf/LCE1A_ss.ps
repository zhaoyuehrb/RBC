%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUGCCAGCAGAGCCAGCAGCAGUGCCAGCCCCCUCCCAAGUGCACCCCCAAGUGCCCUCCCAAGUGCCCCACUCCUAAGUGCCCCCCAAAGUGUC\
) } def
/len { sequence length } bind def

/coor [
[48.72063065 195.32611084]
[38.90330124 189.35229492]
[29.77463341 182.37133789]
[21.43752480 174.46192932]
[13.98594761 165.71319580]
[7.50389433 156.22375488]
[2.06442857 146.10058594]
[-2.27113795 135.45779419]
[-16.74991417 139.37762451]
[-24.64919472 152.80293274]
[-39.38857269 156.57194519]
[-52.13887787 148.95845032]
[-66.61765289 152.87828064]
[-81.09642792 156.79811096]
[-88.99571228 170.22341919]
[-103.73509216 173.99243164]
[-116.48539734 166.37893677]
[-130.96417236 170.29876709]
[-140.16461182 183.44149780]
[-156.18473816 184.29881287]
[-166.73529053 172.21305847]
[-163.72277832 156.45538330]
[-149.45814514 149.11372375]
[-134.88400269 155.81999207]
[-120.40522003 151.90016174]
[-113.23721313 138.89419556]
[-98.60951233 134.71267700]
[-85.01625824 142.31933594]
[-70.53748322 138.39950562]
[-56.05870819 134.47967529]
[-48.89069366 121.47370148]
[-34.26299667 117.29218292]
[-20.66974258 124.89884186]
[-6.19096661 120.97901154]
[-8.24097633 100.72898102]
[-6.46390009 80.45317078]
[-0.92256951 60.86848450]
[8.18708992 42.66737366]
[20.54298592 26.49337959]
[35.70825195 12.91836262]
[53.14668655 2.42230058]
[72.24172211 -4.62369823]
[92.31819916 -7.97050714]
[112.66629028 -7.49979258]
[115.44950867 -22.23932076]
[110.40715790 -37.23549652]
[120.37161255 -48.30612183]
[123.15483093 -63.04565048]
[125.93804932 -77.78517914]
[128.72126770 -92.52471161]
[119.60765076 -105.43662262]
[122.37574005 -120.99661255]
[135.38328552 -129.97320557]
[150.91314697 -127.04075623]
[159.75170898 -113.93903351]
[156.65522766 -98.44104767]
[143.46080017 -89.74149323]
[140.67758179 -75.00196075]
[137.89436340 -60.26243591]
[135.11114502 -45.52290726]
[140.35256958 -31.58100128]
[130.18904114 -19.45610428]
[127.40582275 -4.71657658]
[140.59037781 -0.34471300]
[153.10650635 5.67959452]
[164.74810791 13.25713921]
[175.32344055 22.26313782]
[184.65837097 32.54928207]
[192.59918213 43.94617844]
[199.01510620 56.26615524]
[203.80047607 69.30632782]
[206.87649536 82.85195160]
[208.19250488 96.67996216]
[207.72683716 110.56264496]
[205.48715210 124.27139282]
[219.83702087 128.63960266]
[234.18688965 133.00782776]
[248.53675842 137.37605286]
[264.38006592 133.14266968]
[275.77490234 144.93630981]
[270.99923706 160.62467957]
[254.96585083 164.06892395]
[244.16853333 151.72592163]
[229.81866455 147.35769653]
[215.46879578 142.98947144]
[201.11894226 138.62126160]
[196.45448303 149.12406921]
[190.70281982 159.07318115]
[183.92877197 168.35643005]
[176.20872498 176.86918640]
[167.62965393 184.51550293]
[158.28829956 191.20918274]
[148.28993225 196.87477112]
[137.74725342 201.44844055]
[126.77910614 204.87860107]
[115.50910950 207.12660217]
[104.06430054 208.16709900]
[92.57368469 207.98837280]
[81.16676331 206.59245300]
[69.97213745 203.99504089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 34]
[9 33]
[12 30]
[13 29]
[14 28]
[17 25]
[18 24]
[44 63]
[45 62]
[47 60]
[48 59]
[49 58]
[50 57]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
