%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUAGCCUCGUGACCUUUUACCCCAACAUGGCUGCGCCCGUGGGACCGGUGAAGUUCUGGCGACCCGGUACAGAGGGGCCAGGUGUAAGCAUCUCUGAAGAGAGACAAAGUCUGGCUGAAAACUCUG\
) } def
/len { sequence length } bind def

/coor [
[84.27236176 118.16083527]
[71.40354156 125.86755371]
[65.57666779 133.03385925]
[58.13243866 133.60052490]
[45.08251953 140.99644470]
[32.12221909 148.54829407]
[19.25340271 156.25502014]
[6.38458490 163.96174622]
[-6.48423338 171.66845703]
[-19.35305023 179.37518311]
[-23.30697632 194.44183350]
[-36.46757507 202.07421875]
[-50.80696487 198.21191406]
[-63.67578125 205.91862488]
[-61.41636658 220.95071411]
[-65.08631897 235.70198059]
[-74.12599182 247.92297363]
[-87.15691376 255.75007629]
[-102.19195557 257.98971558]
[-116.93838501 254.30036926]
[-129.14747620 245.24461365]
[-136.95742798 232.20341492]
[-139.17729187 217.16543579]
[-135.46853638 202.42387390]
[-126.39674377 190.22671509]
[-113.34527588 182.43391418]
[-98.30439758 180.23384094]
[-83.56772614 183.96197510]
[-71.38249969 193.04981995]
[-58.51368332 185.34309387]
[-55.14955902 170.87870789]
[-42.20853043 162.87968445]
[-27.05977058 166.50636292]
[-14.19095230 158.79963684]
[-1.32213485 151.09292603]
[11.54668331 143.38619995]
[24.41550064 135.67948914]
[28.57895088 129.48243713]
[37.68660355 127.94651794]
[50.73652267 120.55059814]
[63.69682312 112.99874115]
[76.56564331 105.29202271]
[77.13364410 92.63085175]
[84.06536102 82.02051544]
[78.11804199 68.24991608]
[72.17073059 54.47931290]
[66.22341919 40.70870972]
[49.52105713 29.53977013]
[52.33779144 10.46886635]
[45.73708725 -3.00075626]
[39.13638306 -16.47037888]
[32.53568268 -29.94000053]
[17.31314468 -33.51887894]
[7.99392223 -46.07619095]
[8.97826862 -61.68276215]
[19.80140495 -72.96964264]
[35.35297775 -74.60752106]
[48.29000854 -65.82302856]
[52.50402832 -50.76394653]
[46.00530243 -36.54070282]
[52.60600662 -23.07108116]
[59.20671082 -9.60145950]
[65.80741119 3.86816311]
[75.84730530 6.33920145]
[82.97907257 14.12757397]
[84.62637329 24.78215027]
[79.99401855 34.76139832]
[85.94133759 48.53200150]
[91.88864899 62.30260086]
[97.83596039 76.07320404]
[106.88465881 76.98313141]
[114.94680786 81.19129181]
[120.86714172 88.09466553]
[123.79729462 96.70402527]
[138.55531311 99.38743591]
[153.31333923 102.07083893]
[168.07136536 104.75424957]
[182.82939148 107.43766022]
[203.17344666 98.16712952]
[219.45735168 112.36918640]
[234.40455627 113.62673950]
[249.35174561 114.88430023]
[264.29891968 116.14186096]
[279.24612427 117.39941406]
[294.19332886 118.65697479]
[309.14050293 119.91452789]
[314.44985962 108.49910736]
[323.01757812 99.30799866]
[333.98953247 93.23509216]
[346.27886963 90.86454010]
[358.67361450 92.41459656]
[369.95614624 97.71763611]
[379.02291870 106.23809814]
[384.99230957 117.12657166]
[387.29040527 129.30445862]
[402.10855103 131.63320923]
[416.92666626 133.96195984]
[431.74481201 136.29071045]
[446.56292725 138.61946106]
[461.66296387 132.22247314]
[474.58813477 142.31561279]
[472.04217529 158.51593018]
[456.64413452 164.15791321]
[444.23419189 153.43759155]
[429.41604614 151.10884094]
[414.59793091 148.78009033]
[399.77978516 146.45133972]
[384.96166992 144.12258911]
[375.55303955 158.97229004]
[360.59179688 168.30177307]
[343.01284790 170.22738647]
[326.28796387 164.32316589]
[313.74005127 151.71401978]
[307.88296509 134.86172485]
[292.93576050 133.60417175]
[277.98855591 132.34660339]
[263.04138184 131.08905029]
[248.09417725 129.83149719]
[233.14698792 128.57392883]
[218.19979858 127.31637573]
[213.26708984 133.73565674]
[206.08732605 137.67678833]
[197.83465576 138.40847778]
[189.89396667 135.73156738]
[183.62850952 130.02532959]
[180.14598083 122.19568634]
[165.38795471 119.51227570]
[150.62992859 116.82886505]
[135.87191772 114.14545441]
[121.11388397 111.46205139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[4 40]
[5 39]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[13 30]
[14 29]
[44 70]
[45 69]
[46 68]
[47 67]
[49 63]
[50 62]
[51 61]
[52 60]
[74 130]
[75 129]
[76 128]
[77 127]
[78 126]
[80 120]
[81 119]
[82 118]
[83 117]
[84 116]
[85 115]
[86 114]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
