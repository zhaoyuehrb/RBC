%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUCGGAGCGCGAAGCCGCCGCUGGGUCCUCGGCGCGCCCCGCGUCUGCGCUUGCUGCCGCGCCCCGGUCGGCGCGCUGGGAGUUCCAGCCAUGCUCUUCUGGCACACGCAGCCCGAGCACUACAACCAGCACAACUCCGGCAGCUACCUGCGUGAUGUGCUCGCUCUGCCCAUCUUCAAGCAGGAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[136.43560791 257.80041504]
[131.89285278 243.50483704]
[127.35010529 229.20927429]
[122.80735016 214.91369629]
[119.04087830 211.95622253]
[117.10062408 206.59556580]
[118.35707855 200.08113098]
[114.27963257 185.64595032]
[110.20217896 171.21078491]
[106.12472534 156.77560425]
[102.04727936 142.34042358]
[87.17297363 140.40260315]
[79.53317261 153.31124878]
[71.89337158 166.21990967]
[72.25747681 182.61502075]
[58.10240555 190.89547729]
[43.98967743 182.54306030]
[44.43725586 166.15000916]
[58.98471451 158.58010864]
[66.62451172 145.67144775]
[74.26432037 132.76280212]
[64.50742340 115.52005768]
[64.30300140 97.11998749]
[49.93573761 92.80932617]
[35.56847763 88.49865723]
[21.20121956 84.18798828]
[6.83395958 79.87732697]
[-7.53329992 75.56665802]
[-21.96847916 71.48920441]
[-36.46779251 67.64604187]
[-50.96710587 63.80287552]
[-60.07875443 64.62893677]
[-65.66910553 59.77830124]
[-80.10428619 55.70085144]
[-94.53946686 51.62339783]
[-108.97464752 47.54594803]
[-123.40982819 43.46849823]
[-137.84500122 39.39104462]
[-152.28018188 35.31359482]
[-166.71536255 31.23614311]
[-181.15054321 27.15869331]
[-195.64985657 23.31552505]
[-210.20950317 19.70765114]
[-224.76914978 16.09977722]
[-232.26234436 23.72910309]
[-242.17364502 27.52364349]
[-252.68467712 26.85918999]
[-261.89672852 21.92309761]
[-268.17376709 13.66824245]
[-270.43283081 3.62980223]
[-284.80010986 -0.68086410]
[-299.16735840 -4.99153042]
[-313.53460693 -9.30219650]
[-325.79614258 0.20751891]
[-341.30661011 0.66024703]
[-354.10192871 -8.11809540]
[-359.26205444 -22.75205612]
[-354.80279541 -37.61458206]
[-342.43881226 -46.99072266]
[-326.92434692 -47.27516556]
[-314.22500610 -38.35853577]
[-309.22393799 -23.66945648]
[-294.85668945 -19.35878944]
[-280.48944092 -15.04812431]
[-266.12216187 -10.73745728]
[-249.71200562 -21.21380997]
[-230.58743286 -16.18826866]
[-221.16127014 1.54013288]
[-206.60162354 5.14800739]
[-192.04197693 8.75588131]
[-187.55099487 7.09334993]
[-181.96743774 8.24446106]
[-177.07308960 12.72351360]
[-162.63790894 16.80096436]
[-148.20272827 20.87841606]
[-133.76754761 24.95586777]
[-119.33237457 29.03331757]
[-104.89719391 33.11076736]
[-90.46201324 37.18822098]
[-76.02684021 41.26567078]
[-61.59165955 45.34312057]
[-47.12393951 49.30356216]
[-32.62462616 53.14672852]
[-18.12531281 56.98989487]
[-13.60799503 55.40030289]
[-8.04380512 56.64167786]
[-3.22263384 61.19939804]
[11.14462566 65.51006317]
[25.51188660 69.82073212]
[39.87914658 74.13139343]
[54.24640656 78.44206238]
[68.61366272 82.75273132]
[78.27385712 67.79660034]
[95.04048157 58.41381836]
[115.65892029 57.90322876]
[121.11750031 43.93168640]
[126.57607269 29.96014595]
[132.03465271 15.98860455]
[137.49322510 2.01706290]
[132.58061218 -6.06082487]
[131.95359802 -15.35640144]
[135.62677002 -23.76839256]
[142.65690613 -29.45363808]
[151.38133240 -31.23068619]
[157.51194763 -44.92066193]
[163.64257812 -58.61063766]
[156.65554810 -72.60047150]
[160.34590149 -87.79636383]
[172.97119141 -97.02328491]
[188.57012939 -95.92456818]
[199.77737427 -85.01898956]
[201.30120850 -69.45582581]
[192.42211914 -56.58353424]
[177.33255005 -52.48001480]
[171.20193481 -38.79003906]
[165.07130432 -25.10006332]
[168.98764038 -4.84379673]
[151.46476746 7.47563696]
[146.00617981 21.44717789]
[140.54760742 35.41872025]
[135.08903503 49.39026260]
[129.63046265 63.36180115]
[133.65736389 69.68904877]
[145.14602661 60.04484940]
[153.36752319 47.49865341]
[168.36718750 47.59851837]
[176.42089844 60.25307083]
[170.15980530 73.88387299]
[155.31278992 76.01933289]
[141.71116638 82.34354401]
[145.73806763 88.67079163]
[160.70661926 89.64173889]
[175.67515564 90.61268616]
[190.64369202 91.58363342]
[205.61224365 92.55458069]
[220.58078003 93.52552795]
[226.68882751 90.93550873]
[232.33659363 91.71273041]
[236.01583862 94.77803040]
[250.94508362 96.23317719]
[263.08258057 86.47003174]
[278.20223999 88.15843201]
[287.43511963 99.78984070]
[302.36434937 101.24498749]
[317.29360962 102.70013428]
[332.22286987 104.15528870]
[346.92144775 96.88319397]
[360.41668701 106.20043945]
[358.82580566 122.52223206]
[343.78536987 129.05812073]
[330.76770020 119.08453369]
[315.83847046 117.62938690]
[300.90921021 116.17424011]
[285.97994995 114.71909332]
[274.67480469 124.34867096]
[259.51367188 123.08561707]
[249.48994446 111.16242981]
[234.56068420 109.70728302]
[219.60983276 108.49407196]
[204.64129639 107.52312469]
[189.67274475 106.55217743]
[174.70420837 105.58123016]
[159.73567200 104.61028290]
[144.76712036 103.63933563]
[135.16642761 125.24303436]
[116.48245239 138.26296997]
[120.55990601 152.69815063]
[124.63735962 167.13333130]
[128.71481323 181.56851196]
[132.79226685 196.00367737]
[137.10292053 210.37094116]
[141.64567566 224.66651917]
[146.18843079 238.96209717]
[150.73118591 253.25765991]
[166.22412109 266.14004517]
[161.30143738 284.83056641]
[166.30471802 298.97155762]
[171.30801392 313.11251831]
[176.31129456 327.25350952]
[181.31459045 341.39447021]
[195.68363953 347.97518921]
[201.11242676 362.81784058]
[194.38014221 377.11651611]
[179.48094177 382.38806152]
[165.25424194 375.50497437]
[160.14050293 360.55087280]
[167.17361450 346.39776611]
[162.17031860 332.25677490]
[157.16703796 318.11581421]
[152.16375732 303.97482300]
[147.16046143 289.83386230]
[137.56478882 286.27130127]
[131.39067078 277.83349609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 174]
[2 173]
[3 172]
[4 171]
[7 170]
[8 169]
[9 168]
[10 167]
[11 166]
[12 21]
[13 20]
[14 19]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 84]
[30 83]
[31 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 70]
[43 69]
[44 68]
[50 65]
[51 64]
[52 63]
[53 62]
[95 122]
[96 121]
[97 120]
[98 119]
[99 118]
[104 116]
[105 115]
[106 114]
[131 164]
[132 163]
[133 162]
[134 161]
[135 160]
[136 159]
[139 158]
[140 157]
[143 154]
[144 153]
[145 152]
[146 151]
[176 191]
[177 190]
[178 189]
[179 188]
[180 187]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
