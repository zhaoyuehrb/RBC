%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGCUUCCGGCGCUGCGGCAGUCCAGAUCAAAAAUGGCGGUAGUUGGUGUGUCCUCGGUUUCUCGGCUGCUGGGUCGGUCCCGCCCACAGCUGGGGCGGCCUAUGUCGAGUGGCGCCCAUGGCGAAGAGGGCU\
) } def
/len { sequence length } bind def

/coor [
[105.29090881 385.81146240]
[115.00149536 373.04101562]
[114.31877899 358.05657959]
[113.63605499 343.07211304]
[112.95333862 328.08764648]
[111.92970276 313.12261963]
[110.56568146 298.18478394]
[109.20166016 283.24691772]
[107.83763123 268.30908203]
[94.96833038 260.85797119]
[88.88225555 247.09483337]
[92.10508728 232.21307373]
[103.60572815 221.96409607]
[102.24170685 207.02624512]
[100.87767792 192.08839417]
[99.51365662 177.15054321]
[98.14963531 162.21269226]
[96.78561401 147.27484131]
[95.42159271 132.33697510]
[94.05756378 117.39913177]
[84.07146454 106.20637512]
[69.38520050 103.15453339]
[54.69894409 100.10269165]
[40.01268005 97.05084991]
[26.89585304 105.45243835]
[12.04537106 102.14822388]
[4.11658049 89.59156036]
[-10.56968117 86.53971863]
[-25.25594139 83.48787689]
[-39.94220352 80.43603516]
[-54.69412994 77.71929169]
[-69.50407410 75.33905792]
[-84.31401825 72.95881653]
[-94.53161621 84.51754761]
[-109.38253784 88.69532013]
[-124.12789917 84.15902710]
[-134.06250000 72.35618591]
[-136.01626587 57.05303955]
[-129.36575317 43.13276291]
[-116.23310089 35.03726959]
[-100.80890656 35.34979630]
[-88.01496124 43.97062302]
[-81.93377686 58.14887238]
[-67.12383270 60.52910995]
[-52.31389236 62.90934753]
[-47.92570877 60.83337402]
[-42.17877960 61.55333710]
[-36.89036179 65.74977875]
[-22.20410156 68.80161285]
[-7.51784039 71.85345459]
[7.16842079 74.90529633]
[19.44338608 66.54701996]
[34.38081741 69.43280792]
[43.06452179 82.36459351]
[57.75078201 85.41643524]
[72.43704224 88.46826935]
[87.12330627 91.52011108]
[90.26981354 88.21859741]
[94.21206665 86.00798798]
[98.58992004 85.06264496]
[103.01138306 85.44255066]
[111.93829346 73.38808441]
[120.86521149 61.33361816]
[129.79212952 49.27915192]
[138.58125305 37.12385559]
[147.23146057 24.86930656]
[155.88166809 12.61475849]
[164.53187561 0.36021039]
[173.18208313 -11.89433765]
[181.83227539 -24.14888573]
[190.48248291 -36.40343475]
[199.13269043 -48.65798187]
[207.78289795 -60.91253281]
[210.20703125 -69.81085205]
[216.77210999 -73.34453583]
[225.69902039 -85.39900208]
[234.62594604 -97.45346832]
[243.55285645 -109.50793457]
[246.17890930 -118.34877777]
[252.82273865 -121.73210144]
[262.02172852 -133.58023071]
[263.71749878 -149.89147949]
[278.79962158 -156.33055115]
[291.75289917 -146.27349854]
[289.25213623 -130.06614685]
[273.86987305 -124.38123322]
[264.67086792 -112.53309631]
[255.60733032 -100.58102417]
[246.68040466 -88.52655792]
[237.75349426 -76.47209167]
[228.82656860 -64.41762543]
[220.03744507 -52.26232529]
[211.38723755 -40.00777817]
[202.73703003 -27.75322914]
[194.08683777 -15.49868202]
[185.43663025 -3.24413323]
[176.78642273 9.01041508]
[168.13621521 21.26496315]
[159.48600769 33.51951218]
[150.83580017 45.77405930]
[149.53721619 53.11578369]
[141.84658813 58.20606613]
[132.91967773 70.26053619]
[123.99275970 82.31500244]
[115.06584930 94.36946869]
[127.91067505 86.62283325]
[142.88883972 87.43206024]
[154.82427979 96.51750183]
[159.59245300 110.73947906]
[155.54559326 125.18326569]
[144.08219910 134.85748291]
[129.16369629 136.41900635]
[115.94551086 129.32820129]
[108.99542236 116.03510284]
[110.35944366 130.97296143]
[111.72346497 145.91081238]
[113.08748627 160.84866333]
[114.45150757 175.78651428]
[115.81553650 190.72436523]
[117.17955780 205.66221619]
[118.54357910 220.60006714]
[131.71026611 228.59660339]
[137.57513428 242.64852905]
[134.08244324 257.28631592]
[122.77548981 266.94503784]
[124.13951111 281.88290405]
[125.50353241 296.82073975]
[126.86755371 311.75860596]
[130.43618774 317.48944092]
[130.49874878 323.28094482]
[127.93779755 327.40493774]
[128.62051392 342.38940430]
[129.30323792 357.37384033]
[129.98594666 372.35830688]
[140.81758118 384.19281006]
[138.17619324 400.01690674]
[124.08802795 407.69174194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[5 131]
[6 128]
[7 127]
[8 126]
[9 125]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[18 116]
[19 115]
[20 114]
[21 57]
[22 56]
[23 55]
[24 54]
[27 51]
[28 50]
[29 49]
[30 48]
[31 45]
[32 44]
[33 43]
[61 105]
[62 104]
[63 103]
[64 102]
[65 100]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[75 91]
[76 90]
[77 89]
[78 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
