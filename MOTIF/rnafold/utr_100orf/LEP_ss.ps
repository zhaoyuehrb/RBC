%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGGAAUCGCAGCGCCAGCGGUUGCAAGGCCCAAGAAGCCCAUCCUGGGAAGGAAAAUGCAUUGGGGAACCCUGUGCGGAUUCUUGUGGCUUUGGCCCUAUCUUUUCUAUGUCCAAGCUGUGCCCAUCCAAAAAGUCCAAGAUGACACCAAAACCC\
) } def
/len { sequence length } bind def

/coor [
[404.54360962 538.90655518]
[408.59213257 530.13983154]
[414.30993652 522.34863281]
[421.47055054 515.84686279]
[414.58108521 502.52261353]
[407.69161987 489.19836426]
[389.97473145 484.75097656]
[380.93176270 468.51504517]
[386.67071533 450.50494385]
[379.25698853 437.46511841]
[371.84323120 424.42532349]
[364.42950439 411.38552856]
[357.01574707 398.34573364]
[349.60202026 385.30590820]
[325.09771729 385.88897705]
[304.75784302 372.02038574]
[296.27661133 348.79568481]
[302.95001221 324.87753296]
[292.23849487 314.37689209]
[285.22213745 311.92678833]
[281.42098999 303.55938721]
[270.92037964 292.84786987]
[260.41973877 282.13635254]
[255.68630981 281.19769287]
[251.51110840 277.24142456]
[249.72515869 270.78399658]
[239.65867615 259.66348267]
[229.59220886 248.54296875]
[219.52572632 237.42243958]
[209.45924377 226.30191040]
[199.39277649 215.18139648]
[189.32629395 204.06086731]
[179.14976501 193.04096985]
[168.86418152 182.12278748]
[158.57858276 171.20460510]
[148.29299927 160.28642273]
[138.00741577 149.36824036]
[127.72182465 138.45005798]
[113.36284637 134.49165344]
[109.53180695 119.14129639]
[99.24621582 108.22311401]
[92.02980042 119.57097626]
[78.56290436 126.39775848]
[61.13471985 126.21464539]
[47.30523300 120.40557098]
[33.47574615 114.59650421]
[19.64625740 108.78743744]
[3.45378399 111.38278961]
[-6.67871952 98.48843384]
[-0.32780266 83.36898041]
[15.97325611 81.57802582]
[25.45532417 94.95795441]
[39.28481293 100.76702118]
[53.11429977 106.57608795]
[66.94378662 112.38515472]
[72.24708557 107.08185577]
[61.64066315 96.47507477]
[72.24761963 85.86882782]
[82.85369110 96.47525024]
[88.15699005 91.17195129]
[82.34792328 77.34246063]
[76.53885651 63.51297379]
[70.72978973 49.68348694]
[58.25185394 39.95663071]
[60.45647430 25.22608948]
[54.64740753 11.39660168]
[48.83834076 -2.43288660]
[37.12977982 -14.69445324]
[45.67090988 -29.33977509]
[62.10830688 -25.18666649]
[62.66782761 -8.24195385]
[68.47689819 5.58753347]
[74.28596497 19.41702080]
[86.34839630 28.15469742]
[84.55928040 43.87442017]
[90.36834717 57.70390701]
[96.17741394 71.53339386]
[101.98648071 85.36288452]
[110.16439819 97.93752289]
[120.44998932 108.85570526]
[135.54466248 113.59504700]
[138.64001465 128.16447449]
[148.92559814 139.08265686]
[159.21118164 150.00083923]
[169.49676514 160.91902161]
[179.78236389 171.83720398]
[190.06794739 182.75538635]
[198.27760315 186.88616943]
[200.44682312 193.99438477]
[210.51329041 205.11491394]
[220.57977295 216.23544312]
[230.64625549 227.35595703]
[240.71272278 238.47648621]
[250.77920532 249.59701538]
[260.84567261 260.71752930]
[271.13125610 271.63571167]
[281.63189697 282.34722900]
[292.13253784 293.05877686]
[302.73913574 303.66537476]
[313.45065308 314.16598511]
[319.41064453 310.75720215]
[325.85339355 308.40295410]
[332.59414673 307.16845703]
[339.43994141 307.08676147]
[346.19528198 308.15798950]
[352.66754150 310.34939575]
[358.67260742 313.59631348]
[364.03997803 317.80401611]
[368.61776733 322.85061646]
[372.27682495 328.59051514]
[374.91452026 334.85858154]
[376.45755005 341.47491455]
[376.86398315 348.25006104]
[376.12445068 354.99038696]
[374.26220703 361.50360107]
[371.33261108 367.60433960]
[367.42132568 373.11926270]
[362.64181519 377.89218140]
[370.05557251 390.93197632]
[377.46929932 403.97177124]
[384.88302612 417.01159668]
[392.29678345 430.05139160]
[399.71051025 443.09118652]
[411.63211060 443.96395874]
[421.53683472 450.43878174]
[427.00698853 460.79608154]
[426.77514648 472.38662720]
[421.01586914 482.30889893]
[427.90533447 495.63314819]
[434.79476929 508.95736694]
[455.84915161 506.92617798]
[475.71212769 514.07257080]
[490.58602905 528.99139404]
[497.64379883 548.79534912]
[495.56600952 569.67346191]
[484.78756714 587.62469482]
[493.93869019 599.50982666]
[503.08981323 611.39501953]
[518.79266357 613.18310547]
[528.56628418 625.60290527]
[526.61224365 641.28594971]
[514.08984375 650.92773438]
[498.42834473 648.80798340]
[488.91946411 636.18432617]
[491.20468140 620.54614258]
[482.05355835 608.66101074]
[472.90240479 596.77581787]
[464.10317993 600.51989746]
[454.72692871 602.43829346]
[445.14865112 602.45111084]
[435.75201416 600.55474854]
[426.91400146 596.82214355]
[418.98983765 591.39990234]
[412.29873657 584.50268555]
[407.11090088 576.40454102]
[403.63677979 567.42828369]
[402.01843262 557.93225098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 130]
[5 129]
[6 128]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[18 100]
[19 99]
[21 98]
[22 97]
[23 96]
[26 95]
[27 94]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
[33 87]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[40 80]
[41 79]
[44 55]
[45 54]
[46 53]
[47 52]
[60 78]
[61 77]
[62 76]
[63 75]
[65 73]
[66 72]
[67 71]
[136 147]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
