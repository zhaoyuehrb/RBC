%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGCAAAUUGCACAUCCUCAUGGAGUCUAGGAGAAUCCUGCAACAGCCCUGGGUCAGAGCCACCACAGUCCAUGCCAUCCCCAGCAACUCAACUUG\
) } def
/len { sequence length } bind def

/coor [
[204.67025757 152.75813293]
[214.02638245 141.03367615]
[226.90635681 133.35333252]
[212.05305481 131.26060486]
[197.19976807 129.16786194]
[182.34646606 127.07514191]
[167.49316406 124.98240662]
[165.09783936 126.74500275]
[161.79956055 127.57585907]
[157.98510742 127.10166931]
[154.17771912 125.11022949]
[150.97160339 121.59577942]
[136.49282837 117.67594910]
[122.01405334 113.75611877]
[107.53527832 109.83629608]
[80.28297424 141.58152771]
[65.42967987 143.67425537]
[57.19921494 148.03912354]
[50.08268356 145.59362793]
[35.17148590 147.22341919]
[20.26028824 148.85319519]
[7.36024570 158.97845459]
[-7.75564003 152.61904907]
[-9.53744316 136.31700134]
[3.84780383 126.84243774]
[18.63050652 133.94200134]
[33.54170227 132.31222534]
[48.45289993 130.68243408]
[63.33694839 128.82095337]
[78.19024658 126.72822571]
[80.59644318 119.62468719]
[85.40882874 105.41761780]
[87.81501770 98.31407928]
[77.29121399 87.62532043]
[66.76741791 76.93656158]
[56.24361420 66.24780273]
[40.82255936 59.20312119]
[43.32295990 42.43456650]
[60.12836838 40.19525146]
[66.93237305 55.72399521]
[77.45617676 66.41275787]
[87.97998047 77.10151672]
[98.50377655 87.79027557]
[111.45510864 95.35752106]
[125.93388367 99.27734375]
[140.41265869 103.19717407]
[154.89143372 107.11700439]
[169.58589172 110.12911224]
[184.43919373 112.22183990]
[199.29249573 114.31456757]
[214.14579773 116.40730286]
[228.99908447 118.50003052]
[243.93382263 117.10234070]
[258.14089966 112.28995514]
[272.34796143 107.47756958]
[286.55505371 102.66518402]
[300.76211548 97.85279846]
[302.81384277 83.91912079]
[310.66372681 72.30589294]
[322.71334839 65.27493286]
[336.55331421 64.16535950]
[349.44503784 69.13890076]
[358.86264038 79.15928650]
[373.21249390 74.79106140]
[375.04483032 59.67278290]
[382.87347412 46.61015701]
[395.34207153 37.86637115]
[410.29037476 34.95633316]
[425.12847900 38.38422775]
[437.28561401 47.55615234]
[444.65545654 60.88301468]
[445.96115112 76.05585480]
[440.97650146 90.44588470]
[430.56509399 101.55994415]
[416.53076172 107.47246552]
[401.30508423 107.15904999]
[387.52593994 100.67401886]
[377.58071899 89.14093018]
[363.23086548 93.50914764]
[360.00814819 109.25987244]
[349.25817871 121.33949280]
[333.81088257 126.42731476]
[317.80395508 123.06202698]
[305.57452393 112.05986786]
[291.36743164 116.87225342]
[277.16036987 121.68463898]
[262.95327759 126.49703217]
[248.74621582 131.30941772]
[262.83105469 136.46856689]
[274.19924927 146.25451660]
[281.39624023 159.41519165]
[283.50122070 174.26675415]
[280.24490356 188.90904236]
[272.04388428 201.46862793]
[259.94744873 210.33860779]
[245.50329590 214.38409424]
[230.55943298 213.08750916]
[217.02787781 206.61473083]
[206.63990784 195.79391479]
[200.72460938 182.00953674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 30]
[17 29]
[19 28]
[20 27]
[21 26]
[33 43]
[34 42]
[35 41]
[36 40]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[63 79]
[64 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
