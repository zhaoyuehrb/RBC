%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCCCUCGUGCUGCCUAGGAGACAAGACGCGAGGCCGGCAGCGCCCACCCGGUCGCAAUGGAGCUUCCCCUAGGGCGGUGCGAUGAUUCCCGCACCUGGGACGAUGACUCGGACCCAGAGUCAGAGACAGACCCAGACGCGCAGGCCAAGGCCUACG\
) } def
/len { sequence length } bind def

/coor [
[82.83055878 164.75363159]
[96.99074554 159.80497742]
[110.57886505 166.15428162]
[106.81450653 151.63430786]
[103.05014801 137.11433411]
[99.28578949 122.59436035]
[84.96665192 118.12644196]
[73.61300659 127.92922974]
[62.25935364 137.73200989]
[50.90570068 147.53480530]
[39.55205154 157.33758545]
[28.19840050 167.14038086]
[16.84474945 176.94316101]
[5.58727837 186.85624695]
[-5.57294130 196.87869263]
[-1.26236069 211.52047729]
[-3.73996425 226.58116150]
[-12.51382160 239.07044983]
[-25.84187698 246.50857544]
[-41.07783508 247.41868591]
[-55.19658661 241.62010193]
[-65.39484406 230.26411438]
[-69.64772797 215.60548401]
[-67.11083984 200.55467224]
[-58.28786469 188.10003662]
[-44.93062210 180.71444702]
[-29.69119835 179.86433411]
[-15.59539032 185.71847534]
[-4.43517113 175.69602966]
[-1.54517877 168.85243225]
[7.04196358 165.58950806]
[18.39561462 155.78672791]
[29.74926567 145.98393250]
[41.10291672 136.18115234]
[52.45656586 126.37836456]
[63.81021881 116.57557678]
[75.16386414 106.77278900]
[63.28464508 115.93161774]
[48.28467560 115.90242004]
[36.44119644 106.69741821]
[32.71051788 92.16875458]
[38.65386581 78.39644623]
[51.78404617 71.14396667]
[66.60629272 73.44637299]
[76.91825867 84.34129333]
[67.22670746 72.89254761]
[57.53515625 61.44379425]
[47.84360504 49.99504471]
[38.15205765 38.54629517]
[23.08282280 41.16649246]
[8.81952095 35.92673874]
[-0.84179389 24.32823181]
[-3.38338733 9.54999447]
[1.77863383 -4.42208910]
[-7.91291571 -15.87083912]
[-23.42133141 -17.32918930]
[-33.08684921 -29.07790947]
[-31.60096169 -43.85382843]
[-41.29251099 -55.30257797]
[-57.06126404 -56.36179352]
[-67.39942932 -68.31578064]
[-66.17356110 -84.07245636]
[-54.11093521 -94.28366089]
[-38.36810303 -92.89126587]
[-28.28500366 -80.72135925]
[-29.84376144 -64.99412537]
[-20.15221214 -53.54537582]
[-5.33374834 -52.57135391]
[4.65795279 -41.09875107]
[3.53583407 -25.56238747]
[13.22738361 -14.11363888]
[27.85997963 -16.89801407]
[42.01578903 -11.95139694]
[51.86003113 -0.50774145]
[54.67299271 14.42490959]
[49.60080719 28.85474586]
[59.29235458 40.30349731]
[68.98390961 51.75224686]
[78.67545319 63.20099640]
[88.36700439 74.64974213]
[103.13629150 72.02900696]
[108.29714203 57.94477844]
[113.45799255 43.86054230]
[118.61884308 29.77630997]
[123.77969360 15.69207764]
[115.01908112 2.88460326]
[115.49330139 -12.62522411]
[125.01999664 -24.87355995]
[139.93595886 -29.15066910]
[154.50569153 -23.81191444]
[163.12684631 -10.91015816]
[162.48440552 4.59361219]
[152.82540894 16.73788071]
[137.86392212 20.85292816]
[132.70307922 34.93716049]
[127.54222107 49.02139282]
[122.38137054 63.10562897]
[117.22052002 77.18985748]
[126.22565460 89.18601227]
[141.19068909 88.16237640]
[156.15571594 87.13873291]
[171.12074280 86.11509705]
[186.08578491 85.09146118]
[193.72607422 67.51603699]
[209.13215637 56.25452805]
[228.03610229 54.32524872]
[245.25198364 62.17514420]
[256.09844971 77.57968140]
[270.93811035 75.39229584]
[285.77777100 73.20491791]
[300.61743164 71.01753235]
[315.45706177 68.83014679]
[330.29672241 66.64276123]
[338.33944702 53.23198700]
[353.13757324 48.17738724]
[367.70391846 53.86558533]
[375.16070557 67.61079407]
[371.98703003 82.92293549]
[359.68142700 92.57209778]
[344.05422974 92.00223541]
[332.48410034 81.48241425]
[317.64447021 83.66979980]
[302.80480957 85.85718536]
[287.96514893 88.04457092]
[273.12548828 90.23195648]
[258.28582764 92.41934204]
[255.93673706 103.32765198]
[250.34390259 113.01406097]
[242.03155518 120.53794861]
[231.78884888 125.16294098]
[220.59501648 126.42891693]
[209.52575684 124.19773865]
[199.64982605 118.66814423]
[191.92587280 110.35813904]
[187.10942078 100.05649567]
[172.14437866 101.08013153]
[157.17935181 102.10376740]
[142.21432495 103.12740326]
[127.24929047 104.15103912]
[123.95407867 110.51097107]
[119.31270599 115.48446655]
[113.80576324 118.83000183]
[117.57012177 133.34997559]
[121.33448029 147.86994934]
[125.09883881 162.38992310]
[129.70625305 176.66479492]
[135.14093018 190.64564514]
[140.57559204 204.62649536]
[146.01026917 218.60734558]
[159.13009644 228.44616699]
[156.90097046 244.69311523]
[141.61602783 250.63470459]
[128.99911499 240.15876770]
[132.02941895 224.04202271]
[126.59474182 210.06117249]
[121.16007233 196.08032227]
[115.72539520 182.09947205]
[108.41185760 195.19572449]
[94.03015137 199.45794678]
[80.76182556 192.46141052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 145]
[4 144]
[5 143]
[6 142]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 29]
[15 28]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[54 71]
[55 70]
[58 67]
[59 66]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[99 139]
[100 138]
[101 137]
[102 136]
[103 135]
[108 126]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
[146 157]
[147 156]
[148 155]
[149 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
