%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGCUUCUUUUUCCUGCACAAGGGAUUUCCGGGUCAGGAUGAACAAACACUUCUUGUUCCUCUUCCUCCUUUACUGCCUCAUUGUGGCAGUGACAUCACUUCAGUGCAUAACAUGCCACCUUCGCACACGGACAGACC\
) } def
/len { sequence length } bind def

/coor [
[22.91701126 209.46078491]
[14.20796871 221.67358398]
[5.49892569 233.88638306]
[-3.21011782 246.09918213]
[-4.15038776 266.18344116]
[-21.95931816 273.59576416]
[-30.11962509 286.18182373]
[-22.56221581 299.49139404]
[-22.06730843 314.78887939]
[-28.74863243 328.55908203]
[-41.07086563 337.63769531]
[-56.20244598 339.93850708]
[-70.66625214 334.93283081]
[-81.13861084 323.77093506]
[-85.21304321 309.01770020]
[-81.95326996 294.06335449]
[-72.10837555 282.34426880]
[-57.94063950 276.55343628]
[-42.70570374 278.02151489]
[-34.54539871 265.43545532]
[-37.58313370 255.57814026]
[-34.59017181 245.47689819]
[-26.33443642 238.58253479]
[-15.42292118 237.39015198]
[-6.71387768 225.17733765]
[1.99516559 212.96453857]
[10.70420933 200.75173950]
[3.21211028 182.77996826]
[8.00677872 163.76196289]
[23.34439850 151.31095886]
[43.22595596 150.51617432]
[50.82155228 137.58145142]
[58.41714478 124.64673615]
[66.01274109 111.71202087]
[64.19202423 96.82292938]
[53.70339584 86.09964752]
[36.24849701 86.24835968]
[24.29312706 73.99590302]
[24.84820175 57.22298813]
[14.12492085 46.73436356]
[3.40164089 36.24573898]
[-7.32163906 25.75711250]
[-22.59742355 21.63873863]
[-26.28572083 7.20801640]
[-37.00899887 -3.28060913]
[-47.73228073 -13.76923466]
[-58.45555878 -24.25786018]
[-69.17884064 -34.74648666]
[-79.90212250 -45.23511124]
[-95.44536591 -43.52001572]
[-108.42586517 -52.24013901]
[-112.71463013 -67.27810669]
[-106.28663635 -81.53345490]
[-92.17697906 -88.27523804]
[-77.04781342 -84.32019043]
[-68.04266357 -71.53577423]
[-69.41349792 -55.95839310]
[-58.69021606 -45.46976471]
[-47.96693420 -34.98114014]
[-37.24365616 -24.49251556]
[-26.52037430 -14.00388908]
[-15.79709435 -3.51526380]
[-1.28831148 -0.14710696]
[3.16698623 15.03383160]
[13.89026642 25.52245712]
[24.61354637 36.01108170]
[35.33682632 46.49970627]
[48.12154770 44.55977249]
[59.85319138 50.44739914]
[66.12191010 62.20146179]
[64.42667389 75.61102295]
[74.91529846 86.33430481]
[91.31935883 69.46633148]
[117.29093170 69.65948486]
[125.99997711 57.44667816]
[134.70901489 45.23387527]
[143.41806030 33.02107239]
[152.12710571 20.80826950]
[160.83615112 8.59546566]
[169.54519653 -3.61733747]
[178.25424194 -15.83014107]
[174.16213989 -30.92281342]
[180.77566528 -45.09303284]
[194.97212219 -51.65006256]
[210.04837036 -47.49786377]
[218.88587952 -34.59698868]
[217.31182861 -19.03882599]
[206.06944275 -8.16946983]
[190.46704102 -7.12109756]
[181.75799561 5.09170580]
[173.04895020 17.30450821]
[164.33990479 29.51731300]
[155.63085938 41.73011398]
[146.92182922 53.94292068]
[138.21278381 66.15572357]
[129.50373840 78.36852264]
[131.06848145 85.70348358]
[144.56651306 79.16107178]
[154.45552063 67.88243866]
[169.35855103 66.17957306]
[181.53691101 74.93671417]
[184.66674805 89.60655212]
[177.12283325 102.57147980]
[162.82249451 107.09920502]
[149.19078064 100.83792114]
[134.19798279 100.37339020]
[135.76272583 107.70834351]
[148.69744873 115.30393982]
[161.63215637 122.89953613]
[174.56687927 130.49513245]
[186.23455811 120.81829834]
[200.50930786 115.71855164]
[215.66737366 115.81171417]
[229.87835693 121.08654022]
[241.42620850 130.90605164]
[248.91647339 144.08451843]
[251.44465637 159.03054810]
[248.70547485 173.93936157]
[241.02969360 187.01063538]
[229.34419250 196.66595459]
[215.06007385 201.73937988]
[199.90220642 201.61828613]
[185.70095825 196.31727600]
[174.17123413 186.47650146]
[166.70526123 173.28425598]
[164.20463562 158.33358765]
[166.97128296 143.42985535]
[154.03657532 135.83425903]
[141.10185242 128.23866272]
[128.16712952 120.64306641]
[101.74087524 131.69586182]
[78.94745636 119.30760956]
[71.35186768 132.24232483]
[63.75627136 145.17704773]
[56.16067505 158.11177063]
[62.41648865 166.89768982]
[65.34165955 177.23901367]
[64.62012482 187.92327881]
[60.36180496 197.70684814]
[53.08679199 205.45970154]
[43.66193771 210.29580688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[6 20]
[7 19]
[31 135]
[32 134]
[33 133]
[34 132]
[35 72]
[36 71]
[39 67]
[40 66]
[41 65]
[42 64]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[107 130]
[108 129]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
