%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGCAGGAGGAGCAGCGGCAGGUGCUGCAGGCAAGGGCCGCCAUGGCUGGGGGUGUGUGGGGCCGGAGCCGGGCCCGGGAGGCUCCCGUGGGGGCUCUAACCCUGACAGCACUGACUGAAGGAAUCCGGGCCAGGCAGGGGC\
) } def
/len { sequence length } bind def

/coor [
[136.78355408 511.37423706]
[136.45858765 496.37774658]
[136.13362122 481.38125610]
[135.80865479 466.38479614]
[135.32125854 451.39270020]
[134.67146301 436.40679932]
[124.45292664 422.17864990]
[132.99789429 405.90588379]
[132.02359009 390.93756104]
[120.10519409 375.76632690]
[129.10673523 357.78387451]
[127.48495483 342.87182617]
[125.86317444 327.95974731]
[109.91391754 321.63858032]
[99.27335358 308.06802368]
[96.91515350 290.89590454]
[103.57122803 274.79571533]
[117.50788879 264.19467163]
[115.24165344 249.36685181]
[112.97541809 234.53903198]
[100.85832977 225.95347595]
[98.34881592 210.94825745]
[107.43629456 198.29695129]
[105.17005920 183.46913147]
[102.90382385 168.64131165]
[100.63758850 153.81349182]
[98.37135315 138.98567200]
[96.10511780 124.15785980]
[93.83888245 109.33003998]
[91.41215515 94.52764130]
[88.82521057 79.75240326]
[86.23827362 64.97715759]
[83.65132904 50.20191956]
[69.16980743 40.45178986]
[66.24124908 23.58296776]
[76.19002533 10.06495285]
[73.28359222 -4.65077591]
[70.37715912 -19.36650467]
[67.47073364 -34.08223343]
[64.56430054 -48.79796219]
[61.65787125 -63.51369095]
[51.39325333 -75.55313110]
[56.51785660 -89.53839874]
[53.61142731 -104.25412750]
[50.70499802 -118.96985626]
[47.79856873 -133.68559265]
[44.69890594 -136.96435547]
[43.02045059 -140.69329834]
[42.72632599 -144.35488892]
[43.61043930 -147.49987793]
[45.33599091 -149.79804993]
[43.71420670 -164.71011353]
[42.09241867 -179.62219238]
[40.47063446 -194.53425598]
[38.84885025 -209.44631958]
[37.22706604 -224.35839844]
[22.45897293 -232.53172302]
[15.51630116 -247.73475647]
[18.94235229 -263.92373657]
[31.20077133 -274.79086304]
[29.25630379 -289.66430664]
[27.31183815 -304.53775024]
[25.36737061 -319.41116333]
[15.90642452 -332.09191895]
[21.92858887 -345.71478271]
[19.98412323 -360.58822632]
[18.03965569 -375.46166992]
[7.64409733 -388.14489746]
[13.68270874 -403.39175415]
[29.94348526 -405.51760864]
[39.69873428 -392.33554077]
[32.91308975 -377.40612793]
[34.85755539 -362.53268433]
[36.80202484 -347.65924072]
[46.12388992 -336.04235840]
[40.24080658 -321.35565186]
[42.18527222 -306.48220825]
[44.12973785 -291.60876465]
[46.07420349 -276.73535156]
[58.37700653 -271.44610596]
[66.50995636 -260.67080688]
[68.25164795 -247.17414856]
[63.03817749 -234.48645020]
[52.13913345 -225.98017883]
[53.76091766 -211.06811523]
[55.38270569 -196.15603638]
[57.00448990 -181.24397278]
[58.62627411 -166.33190918]
[60.24806213 -151.41983032]
[62.51429367 -136.59201050]
[65.42072296 -121.87628937]
[68.32715607 -107.16056061]
[71.23358917 -92.44483185]
[81.29031372 -81.45795441]
[76.37359619 -66.42012024]
[79.28002930 -51.70439148]
[82.18646240 -36.98866272]
[85.09288788 -22.27293396]
[87.99932098 -7.55720615]
[90.90574646 7.15852213]
[102.54225922 12.79139137]
[108.88415527 24.28047752]
[107.40594482 37.51644897]
[98.42657471 47.61497879]
[101.01351166 62.39022064]
[103.60045624 77.16545868]
[106.18739319 91.94070435]
[110.59880066 98.76396942]
[108.66670227 107.06380463]
[110.93293762 121.89162445]
[113.19917297 136.71943665]
[115.46540833 151.54725647]
[117.73164368 166.37507629]
[119.99787903 181.20289612]
[122.26411438 196.03071594]
[134.71562195 205.39006042]
[136.80268860 220.45986938]
[127.80323029 232.27279663]
[130.06947327 247.10061646]
[132.33570862 261.92843628]
[144.83460999 265.48815918]
[155.00578308 273.50216675]
[161.34474182 284.73971558]
[162.93113708 297.49670410]
[159.56224060 309.85403442]
[151.77810669 319.96646118]
[140.77523804 326.33795166]
[142.39703369 341.25003052]
[144.01881409 356.16210938]
[152.94760132 362.53561401]
[156.77653503 372.58023071]
[154.45295715 382.84982300]
[146.99192810 389.96325684]
[147.96621704 404.93157959]
[157.15443420 414.05239868]
[157.61909485 426.58850098]
[149.65739441 435.75701904]
[150.30717468 450.74291992]
[153.82719421 459.25402832]
[150.80513000 466.05981445]
[151.13009644 481.05630493]
[151.45506287 496.05279541]
[151.78002930 511.04925537]
[154.38757324 530.25476074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 140]
[5 138]
[6 137]
[8 134]
[9 133]
[11 129]
[12 128]
[13 127]
[18 120]
[19 119]
[20 118]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[30 107]
[31 106]
[32 105]
[33 104]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[41 95]
[43 93]
[44 92]
[45 91]
[46 90]
[51 89]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[60 79]
[61 78]
[62 77]
[63 76]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
