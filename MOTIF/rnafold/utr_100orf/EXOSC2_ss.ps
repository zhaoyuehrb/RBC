%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUGCGCCUGCGCAACUCAUUGGCGCCAAGAUGGCGAUGGAGAUGAGGCUUCCAGUGGCUCGCAAGCCUCUUAGCGAGAGACUGGGCCGCGACACUAAGAAACAUCUAGUGGUGCCGGGGGAUACAAUCA\
) } def
/len { sequence length } bind def

/coor [
[44.72230530 426.45028687]
[37.58309174 439.64239502]
[30.44388199 452.83450317]
[30.68047905 468.65393066]
[17.81821442 476.16470337]
[10.67900372 489.35681152]
[3.53979254 502.54891968]
[-3.59941840 515.74102783]
[-2.60691690 532.11010742]
[-16.43407249 540.92724609]
[-30.85669136 533.12207031]
[-31.03802109 516.72393799]
[-16.79152489 508.60180664]
[-9.65231323 495.40969849]
[-2.51310277 482.21759033]
[4.62610817 469.02548218]
[3.87886739 454.14962769]
[17.25177574 445.69528198]
[24.39098740 432.50317383]
[31.53019714 419.31106567]
[30.95149994 410.03924561]
[37.86631393 402.18301392]
[41.03118515 387.52069092]
[44.19605255 372.85836792]
[47.36092377 358.19607544]
[50.52579117 343.53375244]
[53.69066238 328.87142944]
[56.85552979 314.20910645]
[60.02040100 299.54678345]
[63.18526840 284.88446045]
[66.00295258 270.15148926]
[68.47187042 255.35606384]
[70.94078827 240.56065369]
[73.40970612 225.76522827]
[75.87862396 210.96980286]
[63.18265915 201.04481506]
[57.16418076 185.99505615]
[59.54287720 169.86740112]
[69.76667023 157.04974365]
[85.13622284 151.07711792]
[87.25500488 136.22752380]
[89.37378693 121.37791443]
[78.86756134 111.10638428]
[76.36611938 96.62785339]
[82.81697845 83.42666626]
[95.77661133 76.50330353]
[97.89539337 61.65370178]
[92.18496704 46.89898300]
[101.64244843 35.39223099]
[103.76122284 20.54262352]
[105.88000488 5.69301939]
[103.72476196 -0.72092938]
[105.00865173 -6.38088894]
[108.46555328 -9.80130005]
[111.28322601 -24.53427887]
[114.10090637 -39.26725769]
[116.91858673 -54.00023651]
[119.73626709 -68.73321533]
[111.12696075 -81.71464539]
[114.19436646 -96.61584473]
[126.62322998 -104.74350739]
[129.44091797 -119.47648621]
[132.25859070 -134.20945740]
[135.07627869 -148.94244385]
[137.89395142 -163.67543030]
[140.53742981 -178.44065857]
[143.00636292 -193.23606873]
[145.47528076 -208.03149414]
[142.11843872 -224.64979553]
[157.15802002 -232.47584534]
[168.84159851 -220.19049072]
[160.27069092 -205.56257629]
[157.80177307 -190.76715088]
[155.33285522 -175.97174072]
[157.35412598 -168.78790283]
[152.62693787 -160.85774231]
[149.80924988 -146.12477112]
[146.99157715 -131.39178467]
[144.17388916 -116.65880585]
[141.35621643 -101.92582703]
[149.90882874 -89.78546143]
[147.26116943 -74.80398560]
[134.46925354 -65.91553497]
[131.65156555 -51.18255997]
[128.83389282 -36.44957733]
[126.01621246 -21.71660042]
[123.19853210 -6.98362017]
[120.72960663 7.81179905]
[118.61083221 22.66140366]
[116.49205017 37.51100922]
[122.35401917 51.20358276]
[112.74499512 63.77248001]
[110.62621307 78.62208557]
[121.13243866 88.89361572]
[123.63388062 103.37214661]
[117.18302155 116.57333374]
[104.22338867 123.49669647]
[102.10460663 138.34629822]
[99.98583221 153.19590759]
[111.46112823 161.28486633]
[118.28096771 173.48095703]
[119.15573120 187.36044312]
[113.97081757 200.19322205]
[103.79791260 209.47996521]
[90.67404175 213.43873596]
[88.20512390 228.23414612]
[85.73620605 243.02957153]
[83.26728821 257.82498169]
[80.79837036 272.62042236]
[82.80152130 279.08346558]
[81.38430786 284.71151733]
[77.84758759 288.04934692]
[74.68271637 302.71166992]
[71.51785278 317.37396240]
[68.35298157 332.03628540]
[65.18811035 346.69860840]
[62.02324295 361.36093140]
[58.85837173 376.02325439]
[55.69350433 390.68557739]
[52.52863312 405.34790039]
[63.92835617 395.59872437]
[78.24728394 391.13012695]
[93.16853333 392.66516113]
[106.27775574 399.95547485]
[115.45380402 411.82138062]
[119.21192932 426.34298706]
[116.94406128 441.17053223]
[109.01714325 453.90490723]
[96.71379852 462.48556519]
[82.02478790 465.52410889]
[67.32686615 462.52893066]
[54.99825668 453.98461914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[5 16]
[6 15]
[7 14]
[8 13]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[30 112]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[40 99]
[41 98]
[42 97]
[46 93]
[47 92]
[49 90]
[50 89]
[51 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
