%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAGCGGCGCCGGGGAGCUGGGCCGGGCUGAGAGGCUGCCAGUGCUCUUUCUCUUCCUGCUGUCUUUGUUCUGCCCGGCGCUCUGUGAGCAGAUCC\
) } def
/len { sequence length } bind def

/coor [
[72.33897400 348.86636353]
[62.05485153 337.94677734]
[56.58467102 323.97979736]
[56.71760941 308.98037720]
[62.43449402 295.11251831]
[72.91053772 284.37695312]
[86.63436890 278.32250977]
[101.62603760 277.82263184]
[115.72269440 282.94946289]
[126.89199829 292.96517944]
[124.56852722 278.14620972]
[122.24504852 263.32727051]
[119.92157745 248.50830078]
[117.59810638 233.68934631]
[115.27463531 218.87039185]
[112.95116425 204.05143738]
[110.62768555 189.23248291]
[108.30421448 174.41351318]
[105.52099609 159.67399597]
[102.28073120 145.02815247]
[99.04046631 130.38230896]
[95.80019379 115.73646545]
[84.15393829 103.76522827]
[89.17038727 87.83471680]
[85.47620392 73.29673004]
[81.78202057 58.75874710]
[78.08782959 44.22076035]
[73.94330597 29.80469704]
[69.35244751 15.52449989]
[64.76158905 1.24430299]
[60.17073059 -13.03589344]
[46.39160156 -20.30041695]
[41.93924332 -34.84796524]
[48.94977188 -47.93949127]
[44.35891342 -62.21968842]
[39.76805496 -76.49988556]
[35.17719650 -90.78008270]
[30.58633614 -105.06027985]
[25.99547768 -119.34047699]
[12.21634674 -126.60499573]
[7.76399040 -141.15254211]
[14.77451897 -154.24407959]
[10.18366051 -168.52427673]
[-2.32577872 -179.12832642]
[0.86871254 -195.21333313]
[16.48091507 -200.23240662]
[28.45033455 -189.02236938]
[24.46385765 -173.11512756]
[29.05471611 -158.83493042]
[42.38084793 -152.28132629]
[47.24005890 -137.86457825]
[40.27567291 -123.93133545]
[44.86653519 -109.65113831]
[49.45739365 -95.37094116]
[54.04825211 -81.09074402]
[58.63911057 -66.81054688]
[63.22996902 -52.53034973]
[76.55609894 -45.97674179]
[81.41531372 -31.55998993]
[74.45092773 -17.62675285]
[79.04178619 -3.34655571]
[83.63264465 10.93364048]
[88.22350311 25.21383667]
[92.14417267 28.21702194]
[94.11250305 33.78796387]
[92.62581635 40.52657700]
[96.31999969 55.06455994]
[100.01418304 69.60254669]
[103.70836639 84.14053345]
[113.41889954 90.76918793]
[116.13690186 102.20797729]
[110.44603729 112.49620056]
[113.68630981 127.14204407]
[116.92657471 141.78788757]
[120.16683960 156.43373108]
[124.52584076 161.78332520]
[125.27385712 167.64422607]
[123.12316895 172.09004211]
[125.44664764 186.90899658]
[127.77011871 201.72796631]
[130.09359741 216.54692078]
[132.41706848 231.36587524]
[134.74053955 246.18482971]
[137.06401062 261.00378418]
[139.38748169 275.82275391]
[141.71095276 290.64169312]
[147.18072510 304.60885620]
[155.53851318 317.06466675]
[163.89630127 329.52050781]
[178.84867859 336.25537109]
[180.22285461 352.59683228]
[166.60519409 361.73422241]
[152.00437927 354.26773071]
[151.44047546 337.87829590]
[143.08268738 325.42245483]
[134.72491455 312.96664429]
[133.32817078 327.90148926]
[126.46273804 341.23809814]
[115.11909485 351.05245972]
[100.93378448 355.92864990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 75]
[20 74]
[21 73]
[22 72]
[24 69]
[25 68]
[26 67]
[27 66]
[28 63]
[29 62]
[30 61]
[31 60]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[42 49]
[43 48]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
