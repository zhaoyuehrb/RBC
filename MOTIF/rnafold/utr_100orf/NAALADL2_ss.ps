%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:57:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUAGAAAGUCAGAAGGUCACAAAGCUUGCAGGGUAAGUGACACAACUUGAAACUGCUUGGCCCUCUUUAAAAAGAAAUAAUAAAAUGGGAGAGAAUGAAGCAAGUUUACCUAACACGUCUUUGCAAGGUAAAAAGAUGGCCUAUCAGAAGGUCCAUGCAGAUCAAAGAGCUCCAGGACACUCAC\
) } def
/len { sequence length } bind def

/coor [
[95.87662506 196.52966309]
[82.24211884 202.78269958]
[67.32938385 204.39834595]
[52.67205429 201.21047974]
[39.77748871 193.54690552]
[29.97178078 182.19578552]
[24.26335335 168.32444763]
[23.23926353 153.35945129]
[27.00483131 138.83978271]
[35.17280197 126.25868225]
[46.90317917 116.90998077]
[60.98959732 111.75509644]
[75.98340607 111.32418060]
[90.34262848 115.66153717]
[102.59009552 124.32065582]
[96.50431824 110.61068726]
[90.30419922 96.95204163]
[83.99018097 83.34568024]
[77.67615509 69.73931122]
[71.36213684 56.13294983]
[65.04811096 42.52658844]
[58.73409271 28.92022324]
[40.11026001 29.32456017]
[23.22338295 21.58156586]
[11.44116974 7.28418636]
[7.09199333 -10.67244339]
[11.00486565 -28.67718506]
[22.35183907 -43.12910461]
[15.14311409 -56.28335571]
[7.93438721 -69.43760681]
[0.72566104 -82.59185028]
[-6.48306513 -95.74610138]
[-13.69179153 -108.90035248]
[-20.90051842 -122.05459595]
[-28.10924339 -135.20884705]
[-35.31797028 -148.36309814]
[-48.60712051 -150.62896729]
[-58.02289963 -160.00270081]
[-60.28093338 -172.89799500]
[-54.77658081 -184.56115723]
[-61.76449585 -197.83403015]
[-68.75241089 -211.10690308]
[-80.71714020 -208.83689880]
[-92.84703064 -209.74365234]
[-104.31405640 -213.75775146]
[-114.33738708 -220.59794617]
[-122.23654175 -229.79081726]
[-127.47760773 -240.70352173]
[-129.70932007 -252.58738708]
[-128.78656006 -264.62927246]
[-124.77983856 -276.00714111]
[-117.96988678 -285.94628906]
[-108.82805634 -293.77200317]
[-114.91384125 -307.48196411]
[-120.99961853 -321.19192505]
[-127.08539581 -334.90191650]
[-133.17117310 -348.61187744]
[-139.37129211 -362.27050781]
[-145.68531799 -375.87689209]
[-151.99934387 -389.48324585]
[-158.31335449 -403.08959961]
[-173.53851318 -404.55322266]
[-185.90521240 -413.38281250]
[-192.15042114 -427.12557983]
[-190.68806458 -442.04928589]
[-182.01055908 -454.15576172]
[-188.32458496 -467.76211548]
[-194.63859558 -481.36846924]
[-200.95262146 -494.97485352]
[-207.26664734 -508.58120728]
[-213.58065796 -522.18756104]
[-228.55636597 -520.13330078]
[-243.47195435 -522.58612061]
[-257.00119019 -529.32788086]
[-267.94100952 -539.75915527]
[-275.31869507 -552.95239258]
[-278.47821045 -567.73443604]
[-277.13864136 -582.79089355]
[-271.41903687 -596.78295898]
[-261.82803345 -608.46643066]
[-249.21844482 -616.80249023]
[-234.71150208 -621.04986572]
[-219.59715271 -620.83087158]
[-205.21936035 -616.16497803]
[-192.85658264 -607.46710205]
[-183.60812378 -595.51062012]
[-178.29632568 -581.35870361]
[-177.39352417 -566.26977539]
[-180.97999573 -551.58544922]
[-188.73683167 -538.61151123]
[-199.97430420 -528.50158691]
[-193.66027832 -514.89520264]
[-187.34625244 -501.28887939]
[-181.03224182 -487.68249512]
[-174.71821594 -474.07614136]
[-168.40419006 -460.46978760]
[-153.55662537 -459.28012085]
[-141.21595764 -450.76165771]
[-134.75334167 -437.11978149]
[-135.99490356 -421.97528076]
[-144.70700073 -409.40362549]
[-138.39297485 -395.79727173]
[-132.07894897 -382.19091797]
[-125.76493073 -368.58453369]
[-120.08614349 -363.83111572]
[-119.46120453 -354.69766235]
[-113.37542725 -340.98770142]
[-107.28964996 -327.27770996]
[-101.20386505 -313.56774902]
[-95.11808777 -299.85778809]
[-77.17761993 -300.97854614]
[-60.14239502 -295.13595581]
[-46.61547089 -283.19537354]
[-38.67428589 -266.95605469]
[-37.55164337 -248.88003540]
[-43.44440079 -231.71887207]
[-55.47954178 -218.09480286]
[-48.49162674 -204.82194519]
[-41.50371170 -191.54907227]
[-25.24989891 -187.26528931]
[-16.95158386 -172.26075745]
[-22.16372108 -155.57182312]
[-14.95499516 -142.41757202]
[-7.74626923 -129.26332092]
[-0.53754270 -116.10907745]
[6.67118359 -102.95482635]
[13.87990952 -89.80058289]
[21.08863640 -76.64633179]
[28.29736328 -63.49208069]
[35.50608826 -50.33783340]
[46.93812180 -52.42850876]
[58.51678848 -51.22624588]
[69.31111908 -46.81683350]
[78.45014954 -39.54436111]
[85.19319916 -29.98439789]
[88.98991394 -18.89844704]
[89.52514648 -7.17328882]
[86.74510193 4.24994802]
[80.86252594 14.45133018]
[72.34045410 22.60620117]
[78.65447998 36.21256638]
[84.96849823 49.81892776]
[91.28252411 63.42529297]
[97.59654236 77.03165436]
[103.91056061 90.63802338]
[109.90218353 96.05582428]
[110.21428680 104.52490234]
[116.30006409 118.23487854]
[124.78321075 124.63906097]
[125.99336243 133.99372864]
[135.48503113 145.60873413]
[150.96583557 147.33566284]
[160.42626953 159.25015259]
[158.68449402 173.99809265]
[168.17614746 185.61309814]
[177.66781616 197.22811890]
[187.15946960 208.84312439]
[195.02938843 213.52017212]
[196.71073914 220.73243713]
[206.00698853 232.50442505]
[220.63186646 238.53959656]
[222.44735718 253.32315063]
[231.74360657 265.09515381]
[246.36849976 271.13031006]
[248.18399048 285.91384888]
[257.48025513 297.68585205]
[272.04171753 306.36917114]
[267.72872925 322.76535034]
[250.77938843 323.15985107]
[245.70825195 306.98211670]
[236.41200256 295.21011353]
[222.45204163 290.01693726]
[219.97161865 274.39138794]
[210.67536926 262.61938477]
[196.71542358 257.42623901]
[194.23498535 241.80067444]
[184.93875122 230.02868652]
[175.54446411 218.33477783]
[166.05281067 206.71977234]
[156.56114197 195.10476685]
[147.06948853 183.48974609]
[132.27012634 182.25903320]
[122.47878265 170.61497498]
[123.87001801 155.10040283]
[114.37835693 143.48538208]
[116.58304596 158.32247925]
[113.97785187 173.09451294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 148]
[16 147]
[17 145]
[18 144]
[19 143]
[20 142]
[21 141]
[22 140]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[40 119]
[41 118]
[42 117]
[53 110]
[54 109]
[55 108]
[56 107]
[57 106]
[58 104]
[59 103]
[60 102]
[61 101]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[150 185]
[151 184]
[154 181]
[155 180]
[156 179]
[157 178]
[159 177]
[160 176]
[162 174]
[163 173]
[165 171]
[166 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
