%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCCCUGCCUGCCCCAGCAUCCCCUGCGCGAAGCUGGGUGCCCCGGAGAGUCUGACCACCAUGCCACCUCCUCGCCUCCUCUUCUUCCUCCUCUUCCUCACCCCCAUGGAAGUCAGGCCCGAGGAACCUCUAGUGGUGAAGGUGGAAGAGGGAGAUAACG\
) } def
/len { sequence length } bind def

/coor [
[104.52717590 112.56007385]
[100.80802917 127.09169769]
[97.08888245 141.62332153]
[93.36973572 156.15493774]
[98.31060028 171.79206848]
[87.04078674 183.70521545]
[71.15370941 179.63916016]
[66.99263763 163.77670288]
[78.83811951 152.43579102]
[82.55726624 137.90417480]
[86.27641296 123.37255096]
[89.99555969 108.84092712]
[78.19123840 99.58576965]
[64.96668243 106.66468811]
[51.81095123 113.87071991]
[38.72527695 121.20318604]
[25.63960457 128.53565979]
[12.55393028 135.86813354]
[-0.53174329 143.20060730]
[-13.61741734 150.53308105]
[-21.87415123 164.02888489]
[-36.75938416 163.50051880]
[-49.84505844 170.83299255]
[-51.53137589 186.25816345]
[-61.98722839 197.72354126]
[-77.19212341 200.82044983]
[-91.29946899 194.35806274]
[-98.88470459 180.82130432]
[-97.03114319 165.41532898]
[-86.45153046 154.06405640]
[-71.21393585 151.13227844]
[-57.17752838 157.74731445]
[-44.09185410 150.41485596]
[-36.77109528 137.44351196]
[-20.94988823 137.44740295]
[-7.86421490 130.11492920]
[5.22145939 122.78245544]
[18.30713272 115.44998932]
[31.39280701 108.11751556]
[44.47848129 100.78504181]
[48.79716110 94.74298859]
[57.88776016 93.44013214]
[71.11231995 86.36121368]
[102.85311890 83.05610657]
[112.22160339 71.34152222]
[121.59008789 59.62693787]
[106.59234619 59.88712311]
[95.68019104 49.59513855]
[95.06338501 34.60782623]
[105.09292603 23.45398140]
[120.06133270 22.48089981]
[131.45056152 32.24233246]
[132.77909851 47.18421555]
[143.43667603 36.62884521]
[154.09426880 26.07347298]
[154.94520569 13.17203331]
[164.07952881 4.59793568]
[176.20603943 4.56727934]
[187.06507874 -5.78073549]
[197.92410278 -16.12874985]
[208.78314209 -26.47676468]
[219.64216614 -36.82477951]
[224.39825439 -54.59119034]
[241.57118225 -58.10419846]
[252.22877502 -68.65956879]
[262.88635254 -79.21494293]
[273.54394531 -89.77031708]
[284.20153809 -100.32568359]
[294.85913086 -110.88105774]
[298.79913330 -134.40766907]
[321.23083496 -140.08699036]
[330.59930420 -151.80157471]
[339.96777344 -163.51615906]
[349.33627319 -175.23074341]
[358.70474243 -186.94534302]
[368.07324219 -198.65992737]
[365.05154419 -211.81503296]
[370.09890747 -224.12309265]
[381.15802002 -231.15966797]
[394.05596924 -230.53605652]
[403.64849854 -242.06791687]
[413.24099731 -253.59977722]
[410.47338867 -266.81066895]
[415.75701904 -279.01916504]
[426.94970703 -285.84130859]
[439.83325195 -284.96923828]
[449.64624023 -296.31408691]
[459.45919800 -307.65893555]
[469.27218628 -319.00378418]
[479.08514404 -330.34863281]
[471.06192017 -343.15951538]
[467.17282104 -357.76657104]
[467.76367188 -372.87097168]
[472.78192139 -387.12957764]
[481.78140259 -399.27459717]
[493.96182251 -408.22604370]
[508.24014282 -413.18798828]
[523.34674072 -413.71923828]
[537.93835449 -409.77252197]
[550.71746826 -401.69879150]
[560.54779053 -390.21594238]
[566.55529785 -376.34503174]
[568.20568848 -361.31948853]
[565.35223389 -346.47531128]
[558.24871826 -333.13247681]
[547.52673340 -322.47738647]
[534.13970947 -315.45751953]
[519.27795410 -312.69708252]
[504.26303101 -314.44146729]
[490.42999268 -320.53564453]
[480.61703491 -309.19079590]
[470.80404663 -297.84594727]
[460.99108887 -286.50109863]
[451.17810059 -275.15625000]
[453.11987305 -258.47268677]
[442.19750977 -245.27220154]
[424.77285767 -244.00726318]
[415.18035889 -232.47540283]
[405.58782959 -220.94354248]
[407.85079956 -204.30049133]
[397.18484497 -190.89195251]
[379.78781128 -189.29144287]
[370.41934204 -177.57685852]
[361.05084229 -165.86227417]
[351.68237305 -154.14767456]
[342.31390381 -142.43309021]
[332.94540405 -130.71850586]
[335.48596191 -124.59857941]
[335.98858643 -117.93943024]
[334.37054443 -111.40698242]
[330.76278687 -105.66463470]
[325.50003052 -101.30590057]
[319.08975220 -98.79315186]
[312.16348267 -98.40871429]
[305.41448975 -100.22347260]
[294.75689697 -89.66809845]
[284.09930420 -79.11273193]
[273.44174194 -68.55735779]
[262.78414917 -58.00198364]
[252.12655640 -47.44661331]
[251.74539185 -35.32605362]
[242.91082764 -26.44340134]
[229.99018860 -25.96574593]
[219.13114929 -15.61773109]
[208.27212524 -5.26971722]
[197.41308594 5.07829762]
[186.55404663 15.42631245]
[182.54611206 32.49052048]
[164.64964294 36.73105621]
[153.99205017 47.28643036]
[143.33447266 57.84180069]
[133.30467224 68.99542236]
[123.93618774 80.71000671]
[114.56771088 92.42459106]
[128.26451111 86.30921936]
[143.14698792 88.18321991]
[154.90016174 97.50323486]
[160.11636353 111.56706238]
[157.28323364 126.29707336]
[147.22216797 137.42250061]
[132.85028076 141.71768188]
[118.33447266 137.93727112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 43]
[14 42]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[22 33]
[23 32]
[44 154]
[45 153]
[46 152]
[53 151]
[54 150]
[55 149]
[58 147]
[59 146]
[60 145]
[61 144]
[62 143]
[64 140]
[65 139]
[66 138]
[67 137]
[68 136]
[69 135]
[71 127]
[72 126]
[73 125]
[74 124]
[75 123]
[76 122]
[80 119]
[81 118]
[82 117]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
