%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGCAGUAGAAGAGUAUAACCAUGUUUCGGAAUAGUCUCAAGAUGCUGCUUACUGGUGGGAAAUCAAGUCGUAAAAACAGGUCAAGUGAUGGAGGGAGCGAGGAACCACCGGAUCGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[84.55770874 135.07032776]
[77.84328461 131.26455688]
[72.02767944 126.19049072]
[67.34681702 120.05397034]
[63.99057007 113.10393524]
[49.16354370 115.37535858]
[34.33652115 117.64677429]
[19.50949478 119.91819000]
[4.68247080 122.18960571]
[-10.14455414 124.46102142]
[-17.64929390 139.55834961]
[-32.50730515 147.17002869]
[-48.81804276 144.49407959]
[-60.23417664 132.77101135]
[-74.99890137 135.41729736]
[-89.76362610 138.06359863]
[-98.80011749 150.75137329]
[-113.81134033 153.22476196]
[-125.85150909 144.53166199]
[-140.61624146 147.17796326]
[-154.33749390 159.37875366]
[-170.60290527 152.92187500]
[-185.29586792 155.94134521]
[-192.57070923 169.78369141]
[-207.06076050 175.66349792]
[-221.92428589 170.80450439]
[-230.14315796 157.50096130]
[-227.83668518 142.03440857]
[-216.09391785 131.70768738]
[-200.45942688 131.39674377]
[-188.31533813 141.24839783]
[-173.62239075 138.22891235]
[-166.64880371 128.25755310]
[-154.34698486 125.67340851]
[-143.26252747 132.41323853]
[-128.49780273 129.76693726]
[-120.22627258 117.43335724]
[-105.29044342 114.53930664]
[-92.40992737 123.29887390]
[-77.64519501 120.65258026]
[-62.88047409 118.00627899]
[-58.16745377 105.44786835]
[-47.76258469 96.81126404]
[-34.33709717 94.45374298]
[-21.40781975 99.10223389]
[-12.41597080 109.63399506]
[2.41105413 107.36257935]
[17.23807907 105.09116364]
[32.06510544 102.81974792]
[46.89212799 100.54833221]
[61.71915436 98.27691650]
[69.77980804 76.43875122]
[88.99259186 63.29537964]
[112.26742554 63.69707489]
[131.01522827 77.49559784]
[144.64532471 71.23296356]
[158.27540588 64.97032928]
[171.90550232 58.70769501]
[185.53559875 52.44506073]
[199.16567993 46.18242645]
[212.79577637 39.91979218]
[211.88980103 29.03538895]
[214.09718323 18.36042213]
[219.22563171 8.76543713]
[226.84515381 1.02942526]
[236.32406616 -4.22341347]
[246.88137817 -6.57402754]
[257.65112305 -5.84192467]
[267.75335693 -2.09897137]
[276.36611938 4.33746529]
[282.79229736 12.93139172]
[297.10440063 8.44094563]
[311.41647339 3.95049834]
[325.72857666 -0.53994852]
[326.05194092 -14.92234230]
[330.81008911 -28.47590256]
[339.52178955 -39.87009430]
[351.31835938 -47.99075317]
[365.03033447 -52.04902649]
[379.30340576 -51.65798569]
[392.73205566 -46.86948395]
[403.99816895 -38.16773224]
[412.00021362 -26.42036819]
[426.42147827 -30.54681015]
[440.84271240 -34.67325211]
[451.84594727 -46.83306503]
[467.81918335 -43.11983871]
[472.33050537 -27.35342598]
[460.73907471 -15.75295639]
[444.96914673 -20.25200081]
[430.54791260 -16.12555885]
[416.12664795 -11.99911785]
[415.23184204 3.66736007]
[409.03469849 18.11291504]
[398.26223755 29.59654999]
[384.19412231 36.72748184]
[368.51058960 38.63356400]
[353.09185791 35.06790924]
[339.79260254 26.44071579]
[330.21902466 13.77214050]
[315.90692139 18.26258659]
[301.59484863 22.75303459]
[287.28274536 27.24348068]
[284.34814453 46.45072937]
[272.16055298 61.68179321]
[253.92126465 68.81304932]
[234.48289490 65.86474609]
[219.05841064 53.54988480]
[205.42831421 59.81251907]
[191.79823303 66.07514954]
[178.16813660 72.33778381]
[164.53804016 78.60042572]
[150.90795898 84.86306000]
[137.27786255 91.12569427]
[138.30004883 98.77569580]
[137.76852417 106.47535706]
[135.70489502 113.91233826]
[132.19282532 120.78495026]
[127.37481689 126.81439209]
[121.44631195 131.75607300]
[114.64780426 135.40951538]
[107.25509644 137.62652588]
[99.56806946 138.31716919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[14 41]
[15 40]
[16 39]
[19 36]
[20 35]
[22 32]
[23 31]
[55 114]
[56 113]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[71 103]
[72 102]
[73 101]
[74 100]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
