%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAACGAGCUGGGGAAGACGGAGCGGGCUCUGUGCCGGGCGGGCGGGCGGCGGGGGGGCCAGCGACCGCAGCCGGGGGGACGCGGGAGGAUGGAGCAAGUGGAGAUCCUGAGGAAAUUCAUCCAGAGGGUCCAGGCCAUGAAGAGUCCUGACCACAAUGGGGAGGACAACUUCGCCCGGGACUUCAUGC\
) } def
/len { sequence length } bind def

/coor [
[7.07272387 320.57952881]
[-0.84829402 333.31756592]
[-8.76931190 346.05560303]
[-16.69032860 358.79360962]
[-13.31769657 374.00094604]
[-21.53219223 386.80630493]
[-36.05084991 389.92785645]
[-43.97186661 402.66589355]
[-40.59923553 417.87322998]
[-48.81373215 430.67858887]
[-63.33238602 433.80014038]
[-71.25340271 446.53817749]
[-79.17442322 459.27621460]
[-74.13807678 474.08059692]
[-79.84424591 488.63989258]
[-93.59864044 496.07971191]
[-108.90686035 492.88714600]
[-118.54083252 480.56964111]
[-117.95169067 464.94317627]
[-107.41760254 453.38604736]
[-91.91245270 451.35519409]
[-83.99143982 438.61715698]
[-76.07041931 425.87911987]
[-79.69219971 411.47711182]
[-71.84062195 398.44610596]
[-56.70989990 394.74487305]
[-48.78888321 382.00686646]
[-52.41066742 367.60482788]
[-44.55908585 354.57382202]
[-29.42836189 350.87261963]
[-21.50734520 338.13458252]
[-13.58632660 325.39654541]
[-5.66530895 312.65850830]
[1.40564215 299.42968750]
[7.59624767 285.76672363]
[5.80125523 270.98068237]
[18.54430962 261.60385132]
[24.73491478 247.94088745]
[30.92552185 234.27792358]
[37.11612701 220.61497498]
[43.30673218 206.95201111]
[49.49733734 193.28904724]
[55.68794250 179.62609863]
[61.87854767 165.96313477]
[68.06915283 152.30018616]
[54.09539032 140.59130859]
[44.18486786 125.28950500]
[39.21482086 107.74919891]
[39.62517166 89.52297211]
[25.27106667 85.16870880]
[10.88181877 80.93201447]
[-3.54160786 76.81318665]
[-17.96503448 72.69435883]
[-31.65592575 80.58960724]
[-46.89775848 76.41084290]
[-54.64782333 62.63724518]
[-50.30814743 47.44044495]
[-36.45338058 39.83643723]
[-21.30330849 44.33654022]
[-13.84620571 58.27092743]
[0.57722139 62.38975906]
[15.00064850 66.50858307]
[22.30744171 65.32028198]
[29.62533760 70.81459808]
[43.97944260 75.16886902]
[48.05158234 67.50000000]
[53.16678619 60.48369598]
[59.22235107 54.26083374]
[50.68584824 41.92681122]
[42.14934540 29.59278870]
[33.61284256 17.25876427]
[18.31873512 14.30444241]
[9.83721161 1.67438293]
[12.74795914 -12.88800526]
[4.21145725 -25.22202873]
[-10.83646870 -31.74061394]
[-12.44611645 -48.06057358]
[1.03838134 -57.39332962]
[15.74532986 -50.13814545]
[16.54548073 -33.75852966]
[25.08198357 -21.42450714]
[39.73632050 -19.01909065]
[48.56924820 -6.63224363]
[45.94686508 8.72226334]
[54.48336792 21.05628586]
[63.01987076 33.39030838]
[71.55637360 45.72433090]
[83.26985931 41.05095291]
[95.69198608 38.87448120]
[108.29659271 39.28711319]
[120.54977417 42.27136993]
[131.93252563 47.70084381]
[141.25743103 35.95154190]
[150.58233643 24.20223999]
[159.90725708 12.45293999]
[156.04277039 3.51428318]
[155.71055603 -6.16030741]
[158.91415405 -15.23367691]
[165.17137146 -22.46721077]
[173.58631897 -26.88990021]
[182.97746277 -27.92858505]
[192.04357910 -25.48191643]
[202.11695862 -36.59618378]
[212.19033813 -47.71044922]
[222.26373291 -58.82471848]
[224.03723145 -65.22086334]
[228.16218567 -69.15946198]
[232.85314941 -70.13093567]
[243.28479004 -80.90966034]
[253.71643066 -91.68838501]
[264.14807129 -102.46710968]
[264.06188965 -118.04370117]
[274.79461670 -128.82626343]
[289.64505005 -128.81242371]
[300.07669067 -139.59114075]
[310.50833130 -150.36987305]
[309.99917603 -166.16595459]
[320.86947632 -177.63819885]
[336.67004395 -177.98031616]
[348.02673340 -166.98933411]
[348.20175171 -151.18601990]
[337.09133911 -139.94618225]
[321.28704834 -139.93823242]
[310.85540771 -129.15950012]
[300.42376709 -118.38078308]
[300.92349243 -103.53874969]
[290.49786377 -92.45899200]
[274.92678833 -92.03546906]
[264.49514771 -81.25674438]
[254.06352234 -70.47801971]
[243.63188171 -59.69929504]
[233.37799072 -48.75133133]
[223.30461121 -37.63706589]
[213.23123169 -26.52279854]
[203.15783691 -15.40853214]
[205.89643860 4.83357334]
[192.64450073 20.76108360]
[171.65655518 21.77784729]
[162.33164978 33.52714920]
[153.00672913 45.27645111]
[143.68182373 57.02575302]
[150.85668945 65.81687927]
[156.28756714 75.78022003]
[159.78823853 86.57410431]
[161.23864746 97.82838440]
[160.58906555 109.15713501]
[157.86175537 120.17187500]
[171.31484985 126.80620575]
[184.76794434 133.44053650]
[198.22103882 140.07485962]
[211.67413330 146.70919800]
[226.47766113 141.86222839]
[240.02650452 148.78201294]
[244.55612183 162.92480469]
[258.00921631 169.55912781]
[271.46231079 176.19345093]
[288.34222412 177.77612305]
[291.49423218 194.43449402]
[276.35943604 202.07481384]
[264.82797241 189.64654541]
[251.37487793 183.01222229]
[237.92178345 176.37788391]
[223.94410706 181.39387512]
[210.20625305 174.85736084]
[205.03979492 160.16229248]
[191.58670044 153.52795410]
[178.13362122 146.89363098]
[164.68052673 140.25929260]
[151.22743225 133.62496948]
[137.89730835 148.15269470]
[120.64364624 157.69512939]
[101.25272369 161.26432800]
[81.73210907 158.49078369]
[75.54150391 172.15374756]
[69.35089874 185.81669617]
[63.16029358 199.47966003]
[56.96968842 213.14262390]
[50.77908325 226.80557251]
[44.58847809 240.46853638]
[38.39787292 254.13148499]
[32.20726776 267.79443359]
[33.55946732 283.55776978]
[21.25920486 291.95733643]
[15.06859970 305.62030029]
[28.77805328 299.53335571]
[43.47296143 302.54327393]
[53.68525696 313.53002930]
[55.61486435 328.40539551]
[48.54377365 341.63415527]
[35.10317993 348.29376221]
[20.29442024 345.90615845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[7 27]
[8 26]
[11 23]
[12 22]
[13 21]
[34 184]
[35 183]
[37 181]
[38 180]
[39 179]
[40 178]
[41 177]
[42 176]
[43 175]
[44 174]
[45 173]
[49 65]
[50 64]
[51 62]
[52 61]
[53 60]
[68 87]
[69 86]
[70 85]
[71 84]
[74 81]
[75 80]
[92 141]
[93 140]
[94 139]
[95 138]
[102 135]
[103 134]
[104 133]
[105 132]
[108 131]
[109 130]
[110 129]
[111 128]
[114 125]
[115 124]
[116 123]
[147 169]
[148 168]
[149 167]
[150 166]
[151 165]
[154 162]
[155 161]
[156 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
