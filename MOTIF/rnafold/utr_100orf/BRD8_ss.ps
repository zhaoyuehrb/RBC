%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUUCGGCCCUUCCAGACCGUCUCUCCUCAGGGUUGGAGACUUCGGGGCCAAGAUGGCGACGGGAACGGGCAAACACAAGCUGCUAAGCACUGGCCCCACAGAGCCAUGGUCCAUCCGAGAGAAGCUAUGUUUAGCAUCUUCUGUCAUGAGAA\
) } def
/len { sequence length } bind def

/coor [
[76.01365662 239.70683289]
[72.13137054 254.19570923]
[68.24908447 268.68460083]
[64.36679840 283.17349243]
[69.13154602 298.86517334]
[57.72850800 310.65087891]
[41.88814545 306.40646362]
[37.90567398 290.49822998]
[49.87791061 279.29119873]
[53.76019669 264.80230713]
[57.64248276 250.31343079]
[61.52476883 235.82453918]
[56.05788040 219.17454529]
[69.11703491 206.22993469]
[72.70676422 191.66581726]
[76.14967346 177.06626892]
[79.44540405 162.43281555]
[82.59362030 147.76690674]
[85.59400177 133.07005310]
[88.59439087 118.37319183]
[85.17729187 115.74640656]
[82.34898376 112.49414825]
[67.86009216 116.37643433]
[53.37120819 120.25872040]
[38.88232040 124.14100647]
[24.39343262 128.02328491]
[9.90454578 131.90557861]
[-4.50322628 136.07884216]
[-18.82403946 140.54138184]
[-29.53990746 152.95516968]
[-45.59559631 149.61648560]
[-50.47439575 133.95988464]
[-39.15740967 122.09152985]
[-23.28658485 126.22057343]
[-8.96577168 121.75802612]
[-5.97135162 117.97061157]
[-0.54299581 116.05805206]
[6.02225971 117.41668701]
[20.51114655 113.53440094]
[35.00003433 109.65211487]
[49.48892212 105.76982880]
[63.97780991 101.88754272]
[78.46669769 98.00525665]
[89.42182159 78.28086853]
[114.44742584 77.55726624]
[117.44780731 62.86040878]
[120.44819641 48.16355133]
[123.44857788 33.46669006]
[126.00370789 18.68591499]
[128.11125183 3.83471012]
[130.21878052 -11.01649475]
[132.32632446 -25.86770058]
[134.43385315 -40.71890640]
[132.43466187 -45.66514206]
[132.55952454 -50.40035629]
[134.36151123 -54.13880157]
[137.14332581 -56.39252853]
[140.14370728 -71.08938599]
[143.14410400 -85.78624725]
[146.14448547 -100.48310852]
[133.52421570 -113.43540955]
[131.18148804 -131.20922852]
[139.86175537 -146.71611023]
[155.95172119 -153.88442993]
[158.35789490 -168.69018555]
[160.76406860 -183.49594116]
[151.79647827 -196.23249817]
[154.44758606 -211.21336365]
[166.64521790 -219.68409729]
[169.05139160 -234.48985291]
[171.45755005 -249.29560852]
[173.71452332 -264.12484741]
[175.82205200 -278.97604370]
[162.43591309 -286.08850098]
[152.29197693 -297.35244751]
[146.61515808 -311.40768433]
[146.09097290 -326.55697632]
[150.78269958 -340.97094727]
[160.12380981 -352.90911865]
[172.98632812 -360.92980957]
[187.81701660 -364.06454468]
[202.82499695 -361.93475342]
[216.19801331 -354.79763794]
[226.32118225 -343.51504517]
[231.97209167 -329.44937134]
[232.46835327 -314.29913330]
[227.75006104 -299.89379883]
[218.38696289 -287.97290039]
[205.50970459 -279.97589111]
[190.67326355 -276.86849976]
[188.56571960 -262.01730347]
[190.75221252 -254.91217041]
[186.26330566 -246.88943481]
[183.85713196 -232.08367920]
[181.45097351 -217.27792358]
[190.33845520 -205.38052368]
[188.10917664 -190.33111572]
[175.56982422 -181.08976746]
[173.16365051 -166.28401184]
[170.75747681 -151.47825623]
[180.53680420 -144.17715454]
[186.29800415 -133.33638000]
[186.88409424 -121.00135040]
[182.12121582 -109.52944183]
[172.86364746 -101.13949585]
[160.84133911 -97.48271942]
[157.84095764 -82.78586578]
[154.84057617 -68.08900452]
[151.84019470 -53.39214325]
[149.28506470 -38.61136627]
[147.17752075 -23.76016235]
[145.06999207 -8.90895748]
[142.96244812 5.94224739]
[140.85491943 20.79345131]
[142.71871948 23.85026169]
[143.16111755 27.97668839]
[141.68908691 32.47902298]
[138.14544678 36.46707535]
[135.14505005 51.16393661]
[132.14466858 65.86079407]
[129.14428711 80.55765533]
[134.60430908 94.52863312]
[146.77497864 103.29646301]
[158.94564819 112.06429291]
[171.11631775 120.83212280]
[186.83609009 122.62075043]
[192.64009094 136.33799744]
[204.81076050 145.10583496]
[216.98143005 153.87365723]
[229.15209961 162.64149475]
[245.51368713 163.75071716]
[252.48992920 178.59201050]
[242.90426636 191.89791870]
[226.61759949 189.98046875]
[220.38426208 174.81214905]
[208.21359253 166.04432678]
[196.04292297 157.27648926]
[183.87226868 148.50866699]
[169.02301025 147.34716797]
[162.34848022 133.00279236]
[150.17781067 124.23495483]
[138.00714111 115.46712494]
[125.83647919 106.69929504]
[120.02730560 114.96759033]
[112.00428009 119.98594666]
[103.29125214 121.37358093]
[100.29086304 136.07043457]
[97.29048157 150.76730347]
[98.64277649 159.86047363]
[94.07886505 165.72854614]
[90.78313446 180.36199951]
[91.95204926 189.48056030]
[87.27089691 195.25553894]
[83.68115997 209.81967163]
[89.68432617 221.27798462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[14 154]
[15 153]
[16 151]
[17 150]
[18 148]
[19 147]
[20 146]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 35]
[29 34]
[45 121]
[46 120]
[47 119]
[48 118]
[49 114]
[50 113]
[51 112]
[52 111]
[53 110]
[57 109]
[58 108]
[59 107]
[60 106]
[64 100]
[65 99]
[66 98]
[69 95]
[70 94]
[71 93]
[72 91]
[73 90]
[122 143]
[123 142]
[124 141]
[125 140]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
