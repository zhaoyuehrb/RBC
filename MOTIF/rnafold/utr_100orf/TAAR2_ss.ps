%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGUCUCAUCAGAGCAACAUGAACUUUCACAUUUCAAAAGAACACAGACAAAAAAGGAAAAAUUCAAUUGCUCUGAAUAUGGAAAUAGAUCUUGCC\
) } def
/len { sequence length } bind def

/coor [
[100.70028687 275.78152466]
[87.81394958 264.76434326]
[94.83330536 249.33174133]
[95.76585388 234.36074829]
[96.69839478 219.38977051]
[86.73947906 202.93885803]
[97.68077850 186.14979553]
[97.68077850 171.14979553]
[97.68077850 156.14979553]
[97.68077850 141.14979553]
[96.51551819 126.19512177]
[94.19204712 111.37616730]
[91.17993927 96.68170929]
[87.48575592 82.14372253]
[83.79157257 67.60573578]
[80.09738922 53.06774902]
[76.40320587 38.52976608]
[72.70902252 23.99178123]
[69.01483917 9.45379543]
[65.32065582 -5.08418894]
[61.62647247 -19.62217331]
[50.87814331 -26.95908546]
[48.17075729 -39.27552032]
[54.43822098 -49.75105667]
[51.19795227 -64.39689636]
[47.95768356 -79.04273987]
[44.71741867 -93.68858337]
[31.97381210 -106.86611938]
[37.69238281 -123.37670898]
[33.99819946 -137.91468811]
[30.30401611 -152.45268250]
[26.60983276 -166.99066162]
[11.56538677 -166.39207458]
[-3.27468920 -168.93487549]
[-17.26164818 -174.50790405]
[-29.78404236 -182.86753845]
[-40.29444504 -193.64831543]
[-48.33338928 -206.37895203]
[-53.54944229 -220.50291443]
[-55.71458435 -235.40277100]
[-54.73416519 -250.42716980]
[-50.65103912 -264.91931152]
[-43.64371109 -278.24563599]
[-34.01850128 -289.82357788]
[-22.19619370 -299.14703369]
[-8.69360065 -305.80838013]
[5.89899874 -309.51644897]
[20.94367981 -310.10910034]
[35.78275299 -307.56048584]
[49.76752090 -301.98193359]
[62.28662491 -293.61740112]
[72.79278564 -282.83248901]
[80.82672119 -270.09869385]
[86.03721619 -255.97267151]
[88.19649506 -241.07196045]
[87.21016693 -226.04794312]
[83.12133789 -211.55741882]
[76.10876465 -198.23385620]
[66.47900391 -186.65968323]
[54.65303040 -177.34089661]
[41.14781952 -170.68484497]
[44.84200287 -156.14686584]
[48.53618622 -141.60887146]
[52.23036957 -127.07089233]
[62.54012680 -120.53431702]
[65.66240692 -108.31645966]
[59.36325836 -96.92884827]
[62.60352707 -82.28300476]
[65.84379578 -67.63716888]
[69.08406067 -52.99132538]
[81.61833191 -40.81785202]
[76.16445923 -23.31635857]
[79.85864258 -8.77837276]
[83.55282593 5.75961208]
[87.24700928 20.29759789]
[90.94119263 34.83558273]
[94.63537598 49.37356567]
[98.32955933 63.91155243]
[102.02374268 78.44953918]
[105.71792603 92.98752594]
[108.90574646 95.49713898]
[110.89721680 99.45996094]
[111.04430389 104.27217865]
[109.01100159 109.05269623]
[111.33448029 123.87165070]
[114.19960022 126.94169617]
[115.88051605 130.40126038]
[116.39319611 133.86180115]
[115.86916351 136.97502136]
[114.53452301 139.46459961]
[112.68077850 141.14979553]
[112.68077850 156.14979553]
[112.68077850 171.14979553]
[112.68077850 186.14979553]
[120.95750427 193.54585266]
[123.64318085 204.08711243]
[120.06321716 214.12394714]
[111.66938019 220.32231140]
[110.73683929 235.29330444]
[109.80429077 250.26428223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[7 94]
[8 93]
[9 92]
[10 91]
[11 85]
[12 84]
[13 80]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[24 70]
[25 69]
[26 68]
[27 67]
[29 64]
[30 63]
[31 62]
[32 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
