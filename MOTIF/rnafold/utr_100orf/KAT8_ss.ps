%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACUUCCCUUCCCGCGAUGGCGGCACAGGGAGCUGCUGCGGCGGUUGCGGCGGGGACUUCAGGGGUCGCGGGGGAGGGCGAGCCCGGGCCCGGGGAGAAUGCGGCCGCUGAGGGGA\
) } def
/len { sequence length } bind def

/coor [
[188.80328369 175.12895203]
[173.80461121 174.93041992]
[160.82656860 167.40908813]
[153.19769287 154.49395752]
[152.87460327 139.49743652]
[159.94013977 126.26573181]
[172.58018494 118.19306946]
[157.73802185 116.02272034]
[142.89587402 113.85237122]
[128.05371094 111.68202209]
[113.21156311 109.51167297]
[103.39362335 115.92169952]
[91.81521606 114.07218933]
[84.48274231 104.92259216]
[69.70304871 102.36121368]
[54.92335510 99.79983521]
[40.14366150 97.23844910]
[25.36396790 94.67707062]
[10.58427429 92.11569214]
[-4.19541883 89.55431366]
[-19.11411667 94.82147217]
[-30.33325195 85.02452087]
[-45.11294556 82.46314240]
[-60.03164291 87.73030090]
[-71.25077820 77.93334961]
[-86.03047180 75.37197113]
[-100.81016541 72.81059265]
[-115.62237549 70.44451904]
[-130.46453857 68.27416992]
[-145.30668640 66.10382080]
[-160.33752441 72.66172028]
[-173.36978149 62.70720291]
[-170.99697876 46.48062134]
[-155.66006470 40.67449188]
[-143.13633728 51.26166153]
[-128.29418945 53.43201065]
[-113.45202637 55.60236359]
[-106.28849792 53.42944336]
[-98.24878693 58.03089523]
[-83.46909332 60.59227753]
[-68.68939972 63.15365601]
[-54.82784271 57.70328522]
[-42.55156326 67.68344879]
[-27.77187157 70.24482727]
[-13.91031551 64.79445648]
[-1.63403869 74.77462006]
[13.14565468 77.33599854]
[27.92534828 79.89737701]
[42.70503998 82.45875549]
[57.48473358 85.02014160]
[72.26442719 87.58152008]
[87.04412079 90.14289856]
[102.56787109 83.92445374]
[115.38191223 94.66951752]
[130.22406006 96.83986664]
[145.06622314 99.01021576]
[159.90837097 101.18056488]
[174.75053406 103.35091400]
[189.74922180 103.54891205]
[204.64349365 101.77110291]
[219.53778076 99.99329376]
[234.43205261 98.21548462]
[249.32632446 96.43768311]
[264.22061157 94.65987396]
[277.00646973 85.34150696]
[290.56106567 91.51583099]
[305.45535278 89.73802185]
[320.34960938 87.96021271]
[335.24389648 86.18240356]
[350.13815308 84.40460205]
[365.03244019 82.62679291]
[379.92669678 80.84898376]
[385.17117310 63.82984924]
[397.22570801 50.79188919]
[413.68518066 44.26995087]
[431.29425049 45.50540161]
[446.59112549 54.21012497]
[456.58813477 68.63206482]
[471.29507446 65.68143463]
[486.00201416 62.73081207]
[500.70895386 59.78018570]
[507.05941772 45.62211227]
[520.53570557 37.92993546]
[535.95587158 39.66144562]
[547.39056396 50.15084839]
[550.44287109 65.36475372]
[543.93920898 79.45310211]
[530.38024902 86.99863434]
[514.97979736 85.09994507]
[503.65957642 74.48711395]
[488.95263672 77.43774414]
[474.24569702 80.38836670]
[459.53875732 83.33898926]
[457.74575806 95.64404297]
[452.20870972 106.80578613]
[443.46157837 115.71343231]
[432.35861206 121.47522736]
[419.99087524 123.50770569]
[407.57913208 121.59473419]
[396.35333252 115.91036224]
[387.43066406 107.00315857]
[381.70452881 95.74326324]
[366.81024170 97.52106476]
[351.91595459 99.29887390]
[337.02169800 101.07668304]
[322.12741089 102.85449219]
[307.23315430 104.63229370]
[292.33886719 106.41010284]
[280.61834717 115.60131073]
[265.99841309 109.55414581]
[251.10412598 111.33195496]
[236.20985413 113.10976410]
[221.31558228 114.88756561]
[206.42131042 116.66537476]
[191.52703857 118.44318390]
[203.95097351 126.84828949]
[210.66381836 140.26237488]
[209.94389343 155.24508667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[22 44]
[23 43]
[25 41]
[26 40]
[27 39]
[28 37]
[29 36]
[30 35]
[59 115]
[60 114]
[61 113]
[62 112]
[63 111]
[64 110]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[72 102]
[78 93]
[79 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
