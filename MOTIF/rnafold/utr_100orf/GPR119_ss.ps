%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACCCACAGCUCCUCUGCCCCUGGCCCAUGAGAAUUUCAGCUGGAGAGAUAGCAUGCCCUGGUAAGUGAAGUCCUGCCACUUCGAGACAUGGAAUCAUCUUUCUCAUUUGGAGUGAUCCUUGCUGUCCUGGCCUCCCUCAUCAUUGCUACUAACACACUAGUGGCUGUGGCUGUGCUGCUGUUGAUCC\
) } def
/len { sequence length } bind def

/coor [
[58.69487000 271.60894775]
[54.84833527 257.00137329]
[55.27441406 241.90187073]
[59.93857193 227.53445435]
[68.46269989 215.06385803]
[80.15579224 205.50100708]
[94.06993866 199.62109375]
[92.34669495 184.72041321]
[90.62345886 169.81973267]
[88.90021515 154.91903687]
[87.17697906 140.01835632]
[85.45373535 125.11766815]
[78.33621216 122.75315857]
[73.60720062 136.98820496]
[68.87795258 151.22317505]
[54.64307022 146.49368286]
[59.37216187 132.25918579]
[64.10117340 118.02414703]
[56.98365021 115.65964508]
[46.68670273 126.56710815]
[36.38975525 137.47457886]
[29.91345978 153.14282227]
[13.06471825 151.25703430]
[10.21262264 134.54469299]
[25.48228836 127.17763519]
[35.77923584 116.27016449]
[46.07618332 105.36269379]
[62.47788620 91.14927673]
[80.61557007 87.78161621]
[95.43850708 94.33156586]
[91.06210327 79.98419189]
[86.68570709 65.63681793]
[82.30930328 51.28944016]
[77.93290710 36.94206619]
[70.26317596 36.97273636]
[62.74131775 35.56067657]
[55.63567734 32.76260757]
[49.19855118 28.68457985]
[43.65723038 23.47796631]
[39.20598221 17.33385277]
[35.99923706 10.47602558]
[34.14624023 3.15283060]
[19.15080643 2.78278518]
[4.15537119 2.41273975]
[-10.84006405 2.04269457]
[-22.11343575 13.11909389]
[-37.91615295 12.89626980]
[-48.87274551 1.50642121]
[-48.48285675 -14.29305744]
[-36.97780609 -25.12861633]
[-21.18333244 -24.57170868]
[-10.47001839 -12.95274067]
[4.52541637 -12.58269501]
[19.52085114 -12.21264935]
[34.51628494 -11.84260464]
[40.76605225 -26.17231750]
[52.04539490 -36.99713135]
[66.61991119 -42.65253830]
[66.86662292 -57.65050888]
[67.11333466 -72.64848328]
[58.71597290 -82.45330048]
[59.23997498 -94.95056915]
[67.85845184 -103.45391083]
[68.35180664 -118.44579315]
[57.82931900 -129.93121338]
[58.54321671 -145.12809753]
[69.55766296 -155.08889771]
[70.05101776 -170.08078003]
[70.54437256 -185.07266235]
[71.03772736 -200.06454468]
[71.53108215 -215.05644226]
[62.47642517 -231.08157349]
[72.30024719 -245.61447144]
[72.54695892 -260.61245728]
[72.79367065 -275.61041260]
[72.91703033 -290.60992432]
[72.91703033 -305.60992432]
[69.78333282 -314.20855713]
[73.04241180 -320.85610962]
[73.28912354 -335.85409546]
[73.53583527 -350.85205078]
[61.92629242 -358.30020142]
[55.56740189 -370.41818237]
[56.02732086 -383.98712158]
[63.07877350 -395.46215820]
[74.78643036 -401.89831543]
[75.27978516 -416.89019775]
[75.77313995 -431.88208008]
[76.26649475 -446.87396240]
[68.37162018 -454.38708496]
[65.97370911 -464.79299927]
[69.63098145 -474.59158325]
[77.90553284 -480.62234497]
[78.89170837 -495.58990479]
[79.87788391 -510.55746460]
[72.14834595 -525.02075195]
[81.03772736 -538.80151367]
[97.40139771 -537.72338867]
[104.40580750 -522.89538574]
[94.84542847 -509.57125854]
[93.85925293 -494.60372925]
[92.87307739 -479.63616943]
[102.67584229 -462.98049927]
[91.25838470 -446.38061523]
[90.76502991 -431.38873291]
[90.27167511 -416.39685059]
[89.77831268 -401.40496826]
[103.04650116 -391.75213623]
[108.00215149 -375.93627930]
[102.50564575 -360.12423706]
[88.53380585 -350.60534668]
[88.28709412 -335.60736084]
[88.04039001 -320.60940552]
[87.91703033 -305.60992432]
[87.91703033 -290.60992432]
[91.06633759 -283.90963745]
[87.79164124 -275.36370850]
[87.54492950 -260.36572266]
[87.29821777 -245.36776733]
[95.48677826 -236.44967651]
[95.39373016 -223.94177246]
[86.52296448 -214.56307983]
[86.02960968 -199.57119751]
[85.53625488 -184.57931519]
[85.04290009 -169.58743286]
[84.54954529 -154.59553528]
[94.88529205 -143.93214417]
[94.59851837 -128.72122192]
[83.34368896 -117.95243835]
[82.85033417 -102.96055603]
[91.94537354 -87.96078491]
[82.11130524 -72.40177155]
[81.86459351 -57.40379715]
[81.61788940 -42.40582657]
[99.14023590 -34.06881332]
[110.70503998 -18.40243340]
[113.53047180 0.93272638]
[106.88608551 19.38113976]
[92.28028107 32.56567001]
[96.65667725 46.91304016]
[101.03308105 61.26041412]
[105.40947723 75.60778809]
[109.78588104 89.95516205]
[119.43818665 101.43701172]
[132.82005310 108.21387482]
[146.20190430 114.99073792]
[162.00900269 114.32289886]
[169.86767578 126.97559357]
[183.24952698 133.75245667]
[196.63139343 140.52931213]
[210.01324463 147.30618286]
[223.39511108 154.08303833]
[236.77696228 160.85990906]
[250.15882874 167.63676453]
[265.09756470 162.47834778]
[279.27166748 169.46911621]
[284.27185059 184.46156311]
[277.13162231 198.56095886]
[262.08712769 203.40235901]
[248.06402588 196.11344910]
[243.38195801 181.01863098]
[230.00010681 174.24176025]
[216.61824036 167.46490479]
[203.23638916 160.68803406]
[189.85452271 153.91117859]
[176.47267151 147.13430786]
[163.09080505 140.35745239]
[148.24085999 141.51002502]
[139.42504883 128.37260437]
[126.04318237 121.59573364]
[112.66132355 114.81887054]
[100.35442352 123.39442444]
[102.07765961 138.29512024]
[103.80090332 153.19580078]
[105.52414703 168.09648132]
[107.24738312 182.99717712]
[108.97062683 197.89785767]
[123.85954285 200.44673157]
[137.42665100 207.08828735]
[148.57211304 217.28413391]
[156.39244080 230.20773315]
[160.25364685 244.81141663]
[159.84272766 259.91134644]
[155.19300842 274.28341675]
[146.68141174 286.76260376]
[134.99794006 296.33718872]
[121.08969879 302.23107910]
[106.08419800 303.96643066]
[91.19784546 301.40258789]
[77.63742065 294.74740601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 177]
[8 176]
[9 175]
[10 174]
[11 173]
[12 172]
[19 27]
[20 26]
[21 25]
[30 143]
[31 142]
[32 141]
[33 140]
[34 139]
[42 55]
[43 54]
[44 53]
[45 52]
[58 134]
[59 133]
[60 132]
[63 130]
[64 129]
[67 126]
[68 125]
[69 124]
[70 123]
[71 122]
[73 119]
[74 118]
[75 117]
[76 115]
[77 114]
[79 113]
[80 112]
[81 111]
[86 107]
[87 106]
[88 105]
[89 104]
[93 102]
[94 101]
[95 100]
[144 171]
[145 170]
[146 169]
[148 167]
[149 166]
[150 165]
[151 164]
[152 163]
[153 162]
[154 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
