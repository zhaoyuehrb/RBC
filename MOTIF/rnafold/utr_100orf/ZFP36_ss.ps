%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGACUUCAGCGCUCCCACUCUCGGCCGACACCCCUCAUGGCCAACCGUUACACCAUGGAUCUGACUGCCAUCUACGAGAGCCUCCUGUCGCUGAGCCCUGACGUGCCCGUGCCAUCCGACCAUGGAGGGACUGAGU\
) } def
/len { sequence length } bind def

/coor [
[97.71793365 139.15618896]
[91.86209106 152.96592712]
[86.00625610 166.77568054]
[80.30461884 180.64981079]
[74.75790405 194.58659363]
[69.21118164 208.52337646]
[72.11203003 224.66390991]
[59.41143417 235.03825378]
[44.17467880 228.97415161]
[42.07603073 212.70983887]
[55.27440262 202.97665405]
[60.82112122 189.03987122]
[66.36783600 175.10308838]
[65.91503906 167.66517639]
[72.19650269 160.91984558]
[78.05234528 147.11009216]
[83.90818787 133.30033875]
[76.21179199 126.27134705]
[71.08875275 117.69662476]
[68.76363373 108.42937469]
[69.19740295 99.31878662]
[72.10896301 91.13325500]
[77.01794434 84.49566650]
[83.30339050 79.83620453]
[77.44755554 66.02645874]
[71.59171295 52.21670914]
[65.73587799 38.40695953]
[59.88003540 24.59721375]
[54.02419662 10.78746510]
[47.74273300 4.04212332]
[48.19552994 -3.39578199]
[42.64881134 -17.33256531]
[37.10209274 -31.26934624]
[31.55537415 -45.20613098]
[13.91694927 -49.10623169]
[2.20534182 -62.65407944]
[0.91987801 -80.35954285]
[10.38377094 -95.19360352]
[4.22171831 -108.86946106]
[-1.94033420 -122.54531860]
[-9.00207233 -135.77905273]
[-16.93195724 -148.51156616]
[-24.86184311 -161.24407959]
[-32.79172897 -173.97659302]
[-40.72161102 -186.70910645]
[-49.07252502 -199.16954041]
[-57.83514023 -211.34396362]
[-76.54927063 -218.69223022]
[-77.84371185 -237.93762207]
[-87.13995361 -249.70962524]
[-96.43620300 -261.48159790]
[-105.73245239 -273.25360107]
[-121.45601654 -274.84893799]
[-131.38131714 -287.14788818]
[-129.61982727 -302.85369873]
[-117.21663666 -312.64840698]
[-101.53031921 -310.72097778]
[-91.86729431 -298.21490479]
[-93.96046448 -282.54983521]
[-84.66421509 -270.77786255]
[-75.36796570 -259.00585938]
[-66.07171631 -247.23387146]
[-55.75898361 -246.94253540]
[-47.15426254 -240.86007690]
[-43.27983856 -230.82394409]
[-45.66071701 -220.10658264]
[-36.89810181 -207.93215942]
[-33.41260147 -207.02156067]
[-30.21442032 -204.32929993]
[-28.15844536 -200.01878357]
[-27.98909760 -194.63899231]
[-20.05921364 -181.90647888]
[-12.12932777 -169.17396545]
[-4.19944334 -156.44145203]
[3.73044181 -143.70893860]
[8.68177223 -157.86819458]
[22.10436249 -164.56401062]
[36.39416885 -160.00315857]
[43.45586395 -146.76939392]
[39.28892136 -132.35980225]
[26.25395584 -124.93755341]
[11.73552418 -128.70736694]
[17.89757729 -115.03150940]
[24.05962944 -101.35565186]
[36.27001572 -100.65702820]
[47.07319260 -94.77049255]
[54.36533737 -84.77182770]
[56.69631577 -72.54420471]
[53.55772400 -60.42367935]
[45.49215698 -50.75284958]
[51.03887558 -36.81606674]
[56.58559418 -22.87928391]
[62.13231277 -8.94250107]
[67.83394623 4.93162584]
[73.68978882 18.74137306]
[79.54562378 32.55112076]
[85.40146637 46.36087036]
[91.25730133 60.17061996]
[97.11314392 73.98036957]
[125.80380249 81.79058838]
[133.26673889 116.16118622]
[146.42097473 123.36991882]
[159.57522583 130.57864380]
[174.57414246 126.37503815]
[187.81173706 133.87310791]
[191.72679138 148.19818115]
[204.88104248 155.40690613]
[218.03529358 162.61563110]
[231.18954468 169.82435608]
[246.18846130 165.62075806]
[259.42605591 173.11882019]
[263.34109497 187.44389343]
[276.49536133 194.65263367]
[291.00042725 188.80998230]
[305.85144043 193.70707703]
[314.03619385 207.03164673]
[311.69006348 222.49223328]
[299.92086792 232.78881836]
[284.28561401 233.05969238]
[272.16683960 223.17692566]
[269.28662109 207.80686951]
[256.13238525 200.59814453]
[241.95124817 205.00625610]
[228.50828552 197.88296509]
[223.98081970 182.97860718]
[210.82656860 175.76988220]
[197.67231750 168.56115723]
[184.51806641 161.35243225]
[170.33694458 165.76052856]
[156.89396667 158.63723755]
[152.36650085 143.73289490]
[139.21224976 136.52416992]
[126.05800629 129.31544495]
[118.97298431 131.77561951]
[127.06088257 144.40835571]
[136.51748657 156.05192566]
[132.41186523 170.47911072]
[118.24169922 175.39909363]
[106.07885742 166.62040710]
[106.28471375 151.62263489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 13]
[5 12]
[6 11]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[31 93]
[32 92]
[33 91]
[34 90]
[38 84]
[39 83]
[40 82]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 67]
[47 66]
[49 62]
[50 61]
[51 60]
[52 59]
[101 133]
[102 132]
[103 131]
[106 128]
[107 127]
[108 126]
[109 125]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
