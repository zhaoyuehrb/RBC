%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUACCUGCUCCACCCUCAAUCCACCAGAACCAUGGGCUGCUGUGGCUGUUCCGAAGGCUGUGGCUCCGGCUGUGGGGGCUGUGGCUCCGGCUGUGGGGGCUGUGGCUCUGGCUGUGGGGGAUGUGGCUCCA\
) } def
/len { sequence length } bind def

/coor [
[82.31732178 446.01135254]
[67.69448090 450.16360474]
[52.59632874 448.39886475]
[39.32522202 440.98629761]
[29.90490532 429.05624390]
[25.77191162 414.42797852]
[27.55649185 399.33215332]
[34.98651123 386.07080078]
[46.92894363 376.66619873]
[61.56265640 372.55245972]
[63.30405045 357.65386963]
[65.04544067 342.75527954]
[58.83800507 329.21582031]
[68.12509155 316.40722656]
[69.86648560 301.50863647]
[71.43441010 286.59082031]
[72.82865906 271.65576172]
[74.22290802 256.72070312]
[75.61715698 241.78562927]
[77.01140594 226.85057068]
[78.40565491 211.91551208]
[76.36673737 208.93299866]
[75.72383118 204.78794861]
[77.01930237 200.17254639]
[80.45391846 195.99978638]
[82.88658142 181.19836426]
[85.14686584 166.36962891]
[87.23446655 151.51560974]
[89.32205963 136.66159058]
[91.40966034 121.80757141]
[93.49725342 106.95354462]
[86.04726410 107.78063965]
[78.00978088 104.42323303]
[63.74393463 99.78797913]
[49.47808838 95.15271759]
[35.21224213 90.51746368]
[20.94639206 85.88220978]
[6.68054485 81.24695587]
[-9.23900986 85.18393707]
[-20.41176796 73.17970276]
[-15.34415245 57.58319092]
[0.75070751 54.43874741]
[11.31579971 66.98110962]
[25.58164787 71.61636353]
[39.84749603 76.25161743]
[54.11334229 80.88687134]
[68.37918854 85.52212524]
[82.64503479 90.15737915]
[68.56703949 84.97955322]
[58.30358124 74.04056549]
[54.03241348 59.66151047]
[56.65981293 44.89341354]
[65.62828827 32.86983109]
[79.03485870 26.14199257]
[94.03485870 26.13744164]
[107.44551086 32.85714340]
[116.42127991 44.87527847]
[119.05764008 59.64178085]
[114.79520416 74.02342224]
[104.53855133 84.96852875]
[115.20668030 74.42381287]
[125.87480164 63.87909317]
[136.54293823 53.33437729]
[147.21105957 42.78966141]
[157.87919617 32.24494553]
[168.54731750 21.70022964]
[179.21545410 11.15551472]
[189.88357544 0.61079878]
[200.55171204 -9.93391705]
[211.21983337 -20.47863197]
[215.59545898 -35.68272781]
[230.08638000 -39.12692261]
[240.75450134 -49.67163849]
[245.13012695 -64.87573242]
[259.62106323 -68.31993103]
[270.28918457 -78.86464691]
[274.66479492 -94.06874084]
[289.15573120 -97.51293945]
[299.82385254 -108.05765533]
[310.49197388 -118.60237122]
[321.16012573 -129.14707947]
[331.82824707 -139.69180298]
[335.64056396 -155.64166260]
[351.43466187 -160.05505371]
[362.96295166 -148.39183044]
[358.36611938 -132.65014648]
[342.37295532 -129.02366638]
[331.70483398 -118.47895813]
[321.03671265 -107.93424225]
[310.36856079 -97.38952637]
[299.70043945 -86.84481049]
[296.08786011 -72.39494324]
[280.83389282 -68.19651794]
[270.16577148 -57.65180206]
[266.55319214 -43.20193481]
[251.29922485 -39.00350952]
[240.63108826 -28.45879555]
[237.01852417 -14.00893021]
[221.76455688 -9.81050396]
[211.09642029 0.73421150]
[200.42829895 11.27892780]
[189.76016235 21.82364273]
[179.09204102 32.36835861]
[168.42390442 42.91307449]
[157.75578308 53.45779037]
[147.08764648 64.00251007]
[136.41952515 74.54722595]
[125.75139618 85.09194183]
[115.08326721 95.63665771]
[108.35127258 109.04114532]
[106.26367950 123.89516449]
[104.17608643 138.74919128]
[102.08848572 153.60321045]
[100.00089264 168.45722961]
[101.91558075 177.48469543]
[97.68800354 183.63102722]
[95.25534058 198.43244934]
[93.34071350 213.30975342]
[91.94646454 228.24481201]
[90.55221558 243.17987061]
[89.15796661 258.11492920]
[87.76371765 273.04998779]
[86.36947632 287.98507690]
[88.70209503 296.91366577]
[84.76506042 303.25003052]
[83.02366638 318.14862061]
[89.10654449 332.75372314]
[79.94401550 344.49667358]
[78.20262146 359.39526367]
[76.46122742 374.29385376]
[89.75179291 381.67147827]
[99.20346069 393.57669067]
[103.37493134 408.19406128]
[101.63006592 423.29452515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 130]
[11 129]
[12 128]
[14 126]
[15 125]
[16 123]
[17 122]
[18 121]
[19 120]
[20 119]
[21 118]
[25 117]
[26 116]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[67 102]
[68 101]
[69 100]
[70 99]
[72 97]
[73 96]
[75 94]
[76 93]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
