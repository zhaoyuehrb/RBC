%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUAAGGAGAAUCACUCCUUGAUAGCUGAGUUCAUCCUCACAGGAUUUACAUAUCAUCCAAAGCUGAAGACUGUUCUGUUUGUGGUGUUCUUUGCCA\
) } def
/len { sequence length } bind def

/coor [
[40.01036835 207.45805359]
[32.22616196 214.13948059]
[22.78281021 218.06944275]
[12.61644936 218.87844849]
[2.72868466 216.50543213]
[-5.91208887 211.20187378]
[-17.96454239 220.13150024]
[-30.01699829 229.06114197]
[-42.06945038 237.99076843]
[-54.12190628 246.92041016]
[-66.17436218 255.85003662]
[-78.22681427 264.77966309]
[-82.00123596 280.37240601]
[-96.60565948 287.01245117]
[-110.83683014 279.60614014]
[-113.77780151 263.83496094]
[-103.17252350 251.79721069]
[-87.15644836 252.72721863]
[-75.10399628 243.79757690]
[-63.05154037 234.86795044]
[-50.99908447 225.93832397]
[-38.94662857 217.00868225]
[-26.89417648 208.07905579]
[-14.84172153 199.14941406]
[-16.80598259 179.15237427]
[-6.52896404 161.73112488]
[12.16832733 153.67253113]
[32.14999390 158.22348022]
[42.67379379 147.53471375]
[46.08960724 133.03707886]
[61.28509903 128.63168335]
[71.80890656 117.94293213]
[82.33270264 107.25417328]
[82.32498932 92.76464844]
[92.49064636 82.43965149]
[106.97853088 82.22203064]
[117.50233459 71.53326416]
[128.02613831 60.84450912]
[138.54994202 50.15575027]
[135.52696228 33.60015869]
[142.83595276 18.62430954]
[157.45462036 10.97461033]
[173.59904480 13.45682049]
[183.78533936 2.44594240]
[193.97163391 -8.56493568]
[204.15792847 -19.57581329]
[214.34422302 -30.58669090]
[224.53051758 -41.59756851]
[234.71681213 -52.60844803]
[228.93920898 -64.70232391]
[227.67404175 -78.01316833]
[231.05346680 -90.91657257]
[238.64413452 -101.84548187]
[249.50270081 -109.48052979]
[262.29296875 -112.90927887]
[275.45034790 -111.73523712]
[287.37316895 -106.12358093]
[298.22430420 -116.47988129]
[309.07543945 -126.83618164]
[306.87280273 -142.19613647]
[314.14895630 -155.90150452]
[328.10604858 -162.68231201]
[343.37728882 -159.93119812]
[354.09057617 -148.70600891]
[356.12646484 -133.32307434]
[348.70205688 -119.69743347]
[334.67224121 -113.06842804]
[319.43173218 -115.98505402]
[308.58059692 -105.62875366]
[297.72946167 -95.27245331]
[303.39868164 -79.51717377]
[301.69250488 -62.80522537]
[292.89944458 -48.42747879]
[278.70822144 -39.23566055]
[261.88354492 -37.07677460]
[245.72769165 -42.42215347]
[235.54139709 -31.41127586]
[225.35510254 -20.40039825]
[215.16880798 -9.38952065]
[204.98251343 1.62135756]
[194.79621887 12.63223553]
[184.60992432 23.64311409]
[188.42155457 36.53993607]
[185.29391479 49.73135376]
[175.94909668 59.70294952]
[162.78010559 63.74304581]
[149.23870850 60.67955017]
[138.71490479 71.36830902]
[128.19110107 82.05706787]
[117.66729736 92.74582672]
[117.67501068 107.23535156]
[107.50935364 117.56034851]
[93.02146912 117.77796936]
[82.49766541 128.46673584]
[71.97386169 139.15548706]
[67.80532074 154.41766357]
[53.36255264 158.05851746]
[42.83875275 168.74728394]
[46.86413193 178.31311035]
[47.72582245 188.62548828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[28 98]
[29 97]
[31 95]
[32 94]
[33 93]
[36 90]
[37 89]
[38 88]
[39 87]
[43 82]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[57 70]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
