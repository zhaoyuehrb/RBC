%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCGAGAGGGGGCAGCAGGCGAUGGCGGCGGCGGUAGCUGCGGCGGGUCGGUUAGGCUGGUUGUUCGCCGCGCUCUGCCUGGGCAACGCCGCGGGGGAGGCCGCGCCGGGCCCGCGAGUGC\
) } def
/len { sequence length } bind def

/coor [
[139.37702942 123.91049957]
[134.97395325 121.93043518]
[131.34031677 117.87377167]
[117.07446289 113.23851776]
[102.80861664 108.60326385]
[99.04947662 109.91811371]
[94.72200012 109.51061249]
[90.63568115 107.16407776]
[87.66617584 103.04393005]
[73.79001617 97.34724426]
[59.91386032 91.65055847]
[44.20917130 93.56713867]
[35.37392807 81.57598877]
[21.49776840 75.87930298]
[5.79307938 77.79589081]
[-3.04216480 65.80473328]
[-16.91832352 60.10804749]
[-30.79448128 54.41136169]
[-44.67063904 48.71467590]
[-58.68557358 43.36849594]
[-72.83042908 38.37620544]
[-88.41899109 41.07943726]
[-97.84555817 29.54735184]
[-111.99041748 24.55505943]
[-126.13527679 19.56276703]
[-140.28013611 14.57047272]
[-158.23846436 18.40037918]
[-169.19018555 4.74942064]
[-183.45602417 0.11416592]
[-198.97172546 3.20828795]
[-208.68513489 -8.08326530]
[-222.95097351 -12.71852016]
[-237.21682739 -17.35377502]
[-251.48266602 -21.98903084]
[-265.74853516 -26.62428474]
[-281.66809082 -22.68730545]
[-292.84082031 -34.69153595]
[-287.77322388 -50.28805161]
[-271.67834473 -53.43249512]
[-261.11325073 -40.89013290]
[-246.84741211 -36.25487900]
[-232.58157349 -31.61962318]
[-218.31571960 -26.98436737]
[-204.04988098 -22.34911346]
[-189.55456543 -25.77478027]
[-178.82077026 -14.15168190]
[-164.55493164 -9.51642704]
[-153.56639099 -14.73922157]
[-141.59539795 -10.90873623]
[-135.28784180 0.42561501]
[-121.14298248 5.41790819]
[-106.99812317 10.41020107]
[-92.85326385 15.40249443]
[-78.27644348 12.34217834]
[-67.83813477 24.23134613]
[-53.69327927 29.22364044]
[-48.98316193 27.95388985]
[-43.42948914 29.71032906]
[-38.97395325 34.83851624]
[-25.09779358 40.53520584]
[-11.22163677 46.23189163]
[2.65452170 51.92857742]
[17.36669540 49.60453033]
[27.19445610 62.00314713]
[41.07061386 67.69982910]
[55.78278732 65.37578583]
[65.61054993 77.77439880]
[79.48670959 83.47108459]
[93.36286163 89.16777039]
[107.44387054 94.33741760]
[121.70971680 98.97267151]
[135.97557068 103.60792542]
[150.40597534 107.70220947]
[164.98045349 111.24969482]
[179.55493164 114.79718018]
[194.12940979 118.34465790]
[208.70388794 121.89214325]
[223.27836609 125.43962860]
[232.47200012 124.42766571]
[238.17224121 129.26373291]
[252.65296936 133.17636108]
[259.30819702 131.81327820]
[264.78555298 133.79492188]
[267.75341797 137.66651917]
[282.01928711 142.30177307]
[296.28512573 146.93702698]
[310.55096436 151.57228088]
[322.44961548 146.40747070]
[334.28314209 150.64363098]
[339.83282471 161.47074890]
[353.97769165 166.46304321]
[369.56625366 163.75981140]
[378.99282837 175.29188538]
[393.13766479 180.28417969]
[407.28253174 185.27647400]
[421.42739868 190.26876831]
[435.57223511 195.26106262]
[449.71990967 188.21696472]
[464.67797852 193.31907654]
[471.57211304 207.54042053]
[466.31213379 222.44371033]
[452.01870728 229.18710327]
[437.17184448 223.76985168]
[430.57995605 209.40592957]
[416.43508911 204.41363525]
[402.29025269 199.42134094]
[388.14538574 194.42904663]
[374.00051880 189.43675232]
[359.42370605 192.49707031]
[348.98538208 180.60789490]
[334.84054565 175.61560059]
[317.84616089 179.79646301]
[305.91571045 165.83813477]
[291.64987183 161.20288086]
[277.38403320 156.56762695]
[263.11816406 151.93237305]
[248.74035645 147.65707397]
[234.25962830 143.74446106]
[219.73088074 140.01411438]
[205.15640259 136.46662903]
[190.58192444 132.91914368]
[176.00744629 129.37165833]
[161.43296814 125.82416534]
[146.85848999 122.27667999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[9 69]
[10 68]
[11 67]
[13 65]
[14 64]
[16 62]
[17 61]
[18 60]
[19 59]
[20 56]
[21 55]
[23 53]
[24 52]
[25 51]
[26 50]
[28 47]
[29 46]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[73 124]
[74 123]
[75 122]
[76 121]
[77 120]
[78 119]
[80 118]
[81 117]
[84 116]
[85 115]
[86 114]
[87 113]
[90 111]
[91 110]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
