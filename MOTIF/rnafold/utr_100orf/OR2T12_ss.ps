%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAUGAGAAAUACUACCCCAGAUUUUAUUCUCCUAGGACUCUUUAACCACACCAGAGCCCACCAAGUCCUCUUCAUGAUGCUUCUGGCCACCGUUU\
) } def
/len { sequence length } bind def

/coor [
[47.02475739 159.85154724]
[35.57694626 147.31018066]
[27.03676033 132.63356018]
[12.82968712 137.44593811]
[-1.37738597 142.25833130]
[-15.58445930 147.07070923]
[-29.79153252 151.88310242]
[-36.84088898 165.77354431]
[-51.31743622 170.45159912]
[-64.51640320 163.64552307]
[-78.72348022 168.45790100]
[-92.93054962 173.27029419]
[-107.13762665 178.08267212]
[-111.48732758 188.29472351]
[-120.60971832 194.22033691]
[-131.26454163 194.04969788]
[-139.82820129 188.08816528]
[-154.30697632 192.00799561]
[-163.50741577 205.15072632]
[-179.52755737 206.00805664]
[-190.07809448 193.92228699]
[-187.06558228 178.16461182]
[-172.80094910 170.82296753]
[-158.22680664 177.52922058]
[-143.74803162 173.60939026]
[-131.36181641 158.89903259]
[-111.95001221 163.87561035]
[-97.74293518 159.06321716]
[-83.53586578 154.25082397]
[-69.32878876 149.43844604]
[-62.98321915 136.01200867]
[-48.64377975 130.92916870]
[-34.60391998 137.67602539]
[-20.39684677 132.86364746]
[-6.18977261 128.05125427]
[8.01730061 123.23886871]
[22.22437477 118.42648315]
[20.25260544 105.37924194]
[20.45432091 92.18538666]
[22.82402420 79.20452118]
[27.29712868 66.79042816]
[33.75172424 55.28144455]
[42.01189041 44.99125290]
[51.85250092 36.20030212]
[63.00535202 29.14818954]
[75.16648102 24.02711487]
[88.00443268 20.97665215]
[101.16931915 20.07994080]
[114.30234528 21.36141968]
[127.04555511 24.78616524]
[139.05165100 30.26083374]
[149.99342346 37.63621521]
[159.57263184 46.71129990]
[167.52819824 57.23875046]
[173.64332581 68.93164062]
[177.75132751 81.47128296]
[192.60462952 79.37855530]
[207.45793152 77.28582001]
[222.31123352 75.19309235]
[237.16453552 73.10036469]
[251.98348999 70.77689362]
[266.76452637 68.22323608]
[280.52209473 56.10810471]
[296.74798584 62.59051514]
[311.44244385 59.57840729]
[320.16110229 46.67015839]
[335.10626221 43.82478333]
[347.35858154 52.21623230]
[362.05303955 49.20412445]
[376.74749756 46.19202042]
[388.64797974 34.90879059]
[404.29064941 39.83203888]
[407.58370972 55.89715195]
[395.13952637 66.57771301]
[379.75961304 60.88648224]
[365.06515503 63.89858627]
[350.37069702 66.91069031]
[342.40795898 79.44586945]
[327.54861450 82.70989990]
[314.45455933 74.27287292]
[299.76010132 77.28498077]
[292.74978638 87.27864838]
[280.39959717 89.82768250]
[269.31817627 83.00426483]
[254.53713989 85.55792236]
[248.37333679 89.87452698]
[239.25726318 87.95365906]
[224.40396118 90.04639435]
[209.55065918 92.13912201]
[194.69735718 94.23184967]
[179.84407043 96.32458496]
[178.81866455 113.27411652]
[174.23590088 129.62454224]
[166.30264282 144.63790894]
[155.37690735 157.63662720]
[141.95184326 168.03401184]
[126.63333893 175.36079407]
[110.11278534 179.28628540]
[93.13581085 179.63331604]
[76.46864319 176.38624573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[10 30]
[11 29]
[12 28]
[13 27]
[17 25]
[18 24]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 85]
[62 84]
[64 81]
[65 80]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
