%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGACGCGAUCUGUUGGCUACUACUGGCUUCUCCUGGCUGUUAAAAGCAGAUGGUGGUUGAGGUUGAUUCCAUGCCGGCUGCCUCUUCUGUGAAGAAGCCAUUUGGUCUCAGGAGCAAGAUGGGCAAGUGGUGCUGCCGUUGCUUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[152.19261169 405.24114990]
[148.53390503 390.69421387]
[144.87519836 376.14724731]
[141.21649170 361.60028076]
[137.55778503 347.05334473]
[132.84716797 341.29812622]
[133.97656250 332.17013550]
[130.61729431 317.55114746]
[127.25804138 302.93212891]
[116.86698914 292.26089478]
[121.31720734 277.07846069]
[117.95794678 262.45947266]
[115.11737823 260.27349854]
[113.22225189 256.57510376]
[112.98445892 251.83706665]
[114.87140656 246.83760071]
[112.41847229 232.03952026]
[109.96554565 217.24145508]
[100.25112915 205.95077515]
[105.62755585 191.07110596]
[103.17462158 176.27302551]
[100.72169495 161.47494507]
[91.85121155 156.25271606]
[87.25315094 146.79756165]
[88.68109894 136.15870667]
[95.89984131 127.91897583]
[94.05651093 113.03266144]
[85.78462219 101.76024628]
[91.05718231 88.81066132]
[89.21385193 73.92435455]
[87.37052917 59.03804398]
[85.52720642 44.15173721]
[83.68388367 29.26542854]
[81.84056091 14.37912083]
[79.38762665 -0.41895819]
[76.32923126 -15.10385609]
[72.82006836 -29.68760490]
[68.86345673 -44.15637207]
[64.90684509 -58.62514114]
[60.95023727 -73.09391022]
[56.99362564 -87.56267548]
[43.79503250 -89.02964783]
[31.91771507 -94.89771271]
[22.77745438 -104.44300842]
[17.45544052 -116.50482178]
[16.57039833 -129.62670898]
[20.20673370 -142.23237610]
[27.90702248 -152.81498718]
[38.72942352 -160.11730957]
[35.37016678 -174.73631287]
[32.01090622 -189.35531616]
[28.65164757 -203.97433472]
[25.29238892 -218.59333801]
[10.89317417 -232.64291382]
[17.20713615 -250.88108826]
[13.25052547 -265.34985352]
[9.29391575 -279.81863403]
[5.33730507 -294.28738403]
[1.38069499 -308.75616455]
[-2.57591534 -323.22491455]
[-6.53252554 -337.69369507]
[-11.02211952 -342.68228149]
[-12.10721874 -348.34005737]
[-10.34147167 -352.83801270]
[-13.70073032 -367.45700073]
[-17.05998993 -382.07601929]
[-20.56915665 -396.65975952]
[-24.22786140 -411.20672607]
[-36.02610016 -422.59677124]
[-31.79912186 -438.44180298]
[-15.89527893 -442.44177246]
[-4.67508221 -430.48187256]
[-9.68090820 -414.86541748]
[-6.02220201 -400.31848145]
[-1.31159294 -394.56326294]
[-2.44098139 -385.43527222]
[0.91827726 -370.81625366]
[4.27753592 -356.19726562]
[7.93624210 -341.65029907]
[11.89285183 -327.18154907]
[15.84946251 -312.71276855]
[19.80607224 -298.24398804]
[23.76268387 -283.77523804]
[27.71929359 -269.30645752]
[31.67590332 -254.83769226]
[41.03488922 -250.55206299]
[46.57775879 -241.61793518]
[46.24766541 -230.88876343]
[39.91139603 -221.95259094]
[43.27065659 -207.33358765]
[46.62991333 -192.71458435]
[49.98917389 -178.09556580]
[53.34843063 -163.47656250]
[69.87958527 -160.24815369]
[83.39913177 -150.11000061]
[91.17982483 -135.04724121]
[91.62602997 -118.04438019]
[84.60071564 -102.49386597]
[71.46239471 -91.51928711]
[75.41900635 -77.05052185]
[79.37561035 -62.58174896]
[83.33222198 -48.11298370]
[87.28883362 -33.64421463]
[90.21675110 -31.57672691]
[92.26212311 -27.95926094]
[92.69422913 -23.23497200]
[91.01412964 -18.16225052]
[94.07252502 -3.47735357]
[96.40904236 -1.82455683]
[98.21031952 0.88184869]
[99.06084442 4.43478298]
[98.63078308 8.47688580]
[96.72686768 12.53579617]
[98.57019043 27.42210388]
[100.41351318 42.30841064]
[102.25683594 57.19472122]
[104.10015869 72.08102417]
[105.94348907 86.96733856]
[114.21537781 98.23975372]
[108.94281769 111.18933868]
[110.78614807 126.07564545]
[123.66965485 141.52696228]
[115.51977539 159.02201843]
[117.97270203 173.82009888]
[120.42562866 188.61817932]
[130.31550598 200.96730042]
[124.76362610 214.78851318]
[127.21655273 229.58659363]
[129.66947937 244.38467407]
[132.57695007 259.10018921]
[135.93621826 273.71920776]
[146.56755066 285.43609619]
[141.87704468 299.57287598]
[145.23631287 314.19186401]
[148.59556580 328.81088257]
[152.10473633 343.39462280]
[155.76344299 357.94158936]
[159.42214966 372.48855591]
[163.08085632 387.03549194]
[166.73956299 401.58245850]
[181.74969482 404.15454102]
[194.41236877 412.61483765]
[202.53369141 425.49752808]
[204.70660400 440.57061768]
[200.55462646 455.22262573]
[190.79711914 466.91497803]
[177.12463379 473.62188721]
[161.90599060 474.18136597]
[147.77793884 468.49649048]
[137.18823242 457.55218506]
[131.97160339 443.24459839]
[133.03186035 428.05264282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 140]
[2 139]
[3 138]
[4 137]
[5 136]
[7 135]
[8 134]
[9 133]
[11 131]
[12 130]
[16 129]
[17 128]
[18 127]
[20 125]
[21 124]
[22 123]
[26 121]
[27 120]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[34 113]
[35 108]
[36 107]
[37 103]
[38 102]
[39 101]
[40 100]
[41 99]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[60 80]
[61 79]
[64 78]
[65 77]
[66 76]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
