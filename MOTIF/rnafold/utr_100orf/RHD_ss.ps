%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUUGGAGAGAGGGGUGAUGCCUGGUGCUGGUGGAACCCCUGCACAGAGACGGACACAGGAUGAGCUCUAAGUACCCGCGGUCUGUCCGGCGCUGCCUGCCCCUCUGGGCCCUAACACUGGAAGCAGCUCUCAUUCUCCUCUUCUAUUUUUUUACCCACU\
) } def
/len { sequence length } bind def

/coor [
[143.06846619 402.39483643]
[141.91319275 387.43939209]
[140.75791931 372.48394775]
[139.60266113 357.52850342]
[121.54177094 345.13323975]
[118.36510468 323.18472290]
[132.51329041 305.75491333]
[129.64010620 291.03265381]
[126.76694489 276.31039429]
[123.89377594 261.58813477]
[121.02059937 246.86589050]
[118.14743042 232.14363098]
[108.11555481 221.13406372]
[113.06623840 206.10737610]
[110.19306946 191.38511658]
[107.31990051 176.66285706]
[104.44673157 161.94059753]
[101.57355499 147.21833801]
[98.70038605 132.49607849]
[95.82721710 117.77381897]
[79.35547638 103.44324493]
[87.44023132 80.01696014]
[75.45973206 70.99102020]
[63.47923279 61.96507645]
[50.67454910 69.83261871]
[33.49195480 68.62102509]
[18.43281174 56.33364105]
[3.58925271 58.49437714]
[-11.25430584 60.65510941]
[-26.09786415 62.81584167]
[-38.63955688 72.46035004]
[-52.34864044 66.63709259]
[-67.19219971 68.79782867]
[-75.25897980 82.19413757]
[-90.06617737 87.22215271]
[-104.62228394 81.50781250]
[-112.05435181 67.74923706]
[-108.85318756 52.44281387]
[-96.53028107 42.81576538]
[-80.90413666 43.41369247]
[-69.35293579 53.95426941]
[-54.50937653 51.79353333]
[-43.02939224 42.30358124]
[-28.25859833 47.97228622]
[-13.41504002 45.81155014]
[1.42851889 43.65081787]
[16.27207756 41.49008179]
[19.81153679 34.87780380]
[11.89816666 22.13501930]
[26.89045334 21.65324593]
[30.42991257 15.04096794]
[23.99617577 1.49080062]
[17.56243896 -12.05936623]
[11.12870216 -25.60953331]
[4.69496489 -39.15970230]
[-1.73877180 -52.70986938]
[-8.17250824 -66.26003265]
[-23.28958130 -69.22319794]
[-33.64218903 -80.38907623]
[-35.41386795 -95.33314514]
[-28.13330078 -108.29969025]
[-34.56703568 -121.84985352]
[-46.38431931 -123.59587860]
[-55.78165054 -130.77433777]
[-60.47781372 -141.49620056]
[-59.40407944 -153.03138733]
[-52.94505692 -162.50367737]
[-58.85182190 -176.29171753]
[-64.75859070 -190.07977295]
[-76.55360413 -202.25819397]
[-68.11631012 -216.96357727]
[-51.64993668 -212.92686462]
[-50.97054672 -195.98652649]
[-45.06377792 -182.19848633]
[-39.15701294 -168.41044617]
[-21.80538177 -162.68630981]
[-13.96981239 -145.82885742]
[-21.01687050 -128.28359985]
[-14.58313370 -114.73342896]
[0.06664335 -112.17959595]
[10.52725029 -101.36110687]
[12.63638783 -86.28115845]
[5.37765837 -72.69377136]
[11.81139565 -59.14360428]
[18.24513245 -45.59343719]
[24.67886925 -32.04327011]
[31.11260605 -18.49310303]
[37.54634094 -4.94293642]
[43.98007965 8.60723114]
[72.25545502 23.65379143]
[72.50517273 49.98457718]
[84.48567200 59.01052094]
[96.46617126 68.03646088]
[111.34861755 69.91072083]
[125.19293976 64.13710022]
[139.03726196 58.36347961]
[152.88159180 52.58985901]
[166.72590637 46.81623840]
[168.73660278 30.29775429]
[182.11703491 17.68890762]
[202.20878601 16.39602470]
[214.52822876 7.83848619]
[226.84767151 -0.71905196]
[239.16709900 -9.27659035]
[245.66000366 -24.33561707]
[261.97720337 -25.97311401]
[271.33294678 -12.50456142]
[264.10287476 2.21474576]
[247.72463989 3.04284787]
[235.40521240 11.60038567]
[223.08576965 20.15792274]
[210.76632690 28.71546173]
[216.40626526 42.61478043]
[231.20542908 40.16837692]
[239.01252747 26.61908913]
[253.72007751 21.30663490]
[268.38360596 26.73938942]
[276.07946777 40.35217285]
[273.17388916 55.71744537]
[261.03878784 65.58020020]
[245.40403748 65.28353882]
[233.65184021 54.96753693]
[218.85267639 57.41394043]
[203.70291138 70.39947510]
[185.48632812 70.82720184]
[172.49952698 60.66056061]
[158.65521240 66.43418121]
[144.81088257 72.20780182]
[130.96656799 77.98142242]
[117.12223816 83.75505066]
[121.43678284 95.92546082]
[118.58360291 107.49694824]
[110.54947662 114.90065002]
[113.42264557 129.62290955]
[116.29581451 144.34516907]
[119.16899109 159.06742859]
[122.04216003 173.78968811]
[124.91532898 188.51194763]
[127.78849792 203.23420715]
[138.02587891 215.29681396]
[132.86968994 229.27046204]
[135.74285889 243.99272156]
[138.61602783 258.71496582]
[141.48919678 273.43722534]
[144.36236572 288.15948486]
[147.23554993 302.88174438]
[155.41401672 304.88854980]
[162.60127258 309.21157837]
[168.16186523 315.44519043]
[171.61112976 323.01593018]
[172.65739441 331.23516846]
[171.22657776 339.36187744]
[167.46702576 346.66928101]
[161.73439026 352.50997925]
[154.55810547 356.37322998]
[155.71336365 371.32867432]
[156.86863708 386.28411865]
[158.02391052 401.23956299]
[169.22363281 412.72631836]
[167.08294678 428.62591553]
[153.24400330 436.74151611]
[138.32284546 430.84756470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[22 93]
[23 92]
[24 91]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[33 41]
[51 89]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[61 79]
[62 78]
[67 75]
[68 74]
[69 73]
[94 130]
[95 129]
[96 128]
[97 127]
[98 126]
[101 112]
[102 111]
[103 110]
[104 109]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
