%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCAAGAAAACCAGCGAAGGCCCGGCCCCCCAGCAGAGGCCGGACCAUGGUUGACCAGUUGCGGGAGCGCACCACCAUGGCCGACCCGCUGCGGGAGCGCACCGAGCUGUUGCUGGCCGACUACCUGGGGUACUGCGCCCGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[224.61044312 390.06677246]
[227.73905945 376.29296875]
[235.91668701 364.72317505]
[228.14628601 351.89270020]
[220.37586975 339.06225586]
[212.60546875 326.23178101]
[204.83506775 313.40130615]
[190.35418701 310.10891724]
[182.29112244 297.20770264]
[185.84266663 282.04113770]
[178.07226562 269.21069336]
[174.68515015 268.02523804]
[171.72286987 265.10241699]
[170.01310730 260.66925049]
[170.24612427 255.32151794]
[163.29667664 242.02845764]
[156.34724426 228.73541260]
[149.39779663 215.44235229]
[136.64765930 213.33209229]
[127.31624603 204.11134338]
[124.98566437 191.00331116]
[130.73257446 178.77813721]
[124.06304932 165.34245300]
[109.90846252 160.84988403]
[102.95321655 147.31919861]
[107.76141357 132.50303650]
[101.09188843 119.06735229]
[87.39301300 114.34643555]
[80.95046234 101.36799622]
[85.47243500 87.60217285]
[78.80290985 74.16649628]
[72.13337708 60.73081970]
[59.06694794 51.81011963]
[60.33834457 36.96987534]
[53.66881943 23.53419876]
[46.99929047 10.09852314]
[40.32976151 -3.33715343]
[29.75909805 -6.23339939]
[22.70075989 -14.32809162]
[21.32847786 -24.75762939]
[25.85906792 -34.00661469]
[19.75801849 -47.70979691]
[7.07660723 -57.16983795]
[8.96833515 -71.94382477]
[2.86728525 -85.64700317]
[-3.23376441 -99.35018158]
[-9.62516308 -105.97064209]
[-9.31574821 -113.40482330]
[-15.12848186 -127.23276520]
[-20.94121552 -141.06071472]
[-26.75395012 -154.88865662]
[-32.56668472 -168.71661377]
[-38.37941742 -182.54455566]
[-44.19215012 -196.37249756]
[-52.66540146 -196.67111206]
[-60.63387680 -199.46652222]
[-67.38220215 -204.48638916]
[-72.31094360 -211.25964355]
[-74.98979950 -219.16065979]
[-75.19515991 -227.46697998]
[-72.92859650 -235.42544556]
[-68.41490936 -242.32041931]
[-62.08000565 -247.53817749]
[-66.11380768 -261.98562622]
[-70.14759827 -276.43304443]
[-74.18139648 -290.88049316]
[-86.27033997 -301.96154785]
[-82.45467377 -317.91061401]
[-66.65962982 -322.32064819]
[-55.13379288 -310.65502930]
[-59.73395920 -294.91430664]
[-55.70016479 -280.46685791]
[-51.66636658 -266.01940918]
[-47.63256836 -251.57197571]
[-27.50210762 -242.96339417]
[-20.02822304 -222.09718323]
[-30.36420441 -202.18524170]
[-24.55146980 -188.35728455]
[-18.73873520 -174.52934265]
[-12.92600250 -160.70140076]
[-7.11326838 -146.87344360]
[-1.30053473 -133.04550171]
[4.51219893 -119.21755219]
[10.46941757 -105.45123291]
[16.57046700 -91.74805450]
[22.67151642 -78.04486847]
[34.91653824 -69.56497192]
[33.46120071 -53.81084442]
[39.56224823 -40.10766220]
[55.99916840 -29.99713326]
[53.76543808 -10.00668144]
[60.43496704 3.42899513]
[67.10449219 16.86467171]
[73.77402496 30.30034828]
[86.36340332 38.26004028]
[85.56905365 54.06129074]
[92.23858643 67.49697113]
[98.90811157 80.93264771]
[112.60698700 85.65356445]
[119.04953766 98.63200378]
[114.52756500 112.39782715]
[121.19709015 125.83350372]
[135.90565491 130.96147156]
[142.47810364 144.68217468]
[137.49871826 158.67292786]
[144.16825867 172.10861206]
[160.82272339 177.35652161]
[168.40957642 192.70903015]
[162.69085693 208.49291992]
[169.64028931 221.78596497]
[176.58973694 235.07902527]
[183.53916931 248.37207031]
[190.90272522 261.44027710]
[198.67314148 274.27075195]
[213.75920105 278.14996338]
[221.45672607 291.27255249]
[217.66552734 305.63092041]
[225.43592834 318.46136475]
[233.20634460 331.29183960]
[240.97674561 344.12231445]
[248.74714661 356.95275879]
[264.89834595 355.26187134]
[280.12109375 360.74890137]
[291.39797974 372.27258301]
[296.51721191 387.50042725]
[294.50628662 403.38088989]
[285.81610107 416.75469971]
[293.85351562 429.41964722]
[301.89089966 442.08456421]
[309.92831421 454.74948120]
[317.96569824 467.41439819]
[326.00311279 480.07931519]
[341.49743652 480.91918945]
[353.51766968 490.73211670]
[357.44180298 505.74481201]
[351.76089478 520.18457031]
[338.65939331 528.49902344]
[323.17507935 527.49114990]
[311.26202393 517.54840088]
[307.50097656 502.49401855]
[313.33819580 488.11669922]
[305.30078125 475.45178223]
[297.26339722 462.78686523]
[289.22598267 450.12194824]
[281.18856812 437.45703125]
[273.15118408 424.79211426]
[259.43353271 427.08316040]
[245.83862305 423.95098877]
[234.43559265 415.83831787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[10 114]
[11 113]
[15 112]
[16 111]
[17 110]
[18 109]
[22 106]
[23 105]
[26 102]
[27 101]
[30 98]
[31 97]
[32 96]
[34 94]
[35 93]
[36 92]
[37 91]
[41 89]
[42 88]
[44 86]
[45 85]
[46 84]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[63 74]
[64 73]
[65 72]
[66 71]
[127 146]
[128 145]
[129 144]
[130 143]
[131 142]
[132 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
