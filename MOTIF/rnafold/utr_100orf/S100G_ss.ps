%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCCUCUUUGAUUCUUCUAGCUGUUUCACUAUUGGGCAACCAGACACCAGAAUGAGUACUAAAAAGUCUCCUGAGGAACUGAAGAGGAUUUUUGAAAAAUAUGCAGCCAAAGAAGGUGAUCCAGACCAGUUGUCAAAGGAUGAACUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[323.72418213 274.19696045]
[312.88534546 256.35467529]
[306.56161499 236.45100403]
[305.11376953 215.60952759]
[308.62719727 195.00764465]
[294.66937256 189.51405334]
[280.71157837 184.02046204]
[266.75375366 178.52687073]
[252.79594421 173.03327942]
[238.83813477 167.53968811]
[224.88032532 162.04609680]
[210.92251587 156.55252075]
[196.96470642 151.05892944]
[182.28800964 153.59741211]
[172.28036499 141.34353638]
[158.32255554 135.84994507]
[144.36474609 130.35635376]
[130.40693665 124.86276245]
[116.44912720 119.36917114]
[102.49131775 113.87558746]
[87.50363922 114.48346710]
[74.03657532 121.08937836]
[60.56950378 127.69528961]
[58.04218674 143.00517273]
[46.97499847 153.88160706]
[31.62350273 156.14241028]
[17.89066124 148.91822815]
[11.05703163 134.98693848]
[13.75028419 119.70537567]
[24.93480873 108.94963074]
[40.30992889 106.85549927]
[53.96359253 114.22822571]
[67.43065643 107.62231445]
[80.89772797 101.01640320]
[79.46251678 93.65500641]
[75.15687561 71.57081604]
[60.19460678 70.50761414]
[45.23233414 69.44441986]
[30.72946930 77.09941864]
[16.99458504 68.13922882]
[18.15695190 51.78132629]
[33.02082825 44.85332108]
[46.29552841 54.48214722]
[61.25780106 55.54534531]
[76.22007751 56.60853958]
[80.25160217 50.28423691]
[67.60299683 42.22118378]
[54.95439911 34.15812683]
[42.30579376 26.09507179]
[27.78464508 22.33526039]
[26.87318039 7.36297894]
[40.83101654 1.86945760]
[50.36885071 13.44647026]
[63.01745224 21.50952530]
[75.66605377 29.57258034]
[88.31465912 37.63563538]
[92.34618378 31.31133461]
[85.06665802 18.19613457]
[77.78712463 5.08093596]
[70.84484100 -0.94782066]
[70.49604034 -8.37466049]
[63.48381042 -21.63470078]
[56.47158051 -34.89474106]
[42.30371857 -43.15329361]
[42.64247131 -59.54894257]
[57.13936234 -67.21524811]
[70.88123322 -58.26576996]
[69.73162079 -41.90696716]
[76.74385071 -28.64692879]
[83.75608063 -15.38689041]
[90.90232849 -2.19859362]
[98.18185425 10.91660595]
[105.46138763 24.03180504]
[128.74728394 54.95327377]
[126.85511017 85.10006714]
[107.98490906 99.91777039]
[121.94271851 105.41136169]
[135.90052795 110.90495300]
[149.85833740 116.39854431]
[163.81614685 121.89213562]
[177.77395630 127.38571930]
[193.44900513 125.24016571]
[202.45829773 137.10112000]
[216.41610718 142.59469604]
[230.37391663 148.08828735]
[244.33172607 153.58187866]
[258.28955078 159.07546997]
[272.24734497 164.56906128]
[286.20516968 170.06265259]
[300.16296387 175.55624390]
[314.12078857 181.04983521]
[320.37048340 170.43022156]
[328.04187012 160.79052734]
[336.98367310 152.31962585]
[347.01986694 145.18339539]
[357.95288086 139.52139282]
[369.56771851 135.44421387]
[381.63604736 133.03126526]
[393.92068481 132.32925415]
[406.18032837 133.35127258]
[418.17428589 136.07655334]
[429.66717529 140.45088196]
[440.43347168 146.38771057]
[450.26214600 153.76983643]
[458.96051025 162.45172119]
[466.35830688 172.26235962]
[472.31072998 183.00865173]
[476.70153809 194.47921753]
[479.44512939 206.44853210]
[494.40740967 205.38533020]
[509.36968994 204.32212830]
[519.53417969 192.22010803]
[535.28594971 190.93328857]
[547.27984619 201.22514343]
[548.40008545 216.98968506]
[537.98199463 228.87408447]
[522.20648193 229.82756042]
[510.43289185 219.28440857]
[495.47061157 220.34761047]
[480.50833130 221.41079712]
[480.07144165 228.95068359]
[478.98681641 236.42492676]
[477.26254272 243.77798462]
[474.91143799 250.95523071]
[471.95095825 257.90335083]
[468.40307617 264.57067871]
[464.29421997 270.90768433]
[459.65484619 276.86730957]
[454.51947021 282.40524292]
[448.92626953 287.48034668]
[457.49530029 299.79177856]
[466.06430054 312.10324097]
[474.63333130 324.41470337]
[483.20236206 336.72613525]
[491.89572144 348.95013428]
[500.71249390 361.08538818]
[509.52926636 373.22064209]
[524.72253418 379.39282227]
[526.70556641 395.67163086]
[513.43841553 405.31082153]
[498.56912231 398.39440918]
[497.39401245 382.03741455]
[488.57723999 369.90216064]
[479.76046753 357.76690674]
[473.24621582 354.18301392]
[470.89089966 345.29516602]
[462.32189941 332.98370361]
[453.75286865 320.67227173]
[445.18383789 308.36080933]
[436.61480713 296.04934692]
[417.46704102 304.25201416]
[396.91668701 307.70486450]
[376.12438965 306.20925903]
[356.26528931 299.84609985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 91]
[6 90]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[21 34]
[22 33]
[23 32]
[36 45]
[37 44]
[38 43]
[57 73]
[58 72]
[59 71]
[61 70]
[62 69]
[63 68]
[109 120]
[110 119]
[111 118]
[130 150]
[131 149]
[132 148]
[133 147]
[134 146]
[135 144]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
