%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUUUCUCCAUAGGUGCCAGGCAGCCUUCAGAGGCCAGUAAAGAUACCCGGAGUAUGAGUCAUCGGUCAGACACCCUUCCUGUGCCCUCUGGUCAGAGGAGAGGCCGGGUCCCCAGAGACCACAGCAUCUAUACCCAGCUGUUGGAGAUAACGC\
) } def
/len { sequence length } bind def

/coor [
[106.02034760 212.52159119]
[104.22375488 197.62957764]
[102.42716980 182.73756409]
[100.63057709 167.84553528]
[98.83399200 152.95352173]
[79.98380280 149.03862000]
[63.77816772 138.64471436]
[52.35818863 123.14503479]
[38.07390594 127.72315979]
[23.78962135 132.30128479]
[9.50533772 136.87940979]
[5.06202555 146.88455200]
[-3.98571610 152.64733887]
[-14.49074650 152.45170593]
[-22.95496178 146.60614014]
[-37.41097641 150.60910034]
[-51.86699295 154.61204529]
[-66.32300568 158.61499023]
[-70.28887939 174.63957214]
[-81.71754456 186.42156982]
[-97.43351746 190.82283020]
[-113.13771820 186.73733521]
[-124.58344269 175.36735535]
[-138.95646667 179.65875244]
[-151.25379944 193.33003235]
[-168.14935303 188.67485046]
[-182.43363953 193.25297546]
[-196.71792603 197.83110046]
[-211.00221252 202.40922546]
[-221.61741638 214.90921021]
[-237.69955444 211.70037842]
[-242.70471191 196.08370972]
[-231.48400879 184.12429810]
[-215.58033752 188.12495422]
[-201.29605103 183.54682922]
[-187.01176453 178.96870422]
[-172.72747803 174.39056396]
[-166.89024353 163.75563049]
[-154.98275757 159.84518433]
[-143.24786377 165.28573608]
[-128.87484741 160.99433899]
[-126.58779907 147.49980164]
[-118.66182709 136.26013184]
[-106.60292053 129.51019287]
[-92.74555206 128.62226868]
[-79.80080414 133.82742310]
[-70.32595825 144.15898132]
[-55.86994553 140.15603638]
[-41.41392899 136.15307617]
[-26.95791435 132.15013123]
[-14.51098919 117.39541626]
[4.92721176 122.59512329]
[19.21149635 118.01699829]
[33.49578094 113.43887329]
[47.78006363 108.86074829]
[47.04977798 98.69279480]
[48.28090668 88.57326508]
[51.42784500 78.87701416]
[56.37401962 69.96321106]
[62.93621445 62.16204834]
[70.87134552 55.76250076]
[64.47922516 42.19265366]
[58.08710480 28.62280464]
[42.81911087 25.85369492]
[32.11904526 14.61589336]
[30.10129738 -0.76943469]
[37.54173660 -14.38631725]
[51.57936096 -20.99878502]
[66.81641388 -18.06420898]
[77.39394379 -6.71099377]
[79.24467468 8.69531727]
[71.65695190 22.23068428]
[78.04907227 35.80053329]
[84.44119263 49.37038040]
[101.58956146 47.05750275]
[118.56826782 50.39501953]
[125.76299286 37.23310852]
[125.59304047 21.41281319]
[138.48683167 13.95631027]
[145.68154907 0.79439628]
[152.87626648 -12.36751747]
[160.07099915 -25.52943230]
[167.26571655 -38.69134521]
[167.09576416 -54.51163864]
[179.98954773 -61.96814346]
[187.18428040 -75.13005829]
[194.24694824 -88.36329651]
[201.17687988 -101.66653442]
[199.92591858 -118.01789856]
[213.61207581 -127.05235291]
[228.15618896 -119.47602844]
[228.59652710 -103.08279419]
[214.48011780 -94.73660278]
[207.55018616 -81.43336487]
[207.24743652 -74.00664520]
[200.34619141 -67.93533325]
[193.15147400 -54.77342224]
[193.83602905 -39.89455795]
[180.42762756 -31.49662590]
[173.23291016 -18.33471107]
[166.03819275 -5.17279673]
[158.84346008 7.98911762]
[151.64874268 21.15103149]
[152.33331299 36.02989578]
[138.92491150 44.42782974]
[131.73017883 57.58974075]
[140.68418884 64.45561218]
[148.13462830 73.22176361]
[153.67704773 83.55498505]
[156.98162842 95.03588867]
[171.96286011 94.28582764]
[186.94410706 93.53575897]
[201.92533875 92.78569031]
[212.34066772 80.89886475]
[228.11593628 79.94174194]
[239.89198303 90.48216248]
[240.68226624 106.26667786]
[230.01792908 117.93061829]
[214.22595215 118.55397797]
[202.67539978 107.76692200]
[187.69416809 108.51699066]
[172.71293640 109.26705933]
[157.73170471 110.01712799]
[153.29672241 124.34649658]
[165.23498535 133.42823792]
[177.17324829 142.50996399]
[189.11151123 151.59169006]
[201.04977417 160.67343140]
[214.88888550 154.13604736]
[230.18040466 154.79043579]
[243.41043091 162.48620605]
[251.53881836 175.45494080]
[252.69770813 190.71650696]
[246.62080383 204.76391602]
[234.70452881 214.36918640]
[219.68716431 217.32507324]
[205.01957703 212.95236206]
[194.07229614 202.25584412]
[189.36090088 187.69351196]
[191.96803284 172.61169434]
[180.02976990 163.52995300]
[168.09150696 154.44822693]
[156.15324402 145.36650085]
[144.21498108 136.28475952]
[129.85673523 146.28813171]
[113.72600555 151.15692139]
[115.52259827 166.04895020]
[117.31919098 180.94096375]
[119.11577606 195.83299255]
[120.91236877 210.72500610]
[134.10711670 219.11743164]
[138.77102661 234.04330444]
[132.70193481 248.45510864]
[118.76548004 255.54803467]
[103.54204559 251.97299194]
[94.21965027 239.41802979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[8 55]
[9 54]
[10 53]
[11 52]
[15 50]
[16 49]
[17 48]
[18 47]
[23 41]
[24 40]
[26 37]
[27 36]
[28 35]
[29 34]
[61 74]
[62 73]
[63 72]
[76 106]
[77 105]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[85 97]
[86 96]
[87 94]
[88 93]
[110 123]
[111 122]
[112 121]
[113 120]
[124 144]
[125 143]
[126 142]
[127 141]
[128 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
