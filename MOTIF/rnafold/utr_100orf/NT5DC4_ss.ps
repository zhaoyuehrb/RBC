%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACACCAACAACUGCACCUACUUUCUUACAGGGUUGGAUGCCUAUAACAUGCCUGCAUGGAUUUUUGUCAACCGCAGCCUGGCGCUGGGGAAGAUUCGUUGCUUUGGCUUCGACAUGGACUACACUCUGGCUGCCUACAAGUCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[96.07593536 127.98804474]
[85.39636230 138.52116394]
[70.93465424 134.53883362]
[67.15270233 120.02343750]
[77.83187103 109.49071503]
[70.60097504 107.49971008]
[57.87660217 115.44264984]
[45.23499298 123.51667023]
[32.67749786 131.72088623]
[20.12000084 139.92510986]
[7.56250334 148.12933350]
[-4.99499416 156.33355713]
[-8.41998005 168.81146240]
[-19.10057068 175.37803650]
[-30.99351120 172.96090698]
[-43.71788025 180.90383911]
[-56.44225311 188.84678650]
[-53.90575027 203.83460999]
[-57.30279160 218.65110779]
[-66.11534882 231.03686523]
[-78.99957275 239.10317993]
[-93.99070740 241.61996460]
[-108.80272675 238.20343018]
[-121.17688751 229.37458801]
[-129.22624207 216.47976685]
[-131.72329712 201.48532104]
[-128.28729248 186.67782593]
[-119.44217682 174.31527710]
[-106.53677368 166.28289795]
[-91.53907013 163.80557251]
[-76.73609161 167.26104736]
[-64.38520050 176.12242126]
[-51.66082764 168.17947388]
[-38.93645477 160.23652649]
[-31.57562447 144.33557129]
[-13.19921684 143.77606201]
[-0.64171922 135.57183838]
[11.91577816 127.36761475]
[24.47327423 119.16339111]
[37.03077316 110.95916748]
[40.93490982 104.62777710]
[49.93365860 102.71828461]
[62.65802765 94.77533722]
[96.07855225 82.23670959]
[100.06056213 67.77491760]
[87.46634674 59.41769028]
[78.08460236 47.59291840]
[72.82424164 33.46645355]
[72.18864441 18.42613792]
[76.22747803 3.94544840]
[84.53309631 -8.56085777]
[96.28160858 -17.87495995]
[110.31464386 -23.09456062]
[125.25349426 -23.72028160]
[129.23550415 -38.18207932]
[133.21752930 -52.64387512]
[127.21099091 -71.84309387]
[141.42187500 -84.90120697]
[144.80285645 -99.51521301]
[148.18383789 -114.12921143]
[151.41362000 -128.77737427]
[154.49183655 -143.45811462]
[157.57006836 -158.13887024]
[160.64830017 -172.81962585]
[163.72653198 -187.50038147]
[166.80476379 -202.18113708]
[169.88299561 -216.86187744]
[172.96122742 -231.54263306]
[176.03945923 -246.22338867]
[171.29882812 -261.31765747]
[181.48329163 -272.18624878]
[184.56152344 -286.86700439]
[187.63975525 -301.54776001]
[181.23837280 -312.79278564]
[184.14741516 -324.98837280]
[194.26617432 -331.68878174]
[197.64715576 -346.30279541]
[201.02813721 -360.91677856]
[192.44773865 -374.18902588]
[195.84700012 -389.62341309]
[209.20921326 -398.06301880]
[224.60681152 -394.50076294]
[232.90466309 -381.05004883]
[229.17980957 -365.69097900]
[215.64213562 -357.53579712]
[212.26115417 -342.92181396]
[208.88017273 -328.30780029]
[214.91896057 -311.85922241]
[202.32051086 -298.46951294]
[199.24227905 -283.78875732]
[196.16404724 -269.10800171]
[201.12484741 -255.06381226]
[190.72019958 -243.14515686]
[187.64198303 -228.46440125]
[184.56375122 -213.78366089]
[181.48551941 -199.10290527]
[178.40728760 -184.42214966]
[175.32905579 -169.74139404]
[172.25082397 -155.06063843]
[169.17259216 -140.37989807]
[166.09436035 -125.69913483]
[167.81069946 -118.46152496]
[162.79783630 -110.74822998]
[159.41685486 -96.13423157]
[156.03587341 -81.52023315]
[162.24244690 -73.30604553]
[162.88255310 -62.80982590]
[157.49943542 -53.52081680]
[147.67932129 -48.66186142]
[143.69731140 -34.20006561]
[139.71530151 -19.73826790]
[152.22828674 -11.55376339]
[161.61157227 0.11345332]
[166.93643188 14.12865925]
[167.66961670 29.12377167]
[163.72674561 43.63088608]
[155.48182678 56.22597504]
[143.73176575 65.66867065]
[129.61941528 71.02441406]
[114.52236176 71.75692749]
[110.54034424 86.21872711]
[119.63701630 74.29183960]
[133.86347961 69.53706360]
[148.30345154 73.59751129]
[157.96687317 85.06999969]
[159.51434326 99.98996735]
[152.41110229 113.20146942]
[139.11181641 120.13898468]
[124.21237183 118.40509796]
[112.86140442 108.59868622]
[119.72644806 121.93552399]
[126.59149170 135.27235413]
[133.45654297 148.60919189]
[148.23841858 153.52178955]
[155.01057434 167.14503479]
[150.23605347 181.20703125]
[157.10110474 194.54385376]
[172.22650146 199.12619019]
[179.60781860 213.10087585]
[174.86582947 228.17698669]
[160.81387329 235.41012573]
[145.78874207 230.50901794]
[138.70457458 216.38137817]
[143.76426697 201.40890503]
[136.89923096 188.07206726]
[122.68053436 183.78669739]
[115.52841187 170.35905457]
[120.11970520 155.47424316]
[113.25466156 142.13740540]
[106.38961792 128.80056763]
[99.52456665 115.46373749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[15 34]
[16 33]
[17 32]
[44 121]
[45 120]
[54 111]
[55 110]
[56 109]
[58 105]
[59 104]
[60 103]
[61 101]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[71 91]
[72 90]
[73 89]
[76 87]
[77 86]
[78 85]
[130 151]
[131 150]
[132 149]
[133 148]
[136 145]
[137 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
