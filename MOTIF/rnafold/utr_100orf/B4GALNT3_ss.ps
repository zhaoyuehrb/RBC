%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAGCCCCCGGGCCGCGCGGCCCCCGCUGCUCCUGCGCCCGGUGAAGCUGCUGCGGAGGCGCUUCCGGCUGCUGCUGGCGCUCGCCGUGGUGUCUG\
) } def
/len { sequence length } bind def

/coor [
[-42.23910522 225.83241272]
[-54.19978714 216.78022766]
[-57.79700470 202.21795654]
[-51.42607880 188.63668823]
[-65.90485382 192.55651855]
[-80.38362885 196.47634888]
[-94.86240387 200.39617920]
[-109.34117889 204.31599426]
[-123.81996155 208.23582458]
[-127.84490967 224.18597412]
[-139.26177979 235.89929199]
[-154.92387390 240.28143311]
[-170.58110046 236.24037170]
[-182.03327942 224.95681763]
[-196.38314819 229.32504272]
[-210.73301697 233.69326782]
[-225.08288574 238.06147766]
[-239.43275452 242.42970276]
[-250.23005676 254.77272034]
[-266.26342773 251.32846069]
[-271.03912354 235.64009094]
[-259.64428711 223.84645081]
[-243.80096436 228.07983398]
[-229.45109558 223.71160889]
[-215.10124207 219.34339905]
[-200.75137329 214.97517395]
[-186.40150452 210.60694885]
[-184.16445923 197.03880310]
[-176.23049927 185.72573853]
[-164.11972046 178.93568420]
[-150.19633484 178.06025696]
[-137.20716858 183.32989502]
[-127.73978424 193.75704956]
[-113.26100922 189.83721924]
[-98.78223419 185.91738892]
[-84.30345917 181.99757385]
[-69.82468414 178.07774353]
[-55.34590912 174.15791321]
[-41.37874985 168.68814087]
[-28.08857727 161.73318481]
[-14.79840755 154.77822876]
[-1.50823689 147.82327271]
[11.78193378 140.86833191]
[24.96233368 133.70751953]
[38.02977753 126.34261322]
[51.09722137 118.97770691]
[64.16466522 111.61279297]
[77.23210907 104.24787903]
[90.29955292 96.88297272]
[95.32411957 90.38306427]
[103.88991547 89.49944305]
[117.18008423 82.54449463]
[123.46897125 75.67117310]
[130.99349976 75.58719635]
[144.49353027 69.04893494]
[157.99357605 62.51066589]
[171.39030457 55.76324081]
[184.68046570 48.80828476]
[197.97064209 41.85333252]
[211.26080322 34.89838028]
[219.90042114 21.64440727]
[234.76441956 22.59857178]
[248.05459595 15.64361954]
[261.34475708 8.68866634]
[264.51940918 -6.62327576]
[276.82565308 -16.27164459]
[292.45278931 -15.70077515]
[304.02224731 -5.18021441]
[306.07119751 10.32254982]
[297.63226318 23.48758698]
[282.69000244 28.09877014]
[268.29971313 21.97883606]
[255.00955200 28.93379021]
[241.71937561 35.88874435]
[234.03038025 48.64525223]
[218.21575928 48.18855286]
[204.92559814 55.14350510]
[191.63542175 62.09845734]
[178.34524536 69.05341339]
[173.79835510 75.04934692]
[164.53184509 76.01070404]
[151.03179932 82.54897308]
[137.53175354 89.08723450]
[124.13503265 95.83466339]
[110.84486389 102.78961945]
[97.66446686 109.95041656]
[84.59702301 117.31532288]
[71.52957916 124.68023682]
[58.46213150 132.04515076]
[45.39468765 139.41006470]
[32.32724762 146.77496338]
[26.25515747 153.84054565]
[18.73688698 154.15849304]
[5.44671631 161.11344910]
[-7.84345436 168.06840515]
[-21.13362503 175.02336121]
[-34.42379379 181.97830200]
[-20.52535629 187.62042236]
[-13.27606583 200.75234985]
[-15.90777493 215.51968384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[51 85]
[52 84]
[54 83]
[55 82]
[56 81]
[57 79]
[58 78]
[59 77]
[60 76]
[62 74]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
