%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGCAGGCGCACUGGGUUCGCCGCGCCGAACUGCAGCCAUGGAGCAGGCACCUCCGGACCCCGAGCGGCAGCUCCAGCCGGCGCCCUUGGAGCCGCUGGGCUCCCCAGACGCUGGGCUGGGGGCUGCGGUCGGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[-25.50035667 321.33163452]
[-33.88521576 333.76925659]
[-42.27007294 346.20687866]
[-50.65493011 358.64447021]
[-58.90266418 371.17343140]
[-67.01227570 383.79223633]
[-67.96417999 399.58477783]
[-81.35409546 406.10855103]
[-89.46370697 418.72735596]
[-97.57331848 431.34616089]
[-95.58185577 447.26513672]
[-106.88883209 458.64633179]
[-122.82049561 456.75909424]
[-131.15544128 443.05114746]
[-125.49980927 428.03802490]
[-110.19212341 423.23654175]
[-102.08251190 410.61773682]
[-93.97290039 397.99893188]
[-93.60104370 383.10897827]
[-79.63108063 375.68264771]
[-71.52146912 363.06384277]
[-70.54374695 355.67916870]
[-63.09254074 350.25961304]
[-54.70768356 337.82202148]
[-46.32282639 325.38439941]
[-37.93796921 312.94677734]
[-43.11870193 294.23580933]
[-32.81456757 277.42556763]
[-13.19817162 273.43096924]
[-5.65065718 260.46813965]
[1.89685714 247.50531006]
[9.44437122 234.54248047]
[16.99188614 221.57965088]
[17.64429665 214.15917969]
[24.85025978 208.41757202]
[32.68071365 195.62365723]
[40.51116562 182.82975769]
[48.34161758 170.03584290]
[56.17207336 157.24194336]
[64.00252533 144.44804382]
[71.83297729 131.65412903]
[79.66342926 118.86022949]
[72.32424164 98.17331696]
[82.31871796 78.63047028]
[76.23774719 64.91837311]
[70.15677643 51.20626831]
[64.07579803 37.49416351]
[57.99482727 23.78206253]
[51.91385269 10.06995964]
[40.14035034 4.67985249]
[35.37808609 -6.92806101]
[39.68944931 -18.28202820]
[33.91116333 -32.12440491]
[19.56870461 -38.20154190]
[13.90589046 -52.32199478]
[19.78790092 -65.95788574]
[14.00961399 -79.80026245]
[8.23132706 -93.64263916]
[1.98989880 -100.42029572]
[2.48184538 -107.85312653]
[-2.99096537 -121.81909943]
[-14.39947033 -134.36032104]
[-5.50654936 -148.79473877]
[10.82556725 -144.24519348]
[10.97500515 -127.29190826]
[16.44781685 -113.32594299]
[22.07370377 -99.42092896]
[27.85199165 -85.57855225]
[33.63027573 -71.73617554]
[47.46142197 -66.32923126]
[53.51861572 -52.37340927]
[47.75354004 -37.90269089]
[53.53182983 -24.06031418]
[68.03015137 -14.23139477]
[65.62595367 3.98898602]
[71.70693207 17.70108795]
[77.78790283 31.41319084]
[83.86887360 45.12529373]
[89.94985199 58.83739853]
[96.03082275 72.54949951]
[111.52194214 74.77046967]
[123.34496307 85.02344513]
[137.69006348 80.63962555]
[152.03517151 76.25579834]
[166.38027954 71.87197113]
[180.72538757 67.48815155]
[195.07049561 63.10432434]
[197.45942688 48.06922150]
[206.10417175 35.61307526]
[219.24606323 28.17594910]
[234.25212097 27.18634033]
[248.14244080 32.78708267]
[258.18197632 43.81762695]
[272.52709961 39.43380356]
[286.87219238 35.04997635]
[301.21731567 30.66615295]
[315.56240845 26.28232765]
[329.90753174 21.89850235]
[340.69140625 9.54375267]
[356.72851562 12.97056961]
[361.52124023 28.65373611]
[350.13925171 40.45975876]
[334.29135132 36.24361038]
[319.94622803 40.62743378]
[305.60113525 45.01125717]
[291.25604248 49.39508438]
[276.91091919 53.77890778]
[262.56582642 58.16273499]
[260.40725708 72.92098999]
[252.02050781 85.32953644]
[239.02470398 92.89722443]
[223.97050476 94.07674408]
[209.83964539 88.58075714]
[199.45431519 77.44943237]
[185.10920715 81.83325958]
[170.76409912 86.21707916]
[156.41900635 90.60090637]
[142.07389832 94.98473358]
[127.72878265 99.36855316]
[126.91288757 106.70677948]
[124.18980408 113.56972504]
[119.75251770 119.47106171]
[113.91547394 123.99257660]
[107.09230804 126.81386566]
[99.76655579 127.73499298]
[92.45733643 126.69068146]
[84.62688446 139.48458862]
[76.79643250 152.27848816]
[68.96598053 165.07240295]
[61.13552475 177.86630249]
[53.30507278 190.66020203]
[45.47461700 203.45411682]
[37.64416504 216.24801636]
[29.95471764 229.12716675]
[22.40720367 242.08999634]
[14.85968971 255.05282593]
[7.31217527 268.01565552]
[-0.23533885 280.97848511]
[5.03468513 290.40960693]
[5.86590004 301.09979248]
[2.17335653 311.07986450]
[-5.30082560 318.53988647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 21]
[6 20]
[8 18]
[9 17]
[10 16]
[29 138]
[30 137]
[31 136]
[32 135]
[33 134]
[35 133]
[36 132]
[37 131]
[38 130]
[39 129]
[40 128]
[41 127]
[42 126]
[44 80]
[45 79]
[46 78]
[47 77]
[48 76]
[49 75]
[52 73]
[53 72]
[56 69]
[57 68]
[58 67]
[60 66]
[61 65]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
