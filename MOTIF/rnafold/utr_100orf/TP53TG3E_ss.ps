%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUGCACCGCGAUGCGCGCCUCACCCUGCAUCUCCCAGCCCGCAGCCAGCUGGCAUCCUAGACCCUCUGCCCUGCGACCAACAGCCGGGAGCGGACCAGACACCAGAACUC\
) } def
/len { sequence length } bind def

/coor [
[108.18672180 273.19906616]
[119.92481232 263.44302368]
[116.24253082 248.90203857]
[105.61763000 238.46360779]
[109.73043060 223.18632507]
[106.04814911 208.64530945]
[93.16126251 201.26535034]
[89.21976471 186.57116699]
[97.04792786 173.10424805]
[93.36564636 158.56324768]
[89.68336487 144.02224731]
[86.00107574 129.48124695]
[73.01069641 121.98123932]
[58.57667923 126.06278992]
[44.14265823 130.14434814]
[29.70863914 134.22589111]
[15.27461815 138.30744934]
[0.84059840 142.38900757]
[-2.85195303 157.29740906]
[-13.51555538 168.35105896]
[-28.28175354 172.57656860]
[-43.17851257 168.83731079]
[-54.19868469 158.13911438]
[-58.37789154 143.35974121]
[-54.59195328 128.47477722]
[-43.85926437 117.48818970]
[-29.06686592 113.35533142]
[-14.19383907 117.18790436]
[-3.24095345 127.95497894]
[11.19306660 123.87342834]
[25.62708664 119.79187775]
[40.06110764 115.71032715]
[54.49512482 111.62877655]
[68.92914581 107.54721832]
[71.84693909 100.63806152]
[56.90164566 99.35815430]
[53.50058365 84.74881744]
[66.34391785 76.99970245]
[77.68253326 86.81974792]
[80.60032654 79.91058350]
[73.46111298 66.71848297]
[66.32190704 53.52637482]
[52.94899750 45.07203293]
[53.69623566 30.19618416]
[46.55702591 17.00407791]
[31.65307999 11.06674099]
[27.14070702 -4.32864952]
[36.48141479 -17.37206841]
[52.50980759 -18.05772018]
[62.93027878 -5.85963249]
[59.74913025 9.86486626]
[66.88834381 23.05697250]
[79.75061035 30.56772614]
[79.51400757 46.38716507]
[86.65322113 59.57926941]
[93.79243469 72.77137756]
[101.29243469 72.77137756]
[101.29266357 57.77137756]
[116.29266357 57.77183914]
[116.29243469 72.77137756]
[123.79243469 72.77137756]
[130.93164062 59.57926941]
[138.07086182 46.38716507]
[145.21006775 33.19505692]
[147.43106079 16.38721657]
[164.19688416 13.86854267]
[171.25836182 29.28190613]
[158.40217590 40.33426666]
[151.26295471 53.52637482]
[144.12374878 66.71848297]
[136.98454285 79.91058350]
[146.03375244 91.87351227]
[160.67070007 88.59329987]
[175.30764771 85.31307983]
[187.08180237 74.74521637]
[201.19303894 79.51203156]
[215.82998657 76.23181152]
[221.86085510 61.93467712]
[235.16094971 53.94174194]
[250.61611938 55.32646179]
[262.28353882 65.55638123]
[265.67681885 80.69788361]
[259.49121094 94.92876434]
[246.10517883 102.77694702]
[230.66593933 101.22464752]
[219.11019897 90.86875916]
[204.47325134 94.14897919]
[193.74601746 104.48222351]
[178.58786011 99.95002747]
[163.95091248 103.23024750]
[149.31398010 106.51045990]
[125.19749451 128.14082336]
[100.54208374 125.79895782]
[104.22436523 140.33996582]
[107.90664673 154.88096619]
[111.58892822 169.42196655]
[124.88313293 177.53997803]
[128.41035461 192.33906555]
[120.58914948 204.96302795]
[124.27143097 219.50404358]
[135.15971375 230.98252869]
[130.78353882 245.21975708]
[134.46582031 259.76074219]
[149.43251038 262.75421143]
[161.61305237 271.95187378]
[168.58898926 285.52755737]
[168.97523499 300.78579712]
[162.69511414 314.69702148]
[150.99552917 324.49920654]
[136.19946289 328.24609375]
[121.24466705 325.19372559]
[109.10044098 315.94815063]
[102.17802429 302.34509277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[5 100]
[6 99]
[9 96]
[10 95]
[11 94]
[12 93]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[40 56]
[41 55]
[42 54]
[44 52]
[45 51]
[61 71]
[62 70]
[63 69]
[64 68]
[72 91]
[73 90]
[74 89]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
