%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUACAAUAGAAGCUCGGUUGGAGAGGCCUGCGGAGAAAAGCUGGGAACGGCCGCUUCCGGCAUGUUCAUCUCUGGACGAAGAACGGCCGACAAGUGGAGGGCGGAGGAGAGACUCCAAUGCCCAGCGGGCAGUGCGCGGGCGGCGCUUGCGCGAUGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[62.91961288 146.12222290]
[58.14876175 160.34329224]
[53.37790680 174.56436157]
[48.60705185 188.78544617]
[43.83620071 203.00651550]
[51.10031891 217.04248047]
[46.23235321 232.07838440]
[32.12038040 239.19369507]
[17.13678169 234.16703796]
[10.17106247 219.98062134]
[15.35585976 205.05101013]
[29.61512566 198.23567200]
[34.38597870 184.01458740]
[39.15683365 169.79351807]
[43.92768478 155.57244873]
[48.69853973 141.35136414]
[36.99654770 131.96716309]
[24.15131378 139.71311951]
[16.32907104 153.46531677]
[1.43456185 153.41181946]
[-11.41067314 161.15779114]
[-19.23291588 174.90998840]
[-34.12742615 174.85649109]
[-46.97266006 182.60244751]
[-52.20931244 197.76678467]
[-67.37779999 202.99139404]
[-80.84216309 194.26840210]
[-82.27368164 178.28933716]
[-70.57423401 167.31198120]
[-54.71862030 169.75721741]
[-41.87338638 162.01126099]
[-34.96992111 148.81309509]
[-19.15663528 148.31254578]
[-6.31139994 140.56658936]
[0.59206468 127.36842346]
[16.40535164 126.86788177]
[29.25058746 119.12191772]
[28.25394630 111.68843842]
[14.73056316 118.17828369]
[4.37941360 107.32224274]
[11.50546551 94.12301636]
[26.26066399 96.82146454]
[25.26402283 89.38797760]
[10.83204937 85.29919434]
[-3.59992337 81.21041107]
[-18.03189659 77.12162781]
[-33.79002762 81.66181946]
[-45.41169357 70.09165192]
[-40.94152451 54.31351089]
[-24.97804260 50.55860519]
[-13.94311237 62.68965530]
[0.48886034 66.77843475]
[14.92083359 70.86721802]
[29.35280609 74.95600891]
[40.30686569 64.70863342]
[37.18819046 50.03642273]
[34.06951523 35.36420822]
[30.95084000 20.69199371]
[27.83216476 6.01978016]
[15.19671440 -7.34639454]
[21.21170044 -23.81178474]
[17.81424904 -38.42196274]
[14.41679859 -53.03214264]
[11.01934624 -67.64231873]
[6.00618219 -75.33365631]
[7.69910049 -82.56295776]
[4.58042479 -97.23516846]
[1.46174955 -111.90738678]
[-1.65692580 -126.57959747]
[-4.77560139 -141.25181580]
[-15.21304035 -153.14173889]
[-10.29096699 -167.19956970]
[-13.40964222 -181.87178040]
[-27.30082703 -189.05293274]
[-33.27839661 -203.50294495]
[-28.51992416 -218.39895630]
[-15.27221680 -226.70751953]
[0.20956385 -224.50558472]
[10.61539459 -212.83285522]
[11.03196049 -197.20082092]
[1.26257169 -184.99046326]
[4.38124704 -170.31823730]
[14.59561729 -159.47776794]
[9.89661312 -144.37048340]
[13.01528835 -129.69827271]
[16.13396263 -115.02606201]
[19.25263977 -100.35384369]
[22.37131500 -85.68163300]
[25.62952614 -71.03977203]
[29.02697754 -56.42959213]
[32.42442703 -41.81941605]
[35.82188034 -27.20923615]
[45.94062042 -20.52899742]
[48.87111664 -8.35024071]
[42.50437927 2.90110493]
[45.62305450 17.57331848]
[48.74172974 32.24553299]
[51.86040497 46.91774750]
[54.97908020 61.58996201]
[87.48690796 48.29582596]
[117.93170166 56.32365417]
[135.05996704 78.30152130]
[149.03793335 72.85941315]
[163.01589966 67.41729736]
[176.99385071 61.97517776]
[190.97181702 56.53306198]
[197.39375305 42.34163666]
[211.64691162 37.02167892]
[225.13668823 43.23146439]
[239.11465454 37.78934860]
[253.09260559 32.34723282]
[267.07055664 26.90511894]
[279.63684082 15.52419281]
[294.05166626 24.44880486]
[289.46624756 40.77088547]
[272.51269531 40.88307953]
[258.53472900 46.32519531]
[244.55676270 51.76731110]
[230.57881165 57.20942688]
[224.83923340 70.90588379]
[210.74111938 76.62408447]
[196.41392517 70.51102448]
[182.43597412 75.95314026]
[168.45800781 81.39525604]
[154.48005676 86.83737183]
[140.50209045 92.27948761]
[141.04199219 103.94718933]
[138.28828430 115.29812622]
[132.46194458 125.42140198]
[142.39233398 136.66362000]
[157.32736206 141.88429260]
[159.95417786 156.54544067]
[169.88456726 167.78765869]
[179.81495667 179.02987671]
[194.74998474 184.25054932]
[197.37680054 198.91169739]
[207.30718994 210.15390015]
[217.23756409 221.39611816]
[227.16795349 232.63833618]
[237.09834290 243.88055420]
[247.02873230 255.12277222]
[256.95910645 266.36499023]
[266.88949585 277.60720825]
[276.81988525 288.84942627]
[291.83740234 296.71774292]
[288.43386841 313.32653809]
[271.53195190 314.65377808]
[265.57766724 298.77981567]
[255.64727783 287.53759766]
[245.71688843 276.29537964]
[235.78651428 265.05316162]
[225.85612488 253.81094360]
[215.92573547 242.56872559]
[205.99534607 231.32650757]
[196.06497192 220.08428955]
[186.13458252 208.84207153]
[171.90983582 204.42552185]
[168.57273865 188.96025085]
[158.64234924 177.71803284]
[148.71195984 166.47581482]
[134.48722839 162.05926514]
[131.15011597 146.59399414]
[121.21972656 135.35177612]
[106.33972168 146.78651428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[17 37]
[18 36]
[20 34]
[21 33]
[23 31]
[24 30]
[43 54]
[44 53]
[45 52]
[46 51]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[61 92]
[62 91]
[63 90]
[64 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[72 82]
[73 81]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[109 119]
[110 118]
[111 117]
[112 116]
[129 163]
[130 162]
[132 160]
[133 159]
[134 158]
[136 156]
[137 155]
[138 154]
[139 153]
[140 152]
[141 151]
[142 150]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
