%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGGGGUGGUCGCCAUGGAGACGCGUGGCCCUGGCCUGGCGGUCCGCGCUGAGAGUCGCCGAUUAGUCGGCAUCGGGCCUCGGGCGCCCCCGGGGCGGGUUGGGUUGCAGCCCA\
) } def
/len { sequence length } bind def

/coor [
[66.08501434 140.46432495]
[69.67487335 125.90074158]
[62.39280701 124.10588074]
[49.60846710 131.95193481]
[36.82413101 139.79800415]
[24.03979111 147.64405823]
[38.39521408 151.99398804]
[46.78375626 164.42910767]
[45.44086075 179.36888123]
[34.96918488 190.10870361]
[20.06814003 191.82884216]
[7.42492962 183.75733948]
[2.71349788 169.51646423]
[8.04859638 155.49671936]
[-5.97664690 160.81578064]
[-20.00189018 166.13485718]
[-34.02713394 171.45393372]
[-48.05237961 176.77301025]
[-62.07762146 182.09208679]
[-68.33453369 196.60505676]
[-83.05172729 202.36526489]
[-97.49774170 195.95524597]
[-103.10202026 181.17797852]
[-96.53964233 166.80055237]
[-81.70394897 161.35281372]
[-67.39669800 168.06683350]
[-53.37145233 162.74775696]
[-39.34620667 157.42869568]
[-25.32096481 152.10961914]
[-11.29572010 146.79054260]
[2.72952342 141.47146606]
[16.19372940 134.85972595]
[28.97806740 127.01366425]
[41.76240540 119.16760254]
[54.54674530 111.32154083]
[94.93141174 82.25024414]
[97.33758545 67.44449615]
[99.74375153 52.63874054]
[102.14992523 37.83298492]
[104.55609131 23.02723122]
[106.96226501 8.22147846]
[105.23851013 -0.88527697]
[109.63692474 -6.94727564]
[112.43972778 -21.68309212]
[115.24253845 -36.41890717]
[118.04534149 -51.15472412]
[120.84815216 -65.89054108]
[123.65095520 -80.62635803]
[117.15310669 -97.79101562]
[128.97587585 -110.68393707]
[131.38203430 -125.48969269]
[133.78820801 -140.29544067]
[136.19438171 -155.10119629]
[138.60055542 -169.90695190]
[131.64421082 -186.89097595]
[143.11656189 -200.09666443]
[145.12435913 -214.96168518]
[147.13215637 -229.82670593]
[149.13995361 -244.69171143]
[145.26814270 -261.19763184]
[160.05717468 -269.48742676]
[172.11701965 -257.57119751]
[164.00497437 -242.68391418]
[161.99717712 -227.81890869]
[159.98937988 -212.95388794]
[157.98158264 -198.08886719]
[165.09045410 -188.20074463]
[163.45106506 -175.72714233]
[153.40629578 -167.50077820]
[151.00013733 -152.69503784]
[148.59396362 -137.88928223]
[146.18778992 -123.08351898]
[143.78163147 -108.27777100]
[150.62246704 -98.20235443]
[148.64877319 -85.77726746]
[138.38676453 -77.82354736]
[135.58396912 -63.08773422]
[132.78115845 -48.35191727]
[129.97834778 -33.61610031]
[127.17554474 -18.88028526]
[124.37274170 -4.14446878]
[121.76801300 10.62764740]
[119.36184692 25.43340111]
[116.95567322 40.23915482]
[114.54950714 55.04491043]
[112.14334106 69.85066223]
[109.73716736 84.65641785]
[117.75415802 97.33426666]
[132.16192627 101.50753021]
[146.56970215 105.68079376]
[160.97747803 109.85405731]
[177.87344360 108.45315552]
[183.89686584 124.30102539]
[170.33578491 134.47616577]
[156.80421448 124.26182556]
[142.39643860 120.08856201]
[127.98866272 115.91529846]
[113.58089447 111.74204254]
[104.40958405 123.61162567]
[112.08330536 136.50015259]
[119.75702667 149.38867188]
[127.43074799 162.27719116]
[135.10447693 175.16571045]
[142.77819824 188.05422974]
[157.91288757 193.37593079]
[163.05226135 208.57351685]
[154.25379944 221.98869324]
[138.26696777 223.33049011]
[127.35546112 211.56958008]
[129.88967896 195.72795105]
[122.21595001 182.83943176]
[114.54222870 169.95091248]
[106.86850739 157.06239319]
[99.19478607 144.17387390]
[91.52106476 131.28535461]
[84.23899841 129.49047852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[36 87]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[43 81]
[44 80]
[45 79]
[46 78]
[47 77]
[48 76]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[56 66]
[57 65]
[58 64]
[59 63]
[88 98]
[89 97]
[90 96]
[91 95]
[99 115]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
