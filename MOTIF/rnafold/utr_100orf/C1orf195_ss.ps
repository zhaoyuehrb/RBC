%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:33:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGAUUGGAUGAGGUCAUAGAAGUUUGGCUUCUCUCAUUGACCUGGAAGGAUGCCGUCAUCCACUCUGACCUGCAAACCUUUUGAUCUCAAACAGCGAUCUUCCAGGCGUGGCCCCAAAUCAACAGCAUCAGCGUCACCCAGGAGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[179.35398865 307.44439697]
[181.97044373 290.58364868]
[191.69886780 276.49923706]
[184.02058411 263.61343384]
[176.34231567 250.72763062]
[168.66403198 237.84182739]
[160.98576355 224.95600891]
[153.17472839 212.15023804]
[145.23179626 199.42587280]
[142.46656799 198.68243408]
[139.83963013 196.76391602]
[137.81332397 193.72117615]
[136.82142639 189.77613831]
[137.20899963 185.30622864]
[130.34394836 171.96939087]
[123.47890472 158.63255310]
[116.61386108 145.29571533]
[109.74881744 131.95889282]
[102.88376617 118.62205505]
[88.64693451 113.89842987]
[75.17107391 120.48638153]
[61.69520569 127.07433319]
[48.21934128 133.66227722]
[34.74347687 140.25022888]
[21.26761246 146.83818054]
[9.69341087 159.22665405]
[-5.41497087 151.53424072]
[-2.20560145 134.88682556]
[14.67966366 133.36231995]
[28.15552902 126.77436066]
[41.63139343 120.18641663]
[55.10725784 113.59846497]
[68.58312225 107.01051331]
[82.05899048 100.42256927]
[67.59509277 104.39694977]
[53.39720154 99.55752563]
[44.37172318 87.57668304]
[43.63760757 72.59465790]
[51.44854736 59.78882980]
[65.10529327 53.58453751]
[79.88845825 56.12582016]
[90.68937683 66.53447723]
[93.77552795 81.21390533]
[93.46552277 66.21710968]
[93.15552521 51.22031403]
[92.84552002 36.22351837]
[92.53551483 21.22672272]
[92.22550964 6.22992611]
[91.91550446 -8.76687050]
[91.60550690 -23.76366615]
[91.29550171 -38.76046371]
[83.27464294 -52.39778137]
[90.74726105 -65.28224182]
[90.43725586 -80.27903748]
[90.12725067 -95.27583313]
[69.65496826 -107.82357788]
[68.70503998 -137.51528931]
[61.56583023 -150.70739746]
[54.42661667 -163.89950562]
[47.28740692 -177.09161377]
[31.93277168 -180.05290222]
[22.11409760 -192.22366333]
[22.46746254 -207.85725403]
[32.82601547 -219.57196045]
[48.29876709 -221.83645630]
[61.57995987 -213.58152771]
[66.39861298 -198.70487976]
[60.47951126 -184.23081970]
[67.61872101 -171.03871155]
[74.75793457 -157.84660339]
[81.89714813 -144.65451050]
[89.39674377 -144.73200989]
[89.24173737 -159.73120117]
[89.08672333 -174.73040771]
[88.93171692 -189.72959900]
[88.77695465 -204.72880554]
[103.77616119 -204.88331604]
[103.93091583 -189.88461304]
[104.08592224 -174.88542175]
[104.24093628 -159.88621521]
[104.39594269 -144.88702393]
[111.89554596 -144.96452332]
[118.76058960 -158.30136108]
[125.62563324 -171.63819885]
[132.49067688 -184.97502136]
[131.16009521 -201.32009888]
[144.80207825 -210.42111206]
[159.38291931 -202.91572571]
[159.90310669 -186.52482605]
[145.82751465 -178.10998535]
[138.96246338 -164.77314758]
[132.09742737 -151.43630981]
[125.23237610 -138.09947205]
[128.21560669 -117.62467194]
[119.44359589 -101.75592041]
[105.12404633 -95.58583832]
[105.43405151 -80.58904266]
[105.74405670 -65.59224701]
[113.74273682 -53.02759552]
[106.29229736 -39.07046509]
[106.60230255 -24.07366943]
[106.91230774 -9.07687378]
[107.22230530 5.91992235]
[107.53231049 20.91671944]
[107.84231567 35.91351318]
[108.15232086 50.91031265]
[108.46231842 65.90710449]
[108.77232361 80.90390015]
[119.85256958 94.79331970]
[116.22060394 111.75701141]
[123.08564758 125.09384155]
[129.95069885 138.43067932]
[136.81573486 151.76751709]
[143.68078613 165.10433960]
[150.54583740 178.44117737]
[157.95616150 191.48292542]
[165.89910889 204.20729065]
[173.14485168 209.87498474]
[173.87156677 217.27774048]
[181.54985046 230.16354370]
[189.22811890 243.04934692]
[196.90640259 255.93516541]
[204.58467102 268.82098389]
[217.69702148 266.70840454]
[230.71177673 269.19091797]
[242.07073975 275.94909668]
[250.42153931 286.15286255]
[254.77870178 298.56347656]
[254.63981628 311.68399048]
[250.04341125 323.93960571]
[241.56170654 333.86682129]
[248.70091248 347.05892944]
[255.84013367 360.25103760]
[262.97933960 373.44314575]
[276.35226440 381.89749146]
[275.60501099 396.77334595]
[282.74423218 409.96545410]
[297.64816284 415.90277100]
[302.16055298 431.29818726]
[292.81982422 444.34158325]
[276.79144287 445.02725220]
[266.37097168 432.82916260]
[269.55212402 417.10464478]
[262.41290283 403.91253662]
[249.55064392 396.40179443]
[249.78723145 380.58236694]
[242.64802551 367.39025879]
[235.50881958 354.19815063]
[228.36959839 341.00604248]
[211.57775879 342.30725098]
[195.84350586 336.14678955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[5 121]
[6 120]
[7 119]
[8 117]
[9 116]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[19 110]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[43 108]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
[53 98]
[54 97]
[55 96]
[57 71]
[58 70]
[59 69]
[60 68]
[82 93]
[83 92]
[84 91]
[85 90]
[131 149]
[132 148]
[133 147]
[134 146]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
