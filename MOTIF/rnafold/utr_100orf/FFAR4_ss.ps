%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCCUCCCAGAUGAGCACUCUCUCAGACCGCUGCGGGCCGCCAGGCGCCGGGAAUGUCCCCUGAAUGCGCGCGGGCAGCGGGCGACGCGCCCUUGCGCAGCCUGGAGCAAGCCAACCGCACCCGCUUUCCCUUCUUCUCCGACGUCAAGGGCG\
) } def
/len { sequence length } bind def

/coor [
[182.54907227 134.40470886]
[175.28407288 123.70299530]
[160.75085449 119.99008942]
[146.21763611 116.27719116]
[131.68441772 112.56428528]
[117.15119934 108.85138702]
[130.13250732 116.36707306]
[136.64785767 129.87818909]
[134.44572449 144.71565247]
[124.28710175 155.75205994]
[109.68253326 159.17353821]
[95.67894745 153.79769897]
[87.11560822 141.48228455]
[86.95175934 126.48318481]
[95.24430847 113.98343658]
[83.87239838 123.76503754]
[72.50049591 133.54663086]
[61.12858963 143.32824707]
[60.19385529 159.10485840]
[48.32182693 169.53704834]
[32.55596924 168.43556213]
[22.24988365 156.45390320]
[23.51799011 140.70057678]
[35.60794067 130.52174377]
[51.34698486 131.95632935]
[62.71889114 122.17472839]
[74.09079742 112.39312744]
[85.46270752 102.61152649]
[85.53774261 95.11190033]
[85.68781281 80.11265564]
[85.76285553 72.61302948]
[74.58894348 62.60584641]
[63.41502762 52.59866333]
[52.24111938 42.59148026]
[41.06720734 32.58429718]
[29.89329529 22.57711601]
[18.71938324 12.56993294]
[13.49923134 11.48281002]
[9.63383961 8.74883366]
[7.52749538 5.17513180]
[7.19848156 1.61141896]
[-3.35492778 -9.04811001]
[-13.90833759 -19.70763779]
[-24.46174622 -30.36716652]
[-29.60727501 -31.76551247]
[-33.30168152 -34.72646332]
[-35.18982697 -38.42009735]
[-35.30444717 -41.99713135]
[-45.19933319 -53.27060318]
[-55.09422302 -64.54407501]
[-64.98911285 -75.81755066]
[-75.21786499 -86.78899384]
[-85.77127838 -97.44852448]
[-96.32468414 -108.10804749]
[-106.87808990 -118.76757812]
[-122.44688416 -117.30239105]
[-135.28562927 -126.22990417]
[-139.33227539 -141.33482361]
[-132.67611694 -155.48507690]
[-118.45998383 -161.99932861]
[-103.39630127 -157.80177307]
[-94.59767914 -144.87434387]
[-96.21856689 -129.32098389]
[-85.66515350 -118.66146088]
[-75.11174774 -108.00193024]
[-64.55833435 -97.34239960]
[-60.99809265 -96.97775269]
[-57.44564438 -94.83575439]
[-54.75048065 -90.94320679]
[-53.71563721 -85.71244049]
[-43.82074738 -74.43896484]
[-33.92586136 -63.16549301]
[-24.03097343 -51.89201736]
[-13.80221748 -40.92057800]
[-3.24880838 -30.26104736]
[7.30460072 -19.60151863]
[17.85800934 -8.94199085]
[28.72656631 1.39602172]
[39.90047836 11.40320396]
[51.07439041 21.41038704]
[62.24829865 31.41757011]
[73.42221069 41.42475128]
[84.59612274 51.43193436]
[95.77003479 61.43911743]
[120.86410522 94.31816864]
[135.39732361 98.03106689]
[149.93054199 101.74397278]
[164.46374512 105.45687103]
[178.99696350 109.16977692]
[196.57487488 103.77111816]
[208.66946411 116.45383453]
[223.27406311 119.87519836]
[237.87866211 123.29656219]
[252.48326111 126.71793365]
[267.08786011 130.13929749]
[281.69244385 133.56066895]
[296.29705811 136.98202515]
[310.90164185 140.40339661]
[325.53973389 143.67848206]
[340.20986938 146.80693054]
[346.33883667 140.95755005]
[354.20401001 138.07162476]
[362.47326660 138.55781555]
[369.77767944 142.26022339]
[374.93811035 148.49684143]
[377.15545654 156.18382263]
[391.52850342 160.47521973]
[405.90151978 164.76661682]
[420.27456665 169.05801392]
[434.64758301 173.34941101]
[443.82339478 172.80845642]
[449.26367188 177.87313843]
[463.54797363 182.45126343]
[477.83224487 187.02938843]
[488.49774170 174.01974487]
[503.29840088 166.10057068]
[519.96667480 164.45333862]
[535.96105957 169.30107117]
[548.85345459 179.87854004]
[556.69805908 194.55302429]
[558.32464600 211.07618713]
[572.78070068 215.07913208]
[588.51153564 210.44537354]
[600.20178223 221.94628906]
[595.82543945 237.75070190]
[579.88458252 241.60041809]
[568.77770996 229.53515625]
[554.32171631 225.53219604]
[546.80969238 236.52810669]
[536.24737549 244.67593384]
[523.66162109 249.16571045]
[510.28152466 249.54396057]
[497.41839600 245.75950623]
[486.33724976 238.16978455]
[478.13241577 227.50718689]
[473.61944580 214.80842590]
[473.25411987 201.31367493]
[458.96984863 196.73554993]
[444.68554688 192.15742493]
[430.35617065 187.72244263]
[415.98315430 183.43104553]
[401.61013794 179.13964844]
[387.23709106 174.84825134]
[372.86407471 170.55685425]
[352.46520996 177.73182678]
[337.08142090 161.47706604]
[322.41128540 158.34860229]
[315.17309570 160.03875732]
[307.48028564 155.00799561]
[292.87567139 151.58662415]
[278.27108765 148.16526794]
[263.66647339 144.74389648]
[249.06188965 141.32252502]
[234.45729065 137.90115356]
[219.85269165 134.47979736]
[205.24809265 131.05842590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[15 28]
[16 27]
[17 26]
[18 25]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[36 79]
[37 78]
[41 77]
[42 76]
[43 75]
[44 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 66]
[53 65]
[54 64]
[55 63]
[91 156]
[92 155]
[93 154]
[94 153]
[95 152]
[96 151]
[97 150]
[98 149]
[99 147]
[100 146]
[106 144]
[107 143]
[108 142]
[109 141]
[110 140]
[112 139]
[113 138]
[114 137]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
