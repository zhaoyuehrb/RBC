%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGAUCCGACCGGAAGUUGCACGCUGAGCCGCGGACACCAUGCAGUCGGAUGAUGUUAUCUGGGAUACACUAGGAAACAAGCAAUUUUGUUCCUUCAAAAUAAGAACCAAGACUCAGAGCUUCUGCCGAAAUGAAUAUA\
) } def
/len { sequence length } bind def

/coor [
[67.65048981 174.68058777]
[76.06779480 162.02288818]
[88.69104767 153.55400085]
[85.70325470 138.85458374]
[72.79723358 131.21032715]
[58.47069550 135.65446472]
[44.14416122 140.09860229]
[29.81762314 144.54272461]
[15.49108505 148.98686218]
[1.16454732 153.43099976]
[-13.16199017 157.87512207]
[-13.94694138 172.99496460]
[-19.84643364 186.90782166]
[-30.13066483 197.94209290]
[-43.54427719 204.77912903]
[-58.45956802 206.61094666]
[-73.07400513 203.23564148]
[-85.62805939 195.07936096]
[-94.61705780 183.14273071]
[-108.94359589 187.58686829]
[-116.34907532 201.29075623]
[-130.94152832 205.59364319]
[-143.96046448 198.44920349]
[-158.28700256 202.89332581]
[-172.61354065 207.33746338]
[-179.75343323 221.43701172]
[-194.79780579 226.27876282]
[-208.82107544 218.99020386]
[-213.50350952 203.89547729]
[-206.06707764 189.95004272]
[-190.92369080 185.42747498]
[-177.05766296 193.01092529]
[-162.73112488 188.56678772]
[-148.40458679 184.12266541]
[-141.71463013 170.86445618]
[-127.24879456 166.15338135]
[-113.38772583 173.26033020]
[-99.06118774 168.81619263]
[-98.40579224 153.88783264]
[-92.67172241 140.05853271]
[-82.53322601 129.00479126]
[-69.19972229 122.07376099]
[-54.27158356 120.11910248]
[-39.54802704 123.39586639]
[-26.81029320 131.52742004]
[-17.60612297 143.54859924]
[-3.27958632 139.10446167]
[11.04695129 134.66032410]
[25.37348938 130.21618652]
[39.70002747 125.77205658]
[54.02656174 121.32792664]
[68.35310364 116.88378906]
[61.06479263 90.18196106]
[75.39871979 62.99191284]
[107.30181122 51.82630920]
[105.30250549 36.96014786]
[103.30319977 22.09398651]
[101.30389404 7.22782373]
[91.79624939 -5.41793537]
[97.76813507 -19.06292915]
[95.76882935 -33.92909241]
[93.76952362 -48.79525375]
[91.77022552 -63.66141510]
[89.77091980 -78.52758026]
[77.05534363 -87.91319275]
[74.78335571 -103.55332184]
[84.30287933 -116.16895294]
[99.96615601 -118.27545929]
[112.48043823 -108.62308502]
[114.42122650 -92.93841553]
[104.63707733 -80.52688599]
[106.63638306 -65.66072083]
[108.63568878 -50.79455948]
[110.63499451 -35.92839432]
[112.63430023 -21.06223297]
[121.99893951 -9.47980213]
[116.17005920 5.22851944]
[118.16936493 20.09468269]
[120.16867065 34.96084595]
[122.16797638 49.82700729]
[128.93556213 53.05960846]
[135.40098572 39.52452850]
[148.93595886 45.99015427]
[142.47074890 59.52481842]
[149.23832703 62.75741959]
[162.05839539 54.96986771]
[174.87846375 47.18231964]
[187.69853210 39.39476776]
[200.51858521 31.60721779]
[213.33865356 23.81966782]
[216.84403992 8.40902615]
[230.26399231 0.06156255]
[245.63671875 3.72967815]
[253.84182739 17.23714447]
[250.01139832 32.57022095]
[236.41792297 40.63206863]
[221.12620544 36.63973236]
[208.30613708 44.42728424]
[195.48608398 52.21483231]
[182.66601562 60.00238419]
[169.84594727 67.78993225]
[157.02587891 75.57748413]
[156.52493286 83.06073761]
[171.50915527 82.37278748]
[186.49337769 81.68482971]
[201.47758484 80.99687958]
[215.39828491 75.40989685]
[229.05723572 81.60932922]
[234.01696777 95.76564026]
[227.21374512 109.13410950]
[212.85008240 113.45671844]
[199.79951477 106.06428528]
[185.04069519 103.38526917]
[170.28187561 100.70625305]
[155.52305603 98.02723694]
[155.02210999 105.51049042]
[166.68980408 114.93730164]
[178.35749817 124.36412048]
[190.02520752 133.79092407]
[206.14546204 139.04197693]
[205.56216431 155.98588562]
[189.11895752 160.11592102]
[180.59838867 145.45863342]
[168.93069458 136.03181458]
[157.26298523 126.60500336]
[145.59529114 117.17819214]
[124.26001740 134.64743042]
[100.40268707 135.86679077]
[103.39047241 150.56620789]
[118.31822968 153.43510437]
[131.00904846 161.80238342]
[139.52767944 174.39212036]
[142.57508850 189.28445435]
[139.68656921 204.20843506]
[131.30258179 216.88822937]
[118.70166016 225.39028931]
[103.80532837 228.41810608]
[88.88516998 225.50994873]
[76.21640778 217.10931396]
[67.73092651 204.49720764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 129]
[4 128]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[19 38]
[20 37]
[23 34]
[24 33]
[25 32]
[55 80]
[56 79]
[57 78]
[58 77]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
