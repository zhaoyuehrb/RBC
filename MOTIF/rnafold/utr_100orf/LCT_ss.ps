%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCUAGAAAAUGGAGCUGUCUUGGCAUGUAGUCUUUAUUGCCCUGCUAAGUUUUUCAUGCUGGGGGUCAGACUGGGAGUCUGAUAGAAAUUUCAUUUCCACCGCUGGUC\
) } def
/len { sequence length } bind def

/coor [
[85.83097839 138.78157043]
[78.20984650 151.70126343]
[70.58871460 164.62094116]
[62.96758652 177.54063416]
[55.34645462 190.46032715]
[61.64830017 204.64012146]
[58.37901306 219.80888367]
[46.79569626 230.13391113]
[31.35237694 231.64505005]
[17.98732376 223.76119995]
[11.83967400 209.51388550]
[15.27332211 194.38148499]
[26.96796227 184.18270874]
[42.42676544 182.83920288]
[50.04789734 169.91950989]
[57.66902542 156.99981689]
[65.29015350 144.08012390]
[72.91128540 131.16044617]
[65.03601074 121.96112823]
[60.16839981 110.87268066]
[58.72716904 98.84894562]
[60.83629990 86.92422485]
[47.70794678 79.66844177]
[34.57959366 72.41265869]
[21.45124435 65.15687561]
[8.32289314 57.90109253]
[-4.80545855 50.64530945]
[-17.93380928 43.38952637]
[-36.26229858 44.21949005]
[-44.83852386 28.97955513]
[-58.16520691 22.09482574]
[-71.49188995 15.21009827]
[-84.81857300 8.32537079]
[-98.14526367 1.44064260]
[-114.49228668 2.74709845]
[-123.57315063 -10.90830135]
[-116.04623413 -25.47805214]
[-99.65459442 -25.97404289]
[-91.26053619 -11.88604164]
[-77.93384552 -5.00131369]
[-64.60716248 1.88341403]
[-51.28047943 8.76814175]
[-37.95379639 15.65287018]
[-26.24372292 12.27879429]
[-15.04187965 18.02398872]
[-10.67802620 30.26117706]
[2.45032477 37.51696014]
[15.57867622 44.77274323]
[28.70702744 52.02852631]
[41.83538055 59.28430939]
[54.96372986 66.54009247]
[68.09207916 73.79587555]
[75.95893097 66.43218231]
[85.46321106 61.35477829]
[95.95758820 58.90948486]
[106.72729492 59.26285553]
[117.03880310 62.39081955]
[126.18980408 68.08032990]
[133.55703735 75.94387817]
[138.63870239 85.44587708]
[141.08869934 95.93915558]
[156.03561401 97.19991302]
[170.98254395 98.46067047]
[185.92945862 99.72142792]
[200.87638855 100.98218536]
[215.27804565 94.43218231]
[227.30996704 103.21183777]
[242.25688171 104.47259521]
[257.20379639 105.73335266]
[272.02566528 103.42839813]
[285.88385010 97.68814850]
[299.74203491 91.94789886]
[313.60021973 86.20764160]
[327.45843506 80.46739197]
[341.31661987 74.72714233]
[353.63623047 63.07967758]
[368.23892212 71.69350433]
[364.00415039 88.11005402]
[347.05688477 88.58533478]
[333.19866943 94.32558441]
[319.34048462 100.06583405]
[305.48229980 105.80609131]
[291.62411499 111.54634094]
[277.76589966 117.28659058]
[277.13552856 124.76005554]
[289.44973755 133.32510376]
[275.87475586 139.70697021]
[275.24438477 147.18043518]
[287.94525146 155.16091919]
[300.64611816 163.14140320]
[313.34698486 171.12188721]
[326.04785156 179.10235596]
[342.67605591 182.40969849]
[344.10113525 199.30364990]
[328.26190186 205.34973145]
[318.06735229 191.80322266]
[305.36648560 183.82273865]
[292.66564941 175.84225464]
[279.96478271 167.86178589]
[267.26391602 159.88130188]
[252.77957153 139.44715881]
[255.94305420 120.68027496]
[240.99612427 119.41951752]
[226.04920959 118.15876007]
[212.71664429 124.79894257]
[199.61563110 115.92910767]
[184.66870117 114.66835022]
[169.72178650 113.40759277]
[154.77485657 112.14683533]
[139.82794189 110.88607788]
[128.22137451 130.13842773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[61 110]
[62 109]
[63 108]
[64 107]
[65 106]
[67 104]
[68 103]
[69 102]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
