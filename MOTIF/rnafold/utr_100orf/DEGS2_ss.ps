%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGAGCUGGUUCCGCGCCGCGGCCGCCGCGACAGGUGCAGCAGAGCCGAGCCGGCCGCGCUCCGAACGGCGCCUCCCGCCCCACCAUGGGCAACAGCGCGAGCCGCAGCGACUUCGAGUGGGUCUACACCGACCAGCCGCACACGCAGCGGCGCAAGGAGAUACUGGCCAAGUACCCGGCCAUCA\
) } def
/len { sequence length } bind def

/coor [
[83.33431244 189.47367859]
[68.33533478 189.29866028]
[56.57697296 179.98516846]
[52.97229767 165.42472839]
[59.02747345 151.70121765]
[72.21133423 144.54899597]
[80.64459229 132.14414978]
[73.57582092 129.63764954]
[60.22774124 136.48081970]
[46.87966537 143.32397461]
[33.53158951 150.16712952]
[20.18351173 157.01029968]
[6.83543396 163.85345459]
[-6.51264334 170.69660950]
[-19.86071968 177.53977966]
[-28.61126518 190.72076416]
[-43.46674347 189.64187622]
[-56.81482315 196.48503113]
[-59.31651688 211.68528748]
[-70.16213989 222.37294006]
[-85.04536438 224.59863281]
[-98.22748566 217.71606445]
[-111.57556152 224.55923462]
[-120.32611084 237.74021912]
[-135.18159485 236.66133118]
[-148.52966309 243.50448608]
[-154.75320435 250.21716309]
[-162.15696716 250.34837341]
[-175.61694336 256.96871948]
[-189.07691956 263.58908081]
[-193.93469238 278.62829590]
[-208.04183960 285.75314331]
[-223.02883911 280.73663330]
[-230.00418091 266.55496216]
[-224.82949829 251.62182617]
[-210.57484436 244.79682922]
[-195.69726562 250.12910461]
[-182.23728943 243.50875854]
[-168.77731323 236.88839722]
[-155.37283325 230.15641785]
[-142.02474976 223.31326294]
[-134.22894287 210.62173462]
[-118.41872406 211.21115112]
[-105.07064819 204.36799622]
[-102.96387482 189.64727783]
[-92.46876526 178.86225891]
[-77.45999146 176.29513550]
[-63.65798187 183.13696289]
[-50.30990601 176.29379272]
[-42.51410294 163.60227966]
[-26.70388031 164.19169617]
[-13.35580254 157.34854126]
[-0.00772583 150.50537109]
[13.34035110 143.66221619]
[26.68842888 136.81906128]
[40.03650665 129.97589111]
[53.38458252 123.13273621]
[66.73265839 116.28957367]
[66.77331543 91.42698669]
[81.89270020 74.11668396]
[70.16522980 64.76433563]
[58.43775558 55.41199112]
[46.71028137 46.05964661]
[34.98281097 36.70729828]
[19.30793190 38.72565079]
[6.84815168 29.00302696]
[4.99563551 13.30768585]
[14.84944820 0.95139539]
[30.56349754 -0.73507673]
[42.81491852 9.24882317]
[44.33515549 24.97982597]
[56.06262970 34.33217239]
[67.79010010 43.68452072]
[79.51757050 53.03686523]
[91.24504852 62.38921356]
[106.23675537 61.89064026]
[117.31694794 51.77978897]
[128.39714050 41.66893387]
[139.47734070 31.55808067]
[133.90603638 10.48919106]
[148.14857483 -11.19350624]
[144.68933105 -25.78917885]
[141.23008728 -40.38485336]
[137.77085876 -54.98052597]
[124.18967438 -63.06304550]
[120.38256836 -78.40193176]
[128.60823059 -91.89690399]
[143.98651123 -95.54161835]
[157.39375305 -87.17374420]
[160.87568665 -71.75778961]
[152.36653137 -58.43976212]
[155.82575989 -43.84408951]
[159.28500366 -29.24841690]
[162.74424744 -14.65274429]
[169.47422791 -11.34256935]
[168.47753906 -26.30941963]
[180.94081116 -34.65607834]
[194.40090942 -28.03597641]
[195.39788818 -13.06914520]
[182.93420410 -4.72221851]
[189.66419983 -1.41204333]
[203.33677673 -7.58134985]
[207.51893616 -12.74144173]
[212.87719727 -14.70552731]
[217.56788635 -13.72004890]
[231.43797302 -19.43149376]
[245.30805969 -25.14293861]
[259.17816162 -30.85438347]
[273.04824829 -36.56583023]
[282.86282349 -48.97489166]
[297.57745361 -46.66649628]
[311.44754028 -52.37794113]
[325.31762695 -58.08938599]
[327.44729614 -73.23573303]
[336.81054688 -85.20345306]
[350.81390381 -90.84017181]
[365.65917969 -88.72496796]
[377.37356567 -79.52505493]
[391.24365234 -85.23649597]
[398.00296021 -91.40934753]
[405.39205933 -90.92548370]
[419.35516357 -96.40560150]
[429.37463379 -108.64981842]
[444.04885864 -106.09716797]
[458.01196289 -111.57727814]
[471.97506714 -117.05739594]
[485.93820190 -122.53751373]
[492.02767944 -137.12153625]
[506.67761230 -143.05070496]
[521.19641113 -136.80735779]
[526.97039795 -122.09556580]
[520.57391357 -107.64356232]
[505.80187988 -102.02547455]
[491.41830444 -108.57440948]
[477.45520020 -103.09429169]
[463.49209595 -97.61417389]
[449.52899170 -92.13405609]
[440.50823975 -80.28181458]
[424.83529663 -82.44249725]
[410.87216187 -76.96237946]
[396.95510864 -71.36640930]
[383.08502197 -65.65496063]
[381.24557495 -50.87382507]
[372.19427490 -38.91847229]
[358.28219604 -33.06013489]
[343.20669556 -34.96443558]
[331.02908325 -44.21929550]
[317.15899658 -38.50785065]
[303.28887939 -32.79640579]
[294.46640015 -20.79586411]
[278.75970459 -22.69573784]
[264.88958740 -16.98429298]
[251.01951599 -11.27284813]
[237.14941406 -5.56140375]
[223.27932739 0.15004139]
[209.50608826 6.09123802]
[195.83349609 12.26054478]
[189.19631958 37.21557617]
[169.06724548 48.50684357]
[149.58818054 42.63827515]
[138.50799561 52.74912643]
[127.42780304 62.85997772]
[116.34761047 72.97083282]
[127.07935333 81.70737457]
[133.33082581 94.57431030]
[133.58442688 109.34436035]
[127.40126801 123.27294159]
[115.57428741 133.60815430]
[121.62975311 147.33154297]
[127.68521118 161.05493164]
[133.74067688 174.77832031]
[139.79612732 188.50170898]
[154.99118042 191.64657593]
[165.41079712 203.14488220]
[167.04843140 218.57530212]
[159.27438354 232.00451660]
[145.07792664 238.26872253]
[129.91789246 234.95919800]
[119.62361908 223.34852600]
[118.15346527 207.90126038]
[126.07274628 194.55715942]
[120.01728058 180.83377075]
[113.96182251 167.11038208]
[107.90636444 153.38699341]
[101.85089874 139.66360474]
[94.78212738 137.15711975]
[93.51695251 152.10366821]
[99.25025177 165.96473694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[17 49]
[18 48]
[22 44]
[23 43]
[25 41]
[26 40]
[28 39]
[29 38]
[30 37]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[76 163]
[77 162]
[78 161]
[79 160]
[81 94]
[82 93]
[83 92]
[84 91]
[101 157]
[102 156]
[105 155]
[106 154]
[107 153]
[108 152]
[109 151]
[111 149]
[112 148]
[113 147]
[118 142]
[119 141]
[121 140]
[122 139]
[124 137]
[125 136]
[126 135]
[127 134]
[168 185]
[169 184]
[170 183]
[171 182]
[172 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
