%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCCCGGUCGCGGUAGCUUUGACAGAGCGCAAUGGCGGCAACCGCGUCUGCAGGGGUGCCGGCGACCGUGUCAGAAAAGCAAGAGUUUUACCAGCUUCUGAAGAACCUGAUCAAUCCAAGCUGUAUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[87.04928589 136.74755859]
[79.60303497 133.19740295]
[73.07109833 128.15914917]
[67.74626923 121.85864258]
[63.86723328 114.57830811]
[61.60788345 106.64447784]
[61.06949234 98.41281128]
[46.47984695 94.92823029]
[31.89020348 91.44364929]
[17.30056000 87.95907593]
[2.71091628 84.47449493]
[-11.87872696 80.98991394]
[-26.46837044 77.50533295]
[-41.09785843 74.19200897]
[-55.76517868 71.05040741]
[-70.43250275 67.90880585]
[-85.09982300 64.76719666]
[-100.21443176 69.44258881]
[-111.03892517 59.21128464]
[-125.70624542 56.06967926]
[-140.37356567 52.92807770]
[-155.04089355 49.78647232]
[-169.70822144 46.64487076]
[-178.85119629 47.91095352]
[-184.68067932 43.25387192]
[-199.27032471 39.76929092]
[-213.85997009 36.28470993]
[-228.44961548 32.80012894]
[-237.61976624 33.85153198]
[-243.33847046 29.05907059]
[-257.84240723 25.23342896]
[-272.34634399 21.40778732]
[-277.56176758 22.83951950]
[-282.30670166 22.13519478]
[-285.82855225 19.85216522]
[-287.71664429 16.76984406]
[-301.91589355 11.93437862]
[-315.98474121 19.13460350]
[-330.99835205 14.19832230]
[-338.04940796 0.05414167]
[-332.95468140 -14.90644550]
[-318.73675537 -21.80758858]
[-303.83087158 -16.55496216]
[-297.08041382 -2.26485610]
[-282.88119507 2.57060885]
[-268.52072144 6.90384150]
[-254.01676941 10.72948265]
[-239.51281738 14.55512428]
[-224.96502686 18.21048737]
[-210.37538147 21.69506645]
[-195.78573608 25.17964745]
[-181.19609070 28.66422844]
[-166.56660461 31.97754669]
[-151.89929199 35.11915207]
[-137.23196411 38.26075363]
[-122.56464386 41.40235901]
[-107.89732361 44.54396439]
[-93.83182526 39.64386749]
[-81.95822144 50.09987640]
[-67.29090118 53.24148178]
[-52.62357712 56.38308716]
[-37.95625305 59.52468872]
[-30.68906593 57.83377075]
[-22.98379135 62.91568756]
[-8.39414692 66.40026855]
[6.19549656 69.88484955]
[20.78514099 73.36943054]
[35.37478256 76.85401154]
[49.96442795 80.33859253]
[64.55406952 83.82317352]
[81.38498688 65.77157593]
[105.68518829 61.45415115]
[127.70420074 72.60327148]
[140.20062256 64.30630493]
[152.69702148 56.00933456]
[165.19343567 47.71236801]
[177.68984985 39.41540146]
[181.04322815 33.54205704]
[186.12036133 30.73533058]
[190.97218323 31.03849792]
[203.84376526 23.33638573]
[216.71534729 15.63427162]
[214.84507751 0.52063513]
[219.28999329 -14.04516888]
[229.27996826 -25.53952599]
[243.08418274 -31.97097015]
[258.31097412 -32.22521591]
[272.32220459 -26.25820923]
[282.69036865 -15.10377407]
[287.61907959 -0.69448310]
[286.25442505 14.47316742]
[278.83285522 27.77128983]
[266.64016724 36.89590454]
[251.78886414 40.26611710]
[236.85198975 37.29801941]
[224.41744995 28.50584793]
[211.54588318 36.20796204]
[198.67430115 43.91007233]
[185.98681641 51.91181183]
[173.49040222 60.20877838]
[160.99398804 68.50574493]
[148.49758911 76.80271149]
[136.00117493 85.09967804]
[138.65458679 95.10849762]
[138.57800293 105.46278381]
[135.77680969 115.43125153]
[130.44886780 124.30988312]
[140.15042114 135.75015259]
[149.85195923 147.19042969]
[163.53553772 145.13890076]
[176.33569336 150.10005188]
[184.92547607 160.66905212]
[187.12969971 173.99888611]
[182.47489929 186.56687927]
[191.90559387 198.23143005]
[207.39450073 197.29698181]
[220.45640564 205.67352295]
[226.06874084 220.14007568]
[222.07342529 235.13398743]
[210.00677490 244.88977051]
[194.50863647 245.65614319]
[181.53836060 237.13839722]
[176.08329773 222.61181641]
[180.24102783 207.66212463]
[170.81033325 195.99755859]
[154.49636841 197.38497925]
[140.41136169 188.71704102]
[134.17477417 173.22090149]
[138.41168213 156.89198303]
[128.71014404 145.45170593]
[119.00859070 134.01142883]
[111.42208099 137.25103760]
[103.32356262 138.82084656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 62]
[15 61]
[16 60]
[17 59]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[25 52]
[26 51]
[27 50]
[28 49]
[30 48]
[31 47]
[32 46]
[36 45]
[37 44]
[73 103]
[74 102]
[75 101]
[76 100]
[77 99]
[80 98]
[81 97]
[82 96]
[107 131]
[108 130]
[109 129]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
