%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCACCCAUUCUACACUUGCUCUUUUGCUCCCAACCAGGAAGCCAUCAUGUCUUGCCGCUCCUACCGAGUCAGCUCUGGUCACCGGGUGGGCAACUUCAGCUCUUGUUCAGCAAUGACACCACAGAACCUGAAUCGCUUCCGGGCCA\
) } def
/len { sequence length } bind def

/coor [
[234.92100525 167.00698853]
[221.17106628 161.01205444]
[207.42112732 155.01712036]
[193.67118835 149.02220154]
[179.92124939 143.02726746]
[166.17131042 137.03233337]
[152.42137146 131.03739929]
[138.67143250 125.04248047]
[133.78778076 132.75691223]
[127.35334778 139.50189209]
[119.56431580 144.96411133]
[110.68031311 148.87071228]
[101.01592255 151.00213623]
[90.92960358 151.20317078]
[80.81044006 149.39166260]
[71.06308746 145.56449890]
[62.09166336 139.80038452]
[54.28309250 132.25949097]
[47.99066925 123.17951202]
[43.51846695 112.86856079]
[30.63478851 120.55040741]
[27.00278473 135.93170166]
[13.51462269 144.16850281]
[-1.82740819 140.37408447]
[-9.92115402 126.79959106]
[-5.96473837 111.49853516]
[7.69456720 103.54875946]
[22.95293808 107.66673279]
[35.83661652 99.98487854]
[35.99473953 92.48654938]
[21.00537300 93.05123901]
[7.54872370 99.67835236]
[-5.10305309 91.62027740]
[-4.78724337 76.62360382]
[8.19255066 69.10529327]
[21.35874748 76.29379272]
[36.31098175 77.48988342]
[36.46910477 69.99154663]
[23.92072105 61.77339554]
[11.37233543 53.55524063]
[-1.17604959 45.33708954]
[-10.13550949 43.23054886]
[-13.89983177 36.81105423]
[-26.27216530 28.33017349]
[-38.82054901 20.11202049]
[-51.53940964 12.16025162]
[-65.87699127 18.09433174]
[-80.95640564 14.43495846]
[-90.97930145 2.58923340]
[-92.09166718 -12.88791943]
[-83.86579132 -26.04521942]
[-69.46467590 -31.82341385]
[-54.42584991 -28.00067329]
[-44.53205109 -16.04691696]
[-43.58763885 -0.55860722]
[-30.86878014 7.39316177]
[-26.03533363 7.19231939]
[-21.03725052 10.07244015]
[-17.79128265 15.95783997]
[-5.41894865 24.43872261]
[7.04210281 32.78870392]
[19.59048843 41.00685883]
[32.13887405 49.22500992]
[44.68725967 57.44316101]
[57.65120316 49.89756012]
[56.70303345 34.92755508]
[55.75486374 19.95755386]
[54.64892960 4.99837923]
[53.38535690 -9.94830513]
[52.12178802 -24.89499092]
[42.31596375 -38.03948975]
[49.04419327 -52.99485397]
[65.38505554 -54.37628555]
[74.52846527 -40.76268768]
[67.06847382 -26.15856171]
[68.33204651 -11.21187687]
[69.59561157 3.73480773]
[73.31827545 10.17854881]
[70.72486115 19.00938416]
[71.67303467 33.97938538]
[72.62120819 48.94939041]
[98.32629395 44.46770859]
[122.26880646 51.70032883]
[139.61895752 68.18074799]
[147.33293152 89.68802643]
[144.66636658 111.29254150]
[158.41630554 117.28746796]
[172.16624451 123.28239441]
[185.91618347 129.27732849]
[199.66612244 135.27226257]
[213.41606140 141.26718140]
[227.16600037 147.26211548]
[240.91593933 153.25704956]
[256.50854492 142.31350708]
[275.42596436 142.14306641]
[290.99526978 152.65670776]
[297.80905151 170.02301025]
[312.62191772 172.38514709]
[327.43475342 174.74728394]
[342.24758911 177.10942078]
[357.06042480 179.47155762]
[374.06112671 172.47839355]
[387.27459717 183.98309326]
[402.13394165 186.03240967]
[416.99331665 188.08171082]
[435.23333740 179.60421753]
[450.04891968 191.96780396]
[464.98144531 193.38887024]
[479.92813110 194.65245056]
[494.88729858 195.75837708]
[509.84649658 196.86431885]
[524.37115479 189.25077820]
[538.08038330 198.25016785]
[536.87127686 214.60467529]
[521.98767090 221.49020386]
[508.74053955 211.82348633]
[493.78137207 210.71755981]
[478.82220459 209.61161804]
[471.87261963 212.27310181]
[463.56039429 208.32141113]
[448.62783813 206.90034485]
[441.30093384 214.14083862]
[430.97509766 216.15957642]
[421.05346680 212.04292297]
[414.94400024 202.94107056]
[400.08465576 200.89175415]
[385.22528076 198.84245300]
[375.35586548 205.90982056]
[362.92178345 204.27838135]
[354.69830322 194.28439331]
[339.88546753 191.92225647]
[325.07260132 189.56011963]
[310.25976562 187.19799805]
[295.44692993 184.83586121]
[292.37585449 190.42869568]
[288.23458862 195.28268433]
[283.19515991 199.19616699]
[287.86047363 213.45220947]
[292.52578735 227.70825195]
[305.09042358 238.24687195]
[301.97991943 254.34832764]
[286.39410400 259.44882202]
[274.36636353 248.30139160]
[278.26974487 232.37356567]
[273.60443115 218.11752319]
[268.93911743 203.86148071]
[254.89282227 201.90936279]
[243.05368042 193.92257690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[20 29]
[21 28]
[38 64]
[39 63]
[40 62]
[41 61]
[43 60]
[44 59]
[45 56]
[46 55]
[65 81]
[66 80]
[67 79]
[68 77]
[69 76]
[70 75]
[97 134]
[98 133]
[99 132]
[100 131]
[101 130]
[103 127]
[104 126]
[105 125]
[107 121]
[108 120]
[109 118]
[110 117]
[111 116]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
