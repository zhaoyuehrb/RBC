%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGACUGGAAAUGACACCACUGUGGUAGAGUUUACUCUUUUGGGGUUAUCUGAGGAUACUACAGUUUGUGCUAUUUUAUUUCUUGUGUUUCUAGGAA\
) } def
/len { sequence length } bind def

/coor [
[128.48577881 397.55203247]
[138.76287842 385.54550171]
[137.36518860 370.61074829]
[135.96749878 355.67602539]
[134.56980896 340.74127197]
[133.17211914 325.80654907]
[131.77442932 310.87179565]
[130.37673950 295.93704224]
[117.98979950 281.22732544]
[126.19845581 262.94610596]
[123.87497711 248.12715149]
[121.55150604 233.30819702]
[119.22803497 218.48924255]
[116.90456390 203.67027283]
[114.58109283 188.85131836]
[112.25761414 174.03236389]
[109.93414307 159.21340942]
[106.46649933 144.61973572]
[101.87564087 130.33953857]
[97.28478241 116.05934143]
[84.57371521 105.22537231]
[88.08394623 88.89673615]
[83.05120087 74.76622772]
[78.01844788 60.63571167]
[72.98569489 46.50519562]
[67.95294952 32.37468338]
[62.92019653 18.24416733]
[57.88744736 4.11365414]
[52.85469437 -10.01686001]
[47.82194519 -24.14737320]
[29.57280922 -36.98195267]
[33.33929825 -58.22330475]
[26.59187126 -71.62003326]
[11.40991783 -74.23048401]
[0.80018443 -85.15233612]
[-1.31889486 -100.05110931]
[5.65785456 -113.18363190]
[-1.08957124 -126.58035278]
[-7.83699703 -139.97708130]
[-14.58442211 -153.37380981]
[-21.33184814 -166.77052307]
[-33.85681534 -178.19688416]
[-26.34426689 -193.39549255]
[-9.65993786 -190.38394165]
[-7.93512297 -173.51795959]
[-1.18769729 -160.12123108]
[5.55972815 -146.72450256]
[12.30715370 -133.32777405]
[19.05457878 -119.93105316]
[33.75983810 -117.71894836]
[44.46945190 -107.14690399]
[46.92906189 -92.12013245]
[39.98859787 -78.36745453]
[46.73602295 -64.97073364]
[54.95742798 -64.10276794]
[62.19591904 -59.91535187]
[67.15876770 -53.06671906]
[68.92350769 -44.69766998]
[67.10855865 -36.24183655]
[61.95245743 -29.18012428]
[66.98520660 -15.04961014]
[72.01795959 -0.91909605]
[77.05071259 13.21141815]
[82.08345795 27.34193230]
[87.11621094 41.47244644]
[92.14896393 55.60295868]
[97.18170929 69.73347473]
[102.21446228 83.86399078]
[112.50039673 89.55898285]
[116.27243042 100.69474792]
[111.56497955 111.46847534]
[116.15583801 125.74867249]
[120.74669647 140.02886963]
[124.05278778 142.61805725]
[126.24929047 145.77549744]
[127.29181671 149.11486816]
[127.25634003 152.27166748]
[126.32344055 154.93794250]
[124.75309753 156.88993835]
[127.07657623 171.70889282]
[129.40003967 186.52784729]
[131.72352600 201.34680176]
[134.04699707 216.16575623]
[136.37046814 230.98472595]
[138.69393921 245.80368042]
[141.01741028 260.62261963]
[150.33987427 266.64736938]
[154.62596130 276.64538574]
[152.64389038 287.11563110]
[145.31147766 294.53936768]
[146.70916748 309.47412109]
[148.10685730 324.40884399]
[149.50454712 339.34359741]
[150.90223694 354.27832031]
[152.29992676 369.21307373]
[153.69761658 384.14779663]
[166.02403259 394.03897095]
[167.66294861 409.75805664]
[157.64202881 421.97918701]
[141.90649414 423.45184326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[17 79]
[18 73]
[19 72]
[20 71]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[32 54]
[33 53]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
