%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGUGCCAAGAACAAUGUGACUGAGUUUGUUUUAUUUGGCCUUUUUGAGAGCAGAGAGAUGCAGCAUACAUGCUUUGUGGUAUUCUUCCUCUUUCAUG\
) } def
/len { sequence length } bind def

/coor [
[-12.06398296 141.62463379]
[-21.19337654 136.13964844]
[-27.09748077 127.37391663]
[-42.05215073 128.53916931]
[-57.00682068 129.70442200]
[-65.49272919 133.54917908]
[-72.44345856 130.66598511]
[-87.42713165 131.36558533]
[-102.41081238 132.06518555]
[-117.39448547 132.76480103]
[-132.37815857 133.46440125]
[-147.31289673 134.86209106]
[-162.16619873 136.95481873]
[-177.01950073 139.04754639]
[-191.87280273 141.14027405]
[-206.72610474 143.23301697]
[-221.57939148 145.32574463]
[-226.67179871 159.75924683]
[-237.89636230 170.16442871]
[-252.67376709 174.15023804]
[-267.60827637 170.80079651]
[-279.26806641 160.88574219]
[-284.97375488 146.68350220]
[-283.41427612 131.45765686]
[-274.94793701 118.70697784]
[-261.52029419 111.36148071]
[-246.21685791 111.10910797]
[-232.55427551 118.00785828]
[-223.67211914 130.47244263]
[-208.81883240 128.37971497]
[-193.96553040 126.28697968]
[-179.11222839 124.19425201]
[-164.25892639 122.10152435]
[-149.40563965 120.00878906]
[-146.94876099 117.24857330]
[-142.95661926 115.63071442]
[-138.02575684 115.89911652]
[-133.07777405 118.48072815]
[-118.09409332 117.78112030]
[-103.11041260 117.08151245]
[-88.12673950 116.38191223]
[-73.14306641 115.68230438]
[-58.17208099 114.74975586]
[-43.21740723 113.58450317]
[-28.26273918 112.41924286]
[-16.97023392 96.73637390]
[2.47479582 94.09777832]
[18.00251007 106.57725525]
[32.78353882 104.02360535]
[47.56457138 101.46994781]
[62.34560013 98.91629791]
[77.12663269 96.36264038]
[91.90766144 93.80899048]
[98.82180023 89.37168121]
[107.18753815 91.41324615]
[122.04084015 89.32051849]
[134.62657166 79.73355103]
[148.30883789 85.61952972]
[163.16213989 83.52680206]
[178.01544189 81.43407440]
[192.86874390 79.34133911]
[207.68769836 77.01786804]
[222.46871948 74.46421814]
[237.24975586 71.91056061]
[249.53125000 61.93682098]
[263.38995361 67.39443970]
[278.17098999 64.84078217]
[292.95202637 62.28712845]
[298.86660767 48.03858185]
[311.55862427 39.26839447]
[326.97808838 38.77511215]
[340.20474243 46.71612930]
[347.01794434 60.55750275]
[345.24368286 75.88249969]
[335.44808960 87.80097198]
[320.75689697 92.50976562]
[305.85803223 88.50634003]
[295.50567627 77.06816101]
[280.72463989 79.62181091]
[265.94360352 82.17546844]
[254.71936035 91.96655273]
[239.80340576 86.69159698]
[225.02238464 89.24524689]
[210.24134827 91.79889679]
[204.07754517 96.11550140]
[194.96147156 94.19464111]
[180.10816956 96.28736877]
[165.25486755 98.38010406]
[150.40158081 100.47283173]
[138.87825012 109.91011047]
[124.13356781 104.17382050]
[109.28027344 106.26654816]
[94.46131134 108.59001923]
[79.68028259 111.14367676]
[64.89925385 113.69732666]
[50.11822510 116.25097656]
[35.33719254 118.80463409]
[20.55616379 121.35828400]
[16.65129089 131.61766052]
[8.82983875 139.20314026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[48 98]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[55 92]
[56 91]
[58 89]
[59 88]
[60 87]
[61 86]
[62 84]
[63 83]
[64 82]
[66 80]
[67 79]
[68 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
