%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUGGGCGGGGCCAAGGCUGGGGCAGGGGAGUCAGCAGAGGCCUCGCUCGGGCGCCCAGUGGUCCUGCCGCCUGGUCUCACCUCGCUAUGGUUCGUCUGCCUCUGCAGUGCGUCCUCUGGGGCUGCUUGCUGACCGCUGUCCAUCCAGAACCACCCACUGCAUGCAGAGAAAAACAGUACCUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[37.07335281 207.47410583]
[36.99550247 192.29653931]
[42.40932846 178.11715698]
[52.58266068 166.85359192]
[66.13963318 160.02915955]
[64.66170502 145.10214233]
[63.18377686 130.17514038]
[50.87687302 121.59957886]
[36.36171722 125.38247681]
[21.84656525 129.16537476]
[7.33141088 132.94827271]
[-7.18374300 136.73117065]
[-21.69889641 140.51406860]
[-36.21405029 144.29696655]
[-50.72920227 148.07986450]
[-65.24435425 151.86276245]
[-79.75951385 155.64566040]
[-89.16756439 174.43338013]
[-109.08956909 180.12356567]
[-126.50171661 169.44519043]
[-140.73675537 174.17420959]
[-154.97180176 178.90321350]
[-165.62889099 190.59667969]
[-180.14642334 187.26644897]
[-194.38146973 191.99546814]
[-208.61651611 196.72448730]
[-222.85154724 201.45349121]
[-230.02372742 207.13824463]
[-237.35977173 206.14112854]
[-251.67066956 210.63537598]
[-265.98156738 215.12962341]
[-280.29248047 219.62385559]
[-287.64993286 233.35357666]
[-302.22726440 237.70751953]
[-315.27111816 230.60867310]
[-329.58200073 235.10292053]
[-340.27035522 247.54040527]
[-356.33340454 244.23727417]
[-361.24685669 228.59150696]
[-349.95617676 216.69813538]
[-334.07623291 220.79202271]
[-319.76535034 216.29777527]
[-313.12182617 203.01623535]
[-298.67254639 198.25457764]
[-284.78671265 205.31297302]
[-270.47579956 200.81872559]
[-256.16491699 196.32447815]
[-241.85401917 191.83023071]
[-227.58056641 187.21844482]
[-213.34552002 182.48944092]
[-199.11047363 177.76042175]
[-184.87544250 173.03141785]
[-175.23654175 161.67619324]
[-159.70082092 164.66816711]
[-145.46577454 159.93916321]
[-131.23072815 155.21014404]
[-129.80863953 145.92590332]
[-125.06546021 137.75190735]
[-117.61964417 131.83830261]
[-108.47317505 129.03491211]
[-98.87682343 129.76939392]
[-90.15911102 133.98249817]
[-83.54241180 141.13050842]
[-69.02725220 137.34761047]
[-54.51210022 133.56471252]
[-39.99694824 129.78181458]
[-25.48179436 125.99891663]
[-10.96664047 122.21601868]
[3.54851365 118.43312073]
[18.06366730 114.65022278]
[32.57881927 110.86732483]
[47.09397507 107.08442688]
[53.20253754 93.38459015]
[46.31585312 80.05892181]
[31.52601242 75.17031860]
[24.73176384 61.55808640]
[29.48344421 47.48836136]
[22.59675789 34.16268921]
[15.71007347 20.83701706]
[3.06669617 9.54182529]
[10.42043209 -5.73426437]
[27.13524246 -2.89675808]
[29.03574753 13.95033169]
[35.92243195 27.27600479]
[42.80911636 40.60167694]
[57.03474808 44.86396027]
[64.20865631 58.27998734]
[59.64152527 73.17223358]
[66.52821350 86.49790955]
[74.51831818 76.20964813]
[85.31021881 69.74823761]
[97.26925659 67.71692657]
[108.71124268 70.07518005]
[118.13896942 76.18575287]
[124.43805695 84.94296265]
[138.82093811 80.68470001]
[153.20381165 76.42644501]
[160.55908203 70.98065948]
[167.85836792 72.21852112]
[182.30934143 68.19740295]
[196.76031494 64.17627716]
[211.21127319 60.15515518]
[225.66224670 56.13403320]
[230.46476746 46.35080719]
[239.67419434 40.94526672]
[250.11839294 41.49871445]
[258.35131836 47.58620834]
[272.92672729 44.04255676]
[287.50213623 40.49890900]
[302.07754517 36.95526123]
[316.65295410 33.41160965]
[331.22836304 29.86795998]
[345.80377197 26.32431221]
[357.38540649 15.54582596]
[371.58032227 20.05738068]
[386.15573120 16.51373100]
[394.96966553 1.41243410]
[411.64804077 -2.57198572]
[425.76870728 6.54872656]
[440.28384399 2.76582909]
[454.79901123 -1.01706827]
[469.31417847 -4.79996586]
[483.82931519 -8.58286285]
[498.34448242 -12.36575985]
[504.08566284 -26.66068459]
[516.99243164 -34.73957062]
[532.00396729 -33.68186951]
[543.37799072 -24.10227203]
[557.89318848 -27.88516998]
[565.08801270 -38.60359955]
[577.26831055 -41.44897842]
[587.77081299 -35.42548752]
[602.34619141 -38.96913528]
[611.88385010 -51.86925888]
[627.92077637 -52.31151581]
[638.15490723 -39.95664978]
[634.73541260 -24.28225327]
[620.28552246 -17.31238365]
[605.88989258 -24.39372635]
[591.31445312 -20.85007668]
[579.30187988 -8.06687737]
[561.67608643 -13.37001514]
[547.16088867 -9.58711815]
[541.90930176 4.32541561]
[529.32354736 12.57543278]
[514.11535645 11.82378292]
[502.12738037 2.14939332]
[487.61221313 5.93229055]
[473.09707642 9.71518803]
[458.58190918 13.49808502]
[444.06674194 17.28098297]
[429.55160522 21.06388092]
[424.64590454 32.98942184]
[413.59954834 40.01234818]
[400.33029175 39.37607574]
[389.69937134 31.08914185]
[375.12396240 34.63278961]
[364.58483887 45.15781021]
[349.34741211 40.89971924]
[334.77200317 44.44337082]
[320.19659424 47.98701859]
[305.62118530 51.53067017]
[291.04577637 55.07431793]
[276.47036743 58.61796570]
[261.89495850 62.16161728]
[248.94149780 76.50435638]
[229.68338013 70.58500671]
[215.23240662 74.60612488]
[200.78143311 78.62725067]
[186.33045959 82.64836884]
[171.87948608 86.66949463]
[157.46208191 90.80932617]
[143.07919312 95.06758118]
[128.69631958 99.32584381]
[126.23566437 115.65476227]
[114.71124268 128.86576843]
[96.91715240 134.10636902]
[78.11078644 128.69720459]
[79.58872223 143.62422180]
[81.06665039 158.55123901]
[95.69866180 162.58465576]
[107.88323975 171.63455200]
[115.97251129 184.47698975]
[118.87246704 199.37513733]
[116.19091034 214.31413269]
[108.29051208 227.27362061]
[96.23972321 236.50091553]
[81.66831970 240.74810791]
[66.54696655 239.44079590]
[52.92069626 232.75579834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 180]
[6 179]
[7 178]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[26 50]
[27 49]
[29 48]
[30 47]
[31 46]
[32 45]
[35 42]
[36 41]
[73 89]
[74 88]
[77 85]
[78 84]
[79 83]
[95 174]
[96 173]
[97 172]
[99 171]
[100 170]
[101 169]
[102 168]
[103 167]
[107 165]
[108 164]
[109 163]
[110 162]
[111 161]
[112 160]
[113 159]
[115 157]
[116 156]
[119 152]
[120 151]
[121 150]
[122 149]
[123 148]
[124 147]
[128 143]
[129 142]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
