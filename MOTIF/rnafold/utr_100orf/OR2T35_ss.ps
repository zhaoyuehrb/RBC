%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCAUGGAGGGUCUUCUCCAGAACUCCACUAACUUCGUCCUCACAGGCCUCAUCACCCAUCCUGCCUUCCCCGGGCUUCUCUUUGCAGUAGUCUUCU\
) } def
/len { sequence length } bind def

/coor [
[239.14427185 258.70629883]
[237.65591431 244.60180664]
[241.70033264 230.96247864]
[230.22634888 221.30082703]
[218.75236511 211.63917542]
[207.27836609 201.97752380]
[195.80438232 192.31585693]
[188.53230286 190.38134766]
[184.12986755 182.17091370]
[172.96191406 172.15708923]
[161.79394531 162.14326477]
[150.47160339 152.30433655]
[138.99761963 142.64266968]
[127.52362823 132.98101807]
[116.04963684 123.31936646]
[87.96003723 131.12915039]
[62.56730652 108.76029968]
[47.97362518 112.22794342]
[33.37994766 115.69558716]
[21.83615875 127.34346008]
[6.04792547 122.90908051]
[2.25683093 106.95415497]
[14.36282730 95.89174652]
[29.91230392 101.10190582]
[44.50598145 97.63426208]
[59.09965897 94.16661835]
[62.78211594 87.63289642]
[48.31248093 83.67945862]
[33.84284592 79.72602081]
[18.91163254 81.16091156]
[5.94684744 73.61675262]
[-0.18308823 59.92646790]
[2.82368755 45.23091125]
[13.83809566 35.04843521]
[28.72410202 33.20267487]
[41.89184189 40.38673019]
[48.39672852 53.90330124]
[59.27187729 64.23437500]
[70.14702606 74.56545258]
[73.82948303 68.03173065]
[69.23862457 53.75153732]
[64.64776611 39.47134018]
[50.47571564 32.47644424]
[45.47989273 17.48253441]
[52.62423325 3.38523126]
[67.67012024 -1.45178604]
[81.69110107 5.84119940]
[86.36877441 20.93738747]
[78.92796326 34.88048172]
[83.51882172 49.16067505]
[88.10968018 63.44087219]
[100.61225891 63.00886917]
[112.10740662 66.57708740]
[121.40332794 73.45319366]
[127.64305115 82.62055969]
[130.38092041 92.87794495]
[129.60580444 102.99224091]
[125.71129608 111.84537506]
[137.18528748 121.50703430]
[148.65927124 131.16868591]
[160.13325500 140.83033752]
[168.87760925 144.04423523]
[171.80776978 150.97529602]
[182.97573853 160.98912048]
[194.14369202 171.00294495]
[205.46603394 180.84187317]
[216.94003296 190.50352478]
[228.41401672 200.16519165]
[239.88800049 209.82684326]
[251.36198425 219.48849487]
[266.06448364 212.71717834]
[282.19116211 212.99142456]
[296.55157471 220.20681763]
[306.32644653 232.89070129]
[309.62109375 248.50242615]
[305.83261108 263.94219971]
[317.60150146 273.24234009]
[329.37042236 282.54248047]
[341.13934326 291.84262085]
[352.90826416 301.14276123]
[368.53298950 303.62835693]
[373.72152710 317.59002686]
[385.49044800 326.89016724]
[401.15618896 324.80218506]
[413.65905762 334.46936035]
[415.58129883 350.15631104]
[405.78250122 362.55624390]
[390.07608032 364.31253052]
[377.78042603 354.38317871]
[376.19030762 338.65908813]
[364.42138672 329.35894775]
[349.63845825 327.53854370]
[343.60812378 312.91168213]
[331.83920288 303.61154175]
[320.07028198 294.31137085]
[308.30136108 285.01123047]
[296.53244019 275.71109009]
[284.28604126 282.42291260]
[270.35894775 283.93222046]
[256.87542725 279.97528076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[9 65]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[17 26]
[18 25]
[19 24]
[40 51]
[41 50]
[42 49]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
