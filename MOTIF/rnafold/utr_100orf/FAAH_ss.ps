%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGGUUUUGCGGCGGAGCGGGCGGGCUGCGCGUGCGGCGGCUUCAACUGUCGCGGUAGGCAGCAGCAGGCUGAAGGGAUCAUGGUGCAGUACGAGCUGUGGGCCGCGCUGCCUGGCGCCUCCGGGGUCGCCCUGGCCUGCUGCUUCGUGGCGGCGGCCGUGGCCCUGCGCUGGUCCGGGC\
) } def
/len { sequence length } bind def

/coor [
[61.40881729 383.18551636]
[51.79986572 371.66629028]
[47.73135757 386.10397339]
[43.66284943 400.54168701]
[52.61547470 413.36294556]
[51.18075943 428.93457031]
[40.03612900 439.90411377]
[24.44373703 441.09213257]
[11.76583481 431.93762207]
[7.98854113 416.76309204]
[14.89537716 402.73348999]
[29.22514534 396.47317505]
[33.29365540 382.03546143]
[37.36216354 367.59777832]
[40.80747986 352.99880981]
[43.62325668 338.26547241]
[46.43903732 323.53210449]
[49.25481415 308.79876709]
[44.04420853 294.84533691]
[54.23450851 282.74291992]
[57.05028915 268.00958252]
[59.86606598 253.27622986]
[62.55527878 238.51925659]
[65.11772156 223.73974609]
[67.55321503 208.93879700]
[69.86157227 194.11747742]
[72.16992950 179.29615784]
[74.47829437 164.47483826]
[76.78665161 149.65351868]
[79.09500885 134.83219910]
[81.40336609 120.01087952]
[71.89369202 108.41062164]
[56.90750122 107.76704407]
[42.78807068 114.90512848]
[30.40448570 106.62889099]
[15.41829777 105.98532104]
[0.43211067 105.34175110]
[-13.68732071 112.47983551]
[-26.07090569 104.20359802]
[-41.05709457 103.56002808]
[-56.04328156 102.91645813]
[-71.02947235 102.27288055]
[-86.01565552 101.62931061]
[-96.43781281 113.28746796]
[-111.92266083 115.46772003]
[-125.15872955 107.14062500]
[-129.89634705 92.23797607]
[-123.89855957 77.79634857]
[-109.99733734 70.63464355]
[-94.75641632 74.13439178]
[-85.37208557 86.64312744]
[-70.38589478 87.28669739]
[-55.39971161 87.93026733]
[-40.41352081 88.57383728]
[-25.42733574 89.21740723]
[-12.37981606 82.03329468]
[1.07568204 90.35556030]
[16.06186867 90.99913788]
[31.04805756 91.64270782]
[44.09557724 84.45859528]
[57.55107498 92.78086090]
[72.53726196 93.42443085]
[99.79287720 76.11728668]
[106.26797485 62.58683395]
[112.74306488 49.05638123]
[119.21815491 35.52592850]
[125.69325256 21.99547577]
[132.16835022 8.46502113]
[138.64343262 -5.06543207]
[145.11853027 -18.59588623]
[151.59362793 -32.12633896]
[158.06871033 -45.65679169]
[164.54380798 -59.18724442]
[164.41418457 -65.83767700]
[167.25132751 -70.79800415]
[171.48046875 -73.06520081]
[178.41621399 -86.36540985]
[185.35195923 -99.66561127]
[192.28770447 -112.96582031]
[185.49800110 -120.87817383]
[182.14901733 -131.21212769]
[183.07528687 -142.47422791]
[188.46644592 -152.90022278]
[197.78858948 -160.73104858]
[209.82249451 -164.50651550]
[214.13824463 -178.87225342]
[213.61138916 -188.01699829]
[218.65335083 -193.44638062]
[223.21507263 -207.73591614]
[227.77679443 -222.02543640]
[232.33851624 -236.31497192]
[236.90023804 -250.60450745]
[233.72625732 -266.10406494]
[244.96762085 -275.87548828]
[249.52935791 -290.16500854]
[249.15956116 -299.31744385]
[254.29397583 -304.65948486]
[259.10031128 -318.86859131]
[263.90667725 -333.07772827]
[263.25436401 -350.01910400]
[279.35308838 -355.33578491]
[288.91854858 -341.33798218]
[278.11578369 -328.27136230]
[273.30944824 -314.06225586]
[268.50308228 -299.85314941]
[263.81887817 -285.60330200]
[259.25717163 -271.31375122]
[262.75744629 -256.83627319]
[251.18977356 -246.04278564]
[246.62805176 -231.75325012]
[242.06632996 -217.46371460]
[237.50460815 -203.17417908]
[232.94288635 -188.88465881]
[228.50398254 -174.55650330]
[224.18823242 -160.19076538]
[235.78848267 -150.68109131]
[249.02867126 -157.73074341]
[262.26885986 -164.78038025]
[268.39190674 -171.59303284]
[275.79739380 -171.83520508]
[289.15661621 -178.65652466]
[297.61752319 -192.70448303]
[314.00662231 -192.13061523]
[321.46423340 -177.52525330]
[312.31857300 -163.91316223]
[295.97796631 -165.29727173]
[282.61871338 -158.47595215]
[269.31851196 -151.54020691]
[256.07830811 -144.49055481]
[242.83813477 -137.44090271]
[231.20666504 -110.68603516]
[205.58790588 -106.03007507]
[198.65216064 -92.72986603]
[191.71641541 -79.42966461]
[184.78067017 -66.12946320]
[178.07426453 -52.71215439]
[171.59916687 -39.18170166]
[165.12406921 -25.65124702]
[158.64898682 -12.12079239]
[152.17388916 1.40966070]
[145.69879150 14.94011402]
[139.22370911 28.47056770]
[132.74861145 42.00102234]
[126.27352142 55.53147507]
[119.79842377 69.06192780]
[113.32333374 82.59238434]
[125.83451843 74.31771088]
[139.82611084 79.72470093]
[143.52156067 94.26235962]
[133.81047058 105.69454193]
[118.86646271 104.39888763]
[131.01683044 113.19482422]
[143.16720581 121.99075317]
[159.52618408 123.13779449]
[166.46812439 137.99517822]
[156.85173035 151.27888489]
[140.56954956 149.32379150]
[134.37127686 134.14112854]
[122.22090149 125.34519196]
[110.07052612 116.54926300]
[96.22468567 122.31923676]
[93.91632843 137.14056396]
[91.60797119 151.96186829]
[89.29960632 166.78318787]
[86.99124908 181.60450745]
[84.68289185 196.42582703]
[82.37453461 211.24714661]
[84.14839935 220.23365784]
[79.89723206 226.30220032]
[77.33478546 241.08171082]
[78.95412445 250.09733582]
[74.59941101 256.09201050]
[71.78363037 270.82534790]
[68.96784973 285.55868530]
[73.97705841 300.56597900]
[63.98815918 311.61456299]
[61.17237854 326.34790039]
[58.35660172 341.08123779]
[55.54082108 355.81457520]
[69.28517151 349.80682373]
[82.63303375 356.65039062]
[85.77740479 371.31713867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[15 179]
[16 178]
[17 177]
[18 176]
[20 174]
[21 173]
[22 172]
[23 170]
[24 169]
[25 167]
[26 166]
[27 165]
[28 164]
[29 163]
[30 162]
[31 161]
[32 62]
[33 61]
[35 59]
[36 58]
[37 57]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[63 146]
[64 145]
[65 144]
[66 143]
[67 142]
[68 141]
[69 140]
[70 139]
[71 138]
[72 137]
[73 136]
[76 135]
[77 134]
[78 133]
[79 132]
[85 115]
[86 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[94 107]
[95 106]
[97 105]
[98 104]
[99 103]
[116 130]
[117 129]
[118 128]
[120 127]
[121 126]
[151 160]
[152 159]
[153 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
