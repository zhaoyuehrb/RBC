%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGACGGAGGCGGAAGUGCGGUGUUUUAGCCGGUGGCUGCUGUCUCUGGGCGGGCCGUGGGAGGCUCCCGAGGUGGGGGCCGGGGCGGGAUGGCUGCAGCGGCGGCCGGGGCCGGGAGCGGGCCCUGGGCGGCCCAGGAGAAGCAGUUCCCGCCGGCGCUGCUGAGUUUCUUCAUCUACAACCCGCGCU\
) } def
/len { sequence length } bind def

/coor [
[77.90499115 207.38519287]
[64.45958710 214.03507996]
[49.51486588 212.74847412]
[37.40385818 203.89842224]
[31.63798714 190.05085754]
[33.88798904 175.22296143]
[22.09488106 184.49240112]
[10.30177402 193.76185608]
[-1.49133265 203.03129578]
[-13.28444004 212.30075073]
[-25.07754707 221.57019043]
[-36.87065506 230.83963013]
[-48.66376114 240.10908508]
[-60.45686722 249.37852478]
[-66.52529144 263.98965454]
[-81.31293488 265.77151489]
[-93.10604095 275.04095459]
[-104.89914703 284.31039429]
[-111.52390289 303.33740234]
[-130.75114441 305.29165649]
[-142.23300171 314.94396973]
[-153.71485901 324.59628296]
[-165.19670105 334.24859619]
[-166.30987549 350.01364136]
[-178.29917908 360.31082153]
[-194.05157471 359.03103638]
[-204.22143555 346.93353271]
[-202.77516174 331.19555664]
[-190.57081604 321.15417480]
[-174.84901428 322.76675415]
[-163.36715698 313.11444092]
[-151.88531494 303.46212769]
[-140.40345764 293.80981445]
[-140.43862915 283.57080078]
[-134.70420837 274.82415771]
[-124.89690399 270.59921265]
[-114.16859436 272.51730347]
[-102.37548828 263.24783325]
[-90.58238220 253.97840881]
[-85.35747528 240.03030396]
[-69.72631073 237.58541870]
[-57.93320465 228.31597900]
[-46.14009857 219.04652405]
[-34.34699249 209.77708435]
[-22.55388641 200.50762939]
[-10.76077843 191.23818970]
[1.03232813 181.96875000]
[12.82543468 172.69929504]
[24.61854172 163.42985535]
[28.44132614 153.42269897]
[39.88861084 149.71090698]
[50.36356354 138.97427368]
[60.83851624 128.23764038]
[71.31346893 117.50100708]
[81.78842926 106.76436615]
[81.91178894 91.76487732]
[71.61483765 80.85740662]
[61.31789017 69.94993591]
[51.02094269 59.04246902]
[37.50984192 61.81855392]
[24.49595833 57.58541870]
[15.34954643 47.55191422]
[12.38345146 34.41413116]
[16.26893806 21.63146591]
[6.15278244 10.55611515]
[-3.96337271 -0.51923573]
[-14.07952785 -11.59458733]
[-24.19568253 -22.66993713]
[-34.31184006 -33.74528885]
[-44.42799377 -44.82064056]
[-60.32512283 -46.97953796]
[-68.42488098 -60.82777023]
[-62.51382065 -75.74215698]
[-47.12640762 -80.28166199]
[-34.06654358 -70.96395874]
[-33.35264206 -54.93679428]
[-23.23648643 -43.86144638]
[-13.12033176 -32.78609467]
[-3.00417686 -21.71074295]
[7.11197853 -10.63539124]
[17.22813416 0.43996027]
[27.34428787 11.51531124]
[43.58219147 9.15899372]
[58.17401123 17.01891708]
[65.28179169 32.17518234]
[61.92841339 48.74552155]
[72.22535706 59.65299225]
[82.52230835 70.56046295]
[92.81925201 81.46792603]
[107.36502838 85.13132477]
[121.60006714 80.40231323]
[135.83511353 75.67330170]
[150.07015991 70.94429016]
[164.09875488 65.63408661]
[177.89721680 59.75167847]
[191.69566345 53.86927032]
[198.37661743 47.61454773]
[205.76977539 48.00565338]
[219.66310120 42.35099030]
[233.55644226 36.69632721]
[247.44978333 31.04166031]
[261.34310913 25.38699532]
[275.23645020 19.73233032]
[289.12979126 14.07766628]
[303.02310181 8.42300129]
[309.80603027 2.27900696]
[317.19177246 2.79166079]
[331.17620850 -2.63373017]
[345.16067505 -8.05912113]
[359.14514160 -13.48451138]
[362.43417358 -17.58152199]
[366.55676270 -19.77634048]
[370.64416504 -20.07102394]
[373.95556641 -18.81384087]
[388.19061279 -23.54285431]
[402.42565918 -28.27186584]
[416.66070557 -33.00087738]
[430.89575195 -37.72989273]
[445.13076782 -42.45890427]
[459.36581421 -47.18791580]
[465.84039307 -58.35618210]
[477.80728149 -61.99620056]
[488.68307495 -56.67622757]
[502.99398804 -61.17047119]
[517.14929199 -66.13297272]
[531.13378906 -71.55836487]
[545.11822510 -76.98375702]
[559.10272217 -82.40914154]
[573.08715820 -87.83453369]
[587.07159424 -93.25992584]
[599.65148926 -104.62580872]
[614.05566406 -95.68396759]
[609.45068359 -79.36737823]
[592.49700928 -79.27546692]
[578.51257324 -73.85007477]
[564.52807617 -68.42468262]
[550.54364014 -62.99929428]
[536.55914307 -57.57390213]
[522.57470703 -52.14851379]
[521.32299805 -49.62220383]
[518.98657227 -47.44397354]
[515.69470215 -46.03261948]
[511.72662354 -45.75188446]
[507.48822021 -46.85957336]
[493.17733765 -42.36532974]
[482.03115845 -28.82001877]
[464.09484863 -32.95287323]
[449.85980225 -28.22386169]
[435.62475586 -23.49484825]
[421.38970947 -18.76583672]
[407.15466309 -14.03682423]
[392.91961670 -9.30781078]
[378.68457031 -4.57879877]
[364.57052612 0.49994865]
[350.58605957 5.92533970]
[336.60162354 11.35072994]
[322.61715698 16.77612114]
[308.67779541 22.31633568]
[294.78445435 27.97100067]
[280.89111328 33.62566757]
[266.99777222 39.28033066]
[253.10444641 44.93499756]
[239.21110535 50.58966064]
[225.31776428 56.24432373]
[211.42443848 61.89899063]
[197.57807922 67.66772461]
[183.77961731 73.55013275]
[169.98117065 79.43254089]
[182.65896606 87.44962311]
[184.46321106 102.34071350]
[174.06690979 113.15352631]
[159.11645508 111.93530273]
[150.60781860 99.58204651]
[154.79916382 85.17932892]
[140.56413269 89.90834045]
[126.32907867 94.63735962]
[112.09403992 99.36637115]
[112.68534851 103.73534393]
[111.62621307 108.38954163]
[108.81304932 112.69032288]
[104.39078522 115.97106171]
[98.75624084 117.63307190]
[92.52506256 117.23932648]
[82.05010986 127.97595978]
[71.57514954 138.71260071]
[61.10020065 149.44923401]
[50.62524414 160.18586731]
[65.61096954 159.53153992]
[78.76354980 166.74330139]
[86.26957703 179.73020935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[16 39]
[17 38]
[18 37]
[20 33]
[21 32]
[22 31]
[23 30]
[51 187]
[52 186]
[53 185]
[54 184]
[55 183]
[56 89]
[57 88]
[58 87]
[59 86]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[90 177]
[91 176]
[92 175]
[93 174]
[94 168]
[95 167]
[96 166]
[98 165]
[99 164]
[100 163]
[101 162]
[102 161]
[103 160]
[104 159]
[105 158]
[107 157]
[108 156]
[109 155]
[110 154]
[114 153]
[115 152]
[116 151]
[117 150]
[118 149]
[119 148]
[120 147]
[123 145]
[124 144]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
