%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGAAGCUGGUCUGCUGACUGUCAUACUUGUGACCAGCUUGCACAGGACAUGGCCGAGGAGGCAGCCCAGAACAUUUCUGAUGACCAGGAAAGGUGUCUCCAGGCUGCCUGCUGCCUUUCCUUUGGUGGUGAGCUGUCUGUGAGCACUG\
) } def
/len { sequence length } bind def

/coor [
[115.06147003 141.02182007]
[105.23940277 143.38417053]
[95.13733673 143.42800903]
[85.29514313 141.15098572]
[76.23878479 136.67481995]
[68.45227051 130.23867798]
[62.35170746 122.18655396]
[58.26311874 112.94873810]
[56.40501022 103.01893616]
[41.48503494 101.47156525]
[26.56505966 99.92419434]
[11.64508533 98.37682343]
[-2.87962699 104.64924622]
[-14.74083424 95.64030457]
[-29.66080856 94.09293365]
[-44.58078384 92.54556274]
[-59.50075912 90.99819183]
[-74.42073059 89.45082092]
[-86.61832428 99.13877869]
[-101.72725677 97.35698700]
[-110.88807678 85.66874695]
[-125.80805206 84.12137604]
[-140.75682068 82.88268280]
[-155.72799683 81.95320129]
[-170.69917297 81.02372742]
[-185.67033386 80.09424591]
[-200.64151001 79.16476440]
[-216.89527893 87.75664520]
[-231.15057373 77.56797028]
[-246.13775635 76.94809723]
[-261.12493896 76.32822418]
[-276.11212158 75.70834351]
[-291.09933472 75.08847046]
[-306.08651733 74.46859741]
[-314.87203979 87.14999390]
[-329.12774658 93.04734039]
[-344.30465698 90.27880859]
[-355.55990601 79.72782898]
[-359.30194092 64.76117706]
[-354.33673096 50.15466309]
[-342.24865723 40.56917191]
[-326.89495850 39.06339264]
[-313.17492676 46.11782074]
[-305.46664429 59.48141098]
[-290.47943115 60.10128403]
[-275.49224854 60.72116089]
[-260.50506592 61.34103394]
[-245.51788330 61.96091080]
[-230.53070068 62.58078384]
[-221.38450623 54.60382843]
[-208.85424805 55.03669739]
[-199.71203613 64.19358826]
[-184.74085999 65.12306976]
[-169.76968384 66.05255127]
[-154.79850769 66.98203278]
[-139.82733154 67.91151428]
[-135.67674255 65.43466187]
[-129.91587830 65.58290100]
[-124.26068115 69.20140076]
[-109.34070587 70.74877167]
[-97.97624969 61.18923187]
[-82.82323456 62.54594421]
[-72.87335968 74.53084564]
[-57.95338821 76.07821655]
[-43.03341293 77.62558746]
[-28.11343765 79.17295837]
[-13.19346333 80.72032928]
[0.26407260 74.33722687]
[13.19245625 83.45684814]
[28.11243057 85.00421906]
[43.03240585 86.55158997]
[57.95238113 88.09896088]
[63.32133102 76.24474335]
[71.94297028 66.49716187]
[83.05273438 59.72063446]
[95.66539001 56.51611328]
[108.66244507 57.16777802]
[114.11505890 43.19391251]
[119.56768036 29.22004509]
[125.02030182 15.24617958]
[130.47291565 1.27231300]
[135.92553711 -12.70155334]
[130.82382202 -27.91181183]
[139.65545654 -41.30516052]
[155.64556885 -42.60736847]
[166.52792358 -30.81949234]
[163.95449829 -14.98418331]
[149.89939880 -7.24893379]
[144.44679260 6.72493267]
[138.99417114 20.69879913]
[133.54154968 34.67266464]
[128.08892822 48.64653015]
[122.63630676 62.62039948]
[139.83520508 82.03353882]
[143.00210571 107.77538300]
[157.08566284 112.93804169]
[171.16923523 118.10070038]
[185.25280762 123.26335907]
[194.45188904 123.28553772]
[199.57223511 128.68098450]
[213.54611206 134.13360596]
[227.51997375 139.58622742]
[241.54943848 144.89414978]
[255.63301086 150.05680847]
[269.71658325 155.21946716]
[283.80014038 160.38212585]
[297.88372803 165.54478455]
[313.50378418 163.02989197]
[322.79046631 174.67492676]
[336.87402344 179.83758545]
[352.49407959 177.32269287]
[361.78076172 188.96772766]
[375.86434937 194.13038635]
[389.94790649 199.29304504]
[404.03149414 204.45570374]
[418.11505127 209.61836243]
[432.19863892 214.78102112]
[446.28219604 219.94367981]
[459.09078979 211.18470764]
[474.60055542 211.66091919]
[486.84768677 221.18917847]
[491.12286377 236.10569763]
[485.78225708 250.67475891]
[472.87939453 259.29425049]
[457.37570190 258.64981079]
[445.23266602 248.98925781]
[441.11953735 234.02723694]
[427.03598022 228.86459351]
[412.95239258 223.70193481]
[398.86883545 218.53927612]
[384.78524780 213.37661743]
[370.70169067 208.21395874]
[356.61810303 203.05130005]
[342.00543213 205.93544006]
[331.71136475 193.92115784]
[317.62780762 188.75849915]
[303.01510620 191.64263916]
[292.72106934 179.62835693]
[278.63748169 174.46569824]
[264.55392456 169.30303955]
[250.47035217 164.14038086]
[236.38677979 158.97772217]
[228.97734070 159.63262939]
[222.06735229 153.56008911]
[208.09349060 148.10746765]
[194.11961365 142.65484619]
[180.09014893 137.34692383]
[166.00657654 132.18426514]
[151.92300415 127.02161407]
[137.83944702 121.85895538]
[131.80899048 129.96372986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 72]
[10 71]
[11 70]
[12 69]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[21 60]
[22 59]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[95 150]
[96 149]
[97 148]
[98 147]
[100 146]
[101 145]
[102 144]
[103 142]
[104 141]
[105 140]
[106 139]
[107 138]
[109 136]
[110 135]
[112 133]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
