%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUUUGUUUGCACCCGCCUCCGACCCGGAACUGCUUUCUUGGGAAGAUGGCGGCUGUGUCGGUGUAUGCUCCACCAGUUGGAGGCUUCUCUUUUGAUAACUGCCGCAGGAAUGCCGUCUUGGAAGCCGAUUUUGCAAAGAGGGGAU\
) } def
/len { sequence length } bind def

/coor [
[119.72502136 436.97351074]
[119.40878296 421.97683716]
[119.09253693 406.98019409]
[118.77629089 391.98352051]
[118.46004486 376.98684692]
[118.14380646 361.99017334]
[117.82756042 346.99353027]
[114.51966095 340.32736206]
[117.66609192 331.67810059]
[117.66609192 316.67810059]
[117.66609192 301.67810059]
[117.66609192 286.67810059]
[117.66609192 271.67810059]
[117.66609192 256.67810059]
[101.96400452 246.66880798]
[95.33975983 229.10678101]
[100.60276794 210.93498230]
[115.82480621 199.45213318]
[114.87663269 184.48213196]
[106.35030365 172.26939392]
[113.19979858 158.00773621]
[112.25163269 143.03773499]
[111.30345917 128.06771851]
[105.64948273 123.13999176]
[94.34152985 113.28453064]
[88.68755341 108.35679626]
[73.72837830 109.46273041]
[58.76919937 110.56866455]
[43.81002426 111.67459869]
[28.86334038 112.93817139]
[13.93080711 114.35923767]
[-1.00172663 115.78031158]
[-12.28748703 127.18255615]
[-28.22263527 125.32498169]
[-36.58309174 111.63256073]
[-30.95542717 96.60894775]
[-15.65670586 91.77896881]
[-2.42279696 100.84777832]
[12.50973701 99.42670441]
[27.44227028 98.00563049]
[33.84640884 94.21524811]
[42.70409393 96.71542358]
[57.66326904 95.60948944]
[72.62244415 94.50355530]
[87.58161926 93.39762115]
[99.77239990 84.65778351]
[105.62203979 70.84540558]
[111.47168732 57.03303146]
[117.32132721 43.22065735]
[123.17097473 29.40828514]
[129.02061462 15.59591103]
[134.87025452 1.78353703]
[140.71990967 -12.02883720]
[146.56954956 -25.84121132]
[143.13659668 -45.65992355]
[158.93295288 -56.74301147]
[164.19511414 -70.78971100]
[169.45727539 -84.83640289]
[174.71943665 -98.88310242]
[179.98159790 -112.92979431]
[177.57728577 -128.56724548]
[189.28771973 -137.77133179]
[194.54988098 -151.81802368]
[199.81204224 -165.86471558]
[205.07420349 -179.91140747]
[189.07667542 -194.32063293]
[180.70910645 -214.11346436]
[181.51632690 -235.54594421]
[191.31127930 -254.57997131]
[208.21684265 -267.64419556]
[229.02545166 -272.30404663]
[231.23129272 -287.14096069]
[233.43713379 -301.97787476]
[235.64299011 -316.81478882]
[237.84883118 -331.65173340]
[229.48986816 -345.34506226]
[235.11918640 -360.36804199]
[250.41844177 -365.19635010]
[263.65133667 -356.12609863]
[264.66677856 -340.11520386]
[252.68574524 -329.44589233]
[250.47990417 -314.60894775]
[248.27406311 -299.77203369]
[246.06822205 -284.93511963]
[243.86236572 -270.09820557]
[252.48803711 -266.52770996]
[260.28744507 -261.38513184]
[266.97711182 -254.85430908]
[272.31329346 -247.16957092]
[276.10092163 -238.60740662]
[278.20068359 -229.47642517]
[278.53408813 -220.10627747]
[277.08654785 -210.83576965]
[273.90786743 -202.00056458]
[269.11059570 -193.92105103]
[262.86605835 -186.89076233]
[255.39813232 -181.16564941]
[246.97535706 -176.95478821]
[237.90119934 -174.41279602]
[228.50315857 -173.63403320]
[219.12089539 -174.64924622]
[213.85873413 -160.60255432]
[208.59657288 -146.55586243]
[203.33441162 -132.50917053]
[206.11511230 -117.87642670]
[194.02830505 -107.66763306]
[188.76614380 -93.62094116]
[183.50398254 -79.57424164]
[178.24182129 -65.52754974]
[172.97966003 -51.48085022]
[178.06135559 -42.52067184]
[177.32034302 -32.02547455]
[170.76110840 -23.51890755]
[160.38191223 -19.99156761]
[154.53227234 -6.17919350]
[148.68263245 7.63318062]
[142.83299255 21.44555473]
[136.98335266 35.25792694]
[131.13369751 49.07030106]
[125.28405762 62.88267517]
[119.43441772 76.69505310]
[113.58477020 90.50742340]
[126.27346039 127.11955261]
[127.22163391 142.08955383]
[128.16979980 157.05955505]
[136.76396179 170.34304810]
[129.84663391 183.53395081]
[130.79481506 198.50395203]
[141.50028992 202.91476440]
[149.72659302 210.98937988]
[154.29483032 221.51632690]
[154.57081604 232.93688965]
[150.55279541 243.57575989]
[142.86608887 251.88688660]
[132.66609192 256.67810059]
[132.66609192 271.67810059]
[132.66609192 286.67810059]
[132.66609192 301.67810059]
[132.66609192 316.67810059]
[132.66609192 331.67810059]
[132.82421875 346.67727661]
[133.14047241 361.67395020]
[133.45671082 376.67059326]
[133.77296448 391.66726685]
[134.08920288 406.66394043]
[134.40544128 421.66061401]
[134.72169495 436.65725708]
[137.31805420 455.86425781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[18 128]
[19 127]
[21 125]
[22 124]
[23 123]
[26 45]
[27 44]
[28 43]
[29 42]
[30 40]
[31 39]
[32 38]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[51 117]
[52 116]
[53 115]
[54 114]
[56 110]
[57 109]
[58 108]
[59 107]
[60 106]
[62 104]
[63 103]
[64 102]
[65 101]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
