%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACGUGAGUGCCGGACCGCUGAGUGGUUGUUAGCCAAGAUGGCGGUAGCGAUCGCUGCAGCGAGGGUCUGGCGGCUAAACCGUGGUUUGAGCCAGGCUGCCCUCCUGCUGCUGCGGCAGCCUGGGGCUCGGGGACUGG\
) } def
/len { sequence length } bind def

/coor [
[172.89859009 137.32261658]
[158.97686768 131.73822021]
[145.05513000 126.15380859]
[131.13340759 120.56940460]
[117.21168518 114.98500061]
[101.03699493 122.79730225]
[84.21984100 116.48571777]
[77.17916107 99.96054077]
[63.02090836 95.00635529]
[48.86265945 90.05216980]
[34.64971542 85.25714874]
[20.38386726 80.62188721]
[6.11801910 75.98663330]
[-8.14782810 71.35137939]
[-22.41367531 66.71612549]
[-36.67952347 62.08087158]
[-50.94537354 57.44561386]
[-65.21121979 52.81035995]
[-79.62497711 48.65782928]
[-94.17031860 44.99272156]
[-108.71566772 41.32761765]
[-123.26100922 37.66250992]
[-137.84655762 34.16082764]
[-152.47047424 30.82301521]
[-167.09439087 27.48520088]
[-181.71830750 24.14738655]
[-196.34222412 20.80957413]
[-210.96615601 17.47175980]
[-225.59007263 14.13394547]
[-240.21398926 10.79613113]
[-254.83790588 7.45831728]
[-269.46182251 4.12050343]
[-284.08575439 0.78268933]
[-298.78088379 -2.22615194]
[-313.53982544 -4.90450525]
[-328.29876709 -7.58285856]
[-343.05770874 -10.26121235]
[-359.72192383 -7.14022589]
[-367.33404541 -22.28921318]
[-354.88433838 -33.79751587]
[-340.37936401 -25.02015686]
[-325.62042236 -22.34180260]
[-310.86145020 -19.66344833]
[-296.10250854 -16.98509598]
[-291.67596436 -18.97000694]
[-285.94900513 -18.13634872]
[-280.74792480 -13.84122944]
[-266.12402344 -10.50341511]
[-251.50009155 -7.16560125]
[-236.87617493 -3.82778740]
[-222.25225830 -0.48997331]
[-207.62834167 2.84784079]
[-193.00440979 6.18565464]
[-178.38049316 9.52346897]
[-163.75657654 12.86128235]
[-149.13265991 16.19909668]
[-134.50874329 19.53691101]
[-127.22763062 17.94551468]
[-119.59590149 23.11716652]
[-105.05056000 26.78227234]
[-90.50521851 30.44738007]
[-75.95987701 34.11248398]
[-72.70637512 32.56180191]
[-68.52360535 32.56040955]
[-64.17192841 34.53478241]
[-60.57596588 38.54451370]
[-46.31011581 43.17976761]
[-32.04426956 47.81502151]
[-17.77842140 52.45027924]
[-3.51257348 57.08553314]
[10.75327396 61.72078705]
[25.01912117 66.35604095]
[39.28496933 70.99129486]
[46.67942047 70.05898285]
[53.81684494 75.89392090]
[67.97509766 80.84810638]
[82.13334656 85.80229187]
[91.19769287 78.94503021]
[102.44548035 77.31053162]
[113.08666229 81.30422974]
[120.48165131 89.93548584]
[122.79608917 101.06327057]
[136.71781921 106.64768219]
[150.63954163 112.23208618]
[164.56126404 117.81649017]
[178.48298645 123.40089417]
[192.79994202 127.87580109]
[207.42387390 131.21360779]
[222.04779053 134.55142212]
[236.67170715 137.88923645]
[251.29562378 141.22705078]
[265.91955566 144.56486511]
[280.54345703 147.90267944]
[295.16738892 151.24049377]
[309.86251831 154.24934387]
[324.62145996 156.92768860]
[339.38040161 159.60604858]
[354.13934326 162.28439331]
[368.89828491 164.96275330]
[383.65722656 167.64109802]
[398.41616821 170.31945801]
[413.17510986 172.99781799]
[407.34417725 159.17753601]
[414.31100464 145.89356995]
[428.99536133 142.83262634]
[440.68942261 152.22673035]
[440.86584473 167.22569275]
[429.39630127 176.89216614]
[443.76257324 181.20616150]
[459.58978271 176.91296387]
[471.02908325 188.66348267]
[466.31268311 204.36978149]
[450.29241943 207.87457275]
[439.44857788 195.57241821]
[425.08230591 191.25843811]
[410.49676514 187.75675964]
[395.73782349 185.07839966]
[380.97888184 182.40005493]
[366.21994019 179.72169495]
[351.46099854 177.04333496]
[336.70205688 174.36499023]
[321.94311523 171.68663025]
[307.18414307 169.00828552]
[302.75759888 170.99319458]
[297.03063965 170.15953064]
[291.82955933 165.86441040]
[277.20565796 162.52659607]
[262.58172607 159.18878174]
[247.95780945 155.85096741]
[233.33389282 152.51315308]
[218.70997620 149.17533875]
[204.08605957 145.83752441]
[189.46212769 142.49971008]
[196.98944092 155.47428894]
[194.60183716 170.28305054]
[183.37820435 180.23445129]
[168.39010620 180.83178711]
[156.41012573 171.80516052]
[152.85157776 157.23338318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[4 83]
[5 82]
[8 77]
[9 76]
[10 75]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 62]
[20 61]
[21 60]
[22 59]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 44]
[35 43]
[36 42]
[37 41]
[87 133]
[88 132]
[89 131]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
