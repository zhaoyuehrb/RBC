%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACUGGCCUGACCUUCAAAGGCCUUCACAGCUCCUGCCUUCAUGUUACCGUCUACUAUGUUCCUCGUGCACCUUCCACUCAGCACAAACAGGCUGCACUGCCUCCGAAACACAUCACUUGAAUCCUACCUCUGCUCCUUUG\
) } def
/len { sequence length } bind def

/coor [
[-30.92926407 453.79568481]
[-38.28364944 457.94519043]
[-46.28282166 460.62698364]
[-54.63733673 461.74707031]
[-63.04545975 461.26779175]
[-71.20405579 459.20928955]
[-78.81951904 455.64855957]
[-88.46133423 467.13922119]
[-98.10314941 478.62991333]
[-107.74496460 490.12057495]
[-117.38677979 501.61123657]
[-112.70799255 516.31201172]
[-116.74183655 531.20263672]
[-128.20114136 541.53161621]
[-143.42926025 544.00305176]
[-157.56697083 537.82818604]
[-166.10298157 524.97753906]
[-166.31347656 509.55157471]
[-158.13130188 496.47277832]
[-144.16732788 489.91445923]
[-128.87744141 491.96942139]
[-119.23563385 480.47875977]
[-109.59381866 468.98809814]
[-99.95200348 457.49740601]
[-90.31018829 446.00674438]
[-100.11170959 425.78985596]
[-98.73231506 403.30050659]
[-86.46403503 384.32550049]
[-66.40880585 373.77813721]
[-43.69441223 374.42617798]
[-37.06008148 360.97311401]
[-30.42575073 347.52001953]
[-41.17345428 337.12539673]
[-48.19157410 323.89981079]
[-50.78168488 309.13256836]
[-48.67773438 294.26770020]
[-42.07331467 280.76272583]
[-31.60390663 269.94577026]
[-18.28577423 262.88491821]
[-3.41730642 260.28277588]
[11.54755020 262.40658569]
[18.18188095 248.95347595]
[24.81621170 235.50039673]
[31.45054054 222.04730225]
[30.14029694 207.21043396]
[43.18333054 198.25555420]
[49.81766129 184.80247498]
[39.09626007 177.46263123]
[29.43378258 168.77597046]
[20.99822807 158.89350891]
[13.93626881 147.98707581]
[8.37068558 136.24630737]
[4.39824772 123.87531281]
[2.08802342 111.08921051]
[1.48018050 98.11030579]
[2.58528709 85.16424561]
[5.38412905 72.47614288]
[9.82804298 60.26659012]
[15.83976364 48.74787521]
[23.31476593 38.12027359]
[32.12308502 28.56856537]
[42.11156464 20.25882530]
[53.10654831 13.33553314]
[64.91685486 7.91906309]
[77.33715057 4.10359144]
[90.15148163 1.95545638]
[103.13705444 1.51200736]
[116.06807709 2.78095436]
[119.63336182 -11.78917694]
[123.19864655 -26.35930824]
[126.76393890 -40.92943954]
[114.94781494 -50.59080124]
[108.50154877 -64.42584229]
[108.70503998 -79.68760681]
[115.51789856 -93.34584808]
[127.58742523 -102.68872833]
[142.51719666 -105.86120605]
[157.34291077 -102.23337555]
[169.12089539 -92.52555084]
[175.51263428 -78.66523743]
[175.24903870 -63.40439224]
[168.38244629 -49.77308273]
[156.27621460 -40.47780609]
[141.33407593 -37.36415100]
[137.76878357 -22.79401970]
[134.20349121 -8.22388840]
[130.63819885 6.34624290]
[144.53459167 12.10007668]
[157.39340210 19.90179062]
[168.91508484 29.56962395]
[178.83117676 40.87833405]
[186.91067505 53.56445312]
[200.64035034 47.52325439]
[214.37002563 41.48205566]
[228.09970093 35.44085312]
[233.59346008 20.62214470]
[247.99119568 14.10443401]
[262.75100708 19.75456238]
[269.11611938 34.22040939]
[263.31027222 48.91964340]
[248.77792358 55.13147354]
[234.14089966 49.17052460]
[220.41122437 55.21172714]
[206.68154907 61.25292587]
[192.95187378 67.29412842]
[197.24629211 84.09767151]
[198.52807617 101.39385986]
[196.75753784 118.64686584]
[191.98950195 135.32220459]
[184.37168884 150.90328979]
[174.14009094 164.90740967]
[161.61169434 176.90075684]
[147.17459106 186.51174927]
[131.27606201 193.44267273]
[114.40861511 197.47880554]
[97.09479523 198.49510193]
[79.87097931 196.46008301]
[63.27075195 191.43679810]
[56.63642120 204.88989258]
[57.47213364 220.68901062]
[44.90363312 228.68162537]
[38.26930237 242.13471985]
[31.63497162 255.58781433]
[25.00064087 269.04089355]
[35.79558945 279.62042236]
[42.78252029 293.00045776]
[45.28833389 307.86483765]
[43.08003235 322.75570679]
[36.38633728 336.21667480]
[25.87404633 346.93499756]
[12.58164597 353.86984253]
[-2.18327713 356.35324097]
[-16.97266006 354.15432739]
[-23.60699081 367.60742188]
[-30.24132156 381.06051636]
[-23.86913300 386.71484375]
[-18.68548203 393.46603394]
[-14.87510204 401.06878662]
[-12.57290649 409.24765015]
[-11.85921288 417.70678711]
[-12.75694275 426.14086914]
[-15.23089600 434.24591064]
[-19.18912315 441.73040771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[30 135]
[31 134]
[32 133]
[41 124]
[42 123]
[43 122]
[44 121]
[46 119]
[47 118]
[68 87]
[69 86]
[70 85]
[71 84]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
