%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGCUAAAGUCACAAGAUACUGAGUCUCAUGCAGCACUCUGGAAUUCCUACAAAAACUCAUCCGCAGGGGUAUGCUGCCCGCUACACAGAAACGGCCGUGCAUCGGACUUUCCAGAUAAAAACAUUUA\
) } def
/len { sequence length } bind def

/coor [
[-5.07109261 306.06903076]
[-12.81900406 293.22494507]
[-16.10287666 278.58883667]
[-14.58499432 263.66583252]
[-8.42181683 249.99118042]
[-21.10213280 258.00427246]
[-33.78244781 266.01736450]
[-34.08063507 274.58139038]
[-37.75430298 282.21820068]
[-44.11545181 287.67312622]
[-52.04193497 290.08410645]
[-60.17500305 289.11737061]
[-67.15214539 285.01150513]
[-80.54165649 291.77322388]
[-85.56838989 306.51669312]
[-99.24357605 313.18331909]
[-113.26823425 308.30023193]
[-126.65774536 315.06198120]
[-140.04725647 321.82369995]
[-153.43676758 328.58544922]
[-159.79490662 343.31478882]
[-175.31222534 347.38818359]
[-188.08514404 337.68087769]
[-188.31538391 321.63946533]
[-175.82632446 311.56958008]
[-160.19850159 315.19595337]
[-146.80899048 308.43420410]
[-133.41947937 301.67245483]
[-120.02997589 294.91073608]
[-115.63481140 280.72558594]
[-102.15226746 273.67749023]
[-87.30339050 278.38372803]
[-73.91388702 271.62197876]
[-64.13075256 252.35661316]
[-41.79553604 253.33703613]
[-29.11522102 245.32395935]
[-16.43490601 237.31086731]
[-14.73498249 232.01220703]
[-10.32293987 227.68826294]
[-3.82229447 225.71482849]
[5.22566605 213.75094604]
[14.27362633 201.78707886]
[23.32158661 189.82319641]
[32.36954880 177.85931396]
[41.41750717 165.89543152]
[50.46546936 153.93154907]
[51.64321899 136.46470642]
[68.57448578 129.34304810]
[77.33296204 117.16564178]
[86.09143829 104.98824310]
[73.93508148 113.77590179]
[59.12934113 116.18215942]
[44.81576920 111.69644165]
[34.03149414 101.27053833]
[29.06476784 87.11668396]
[30.96946144 72.23810577]
[39.34142303 59.79180908]
[52.40425491 52.41871643]
[67.38621521 51.68328476]
[81.10836029 57.74156189]
[90.65905762 69.30807495]
[94.01180267 83.92837524]
[95.44849396 68.99733734]
[96.88518524 54.06630325]
[98.32187653 39.13526154]
[91.03161621 24.44566917]
[100.33216858 10.93894005]
[116.65592957 12.50964069]
[123.21040344 27.54196930]
[113.25291443 40.57195282]
[111.81622314 55.50299454]
[110.37953186 70.43402863]
[108.94284058 85.36507416]
[121.12023926 94.12354279]
[134.81854248 88.01154327]
[148.51684570 81.89953613]
[162.21514893 75.78753662]
[175.83917236 69.51172638]
[189.38697815 63.07300568]
[198.52987671 50.16108322]
[213.34620667 51.68615341]
[226.89401245 45.24743271]
[240.44180298 38.80871201]
[240.98495483 23.51284409]
[248.58430481 10.22719383]
[261.49359131 2.00470710]
[276.74630737 0.73485065]
[290.83755493 6.70942831]
[300.52923584 18.55552483]
[303.59426880 33.55099487]
[299.32833862 48.24999237]
[288.71173096 59.27478790]
[274.18405151 64.09197235]
[259.08367920 61.59458542]
[246.88052368 52.35651016]
[233.33273315 58.79523087]
[219.78492737 65.23395538]
[211.61105347 77.68533325]
[195.82569885 76.62080383]
[182.27789307 83.05952454]
[177.54003906 88.82930756]
[168.32714844 89.48583984]
[154.62884521 95.59783936]
[140.93054199 101.70983887]
[127.23224640 107.82184601]
[111.61152649 117.61084747]
[98.26883698 113.74671173]
[89.51036835 125.92411804]
[80.75189209 138.10151672]
[82.04983521 150.99942017]
[74.42240906 160.97927856]
[62.42934799 162.97952271]
[53.38138580 174.94338989]
[44.33342743 186.90727234]
[35.28546524 198.87115479]
[26.23750496 210.83503723]
[17.18954468 222.79891968]
[8.14158535 234.76278687]
[22.28543472 229.76763916]
[37.28315735 229.50640869]
[51.59238434 234.00598145]
[63.74154282 242.80358887]
[72.48120117 254.99450684]
[76.91257477 269.32498169]
[76.57993317 284.32128906]
[71.51749420 298.44119263]
[62.24586487 310.23260498]
[49.71856308 318.48284912]
[35.22389603 322.34350586]
[20.25250435 321.41751099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[13 33]
[14 32]
[17 29]
[18 28]
[19 27]
[20 26]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[46 112]
[48 109]
[49 108]
[50 107]
[62 73]
[63 72]
[64 71]
[65 70]
[74 105]
[75 104]
[76 103]
[77 102]
[78 100]
[79 99]
[81 97]
[82 96]
[83 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
