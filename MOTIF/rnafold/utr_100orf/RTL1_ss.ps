%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:21:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGGACGCCAUCACAACCUUACCAAUCUUCAGAAUACACUCCUUUCCAUCCGACGAAAUGAUAGAACCCUCUGAAGACUCAUUUGAGACGAUGAUGGAGCAUAAGAAUCCAUCAUCAAAACAAAUGGAGUCCUCCGAGGGCUCAUCCAACACCACCG\
) } def
/len { sequence length } bind def

/coor [
[55.89876175 209.22793579]
[58.89842606 194.29737854]
[67.71685791 181.88145447]
[80.82621002 174.13130188]
[79.06314850 159.23527527]
[77.30008698 144.33924866]
[75.53702545 129.44322205]
[69.94272614 143.36097717]
[70.58876801 158.34706116]
[66.92985535 172.89395142]
[59.27048111 185.79101562]
[48.24811172 195.96487427]
[34.78007507 202.56880188]
[19.98724937 205.05320740]
[5.10076332 203.21133423]
[-8.64045525 197.19644165]
[-20.09279633 187.50912476]
[-28.30313873 174.95564270]
[-32.58818054 160.58071899]
[-32.59129715 145.58071899]
[-28.31222916 131.20401001]
[-20.10710335 118.64710236]
[-8.65878868 108.95503998]
[5.07992983 102.93444061]
[19.96564865 101.08636475]
[34.75950623 103.56462860]
[48.22777939 110.16125488]
[63.22096252 110.61334229]
[50.27994919 103.02848053]
[37.33893204 95.44361877]
[24.39791679 87.85875702]
[11.45690060 80.27389526]
[-1.48411489 72.68904114]
[-14.42513084 65.10417938]
[-27.36614609 57.51931763]
[-40.61698151 67.88947296]
[-56.79325485 72.38634491]
[-73.42230225 70.35166931]
[-87.97338104 62.12334061]
[-98.24281311 48.97972107]
[-102.68771362 32.94106674]
[-100.65773010 16.45904541]
[-113.88655090 9.38809490]
[-129.70455933 9.70642853]
[-137.28166199 -3.11685538]
[-150.51048279 -10.18780613]
[-163.73930359 -17.25875664]
[-176.96812439 -24.32970810]
[-190.87028503 -17.43700409]
[-206.16314697 -20.06536293]
[-216.96626282 -31.20413017]
[-219.12564087 -46.57022095]
[-211.81094360 -60.25505829]
[-197.83482361 -66.99654388]
[-182.57138062 -64.20244598]
[-171.88972473 -52.94713974]
[-169.89717102 -37.55852890]
[-156.66835022 -30.48757744]
[-143.43952942 -23.41662598]
[-130.21070862 -16.34567451]
[-115.33892822 -17.16976929]
[-106.81559753 -3.84072375]
[-93.58677673 3.23022723]
[-83.85293579 -5.85158253]
[-71.76750183 -11.48876858]
[-58.50865936 -13.11618614]
[-45.37382126 -10.56035900]
[-33.65267181 -4.05784988]
[-24.50052071 5.76656103]
[-18.82445717 17.95988274]
[-17.19343376 31.33334732]
[-19.78128624 44.57830048]
[-6.84027004 52.16316223]
[6.10074568 59.74802399]
[19.04176140 67.33288574]
[31.98277664 74.91773987]
[44.92379379 82.50260162]
[57.86480713 90.08746338]
[70.80582428 97.67232513]
[81.08663177 77.17198181]
[103.21789551 70.16960907]
[123.91102600 81.28906250]
[136.38307190 72.95550537]
[148.85511780 64.62195587]
[161.32716370 56.28840256]
[173.79920959 47.95484924]
[186.27125549 39.62129593]
[185.37336731 24.35233688]
[192.19372559 10.77369404]
[204.81114197 2.48712969]
[219.78207397 1.63441217]
[233.08016968 8.34457588]
[245.55221558 0.01102198]
[258.02426147 -8.32253170]
[270.49630737 -16.65608597]
[282.96835327 -24.98963928]
[295.44039917 -33.32319260]
[307.91244507 -41.65674591]
[320.38449097 -49.99029922]
[332.85653687 -58.32385254]
[332.47836304 -73.74658203]
[340.51788330 -86.91356659]
[354.40972900 -93.62326813]
[369.72106934 -91.73464966]
[381.56607056 -81.85035706]
[386.16506958 -67.12444305]
[382.05053711 -52.25587845]
[370.53540039 -41.98917389]
[355.29409790 -39.60040283]
[341.19006348 -45.85180664]
[328.71801758 -37.51825333]
[316.24600220 -29.18470192]
[303.77395630 -20.85114861]
[291.30191040 -12.51759434]
[278.82986450 -4.18404102]
[266.35781860 4.14951277]
[253.88577271 12.48306656]
[241.41372681 20.81661987]
[242.52413940 35.67032623]
[236.00720215 49.17534256]
[223.52294922 57.66118622]
[208.36787415 58.76604843]
[194.60479736 52.09333801]
[182.13276672 60.42689133]
[169.66072083 68.76044464]
[157.18867493 77.09400177]
[144.71662903 85.42755127]
[132.24458313 93.76110840]
[131.65568542 108.74954224]
[143.43544006 118.03594971]
[155.21519470 127.32235718]
[166.99494934 136.60876465]
[178.77470398 145.89517212]
[190.55445862 155.18159485]
[202.33421326 164.46800232]
[218.51620483 169.52561951]
[218.13586426 186.47529602]
[201.74328613 190.80195618]
[193.04780579 176.24775696]
[181.26805115 166.96134949]
[169.48829651 157.67492676]
[157.70854187 148.38851929]
[145.92878723 139.10211182]
[134.14903259 129.81570435]
[122.36927795 120.52929688]
[107.31349182 128.91368103]
[90.43305206 127.68016815]
[92.19611359 142.57618713]
[93.95917511 157.47221375]
[95.72223663 172.36824036]
[110.27861786 176.84393311]
[121.75183105 186.85818481]
[128.15408325 200.67596436]
[128.37614441 215.90325928]
[122.37953949 229.90185547]
[111.20321655 240.24639893]
[96.78354645 245.14465332]
[81.61881256 243.74794006]
[68.33640289 236.29827881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 150]
[5 149]
[6 148]
[7 147]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[42 63]
[43 62]
[45 60]
[46 59]
[47 58]
[48 57]
[82 128]
[83 127]
[84 126]
[85 125]
[86 124]
[87 123]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
[129 145]
[130 144]
[131 143]
[132 142]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
