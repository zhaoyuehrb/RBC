%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUGCAGUGGGCUUGGUACUCCUGGUGCUUGCUCUGAGGCUUAGGGCCACCACUGUUAAGCCAGAGGAAGGCAGCUUUUGCUCUAACAGCCAGGUGG\
) } def
/len { sequence length } bind def

/coor [
[93.01846313 120.01320648]
[80.81779480 109.01739502]
[65.86312866 110.18265533]
[50.90845490 111.34791565]
[35.95378494 112.51316833]
[20.99911308 113.67842865]
[15.57900715 126.67763519]
[5.11081600 135.99990845]
[-8.29922199 139.84674072]
[-21.98616600 137.51364136]
[-33.25594711 129.51834106]
[-39.91565704 117.48722839]
[-54.89933395 118.18683624]
[-69.88301086 118.88644409]
[-84.86668396 119.58605194]
[-94.21249390 128.64213562]
[-106.82171631 128.82115173]
[-115.82532501 120.57778931]
[-130.82350159 120.81106567]
[-145.82170105 121.04434204]
[-160.81988525 121.27762604]
[-175.81806946 121.51090240]
[-190.81625366 121.74417877]
[-206.55943298 128.03611755]
[-216.96362305 114.64995575]
[-206.98077393 100.94670868]
[-191.04953003 106.74599457]
[-176.05134583 106.51271057]
[-161.05316162 106.27943420]
[-146.05497742 106.04615784]
[-131.05679321 105.81288147]
[-116.05860138 105.57960510]
[-101.61611938 95.74516296]
[-85.56629181 104.60237122]
[-70.58261871 103.90276337]
[-55.59894180 103.20316315]
[-40.61526489 102.50355530]
[-33.61274338 88.03166199]
[-20.21893311 78.97158813]
[-3.99442482 77.84481812]
[10.69067860 85.04861450]
[19.83385468 98.72375488]
[34.78852463 97.55850220]
[49.74319839 96.39324188]
[64.69786835 95.22798157]
[79.65253448 94.06272888]
[86.76216888 83.44613647]
[98.68225098 78.84500122]
[111.08118439 81.93130493]
[119.45336914 91.58352661]
[134.43704224 90.88391876]
[149.42071533 90.18431854]
[164.40438843 89.48471069]
[179.38807678 88.78510284]
[195.64854431 77.07266235]
[212.54605103 86.25346375]
[227.45724487 84.62368774]
[242.36845398 82.99390411]
[257.27963257 81.36412048]
[272.19082642 79.73433685]
[287.10205078 78.10455322]
[301.98608398 76.24307251]
[316.83938599 74.15034485]
[331.69268799 72.05761719]
[344.27841187 62.47064972]
[357.96069336 68.35662842]
[372.81399536 66.26390076]
[387.66729736 64.17116547]
[402.52056885 62.07843781]
[409.68148804 48.31249237]
[423.58117676 41.41481781]
[438.87496948 44.03770828]
[449.68206787 55.17261124]
[451.84695435 70.53792572]
[444.53713989 84.22537994]
[430.56344604 90.97186279]
[415.29898071 88.18321991]
[404.61331177 76.93173981]
[389.76000977 79.02446747]
[374.90670776 81.11719513]
[360.05340576 83.20993042]
[348.53009033 92.64720917]
[333.78540039 86.91091156]
[318.93212891 89.00364685]
[304.07882690 91.09637451]
[297.78375244 95.21919250]
[288.73181152 93.01575470]
[273.82061768 94.64553833]
[258.90942383 96.27531433]
[243.99822998 97.90509796]
[229.08703613 99.53488159]
[214.17582703 101.16466522]
[208.37570190 109.83845520]
[198.51675415 113.88265228]
[187.86172485 111.69154358]
[180.08767700 103.76878357]
[165.10400391 104.46838379]
[150.12033081 105.16799164]
[135.13664246 105.86759949]
[120.15296936 106.56720734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[12 37]
[13 36]
[14 35]
[15 34]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[50 100]
[51 99]
[52 98]
[53 97]
[54 96]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[62 85]
[63 84]
[64 83]
[66 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
