%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGUUGCGUGUGGAACCUGACGGAACUGCCACGAUGCUGCCACUUUGGACUCUUUCACUGCUGCUGGGAGCAGUAGCAGGAAAAGAAGUUUGCUACGAAAGACUCGGCUGCUUCAGUGAUGACUCCCCAUGGU\
) } def
/len { sequence length } bind def

/coor [
[-1.73283756 179.24215698]
[-5.04925823 180.88014221]
[-8.31919575 181.21520996]
[-11.10305119 180.44314575]
[-24.37248421 187.43757629]
[-37.64191818 194.43202209]
[-46.24207687 207.71160889]
[-61.10886002 206.80165100]
[-74.37829590 213.79608154]
[-87.64772797 220.79052734]
[-100.91716003 227.78495789]
[-114.10491943 234.93218994]
[-127.20925903 242.23126221]
[-140.31359863 249.53031921]
[-153.41792297 256.82940674]
[-157.76998901 276.35742188]
[-174.74699402 286.36206055]
[-193.36024475 280.87869263]
[-205.92770386 289.06762695]
[-212.86372375 303.92776489]
[-229.22224426 305.08132935]
[-238.17503357 291.34161377]
[-230.51222229 276.84289551]
[-214.11665344 276.50018311]
[-201.54919434 268.31121826]
[-202.21212769 257.91345215]
[-198.42556763 248.11984253]
[-190.82362366 240.75936890]
[-180.75955200 237.23710632]
[-170.06504822 238.26626587]
[-160.71699524 243.72505188]
[-147.61265564 236.42599487]
[-134.50833130 229.12692261]
[-121.40399170 221.82785034]
[-117.05220032 215.77058411]
[-107.91159821 214.51553345]
[-94.64216614 207.52108765]
[-81.37272644 200.52665710]
[-68.10329437 193.53221130]
[-60.45225525 180.75289917]
[-44.63635635 181.16258240]
[-31.36692238 174.16815186]
[-18.09748840 167.17370605]
[-5.16524220 159.57389832]
[7.40222025 151.38494873]
[19.96968269 143.19599915]
[26.40896034 129.76525879]
[42.19519424 128.71388245]
[54.76265717 120.52493286]
[67.33011627 112.33598328]
[65.07869720 99.98207855]
[67.34279633 87.63048553]
[73.82965851 76.87834930]
[83.70048523 69.11596680]
[95.67893982 65.34706116]
[97.06296539 50.41104889]
[98.44699097 35.47503662]
[99.83101654 20.53902435]
[97.49257660 11.61391926]
[101.42340851 5.27537251]
[103.15205383 -9.62468719]
[104.88069916 -24.52474785]
[106.60934448 -39.42480850]
[108.33798981 -54.32486725]
[110.06663513 -69.22492981]
[111.79528809 -84.12498474]
[113.52393341 -99.02504730]
[115.25257874 -113.92510223]
[108.25122070 -128.75457764]
[117.81434631 -142.07667542]
[134.10423279 -140.18679810]
[140.36323547 -125.02906036]
[130.15263367 -112.19645691]
[128.42399597 -97.29640198]
[126.69534302 -82.39633942]
[124.96669769 -67.49627686]
[123.23805237 -52.59621811]
[121.50940704 -37.69615936]
[119.78076172 -22.79610062]
[118.05210876 -7.89604044]
[116.32346344 7.00401926]
[114.76702881 21.92304993]
[113.38300323 36.85906219]
[111.99897766 51.79507446]
[110.61495209 66.73108673]
[129.37030029 76.17816162]
[140.50444031 95.89562225]
[155.50044250 95.54914856]
[170.49644470 95.20268250]
[185.49243164 94.85621643]
[200.48843384 94.50974274]
[209.99504089 85.70623779]
[222.54957581 85.77572632]
[231.37358093 94.13185120]
[246.37358093 94.13185120]
[252.41050720 91.09644318]
[258.18814087 91.56359863]
[262.06234741 94.49433136]
[277.04632568 95.18708038]
[292.03033447 95.87982941]
[304.80725098 86.17779541]
[320.32287598 90.25759125]
[326.67495728 104.98956299]
[318.99069214 119.07258606]
[303.16479492 121.70338440]
[291.33755493 110.86383057]
[276.35357666 110.17107391]
[261.36956787 109.47832489]
[246.37358093 109.13185120]
[231.37358093 109.13185120]
[216.72579956 118.72693634]
[200.83489990 109.50574493]
[185.83889771 109.85221100]
[170.84291077 110.19867706]
[155.84690857 110.54515076]
[140.85090637 110.89161682]
[134.47676086 124.46991730]
[143.79035950 136.22819519]
[153.10395813 147.98646545]
[168.54067993 153.52177429]
[171.19868469 169.70407104]
[158.34364319 179.88641357]
[143.19972229 173.59405518]
[141.34568787 157.30004883]
[132.03208923 145.54177856]
[122.71849060 133.78350830]
[105.24756622 138.42501831]
[88.38823700 134.97427368]
[75.51906586 124.90344238]
[62.95160675 133.09239197]
[50.38414383 141.28134155]
[43.04595566 155.29782104]
[28.15863228 155.76347351]
[15.59116936 163.95242310]
[3.02370691 172.14137268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[8 39]
[9 38]
[10 37]
[11 36]
[12 34]
[13 33]
[14 32]
[15 31]
[18 25]
[19 24]
[44 135]
[45 134]
[46 133]
[48 131]
[49 130]
[50 129]
[55 85]
[56 84]
[57 83]
[58 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[94 110]
[95 109]
[98 108]
[99 107]
[100 106]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
