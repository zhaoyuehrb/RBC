%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUAAAAGACCGGGACCCCCUGGAAGCCGAGAAAUGGGACUGUUGACAUUCAGAGACAUAGCUAUAGAAUUCUCUCUGGCGGAGUGGCAAUGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[83.27701569 174.06265259]
[82.95254517 158.26168823]
[93.95619965 146.91729736]
[93.48970032 131.92456055]
[93.02320099 116.93181610]
[86.79529572 112.75292206]
[80.01677704 126.13394165]
[74.42316437 140.05197144]
[59.42320251 140.08502197]
[53.76830292 126.19178772]
[64.52686310 115.74029541]
[74.33946991 104.39513397]
[68.11156464 100.21624756]
[54.06102753 105.46813965]
[40.01049042 110.72003937]
[25.95995331 115.97193146]
[11.90941620 121.22383118]
[1.90034711 134.21423340]
[-14.31614208 131.77343750]
[-20.05791664 116.41230774]
[-9.41833210 103.93307495]
[6.65751934 107.17329407]
[20.70805550 101.92140198]
[34.75859451 96.66950226]
[48.80912781 91.41760254]
[62.85966492 86.16571045]
[64.02140045 78.75623322]
[67.50661469 56.52779388]
[55.73769760 47.22765350]
[43.82557297 38.11166000]
[31.77311897 29.18202782]
[17.01237488 33.96743393]
[2.26835275 29.13075829]
[-6.78957272 16.53180695]
[-6.67844343 1.01512885]
[2.55900931 -11.45279408]
[17.37079620 -16.07779121]
[32.06148148 -11.08145714]
[40.98220062 1.61501515]
[40.70275116 17.12957382]
[52.75520706 26.05920601]
[60.13348389 27.53788376]
[65.03784180 35.45873642]
[76.80675507 44.75888062]
[110.49268341 90.00061798]
[124.37309265 84.31429291]
[138.25349426 78.62796021]
[152.13391113 72.94163513]
[161.97091675 60.55036163]
[176.68135071 62.88539124]
[190.56175232 57.19906616]
[204.44216919 51.51274109]
[218.32257080 45.82641220]
[232.20297241 40.14008713]
[232.75811768 33.66450882]
[235.03033447 27.61043930]
[238.83403015 22.42178345]
[243.87203979 18.47383690]
[249.75883484 16.04616356]
[256.04986572 15.30284786]
[262.27532959 16.28150940]
[267.97503662 18.89182663]
[272.73260498 22.92354202]
[276.20568848 28.06330681]
[291.05899048 25.97057724]
[305.91229248 23.87784767]
[320.76559448 21.78511810]
[333.35131836 12.19815254]
[347.03359985 18.08413124]
[361.88690186 15.99140167]
[376.74020386 13.89867115]
[389.31909180 3.37711668]
[404.62545776 9.26334286]
[406.91339111 25.50210571]
[393.82928467 35.38835526]
[378.83291626 28.75197029]
[363.97961426 30.84469986]
[349.12634277 32.93743134]
[337.60299683 42.37471008]
[322.85833740 36.63841629]
[308.00503540 38.73114777]
[293.15173340 40.82387543]
[278.29843140 42.91660690]
[261.93377686 61.01709747]
[237.88931274 54.02049255]
[224.00889587 59.70682144]
[210.12849426 65.39314270]
[196.24807739 71.07947540]
[182.36767578 76.76580048]
[173.52348328 88.75035095]
[157.82023621 86.82204437]
[143.93981934 92.50836945]
[130.05941772 98.19469452]
[116.17900848 103.88101959]
[108.01594543 116.46531677]
[108.48244476 131.45805359]
[108.94894409 146.45080566]
[120.63658905 157.08915710]
[121.29508209 172.87971497]
[110.53375244 184.45423889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[28 44]
[29 43]
[30 41]
[31 40]
[45 94]
[46 93]
[47 92]
[48 91]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[64 83]
[65 82]
[66 81]
[67 80]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
