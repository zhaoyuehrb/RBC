%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCAUUGACAUUCAGCGAUGUUGCCAUAGACUUCUCUCAGGAGGAGUGGGAAUAUUUAAACUCGGAUCAGAGGGAUUUGUACAGAGAUGUGAUGUUGG\
) } def
/len { sequence length } bind def

/coor [
[80.13362885 199.97000122]
[76.69548035 214.73329163]
[68.41272736 227.42864990]
[56.28556442 236.52302551]
[41.77839661 240.91822815]
[26.64303970 240.08354187]
[12.70715714 234.11973572]
[1.65357697 223.74697876]
[-5.18292665 210.21781921]
[-6.97681379 195.16598511]
[-3.51146269 180.40904236]
[4.79466772 167.72898865]
[16.93857193 158.65696716]
[31.45381546 154.28849792]
[46.58760834 155.15109253]
[52.48911285 141.36079407]
[58.39061737 127.57049561]
[64.29212189 113.78019714]
[61.73846817 98.99916840]
[51.55217361 87.98828888]
[41.36588287 76.97741699]
[31.17958832 65.96653748]
[20.99329567 54.95565796]
[10.80700207 43.94477844]
[-4.24413538 39.06893921]
[-7.20741892 24.47208214]
[-17.39371300 13.46120453]
[-21.99411201 12.25007343]
[-25.52390099 9.80004215]
[-27.71265984 6.64025927]
[-28.50580406 3.33270812]
[-28.05474854 0.39317068]
[-36.79586411 -11.79669762]
[-45.53697968 -23.98656654]
[-54.27809525 -36.17643356]
[-63.01921082 -48.36630249]
[-71.76033020 -60.55617142]
[-80.50144196 -72.74604034]
[-95.65604401 -79.01263428]
[-97.53777313 -95.30346680]
[-84.21087646 -104.85992432]
[-69.38491821 -97.85114288]
[-68.31157684 -81.48715973]
[-59.57045746 -69.29728699]
[-50.82934189 -57.10741806]
[-42.08822632 -44.91754913]
[-33.34711075 -32.72768402]
[-24.60599518 -20.53781319]
[-15.86488056 -8.34794521]
[-6.38283396 3.27491164]
[3.80345893 14.28578949]
[18.12600517 18.37405777]
[21.81788063 33.75848770]
[32.00417328 44.76936340]
[42.19046783 55.78024292]
[52.37675858 66.79112244]
[62.56305313 77.80199432]
[72.74934387 88.81287384]
[77.56904602 80.21772766]
[85.05078888 73.57749939]
[94.43318939 69.69842529]
[104.71762848 69.09900665]
[114.77438354 71.94284821]
[123.46675873 78.00997162]
[129.77944946 86.71073151]
[144.56047058 84.15708160]
[159.34150696 81.60342407]
[174.12254333 79.04977417]
[188.90356445 76.49612427]
[203.68460083 73.94246674]
[214.06964111 61.71420288]
[230.09996033 62.35335922]
[239.47845459 75.36962891]
[235.01075745 90.77804565]
[220.12409973 96.75858307]
[206.23825073 88.72349548]
[191.45721436 91.27715302]
[176.67619324 93.83080292]
[161.89515686 96.38446045]
[147.11413574 98.93811035]
[132.33309937 101.49176788]
[128.18856812 115.90782928]
[139.35653687 125.92165375]
[150.52449036 135.93547058]
[161.69245911 145.94929504]
[177.84294128 148.79426575]
[183.19935608 164.29397583]
[172.25148010 176.50364685]
[156.26155090 172.86302185]
[151.67863464 157.11726379]
[140.51068115 147.10343933]
[129.34271240 137.08961487]
[118.17475128 127.07579041]
[103.60303497 131.35293579]
[89.18591309 128.52752686]
[78.08242035 119.68170166]
[72.18091583 133.47200012]
[66.27941132 147.26229858]
[60.37790680 161.05259705]
[71.45058441 171.40496826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 99]
[16 98]
[17 97]
[18 96]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[26 51]
[27 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
