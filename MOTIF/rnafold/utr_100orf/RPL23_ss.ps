%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACGUGAGGAGGGUGGGCGGGGCGUUAAAGUUCAUAUCCCAGUGUCCUUUGAAUCGACUUCCUUUUUUCUUUUUUCCGGCGUUCAAGAUGUCGAAGCGAGGACGUGGUGGGUCCUCUGGUGCGAAAUUCCGGAUUUCCUUGGGUCUUCCGGUAGGAGCUGUAAUCAAUUGUGCUGACAACACAGGAG\
) } def
/len { sequence length } bind def

/coor [
[182.25148010 141.26492310]
[196.42568970 136.35780334]
[182.04280090 132.09954834]
[167.65992737 127.84129333]
[153.27703857 123.58303070]
[138.89416504 119.32477570]
[124.51128387 115.06651306]
[110.12840271 110.80825806]
[89.35245514 123.21660614]
[76.70342255 131.27899170]
[64.05439758 139.34136963]
[51.40536499 147.40376282]
[38.75633240 155.46614075]
[37.68822861 170.83381653]
[27.89047813 182.48960876]
[13.28088570 186.09846497]
[-0.48752522 180.47984314]
[-13.13655567 188.54222107]
[-25.78558540 196.60461426]
[-38.43461609 204.66699219]
[-41.80878448 223.29565430]
[-57.45013809 233.38452148]
[-75.19368744 228.93122864]
[-87.57070160 237.40527344]
[-99.94771576 245.87933350]
[-112.32472229 254.35337830]
[-114.98579407 269.93203735]
[-127.93132782 278.99783325]
[-143.48097229 276.17221069]
[-152.40939331 263.13153076]
[-149.41952515 247.61264038]
[-136.28520203 238.82258606]
[-120.79877472 241.97636414]
[-108.42176819 233.50231934]
[-96.04475403 225.02825928]
[-83.66773987 216.55421448]
[-84.04710388 205.13160706]
[-78.80419922 194.84138489]
[-69.14168549 188.29936218]
[-57.40135956 187.23103333]
[-46.49700165 192.01795959]
[-33.84796906 183.95558167]
[-21.19894028 175.89318848]
[-8.54990959 167.83081055]
[-7.83010912 152.97753906]
[1.60954869 141.25759888]
[16.31218338 137.29705811]
[30.69394875 142.81710815]
[43.34297943 134.75473022]
[55.99200821 126.69234467]
[68.64103699 118.62995911]
[81.29006958 110.56757355]
[66.32418823 111.57871246]
[51.35830688 112.58985138]
[37.88077545 119.17438507]
[22.97518349 120.85466766]
[8.36999130 117.43583679]
[-4.24117708 109.31436157]
[-13.39592457 97.43199158]
[-18.03266525 83.16663361]
[-17.61371803 68.17248535]
[-12.18766594 54.18827820]
[-2.38371563 42.83563232]
[10.66126251 35.43100357]
[25.43456841 32.83303070]
[40.22308350 35.34298325]
[53.31192398 42.66979980]
[63.18330383 53.96386337]
[68.69168091 67.91143036]
[79.05992126 78.75115967]
[89.42815399 89.59088135]
[85.52601624 75.10733032]
[81.62387085 60.62377930]
[77.72173309 46.14022446]
[66.66081238 34.82799530]
[70.82080841 20.52611732]
[66.91867065 6.04256535]
[63.01652527 -8.44098759]
[59.11438370 -22.92453957]
[53.85170746 -30.41192055]
[55.26926422 -37.67843628]
[51.60586929 -52.22421265]
[47.94247055 -66.76998138]
[44.27907562 -81.31575775]
[40.61567688 -95.86153412]
[36.95227814 -110.40730286]
[27.22069931 -124.29012299]
[37.86700058 -137.48454285]
[53.49296188 -130.90687561]
[51.49805450 -114.07070160]
[55.16144943 -99.52492523]
[58.82484818 -84.97915649]
[62.48824310 -70.43338013]
[66.15164185 -55.88760757]
[69.81504059 -41.34183502]
[73.59793854 -26.82668114]
[77.50007629 -12.34312916]
[81.40222168 2.14042377]
[85.30435944 16.62397575]
[96.08617401 26.90024757]
[92.20528412 42.23808289]
[96.10742950 56.72163773]
[100.00956726 71.20519257]
[103.91171265 85.68874359]
[114.38666534 96.42537689]
[128.76954651 100.68363953]
[143.15242004 104.94189453]
[157.53530884 109.20015717]
[171.91818237 113.45841217]
[186.30105591 117.71667480]
[200.68394470 121.97492981]
[237.93904114 104.40492249]
[252.62312317 101.34258270]
[264.55300903 90.95085144]
[278.59185791 95.92684174]
[293.27593994 92.86450195]
[307.95999146 89.80215454]
[322.64407349 86.73981476]
[337.30245972 83.55681610]
[351.93420410 80.25337219]
[366.56591797 76.94992828]
[381.19763184 73.64648438]
[387.03787231 61.49818802]
[398.64181519 55.03083038]
[411.65850830 56.41260147]
[421.35324097 64.91533661]
[436.03732300 61.85299301]
[439.95281982 58.34983063]
[444.37915039 56.85966873]
[448.45962524 57.23823547]
[451.52047729 59.02066040]
[466.33773804 56.68632889]
[481.15496826 54.35199738]
[495.97222900 52.01766586]
[510.78948975 49.68333435]
[519.88568115 36.75915909]
[535.47058105 34.13474274]
[548.29785156 43.36710358]
[550.75732422 58.97884369]
[541.38989258 71.70779419]
[525.75299072 74.00209808]
[513.12384033 64.50057983]
[498.30654907 66.83491516]
[483.48931885 69.16925049]
[468.67205811 71.50357819]
[453.85479736 73.83791351]
[439.09967041 76.53707123]
[424.41558838 79.59941101]
[415.81976318 94.04560089]
[399.10827637 97.88883972]
[384.50106812 88.27820587]
[369.86935425 91.58164978]
[355.23764038 94.88509369]
[340.60592651 98.18853760]
[334.76373291 102.73612213]
[325.70642090 101.42388916]
[311.02233887 104.48622894]
[296.33825684 107.54857635]
[281.65420532 110.61091614]
[270.77459717 120.78360748]
[255.68545532 116.02665710]
[241.00138855 119.08899689]
[237.50337219 125.72328949]
[251.85801697 130.07575989]
[266.77536011 131.64833069]
[273.83834839 144.88140869]
[266.84231567 158.14999390]
[251.93312073 159.79792786]
[242.20816040 148.37753296]
[230.50732422 138.99188232]
[227.00930786 145.62617493]
[232.77803040 159.47253418]
[238.54676819 173.31889343]
[244.31550598 187.16525269]
[250.08422852 201.01161194]
[265.06076050 205.51026917]
[273.59848022 218.61146545]
[271.66616821 234.12919617]
[260.17620850 244.73649597]
[244.55377197 245.42489624]
[232.17533875 235.86935425]
[228.88558960 220.58172607]
[236.23786926 206.78034973]
[230.46913147 192.93399048]
[224.70040894 179.08763123]
[218.93167114 165.24127197]
[213.16293335 151.39489746]
[209.79609680 166.01216125]
[196.73333740 173.38537598]
[182.47921753 168.71415710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[5 108]
[6 107]
[7 106]
[8 105]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[17 44]
[18 43]
[19 42]
[20 41]
[23 36]
[24 35]
[25 34]
[26 33]
[71 104]
[72 103]
[73 102]
[74 101]
[76 99]
[77 98]
[78 97]
[79 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
[112 162]
[113 161]
[115 159]
[116 158]
[117 157]
[118 156]
[119 154]
[120 153]
[121 152]
[122 151]
[126 148]
[127 147]
[131 146]
[132 145]
[133 144]
[134 143]
[135 142]
[171 187]
[172 186]
[173 185]
[174 184]
[175 183]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
