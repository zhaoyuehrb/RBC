%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAUGAGCAUCCGGACUCCACCCAGACUCCUGGAGCUUGCAGGGCGGAGCCUGCUGAGGGACCAAGCUUUGGCCAUGUCCACCCUGGAGGAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[98.06685638 201.90132141]
[84.66581726 195.16246033]
[73.77343750 184.84954834]
[66.31278992 171.83653259]
[62.91609573 157.22618103]
[63.87121201 142.25662231]
[69.09719849 128.19642639]
[78.15119171 116.23710632]
[90.26937866 107.39031982]
[75.27119446 107.15704346]
[60.27300644 106.92376709]
[45.27481842 106.69049072]
[36.46758270 109.72779846]
[29.81574631 106.20948029]
[14.83206940 105.50988007]
[-0.15160631 104.81027222]
[-15.14435101 104.34377289]
[-30.14253616 104.11049652]
[-45.14072418 103.87722015]
[-59.05955505 111.39896393]
[-71.66495514 103.46466827]
[-86.66314697 103.23139191]
[-97.83503723 114.41014099]
[-113.63912964 114.33143616]
[-124.69913483 103.04198456]
[-124.45334625 87.23960876]
[-113.04759216 76.29957581]
[-97.24869537 76.71241760]
[-86.42987061 88.23320770]
[-71.43167877 88.46648407]
[-58.58562088 80.92804718]
[-44.90744400 88.87903595]
[-29.90925980 89.11231232]
[-14.91107368 89.34558868]
[-8.05337048 86.24761963]
[0.54799956 89.82659149]
[15.53167534 90.52619934]
[30.51535225 91.22580719]
[45.50809479 91.69230652]
[60.50628281 91.92558289]
[75.50447083 92.15885925]
[90.50265503 92.39213562]
[96.77367401 88.31153870]
[104.21979523 88.67850494]
[117.05187225 80.91075897]
[129.88394165 73.14301300]
[142.71601868 65.37526703]
[155.54809570 57.60752487]
[163.34700012 43.84207153]
[178.24157715 43.87030029]
[191.07365417 36.10255432]
[203.90571594 28.33481026]
[203.69123840 13.04097939]
[211.11172485 -0.21923359]
[224.08691406 -7.93353748]
[239.08100891 -8.11622715]
[252.06587219 -0.81836706]
[264.89794922 -8.58611107]
[277.73001099 -16.35385513]
[290.56210327 -24.12160110]
[303.39416504 -31.88934517]
[316.22625732 -39.65708923]
[329.05831909 -47.42483521]
[331.27490234 -62.90452194]
[342.95748901 -73.29930115]
[358.58990479 -73.70107269]
[370.79101562 -63.92012787]
[373.79983521 -48.57473755]
[366.19567871 -34.91051865]
[351.56900024 -29.37930298]
[336.82608032 -34.59275818]
[323.99398804 -26.82501411]
[311.16192627 -19.05727005]
[298.32983398 -11.28952503]
[285.49777222 -3.52178097]
[272.66567993 4.24596357]
[259.83361816 12.01370811]
[260.27899170 26.90220070]
[253.16491699 40.10242462]
[240.31382751 48.02175903]
[225.12452698 48.44811249]
[211.67346191 41.16688538]
[198.84138489 48.93462753]
[186.00932312 56.70237350]
[179.12825012 69.91223145]
[163.31584167 70.43959808]
[150.48376465 78.20734406]
[137.65168762 85.97509003]
[124.81961823 93.74283600]
[111.98754120 101.51058197]
[126.90990448 103.03471375]
[140.76103210 108.79200745]
[152.36711121 118.29458618]
[160.74461365 130.73715210]
[165.18359375 145.06529236]
[165.30787659 160.06477356]
[161.10694885 174.46449280]
[152.93678284 187.04418945]
[141.48977661 196.73779297]
[127.73596954 202.72383118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 42]
[10 41]
[11 40]
[12 39]
[14 38]
[15 37]
[16 36]
[17 34]
[18 33]
[19 32]
[21 30]
[22 29]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[50 84]
[51 83]
[52 82]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
