%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGGAGCGCGACGCGGCCCCGGCCGAGCGGGGCAAGCCGGCCACCUACACCGGGGACAAGAAGGCGAAGAUGGCGGCCAAGACCAACAAGAAGUGGG\
) } def
/len { sequence length } bind def

/coor [
[101.69966125 177.80944824]
[103.67609406 192.67866516]
[93.02826691 203.24389648]
[78.17489624 201.15171814]
[70.85979462 188.05632019]
[76.86761475 174.31079102]
[81.42530823 160.01997375]
[85.98299408 145.72914124]
[78.55634308 144.68278503]
[67.70521545 155.03907776]
[56.85408401 165.39538574]
[49.57043076 180.70501709]
[32.84279251 177.94413757]
[30.86510277 161.10592651]
[46.49778366 154.54425049]
[57.34891510 144.18795776]
[68.20004272 133.83164978]
[61.79246521 117.87960815]
[62.12872696 102.23826599]
[47.27542877 100.14553833]
[32.42213058 98.05281067]
[17.56883240 95.96007538]
[2.71553349 93.86734772]
[-12.13776493 91.77462006]
[-24.61056519 101.48052979]
[-40.28272247 99.44117737]
[-49.85622787 86.86645508]
[-47.65128708 71.21673584]
[-34.97605515 61.77671051]
[-19.35051918 64.14698792]
[-10.04503536 76.92131805]
[4.80826378 79.01404572]
[19.66156197 81.10678101]
[34.51486206 83.19950867]
[49.36816025 85.29223633]
[64.22145844 87.38497162]
[75.53343964 71.00637054]
[93.58099365 62.60963440]
[113.39568329 64.50635529]
[121.36205292 51.79663467]
[129.32841492 39.08691406]
[137.29478455 26.37719536]
[139.25727844 17.26998520]
[145.71174622 13.40148544]
[154.06953430 0.94566566]
[162.42732239 -11.51015377]
[163.69160461 -27.28076363]
[177.20802307 -33.53822327]
[185.56581116 -45.99404526]
[180.38568115 -60.50171661]
[184.69108582 -75.10708618]
[196.62989807 -84.26836395]
[211.49600220 -84.63846588]
[219.85377502 -97.09428406]
[212.50721741 -110.52136993]
[212.25361633 -125.82477570]
[219.15127563 -139.48789978]
[231.61515808 -148.37104797]
[246.78114319 -150.43293762]
[261.16421509 -145.19976807]
[271.45922852 -133.87408447]
[275.30047607 -119.05844116]
[271.80526733 -104.15736389]
[261.77679443 -92.59500885]
[247.51948547 -87.02832794]
[232.30960083 -88.73650360]
[223.95181274 -76.28067780]
[229.24490356 -62.38387299]
[225.29328918 -47.86324310]
[213.41018677 -38.34246826]
[198.02163696 -37.63626099]
[189.66384888 -25.18044090]
[188.99736023 -10.30075455]
[174.88313293 -3.15236998]
[166.52534485 9.30344963]
[158.16757202 21.75926971]
[150.00450134 34.34356308]
[142.03813171 47.05328369]
[134.07177734 59.76300430]
[126.10540009 72.47272491]
[134.65042114 81.34520721]
[140.13984680 92.86817169]
[141.75833130 105.97806549]
[139.06321716 119.36474609]
[132.05708313 131.60243225]
[121.21427155 141.30099487]
[128.78150940 154.25231934]
[136.34875488 167.20365906]
[151.80183411 168.61154175]
[163.45387268 178.85894775]
[166.82446289 194.00552368]
[160.61750793 208.22711182]
[147.21972656 216.05520630]
[131.78283691 214.47976685]
[120.24263763 204.10655212]
[117.03656769 188.92430115]
[123.39743042 174.77088928]
[115.83018494 161.81956482]
[108.26293945 148.86824036]
[100.83629608 147.82188416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 17]
[10 16]
[11 15]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[39 80]
[40 79]
[41 78]
[42 77]
[44 76]
[45 75]
[46 74]
[48 72]
[49 71]
[53 67]
[54 66]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
