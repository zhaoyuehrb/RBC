%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAGUCCGCGGUAAGCGCUGACGCAUGCGCAUAGCUAACCGCACCCGGUUCAGCUCGCCUUUCUUGGCCAGAGGCGCCGGUUGGACUCACGGGCGGGGCAUGAUGGUGGUGGGUACGGGCACCU\
) } def
/len { sequence length } bind def

/coor [
[91.37766266 124.98345947]
[87.23971558 123.14504242]
[76.56771851 133.68585205]
[65.89572906 144.22665405]
[61.56164551 163.84059143]
[42.77865982 168.15823364]
[32.64100647 179.21391296]
[22.50335503 190.26957703]
[18.87933731 205.67013550]
[4.57495451 209.82150269]
[-5.56269741 220.87718201]
[-15.70034981 231.93286133]
[-16.44538689 247.95860291]
[-29.52332497 257.25091553]
[-44.90188980 252.68153381]
[-50.78396225 237.75569153]
[-42.65732193 223.92321777]
[-26.75602722 221.79521179]
[-16.61837578 210.73953247]
[-6.48072338 199.68385315]
[-3.58181930 185.07408142]
[11.44767666 180.13192749]
[21.58532906 169.07624817]
[31.72298050 158.02056885]
[30.36516762 147.76045227]
[35.02863312 138.27426147]
[44.36438370 132.86141968]
[55.35492325 133.55465698]
[66.02691650 123.01385498]
[76.69890594 112.47304535]
[76.89658356 87.16449738]
[98.28078461 73.62648773]
[101.59275818 58.99669647]
[104.90472412 44.36690140]
[103.74472046 35.19524002]
[108.48377991 29.41834450]
[112.15659332 14.87494564]
[115.82941437 0.33154806]
[114.35811615 -6.29335070]
[116.24444580 -11.79842758]
[120.06025696 -14.83128643]
[124.44779968 -29.17525482]
[128.83535767 -43.51922226]
[133.22290039 -57.86319351]
[132.74609375 -67.09561157]
[137.90042114 -72.50524139]
[142.64141846 -86.73630524]
[137.62263489 -106.18630219]
[152.41352844 -118.54235840]
[156.44493103 -132.99046326]
[160.47634888 -147.43856812]
[164.50776672 -161.88667297]
[168.53918457 -176.33477783]
[172.57060242 -190.78288269]
[176.60200500 -205.23098755]
[180.63342285 -219.67909241]
[184.66484070 -234.12718201]
[188.33766174 -248.67059326]
[191.64962769 -263.30038452]
[194.96159363 -277.93017578]
[198.27355957 -292.55996704]
[201.58554077 -307.18975830]
[204.89750671 -321.81954956]
[208.20947266 -336.44934082]
[198.60202026 -348.78753662]
[199.22477722 -364.41271973]
[209.78369141 -375.94714355]
[225.29318237 -377.94464111]
[238.43013000 -369.46203613]
[242.99166870 -354.50454712]
[236.82397461 -340.13464355]
[222.83926392 -333.13739014]
[219.52729797 -318.50759888]
[216.21533203 -303.87777710]
[212.90335083 -289.24798584]
[209.59138489 -274.61819458]
[206.27941895 -259.98840332]
[202.96745300 -245.35861206]
[204.77429199 -240.83158875]
[203.67890930 -235.11631775]
[199.11294556 -230.09577942]
[195.08152771 -215.64767456]
[191.05010986 -201.19956970]
[187.01869202 -186.75146484]
[182.98728943 -172.30335999]
[178.95587158 -157.85525513]
[174.92445374 -143.40715027]
[170.89303589 -128.95904541]
[166.86163330 -114.51094818]
[172.71890259 -105.97829437]
[172.85728455 -95.40869141]
[166.98524475 -86.35472107]
[156.87248230 -81.99530792]
[152.13148499 -67.76425171]
[147.56686401 -53.47564697]
[143.17932129 -39.13167572]
[138.79177856 -24.78770828]
[134.40422058 -10.44373989]
[130.37280273 4.00436401]
[126.69999695 18.54776192]
[123.02717590 33.09115982]
[119.53451538 47.67887115]
[116.22254944 62.30866623]
[112.91058350 76.93846130]
[119.37081146 82.01975250]
[123.95767975 88.83992767]
[126.22758484 96.73940277]
[125.96099854 104.95421600]
[123.18370819 112.68989563]
[118.16429901 119.19833374]
[124.95761871 132.57183838]
[131.75094604 145.94535828]
[138.54426575 159.31886292]
[153.88793945 161.63215637]
[164.91786194 172.54638672]
[167.39280701 187.86480713]
[160.36109924 201.69718933]
[146.52658081 208.72468567]
[131.20890808 206.24508667]
[120.29802704 195.21185303]
[117.98941040 179.86747742]
[125.17075348 166.11218262]
[118.37743378 152.73867798]
[111.58411407 139.36515808]
[104.79078674 125.99165344]
[100.28390503 126.42796326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[12 18]
[32 104]
[33 103]
[34 102]
[36 101]
[37 100]
[38 99]
[41 98]
[42 97]
[43 96]
[44 95]
[46 94]
[47 93]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
