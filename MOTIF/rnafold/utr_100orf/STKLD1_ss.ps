%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACCCACGCGGGGUGGGGCCAGGGGUGGACGCUCGCCCGUACGCGGUCGCUACUGAUCAUGCUUGGGCCAGGGUCCAAUCGCAGGCGCCCCACGCAGGGGGAGCGAGGCCCAGGGUCCCCCGGAGAGCCCAUGGAGAAGUACCAGGUUUUGUACCAGC\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 165.02964783]
[92.50000000 149.19052124]
[92.50000000 134.19052124]
[92.50000000 119.19052124]
[77.83998871 116.01496124]
[71.63282776 129.67041016]
[65.42566681 143.32585144]
[59.21850967 156.98129272]
[63.48247910 172.44732666]
[53.93302536 185.33869934]
[37.89566803 185.76625061]
[27.67290115 173.40200806]
[31.10675240 157.73075867]
[45.56306458 150.77413940]
[51.77022552 137.11869812]
[57.97738647 123.46324921]
[64.18454742 109.80780029]
[64.18454742 94.80780029]
[57.97738647 81.15235901]
[51.77022552 67.49691772]
[45.56306458 53.84147263]
[39.35590363 40.18602753]
[33.14874268 26.53058243]
[18.62373924 20.90368271]
[12.52332306 6.96669626]
[17.97722626 -6.84599829]
[11.77006531 -20.50144196]
[5.56290436 -34.15688705]
[-0.64425647 -47.81233215]
[-10.61619473 -59.01770782]
[-23.45869827 -66.76819611]
[-36.30120087 -74.51868439]
[-49.14370346 -82.26918030]
[-64.95681763 -82.77529907]
[-71.85562134 -95.97589111]
[-84.69812775 -103.72637939]
[-100.51123810 -104.23250580]
[-107.41004944 -117.43309784]
[-120.25254822 -125.18358612]
[-133.09506226 -132.93408203]
[-145.93756104 -140.68457031]
[-158.78005981 -148.43505859]
[-173.94108582 -144.85998535]
[-186.85479736 -152.90303040]
[-190.16966248 -167.37876892]
[-203.01216125 -175.12927246]
[-218.82527161 -175.63539124]
[-225.72407532 -188.83598328]
[-238.56658936 -196.58647156]
[-251.40908813 -204.33695984]
[-264.25158691 -212.08744812]
[-279.53170776 -208.05096436]
[-293.14840698 -216.07351685]
[-297.02313232 -231.39546204]
[-288.85705566 -244.92657471]
[-273.49499512 -248.63908386]
[-260.05096436 -240.33041382]
[-256.50109863 -224.92996216]
[-243.65859985 -217.17945862]
[-230.81608582 -209.42897034]
[-217.97358704 -201.67848206]
[-203.07905579 -201.72673035]
[-195.26167297 -187.97177124]
[-182.41915894 -180.22128296]
[-168.06671143 -184.03474426]
[-154.93217468 -176.35758972]
[-151.02957153 -161.27755737]
[-138.18707275 -153.52706909]
[-125.34456635 -145.77658081]
[-112.50205994 -138.02609253]
[-99.65955353 -130.27560425]
[-84.76502991 -130.32385254]
[-76.94763947 -116.56888580]
[-64.10513306 -108.81839752]
[-49.21060562 -108.86664581]
[-41.39321518 -95.11167908]
[-28.55071068 -87.36119080]
[-15.70820713 -79.61070251]
[-2.86570382 -71.86020660]
[0.55785263 -82.62163544]
[8.81218624 -89.18984985]
[18.58591080 -89.97619629]
[26.58397675 -102.66599274]
[34.58204269 -115.35578918]
[42.58010864 -128.04557800]
[37.66487122 -137.61123657]
[37.19410706 -148.27442932]
[41.18619156 -158.08590698]
[48.84984589 -165.28034973]
[58.73999023 -168.59393311]
[69.02995300 -167.48593140]
[77.75233459 -179.68920898]
[86.47471619 -191.89248657]
[95.19709778 -204.09576416]
[93.99354553 -220.09361267]
[105.84832764 -230.90304565]
[121.66745758 -228.23199463]
[129.31585693 -214.12945557]
[122.92633820 -199.41369629]
[107.40037537 -195.37338257]
[98.67799377 -183.17010498]
[89.95561218 -170.96682739]
[81.23323059 -158.76354980]
[85.87499237 -139.88650513]
[75.03582001 -123.38553619]
[55.26990509 -120.04751587]
[47.27183914 -107.35771942]
[39.27377319 -94.66792297]
[31.27570724 -81.97812653]
[32.00321198 -63.07869720]
[13.01118755 -54.01949310]
[19.21834946 -40.36404800]
[25.42550850 -26.70860291]
[31.63266945 -13.05315876]
[45.62570953 -8.08018398]
[52.11517715 5.67995501]
[46.80418777 20.32342148]
[53.01134872 33.97886658]
[59.21850967 47.63431168]
[65.42566681 61.28975296]
[71.63282776 74.94519806]
[77.83998871 88.60063934]
[84.09068298 75.85336304]
[97.71522522 67.16641235]
[115.84234619 66.66343689]
[133.43302917 76.43045044]
[144.67370605 95.47466278]
[155.97525024 105.33748627]
[167.27677917 115.20030212]
[178.57832336 125.06312561]
[189.87986755 134.92594910]
[201.18139648 144.78877258]
[207.66174316 146.45498657]
[211.69096375 150.55030823]
[212.72036743 155.25981140]
[223.63096619 165.55343628]
[234.54158020 175.84706116]
[250.05137634 173.85206604]
[263.18695068 182.33679199]
[267.74609375 197.29501343]
[261.57611084 211.66390991]
[247.59027100 218.65893555]
[232.39227295 214.97724915]
[223.15814209 202.35723877]
[224.24795532 186.75767517]
[213.33734131 176.46405029]
[202.42674255 166.17042542]
[191.31857300 156.09030151]
[180.01704407 146.22747803]
[168.71549988 136.36466980]
[157.41397095 126.50183868]
[146.11242676 116.63902283]
[134.81088257 106.77619934]
[127.98316956 109.87978363]
[134.19009399 123.53533173]
[120.53444672 129.74203491]
[114.32772064 116.08694458]
[107.50000000 119.19052124]
[107.50000000 134.19052124]
[107.50000000 149.19052124]
[113.54634094 165.02964783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 160]
[3 159]
[4 158]
[5 17]
[6 16]
[7 15]
[8 14]
[18 122]
[19 121]
[20 120]
[21 119]
[22 118]
[23 117]
[26 114]
[27 113]
[28 112]
[29 111]
[30 79]
[31 78]
[32 77]
[33 76]
[35 74]
[36 73]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[51 58]
[82 109]
[83 108]
[84 107]
[85 106]
[91 103]
[92 102]
[93 101]
[94 100]
[127 153]
[128 152]
[129 151]
[130 150]
[131 149]
[132 148]
[135 147]
[136 146]
[137 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
