%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGGACAGAGAGGAAUGUCUCUCUACCCCCCAACCCCCCAUGUCUGUGGUGAAGUCGAUCGAAUUAGUGCUGCCCGAGGAUAGAAUCUACCUGGCUG\
) } def
/len { sequence length } bind def

/coor [
[90.12486267 118.61537170]
[84.36520386 117.40143585]
[70.66835785 123.51668549]
[56.97151184 129.63194275]
[43.27466202 135.74719238]
[29.57781219 141.86244202]
[15.88096333 147.97770691]
[10.15657997 162.46456909]
[-3.82108688 168.47119141]
[-17.59681892 162.92457581]
[-31.29366684 169.03984070]
[-44.99051666 175.15509033]
[-58.68736649 181.27033997]
[-72.38421631 187.38560486]
[-86.08106232 193.50085449]
[-99.77790833 199.61610413]
[-108.96000671 213.20364380]
[-125.29687500 211.77572632]
[-131.98254395 196.80128479]
[-122.13936615 183.68473816]
[-105.89316559 185.91926575]
[-92.19631958 179.80400085]
[-78.49946594 173.68875122]
[-64.80261993 167.57350159]
[-51.10577011 161.45823669]
[-37.40892029 155.34298706]
[-23.71207237 149.22773743]
[-18.64517403 135.26843262]
[-4.84173632 128.87158203]
[9.76570988 134.28085327]
[23.46255875 128.16560364]
[37.15940857 122.05034637]
[50.85625458 115.93508911]
[64.55310822 109.81983948]
[78.24995422 103.70458221]
[63.27225494 104.52221680]
[52.56654358 94.01566315]
[53.10282516 79.02525330]
[64.53194427 69.31056213]
[79.41293335 71.19639587]
[88.05735016 83.45452118]
[84.36316681 68.91654205]
[80.66898346 54.37855530]
[76.97480011 39.84056854]
[65.14881134 28.47932053]
[69.33712006 12.62403393]
[85.23115540 8.58526993]
[96.48049927 20.51776123]
[91.51278687 36.14638519]
[95.20697021 50.68437195]
[98.90115356 65.22235870]
[102.59533691 79.76033783]
[106.32326508 65.23097229]
[105.41059113 50.25876236]
[108.41735840 35.56320953]
[115.13725281 22.15265274]
[125.10918427 10.94727325]
[137.64892578 2.71593785]
[151.89605713 -1.97655463]
[166.87297058 -2.80822492]
[181.55204773 0.27799311]
[194.92605591 7.07033587]
[206.07733154 17.10274124]
[214.24070740 29.68682671]
[218.85606384 43.95912552]
[219.60670471 58.94033051]
[216.44113159 73.60250092]
[209.57653809 86.93956757]
[199.48394775 98.03639984]
[186.85589600 106.13159180]
[172.55883789 110.66967010]
[157.57379150 111.33925629]
[142.92895508 108.09440613]
[129.62684631 101.15610504]
[114.83993530 98.63677979]
[126.60884857 107.93692017]
[138.37776184 117.23706818]
[145.13703918 118.62676239]
[149.42153931 122.69527435]
[150.56542969 127.49967194]
[161.73338318 137.51348877]
[172.90135193 147.52731323]
[181.54150391 151.01161194]
[184.25469971 158.03044128]
[195.10583496 168.38673401]
[205.95697021 178.74304199]
[221.58964539 185.30471802]
[219.61195374 202.14292908]
[202.88432312 204.90380859]
[195.60066223 189.59417725]
[184.74954224 179.23786926]
[173.89840698 168.88157654]
[162.88752747 158.69528198]
[151.71955872 148.68145752]
[140.55160522 138.66763306]
[129.07762146 129.00598145]
[117.30870056 119.70583344]
[105.53978729 110.40569305]
[103.42203522 113.68820190]
[100.01215363 116.43047333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[41 52]
[42 51]
[43 50]
[44 49]
[75 98]
[76 97]
[77 96]
[80 95]
[81 94]
[82 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
