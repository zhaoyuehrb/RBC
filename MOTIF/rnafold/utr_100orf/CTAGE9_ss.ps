%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGAGCCUGGUGCUACCCCUCAGCCCUACCUGGGGCUGGUCCUGGAGGAGCUAGGCAGAGUUGUGGCAGCACUACCUGAGAGUAUGAGACCAGAUG\
) } def
/len { sequence length } bind def

/coor [
[101.88822937 241.37886047]
[89.07679749 249.56028748]
[74.10881042 252.21128845]
[59.26677704 248.92761230]
[46.81400299 240.20999146]
[38.64944077 227.38781738]
[36.01812744 212.41635132]
[39.32132339 197.57865906]
[48.05530930 185.13735962]
[60.88822174 176.98966980]
[75.86312866 174.37805176]
[79.10339355 159.73220825]
[82.34366608 145.08636475]
[85.58393097 130.44053650]
[88.82419586 115.79468536]
[83.57230377 101.74414825]
[71.51984406 92.81452179]
[59.46739197 83.88488770]
[50.54016113 81.22084045]
[47.18475723 74.48535156]
[35.41584396 65.18521118]
[23.50371933 56.06922150]
[11.45126534 47.13958740]
[-1.13302672 38.97652435]
[-14.20046997 31.61161423]
[-27.26791382 24.24670219]
[-40.33535767 16.88179207]
[-53.40280151 9.51688004]
[-66.47024536 2.15196896]
[-79.53768921 -5.21294212]
[-92.60513306 -12.57785320]
[-108.98886108 -11.86686230]
[-117.56701660 -25.84352875]
[-109.51513672 -40.12985992]
[-93.11629486 -40.02929688]
[-85.24021912 -25.64529800]
[-72.17277527 -18.28038597]
[-59.10533524 -10.91547489]
[-46.03789139 -3.55056357]
[-32.97044754 3.81434774]
[-19.90300369 11.17925930]
[-6.83555937 18.54417038]
[6.23188448 25.90908051]
[9.10501099 25.14130974]
[12.47915840 25.57038689]
[15.85804749 27.40287018]
[18.67709351 30.64556122]
[20.38089752 35.08713150]
[32.43335342 44.01676559]
[39.81163025 45.49544144]
[44.71598816 53.41629791]
[56.48490143 62.71644211]
[68.39702606 71.83242798]
[80.44947815 80.76206207]
[92.50193787 89.69169617]
[95.53324127 86.81403351]
[99.63211823 84.90736389]
[104.46374512 84.35195923]
[109.56344604 85.40712738]
[114.38125610 88.16876984]
[128.73112488 83.80055237]
[143.08099365 79.43233490]
[150.53601074 73.84525299]
[157.94544983 75.15889740]
[172.42422485 71.23906708]
[183.72293091 60.16433716]
[198.02987671 64.30686188]
[212.50865173 60.38703537]
[226.98742676 56.46720505]
[238.16339111 44.46595764]
[254.08189392 48.40718460]
[258.36734009 64.23648834]
[246.61125183 75.67004395]
[230.90725708 70.94598389]
[216.42848206 74.86581421]
[201.94970703 78.78563690]
[191.68661499 89.57999420]
[176.34405518 85.71784210]
[161.86528015 89.63767242]
[147.44921875 93.78219604]
[133.09934998 98.15042114]
[118.74948120 102.51863861]
[133.47456360 99.65998840]
[147.75926208 104.23683167]
[158.08125305 115.12060547]
[161.89535522 129.62759399]
[158.26106262 144.18066406]
[148.07455444 155.19132996]
[133.84759521 159.94459534]
[119.08825684 157.26838684]
[107.43590546 147.82261658]
[101.76376343 133.93640137]
[103.47003937 119.03495789]
[100.22977448 133.68080139]
[96.98950195 148.32664490]
[93.74923706 162.97247314]
[90.50897217 177.61831665]
[102.98464203 186.30314636]
[111.18290710 199.10380554]
[113.85359955 214.06828308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 55]
[17 54]
[18 53]
[20 52]
[21 51]
[22 49]
[23 48]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[60 82]
[61 81]
[62 80]
[64 79]
[65 78]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
