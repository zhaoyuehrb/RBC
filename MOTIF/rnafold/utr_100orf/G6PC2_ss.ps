%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGACAUGCCACAAAGGCACAGUAUAAAAACGGUGGGAAUCAGAGCACUUCAGCUCCAAUUGCUCUAUGUUUAGAAUUGCCUCUUUUUCAAGAUGGAUUUCCUUCACAGGAAUGGAGUGCUCAUAAUUCAGCAUUUGCAGAAGGACUACCGAGCUUACUACACUUUUCUAAAUUUUAUGUCCAAUGUUGGAG\
) } def
/len { sequence length } bind def

/coor [
[211.45478821 628.70465088]
[210.96655273 613.71258545]
[210.47830200 598.72052002]
[209.99006653 583.72851562]
[209.50181580 568.73645020]
[209.01356506 553.74438477]
[208.52532959 538.75231934]
[193.81057739 535.84094238]
[187.65010071 549.51751709]
[181.48962402 563.19409180]
[185.80641174 578.64544678]
[176.30105591 591.56939697]
[160.26525879 592.05169678]
[150.00030518 579.72247314]
[153.38059998 564.03955078]
[167.81306458 557.03363037]
[173.97354126 543.35705566]
[180.13400269 529.68048096]
[188.40052795 522.08477783]
[197.57981873 518.61767578]
[206.11192322 519.08203125]
[202.96141052 504.41665649]
[199.81089783 489.75125122]
[196.66038513 475.08581543]
[184.27301025 472.51895142]
[173.74069214 465.42730713]
[166.65115356 454.83728027]
[164.08923340 442.30566406]
[166.47102356 429.69097900]
[173.47671509 418.87777710]
[184.09307861 411.49499512]
[181.42158508 396.73480225]
[178.75010681 381.97460938]
[176.07861328 367.21444702]
[173.40711975 352.45425415]
[170.73564148 337.69406128]
[154.76466370 335.05072021]
[140.73497009 326.91058350]
[130.47360229 314.30761719]
[125.32609558 298.85855103]
[125.98007965 282.55569458]
[132.37348938 267.50982666]
[143.69970703 255.67701721]
[137.09733582 242.20822144]
[130.49494934 228.73942566]
[123.89257812 215.27061462]
[117.29020691 201.80181885]
[110.68782806 188.33300781]
[104.08544922 174.86421204]
[97.48307800 161.39541626]
[90.88069916 147.92660522]
[84.27832031 134.45780945]
[72.96391296 124.60975647]
[58.71322632 119.92808533]
[45.52116776 128.32472229]
[30.02505875 126.22598267]
[19.54169464 114.62283325]
[19.02099800 98.99391937]
[28.70882416 86.71874237]
[44.03087997 83.59326172]
[57.75255585 91.09323120]
[63.39490128 105.67739868]
[77.64558411 110.35907745]
[84.89755249 97.22861481]
[73.34607697 87.65972900]
[61.79460907 78.09085083]
[50.24313736 68.52196503]
[33.99364853 66.31151581]
[28.03447723 51.03341675]
[38.49591446 38.40446472]
[54.61612320 41.41624451]
[59.81201935 56.97049332]
[71.36349487 66.53937531]
[82.91496277 76.10826111]
[94.46643066 85.67714691]
[100.74869537 81.58041382]
[92.55544281 69.01575470]
[105.12023163 60.82271194]
[113.31321716 73.38695526]
[119.59547424 69.29022217]
[115.49743652 54.86087418]
[111.28209686 40.46535492]
[106.94973755 26.10462189]
[102.61737823 11.74388981]
[98.28501892 -2.61684346]
[85.96901703 -13.44495964]
[89.45331573 -29.46968079]
[105.15356445 -34.20615005]
[116.91870117 -22.78189087]
[112.64575195 -6.94920397]
[116.97811127 7.41152906]
[121.31047058 21.77226257]
[125.64282990 36.13299561]
[130.59214783 41.63710022]
[129.92678833 50.76283646]
[134.02482605 65.19218445]
[141.52458191 65.25322723]
[156.52407837 65.37530518]
[164.02383423 65.43634796]
[168.35618591 51.07561493]
[172.68855286 36.71488190]
[177.02090454 22.35414696]
[181.35327148 7.99341440]
[177.08032227 -7.83927250]
[188.84545898 -19.26353073]
[204.54571533 -14.52706337]
[208.03001404 1.49765885]
[195.71400452 12.32577515]
[191.38163757 26.68650818]
[187.04928589 41.04724121]
[182.71691895 55.40797424]
[178.38456726 69.76870728]
[97.74712372 127.85543060]
[104.34950256 141.32423401]
[110.95187378 154.79302979]
[117.55425262 168.26184082]
[124.15663147 181.73063660]
[130.75900269 195.19943237]
[137.36138916 208.66824341]
[143.96376038 222.13703918]
[150.56613159 235.60585022]
[157.16851807 249.07464600]
[169.38182068 247.29751587]
[181.59011841 248.86286926]
[192.89791870 253.63761902]
[202.48069763 261.25396729]
[209.64501953 271.13766479]
[223.81761169 266.22463989]
[237.99018860 261.31164551]
[248.49491882 249.48109436]
[263.05438232 252.62298584]
[277.22695923 247.70997620]
[287.54504395 234.96365356]
[303.69827271 237.79313660]
[309.06954956 253.28768921]
[298.13339233 265.50787354]
[282.13998413 261.88256836]
[267.96737671 266.79559326]
[258.47637939 278.27468872]
[242.90319824 275.48422241]
[228.73062134 280.39724731]
[214.55802917 285.31024170]
[214.43833923 300.85540771]
[209.03118896 315.43035889]
[198.98316956 327.29223633]
[185.49581909 335.02258301]
[188.16731262 349.78274536]
[190.83880615 364.54293823]
[193.51028442 379.30313110]
[196.18177795 394.06332397]
[198.85327148 408.82351685]
[215.51815796 414.36080933]
[227.03146362 427.50262451]
[230.29533386 444.57629395]
[224.50076294 460.87051392]
[211.32580566 471.93530273]
[214.47631836 486.60073853]
[217.62683105 501.26614380]
[220.77734375 515.93157959]
[223.38560486 501.16006470]
[229.38996887 487.41424561]
[238.45460510 475.46298218]
[250.07243347 465.97479248]
[263.59362793 459.48037720]
[278.26187134 456.34301758]
[293.25665283 456.73822021]
[307.73925781 460.64385986]
[320.89959717 467.84149170]
[332.00149536 477.92849731]
[340.42398071 490.34063721]
[345.69595337 504.38366699]
[347.52252197 519.27203369]
[345.80148315 534.17297363]
[340.62911987 548.25299072]
[332.29473877 560.72448730]
[321.26458740 570.88989258]
[308.15557861 578.18054199]
[293.70098877 582.18872070]
[278.70938110 582.69012451]
[264.01928711 579.65673828]
[250.45242310 573.25830078]
[238.76766968 563.85260010]
[229.61862183 551.96588135]
[223.51737976 538.26409912]
[224.00561523 553.25616455]
[224.49386597 568.24816895]
[224.98211670 583.24023438]
[225.47035217 598.23229980]
[225.95860291 613.22436523]
[226.44683838 628.21636963]
[233.00553894 643.85034180]
[219.79821777 654.48059082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 190]
[2 189]
[3 188]
[4 187]
[5 186]
[6 185]
[7 184]
[8 18]
[9 17]
[10 16]
[21 159]
[22 158]
[23 157]
[24 156]
[31 151]
[32 150]
[33 149]
[34 148]
[35 147]
[36 146]
[43 122]
[44 121]
[45 120]
[46 119]
[47 118]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
[53 63]
[54 62]
[64 75]
[65 74]
[66 73]
[67 72]
[80 96]
[81 95]
[82 93]
[83 92]
[84 91]
[85 90]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
[127 142]
[128 141]
[129 140]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
