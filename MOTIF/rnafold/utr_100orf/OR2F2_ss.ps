%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAUAGAUAACCAGACGUGGGUGAGAGAAUUUAUUCUCCUUGGCUUAUCCAGUGACUGGUGCACUCAGAUAUCCCUGUUUUCCCUGUUCUUGGUCA\
) } def
/len { sequence length } bind def

/coor [
[190.68103027 323.61953735]
[203.81022644 316.36529541]
[218.30076599 320.24395752]
[212.83099365 306.27679443]
[207.36122131 292.30963135]
[201.89144897 278.34246826]
[196.42167664 264.37530518]
[190.95190430 250.40814209]
[185.48213196 236.44099426]
[180.01235962 222.47383118]
[156.84695435 219.80769348]
[139.21842957 204.38250732]
[133.44917297 181.57028198]
[141.69917297 159.42031860]
[131.86024475 148.09797668]
[122.02130890 136.77563477]
[112.18238068 125.45329285]
[102.34345245 114.13094330]
[89.18795776 109.39548492]
[86.33420563 95.70798492]
[76.49527740 84.38563538]
[66.48145294 73.21767426]
[56.29515839 62.20679855]
[46.10886765 51.19592285]
[35.92257309 40.18504333]
[25.73628044 29.17416573]
[15.54998684 18.16328812]
[5.36369371 7.15241003]
[-5.80426788 -2.86141205]
[-17.85672188 -11.79104519]
[-29.90917587 -20.72067833]
[-41.96163177 -29.65031052]
[-54.01408386 -38.57994461]
[-70.35939789 -39.90764999]
[-77.13675690 -54.84081268]
[-67.37419891 -68.01747894]
[-51.11460495 -65.88262177]
[-45.08445358 -50.63239670]
[-33.03199768 -41.70276642]
[-20.97954369 -32.77313232]
[-8.92708874 -23.84350014]
[3.12536526 -14.91386604]
[3.16789794 -29.91380692]
[13.60064030 -40.69146347]
[28.59126663 -41.22168732]
[39.75940704 -31.20806503]
[40.86161804 -16.24861717]
[31.28171921 -4.70627975]
[16.37457275 -3.03388309]
[26.56086540 7.97699499]
[36.74715805 18.98787308]
[46.93345261 29.99875069]
[57.11974335 41.00962830]
[67.30603790 52.02050781]
[77.49233246 63.03138351]
[84.46812439 65.85340881]
[87.81761932 74.54670715]
[97.65654755 85.86905670]
[110.81204224 90.60451508]
[113.66579437 104.29201508]
[123.50472260 115.61436462]
[133.34365845 126.93670654]
[143.18258667 138.25904846]
[153.02151489 149.58139038]
[160.52958679 146.25773621]
[168.55046082 144.54817200]
[176.74163818 144.52160645]
[184.75421143 146.17512512]
[192.24771118 149.43435669]
[198.90455627 154.15678406]
[204.44354248 160.13796997]
[208.63168335 167.12042236]
[211.29403687 174.80464172]
[212.32101440 182.86203003]
[211.67286682 190.94885254]
[209.38121033 198.72099304]
[205.54753113 205.84852600]
[200.33863831 212.02978516]
[193.97952271 217.00405884]
[199.44929504 230.97120667]
[204.91906738 244.93836975]
[210.38883972 258.90554810]
[215.85861206 272.87271118]
[221.32838440 286.83984375]
[226.79815674 300.80700684]
[232.26792908 314.77416992]
[239.01536560 328.17089844]
[246.98171997 340.88061523]
[262.49401855 342.85620117]
[273.06921387 354.37570190]
[273.71405029 370.00000000]
[264.12405396 382.35174561]
[248.82730103 385.59884644]
[235.04647827 378.20809937]
[229.28846741 363.66921997]
[234.27200317 348.84698486]
[226.30563354 336.13726807]
[220.79627991 350.08886719]
[207.15180969 356.32009888]
[193.00003052 351.34747314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[14 64]
[15 63]
[16 62]
[17 61]
[18 60]
[20 58]
[21 57]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
