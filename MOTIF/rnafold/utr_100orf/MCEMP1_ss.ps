%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGACAAAUUUGCGGGCUGGGGACCAUGGAAGUGGAGGAAAUCUACAAGCACCAGGAAGUCAAGAUGCAAGCACCAGCCUUCAGGGACAAGAAACAGGGGGUCUCAGCCAAGAAUCAAGGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[108.90592957 526.64294434]
[114.95227051 510.80380249]
[114.95227051 495.80380249]
[114.76528168 480.80496216]
[114.39131927 465.80963135]
[100.40653229 454.12164307]
[99.27564240 435.61389160]
[112.16567230 421.84817505]
[111.04472351 406.89013672]
[109.92376709 391.93206787]
[108.80281830 376.97399902]
[97.91098022 369.97116089]
[92.99976349 357.77908325]
[96.08649445 344.80175781]
[106.25440979 335.86871338]
[105.50672150 320.88735962]
[104.75903320 305.90600586]
[104.01134491 290.92465210]
[103.26365662 275.94329834]
[102.51596832 260.96194458]
[101.76828003 245.98060608]
[90.58638763 236.20814514]
[89.61471558 221.02557373]
[99.94078064 209.36323547]
[99.19309235 194.38188171]
[88.87728119 180.24308777]
[97.26829529 163.90913391]
[96.14734650 148.95106506]
[76.16784668 142.93109131]
[60.49227905 129.15802002]
[51.95156479 110.11920166]
[52.08809662 89.25290680]
[38.12499237 83.77279663]
[24.16188431 78.29267883]
[10.19877911 72.81256104]
[-3.76432729 67.33245087]
[-18.98460007 72.40422058]
[-32.36053848 63.54624176]
[-33.63126755 47.55359268]
[-21.82199287 36.69446564]
[-5.99178028 39.29905701]
[1.71578801 53.36934280]
[15.67889404 58.84945679]
[29.64200020 64.32957458]
[43.60510635 69.80969238]
[57.56821442 75.28980255]
[63.26508713 67.41785431]
[70.40057373 60.82188797]
[78.69524384 55.76022339]
[87.82425690 52.43108749]
[97.43009186 50.96485138]
[107.13657379 51.41893768]
[111.55790710 37.08534622]
[104.42890930 23.23560905]
[109.11695862 8.76229191]
[122.36449432 2.05123782]
[126.78582764 -12.28235435]
[131.20715332 -26.61594582]
[135.62847900 -40.94953918]
[122.04033661 -34.59640121]
[107.49489594 -38.26112747]
[98.53916168 -50.29419708]
[99.20416260 -65.27944946]
[109.19058228 -76.47192383]
[124.00346375 -78.83380890]
[136.97543335 -71.30200958]
[142.26774597 -57.26507568]
[149.11091614 -70.61315155]
[141.98092651 -84.39512634]
[144.34677124 -99.73078918]
[155.29872131 -110.72325134]
[170.62554932 -113.14569855]
[184.43374634 -106.06664276]
[191.41380310 -92.20812988]
[188.88174438 -76.89904022]
[177.81118774 -66.02603149]
[162.45898438 -63.76999283]
[155.61582947 -50.42191696]
[149.96206665 -36.52820969]
[145.54074097 -22.19461823]
[141.11941528 -7.86102676]
[136.69808960 6.47256565]
[143.86325073 19.48010445]
[139.58358765 34.07938766]
[125.89149475 41.50667191]
[121.47016907 55.84026718]
[132.59742737 63.27863693]
[141.30262756 73.44546509]
[146.93898010 85.58534241]
[149.08769226 98.79625702]
[147.58909607 112.09660339]
[142.55456543 124.49815369]
[134.35813904 135.07945251]
[123.60886383 143.05429077]
[111.10540009 147.83012390]
[112.22635651 162.78817749]
[121.51683044 171.83821106]
[122.08580017 184.39282227]
[114.17444611 193.63420105]
[114.92213440 208.61555481]
[126.35808563 219.19178772]
[126.90293121 234.39566040]
[116.74963379 245.23291016]
[117.49732208 260.21426392]
[118.24501038 275.19561768]
[118.99269867 290.17697144]
[119.74038696 305.15832520]
[120.48807526 320.13967896]
[121.23576355 335.12103271]
[134.39991760 346.56152344]
[135.25538635 363.64456177]
[123.76087952 375.85305786]
[124.88182831 390.81112671]
[126.00277710 405.76916504]
[127.12373352 420.72723389]
[137.57907104 426.65551758]
[143.76673889 436.81857300]
[144.22355652 448.58764648]
[138.95129395 458.98464966]
[129.38665771 465.43566895]
[129.76062012 480.43099976]
[133.13331604 489.04092407]
[129.95227051 495.80380249]
[129.95227051 510.80380249]
[135.99861145 526.64294434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 121]
[5 120]
[8 115]
[9 114]
[10 113]
[11 112]
[15 109]
[16 108]
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[24 100]
[25 99]
[27 96]
[28 95]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[52 86]
[53 85]
[56 82]
[57 81]
[58 80]
[59 79]
[67 78]
[68 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
