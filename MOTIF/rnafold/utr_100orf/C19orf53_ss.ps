%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAGUCCCGCCUCUUCCGCUGCGUGCCGGACCAUGGCGCAGGGGCAGCGCAAGUUUCAGGCGCACAAACCCGCAAAGAGUAAGACGGCAGCGGCAGCCUCUGAAAAGAAUCGGGGCCCAAGAAAAGGCGGUC\
) } def
/len { sequence length } bind def

/coor [
[110.09260559 265.80026245]
[98.79068756 276.05841064]
[84.15473938 280.38873291]
[69.09072113 277.93142700]
[56.58962631 269.17440796]
[49.13354111 255.85639954]
[48.20288467 240.62167358]
[53.98243332 226.49511719]
[65.32466125 216.28157043]
[79.97755432 212.00892639]
[82.39249420 197.20458984]
[84.80742645 182.40026855]
[87.22236633 167.59594727]
[89.63730621 152.79161072]
[92.05224609 137.98728943]
[75.26203156 126.44577789]
[67.62925720 109.06190491]
[70.12947845 91.64157104]
[80.58263397 79.24673462]
[73.58819580 65.97730255]
[66.59375763 52.70786667]
[59.59932327 39.43843460]
[52.60488510 26.16900063]
[45.61044693 12.89956760]
[38.61600876 -0.36986476]
[25.77240181 -8.11852360]
[10.77240181 -8.11852360]
[-4.22759819 -8.11852360]
[-19.22759819 -8.11852360]
[-34.22760010 -8.11852360]
[-49.22760010 -8.11852360]
[-61.54282379 2.16324520]
[-77.23031616 -1.19563723]
[-84.25597382 -15.61852360]
[-77.23031616 -30.04141045]
[-61.54282379 -33.40029144]
[-49.22760010 -23.11852455]
[-34.22760010 -23.11852455]
[-19.22759819 -23.11852455]
[-4.22759819 -23.11852455]
[10.77240181 -23.11852455]
[25.77240181 -23.11852455]
[33.96170807 -35.68655014]
[42.15029907 -48.25344849]
[36.09148407 -61.97535706]
[30.03266907 -75.69726562]
[12.26860523 -78.93627167]
[0.06045560 -92.02832794]
[-1.89647126 -109.66487885]
[6.98707533 -124.84529114]
[0.30099988 -138.27273560]
[-6.38507557 -151.70019531]
[-13.07115078 -165.12763977]
[-28.41749001 -166.70669556]
[-40.45967484 -176.34980774]
[-45.35508728 -190.97985840]
[-41.54161835 -205.92846680]
[-30.23613739 -216.42559814]
[-15.04617596 -219.12162781]
[-0.81879824 -213.15629578]
[7.90609121 -200.43309021]
[8.34441280 -185.01194763]
[0.35629857 -171.81372070]
[7.04237413 -158.38626099]
[13.72844887 -144.95881653]
[20.41452408 -131.53137207]
[32.65277481 -131.30374146]
[43.68224335 -125.83034515]
[51.35501099 -116.10784912]
[54.14735031 -103.96689606]
[51.46199036 -91.72756958]
[43.75457764 -81.75608063]
[49.81339264 -68.03417206]
[55.87220764 -54.31226349]
[66.44584656 -64.95172882]
[79.86904907 -71.64631653]
[94.72898102 -73.69139862]
[109.46157837 -70.87171936]
[122.51618195 -63.48406219]
[132.51873779 -52.30600739]
[138.41642761 -38.51408386]
[139.58853149 -23.55994797]
[135.91163635 -9.01757812]
[127.77279663 3.58238697]
[116.02861786 12.91375160]
[101.91523743 17.99435425]
[86.91814423 18.28944397]
[72.61582947 13.76795864]
[60.51367188 4.90580273]
[51.88544464 -7.36430216]
[58.87987900 5.90513086]
[65.87432098 19.17456436]
[72.86875153 32.44399643]
[79.86318970 45.71342850]
[86.85762787 58.98286057]
[93.85206604 72.25229645]
[114.47343445 71.59068298]
[132.41191101 85.89820099]
[137.31065369 110.68250275]
[151.53306580 115.44937134]
[165.75547791 120.21624756]
[174.97889709 119.98332977]
[180.24911499 125.26096344]
[194.35763550 130.35507202]
[208.46614075 135.44917297]
[222.57464600 140.54328918]
[236.77270508 133.60133362]
[251.69361877 138.81111145]
[258.48507690 153.08177185]
[253.11782837 167.94677734]
[238.77616882 174.58697510]
[223.96875000 169.06286621]
[217.48054504 154.65179443]
[203.37203979 149.55769348]
[189.26351929 144.46357727]
[175.15501404 139.36947632]
[160.98860168 134.43865967]
[146.76620483 129.67178345]
[132.54379272 124.90491486]
[126.12198639 128.77923584]
[136.31796265 139.78114319]
[148.18829346 148.95150757]
[147.32685852 163.92674255]
[134.48329163 171.67547607]
[120.83401489 165.45477295]
[118.25663757 150.67770386]
[113.27837372 136.52789307]
[106.85656738 140.40223694]
[104.44163513 155.20655823]
[102.02669525 170.01087952]
[99.61175537 184.81521606]
[97.19681549 199.61953735]
[94.78187561 214.42385864]
[107.31736755 223.13157654]
[114.82583618 236.42013550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 133]
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[44 74]
[45 73]
[46 72]
[50 66]
[51 65]
[52 64]
[53 63]
[99 119]
[100 118]
[101 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
