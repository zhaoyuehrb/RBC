%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCAUUCCCUCAGCUCCCUUUCUCUCUGUGACACAGACAUGACCGGGGACUGCAUGCCAGUGCUGGUGCUGAUGGCCGCAGUGCUGACCGUGACUGGAGCAGUUCCUGUCGCCAGGCUCCGCGGGGCUCUCCCGGAUG\
) } def
/len { sequence length } bind def

/coor [
[146.10345459 215.88684082]
[131.32240295 218.44039917]
[116.73100281 214.96318054]
[104.69023132 206.01780701]
[97.14833832 193.05169678]
[95.32566071 178.16285706]
[99.51712036 163.76036072]
[109.04450226 152.17463684]
[122.36623383 145.28033447]
[137.32676697 144.19296265]
[151.50764465 149.08979797]
[139.57327271 140.00296021]
[127.63890839 130.91610718]
[115.70453644 121.82925415]
[103.77017212 112.74240112]
[89.31072235 108.75184631]
[74.40504456 110.43131256]
[59.49935913 112.11078644]
[44.59367752 113.79025269]
[34.75035858 125.86281586]
[19.60995102 127.35369873]
[8.16126633 117.89519501]
[-6.74441719 119.57466125]
[-17.35668182 133.43170166]
[-34.36826324 135.33027649]
[-47.25700378 124.58474731]
[-62.12125015 126.59824371]
[-76.98549652 128.61174011]
[-91.84974670 130.62524414]
[-106.71398926 132.63874817]
[-121.59815216 140.75650024]
[-133.51901245 128.70123291]
[-125.23489380 113.90901184]
[-108.72749329 117.77449799]
[-93.86324310 115.76099396]
[-78.99900055 113.74749756]
[-64.13475037 111.73400116]
[-49.27050400 109.72049713]
[-42.94257355 98.44125366]
[-31.08574486 92.80527496]
[-17.95924759 95.08655548]
[-8.42388439 104.66898346]
[6.48179865 102.98951721]
[15.53872681 91.22058868]
[30.63128471 89.30503082]
[42.91421127 98.88456726]
[57.81989288 97.20510101]
[72.72557831 95.52563477]
[87.63125610 93.84616852]
[96.71810913 81.91179657]
[94.37158966 67.09647369]
[92.02507782 52.28114700]
[89.67855835 37.46582031]
[87.33203888 22.65049744]
[77.34054565 14.40879536]
[75.72905731 1.96257663]
[82.82348633 -7.89884472]
[80.80998993 -22.76309204]
[78.79648590 -37.62733841]
[76.78298950 -52.49158478]
[62.69132233 -62.79025269]
[60.41151810 -79.75495148]
[70.86514282 -92.88155365]
[68.51863098 -107.69688416]
[57.78342819 -120.09395599]
[63.40694809 -135.49876404]
[79.60419464 -138.06414795]
[89.71282959 -125.15107727]
[83.33395386 -110.04339600]
[85.68046570 -95.22807312]
[97.09886169 -89.15482330]
[102.99946594 -77.42743683]
[101.01329041 -64.25305939]
[91.64723206 -54.50508499]
[93.66073608 -39.64083862]
[95.67423248 -24.77659035]
[97.68772888 -9.91234398]
[109.16165924 3.31945705]
[102.14736938 20.30397987]
[104.49388123 35.11930466]
[106.84040070 49.93463135]
[109.18692017 64.74995422]
[111.53343201 79.56527710]
[112.85701752 100.80803680]
[124.79138947 109.89488220]
[136.72575378 118.98173523]
[148.66012573 128.06858826]
[160.59449768 137.15544128]
[175.00825500 141.30796814]
[189.94786072 139.96337891]
[204.85354614 138.28390503]
[219.71780396 136.27041626]
[234.58204651 134.25691223]
[249.44628906 132.24340820]
[264.31054688 130.22991943]
[276.94720459 120.71019745]
[290.59790039 126.66905212]
[305.46215820 124.65554810]
[320.32638550 122.64205170]
[331.14999390 110.80022430]
[347.14639282 112.02292633]
[356.04449463 125.37220001]
[351.01846313 140.60763550]
[335.92382812 146.04190063]
[322.33990479 137.50630188]
[307.47564697 139.51979065]
[292.61138916 141.53329468]
[281.03790283 150.90899658]
[266.32403564 145.09416199]
[251.45979309 147.10766602]
[236.59553528 149.12115479]
[221.73129272 151.13465881]
[206.86705017 153.14816284]
[203.27052307 156.40379333]
[197.56623840 157.38067627]
[191.29244995 154.90299988]
[176.35284424 156.24758911]
[177.87774658 157.18820190]
[179.37716675 158.17326355]
[187.07066345 171.05000305]
[194.76414490 183.92672729]
[202.45764160 196.80346680]
[209.60566711 202.62539673]
[210.17555237 210.05656433]
[217.57818604 223.10267639]
[224.98080444 236.14880371]
[239.38749695 243.98329163]
[239.53541565 260.38177490]
[225.27239990 268.47488403]
[211.27101135 259.93713379]
[211.93469238 243.55142212]
[204.53205872 230.50531006]
[197.12944031 217.45918274]
[189.58090210 204.49694824]
[181.88742065 191.62022400]
[174.19392395 178.74348450]
[166.50044250 165.86676025]
[169.77868652 180.50413513]
[167.02413940 195.24905396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 49]
[17 48]
[18 47]
[19 46]
[22 43]
[23 42]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[57 77]
[58 76]
[59 75]
[60 74]
[63 70]
[64 69]
[89 117]
[90 116]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[97 107]
[98 106]
[99 105]
[119 137]
[120 136]
[121 135]
[122 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
