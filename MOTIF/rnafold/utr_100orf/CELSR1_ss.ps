%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCCGCCGCCGCCGCCCGUGCUGCCCGUGCUGCUGCUCCUGGCCGCCGCCGCCGCCCUGCCGGCGAUGGGGCUGCGAGCGGCCGCCUGGGAGCCGC\
) } def
/len { sequence length } bind def

/coor [
[23.62080956 222.81428528]
[20.58621025 224.35057068]
[17.62202644 224.59129333]
[7.78309774 235.91363525]
[-2.05583119 247.23597717]
[-11.89476013 258.55831909]
[-15.10639572 274.05014038]
[-29.29487038 278.58184814]
[-39.13380051 289.90420532]
[-41.72725677 306.09695435]
[-57.14178848 311.69378662]
[-69.52024078 300.93710327]
[-66.12872314 284.89248657]
[-50.45614243 280.06527710]
[-40.61721420 268.74291992]
[-38.10932541 254.06095886]
[-23.21710396 248.71939087]
[-13.37817478 237.39704895]
[-3.53924632 226.07470703]
[6.29968262 214.75236511]
[15.41567326 202.84024048]
[23.77345657 190.38441467]
[24.90639877 182.94520569]
[32.58989334 177.67675781]
[41.33100891 165.48687744]
[50.07212448 153.29701233]
[51.43587494 145.89663696]
[59.27949905 140.86968994]
[68.39549255 128.95756531]
[77.51148224 117.04543304]
[86.62747192 105.13330841]
[88.62475586 91.29486847]
[101.46040344 85.75069427]
[110.57639313 73.83856964]
[112.81869507 58.17707062]
[126.69799042 52.77202606]
[135.81398010 40.85990143]
[144.92997742 28.94777489]
[154.04595947 17.03565025]
[163.16195679 5.12352562]
[172.27793884 -6.78859949]
[181.39393616 -18.70072365]
[183.63623047 -34.36222458]
[197.51553345 -39.76727295]
[206.63151550 -51.67939758]
[215.74751282 -63.59152222]
[224.86349487 -75.50364685]
[233.97949219 -87.41577148]
[236.78204346 -96.30049133]
[243.56890869 -99.55074310]
[253.05094910 -111.17359924]
[262.53298950 -122.79645538]
[265.26129150 -138.38064575]
[279.30197144 -143.35144043]
[288.78399658 -154.97428894]
[298.26605225 -166.59715271]
[307.74810791 -178.22000122]
[317.23013306 -189.84286499]
[315.38604736 -205.53918457]
[325.24649048 -217.89019775]
[340.96142578 -219.56825256]
[353.20748901 -209.57777405]
[354.71929932 -193.84596252]
[344.59991455 -181.70620728]
[328.85299683 -180.36080933]
[319.37094116 -168.73796082]
[309.88891602 -157.11509705]
[300.40686035 -145.49224854]
[290.92480469 -133.86938477]
[288.87475586 -119.11653900]
[274.15585327 -113.31440735]
[264.67379761 -101.69155121]
[255.19175720 -90.06869507]
[245.89161682 -78.29978180]
[236.77561951 -66.38765717]
[227.65963745 -54.47553253]
[218.54364014 -42.56340790]
[209.42765808 -30.65128136]
[207.83738708 -15.84181499]
[193.30606079 -9.58473396]
[184.19006348 2.32739115]
[175.07408142 14.23951626]
[165.95808411 26.15163994]
[156.84210205 38.06376648]
[147.72610474 49.97589111]
[138.61010742 61.88801575]
[137.01985168 76.69747925]
[122.48851776 82.95456696]
[113.37252808 94.86669159]
[111.37524414 108.70513153]
[98.53959656 114.24930573]
[89.42360687 126.16143036]
[80.30761719 138.07354736]
[71.19162750 149.98567200]
[62.26199341 162.03813171]
[53.52087784 174.22799683]
[44.77976227 186.41786194]
[36.22927856 198.74220276]
[27.87149239 211.19802856]
[27.75667191 215.95379639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[8 15]
[9 14]
[21 99]
[22 98]
[24 97]
[25 96]
[26 95]
[28 94]
[29 93]
[30 92]
[31 91]
[33 89]
[34 88]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[44 78]
[45 77]
[46 76]
[47 75]
[48 74]
[50 73]
[51 72]
[52 71]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
