%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGAGCUUCAAAAAAAGAGCGGGACAGGGACAAGCGUAUCUAAGAGGCUGAACAUGAAUCCACAGAUCAGAAAUCCGAUGGAGCGGAUGUAUCGAGACACAUUCUACGACAACUUUGAAAACGAACCCAUCCUCUAUGGUCGGAGCUACACUU\
) } def
/len { sequence length } bind def

/coor [
[49.34017563 664.34820557]
[39.59862137 652.59814453]
[35.92829895 637.78289795]
[39.05794907 622.84405518]
[48.36618042 610.74780273]
[62.00483322 603.89581299]
[61.70277786 588.89886475]
[61.40072250 573.90191650]
[61.09866714 558.90490723]
[60.79661179 543.90795898]
[60.49455643 528.91101074]
[47.80726624 524.85986328]
[36.97634125 517.07019043]
[29.07204819 506.29428101]
[24.88081932 493.58038330]
[24.82703781 480.17071533]
[28.93011284 467.38009644]
[36.80118179 456.46697998]
[47.67992401 448.50973511]
[60.50798798 444.29995728]
[60.81004333 429.30300903]
[57.78306961 422.51324463]
[61.27221298 414.00790405]
[61.87620163 399.02008057]
[62.48019028 384.03225708]
[63.08417892 369.04440308]
[55.09915161 359.91009521]
[55.51514816 347.38293457]
[64.65537262 338.22943115]
[65.56105042 323.25677490]
[66.46672821 308.28414917]
[57.76317596 302.65844727]
[52.16207504 293.84283447]
[50.74485397 283.41311646]
[53.83778763 273.26742554]
[60.94004822 265.28085327]
[70.80348969 260.95886230]
[72.61153412 246.06823730]
[74.41958618 231.17759705]
[62.96187592 223.68933105]
[55.82457733 211.93217468]
[54.45497131 198.17994690]
[59.17833328 185.12138367]
[69.12303925 175.33445740]
[82.38082123 170.77743530]
[84.48835754 155.92622375]
[86.59589386 141.07502747]
[88.70343018 126.22381592]
[72.49526978 107.66751862]
[76.76603699 83.40229034]
[67.27935028 71.78321838]
[57.79267120 60.16413879]
[48.30599213 48.54506683]
[34.80401611 48.73661041]
[23.82761192 41.21120071]
[19.27429581 28.91364861]
[22.60276413 16.43130112]
[13.35198021 4.62354803]
[-2.36531496 2.96759677]
[-12.24310589 -9.36953354]
[-10.42107391 -25.06844330]
[2.01980090 -34.81524658]
[17.69856834 -32.82733917]
[27.31329536 -20.28410912]
[25.15973282 -4.62723494]
[34.41051483 7.18051720]
[51.15259171 8.47341633]
[62.01466751 21.71788025]
[59.92506790 39.05838394]
[69.41175079 50.67745972]
[78.89842987 62.29653549]
[88.38510895 73.91561127]
[88.90333557 69.39558411]
[90.01183319 64.83642578]
[91.71741486 60.29959488]
[94.42124176 45.54529572]
[97.12506866 30.79099655]
[99.82888794 16.03669930]
[102.53271484 1.28240013]
[93.34971619 -11.58026314]
[96.03400421 -27.15492630]
[108.99304199 -36.20141983]
[124.53845215 -33.35261536]
[133.44743347 -20.29866219]
[130.43443298 -4.78423786]
[117.28701782 3.98622561]
[114.58319092 18.74052429]
[111.87936401 33.49482346]
[109.17553711 48.24912262]
[106.47171021 63.00342178]
[112.72863770 67.13874817]
[126.14801788 60.43649292]
[125.24247742 75.40940094]
[131.49940491 79.54473114]
[144.01324463 71.27407837]
[156.52708435 63.00342178]
[168.95701599 54.60718155]
[181.30177307 46.08620834]
[193.64653015 37.56523895]
[197.94105530 22.10766220]
[212.75965881 15.96045685]
[226.73480225 23.83922958]
[229.14593506 39.70006180]
[218.14344788 51.37588120]
[202.16749573 49.90999603]
[189.82273865 58.43096924]
[177.47798157 66.95194244]
[173.73823547 73.37673187]
[164.79774475 75.51726532]
[152.28388977 83.78791809]
[139.77005005 92.05857849]
[136.70068359 107.96366882]
[128.03349304 120.20210266]
[116.10328674 127.13545990]
[103.55463409 128.33135986]
[101.44709778 143.18255615]
[99.33956146 158.03376770]
[97.23202515 172.88496399]
[110.33617401 182.92361450]
[116.56967163 198.10754395]
[114.32485962 214.27239990]
[104.30554199 227.03582764]
[89.31021881 232.98565674]
[87.50216675 247.87628174]
[85.69412231 262.76690674]
[98.91786194 277.82205200]
[96.92977905 297.45684814]
[81.43936157 309.18981934]
[80.53368378 324.16247559]
[79.62800598 339.13510132]
[88.24479675 355.37872314]
[78.07201385 369.64840698]
[77.46802521 384.63623047]
[76.86403656 399.62408447]
[76.26004791 414.61190796]
[75.80699921 429.60507202]
[75.50494385 444.60202026]
[91.02030182 451.10095215]
[102.84111786 463.01733398]
[109.18715668 478.51675415]
[109.11793518 495.22827148]
[102.67201996 510.60705566]
[90.85688019 522.32196045]
[75.49151611 528.60894775]
[75.79357147 543.60589600]
[76.09562683 558.60290527]
[76.39768219 573.59985352]
[76.69973755 588.59680176]
[77.00179291 603.59375000]
[90.90528870 609.89099121]
[100.69303894 621.60266113]
[104.42167664 636.40332031]
[101.35087585 651.35437012]
[92.09035492 663.48718262]
[78.47879028 670.39282227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 144]
[20 137]
[21 136]
[23 135]
[24 134]
[25 133]
[26 132]
[29 130]
[30 129]
[31 128]
[37 125]
[38 124]
[39 123]
[45 118]
[46 117]
[47 116]
[48 115]
[50 72]
[51 71]
[52 70]
[53 69]
[57 66]
[58 65]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[94 111]
[95 110]
[96 109]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
