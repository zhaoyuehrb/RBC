%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGAUUUCACUACAGACUCUCUGGAAAGCCUGGGAGCUGAAUUCCGGAAGAUCCCCACAUCGAUGAAAGCAAAGCGAAGCCACCAAGCCGUCAUCAUGUCCACGUCGCUACGAGUCAGCCCAUCCAUCCAUGGCUACCACUUCGACACAGCCUCUCGUAAGA\
) } def
/len { sequence length } bind def

/coor [
[103.98336792 155.67469788]
[96.53166962 156.52450562]
[92.87836456 171.07281494]
[89.22505188 185.62112427]
[94.23667145 201.23573303]
[83.02091980 213.19979858]
[67.11559296 209.20571899]
[62.88273239 193.36225891]
[74.67674255 181.96781921]
[78.33005524 167.41950989]
[81.98336029 152.87120056]
[75.47637177 149.14170837]
[68.01716614 162.15556335]
[55.00344086 154.69613647]
[62.46239853 141.68272400]
[55.95541382 137.95323181]
[45.24892044 148.45898438]
[34.54243088 158.96475220]
[23.83593750 169.47050476]
[16.76526260 184.87965393]
[0.00095056 182.35098267]
[-2.21002054 165.54182434]
[13.33017540 158.76402283]
[24.03666687 148.25825500]
[34.74316025 137.75250244]
[45.44964981 127.24673462]
[44.89031219 99.75667572]
[56.14164734 77.60762787]
[74.40600586 64.97740936]
[93.89620209 62.98832321]
[94.46382904 47.99906540]
[95.03144836 33.00981140]
[95.59906769 18.02055359]
[85.13361359 6.48313713]
[85.92279053 -8.71001434]
[96.98645020 -18.61612511]
[97.55406952 -33.60538101]
[98.12169647 -48.59463882]
[97.69593048 -63.58859634]
[96.27865601 -78.52149200]
[94.86138153 -93.45438385]
[93.44409943 -108.38727570]
[92.02682495 -123.32016754]
[88.08537292 -131.61051941]
[90.72676849 -138.54866028]
[89.59233856 -153.50569153]
[88.45790863 -168.46273804]
[74.31148529 -174.08769226]
[64.05195618 -185.25143433]
[59.67478943 -199.70344543]
[61.99691772 -214.56172180]
[70.50483704 -226.88749695]
[83.46695709 -234.26644897]
[82.33252716 -249.22348022]
[81.19809723 -264.18051147]
[67.45628357 -270.89691162]
[58.97730255 -283.50656128]
[57.95519638 -298.56716919]
[64.56455231 -312.02719116]
[76.94045258 -320.31588745]
[75.80602264 -335.27294922]
[74.67159271 -350.22998047]
[73.53716278 -365.18701172]
[69.75330353 -373.55047607]
[72.52552032 -380.43737793]
[71.67434692 -395.41320801]
[70.82316589 -410.38903809]
[69.97198486 -425.36486816]
[69.12080383 -440.34069824]
[57.61205673 -450.83767700]
[56.96217728 -466.03741455]
[67.04035950 -476.94458008]
[66.18917847 -491.92041016]
[51.66660309 -496.26443481]
[39.50745010 -505.31597900]
[31.17999077 -517.98205566]
[27.68980980 -532.73315430]
[29.45836258 -547.78796387]
[36.27208710 -561.32861328]
[47.30819321 -571.71997070]
[61.23402023 -577.70721436]
[76.36795044 -578.56738281]
[90.88249969 -574.19659424]
[103.02494812 -565.12261963]
[111.32905579 -552.44122314]
[114.79204559 -537.68377686]
[112.99575043 -522.63220215]
[106.15708160 -509.10415649]
[95.10184479 -498.73315430]
[81.16500854 -492.77157593]
[82.01618958 -477.79574585]
[93.26532745 -468.10076904]
[94.34188080 -452.92529297]
[84.09663391 -441.19189453]
[84.94781494 -426.21606445]
[85.79899597 -411.24023438]
[86.65017700 -396.26440430]
[87.50135040 -381.28857422]
[88.49420166 -366.32144165]
[89.62863159 -351.36441040]
[90.76306915 -336.40737915]
[91.89749908 -321.45034790]
[105.38196564 -315.12301636]
[113.94581604 -302.81384277]
[115.20690918 -287.77136230]
[108.72676849 -274.02709961]
[96.15513611 -265.31494141]
[97.28956604 -250.35791016]
[98.42400360 -235.40087891]
[112.35076904 -230.06135559]
[122.62039185 -219.15977478]
[127.15694427 -204.82168579]
[125.00956726 -189.87481689]
[116.55116272 -177.29139709]
[103.41494751 -169.59716797]
[104.54937744 -154.64012146]
[105.68380737 -139.68309021]
[106.95971680 -124.73744965]
[108.37699890 -109.80455780]
[109.79427338 -94.87165833]
[111.21154785 -79.93876648]
[112.62882996 -65.00587463]
[122.37137604 -76.41125488]
[137.13870239 -79.04299164]
[150.22149658 -71.70539093]
[155.67579651 -57.73217773]
[151.02349854 -43.47187424]
[138.37834167 -35.40343857]
[123.48542786 -37.19263840]
[113.11095428 -48.02701569]
[112.54332733 -33.03776169]
[111.97570801 -18.04850388]
[122.25849152 -7.33403206]
[121.89636993 7.87529135]
[110.58832550 18.58817673]
[110.02070618 33.57743073]
[109.45308685 48.56668854]
[108.88545990 63.55594635]
[126.46817780 67.12658691]
[142.14292908 79.42446136]
[151.58433533 99.20252228]
[151.31643677 123.11822510]
[139.69065857 146.29014587]
[146.52578735 159.64231873]
[153.36093140 172.99450684]
[160.32211304 186.28141785]
[167.40870667 199.50186157]
[174.49530029 212.72232056]
[189.88215637 213.83946228]
[202.20870972 223.11630249]
[207.54159546 237.59262085]
[204.17910767 252.64907837]
[193.19419861 263.48123169]
[178.09211731 266.63256836]
[163.69189453 261.09750366]
[154.58857727 248.64225769]
[153.68699646 233.24125671]
[161.27485657 219.80891418]
[154.18826294 206.58845520]
[147.10166931 193.36801147]
[141.14375305 188.93879700]
[140.00874329 179.82965088]
[133.17361450 166.47746277]
[126.33847046 153.12527466]
[118.88677216 153.97508240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[16 26]
[17 25]
[18 24]
[19 23]
[30 138]
[31 137]
[32 136]
[33 135]
[36 132]
[37 131]
[38 130]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[45 117]
[46 116]
[47 115]
[53 109]
[54 108]
[55 107]
[60 102]
[61 101]
[62 100]
[63 99]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
[72 91]
[73 90]
[143 164]
[144 163]
[145 162]
[146 160]
[147 159]
[148 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
