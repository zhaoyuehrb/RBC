%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACAUGGCACUGGAGCUCUACAUGGACCUGCUGUCAGCACCCUGCCGUGCCGUCUACAUCUUCUCGAAGAAGCAUGACAUCCAGUUCAACUUUCAGUUUGUGG\
) } def
/len { sequence length } bind def

/coor [
[48.67068100 517.95043945]
[32.92882156 516.54711914]
[22.85420036 504.37017822]
[24.42391205 488.64404297]
[36.70667267 478.69873047]
[38.03860855 463.75796509]
[39.37054825 448.81723022]
[40.70248795 433.87649536]
[42.03442383 418.93572998]
[39.45195770 411.88076782]
[43.63364410 403.57421875]
[45.40774155 388.67950439]
[47.18183899 373.78475952]
[48.95593643 358.89004517]
[50.73003387 343.99533081]
[52.50413513 329.10061646]
[54.27823257 314.20590210]
[41.15044403 304.91223145]
[34.41997147 290.20092773]
[35.98947525 274.00561523]
[45.52835083 260.70877075]
[60.53683853 253.95559692]
[61.86877441 239.01484680]
[59.28630829 231.95988464]
[63.46799469 223.65332031]
[65.24209595 208.75860596]
[67.01618958 193.86387634]
[68.79029083 178.96916199]
[67.16896057 177.08001709]
[66.15117645 174.46734619]
[65.99792480 171.34036255]
[66.89646912 167.99241638]
[68.93521118 164.77532959]
[72.08730316 162.06694031]
[76.04110718 147.59739685]
[79.99491882 133.12786865]
[83.94872284 118.65833282]
[87.90253448 104.18880463]
[86.57059479 89.24805450]
[80.11961365 75.70608521]
[73.66864014 62.16411972]
[67.21765900 48.62215042]
[52.24058151 43.57609177]
[45.29323959 29.38067436]
[50.49736023 14.45778370]
[64.76544189 7.66090870]
[79.63247681 13.02251434]
[86.27811432 27.36165619]
[80.75962830 42.17117310]
[87.21060944 55.71314240]
[93.66158295 69.25511169]
[100.11256409 82.79707336]
[107.42803955 84.45050049]
[108.25914001 69.47354126]
[103.27516937 55.32574844]
[110.65013885 42.26398087]
[125.33882141 39.22381592]
[137.29266357 48.28503418]
[138.33401489 63.24884415]
[127.74974060 73.87875366]
[122.05899048 87.75734711]
[129.37446594 89.41077423]
[141.02232361 79.95945740]
[152.67018127 70.50813293]
[164.31803894 61.05681992]
[175.96589661 51.60550308]
[184.45564270 36.93032837]
[200.90748596 41.02579498]
[201.52639771 57.96844101]
[185.41722107 63.25336075]
[173.76936340 72.70467377]
[162.12150574 82.15599823]
[150.47364807 91.60731506]
[138.82579041 101.05863190]
[125.89515686 112.42208099]
[112.03257751 114.18473816]
[102.37207031 108.14260864]
[98.41825867 122.61214447]
[94.46445465 137.08168030]
[90.51064301 151.55120850]
[86.55683899 166.02073669]
[83.68500519 180.74327087]
[81.91090393 195.63798523]
[80.13681030 210.53269958]
[78.36270905 225.42741394]
[76.80952454 240.34678650]
[75.47758484 255.28753662]
[87.39086914 262.78332520]
[94.84680939 274.64312744]
[96.42292023 288.49606323]
[91.86541748 301.60205078]
[82.12799835 311.39389038]
[69.17295074 315.98001099]
[67.39884949 330.87472534]
[65.62475586 345.76943970]
[63.85065460 360.66415405]
[62.07655716 375.55886841]
[60.30245972 390.45358276]
[58.52836227 405.34829712]
[56.97517395 420.26766968]
[55.64323425 435.20843506]
[54.31129837 450.14916992]
[52.97935867 465.08990479]
[51.64741898 480.03067017]
[61.97725677 491.99185181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[22 87]
[23 86]
[25 85]
[26 84]
[27 83]
[28 82]
[34 81]
[35 80]
[36 79]
[37 78]
[38 77]
[39 52]
[40 51]
[41 50]
[42 49]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
