%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUACAACUGCUGCUGUGGAAACUUCUCCUCCCAUUCCUGUGAGGGCUACCUGUGCUACUCAGGCUACUCCCGUGGUGGCUCCUCGUACCCCAGCA\
) } def
/len { sequence length } bind def

/coor [
[78.49348450 252.42326355]
[77.62316132 267.62728882]
[70.63826752 281.15988159]
[58.74899673 290.67645264]
[44.01522064 294.52819824]
[28.98966789 292.04776001]
[16.27559853 283.66488647]
[8.07580376 270.83200073]
[5.81094837 255.77243042]
[9.87343216 241.09536743]
[19.55940437 229.34370422]
[33.19071198 222.55346680]
[48.40565109 221.90110779]
[53.87542343 207.93395996]
[59.34519577 193.96679688]
[64.81497192 179.99963379]
[70.28474426 166.03247070]
[64.10166931 152.53042603]
[69.44982910 138.28782654]
[83.65393829 131.89399719]
[89.12371063 117.92683411]
[81.55647278 104.97550201]
[66.70317078 102.88277435]
[51.84987259 100.79004669]
[39.37707138 110.49596405]
[23.70491409 108.45660400]
[14.13140965 95.88188171]
[16.33635139 80.23216248]
[29.01158333 70.79213715]
[44.63711929 73.16241455]
[53.94260406 85.93674469]
[68.79589844 88.02947998]
[83.64920044 90.12220764]
[69.59904480 84.86927795]
[59.04830170 74.20711517]
[53.94326019 60.10255814]
[55.22564697 45.15747452]
[62.65890121 32.12878418]
[74.87181091 23.41989136]
[89.61146545 20.63731956]
[104.15882874 24.29437447]
[115.83036804 33.71643448]
[122.47302246 47.16541672]
[122.86142731 62.16038895]
[116.92393494 75.93522644]
[105.75849152 85.94738007]
[118.82593536 78.58247375]
[131.89338684 71.21755981]
[144.96083069 63.85264969]
[157.91215515 56.28540421]
[170.74421692 48.51766205]
[183.57629395 40.74991608]
[196.40837097 32.98217392]
[209.24044800 25.21442795]
[222.07252502 17.44668388]
[222.04571533 -3.68958735]
[234.35647583 -20.71310425]
[254.19462585 -27.22833824]
[273.95788574 -20.89651108]
[285.12585449 -30.91033363]
[296.29379272 -40.92415619]
[298.59887695 -56.80074692]
[312.52105713 -64.77274323]
[327.38043213 -58.72470474]
[331.77813721 -43.29617691]
[322.34066772 -30.32259941]
[306.30761719 -29.75619507]
[295.13967896 -19.74237251]
[283.97171021 -9.72854996]
[287.45614624 -0.73749906]
[288.24264526 8.89688969]
[286.25274658 18.38061905]
[281.63748169 26.92824364]
[274.76577759 33.82792282]
[266.19519043 38.50069809]
[256.62652588 40.54905701]
[246.84664917 39.79072189]
[237.66365051 36.27478409]
[229.84027100 30.27875900]
[217.00819397 38.04650497]
[204.17611694 45.81424713]
[191.34403992 53.58199310]
[178.51196289 61.34973526]
[165.67990112 69.11747742]
[161.51455688 75.38449860]
[152.32572937 76.92008972]
[139.25828552 84.28500366]
[126.19084930 91.64991760]
[113.12340546 99.01482391]
[115.12630463 106.93473816]
[111.95320892 116.18445587]
[103.09087372 123.39660645]
[97.62110138 137.36376953]
[103.70578766 151.70301819]
[97.95969391 165.78979492]
[84.25190735 171.50224304]
[78.78212738 185.46940613]
[73.31235504 199.43656921]
[67.84258270 213.40373230]
[62.37281418 227.37088013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 100]
[14 99]
[15 98]
[16 97]
[17 96]
[20 93]
[21 92]
[22 33]
[23 32]
[24 31]
[46 89]
[47 88]
[48 87]
[49 86]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[59 69]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
