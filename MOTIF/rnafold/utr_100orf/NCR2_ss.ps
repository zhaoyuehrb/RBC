%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGCAGAAUCAGGCCCAGCUCCCAAUUCCCUCUCCCCAGUCUUCUCCAGGUGUCCCCUCCCAUGAGCGCACAGGAAAAGGACCACAUGGCCUGGCGAGCCCUACACCCACUGCUACUGCUGCUGCUGCUGUUCCCAGGCUCUCAGGCACAAUCCAAGGCUCAGGUACUUCAAAGUGUGGCAGGGC\
) } def
/len { sequence length } bind def

/coor [
[352.92498779 295.67239380]
[340.84893799 286.77468872]
[328.77288818 277.87698364]
[316.69683838 268.97930908]
[304.62078857 260.08160400]
[292.54473877 251.18389893]
[280.46868896 242.28620911]
[268.39263916 233.38850403]
[254.27639771 238.06507874]
[239.94367981 233.47843933]
[230.95494080 221.18795776]
[230.92645264 205.78323364]
[218.85040283 196.88554382]
[206.77433777 187.98783875]
[192.65812683 192.66441345]
[178.32540894 188.07777405]
[169.33665466 175.78729248]
[169.30816650 160.38256836]
[157.23211670 151.48487854]
[145.15606689 142.58717346]
[133.65470886 152.15457153]
[120.19824982 158.69215393]
[105.56842804 161.82014465]
[90.61511230 161.35684204]
[76.20699310 157.32914734]
[63.18107986 149.97103882]
[52.29407501 139.70997620]
[44.17844009 127.14205933]
[39.30563354 112.99738312]
[37.95873260 98.09764862]
[40.21597672 83.30843353]
[45.94623947 69.48886871]
[33.87018967 60.59117508]
[21.79413795 51.69347763]
[6.09442234 49.73656464]
[0.43768683 35.95793533]
[-11.63836384 27.06023979]
[-23.93362617 18.46800423]
[-36.44037628 10.18662739]
[-48.94712830 1.90525031]
[-61.72361374 -5.95358944]
[-74.75556946 -13.38111401]
[-87.78752899 -20.80863953]
[-100.81948090 -28.23616409]
[-113.85144043 -35.66368866]
[-132.24853516 -35.12556076]
[-140.52574158 -50.59029388]
[-153.67999268 -57.79901886]
[-166.83422852 -65.00774384]
[-179.42477417 -62.14821625]
[-190.23811340 -68.43899536]
[-193.74227905 -80.02990723]
[-206.77423096 -87.45743561]
[-219.80618286 -94.88495636]
[-232.83813477 -102.31248474]
[-243.16943359 -98.83125305]
[-253.49583435 -101.56531525]
[-260.45809937 -109.37482452]
[-261.93002319 -119.51107788]
[-274.70651245 -127.36991882]
[-287.48300171 -135.22875977]
[-303.88192749 -135.14430237]
[-311.91979980 -149.43853760]
[-303.32791138 -163.40676880]
[-286.94488525 -162.67968750]
[-279.62417603 -148.00524902]
[-266.84768677 -140.14640808]
[-254.07119751 -132.28756714]
[-234.76741028 -133.18508911]
[-225.41061401 -115.34444427]
[-212.37866211 -107.91691589]
[-199.34671021 -100.48938751]
[-186.31474304 -93.06186676]
[-168.80580139 -94.11396027]
[-159.62550354 -78.16199493]
[-146.47125244 -70.95326996]
[-133.31701660 -63.74454117]
[-121.60836029 -66.83256531]
[-110.58473206 -60.91800690]
[-106.42391205 -48.69564438]
[-93.39196014 -41.26811981]
[-80.36000061 -33.84059525]
[-67.32804871 -26.41307068]
[-54.29608917 -18.98554611]
[-51.54398727 -19.61034203]
[-48.37632751 -19.17159653]
[-45.20102310 -17.50465012]
[-42.47826385 -14.59688473]
[-40.66574860 -10.60149956]
[-28.15900040 -2.32012248]
[-15.65224934 5.96125460]
[-12.12490749 5.61068964]
[-8.25280380 6.96375656]
[-4.84426355 10.16355324]
[-2.74066782 14.98418903]
[9.33538342 23.88188553]
[24.17133904 25.20237732]
[30.69183350 39.61742783]
[42.76788330 48.51512527]
[54.84393692 57.41281891]
[66.34529877 47.84543228]
[79.80175018 41.30784988]
[94.43157196 38.17985153]
[109.38488770 38.64315796]
[123.79300690 42.67085266]
[136.81892395 50.02895737]
[147.70591736 60.29001617]
[155.82156372 72.85794067]
[160.69436646 87.00261688]
[162.04127502 101.90235138]
[159.78402710 116.69156647]
[154.05375671 130.51112366]
[166.12980652 139.40882874]
[178.20585632 148.30651855]
[192.92738342 143.76969910]
[207.32919312 148.71350098]
[215.95634460 161.04380798]
[215.67204285 175.91178894]
[227.74809265 184.80949402]
[239.82414246 193.70718384]
[254.54566956 189.17036438]
[268.94747925 194.11416626]
[277.57461548 206.44447327]
[277.29031372 221.31245422]
[289.36636353 230.21015930]
[301.44241333 239.10784912]
[313.51846313 248.00555420]
[325.59451294 256.90325928]
[337.67056274 265.80093384]
[349.74661255 274.69863892]
[361.82269287 283.59634399]
[367.60784912 280.92630005]
[373.86990356 279.99319458]
[380.10211182 280.84967041]
[385.80657959 283.40432739]
[390.53396606 287.43115234]
[393.91894531 292.58917236]
[395.70837402 298.45126343]
[395.78005981 304.53958130]
[394.15090942 310.36434937]
[405.10598755 320.61059570]
[416.06109619 330.85687256]
[427.01620483 341.10311890]
[437.97128296 351.34936523]
[453.12170410 348.56167603]
[466.84811401 355.15249634]
[473.97726440 368.40539551]
[471.95968628 383.13858032]
[482.91479492 393.38485718]
[493.86990356 403.63110352]
[504.82498169 413.87738037]
[518.07751465 406.60910034]
[532.90765381 403.79672241]
[547.86071777 405.70327759]
[561.47381592 412.12960815]
[572.41925049 422.43496704]
[579.63366699 435.60095215]
[582.42156982 450.33212280]
[580.52233887 465.18350220]
[574.13439941 478.70220947]
[585.08953857 488.94845581]
[601.17663574 492.13214111]
[606.20623779 507.74096680]
[595.00421143 519.71789551]
[579.09429932 515.74212646]
[574.84326172 499.90356445]
[563.88818359 489.65728760]
[550.82629395 496.93389893]
[536.13494873 499.82086182]
[521.25048828 498.02310181]
[507.63201904 491.70419312]
[496.61859131 481.47155762]
[489.29736328 468.31805420]
[486.39630127 453.52572632]
[488.21185303 438.54086304]
[494.57873535 424.83245850]
[483.62362671 414.58621216]
[472.66851807 404.33993530]
[461.71343994 394.09368896]
[447.14788818 397.09082031]
[433.44842529 390.86279297]
[425.95547485 377.60723877]
[427.72503662 362.30447388]
[416.76992798 352.05822754]
[405.81484985 341.81195068]
[394.85974121 331.56570435]
[383.90463257 321.31942749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[7 125]
[8 124]
[12 120]
[13 119]
[14 118]
[18 114]
[19 113]
[20 112]
[32 100]
[33 99]
[34 98]
[36 96]
[37 95]
[38 91]
[39 90]
[40 89]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[47 77]
[48 76]
[49 75]
[52 73]
[53 72]
[54 71]
[55 70]
[59 68]
[60 67]
[61 66]
[140 187]
[141 186]
[142 185]
[143 184]
[144 183]
[148 179]
[149 178]
[150 177]
[151 176]
[160 167]
[161 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
