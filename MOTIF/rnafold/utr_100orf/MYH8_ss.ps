%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCACCAAGAACCCAGAGAGUGGAACACUUCUGAACCUGCAUUUUUAUCUGGAACUCCAGAGGCAGAAUCCUUUGCUAAAUAAAUCGCAGCCAUGAGUGCGAGCUCAGACGCUGAGAUGGCUGUUUUUGGCGAAGCUGCUCCCUACCUUCGAAAAUCAGAAAAGGAGCGGAUUGAGGCCCAAAACAAGCCGU\
) } def
/len { sequence length } bind def

/coor [
[178.35130310 141.26536560]
[185.68806458 154.34863281]
[189.45689392 168.86744690]
[189.41000366 183.86737061]
[185.55050659 198.36235046]
[178.13211060 211.39949036]
[167.64248657 222.12179565]
[154.77117920 229.82437134]
[140.36434937 234.00088501]
[125.36906433 234.37677002]
[110.77107239 230.92730713]
[97.53002930 223.87928772]
[86.51635742 213.69601440]
[78.45408630 201.04690552]
[73.87410736 186.76840210]
[79.01070404 172.67530823]
[84.14729309 158.58221436]
[72.88291931 168.48744202]
[61.61854172 178.39268494]
[50.35416794 188.29792786]
[45.96895599 196.32542419]
[38.82895279 198.26989746]
[27.40726471 207.99331665]
[15.98557472 217.71675110]
[4.56388521 227.44017029]
[-3.57734919 242.31150818]
[-20.12122536 238.60523987]
[-21.13959312 221.68190002]
[-5.15954065 216.01847839]
[6.26214838 206.29505920]
[17.68383789 196.57162476]
[29.10552788 186.84820557]
[40.44892502 177.03355408]
[51.71330261 167.12831116]
[62.97767639 157.22306824]
[74.24205780 147.31782532]
[72.57315063 140.00587463]
[57.94923019 143.34368896]
[43.32530975 146.68150330]
[28.70139122 150.01931763]
[14.07747269 153.35713196]
[-0.54644591 156.69494629]
[-15.17041969 160.03251648]
[-18.50774956 145.40847778]
[-3.88425994 142.07102966]
[10.73965836 138.73321533]
[25.36357689 135.39540100]
[39.98749542 132.05758667]
[54.61141586 128.71977234]
[69.23533630 125.38195038]
[67.56642914 118.06999207]
[53.11985016 114.03311157]
[38.67327499 109.99622345]
[24.22669792 105.95933533]
[9.78012180 101.92245483]
[-5.96158791 106.51925659]
[-17.62476730 94.99092865]
[-13.21133518 79.19683075]
[2.73854613 75.38456726]
[13.81700706 87.47587585]
[28.26358223 91.51276398]
[42.71015930 95.54964447]
[57.15673447 99.58653259]
[71.60330963 103.62341309]
[78.96407318 90.55363464]
[68.02296448 80.29244232]
[57.08185196 70.03125000]
[46.14074326 59.77005386]
[35.19963074 49.50886154]
[24.25852203 39.24766541]
[8.17573547 36.04204559]
[3.16746163 20.42637253]
[14.38578320 8.46471405]
[30.29025269 12.46219826]
[34.51971436 28.30655670]
[45.46082687 38.56774902]
[56.40193558 48.82894516]
[67.34304810 59.09013748]
[78.28415680 69.35133362]
[89.22526550 79.61252594]
[96.36190033 77.30633545]
[91.67964935 63.05584335]
[87.13735962 48.76012421]
[101.41069031 44.14796448]
[106.09275055 58.39826965]
[110.63515472 72.69395447]
[117.77178955 70.38775635]
[120.63916779 55.66437149]
[123.50654602 40.94098663]
[118.54994965 25.91624832]
[128.57749939 14.90272903]
[131.44487000 0.17934206]
[134.31225586 -14.54404545]
[137.17962646 -29.26743317]
[127.13916779 -43.58526230]
[130.48820496 -60.40491486]
[144.67749023 -69.42235565]
[147.30851746 -84.18981171]
[149.93954468 -98.95726013]
[152.57057190 -113.72471619]
[155.20159912 -128.49217224]
[149.11447144 -143.71974182]
[159.46958923 -156.43600464]
[175.61450195 -153.55957031]
[180.94070435 -138.04945374]
[169.96905518 -125.86114502]
[167.33802795 -111.09368896]
[164.70700073 -96.32623291]
[162.07597351 -81.55878448]
[159.44494629 -66.79132843]
[168.22657776 -57.35211945]
[169.99064636 -44.38441849]
[163.87030029 -32.59681320]
[151.90301514 -26.40005302]
[149.03564453 -11.67666626]
[146.16825867 3.04672146]
[143.30088806 17.77010918]
[148.46257019 31.74173164]
[138.22993469 43.80836487]
[135.36254883 58.53175354]
[132.49517822 73.25514221]
[139.96044922 86.26551056]
[154.11869812 91.21969604]
[168.27694702 96.17388153]
[182.43519592 101.12806702]
[196.63269043 105.96862793]
[210.86853027 110.69525146]
[225.10437012 115.42187500]
[239.34019470 120.14849854]
[253.57603455 124.87512207]
[269.11126709 121.88053894]
[278.75207520 133.23413086]
[292.98788452 137.96075439]
[307.22372437 142.68737793]
[320.07061768 130.71162415]
[337.12481689 126.90396881]
[353.67602539 132.22381592]
[365.19937134 145.12220764]
[368.59262085 161.99148560]
[382.97262573 166.25939941]
[397.35263062 170.52731323]
[411.73266602 174.79522705]
[426.11267090 179.06314087]
[440.49270630 183.33105469]
[454.87271118 187.59896851]
[462.70355225 180.32124329]
[472.77423096 176.98243713]
[483.24114990 178.12301636]
[492.21743774 183.46977234]
[498.11306763 191.99742126]
[499.91638184 202.12451172]
[514.07464600 207.07870483]
[528.23291016 212.03288269]
[540.91076660 203.08578491]
[556.42590332 203.33297729]
[568.81231689 212.67941284]
[573.30725098 227.53118896]
[568.18231201 242.17749023]
[555.40808105 250.98652649]
[539.89654541 250.57104492]
[527.61224365 241.09078979]
[523.27868652 226.19113159]
[509.12045288 221.23695374]
[494.96218872 216.28276062]
[478.09396362 226.00744629]
[459.21542358 220.11936951]
[450.60479736 201.97898865]
[436.22479248 197.71107483]
[421.84475708 193.44316101]
[407.46475220 189.17524719]
[393.08471680 184.90733337]
[378.70471191 180.63941956]
[364.32470703 176.37150574]
[356.13424683 186.00880432]
[344.86380005 191.85026550]
[332.17425537 192.99519348]
[319.95086670 189.23796082]
[310.02301025 181.10385132]
[303.89053345 169.77597046]
[302.49710083 156.92321777]
[288.26126099 152.19659424]
[274.02545166 147.46997070]
[259.50845337 150.80262756]
[248.84941101 139.11096191]
[234.61357117 134.38433838]
[220.37774658 129.65771484]
[206.14190674 124.93108368]
[191.90606689 120.20446014]
[184.55818176 121.08151245]
[177.48100281 115.28631592]
[163.32275391 110.33213043]
[149.16450500 105.37794495]
[135.00625610 100.42375946]
[145.05612183 111.55929565]
[155.10600281 122.69482422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 36]
[18 35]
[19 34]
[20 33]
[22 32]
[23 31]
[24 30]
[25 29]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[87 121]
[88 120]
[89 119]
[91 117]
[92 116]
[93 115]
[94 114]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
[122 193]
[123 192]
[124 191]
[125 190]
[126 188]
[127 187]
[128 186]
[129 185]
[130 184]
[132 182]
[133 181]
[134 180]
[139 173]
[140 172]
[141 171]
[142 170]
[143 169]
[144 168]
[145 167]
[151 164]
[152 163]
[153 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
