%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGAGCAGGAGGCAGCCCAGGCGGAGCGGGAGGAGCUGGCAGCGGGGCGCAUGCCAGGCGGGGGUCCUCAGGGCGCCCCAGCCGCCGCCGGCGGCGGCGGCGUGAGCCACCGCGCAGGCAGCCGGGAUUGCUUACCACCUGCAGCGUGCU\
) } def
/len { sequence length } bind def

/coor [
[102.86051941 451.42242432]
[91.05609894 441.91287231]
[83.21868134 428.93786621]
[80.29467773 414.06420898]
[82.63717651 399.08792114]
[89.96331024 385.81753540]
[101.38840485 375.85543823]
[115.53282928 370.40466309]
[115.22685242 355.40777588]
[114.92086792 340.41091919]
[114.61489105 325.41403198]
[114.30891418 310.41714478]
[113.39148712 295.44522095]
[111.86414337 280.52319336]
[110.33679962 265.60116577]
[108.80945587 250.67912292]
[107.28211212 235.75708008]
[105.75476837 220.83503723]
[104.07530212 205.92935181]
[102.24388123 191.04158020]
[100.41246796 176.15380859]
[96.45046234 169.86108398]
[98.69873810 160.94404602]
[97.17139435 146.02201843]
[95.64405060 131.09997559]
[85.64395905 127.93003082]
[77.24589539 121.64331818]
[71.38700867 112.94137573]
[56.63911438 115.67992401]
[41.89122009 118.41847229]
[34.35355377 132.11947632]
[19.75392914 137.72171021]
[4.98584080 132.57995605]
[-2.97766900 119.12200165]
[-0.37647605 103.70227814]
[11.56121635 93.60150909]
[27.19879532 93.58896637]
[39.15267181 103.67057800]
[53.90056610 100.93202972]
[68.64846039 98.19348145]
[77.12535095 78.48412323]
[96.27935028 68.81764221]
[98.11076355 53.92986679]
[96.04484558 44.96882248]
[100.13439178 38.75823593]
[102.26911926 23.91091347]
[104.40383911 9.06359100]
[106.53855896 -5.78373003]
[108.52173615 -20.65205383]
[110.35314941 -35.53982925]
[112.18456268 -50.42760849]
[106.19007111 -65.06921387]
[115.42341614 -76.75658417]
[117.25482941 -91.64436340]
[119.08624268 -106.53214264]
[120.91765594 -121.41992188]
[122.74907684 -136.30769348]
[124.58049011 -151.19548035]
[111.53121948 -157.13508606]
[104.60932159 -174.21681213]
[102.17217255 -189.01750183]
[99.73503113 -203.81819153]
[97.14705658 -218.59324646]
[94.40850830 -233.34114075]
[91.66996002 -248.08903503]
[88.93141174 -262.83694458]
[86.04257965 -277.55612183]
[83.00376892 -292.24508667]
[79.96495819 -306.93405151]
[76.92613983 -321.62301636]
[67.79637146 -335.90878296]
[78.99648285 -348.63647461]
[94.32725525 -341.39743042]
[91.61510468 -324.66183472]
[94.65391541 -309.97286987]
[97.69273376 -295.28390503]
[100.73154449 -280.59494019]
[105.19328308 -274.64608765]
[103.67930603 -265.57546997]
[106.41785431 -250.82759094]
[109.15640259 -236.07969666]
[111.89495087 -221.33180237]
[116.23441315 -215.29318237]
[114.53572083 -206.25534058]
[116.97286224 -191.45465088]
[119.41000366 -176.65396118]
[133.88560486 -172.72242737]
[143.47523499 -184.25669861]
[153.06486511 -195.79095459]
[162.65447998 -207.32521057]
[172.24411011 -218.85946655]
[181.83372498 -230.39372253]
[187.31048584 -246.43870544]
[204.24453735 -245.61767578]
[208.14341736 -229.11813354]
[193.36798096 -220.80409241]
[183.77836609 -209.26983643]
[174.18873596 -197.73558044]
[164.59912109 -186.20132446]
[155.00949097 -174.66706848]
[145.41986084 -163.13281250]
[139.46826172 -149.36405945]
[137.63685608 -134.47628784]
[135.80543518 -119.58850861]
[133.97401428 -104.70072937]
[132.14260864 -89.81295013]
[130.31118774 -74.92517090]
[136.43667603 -61.34843826]
[127.07234192 -48.59619522]
[125.24092865 -33.70841599]
[123.40951538 -18.82063866]
[125.72828674 -11.75529385]
[121.38588715 -3.64900756]
[119.25115967 11.19831371]
[117.11643982 26.04563522]
[114.98171997 40.89295578]
[112.99854279 55.76128006]
[111.16712952 70.64905548]
[121.84690857 77.44129181]
[128.97795105 87.89788818]
[131.40191650 100.32031250]
[128.72505188 112.69069672]
[121.38219452 122.99965668]
[110.56609344 129.57263184]
[112.09343719 144.49465942]
[113.62078094 159.41670227]
[115.30024719 174.32238770]
[117.13166046 189.21015930]
[118.96307373 204.09794617]
[123.13921356 212.29112244]
[120.67680359 219.30769348]
[122.20414734 234.22973633]
[123.73149109 249.15176392]
[125.25883484 264.07382202]
[126.78618622 278.99584961]
[128.31352234 293.91787720]
[131.07344055 297.44668579]
[132.39486694 301.28778076]
[132.36053467 304.93859863]
[131.21153259 307.97781372]
[129.30580139 310.11117554]
[129.61177063 325.10806274]
[129.91775513 340.10491943]
[130.22372437 355.10180664]
[130.52970886 370.09869385]
[144.88468933 374.96798706]
[156.70661926 384.45578003]
[164.56793213 397.41632080]
[167.51933289 412.28457642]
[165.20443726 427.26513672]
[157.90278625 440.54901123]
[146.49606323 450.53213501]
[132.36170959 456.00897217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 129]
[20 128]
[21 127]
[23 126]
[24 125]
[25 124]
[28 40]
[29 39]
[30 38]
[42 118]
[43 117]
[45 116]
[46 115]
[47 114]
[48 113]
[49 111]
[50 110]
[51 109]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[58 102]
[60 86]
[61 85]
[62 84]
[63 82]
[64 81]
[65 80]
[66 79]
[67 77]
[68 76]
[69 75]
[70 74]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
