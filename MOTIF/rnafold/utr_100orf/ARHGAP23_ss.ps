%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCACCCGAUGAAUGGAGUCGCCUUCUGCCUGGUCGGGAUCCCGCCCCGCCCGGAGCCCCGGCCCCCACAGCUGCCACUGGGCCCAAGAGAUGGGUGCUCUCCUAGGC\
) } def
/len { sequence length } bind def

/coor [
[9.99331188 402.92666626]
[-2.95456243 391.98184204]
[3.97819281 376.51016235]
[4.82681847 361.53417969]
[5.67544413 346.55819702]
[-0.99138993 343.59628296]
[-6.76937246 339.11254883]
[-11.31675911 333.36102295]
[-14.36192322 326.67095947]
[-15.71957111 319.42816162]
[-15.30199528 312.05261230]
[-13.12468433 304.97409058]
[-9.30593395 298.60723877]
[-4.06045389 293.32720947]
[2.31269073 289.44757080]
[9.44712257 287.20169067]
[16.93021011 286.72869873]
[21.52507210 272.44979858]
[26.11993217 258.17089844]
[30.71479225 243.89198303]
[26.04873848 227.03988647]
[39.62686539 214.70257568]
[43.81580734 200.29934692]
[48.00474930 185.89613342]
[52.19369507 171.49290466]
[56.38263702 157.08969116]
[60.36734390 142.62863159]
[64.14701080 128.11264038]
[67.92668915 113.59664154]
[65.18271637 98.84975433]
[56.43477249 86.66478729]
[47.51527405 74.60483551]
[38.42601013 62.67230225]
[29.33674812 50.73977280]
[20.24748421 38.80723953]
[5.73021936 32.51759720]
[4.17315626 17.70460320]
[-4.91610670 5.77207232]
[-14.00537014 -6.16045856]
[-23.09463310 -18.09298897]
[-38.72230911 -18.64957809]
[-50.30135345 -29.15956116]
[-52.36449432 -44.66044617]
[-43.93758392 -57.83319092]
[-28.99954796 -62.45802689]
[-14.60367107 -56.35124588]
[-7.54724646 -42.39628601]
[-11.16210175 -27.18225288]
[-2.07283902 -15.24972153]
[7.01642418 -3.31719089]
[16.10568810 8.61534023]
[29.97282791 14.05148697]
[32.18001556 29.71797752]
[41.26927948 41.65050888]
[50.35854340 53.58303833]
[59.44780350 65.51557159]
[66.10150909 68.98011017]
[68.61973572 77.91684723]
[77.36768341 90.10181427]
[84.88279724 81.82980347]
[94.86837006 78.02016449]
[105.01185608 79.08683777]
[113.16436005 84.36408234]
[126.36177826 77.23469543]
[139.55920410 70.10531616]
[152.75662231 62.97593307]
[165.95404053 55.84654999]
[164.36239624 40.72917175]
[168.68186951 26.15485954]
[178.25378418 14.34609222]
[191.61848450 7.10361862]
[206.73793030 5.53186417]
[221.30654907 9.87051010]
[233.10272217 19.45794487]
[240.32760620 32.83215332]
[241.87947083 47.95366669]
[237.52166748 62.51656342]
[227.91871643 74.30010986]
[214.53501892 81.50739288]
[199.41148376 83.03936768]
[184.85432434 78.66240692]
[173.08341980 69.04396820]
[159.88600159 76.17335510]
[146.68858337 83.30273438]
[133.49116516 90.43212128]
[120.29374695 97.56150055]
[119.80001068 107.83055878]
[114.23206329 116.96572113]
[104.60951996 122.53047943]
[93.07994080 122.82364655]
[82.44268036 117.37631226]
[78.66300964 131.89230347]
[74.88333893 146.40830994]
[75.74809265 155.65270996]
[70.78585815 161.27862549]
[66.59691620 175.68185425]
[62.40797043 190.08506775]
[58.21902847 204.48829651]
[54.03008652 218.89151001]
[59.56811523 230.64604187]
[55.67742157 242.62081909]
[44.99370193 248.48684692]
[40.39884186 262.76574707]
[35.80398178 277.04467773]
[31.20911980 291.32357788]
[44.89766312 311.09420776]
[40.35363770 334.46603394]
[20.65141869 347.40682983]
[19.80279350 362.38281250]
[18.95416832 377.35876465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 110]
[4 109]
[5 108]
[17 105]
[18 104]
[19 103]
[20 102]
[22 99]
[23 98]
[24 97]
[25 96]
[26 95]
[27 93]
[28 92]
[29 91]
[30 59]
[31 58]
[32 56]
[33 55]
[34 54]
[35 53]
[37 51]
[38 50]
[39 49]
[40 48]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
