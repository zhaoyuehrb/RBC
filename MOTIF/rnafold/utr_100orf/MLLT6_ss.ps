%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAUGGGAGUAUGAAGGAGAUGGUAGGAGGCUGCUGCGUAUGUUCGGACGAGAGGGGCUGGGCCGAGAACCCGCUGGUCUACUGCGAUGGGCACGCGUGCAGCGUGGUCG\
) } def
/len { sequence length } bind def

/coor [
[93.53039551 138.08836365]
[85.36759186 138.43362427]
[79.34216309 152.17022705]
[73.31673431 165.90682983]
[67.29129791 179.64341736]
[69.63215637 195.87463379]
[56.58034515 205.80349731]
[41.56244278 199.21603394]
[40.02758408 182.88887024]
[53.55469894 173.61799622]
[59.58013153 159.88139343]
[65.60556030 146.14479065]
[71.63099670 132.40818787]
[68.06138611 125.81214142]
[56.18789673 134.97839355]
[44.31440735 144.14465332]
[35.65010452 156.38923645]
[20.80337715 158.52807617]
[9.03518200 149.22702026]
[7.68618298 134.28779602]
[17.59784508 123.02907562]
[32.58644867 122.47327423]
[46.75431442 117.54665375]
[60.92217636 112.62003326]
[57.35257339 106.02397919]
[42.55715179 103.55506134]
[27.76173401 101.08614349]
[12.96631336 98.61722565]
[-1.82910597 96.14830780]
[-16.98900604 102.40206146]
[-29.81807137 92.18701935]
[-27.11886024 76.01153564]
[-11.66808891 70.51556396]
[0.63981295 81.35288239]
[15.43523216 83.82180023]
[30.23065186 86.29072571]
[45.02607346 88.75964355]
[59.82149124 91.22856140]
[79.80802917 70.02332306]
[105.28104401 69.28956604]
[111.30648041 55.55296326]
[117.33190918 41.81636429]
[123.35733795 28.07976341]
[123.96246338 18.82312775]
[129.74270630 14.05127335]
[136.14436340 0.48591632]
[135.97335815 -6.34878588]
[138.92111206 -11.41187286]
[143.29060364 -13.63546181]
[150.42982483 -26.82756805]
[157.56903076 -40.01967239]
[164.70823669 -53.21178055]
[164.47164917 -69.03121948]
[177.33390808 -76.54196930]
[184.47312927 -89.73407745]
[184.23652649 -105.55351257]
[197.09878540 -113.06427002]
[204.23800659 -126.25637817]
[211.37721252 -139.44848633]
[210.38708496 -157.77154541]
[225.55549622 -166.47830200]
[232.32850647 -179.86212158]
[227.16577148 -194.79937744]
[234.15245056 -208.97547913]
[249.14346313 -213.97999573]
[263.24490356 -206.84382629]
[268.09063721 -191.80075073]
[260.80578613 -177.77554321]
[245.71231079 -173.08911133]
[238.93931580 -159.70530701]
[242.41119385 -148.02735901]
[236.76434326 -136.77944946]
[224.56932068 -132.30926514]
[217.43009949 -119.11716461]
[210.29089355 -105.92505646]
[211.03813171 -91.04920959]
[197.66522217 -82.59486389]
[190.52601624 -69.40276337]
[191.27325439 -54.52691269]
[177.90034485 -46.07257080]
[170.76113892 -32.88046265]
[163.62193298 -19.68835640]
[156.48271179 -6.49625063]
[149.70971680 6.88756275]
[143.30807495 20.45292091]
[137.09394836 34.10519409]
[131.06851196 47.84179306]
[125.04307556 61.57839584]
[119.01764679 75.31499481]
[128.85127258 88.22612762]
[130.85874939 104.33102417]
[124.49552155 119.26109314]
[133.70870972 131.09820557]
[148.29077148 137.23612976]
[150.00221252 152.03208923]
[159.21539307 163.86918640]
[168.42858887 175.70629883]
[177.64178467 187.54341125]
[186.85496521 199.38050842]
[202.53289795 202.78376770]
[209.51773071 217.22647095]
[202.45129395 231.62942505]
[186.75436401 234.94390869]
[174.46826172 224.62733459]
[175.01786804 208.59370422]
[165.80467224 196.75659180]
[156.59147644 184.91949463]
[147.37829590 173.08238220]
[138.16510010 161.24526978]
[124.24202728 155.95401001]
[121.87160492 140.31138611]
[112.65841675 128.47428894]
[107.43563080 132.82035828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[40 89]
[41 88]
[42 87]
[43 86]
[45 85]
[46 84]
[49 83]
[50 82]
[51 81]
[52 80]
[54 78]
[55 77]
[57 75]
[58 74]
[59 73]
[61 70]
[62 69]
[92 112]
[93 111]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
