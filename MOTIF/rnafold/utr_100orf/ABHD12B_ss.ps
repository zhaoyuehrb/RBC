%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACACGGCGCGGGAUGGACGCGCAGGACUGCCAGGCGGCCGCAUCGCCCGAGCCGCCCGGGCCCCCAGCCCGUAGCUGCGUGGCCGCCUGGUGGGACAUGGUCGACCGCAACC\
) } def
/len { sequence length } bind def

/coor [
[71.89861298 151.82304382]
[69.47188568 137.02064514]
[62.50455856 134.24461365]
[64.66354370 149.08842468]
[52.88784790 158.37997437]
[38.95331573 152.82760620]
[36.79465866 137.98374939]
[48.56990814 128.69253540]
[41.60258484 125.91650391]
[29.66118813 134.99411011]
[17.71979141 144.07173157]
[5.77839565 153.14933777]
[-6.16300011 162.22695923]
[-6.73484039 177.85408020]
[-17.25611877 189.42286682]
[-32.75901031 191.47087097]
[-45.92352295 183.03111267]
[-50.53377914 168.08856201]
[-44.41295242 153.69865417]
[-30.45111275 146.65585327]
[-15.24061298 150.28555298]
[-3.29921746 141.20794678]
[8.64217854 132.13034058]
[20.58357430 123.05271912]
[32.52497101 113.97510529]
[44.27137756 88.19477081]
[63.40151215 73.77661896]
[83.10240936 71.55934143]
[97.40382385 79.02009583]
[102.62895966 91.18555450]
[106.64188385 76.73230743]
[110.65480804 62.27905655]
[114.66773987 47.82580566]
[118.68066406 33.37255859]
[122.69358826 18.91930771]
[126.70651245 4.46605778]
[130.71943665 -9.98719215]
[134.73236084 -24.44044113]
[138.74528503 -38.89369202]
[142.75820923 -53.34694290]
[146.77113342 -67.80019379]
[150.78405762 -82.25344086]
[154.79698181 -96.70668793]
[158.80990601 -111.15994263]
[147.79408264 -119.03907776]
[141.74676514 -132.82611084]
[143.71644592 -149.28108215]
[154.64630127 -163.70143127]
[153.02450562 -178.61351013]
[151.40272522 -193.52557373]
[149.78094482 -208.43765259]
[148.15914917 -223.34971619]
[135.06375122 -231.89633179]
[130.57524109 -246.87588501]
[136.81297302 -261.21551514]
[150.83164978 -268.14447021]
[166.01211548 -264.39111328]
[175.18659973 -251.72766113]
[174.02319336 -236.13342285]
[163.07122803 -224.97149658]
[164.69300842 -210.05943298]
[166.31478882 -195.14735413]
[167.93658447 -180.23529053]
[169.55836487 -165.32322693]
[176.52569580 -162.54718018]
[188.30105591 -171.83915710]
[190.46034241 -156.99511719]
[197.42767334 -154.21907043]
[208.86009216 -163.92987061]
[220.29252625 -173.64067078]
[231.72496033 -183.35145569]
[234.45487976 -199.16053772]
[248.58578491 -206.75639343]
[263.27764893 -200.31213379]
[267.26013184 -184.77124023]
[257.47824097 -172.05535889]
[241.43576050 -171.91903687]
[230.00332642 -162.20823669]
[218.57089233 -152.49743652]
[207.13845825 -142.78665161]
[197.30900574 -114.10501862]
[173.26316833 -107.14701843]
[169.25024414 -92.69376373]
[165.23731995 -78.24051666]
[161.22438049 -63.78726578]
[157.21145630 -49.33401489]
[153.19853210 -34.88076782]
[149.18560791 -20.42751694]
[145.17268372 -5.97426701]
[141.15975952 8.47898293]
[137.14683533 22.93223190]
[133.13391113 37.38548279]
[129.12098694 51.83873367]
[125.10806274 66.29198456]
[121.09513855 80.74523163]
[117.08221436 95.19847870]
[121.09513855 109.65173340]
[131.98506165 119.96722412]
[142.87500000 130.28271484]
[158.53221130 136.78565979]
[156.61773682 153.63116455]
[139.90058899 156.45481873]
[132.55950928 141.17265320]
[121.66957855 130.85716248]
[110.77964783 120.54166412]
[104.15330505 124.05472565]
[90.90062714 131.08085632]
[84.27428436 134.59391785]
[86.70101166 149.39631653]
[100.23991394 157.22142029]
[105.53281403 171.93600464]
[100.08057404 186.59231567]
[86.45757294 194.27006531]
[71.09616852 191.34405518]
[61.24956131 179.19587708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[68 80]
[69 79]
[70 78]
[71 77]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
