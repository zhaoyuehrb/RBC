%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCAGCGCCCCAGUCACGGGGAAUGCAGUGGUCCCCGACCCCUGGCGCCUCUGCGUGUCUGGGCUGGGCUUCCUCGCUCGCCUGCUCCACGGCCCCGACGCUCCUGGGCCGAGCCGGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[195.33084106 153.07855225]
[181.41398621 143.85606384]
[175.64096069 128.01438904]
[161.16023254 124.10177612]
[146.67950439 120.18914795]
[132.19879150 116.27652740]
[117.71805573 112.36390686]
[103.23733521 108.45127869]
[99.54900360 109.95333862]
[95.20652008 109.76379395]
[91.00746155 107.62553406]
[87.83469391 103.65979004]
[73.68983459 98.66749573]
[59.54497910 93.67520905]
[45.40012360 88.68291473]
[29.81156540 91.38614655]
[20.38499260 79.85405731]
[6.24013519 74.86177063]
[-7.90472317 69.86947632]
[-22.04958153 64.87718201]
[-37.63813782 67.58041382]
[-47.06470871 56.04832840]
[-61.20956802 51.05603409]
[-75.35442352 46.06374359]
[-93.31276703 49.89365005]
[-104.26447296 36.24269104]
[-118.53031921 31.60743523]
[-132.79617310 26.97218132]
[-147.11914062 22.51655769]
[-161.49696350 18.24126816]
[-176.93000793 21.72432327]
[-186.92410278 10.68043518]
[-201.30192566 6.40514660]
[-215.67974854 2.12985754]
[-230.05758667 -2.14543152]
[-246.96305847 -0.86434096]
[-252.87397766 -16.75450325]
[-239.24111938 -26.83326530]
[-225.78228760 -16.52325821]
[-211.40446472 -12.24796963]
[-197.02664185 -7.97268057]
[-182.64880371 -3.69739151]
[-168.24415588 -7.48624468]
[-157.22167969 3.86344123]
[-142.84385681 8.13873005]
[-135.45320129 7.01688862]
[-128.16091919 12.70633316]
[-113.89506531 17.34158707]
[-99.62921906 21.97684288]
[-88.64067841 16.75404739]
[-76.66969299 20.58453369]
[-70.36212921 31.91888428]
[-56.21727371 36.91117859]
[-42.07241821 41.90346909]
[-27.49559593 38.84315491]
[-17.05728722 50.73232269]
[-2.91242981 55.72461700]
[11.23242855 60.71690750]
[25.37728691 65.70920563]
[39.95410919 62.64888763]
[50.39241409 74.53805542]
[64.53726959 79.53034973]
[78.68212891 84.52264404]
[92.82698822 89.51493073]
[107.14995575 93.97055817]
[121.63068390 97.88317871]
[136.11140442 101.79579926]
[150.59213257 105.70842743]
[165.07286072 109.62104797]
[179.55357361 113.53366852]
[189.66400146 104.07236481]
[203.03004456 100.89597321]
[216.10757446 104.73603058]
[225.48367310 114.47810364]
[228.76719666 127.48242188]
[243.14501953 131.75770569]
[257.52285767 136.03298950]
[271.90066528 140.30828857]
[277.19430542 139.02874756]
[281.94360352 139.89582825]
[285.40133667 142.31721497]
[287.17803955 145.48533630]
[301.19296265 150.83151245]
[315.20791626 156.17768860]
[330.85946655 153.86705017]
[339.99325562 165.63238525]
[354.00820923 170.97856140]
[368.02313232 176.32473755]
[382.03805542 181.67091370]
[387.41305542 180.79376221]
[392.08355713 182.01614380]
[395.34906006 184.69110107]
[396.88204956 187.98405457]
[410.45446777 194.37074280]
[424.02685547 200.75743103]
[437.59927368 207.14411926]
[451.17166138 213.53080750]
[463.73764038 204.69950867]
[479.03717041 203.35035706]
[492.95474243 209.84626770]
[501.74661255 222.43986511]
[503.04779053 237.74354553]
[496.50830078 251.64068604]
[483.88720703 260.39303589]
[468.57952881 261.64624023]
[454.70294189 255.06321716]
[445.99020386 242.41474915]
[444.78497314 227.10321045]
[431.21258545 220.71652222]
[417.64016724 214.32983398]
[404.06777954 207.94314575]
[390.49536133 201.55645752]
[376.69189453 195.68585205]
[362.67694092 190.33967590]
[348.66201782 184.99349976]
[334.64709473 179.64732361]
[319.99795532 182.34034729]
[309.86172485 170.19262695]
[295.84680176 164.84645081]
[281.83184814 159.50025940]
[267.62539673 154.68611145]
[253.24755859 150.41082764]
[238.86972046 146.13552856]
[224.49189758 141.86024475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[12 64]
[13 63]
[14 62]
[15 61]
[17 59]
[18 58]
[19 57]
[20 56]
[22 54]
[23 53]
[24 52]
[26 49]
[27 48]
[28 47]
[29 45]
[30 44]
[32 42]
[33 41]
[34 40]
[35 39]
[75 124]
[76 123]
[77 122]
[78 121]
[82 120]
[83 119]
[84 118]
[86 116]
[87 115]
[88 114]
[89 113]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
