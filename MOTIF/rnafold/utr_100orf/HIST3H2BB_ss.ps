%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUUGGAGAGACUCAGCCAUCAUGCCAGACCCGUCCAAAUCGGCUCCUGCGCCCAAGAAGGGUUCUAAAAAGGCUGUCACCAAGGCACAGAAGAAGGACGGCAAGAAGCGCAAGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[283.65280151 287.13565063]
[273.04620361 276.52905273]
[262.43960571 265.92245483]
[251.83299255 255.31585693]
[240.83106995 245.11990356]
[229.44969177 235.34930420]
[218.06832886 225.57872009]
[206.68695068 215.80813599]
[191.99017334 213.38868713]
[186.55903625 198.52888489]
[175.17767334 188.75830078]
[172.26899719 188.90791321]
[169.12449646 187.84693909]
[166.23112488 185.47885132]
[164.10150146 181.89485168]
[163.20446777 177.37692261]
[152.86996460 166.50503540]
[142.53546143 155.63314819]
[132.20095825 144.76124573]
[121.86645508 133.88935852]
[105.84342957 140.74180603]
[88.07024384 140.25543213]
[71.81260681 132.22477722]
[60.18043900 117.85730743]
[55.53422928 99.60015869]
[59.01084137 80.72550964]
[45.22647476 74.81017303]
[30.69927216 80.43138885]
[16.80422974 74.23603058]
[11.53478050 60.35192490]
[-2.24958682 54.43658829]
[-17.98261261 56.10466003]
[-26.62718964 43.97533417]
[-40.41155624 38.05999756]
[-54.19592285 32.14465714]
[-68.07453918 39.35006714]
[-83.32640076 35.89828873]
[-92.75003815 23.41914177]
[-91.89590454 7.80490351]
[-81.16728973 -3.57186341]
[-65.62992096 -5.33939695]
[-52.62006760 3.33687878]
[-48.28058624 18.36029053]
[-34.49621964 24.27562904]
[-20.71185112 30.19096756]
[-5.96477556 28.09978867]
[3.66575098 40.65222168]
[17.45011902 46.56755829]
[31.14369774 40.82112503]
[45.20727158 46.62375641]
[51.14181137 61.02580261]
[64.92617798 66.94113922]
[76.78781891 57.75955200]
[74.51640320 42.93252563]
[72.24497986 28.10550117]
[69.97356415 13.27847576]
[57.94549561 2.66221118]
[58.89012146 -13.35300732]
[72.08280945 -22.48167610]
[87.40325928 -17.72105980]
[93.09893036 -2.72309637]
[84.80059052 11.00705910]
[87.07200623 25.83408356]
[89.34342194 40.66110992]
[91.61483765 55.48813248]
[103.50079346 55.39385986]
[114.85574341 58.37999344]
[124.90569305 64.16444397]
[132.98631287 72.27717590]
[138.58674622 82.09766388]
[141.38159180 92.90192413]
[141.24900818 103.91574860]
[138.27426147 114.37010193]
[132.73834229 123.55485535]
[143.07284546 134.42674255]
[153.40734863 145.29864502]
[163.74185181 156.17053223]
[174.07635498 167.04241943]
[184.94825745 177.37692261]
[196.32962036 187.14752197]
[211.84048462 190.26582336]
[216.45753479 204.42675781]
[227.83891296 214.19735718]
[239.22027588 223.96794128]
[250.60165405 233.73852539]
[255.96110535 234.73126221]
[259.94546509 237.46412659]
[262.11349487 241.08949280]
[262.43960571 244.70924377]
[273.04620361 255.31585693]
[283.65280151 265.92245483]
[294.25939941 276.52905273]
[294.32315063 261.52920532]
[302.15621948 248.73689270]
[315.48751831 241.86111450]
[330.45184326 242.89540100]
[342.71041870 251.53987122]
[348.70910645 265.28817749]
[346.70861816 280.15417480]
[337.28897095 291.82766724]
[323.18130493 296.92410278]
[308.47808838 293.96691895]
[316.73248291 306.49148560]
[324.98687744 319.01605225]
[337.57147217 317.93740845]
[349.33636475 322.32986450]
[358.03369141 331.28778076]
[362.03024292 343.03970337]
[360.61392212 355.29843140]
[354.11978149 365.70617676]
[361.72921753 378.63275146]
[376.25881958 386.23684692]
[376.66787720 402.63088989]
[362.53555298 410.95010376]
[348.39996338 402.63641357]
[348.80261230 386.24218750]
[341.19317627 373.31561279]
[323.64321899 372.49688721]
[309.92276001 361.27554321]
[305.56231689 343.93478394]
[312.46231079 327.27044678]
[304.20791626 314.74588013]
[295.95352173 302.22131348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 85]
[6 84]
[7 83]
[8 82]
[10 80]
[11 79]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[26 52]
[27 51]
[30 48]
[31 47]
[33 45]
[34 44]
[35 43]
[53 65]
[54 64]
[55 63]
[56 62]
[102 123]
[103 122]
[104 121]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
