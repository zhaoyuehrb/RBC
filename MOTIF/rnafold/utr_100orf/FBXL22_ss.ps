%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCAGGUCAGCCGUCCCCCGGCUGCAGCUGCACUCACAUGUGGCCACUGCUCACCAUGCACAUAACCCAGCUCAACCGGGAGUGCCUGCUGCACCUCUUCUCCUUCCUAGACAAGGACAGCAGGAAGAGCCUUGCCA\
) } def
/len { sequence length } bind def

/coor [
[86.91881561 246.48622131]
[72.82321930 238.82504272]
[70.16649628 223.00349426]
[80.98666382 211.15850830]
[81.65486908 196.17340088]
[82.32307434 181.18829346]
[82.99127197 166.20318604]
[83.65947723 151.21806335]
[84.32768250 136.23295593]
[77.56008911 133.00035095]
[64.02490997 126.53514862]
[57.25732040 123.30254364]
[46.02114105 133.23976135]
[34.78495789 143.17697144]
[23.54877663 153.11419678]
[12.31259632 163.05140686]
[9.89899921 178.91186523]
[-4.07736444 186.78846741]
[-18.89502525 180.63894653]
[-23.18714142 165.18070984]
[-13.66116810 152.27197266]
[2.37538147 151.81523132]
[13.61156273 141.87800598]
[24.84774399 131.94079590]
[36.08392334 122.00357819]
[47.32010651 112.06636810]
[50.47146606 97.40113831]
[44.30941010 83.72528076]
[38.14735794 70.04941559]
[31.98530769 56.37356186]
[25.82325554 42.69770050]
[10.64358521 32.34001160]
[12.98460865 14.98266697]
[6.51940203 1.44748652]
[0.05419498 -12.08769321]
[-6.41101170 -25.62287331]
[-12.87621880 -39.15805435]
[-19.34142494 -52.69323349]
[-36.84637833 -45.70539474]
[-59.73417282 -56.53062439]
[-71.40187073 -65.95743561]
[-83.06957245 -75.38425446]
[-94.73726654 -84.81106567]
[-106.50926208 -94.10731506]
[-118.38407898 -103.27184296]
[-130.36026001 -112.30351257]
[-142.43630981 -121.20121002]
[-158.78507996 -122.48564148]
[-165.60194397 -137.40081787]
[-155.87431335 -150.60327148]
[-139.60911560 -148.51147461]
[-133.53862000 -133.27726746]
[-121.46256256 -124.37957001]
[-114.15273285 -122.93255615]
[-109.21955109 -115.14666748]
[-97.34472656 -105.98213196]
[-90.06895447 -104.37262726]
[-85.31045532 -96.47875977]
[-73.64275360 -87.05194855]
[-61.97505951 -77.62513733]
[-50.30735779 -68.19832611]
[-43.19537354 -70.57942963]
[-48.91528702 -84.44602966]
[-59.61907578 -94.95454407]
[-56.24943542 -109.57116699]
[-42.02531433 -114.33293152]
[-30.53472328 -104.69102478]
[-32.75379562 -89.85692596]
[-28.97140312 -75.34163666]
[-21.85941696 -77.72274780]
[-18.21977997 -92.27448273]
[-28.86114502 -103.44430542]
[-31.75192642 -118.59841156]
[-25.96968842 -132.90118408]
[-13.35951900 -141.78865051]
[2.05472040 -142.42486572]
[15.35440254 -134.60681152]
[22.29564667 -120.82920074]
[20.66352844 -105.48841095]
[10.97884941 -93.47964478]
[-3.66804385 -88.63484192]
[-7.30768061 -74.08310699]
[-5.80624533 -59.15843964]
[0.65896147 -45.62326050]
[7.12416840 -32.08808136]
[13.58937550 -18.55290031]
[20.05458260 -5.01772022]
[26.51978874 8.51745987]
[37.85851669 12.87467861]
[43.33473206 24.16575813]
[39.49911499 36.53564835]
[45.66116714 50.21150970]
[51.82321930 63.88736725]
[57.98527145 77.56322479]
[64.14732361 91.23908234]
[89.32717133 69.52307129]
[116.91244507 78.09295654]
[122.98442841 101.86418915]
[136.72808838 107.87350464]
[150.47174072 113.88282776]
[164.21539307 119.89214325]
[177.95906067 125.90146637]
[191.70271301 131.91078186]
[205.44636536 137.92010498]
[223.65217590 135.41961670]
[233.55900574 149.86305237]
[247.43312073 155.56468201]
[261.36990356 161.11140442]
[275.36761475 166.50251770]
[289.36532593 171.89363098]
[303.36303711 177.28474426]
[318.55072021 172.11619568]
[331.98275757 180.88883972]
[333.35528564 196.87307739]
[321.61538696 207.80715942]
[305.76889038 205.30339050]
[297.97192383 191.28245544]
[283.97421265 185.89134216]
[269.97650146 180.50022888]
[255.97879028 175.10910034]
[248.54638672 175.64472961]
[241.73149109 169.43881226]
[227.85736084 163.73716736]
[216.52522278 168.11148071]
[204.88989258 163.41078186]
[199.43704224 151.66375732]
[185.69338989 145.65443420]
[171.94973755 139.64512634]
[158.20608521 133.63580322]
[144.46241760 127.62648010]
[130.71876526 121.61716461]
[116.97511292 115.60784149]
[111.79644775 127.56570435]
[99.31278992 136.90116882]
[98.64458466 151.88627625]
[97.97638702 166.87138367]
[97.30818176 181.85649109]
[96.63997650 196.84159851]
[95.97177887 211.82670593]
[105.69473267 224.58773804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 139]
[5 138]
[6 137]
[7 136]
[8 135]
[9 134]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[27 95]
[28 94]
[29 93]
[30 92]
[31 91]
[33 88]
[34 87]
[35 86]
[36 85]
[37 84]
[38 83]
[40 61]
[41 60]
[42 59]
[43 58]
[44 56]
[45 55]
[46 53]
[47 52]
[70 82]
[71 81]
[98 132]
[99 131]
[100 130]
[101 129]
[102 128]
[103 127]
[104 126]
[106 123]
[107 122]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
