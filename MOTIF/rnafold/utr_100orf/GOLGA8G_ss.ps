%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCACAGCUACCUGGUAGGUGACUGGAGGUGUUGAUCAGUGCUUGGUGGGAUUUUGCUGAUGUGGCCCCAAGCCCGCCUCCCUCCCCACCCUGCGAUGGCAGAAGAAACUCGACAAAGUAAAUUGGCAGCAGCCAAGAGAAAGUUAAAAGAAUAUUGGC\
) } def
/len { sequence length } bind def

/coor [
[201.23406982 211.77438354]
[206.26863098 203.72502136]
[195.01887512 193.80317688]
[183.76911926 183.88133240]
[172.51936340 173.95948792]
[158.81788635 179.85311890]
[143.85470581 179.21076965]
[130.59999084 172.10630798]
[121.70803070 159.90165710]
[118.98579407 144.98602295]
[123.02591705 130.30818176]
[111.77616119 120.38633728]
[98.77443695 124.64881134]
[84.93356323 120.96269226]
[74.91269684 109.84922791]
[72.46897888 94.43653870]
[79.07909393 79.59569550]
[66.28572083 71.76438141]
[53.49234009 63.93306351]
[37.68273544 63.32724380]
[30.86730003 50.08341217]
[18.07392311 42.25209808]
[9.07380390 40.42609024]
[5.11150265 34.14455795]
[-7.52857065 26.06813812]
[-20.30146790 28.07420731]
[-30.67386627 21.04824257]
[-33.36961365 9.22511959]
[-45.85168839 0.90659600]
[-58.33375931 -7.41192770]
[-70.81583405 -15.73045158]
[-83.29790497 -24.04897499]
[-95.77998352 -32.36750031]
[-108.26205444 -40.68602371]
[-105.02445984 -26.03959084]
[-109.85150146 -11.83748817]
[-121.34364319 -2.19742918]
[-136.16888428 0.08558069]
[-150.02885437 -5.65038729]
[-158.90502930 -17.74226570]
[-160.22387695 -32.68417358]
[-153.60302734 -46.14390564]
[-140.96209717 -54.21898651]
[-125.96853638 -54.56875992]
[-137.02499390 -64.70557404]
[-148.08143616 -74.84238434]
[-159.13787842 -84.97920227]
[-170.19432068 -95.11601257]
[-181.25077820 -105.25282288]
[-189.73448181 -108.76895142]
[-192.42022705 -115.69313049]
[-203.27925110 -126.04114532]
[-216.84803772 -119.28362274]
[-231.91006470 -117.57750702]
[-246.64656067 -121.12882233]
[-259.27798462 -129.50872803]
[-268.27905273 -141.70530701]
[-272.56283569 -156.24577332]
[-271.61206055 -171.37428284]
[-265.54150391 -185.26399231]
[-255.08424377 -196.23767090]
[-241.50303650 -202.97016907]
[-226.43788147 -204.64852905]
[-211.70796204 -201.07006836]
[-199.09199524 -192.66690063]
[-190.11341858 -180.45375061]
[-185.85644531 -165.90541077]
[-186.83511353 -150.77868652]
[-192.93124390 -136.90017700]
[-182.07220459 -126.55216217]
[-171.11396790 -116.30927277]
[-160.05751038 -106.17246246]
[-149.00106812 -96.03564453]
[-137.94462585 -85.89883423]
[-126.88817596 -75.76202393]
[-115.83172607 -65.62520599]
[-105.55007172 -63.54797745]
[-99.94353485 -53.16809464]
[-87.46145630 -44.84957123]
[-74.97938538 -36.53104782]
[-62.49731064 -28.21252441]
[-50.01523590 -19.89400101]
[-37.53316498 -11.57547760]
[-25.05109024 -3.25695419]
[-7.52323341 -3.09837794]
[0.54784882 13.42806530]
[13.18792248 21.50448418]
[25.90523720 29.45872116]
[38.69861603 37.29003525]
[53.59315109 37.33570862]
[61.32365417 51.13968658]
[74.11703491 58.97100449]
[86.91040802 66.80231476]
[101.70957184 64.35591125]
[111.30207825 52.82405853]
[120.89459229 41.29219818]
[130.48710632 29.76034355]
[132.73081970 13.51541138]
[148.02108765 7.58753204]
[160.62858582 18.07479858]
[157.58381653 34.18881226]
[142.01896667 39.35285568]
[132.42645264 50.88471222]
[122.83393860 62.41656876]
[113.24142456 73.94842529]
[124.77476501 90.92836761]
[121.69801331 109.13658142]
[132.94776917 119.05843353]
[147.00575256 113.21596527]
[162.14463806 114.05314636]
[175.36470032 121.35043335]
[184.06967163 133.61357117]
[186.57666016 148.37921143]
[182.44120789 162.70973206]
[193.69096375 172.63157654]
[204.94071960 182.55342102]
[216.19047546 192.47526550]
[234.21777344 180.10322571]
[255.02210999 173.41699219]
[276.85791016 172.97036743]
[297.89511108 178.79388428]
[316.37255859 190.39291382]
[330.74545288 206.78956604]
[339.81442261 226.60522461]
[342.82574463 248.17639160]
[339.53384399 269.69439697]
[353.37817383 275.46801758]
[367.22250366 281.24163818]
[381.06680298 287.01525879]
[394.91113281 292.78887939]
[411.09692383 290.15203857]
[421.26242065 303.02041626]
[414.95025635 318.15609741]
[398.65383911 319.98880005]
[389.13751221 306.63320923]
[375.29318237 300.85958862]
[361.44888306 295.08596802]
[347.60455322 289.31234741]
[333.76022339 283.53869629]
[328.76980591 291.56243896]
[322.81121826 298.89825439]
[315.97824097 305.42996216]
[308.37847900 311.05407715]
[300.13174438 315.68139648]
[291.36801147 319.23840332]
[282.22558594 321.66854858]
[272.84878540 322.93295288]
[263.38562012 323.01123047]
[253.98559570 321.90170288]
[244.79722595 319.62139893]
[235.96575928 316.20593262]
[227.63087463 311.70883179]
[219.92443848 306.20071411]
[212.96844482 299.76824951]
[206.87307739 292.51269531]
[201.73497009 284.54833984]
[197.63565063 276.00079346]
[194.64027405 267.00485229]
[192.79661560 257.70245361]
[192.13420105 248.24047852]
[192.66398621 238.76834106]
[194.37802124 229.43569946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 117]
[3 116]
[4 115]
[5 114]
[11 108]
[12 107]
[17 93]
[18 92]
[19 91]
[21 89]
[22 88]
[24 87]
[25 86]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[34 78]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[51 70]
[52 69]
[94 105]
[95 104]
[96 103]
[97 102]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
