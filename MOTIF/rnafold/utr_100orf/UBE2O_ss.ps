%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCCCGCGCCUCGUUCGCCGCCGCUGUCGCCGCCGCCGCCCGAGACUCGCGCAGAGCAGUUAUGGCGGAUCCCGCAGCCCCCACGCCCGCAGCUCCCGCUCCAGCCCAGGCCCCGGCUCCAGCCCCGGAGGCAGUCCCGGCCCCAGCCGCAGCCCCCGUCC\
) } def
/len { sequence length } bind def

/coor [
[134.50639343 193.25830078]
[148.72856140 198.02218628]
[141.14675903 185.07937622]
[133.56497192 172.13656616]
[125.98316956 159.19375610]
[118.40136719 146.25094604]
[110.81957245 133.30813599]
[95.28554535 134.70257568]
[80.68653870 129.21447754]
[69.91796875 117.93227386]
[55.68761444 122.67539215]
[41.45726395 127.41850281]
[27.22691536 132.16162109]
[13.18624496 137.43983459]
[-0.64463454 143.24559021]
[-14.47551346 149.05134583]
[-28.30639267 154.85710144]
[-31.85471916 165.19773865]
[-40.34923172 171.72445679]
[-50.81576538 172.45837402]
[-59.75471115 167.39759827]
[-73.79537964 172.67581177]
[-83.99034882 184.77429199]
[-98.62625885 182.01031494]
[-112.66692352 187.28852844]
[-122.86190033 199.38700867]
[-137.49780273 196.62303162]
[-151.53846741 201.90124512]
[-156.56103516 216.71029663]
[-169.95437622 224.78199768]
[-185.39456177 222.30516052]
[-195.59121704 210.44926453]
[-195.72976685 194.81228638]
[-185.74482727 182.77755737]
[-170.35096741 180.02748108]
[-156.81668091 187.86058044]
[-142.77601624 182.58236694]
[-133.58532715 170.86141968]
[-117.94514465 173.24786377]
[-103.90447235 167.96965027]
[-94.71378326 156.24870300]
[-79.07359314 158.63513184]
[-65.03292847 153.35691833]
[-53.93937683 137.55093384]
[-34.11214828 141.02621460]
[-20.28126717 135.22045898]
[-6.45038891 129.41470337]
[7.38048983 123.60895538]
[8.55925751 121.01943207]
[10.85750580 118.75183868]
[14.15379429 117.24350739]
[18.16772842 116.87814331]
[22.48380089 117.93126678]
[36.71414948 113.18815613]
[50.94449997 108.44503784]
[65.17485046 103.70192719]
[69.95053864 82.01319122]
[86.80995941 67.55746460]
[84.26738739 52.77452469]
[81.72481537 37.99158478]
[79.18223572 23.20864296]
[69.21770477 10.91967964]
[74.68570709 -2.93493128]
[72.14313507 -17.71787071]
[62.86693573 -23.50334358]
[58.42039871 -33.24926758]
[60.06192780 -43.61229706]
[67.00541687 -51.18225098]
[65.02407074 -66.05081940]
[63.04272842 -80.91938019]
[61.06138229 -95.78794861]
[46.25186920 -99.02121735]
[33.44297791 -107.12727356]
[24.18144989 -119.12727356]
[19.58565712 -133.57214355]
[20.21056747 -148.71762085]
[25.98071671 -162.73480225]
[36.19933319 -173.93103027]
[49.63246536 -180.95433044]
[64.65800476 -182.95658875]
[79.46153259 -179.69602966]
[92.25546265 -171.56639099]
[101.49486542 -159.54934692]
[106.06402588 -145.09602356]
[105.41120911 -129.95172119]
[99.61523438 -115.94521332]
[89.37600708 -104.76782227]
[75.92994690 -97.76929474]
[77.91129303 -82.90072632]
[79.89263916 -68.03215790]
[81.87398529 -53.16359329]
[94.77634430 -38.79608154]
[86.92607117 -20.26044464]
[89.46864319 -5.47750521]
[99.25131989 5.75408411]
[93.96517944 20.66606903]
[96.50775146 35.44900894]
[99.05033112 50.23194885]
[101.59290314 65.01489258]
[112.20004272 67.17235565]
[121.64172363 72.46582031]
[129.01599121 80.38960266]
[142.95426941 74.84662628]
[156.89253235 69.30364990]
[163.21174622 55.06619263]
[177.42610168 49.64337921]
[190.96040344 55.75552750]
[204.89866638 50.21255112]
[218.83694458 44.66957474]
[232.77520752 39.12659454]
[236.48075867 24.05846596]
[248.35713196 14.07190609]
[263.83761597 13.00695038]
[276.96966553 21.27309799]
[282.70370483 35.69184494]
[278.83493042 50.71888733]
[266.85092163 60.57602692]
[251.35978699 61.47298431]
[238.31819153 53.06486511]
[224.37991333 58.60784531]
[210.44165039 64.15082550]
[196.50337219 69.69380188]
[190.86293030 83.43137360]
[176.80650330 89.25129700]
[162.43551636 83.24192047]
[148.49723816 88.78489685]
[134.55897522 94.32788086]
[134.89710999 102.94729614]
[133.11813354 111.38790894]
[129.32994080 119.13764191]
[123.76238251 125.72634125]
[131.34417725 138.66914368]
[138.92597961 151.61195374]
[146.50778198 164.55476379]
[154.08956909 177.49757385]
[161.67137146 190.44038391]
[171.58151245 196.52468872]
[173.18179321 206.73271179]
[182.84774780 218.20307922]
[198.35287476 219.69606018]
[207.99212646 231.46633911]
[206.47325134 246.23890686]
[216.13920593 257.70925903]
[225.80516052 269.17962646]
[235.47111511 280.64999390]
[251.06861877 285.71453857]
[254.21623230 301.80877686]
[241.67594910 312.37634277]
[226.34814453 306.54623413]
[224.00074768 290.31594849]
[214.33479309 278.84558105]
[204.66883850 267.37521362]
[195.00288391 255.90486145]
[180.18663025 254.89775085]
[170.22056580 243.40286255]
[171.37739563 227.86903381]
[161.71142578 216.39866638]
[161.44955444 231.39639282]
[154.00578308 244.41906738]
[141.21560669 252.25559998]
[126.23279572 252.97363281]
[112.75183105 246.39613342]
[104.09683228 234.14497375]
[102.40194702 219.24102783]
[108.08510590 205.35932922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 136]
[3 135]
[4 134]
[5 133]
[6 132]
[7 131]
[10 56]
[11 55]
[12 54]
[13 53]
[14 48]
[15 47]
[16 46]
[17 45]
[21 43]
[22 42]
[24 40]
[25 39]
[27 37]
[28 36]
[58 99]
[59 98]
[60 97]
[61 96]
[63 94]
[64 93]
[68 91]
[69 90]
[70 89]
[71 88]
[102 127]
[103 126]
[104 125]
[107 122]
[108 121]
[109 120]
[110 119]
[138 157]
[139 156]
[142 153]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
