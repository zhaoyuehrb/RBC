%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAAUCUAGAGGAAGUUGACAAAGGUGCCACAGCAGCACAGCACAGUAUGUGGUGGAGAGUUCUCAGCUUGCUGGCAUGGUUCCCCUUGCAAGAGGCCUCUCUGACUAACCACACAGAAACCAUCACCGUGGAGGAAGGCCAGACGC\
) } def
/len { sequence length } bind def

/coor [
[382.55621338 474.09906006]
[368.07476807 470.18914795]
[356.12652588 461.12057495]
[348.46542358 448.22451782]
[346.21612549 433.39413452]
[349.70877075 418.80642700]
[358.43069458 406.60281372]
[371.10150146 398.57473755]
[385.86123657 395.90066528]
[400.54559326 398.97421265]
[390.05062866 388.25711060]
[379.55569458 377.54000854]
[369.06072998 366.82293701]
[358.56579590 356.10583496]
[342.44363403 359.03143311]
[327.59530640 351.71917725]
[319.93377686 336.86123657]
[322.64044189 320.19683838]
[311.92333984 309.70190430]
[301.20626831 299.20693970]
[294.18023682 296.75793457]
[290.37750244 288.37820435]
[279.88256836 277.66110229]
[269.38760376 266.94403076]
[254.95471191 263.26422119]
[250.82733154 247.99089050]
[240.33238220 237.27378845]
[223.22094727 233.50869751]
[218.71691895 215.68545532]
[207.99983215 205.19050598]
[197.28274536 194.69555664]
[186.56564331 184.20060730]
[175.52418518 174.04747009]
[164.16926575 164.24615479]
[152.81434631 154.44485474]
[141.45941162 144.64353943]
[130.10449219 134.84222412]
[118.64755249 125.16036224]
[107.08985138 115.59900665]
[89.20963287 119.71226501]
[72.47193146 103.95012665]
[59.17887878 97.00067902]
[43.36445618 97.46394348]
[35.67016220 84.71062469]
[22.37710953 77.76118469]
[9.08405590 70.81174469]
[-4.20899773 63.86230087]
[-21.04693794 61.88238144]
[-23.80560112 45.15437698]
[-8.49500751 37.87275314]
[2.74044299 50.56924820]
[16.03349686 57.51868820]
[29.32654953 64.46813202]
[42.61960220 71.41757202]
[57.48321915 70.45723724]
[66.12831879 83.70762634]
[79.42137146 90.65706635]
[89.80352020 79.83066559]
[82.30352020 66.84028625]
[74.80352020 53.84990311]
[60.33863449 46.12338638]
[60.06805420 29.72647285]
[74.27013397 21.52689934]
[88.33498383 29.95968628]
[87.79389954 46.34990311]
[95.29389954 59.34028625]
[102.79389954 72.33066559]
[118.34141541 87.01547241]
[116.65120697 104.04130554]
[128.20890808 113.60266876]
[136.87744141 116.69084930]
[139.90579224 123.48730469]
[151.26072693 133.28862000]
[162.61564636 143.08992004]
[173.97058105 152.89123535]
[185.32550049 162.69253540]
[190.58514404 163.68684387]
[194.51075745 166.36373901]
[196.67991638 169.91519165]
[197.06059265 173.48352051]
[207.77769470 183.97846985]
[218.49478149 194.47341919]
[229.21186829 204.96836853]
[242.13658142 205.62501526]
[250.85026550 214.64250183]
[251.04946899 226.77883911]
[261.54443359 237.49594116]
[276.72799683 241.94227600]
[280.10470581 256.44906616]
[290.59963989 267.16616821]
[301.09460449 277.88323975]
[311.70120239 288.48983765]
[322.41830444 298.98480225]
[333.13537598 309.47973633]
[346.55523682 306.17367554]
[359.74697876 309.91729736]
[369.27789307 319.62478638]
[372.72332764 332.67327881]
[369.28286743 345.61090088]
[379.77783203 356.32797241]
[390.27276611 367.04507446]
[400.76773071 377.76214600]
[411.26266479 388.47924805]
[423.21063232 397.54824829]
[436.35522461 404.77453613]
[449.49981689 412.00085449]
[465.32046509 411.86889648]
[472.74600220 424.78054810]
[485.89059448 432.00683594]
[500.89511108 427.82330322]
[514.12268066 435.33905029]
[518.01855469 449.66934204]
[531.16320801 456.89566040]
[549.52752686 456.05596924]
[558.07769775 471.34884644]
[571.37072754 478.29827881]
[584.66375732 485.24774170]
[596.57232666 475.75527954]
[611.31384277 471.93344116]
[626.33435059 474.44433594]
[639.03143311 482.85293579]
[647.20520020 495.70245361]
[649.43951416 510.76657104]
[645.34729004 525.43536377]
[635.63751221 537.16735840]
[621.99243164 543.92993164]
[606.77618408 544.55145264]
[592.62512207 538.92419434]
[581.99090576 528.02313232]
[576.71600342 513.73693848]
[577.71435547 498.54077148]
[564.42126465 491.59133911]
[551.12823486 484.64190674]
[539.45227051 487.95898438]
[528.30114746 482.22354126]
[523.93688965 470.04025269]
[510.79226685 462.81396484]
[496.60525513 467.20309448]
[483.17184448 460.06182861]
[478.66430664 445.15145874]
[465.51968384 437.92514038]
[450.63922119 438.57397461]
[442.27352905 425.14544678]
[429.12890625 417.91912842]
[415.98431396 410.69284058]
[422.89279175 424.00723267]
[424.28741455 438.94226074]
[419.96347046 453.30551147]
[410.55569458 464.98855591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[18 94]
[19 93]
[20 92]
[22 91]
[23 90]
[24 89]
[26 87]
[27 86]
[29 83]
[30 82]
[31 81]
[32 80]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 70]
[39 69]
[41 57]
[42 56]
[44 54]
[45 53]
[46 52]
[47 51]
[58 67]
[59 66]
[60 65]
[104 145]
[105 144]
[106 143]
[108 141]
[109 140]
[112 137]
[113 136]
[115 133]
[116 132]
[117 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
