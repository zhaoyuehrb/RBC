%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUGGCAGCCCUAAACACAGCAUGGCAACUCAUCUACUCACUCAUGAAAGAUUAAAAAAUGGAAACCAACGUAUUUCAUCUUAUGCUCUGCGUCACUUCUGCUCGGACUCAUAAAUCCACGUCUCUUUGCUUUGGCCACUUCAACUCAUAUCCAAGCC\
) } def
/len { sequence length } bind def

/coor [
[380.29061890 342.28140259]
[371.28549194 330.28524780]
[362.28036499 318.28909302]
[353.27520752 306.29293823]
[344.27008057 294.29678345]
[335.26495361 282.30065918]
[324.40283203 271.95587158]
[311.98181152 263.54641724]
[299.56082153 255.13697815]
[287.13983154 246.72753906]
[275.48107910 254.29528809]
[261.77359009 256.84667969]
[248.08787537 253.96267700]
[236.50402832 246.04772949]
[228.79560852 234.27355957]
[226.15808105 220.40570068]
[229.02354431 206.53886414]
[216.76899719 197.88865662]
[201.90924072 196.87022400]
[195.09686279 182.59080505]
[182.84231567 173.94059753]
[170.58776855 165.29039001]
[167.02357483 165.55105591]
[163.15771484 164.06619263]
[159.82687378 160.71412659]
[157.88948059 155.75817871]
[146.16200256 146.40583801]
[134.43453979 137.05348206]
[122.70706177 127.70114136]
[108.71852112 136.72259521]
[91.32587433 138.70826721]
[74.04119110 132.49813843]
[60.68751144 118.66401672]
[54.55951691 99.53218079]
[39.71986008 97.34479523]
[24.88020706 95.15740967]
[10.04055214 92.97002411]
[-0.79019111 100.03475189]
[-13.13225269 97.87460327]
[-20.43528366 88.19169617]
[-35.22943497 85.71517944]
[-50.02358246 83.23866272]
[-65.18669128 89.48463440]
[-78.01051331 79.26300812]
[-75.30299377 63.08890915]
[-59.84940338 57.60087204]
[-47.54706573 68.44451141]
[-32.75291824 70.92102814]
[-17.95876694 73.39754486]
[-1.90505421 66.36263275]
[12.22793674 78.13037109]
[27.06759071 80.31775665]
[41.90724564 82.50514221]
[56.74690247 84.69252777]
[61.42307281 78.82878876]
[46.59059906 76.59324646]
[41.11030960 62.63020706]
[50.46244049 50.90256119]
[65.29496002 53.13782883]
[70.77542114 67.10131836]
[75.45159149 61.23757935]
[70.01692200 47.25672531]
[64.58224487 33.27587128]
[59.14756775 19.29501534]
[53.71289062 5.31416130]
[48.27821350 -8.66669273]
[42.70739365 -22.59386063]
[37.00096130 -36.46601105]
[23.69166565 -46.04696655]
[25.60335922 -62.33430481]
[40.76945877 -68.57301331]
[53.58837891 -58.34524155]
[50.87311554 -42.17244720]
[56.57954788 -28.30029297]
[62.06019974 -23.28538513]
[62.25906754 -14.10136890]
[67.69374847 -0.12051468]
[73.12841797 13.86034012]
[78.56309509 27.84119415]
[83.99777222 41.82204819]
[89.43244934 55.80290222]
[109.44821930 57.52002335]
[125.90695953 67.46051788]
[135.80758667 82.92995453]
[137.74194336 100.32838440]
[132.05940247 115.97366333]
[143.78688049 125.32601166]
[155.51435852 134.67835999]
[167.24182129 144.03070068]
[179.23797607 153.03584290]
[191.49252319 161.68605042]
[203.74707031 170.33624268]
[219.48335266 171.97338867]
[225.41918945 185.63410950]
[237.67373657 194.28430176]
[251.80700684 186.27111816]
[267.96130371 185.21507263]
[282.90985107 191.27642822]
[293.68881226 203.19879150]
[298.18481445 218.56925964]
[295.54928589 234.30653381]
[307.97027588 242.71598816]
[320.39126587 251.12544250]
[332.81228638 259.53488159]
[336.61657715 245.34039307]
[349.11367798 239.32315063]
[361.06768799 244.54635620]
[375.47128296 240.35867310]
[389.87487793 236.17100525]
[395.00134277 221.52522278]
[407.77642822 212.71748352]
[423.28790283 213.13455200]
[435.57125854 222.61605835]
[439.90328979 237.51615906]
[434.61825562 252.10546875]
[421.74835205 260.77410889]
[406.24230957 260.18878174]
[394.06253052 250.57458496]
[379.65896606 254.76226807]
[365.25537109 258.94995117]
[359.61245728 269.38040161]
[347.26110840 273.29550171]
[356.26623535 285.29165649]
[365.27136230 297.28781128]
[374.27648926 309.28396606]
[383.28161621 321.28012085]
[392.28677368 333.27624512]
[405.78125000 333.63439941]
[416.44030762 341.59622192]
[420.49212646 354.06378174]
[416.66555786 366.39840698]
[425.43490601 378.56796265]
[434.20425415 390.73754883]
[442.97360229 402.90710449]
[450.56933594 408.07339478]
[451.79260254 415.40078735]
[460.32284546 427.73913574]
[474.98150635 423.87921143]
[490.07604980 425.26873779]
[503.78369141 431.73989868]
[514.44921875 442.51126099]
[520.78466797 456.28216553]
[522.02502441 471.38970947]
[518.02050781 486.00955200]
[509.25469971 498.37628174]
[496.78607178 506.99655151]
[482.12030029 510.82946777]
[467.02835083 509.41213989]
[453.33264160 502.91571045]
[442.68701172 492.12469482]
[436.37695312 478.34216309]
[435.16442871 463.23236084]
[439.19586182 448.61993408]
[447.98446655 436.26937866]
[439.45422363 423.93099976]
[430.80404663 411.67645264]
[422.03466797 399.50689697]
[413.26531982 387.33731079]
[404.49597168 375.16775513]
[387.81646729 373.20147705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[7 104]
[8 103]
[9 102]
[10 101]
[17 95]
[18 94]
[20 92]
[21 91]
[22 90]
[26 89]
[27 88]
[28 87]
[29 86]
[34 54]
[35 53]
[36 52]
[37 51]
[40 49]
[41 48]
[42 47]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 74]
[68 73]
[107 120]
[108 119]
[109 118]
[131 159]
[132 158]
[133 157]
[134 156]
[136 155]
[137 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
