%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGCUGGACGCGCGCUCCAAGAUGGCGGCGAACGUGUUCCCGUUCCGCGACGCCCGUGCCGCACCGGACCCAGUGCUGGAGGCCGGCCCGGUGGCACACGGGCCACUGCCGGUACCGCUGG\
) } def
/len { sequence length } bind def

/coor [
[77.40831757 126.35562134]
[68.62542725 114.85391998]
[54.00150681 118.19173431]
[39.37758636 121.52954865]
[24.75366783 124.86736298]
[10.12975025 128.20516968]
[-4.49416876 131.54298401]
[-19.11808777 134.88079834]
[-30.85054970 145.49493408]
[-44.98043442 140.78370667]
[-59.60435104 144.12152100]
[-74.22827148 147.45933533]
[-88.80944061 150.97920227]
[-103.34560394 154.68055725]
[-117.88175964 158.38192749]
[-132.41792297 162.08328247]
[-146.85728455 166.14588928]
[-161.19087219 170.56721497]
[-175.52447510 174.98855591]
[-189.85806274 179.40988159]
[-204.13542175 184.00955200]
[-218.35432434 188.78684998]
[-232.57324219 193.56414795]
[-245.66191101 204.34019470]
[-259.64013672 194.74613953]
[-254.29057312 178.65829468]
[-237.35054016 179.34523010]
[-223.13163757 174.56793213]
[-208.91271973 169.79063416]
[-203.51512146 164.62135315]
[-194.27938843 165.07627869]
[-179.94580078 160.65495300]
[-165.61219788 156.23362732]
[-151.27861023 151.81230164]
[-148.25396729 147.98745728]
[-142.75048828 146.08807373]
[-136.11927795 147.54713440]
[-121.58312225 143.84576416]
[-107.04696655 140.14440918]
[-92.51080322 136.44303894]
[-86.74199677 131.69157410]
[-77.56608582 132.83541870]
[-62.94216537 129.49760437]
[-48.31824875 126.15979767]
[-37.63178635 115.78440094]
[-22.45590210 120.25688171]
[-7.83198261 116.91906738]
[6.79193592 113.58125305]
[21.41585541 110.24343872]
[36.03977203 106.90562439]
[50.66369247 103.56781769]
[65.28761292 100.23000336]
[70.66159821 81.44573212]
[85.32958984 68.53919983]
[104.64496613 65.59902191]
[122.48888397 73.55661011]
[134.44587708 64.49954224]
[146.40286255 55.44247437]
[158.35984802 46.38541031]
[170.31683350 37.32834244]
[182.27381897 28.27127647]
[194.23080444 19.21421051]
[194.05500793 3.81046891]
[202.87995911 -8.59813499]
[217.15058899 -13.37445164]
[231.32759094 -8.88551044]
[243.28457642 -17.94257736]
[255.24156189 -26.99964333]
[267.19854736 -36.05670929]
[279.15554810 -45.11377335]
[291.11251831 -54.17084122]
[276.37118530 -56.94448090]
[266.70046997 -68.41082001]
[266.45318604 -83.40878296]
[275.74066162 -95.18768311]
[290.38256836 -98.44577026]
[303.78845215 -91.71655273]
[309.92422485 -78.02889252]
[306.02731323 -63.54241180]
[319.37536621 -70.38557434]
[332.72344971 -77.22872925]
[346.07153320 -84.07189178]
[359.41961670 -90.91505432]
[370.75601196 -103.52149963]
[386.00799561 -96.11795044]
[383.11596680 -79.41249084]
[366.26275635 -77.56697083]
[352.91470337 -70.72381592]
[339.56661987 -63.88065338]
[326.21853638 -57.03749466]
[312.87045288 -50.19433594]
[300.16958618 -42.21385193]
[288.21261597 -33.15678787]
[276.25561523 -24.09972191]
[264.29864502 -15.04265499]
[252.34164429 -5.98558903]
[240.38465881 3.07147741]
[240.86611938 17.93439102]
[232.40325928 30.37802315]
[218.06828308 35.51239395]
[203.28787231 31.17119789]
[191.33088684 40.22826385]
[179.37390137 49.28533173]
[167.41691589 58.34239578]
[155.45993042 67.39945984]
[143.50294495 76.45652771]
[131.54594421 85.51359558]
[134.07913208 93.39582825]
[134.67373657 101.65373230]
[133.29591370 109.81756592]
[130.02406311 117.42292786]
[125.04428864 124.03718567]
[118.63986969 129.28408813]
[123.77017212 143.37948608]
[128.90048218 157.47486877]
[134.03077698 171.57026672]
[139.16108704 185.66564941]
[150.26008606 198.48159790]
[141.01750183 212.69465637]
[124.80129242 207.74783325]
[125.06568909 190.79595947]
[119.93538666 176.70056152]
[114.80508423 162.60517883]
[109.67478180 148.50978088]
[104.54447937 134.41439819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[10 44]
[11 43]
[12 42]
[13 40]
[14 39]
[15 38]
[16 37]
[17 34]
[18 33]
[19 32]
[20 31]
[21 29]
[22 28]
[23 27]
[56 107]
[57 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[66 97]
[67 96]
[68 95]
[69 94]
[70 93]
[71 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
[113 125]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
