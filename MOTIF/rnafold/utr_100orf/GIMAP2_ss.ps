%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCUUUUUCUCUUGGAGCUGAGCUAUAAGACAACAGGACUGAACAGGGAGCCAACUGUUUCUUUGAACAGUAAAUCAGGAACACCAAUGGACCAAAAUGAACACAGUCACUGGGGACCACAUGCAAAGGGCCAAUGUGCCAGCAGAUCUGAGCUGAGAAUCAUCCUGGUGGGCAAAACAGGAACUG\
) } def
/len { sequence length } bind def

/coor [
[313.00427246 583.24237061]
[310.52700806 575.30499268]
[309.98181152 566.99206543]
[311.40658569 558.76800537]
[314.72894287 551.09399414]
[319.76989746 544.40209961]
[326.25347900 539.07104492]
[321.12319946 524.97564697]
[315.99288940 510.88024902]
[310.86257935 496.78488159]
[305.73226929 482.68948364]
[291.70175171 472.16195679]
[295.02511597 454.05908203]
[289.66122437 440.05090332]
[284.29736328 426.04275513]
[278.93347168 412.03457642]
[273.56961060 398.02639771]
[268.20571899 384.01821899]
[262.49426270 370.14813232]
[256.43881226 356.42474365]
[250.38336182 342.70135498]
[244.32789612 328.97796631]
[238.74061584 324.11840820]
[238.28794861 314.97579956]
[232.46142578 301.15365601]
[222.45352173 302.31738281]
[212.43243408 301.15029907]
[202.93450928 297.70858765]
[194.46945190 292.17041016]
[187.49310303 284.82656860]
[182.38281250 276.06533813]
[179.41703796 266.35183716]
[178.76022339 256.20343018]
[180.45364380 246.16212463]
[184.41288757 236.76559448]
[190.43206787 228.51846313]
[181.37500000 216.56147766]
[172.31793213 204.60449219]
[163.16180420 192.72319031]
[153.90724182 180.91839600]
[144.65269470 169.11360168]
[135.39813232 157.30880737]
[126.14356995 145.50401306]
[105.59286499 152.18066406]
[84.09397888 150.01100159]
[65.29167938 139.36285400]
[52.37356949 122.04143524]
[47.52967453 100.98327637]
[32.64608765 99.11811829]
[16.17805481 103.14804077]
[7.74682093 88.43917847]
[19.54685783 76.26561737]
[34.51124191 84.23453522]
[49.39482880 86.09968567]
[47.40543747 80.19657135]
[46.10223770 73.82118225]
[33.50185013 65.68299103]
[20.90145874 57.54479599]
[8.30107021 49.40660095]
[-4.29931831 41.26840591]
[-16.89970779 33.13021088]
[-29.50009537 24.99201775]
[-45.89691162 24.71544647]
[-53.61814117 10.24773502]
[-44.72084427 -3.52797437]
[-28.35779762 -2.44041252]
[-21.36190224 12.39162922]
[-8.76151276 20.52982330]
[3.83887577 28.66801834]
[16.43926430 36.80621338]
[29.03965378 44.94440460]
[41.64004135 53.08259964]
[54.24043274 61.22079468]
[60.36614227 56.89347839]
[51.71150970 44.64205551]
[43.05707932 32.39049149]
[55.30878830 23.73626328]
[63.96293259 35.98742294]
[72.61756134 48.23884583]
[78.74327850 43.91152954]
[75.28403473 29.31585503]
[62.11567307 20.99528313]
[58.81543350 6.14391613]
[66.82897949 -6.35882998]
[63.36974335 -20.95450211]
[51.72852325 -32.50500107]
[56.17199707 -48.29067612]
[72.12910461 -52.07257843]
[83.18453979 -39.96021271]
[77.96541595 -24.41374016]
[81.42465210 -9.81806755]
[94.19704437 -2.24167943]
[97.91312408 12.51113033]
[89.87970734 25.85661697]
[93.33895111 40.45228958]
[106.55348969 41.12081146]
[119.14933777 44.65261841]
[130.52146912 50.80947876]
[140.13890076 59.22882843]
[147.56942749 69.44454193]
[152.49888611 80.91242218]
[154.74404907 93.03901672]
[154.25872803 105.21224976]
[151.13293457 116.83230591]
[145.58514404 127.34118652]
[137.94836426 136.24946594]
[147.20292664 148.05426025]
[156.45748901 159.85905457]
[165.71203613 171.66384888]
[174.96659851 183.46864319]
[182.73942566 188.30345154]
[184.27491760 195.54742432]
[193.33198547 207.50440979]
[202.38905334 219.46141052]
[230.63047791 215.55525208]
[255.16476440 229.66612244]
[267.89868164 221.73847961]
[275.52481079 207.87655640]
[290.41854858 207.71849060]
[303.15246582 199.79086304]
[303.27111816 184.36395264]
[311.73046875 171.46267700]
[325.83114624 165.20376587]
[341.07373047 167.58442688]
[352.59432983 177.84500122]
[356.71676636 192.71136475]
[352.12561035 207.43972778]
[340.28585815 217.33032227]
[324.97552490 219.22709656]
[311.08010864 212.52478027]
[298.34619141 220.45240784]
[291.63088989 233.74729919]
[275.82632446 234.47239685]
[263.09240723 242.40003967]
[265.74945068 252.05467224]
[266.13119507 262.06097412]
[264.21746826 271.89001465]
[260.10943604 281.02212524]
[254.02423096 288.97463989]
[246.28356934 295.32711792]
[252.11009216 309.14926147]
[258.05126953 322.92251587]
[264.10675049 336.64590454]
[270.16220093 350.36929321]
[276.21765137 364.09268188]
[280.46313477 367.19418335]
[282.84381104 371.21591187]
[283.32235718 375.28836060]
[282.21389771 378.65435791]
[287.57775879 392.66253662]
[292.94165039 406.67068481]
[298.30551147 420.67886353]
[303.66940308 434.68704224]
[309.03329468 448.69519043]
[320.48217773 454.66220093]
[324.65567017 466.45492554]
[319.82766724 477.55917358]
[324.95797729 491.65457153]
[330.08828735 505.74996948]
[335.21856689 519.84533691]
[340.34887695 533.94073486]
[362.37057495 538.27569580]
[377.28369141 554.87902832]
[379.21643066 576.98541260]
[367.54492188 595.70953369]
[374.49877930 609.00030518]
[381.45263672 622.29101562]
[388.40649414 635.58178711]
[395.36038208 648.87249756]
[410.70913696 649.43041992]
[423.71405029 657.60150146]
[430.87692261 671.18786621]
[430.27093506 686.53479004]
[422.05908203 699.51409912]
[408.45034790 706.63433838]
[393.10540771 705.98022461]
[380.15194702 697.72772217]
[373.07440186 684.09674072]
[373.77658081 668.75390625]
[382.06961060 655.82635498]
[375.11575317 642.53564453]
[368.16189575 629.24487305]
[361.20803833 615.95416260]
[354.25418091 602.66339111]
[346.13101196 603.92370605]
[337.92333984 603.23999023]
[330.09069824 600.64312744]
[323.07348633 596.27124023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 161]
[8 160]
[9 159]
[10 158]
[11 157]
[13 154]
[14 153]
[15 152]
[16 151]
[17 150]
[18 149]
[19 145]
[20 144]
[21 143]
[22 142]
[24 141]
[25 140]
[36 114]
[37 113]
[38 112]
[39 110]
[40 109]
[41 108]
[42 107]
[43 106]
[48 54]
[49 53]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[80 95]
[81 94]
[84 91]
[85 90]
[116 134]
[117 133]
[119 131]
[120 130]
[165 184]
[166 183]
[167 182]
[168 181]
[169 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
