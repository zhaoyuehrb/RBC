%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCGAGCCCUCAAAGUCCGCUCCUGCCCCGAAGAAAGGCUCCAAGAAGGCAGUGACAAAGGCCCAGAAGAAGGACGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[131.94146729 271.59570312]
[139.47213745 260.86560059]
[131.90489197 247.91427612]
[124.33764648 234.96295166]
[116.77040100 222.01162720]
[114.11444855 236.77462769]
[105.46115875 249.02699280]
[92.43624878 256.46685791]
[77.48673248 257.69650269]
[63.42121124 252.48487854]
[52.88219452 241.81112671]
[47.84967041 227.68052673]
[49.26911545 212.74783325]
[56.87384796 199.81849670]
[69.23516083 191.32154846]
[84.03069305 188.85334778]
[98.48079681 192.87759399]
[109.87001801 202.63734436]
[107.54654694 187.81838989]
[105.22307587 172.99943542]
[102.89960480 158.18048096]
[91.14640045 145.25129700]
[97.67778015 128.12272644]
[94.89456940 113.38319397]
[85.92478943 102.65777588]
[90.36590576 89.40001678]
[87.58268738 74.66049194]
[84.79946899 59.92096329]
[72.02837372 51.00262070]
[69.41576385 36.01499557]
[77.99674225 23.89466476]
[75.21353149 9.15513706]
[61.74356461 7.09799862]
[49.60601807 0.95588875]
[40.00332260 -8.64664650]
[33.88177490 -20.74305534]
[31.83830452 -34.12205505]
[34.06226730 -47.44892502]
[40.31801987 -59.39865875]
[49.96978378 -68.78770447]
[62.04624939 -74.69117737]
[60.18476868 -89.57522583]
[58.32328796 -104.45927429]
[56.23055649 -119.31257629]
[53.90708160 -134.13153076]
[41.84180450 -144.70549011]
[42.73018265 -160.72392273]
[55.89072800 -169.89886475]
[71.22779846 -165.19207764]
[76.97610474 -150.21421814]
[68.72604370 -136.45500183]
[71.04951477 -121.63604736]
[75.26973724 -115.40586090]
[73.20733643 -106.32075500]
[75.06881714 -91.43670654]
[76.93029785 -76.55265808]
[92.94701385 -72.59897614]
[106.29012299 -62.83544159]
[114.94253540 -48.70385361]
[117.58332825 -32.30886078]
[113.78928375 -16.10450745]
[104.10250092 -2.52692366]
[89.95305634 6.37192059]
[92.73627472 21.11144829]
[105.14609528 29.26815414]
[108.17864227 44.17648697]
[99.53900146 57.13774490]
[102.32221985 71.87727356]
[105.10543060 86.61680603]
[114.07521057 97.34222412]
[109.63409424 110.59998322]
[112.41731262 125.33950806]
[122.68872070 133.33044434]
[124.62516022 145.79138184]
[117.71855927 155.85700989]
[120.04203033 170.67596436]
[122.36550903 185.49491882]
[124.68898010 200.31387329]
[129.72172546 214.44438171]
[137.28897095 227.39570618]
[144.85621643 240.34704590]
[152.42346191 253.29837036]
[169.83506775 252.73585510]
[185.10742188 260.93246460]
[194.17054749 275.60397339]
[194.65931702 292.75430298]
[186.53012085 307.76376343]
[194.88789368 320.21957397]
[203.24568176 332.67538452]
[218.19805908 339.41024780]
[219.57223511 355.75173950]
[205.95458984 364.88909912]
[191.35377502 357.42263794]
[190.78987122 341.03317261]
[182.43208313 328.57736206]
[174.07429504 316.12155151]
[161.44041443 318.33343506]
[148.87568665 315.53219604]
[138.30062866 308.10897827]
[131.34576416 297.16427612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[18 78]
[19 77]
[20 76]
[21 75]
[23 72]
[24 71]
[26 69]
[27 68]
[28 67]
[31 64]
[32 63]
[41 56]
[42 55]
[43 54]
[44 52]
[45 51]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
