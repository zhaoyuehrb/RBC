%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGUCCCUUGACCUUGCAGGUCACUGGCCUAAUGAAUGUCUCUGAGCCAAAUUCCAGCUUUGCUUUUGUAAAUGAAUUUAUACUCCAAGGUUUCUCUU\
) } def
/len { sequence length } bind def

/coor [
[119.05796814 152.00683594]
[111.96496582 154.08102417]
[104.65897369 155.19248962]
[97.27004242 155.32147217]
[89.92971039 154.46565247]
[82.76863861 152.64025879]
[75.91431427 149.87782288]
[69.48873901 146.22747803]
[63.60630798 141.75424194]
[58.37173080 136.53771973]
[53.87819290 130.67077637]
[40.37815475 137.20904541]
[26.87811470 143.74729919]
[13.37807369 150.28556824]
[-0.12196561 156.82383728]
[-13.62200546 163.36210632]
[-25.24176216 175.70785522]
[-40.32170486 167.95985413]
[-37.05103683 151.32437134]
[-20.16027260 149.86206055]
[-6.66023207 143.32379150]
[6.83980799 136.78553772]
[20.33984756 130.24726868]
[33.83988571 123.70899963]
[47.33992767 117.17073059]
[45.73944092 88.87754059]
[58.34234619 63.49579239]
[48.50341797 52.17345047]
[38.66448593 40.85110474]
[28.82555771 29.52876091]
[13.93333817 24.18719101]
[11.42544842 9.50523758]
[1.58651972 -1.81710672]
[-13.93947411 -3.07459569]
[-23.75625610 -14.69722176]
[-22.46175003 -29.49113464]
[-32.30067825 -40.81348038]
[-47.25393677 -48.80325317]
[-43.71587753 -65.38391876]
[-26.80376053 -66.57411194]
[-20.97833633 -50.65240860]
[-11.13940716 -39.33006287]
[3.69042301 -38.54793167]
[13.82978725 -27.20562363]
[12.90886402 -11.65603542]
[22.74779320 -0.33369172]
[36.93626785 4.19802856]
[40.14790344 19.68983078]
[49.98683167 31.01217651]
[59.82575989 42.33451843]
[69.66468811 53.65686417]
[84.18415833 46.91726685]
[100.02458954 44.61122131]
[115.86296844 46.93133163]
[130.37644958 53.68381882]
[142.35284424 64.30470276]
[150.79185486 77.90691376]
[154.98866272 93.35437012]
[169.98684692 93.58764648]
[184.98503113 93.82092285]
[199.98321533 94.05419922]
[214.98139954 94.28747559]
[229.97959900 94.52075195]
[244.97778320 94.75403595]
[252.47785950 83.07055664]
[264.69635010 76.71027374]
[278.35125732 77.25967407]
[289.83489990 84.46535492]
[296.16702271 96.32961273]
[311.15069580 97.02922058]
[326.13436890 97.72882843]
[341.11804199 98.42843628]
[356.10171509 99.12803650]
[371.08541870 99.82764435]
[385.39813232 91.82278442]
[399.34652710 100.44685364]
[398.58166504 116.82815552]
[383.89038086 124.11500549]
[370.38580322 114.81132507]
[355.40213013 114.11171722]
[340.41845703 113.41210938]
[325.43478394 112.71250153]
[310.45108032 112.01290131]
[295.46740723 111.31329346]
[285.70465088 124.40879059]
[269.92068481 129.21400452]
[254.20556641 123.67034912]
[244.74450684 109.75222015]
[229.74630737 109.51894379]
[214.74812317 109.28566742]
[199.74993896 109.05238342]
[184.75175476 108.81910706]
[169.75357056 108.58583069]
[154.75538635 108.35255432]
[153.15609741 115.56748199]
[150.61056519 122.50529480]
[147.16409302 129.04248047]
[142.87805176 135.06266785]
[137.82870483 140.45869446]
[132.10597229 145.13450623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[27 51]
[28 50]
[29 49]
[30 48]
[32 46]
[33 45]
[36 42]
[37 41]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[64 88]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
