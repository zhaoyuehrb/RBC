%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCGGCGCGCGCAGCGGCAGGCGGCGGCGGGAUGGAGCCCGAGCCCGAGCCCGCGGCCGUGGAGGUUCCCGCGGGGCGCGUGCUCAGCGCCCGGGAGCUCUUCGCCGCCCGCUCGCGGUCGCAGAAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[150.14692688 370.54760742]
[147.00531006 355.88027954]
[143.86370850 341.21295166]
[140.72210693 326.54565430]
[137.58050537 311.87832642]
[127.34920502 301.05383301]
[132.02458191 285.93920898]
[128.88298035 271.27188110]
[125.74137878 256.60458374]
[115.51007843 245.78007507]
[120.18546295 230.66546631]
[117.04386139 215.99813843]
[113.90225983 201.33082581]
[103.88179016 194.45074463]
[101.18611145 182.18638611]
[107.80796051 171.04670715]
[105.01105499 156.30976868]
[102.21415710 141.57283020]
[99.41725159 126.83589935]
[96.62035370 112.09896088]
[91.33988190 110.43015289]
[86.94379425 106.42485046]
[84.46445465 100.57116699]
[70.78041077 94.42731476]
[57.09636688 88.28345490]
[43.41232300 82.13960266]
[29.72828102 75.99575043]
[13.96967983 77.40183258]
[5.52810097 65.13036346]
[-8.15594196 58.98650742]
[-21.83998489 52.84265137]
[-35.52402878 46.69879532]
[-49.20807266 40.55493927]
[-67.43097687 42.88134384]
[-77.20453644 28.35398865]
[-91.02884674 22.53260994]
[-104.85315704 16.71123314]
[-114.07186890 16.25031281]
[-118.93075562 10.58793736]
[-132.61479187 4.44408226]
[-148.86563110 6.64465904]
[-158.68138123 -6.49242926]
[-151.96444702 -21.45287132]
[-135.62463379 -22.84664917]
[-126.47093964 -9.23996067]
[-112.78689575 -3.09610558]
[-99.03177643 2.88692212]
[-85.20746613 8.70829964]
[-71.38315582 14.52967739]
[-60.00537872 10.25281906]
[-48.40654755 15.06409264]
[-43.06421661 26.87089729]
[-29.38017273 33.01475143]
[-15.69613075 39.15860748]
[-2.01208711 45.30246353]
[11.67195606 51.44631958]
[26.45178223 49.60078430]
[35.87213516 62.31170273]
[49.55617905 68.45555878]
[63.24022293 74.59941864]
[76.92426300 80.74327087]
[90.60830688 86.88712311]
[105.37702179 84.26316833]
[116.10722351 73.78162384]
[126.83743286 63.30008316]
[137.56762695 52.81853867]
[148.17424011 42.21193695]
[158.65577698 31.48173332]
[169.13731384 20.75152969]
[179.61886597 10.02132511]
[190.10040283 -0.70887935]
[200.58193970 -11.43908405]
[201.90879822 -16.68215752]
[204.86178589 -20.46243095]
[208.58483887 -22.40008163]
[212.19740295 -22.52228737]
[223.40711975 -32.48936081]
[234.61682129 -42.45643234]
[245.82652283 -52.42350388]
[257.03622437 -62.39057541]
[268.24594116 -72.35765076]
[267.61706543 -87.98258209]
[277.21969604 -100.32451630]
[292.51977539 -103.55596924]
[306.29302979 -96.15115356]
[312.03616333 -81.60638428]
[307.03747559 -66.78926086]
[293.65716553 -58.69598389]
[278.21301270 -61.14794540]
[267.00329590 -51.18087006]
[255.79359436 -41.21379852]
[244.58389282 -31.24672699]
[233.37419128 -21.27965546]
[222.16447449 -11.31258297]
[211.31214905 -0.95754248]
[200.83061218 9.77266216]
[190.34906006 20.50286674]
[179.86752319 31.23307037]
[169.38598633 41.96327591]
[158.90443420 52.69348145]
[156.45799255 59.74232101]
[148.04917908 63.54874420]
[137.31896973 74.03028870]
[126.58876801 84.51182556]
[115.85855865 94.99337006]
[111.35729218 109.30205536]
[114.15419006 124.03899384]
[116.95109558 138.77593994]
[119.74799347 153.51287842]
[122.54489899 168.24981689]
[134.88508606 181.85885620]
[128.56958008 198.18922424]
[131.71118164 212.85653687]
[134.85278320 227.52386475]
[145.30879211 239.39746094]
[140.40870667 253.46296692]
[143.55030823 268.13027954]
[146.69190979 282.79760742]
[157.14791870 294.67120361]
[152.24783325 308.73672485]
[155.38943481 323.40402222]
[158.53103638 338.07135010]
[161.67263794 352.73867798]
[164.81423950 367.40600586]
[179.45329285 372.05291748]
[189.79577637 383.40759277]
[193.05960083 398.41567993]
[188.36682129 413.04010010]
[176.97978210 423.34692383]
[161.96153259 426.56369019]
[147.35189819 421.82510376]
[137.08081055 410.40582275]
[133.91113281 395.37756348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 121]
[5 120]
[7 118]
[8 117]
[9 116]
[11 114]
[12 113]
[13 112]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[35 49]
[36 48]
[37 47]
[39 46]
[40 45]
[63 105]
[64 104]
[65 103]
[66 102]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
