%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGGCUCUGAAGUGGACUUCAGUUCUUCUGCUGAUACAUCUCGGUUGUUACUUUAGCUCUGGGAGUUGUGGAAAGGUGCUGGUGUGGACCGGUGAAUACA\
) } def
/len { sequence length } bind def

/coor [
[83.46797943 113.21327972]
[71.04379272 121.61802673]
[58.61961365 130.02276611]
[53.14772797 137.55433655]
[45.68590546 138.48759460]
[33.01119232 146.50955200]
[29.43027687 161.66918945]
[16.46203804 169.62402344]
[2.03170228 166.11674500]
[-10.64301300 174.13868713]
[-23.31772804 182.16064453]
[-35.99244308 190.18258667]
[-48.66716003 198.20452881]
[-61.34187317 206.22647095]
[-68.47390747 220.99353027]
[-84.84626770 221.93052673]
[-93.61647034 208.07356262]
[-85.76248169 193.67749023]
[-69.36381531 193.55175781]
[-56.68910217 185.52981567]
[-44.01438904 177.50787354]
[-31.33967209 169.48591614]
[-18.66495705 161.46397400]
[-5.99024200 153.44203186]
[-2.98408771 138.89904785]
[9.75559998 130.58309937]
[24.98924637 133.83482361]
[37.66396332 125.81288910]
[50.21487045 117.59858704]
[62.63904953 109.19384766]
[75.06323242 100.78910065]
[95.03524017 83.68373871]
[98.65913391 69.12807465]
[102.28302765 54.57241058]
[91.88929749 38.89517593]
[96.01100922 20.86525536]
[111.64310455 11.58283234]
[114.37288666 -3.16668582]
[117.10266876 -17.91620445]
[119.83245087 -32.66572189]
[122.11116791 -47.49162674]
[123.93668365 -62.38013077]
[125.76219940 -77.26863098]
[127.58771515 -92.15713501]
[129.41323853 -107.04563141]
[131.23875427 -121.93413544]
[123.88165283 -132.66345215]
[125.81755066 -145.12020874]
[135.44825745 -152.61468506]
[137.72697449 -167.44058228]
[140.00567627 -182.26649475]
[142.28439331 -197.09239197]
[138.71441650 -213.66621399]
[153.65225220 -221.68476868]
[165.49264526 -209.55046082]
[157.11029053 -194.81369019]
[154.83158875 -179.98777771]
[152.55287170 -165.16188049]
[150.27416992 -150.33596802]
[157.55268860 -134.44808960]
[146.12725830 -120.10861969]
[144.30174255 -105.22011566]
[142.47621155 -90.33161926]
[140.65069580 -75.44311523]
[138.82518005 -60.55461121]
[136.99966431 -45.66611099]
[139.29374695 -41.29949188]
[138.74597168 -35.42502213]
[134.58197021 -29.93593788]
[131.85218811 -15.18641949]
[129.12240601 -0.43690181]
[126.39262390 14.31261635]
[134.86735535 22.24424744]
[138.42248535 33.42081451]
[136.03878784 45.02791214]
[128.20837402 54.08178711]
[116.83869934 58.19630814]
[113.21479797 72.75197601]
[109.59090424 87.30764008]
[114.74508667 101.39431000]
[126.90717316 110.17404175]
[139.06925964 118.95376587]
[151.23135376 127.73348999]
[163.39344788 136.51321411]
[175.55554199 145.29293823]
[191.91603088 146.41816711]
[198.87776184 161.26626587]
[189.27909851 174.56280518]
[172.99432373 172.62942505]
[166.77581787 157.45503235]
[154.61372375 148.67530823]
[142.45162964 139.89558411]
[130.28953552 131.11585999]
[118.12744904 122.33612823]
[105.96536255 113.55640411]
[116.73220062 124.00030518]
[119.77039337 138.68939209]
[114.03000641 152.54753113]
[101.49476624 160.78572083]
[86.49651337 160.55708313]
[74.21821594 151.94061279]
[68.90293121 137.91394043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[5 28]
[6 27]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[32 79]
[33 78]
[34 77]
[37 72]
[38 71]
[39 70]
[40 69]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[49 59]
[50 58]
[51 57]
[52 56]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
