%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:19:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCCACCGCUCGCUUCAAUAUGGCUGCCCCCAGGGAGAGACGAGGCUACCAUGAAGGAGCCGAGCGCAGACCCUGAGUCCGUCACCCAUGGAUCGCAGCGCGGAGUUCAGGAAAUGGAAGGCGCAAUGUUUGAGCAAAGCGGACCUCAGCCGGAAGGGCAGUGUUGACGAGGAUGUGGUAGAGCUUG\
) } def
/len { sequence length } bind def

/coor [
[140.09776306 626.88195801]
[138.85906982 611.93316650]
[130.09718323 599.88830566]
[136.66845703 585.49633789]
[135.42976379 570.54754639]
[134.19107056 555.59881592]
[132.95237732 540.65002441]
[131.71368408 525.70129395]
[118.43068695 515.39941406]
[116.66488647 498.34332275]
[127.99286652 485.02432251]
[126.50717926 470.09805298]
[125.02149963 455.17181396]
[123.53582001 440.24557495]
[120.46010590 436.57061768]
[119.67211151 430.91961670]
[122.25616455 424.80249023]
[121.26480865 409.83529663]
[120.27344513 394.86807251]
[119.28208923 379.90087891]
[118.29073334 364.93368530]
[115.87617493 362.34097290]
[114.60662079 358.44329834]
[115.08465576 353.79583740]
[117.64011383 349.20312500]
[117.39210510 334.20520020]
[117.14408875 319.20724487]
[116.89608002 304.20928955]
[116.64807129 289.21133423]
[116.40006256 274.21337891]
[116.15205383 259.21542358]
[115.65610504 244.22363281]
[114.91234589 229.24209595]
[111.43433380 222.70559692]
[114.28222656 214.00709534]
[113.78627777 199.01530457]
[102.77010345 189.05639648]
[102.05357361 173.85964966]
[112.57407379 162.37240601]
[112.07812500 147.38059998]
[111.58217621 132.38880920]
[98.84546661 133.42350769]
[86.97537994 129.76449585]
[77.58884430 122.18621826]
[71.86117554 111.97652435]
[70.38127899 100.72406769]
[55.78137970 97.28271484]
[41.18148041 93.84135437]
[26.58158112 90.39999390]
[17.49237823 91.47738647]
[11.76970768 86.77915955]
[-2.77129650 83.09687042]
[-17.23370361 90.04081726]
[-31.61660767 82.93366241]
[-34.88667679 67.22741699]
[-24.53538895 54.97056198]
[-8.50337219 55.56550980]
[0.91098571 68.55587006]
[15.45199013 72.23815155]
[30.02293968 75.80009460]
[44.62283707 79.24145508]
[59.22273636 82.68281555]
[73.82263947 86.12416840]
[78.81800079 79.28488922]
[85.54425812 74.13835907]
[93.45178223 71.10512543]
[93.94773102 56.11332703]
[94.44367981 41.12152481]
[94.93963623 26.12972832]
[77.53720093 16.50903702]
[67.44987488 -0.53581721]
[67.39120483 -20.26318741]
[77.29769135 -37.23191833]
[94.36824036 -46.80211639]
[93.62448883 -61.78366470]
[92.88072968 -76.76521301]
[92.13697815 -91.74676514]
[91.39321899 -106.72830963]
[90.64945984 -121.70986176]
[89.78187561 -136.68475342]
[88.79051971 -151.65196228]
[87.79915619 -166.61915588]
[86.80780029 -181.58636475]
[85.81643677 -196.55357361]
[76.94361115 -200.57713318]
[70.19346619 -207.52159119]
[66.46814728 -216.39808655]
[66.24324036 -225.96400452]
[69.50749969 -234.89685059]
[75.77021027 -241.97711182]
[84.13447571 -246.25473022]
[84.13447571 -261.25473022]
[73.85270691 -273.56994629]
[77.21159363 -289.25744629]
[91.63447571 -296.28311157]
[106.05736542 -289.25744629]
[109.41624451 -273.56994629]
[99.13447571 -261.25473022]
[99.13447571 -246.25473022]
[114.75813293 -233.09877014]
[115.64247131 -212.39979553]
[100.78364563 -197.54492188]
[101.77500153 -182.57772827]
[102.76636505 -167.61051941]
[103.75772095 -152.64331055]
[104.74907684 -137.67611694]
[108.33469391 -131.19801331]
[105.63101196 -122.45362091]
[106.37477112 -107.47206879]
[107.11852264 -92.49051666]
[107.86228180 -77.50897217]
[108.60603333 -62.52742004]
[109.34979248 -47.54587173]
[119.39196014 -44.57664490]
[128.22760010 -38.91675568]
[135.15124512 -31.00419235]
[139.60617065 -21.45734978]
[141.22926331 -11.02670193]
[139.88047791 -0.53581721]
[135.65490723 9.18367100]
[128.87619019 17.35798836]
[120.07165527 23.33282089]
[109.93143463 26.62567711]
[109.43547821 41.61747742]
[108.93952942 56.60927582]
[108.44358063 71.60107422]
[118.64776611 75.46156311]
[127.12059021 82.99196625]
[132.54772949 93.42628479]
[133.94953918 105.53262329]
[148.78376770 103.30867004]
[163.61798096 101.08470917]
[178.45219421 98.86075592]
[193.28642273 96.63680267]
[201.29605103 83.20624542]
[216.08168030 78.11518860]
[230.66200256 83.76746368]
[238.15263367 97.49424744]
[235.01670837 112.81417084]
[222.73492432 122.49363708]
[207.10638428 121.96228790]
[195.51037598 111.47102356]
[180.67614746 113.69497681]
[165.84193420 115.91893005]
[151.00772095 118.14288330]
[136.17349243 120.36683655]
[126.57397461 131.89285278]
[127.06992340 146.88465881]
[127.56587219 161.87644958]
[138.82257080 172.64328003]
[139.11196899 187.85415649]
[128.77807617 198.51934814]
[129.27401733 213.51115417]
[129.89390564 228.49833679]
[130.63764954 243.47988892]
[133.91085815 249.25765991]
[133.78073120 254.96185303]
[131.15000916 258.96743774]
[131.39801025 273.96539307]
[131.64602661 288.96331787]
[131.89402771 303.96127319]
[132.14204407 318.95922852]
[132.39004517 333.95718384]
[132.63806152 348.95513916]
[133.25793457 363.94232178]
[134.24929810 378.90951538]
[135.24064636 393.87670898]
[136.23200989 408.84393311]
[137.22337341 423.81112671]
[138.46206665 438.75988770]
[139.94773865 453.68612671]
[141.43342590 468.61239624]
[142.91911316 483.53863525]
[154.26066589 490.82382202]
[159.25724792 503.13345337]
[156.29011536 515.88311768]
[146.66246033 524.46258545]
[147.90115356 539.41131592]
[149.13983154 554.36010742]
[150.37852478 569.30889893]
[151.61721802 584.25762939]
[160.46769714 597.37176514]
[153.80783081 610.69445801]
[155.04652405 625.64324951]
[167.26699829 635.66503906]
[168.73855591 651.40063477]
[158.58815002 663.51446533]
[142.83784485 664.81958008]
[130.83200073 654.54168701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 184]
[2 183]
[4 181]
[5 180]
[6 179]
[7 178]
[8 177]
[11 173]
[12 172]
[13 171]
[14 170]
[17 169]
[18 168]
[19 167]
[20 166]
[21 165]
[25 164]
[26 163]
[27 162]
[28 161]
[29 160]
[30 159]
[31 158]
[32 155]
[33 154]
[35 153]
[36 152]
[39 149]
[40 148]
[41 147]
[46 63]
[47 62]
[48 61]
[49 60]
[51 59]
[52 58]
[66 126]
[67 125]
[68 124]
[69 123]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[79 108]
[80 106]
[81 105]
[82 104]
[83 103]
[84 102]
[91 99]
[92 98]
[130 146]
[131 145]
[132 144]
[133 143]
[134 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
