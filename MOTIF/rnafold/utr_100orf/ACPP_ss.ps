%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUCCCUUAAUUAAAUAGCUUCCCCUCUACAGGCUUUUGAAGUGGUAGCAGUUCCUCCUAACUCCUGCCAGAAACAGCUCUCCUCAACAUGAGAGCUGCACCCCUCCUCCUGGCCAGGGCAGCAAGCCUUAGCCUUGGCUUCUUGUUUCUGCUUUUUUUCUGGCUAGACCGAAGUGUACUAGCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[138.31188965 191.63195801]
[129.25993347 204.38328552]
[114.11637115 208.28283691]
[100.03152466 201.48936462]
[93.65583801 187.21054077]
[97.99970245 172.18840027]
[111.01209259 163.51593018]
[112.49002075 148.58891296]
[113.96794891 133.66189575]
[107.39208984 130.05523682]
[94.56931305 137.83831787]
[94.24036407 122.84190369]
[87.66449738 119.23524475]
[75.87139130 128.50468445]
[64.07828522 137.77413940]
[52.28517914 147.04357910]
[40.49207306 156.31301880]
[35.66827011 164.09040833]
[28.42791176 165.63603210]
[16.48394203 174.71026611]
[4.53997231 183.78448486]
[-7.40399742 192.85871887]
[-19.34796715 201.93293762]
[-18.03564072 217.30438232]
[-25.26226807 230.93447876]
[-38.72186279 238.47390747]
[-54.11951065 237.51686096]
[-66.54188538 228.36872864]
[-72.02504730 213.94865417]
[-68.81933594 198.85803223]
[-57.94769287 187.91221619]
[-42.87921524 184.60398865]
[-28.42219353 189.98896790]
[-16.47822380 180.91474915]
[-4.53425407 171.84051514]
[7.40971565 162.76629639]
[19.35368538 153.69206238]
[31.22262573 144.51991272]
[43.01573181 135.25047302]
[54.80883789 125.98102570]
[66.60194397 116.71157837]
[78.39505005 107.44213867]
[77.22789001 100.03350830]
[63.22849274 94.64676666]
[74.89355469 85.21626282]
[73.72638702 77.80763245]
[59.65458679 72.61298370]
[45.58278275 67.41833496]
[31.51098251 62.22368622]
[17.43918037 57.02903748]
[1.81345570 59.50841904]
[-7.44675064 47.84231949]
[-21.51855278 42.64767075]
[-35.59035492 37.45302200]
[-49.66215897 32.25837326]
[-63.90938568 39.09884262]
[-78.79274750 33.78271866]
[-85.48220062 19.46396446]
[-80.00901794 4.63764238]
[-65.62033844 -1.90005338]
[-50.85271454 3.72957587]
[-44.46750641 18.18657112]
[-30.39570618 23.38121986]
[-16.32390404 28.57586861]
[-2.25210142 33.77051926]
[12.36711311 30.91958237]
[22.63382912 42.95723724]
[36.70563126 48.15188599]
[50.77743149 53.34653473]
[64.84923553 58.54118347]
[78.92103577 63.73583221]
[93.07637787 58.77333069]
[100.82425690 45.92925262]
[108.57214355 33.08517838]
[116.32002258 20.24110031]
[124.06790924 7.39702272]
[131.81578064 -5.44705439]
[139.56367493 -18.29113197]
[141.89799500 -33.10838318]
[138.47433472 -47.71244049]
[135.05067444 -62.31649780]
[131.62701416 -76.92055511]
[128.20335388 -91.52462006]
[124.77969360 -106.12867737]
[110.42407227 -112.01898956]
[102.30104065 -125.24002838]
[103.53405762 -140.70803833]
[113.64901733 -152.47525024]
[128.75650024 -156.01693726]
[143.04737854 -149.97123718]
[151.02651978 -136.66285706]
[149.62576294 -121.20912933]
[139.38375854 -109.55233765]
[142.80741882 -94.94828033]
[146.23107910 -80.34422302]
[149.65473938 -65.74015808]
[153.07839966 -51.13610077]
[156.50205994 -36.53204346]
[171.29960632 -34.07593536]
[179.25770569 -46.79084015]
[187.21578979 -59.50574875]
[183.88746643 -74.72284698]
[192.13922119 -87.50420380]
[206.66690063 -90.58347321]
[214.62500000 -103.29837799]
[222.58308411 -116.01329041]
[230.54116821 -128.72819519]
[238.28904724 -141.57226562]
[245.82463074 -154.54203796]
[245.32847595 -170.93368530]
[259.41641235 -179.32788086]
[273.59594727 -171.08940125]
[273.28042603 -154.69329834]
[258.79440308 -147.00645447]
[251.25881958 -134.03668213]
[251.59997559 -129.25749207]
[248.93074036 -124.21602631]
[243.25607300 -120.77011108]
[235.29798889 -108.05519867]
[227.33990479 -95.34029388]
[219.38182068 -82.62538910]
[222.96163940 -68.21287537]
[215.07212830 -55.20478439]
[199.93069458 -51.54766083]
[191.97261047 -38.83275604]
[184.01452637 -26.11784744]
[193.08874512 -14.17387772]
[207.47163391 -18.43213654]
[221.85450745 -22.69039536]
[236.23738098 -26.94865417]
[241.29196167 -41.61940002]
[254.02372742 -50.48967361]
[269.53704834 -50.14867401]
[281.86676025 -40.72751617]
[286.27182007 -25.84883690]
[281.05838013 -11.23378372]
[268.23114014 -2.50214791]
[252.72241211 -3.01141977]
[240.49565125 -12.56577396]
[226.11276245 -8.30751514]
[211.72988892 -4.04925632]
[197.34700012 0.20900223]
[182.66178894 4.03370476]
[169.32849121 2.71781635]
[158.89645386 -2.64426732]
[152.40774536 -10.54324913]
[144.65986633 2.30082798]
[136.91198730 15.14490509]
[129.16409302 27.98898315]
[121.41621399 40.83305740]
[113.66833496 53.67713547]
[105.92045593 66.52120972]
[114.68100739 54.34530640]
[127.16860962 46.03508377]
[141.78294373 42.65552902]
[156.65112305 44.63973999]
[169.86775208 51.73343277]
[179.73910522 63.02753067]
[185.00010681 77.07466125]
[184.97654724 92.07463837]
[179.67146301 106.10517883]
[169.76469421 117.36822510]
[156.52313232 124.42124939]
[164.05871582 137.39102173]
[171.59429932 150.36079407]
[179.12988281 163.33056641]
[186.66546631 176.30033875]
[194.20104980 189.27011108]
[201.73663330 202.23988342]
[209.37861633 215.14724731]
[217.12649536 227.99131775]
[232.52622986 231.54432678]
[240.83216858 244.99002075]
[237.11654663 260.35131836]
[223.58378601 268.51464844]
[208.26261902 264.63684082]
[200.24282837 251.01850891]
[204.28242493 235.73919678]
[196.53454590 222.89512634]
[190.37701416 218.78457642]
[188.76686096 209.77546692]
[181.23127747 196.80569458]
[173.69569397 183.83592224]
[166.16011047 170.86614990]
[158.62452698 157.89637756]
[151.08894348 144.92660522]
[143.55335999 131.95683289]
[128.89495850 135.13983154]
[127.41703033 150.06684875]
[125.93910217 164.99385071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 190]
[8 189]
[9 188]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[54 63]
[55 62]
[72 152]
[73 151]
[74 150]
[75 149]
[76 148]
[77 147]
[78 146]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[99 126]
[100 125]
[101 124]
[104 121]
[105 120]
[106 119]
[107 118]
[108 115]
[109 114]
[127 142]
[128 141]
[129 140]
[130 139]
[163 187]
[164 186]
[165 185]
[166 184]
[167 183]
[168 182]
[169 181]
[170 179]
[171 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
