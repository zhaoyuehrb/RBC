%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCGCCCGGCCCGCCCGGCUCUCCUAGUCCCUUGCAACCUGGCGCUGCCAUCCGGGCCACUGUCCCAGGUCCCGGCCCGGAGCUAUGGAGCGGCGCUGGCCCCUGGGGCUAGGGCUGGUGCUGCUGCUCUGCGCCCCGCUGCCCCCGGGGGCGCGCGCCAAGGAAGUUACUCUGAUGGACACAA\
) } def
/len { sequence length } bind def

/coor [
[110.33703613 248.43283081]
[103.57788086 258.85147095]
[94.51930237 267.33090210]
[83.69680786 273.37722778]
[71.74842072 276.64004517]
[59.37708664 276.93292236]
[47.30930328 274.24398804]
[40.32138824 287.51687622]
[33.33347702 300.78973389]
[33.75092316 316.60543823]
[20.97537422 324.26275635]
[13.98745918 337.53561401]
[15.16704845 353.89230347]
[1.44160652 362.86694336]
[-13.06930923 355.22720337]
[-13.43811226 338.83221436]
[0.71459055 330.54769897]
[7.70250511 317.27484131]
[6.78523302 302.40850830]
[20.06060600 293.80181885]
[27.04852104 280.52896118]
[34.03643417 267.25607300]
[21.76501465 254.56539917]
[14.54160213 238.43153381]
[13.24521351 220.77825928]
[18.04707527 203.71659851]
[28.38820839 189.29229736]
[43.04445267 179.24060059]
[60.27135849 174.77751160]
[78.01182556 176.45265198]
[84.09760284 162.74269104]
[90.18338013 149.03271484]
[96.26916504 135.32273865]
[91.62104034 129.43675232]
[76.77811432 131.60185242]
[82.32479095 117.66475677]
[77.67666626 111.77876282]
[62.92936707 114.52051544]
[54.19273376 127.69042969]
[38.68610382 130.74330139]
[25.60929108 121.86791992]
[22.72053146 106.32987976]
[31.73367882 93.34763336]
[47.30138779 90.62331390]
[60.18761826 99.77321625]
[74.93491364 97.03146362]
[79.37905121 82.70492554]
[68.77244568 72.09832764]
[58.16584778 61.49172592]
[49.86729813 57.62591553]
[47.47248459 50.61815643]
[37.04459763 39.83580399]
[26.61671066 29.05344772]
[15.83435440 18.62556076]
[4.70957327 8.56378937]
[-6.41520834 -1.49798119]
[-17.53998947 -11.55975246]
[-28.66477203 -21.62152290]
[-39.78955460 -31.68329430]
[-50.91433334 -41.74506378]
[-62.03911591 -51.80683517]
[-73.41258240 -61.58662415]
[-85.02759552 -71.07827759]
[-96.64260101 -80.56993866]
[-112.34045410 -78.73882294]
[-124.68329620 -88.60947418]
[-126.34834290 -104.32580566]
[-116.34774780 -116.56360626]
[-100.61469269 -118.06239319]
[-88.48331451 -107.93297577]
[-87.15093994 -92.18494415]
[-75.53593445 -82.69329071]
[-63.92092514 -73.20162964]
[-60.37620926 -73.19736481]
[-56.65898895 -71.46350861]
[-53.58785248 -67.93860626]
[-51.97734451 -62.93161774]
[-40.85256577 -52.86984634]
[-29.72778320 -42.80807495]
[-18.60300064 -32.74630356]
[-7.47821903 -22.68453407]
[3.64656258 -12.62276268]
[14.77134418 -2.56099176]
[25.89612579 7.50077915]
[28.71820831 7.48383713]
[31.71685410 8.59500599]
[34.45824432 10.90715694]
[36.49028778 14.33342361]
[37.39906693 18.62556076]
[47.82695007 29.40791512]
[58.25483704 40.19026947]
[68.77244568 50.88512421]
[79.37905121 61.49172592]
[89.98564911 72.09832764]
[104.73294830 74.84007263]
[118.44292450 68.75429535]
[132.15289307 62.66851425]
[145.86286926 56.58273315]
[159.57283020 50.49695587]
[165.32836914 36.02243805]
[179.31890869 30.04589462]
[193.08268738 35.62211609]
[206.79266357 29.53633499]
[220.50262451 23.45055580]
[234.21260071 17.36477470]
[247.92256165 11.27899551]
[261.63253784 5.19321585]
[275.34249878 -0.89256430]
[289.05249023 -6.97834444]
[302.76245117 -13.06412411]
[316.47241211 -19.14990425]
[325.94659424 -31.82076836]
[340.71844482 -29.91258430]
[354.42840576 -35.99836349]
[368.13839722 -42.08414459]
[381.79702759 -48.28425980]
[395.40338135 -54.59828186]
[399.53152466 -59.80368042]
[404.87002563 -61.82434464]
[409.57156372 -60.88744736]
[423.38128662 -66.74328613]
[437.19104004 -72.59912109]
[451.00079346 -78.45496368]
[464.81054688 -84.31080627]
[467.32138062 -99.53247070]
[477.68002319 -110.96497345]
[492.58108521 -114.96022797]
[507.26968384 -110.24337006]
[517.05871582 -98.31952667]
[518.82458496 -82.99356079]
[512.00378418 -69.15592194]
[498.77279663 -61.22216415]
[483.35357666 -61.72390747]
[470.66638184 -70.50105286]
[456.85662842 -64.64521790]
[443.04687500 -58.78937531]
[429.23712158 -52.93353653]
[415.42739868 -47.07769775]
[401.71740723 -40.99191666]
[388.11105347 -34.67789841]
[383.35760498 -28.99911118]
[374.22418213 -28.37417412]
[360.51419067 -22.28839302]
[346.80422974 -16.20261383]
[338.31069946 -3.96704435]
[322.55819702 -5.43993425]
[308.84823608 0.64584595]
[295.13824463 6.73162603]
[281.42828369 12.81740570]
[267.71832275 18.90318680]
[254.00834656 24.98896599]
[240.29837036 31.07474518]
[226.58840942 37.16052628]
[212.87843323 43.24630737]
[199.16847229 49.33208466]
[194.07154846 63.28045654]
[180.25439453 69.64760590]
[165.65861511 64.20692444]
[151.94863892 70.29270172]
[138.23867798 76.37848663]
[124.52870178 82.46426392]
[110.81873322 88.55004120]
[128.69038391 88.99912262]
[145.55012512 103.71815491]
[152.38122559 130.62347412]
[160.66259766 143.13021851]
[168.94398499 155.63697815]
[184.47955322 158.53895569]
[193.34379578 171.62332153]
[190.27772522 187.12734985]
[177.10037231 195.85276794]
[161.62963867 192.62294006]
[153.04402161 179.35408020]
[156.43722534 163.91835022]
[148.15585327 151.41160583]
[139.87448120 138.90484619]
[132.40063477 139.53077698]
[126.01095581 153.10176086]
[117.45296478 140.78260803]
[109.97913361 141.40852356]
[103.89334869 155.11849976]
[97.80757141 168.82846069]
[91.72179413 182.53843689]
[101.36029816 190.47494507]
[108.80031586 200.48786926]
[113.60928345 211.98614502]
[115.50976562 224.29258728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[11 18]
[12 17]
[30 183]
[31 182]
[32 181]
[33 180]
[37 46]
[38 45]
[47 94]
[48 93]
[49 92]
[51 91]
[52 90]
[53 89]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[62 73]
[63 72]
[64 71]
[95 162]
[96 161]
[97 160]
[98 159]
[99 158]
[102 155]
[103 154]
[104 153]
[105 152]
[106 151]
[107 150]
[108 149]
[109 148]
[110 147]
[111 146]
[113 144]
[114 143]
[115 142]
[116 140]
[117 139]
[120 138]
[121 137]
[122 136]
[123 135]
[124 134]
[165 176]
[166 175]
[167 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
