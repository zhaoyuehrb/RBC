%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAAGCAGCACUGACGGCCUUCUUCGUGUUGCUCUUUAGCCUGCUGAGUCUUCUGGGGAUUGCAGCGAAUGGCUUCAUUGUGCUGGUGCUGGGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[4.24904060 173.19836426]
[-8.37263203 179.79927063]
[-22.46350098 181.66252136]
[-36.30844879 178.58209229]
[-48.22942734 170.95246887]
[-56.78882980 159.71821594]
[-71.13869476 164.08644104]
[-85.48856354 168.45466614]
[-99.83842468 172.82287598]
[-114.18829346 177.19110107]
[-128.53816223 181.55932617]
[-142.88803101 185.92753601]
[-157.23788452 190.29576111]
[-164.69290161 195.88284302]
[-172.10234070 194.56919861]
[-186.58111572 198.48902893]
[-197.87983704 209.56375122]
[-212.18678284 205.42123413]
[-226.66555786 209.34106445]
[-240.37426758 219.31640625]
[-253.75473022 208.90489197]
[-247.45417786 193.16516113]
[-230.58538818 194.86228943]
[-216.10661316 190.94245911]
[-205.84352112 180.14810181]
[-190.50094604 184.01025391]
[-176.02217102 180.09042358]
[-161.60610962 175.94589233]
[-147.25624084 171.57768250]
[-132.90637207 167.20945740]
[-118.55651093 162.84123230]
[-104.20664978 158.47300720]
[-89.85678101 154.10479736]
[-75.50691986 149.73657227]
[-61.15705109 145.36834717]
[-59.88859177 129.65432739]
[-52.70167542 115.57962799]
[-40.65818787 105.28812408]
[-25.56222153 100.35990906]
[-9.68985748 101.56877136]
[4.55400801 108.76087189]
[15.00003910 120.87359619]
[29.20711136 116.06120300]
[43.41418457 111.24881744]
[57.62125778 106.43643188]
[71.82833099 101.62404633]
[86.03540802 96.81166077]
[95.40451050 86.43324280]
[109.15220642 88.98126984]
[123.35928345 84.16887665]
[137.56636047 79.35649109]
[141.91606140 69.14444733]
[151.03845215 63.21883011]
[161.69326782 63.38947678]
[170.25694275 69.35099792]
[184.73571777 65.43117523]
[199.21449280 61.51134491]
[213.69326782 57.59151459]
[217.71821594 41.64137650]
[229.13508606 29.92805290]
[244.79718018 25.54591942]
[260.45440674 29.58696747]
[271.90658569 40.87052536]
[286.25646973 36.50230408]
[297.20529175 25.08154297]
[311.63412476 28.77712250]
[325.98400879 24.40890121]
[340.33386230 20.04068184]
[349.12112427 6.61817265]
[365.10684204 5.26304436]
[376.02813721 17.01483536]
[373.50714111 32.85857773]
[359.47775269 40.64030457]
[344.70208740 34.39054871]
[330.35223389 38.75876617]
[316.00234985 43.12698746]
[306.07992554 54.23530579]
[290.62466431 50.85216904]
[276.27481079 55.22039032]
[274.03778076 68.78854370]
[266.10382080 80.10160828]
[253.99302673 86.89165497]
[240.06964111 87.76709747]
[227.08045959 82.49745178]
[217.61309814 72.07028961]
[203.13430786 75.99011993]
[188.65553284 79.90995026]
[174.17675781 83.82978058]
[161.79054260 98.54013062]
[142.37873840 93.56356812]
[128.17166138 98.37595367]
[113.96459198 103.18833923]
[104.59548950 113.56675720]
[90.84779358 111.01873016]
[76.64071655 115.83112335]
[62.43364716 120.64350891]
[48.22657394 125.45589447]
[34.01949692 130.26828003]
[19.81242561 135.08067322]
[19.27154541 149.40408325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[15 27]
[16 26]
[18 24]
[19 23]
[42 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[49 92]
[50 91]
[51 90]
[55 88]
[56 87]
[57 86]
[58 85]
[63 79]
[64 78]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
