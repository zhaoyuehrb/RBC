%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCUGAGCUGCUUCUGCCGUUGCAUCUUCGGGACUCCGCCCCGCGCGCGGACCUGCAGCCAUGGCAGUCACCGCCCAGGCAGCCCGCAGGAAGGAGCGCGUCCUCUGCCUGUUUGACGUGGACGGGACCCUCACGCCGGCUCGCCAGAAAAUUGACCCUG\
) } def
/len { sequence length } bind def

/coor [
[117.50263977 144.39443970]
[128.60438538 134.30725098]
[141.90135193 127.36529541]
[156.52043152 124.02279663]
[142.10240173 119.88515472]
[127.68435669 115.74750519]
[113.26631927 111.60985565]
[95.46461487 117.03567505]
[82.71717834 103.47680664]
[68.15039825 99.89786530]
[53.58361435 96.31893158]
[39.01683044 92.73999023]
[24.45004463 89.16105652]
[9.88325977 85.58211517]
[-4.68352413 82.00318146]
[-19.50557137 79.69950104]
[-34.47145462 78.68840790]
[-49.43733978 77.67731476]
[-64.40322113 76.66621399]
[-79.36911011 75.65512085]
[-94.33499146 74.64402771]
[-109.30087280 73.63292694]
[-123.59120178 80.42241669]
[-135.76799011 71.84481049]
[-150.73387146 70.83371735]
[-156.81573486 79.70070648]
[-165.97343445 85.17917633]
[-176.50128174 86.32750702]
[-186.47096252 83.00337219]
[-194.08473206 75.87745667]
[-197.99949646 66.29938507]
[-212.88194275 64.42511749]
[-227.76437378 62.55085754]
[-242.64682007 60.67659760]
[-248.95162964 62.91092682]
[-254.57931519 61.76348495]
[-258.06253052 58.43257904]
[-272.86169434 55.98617554]
[-287.66082764 53.53977203]
[-302.45999146 51.09336853]
[-317.25915527 48.64696503]
[-329.01135254 58.96296310]
[-344.64611816 59.25962448]
[-356.78121948 49.39687729]
[-359.68679810 34.03160095]
[-351.99093628 20.41881752]
[-337.32739258 14.98606300]
[-322.61987305 20.29851913]
[-314.81274414 33.84780502]
[-300.01361084 36.29420853]
[-285.21444702 38.74061203]
[-270.41528320 41.18701553]
[-255.61611938 43.63341904]
[-240.77256775 45.79415131]
[-225.89012146 47.66841507]
[-211.00767517 49.54267502]
[-196.12522888 51.41693878]
[-181.72090149 38.36138153]
[-162.05027771 40.05910873]
[-149.72277832 55.86783218]
[-134.75689697 56.87892914]
[-121.53702545 50.01712418]
[-108.28977966 58.66704559]
[-93.32389832 59.67814255]
[-78.35800934 60.68923569]
[-63.39212799 61.70033264]
[-48.42624283 62.71142960]
[-33.46036148 63.72252274]
[-18.49447632 64.73361969]
[-29.29842186 54.32810211]
[-32.89529037 39.76573563]
[-28.17850304 25.52663803]
[-16.59918213 15.99147606]
[-1.71971214 14.09374809]
[11.88222885 20.41729164]
[20.02199554 33.01666260]
[20.19538498 48.01566315]
[12.34905243 60.79983521]
[-1.10458648 67.43639374]
[13.46219826 71.01533508]
[28.02898216 74.59426880]
[42.59576797 78.17321014]
[57.16255188 81.75214386]
[71.72933197 85.33108521]
[86.29611969 88.91001892]
[94.53619385 83.23900604]
[104.53538513 82.96432495]
[113.07437134 88.17440033]
[117.40396881 97.19181824]
[131.82200623 101.32946777]
[146.24005127 105.46710968]
[160.65808105 109.60475922]
[165.43670654 107.58255005]
[170.23840332 107.36206818]
[174.45158386 108.71955872]
[177.61671448 111.24410248]
[192.56033325 109.94477081]
[207.50393677 108.64543152]
[222.44755554 107.34609985]
[237.36335754 105.75900269]
[252.24580383 103.88474274]
[267.12826538 102.01048279]
[282.01068115 100.13621521]
[286.08422852 85.51834869]
[295.41885376 73.60583496]
[308.56759644 66.19474792]
[323.51150513 64.38729095]
[337.96963501 68.42797089]
[349.74719238 77.67107391]
[357.06863403 90.68358612]
[371.95108032 88.80932617]
[386.83352661 86.93506622]
[401.71597290 85.06079865]
[416.59841919 83.18653870]
[431.48086548 81.31227875]
[446.36331177 79.43801880]
[457.29730225 67.69802856]
[473.28155518 69.07041931]
[482.05429077 82.50241089]
[476.88583374 97.69013214]
[461.74099731 102.98284912]
[448.23757935 94.32045746]
[433.35513306 96.19472504]
[418.47268677 98.06898499]
[403.59024048 99.94324493]
[388.70779419 101.81750488]
[373.82534790 103.69177246]
[358.94290161 105.56603241]
[355.07641602 119.98752594]
[345.95840454 131.86216736]
[332.95358276 139.36148071]
[318.02813721 141.31570435]
[303.45245361 137.39616394]
[291.45568848 128.17007446]
[283.88494873 115.01866150]
[269.00250244 116.89292145]
[254.12007141 118.76718903]
[239.23762512 120.64144897]
[235.62863159 123.83564758]
[229.96092224 124.76535797]
[223.74690247 122.28971863]
[208.80328369 123.58905029]
[193.85966492 124.88838959]
[178.91604614 126.18772125]
[192.62736511 132.27044678]
[204.34783936 141.63157654]
[213.31111145 153.65902710]
[218.93115234 167.56640625]
[220.84049988 182.44439697]
[218.91430664 197.32020569]
[213.27850342 211.22120667]
[204.30160522 223.23849487]
[192.57054138 232.58633423]
[178.85232544 238.65351868]
[164.04393005 241.04336548]
[149.11357117 239.59962463]
[135.03746033 234.41665649]
[122.73594666 225.83338928]
[113.01334381 214.41099548]
[106.50535583 200.89633179]
[103.63750458 186.17303467]
[104.59729767 171.20378113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 92]
[5 91]
[6 90]
[7 89]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[24 61]
[25 60]
[31 57]
[32 56]
[33 55]
[34 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[96 144]
[97 143]
[98 142]
[99 141]
[100 138]
[101 137]
[102 136]
[103 135]
[110 128]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
