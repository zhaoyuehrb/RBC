%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCCGCUUUCUGUUGCCGGGCGCAAUGGCGGAUACGCUGGAGUCCUCGCUGGAGGACCCACUGCGGAGCUUUGUGCGAGUUUUGGAGAAGCGGGAUGGUACAGUGCUACGACUACAGCAGUAUA\
) } def
/len { sequence length } bind def

/coor [
[99.49467468 140.81735229]
[90.26620483 152.64254761]
[81.03772736 164.46774292]
[71.80924988 176.29293823]
[68.95266724 185.08297729]
[62.20632172 188.29141235]
[52.69042206 199.88658142]
[43.31753159 211.59764099]
[34.08905792 223.42283630]
[38.50354385 238.29872131]
[33.29938507 252.91706848]
[20.47768402 261.65682983]
[4.96864843 261.15740967]
[-7.26418209 251.61082458]
[-11.51703548 236.68792725]
[-6.15460110 222.12687683]
[6.76115417 213.52671814]
[22.26385880 214.19435120]
[31.49233437 202.36915588]
[33.14468765 195.08377075]
[41.09526443 190.37068176]
[50.61116409 178.77551270]
[59.98405838 167.06446838]
[69.21253204 155.23925781]
[78.44100189 143.41406250]
[87.66947937 131.58886719]
[84.97026825 124.59142303]
[70.15106964 122.26946259]
[79.57183838 110.59653473]
[76.87262726 103.59909058]
[62.09346390 101.03466034]
[47.31429672 98.47023010]
[32.53513336 95.90579987]
[17.33515930 102.06151581]
[4.57233810 91.76382446]
[7.37596750 75.60610962]
[22.86191368 70.21004486]
[35.09956360 81.12664032]
[49.87872696 83.69106293]
[64.65789032 86.25549316]
[79.43705750 88.81992340]
[87.61692810 76.24655151]
[79.28337860 63.77450943]
[71.83304596 58.30482483]
[70.90274048 50.89254761]
[62.87777710 38.21974564]
[54.85281372 25.54694176]
[46.82785034 12.87413788]
[38.80288696 0.20133469]
[30.77792168 -12.47146893]
[16.00915909 -19.59998322]
[15.06825924 -35.97211456]
[28.92313766 -44.74562073]
[43.32108307 -36.89506912]
[43.45072556 -20.49643326]
[51.47568893 -7.82362938]
[59.50065231 4.84917402]
[67.52561951 17.52197647]
[75.55058289 30.19478035]
[83.57554626 42.86758423]
[91.75542450 55.44095612]
[100.08897400 67.91300201]
[113.72649384 74.15943909]
[128.61369324 72.32328033]
[143.50088501 70.48712158]
[158.38807678 68.65096283]
[173.27526855 66.81480408]
[185.43399048 47.27969742]
[207.73188782 42.75833893]
[226.11755371 55.71691132]
[240.47164917 51.36264038]
[254.82575989 47.00836945]
[265.78567505 35.59825516]
[280.21093750 39.30786133]
[294.56503296 34.95359039]
[308.91915894 30.59931946]
[323.27325439 26.24504852]
[337.62734985 21.89077950]
[351.98147583 17.53650856]
[358.78701782 6.49890518]
[370.91253662 3.20565367]
[381.65560913 8.90777397]
[396.11224365 4.90708256]
[410.56887817 0.90639126]
[425.02551270 -3.09430003]
[439.48217773 -7.09499168]
[453.93881226 -11.09568310]
[461.50967407 -24.96859550]
[476.69604492 -29.34460640]
[490.48812866 -21.62750244]
[494.70333862 -6.39570761]
[486.84085083 7.31402636]
[471.56533813 11.36795616]
[457.93951416 3.36095810]
[443.48284912 7.36164951]
[429.02621460 11.36234093]
[414.56958008 15.36303234]
[400.11294556 19.36372375]
[385.65628052 23.36441422]
[374.10827637 36.51846695]
[356.33572388 31.89061356]
[341.98162842 36.24488449]
[327.62753296 40.59915543]
[313.27340698 44.95342255]
[298.91931152 49.30769348]
[284.56521606 53.66196442]
[274.63198853 64.76062775]
[259.18002319 61.36247635]
[244.82592773 65.71674347]
[230.47181702 70.07101440]
[229.67877197 77.88787842]
[226.75680542 85.21058655]
[221.91729736 91.46904755]
[215.52156067 96.17161560]
[208.05381775 98.94371796]
[200.08460999 99.55762482]
[192.22717285 97.95111847]
[185.09027100 94.23341370]
[179.23101807 88.67788696]
[175.11141968 81.70199585]
[160.22422791 83.53815460]
[145.33703613 85.37431335]
[130.44984436 87.21047211]
[115.56265259 89.04663849]
[123.03561401 95.95098114]
[126.77595520 107.27508545]
[124.45976257 120.79486084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[6 22]
[7 21]
[8 19]
[9 18]
[30 41]
[31 40]
[32 39]
[33 38]
[42 62]
[43 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[63 124]
[64 123]
[65 122]
[66 121]
[67 120]
[70 110]
[71 109]
[72 108]
[74 106]
[75 105]
[76 104]
[77 103]
[78 102]
[79 101]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
