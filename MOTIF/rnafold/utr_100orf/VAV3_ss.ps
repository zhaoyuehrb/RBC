%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCAUCCUUGCCGCCCGCCCCGGCCCAGCCGCGUCCCGGAGCCGUCGGGCAUGGAGCCGUGGAAGCAGUGCGCGCAGUGGCUCAUCCAUUGCAAGGUGCUGCCCACCAACCACCGGGUGACCUGGGACUCGGCUCAGGUGUUCGACCUUG\
) } def
/len { sequence length } bind def

/coor [
[104.38656616 125.01632690]
[96.81166840 125.19709015]
[90.61817932 138.85873413]
[84.42468262 152.52038574]
[85.77355957 168.28398132]
[73.47151947 176.68096924]
[67.27803040 190.34262085]
[61.08454132 204.00425720]
[63.22611237 220.26296997]
[50.05347824 230.03097534]
[35.11751556 223.25978088]
[33.78306580 206.91500854]
[47.42289352 197.81077576]
[53.61638260 184.14912415]
[59.80987167 170.48747253]
[58.01800156 155.70104980]
[70.76303864 146.32690430]
[76.95652771 132.66525269]
[83.15001678 119.00359344]
[80.23507690 115.95011902]
[77.86616516 112.45600128]
[63.20457077 115.62422180]
[51.34996414 126.10176849]
[37.27559280 121.22721100]
[22.61399841 124.39543152]
[7.95240307 127.56365204]
[-6.70919228 130.73187256]
[-10.22755623 145.58393860]
[-19.84823036 157.43321228]
[-33.66102219 163.92703247]
[-48.92339325 163.77601624]
[-62.60498428 157.01016235]
[-71.98931122 144.97283936]
[-75.21311188 130.05406189]
[-71.63628387 115.21596527]
[-61.96902466 103.40466309]
[-48.13076782 96.96530151]
[-32.86911011 97.17641449]
[-19.21426582 103.99609375]
[-9.87741280 116.07028198]
[4.78418207 112.90206146]
[19.44577789 109.73384094]
[34.10737228 106.56561279]
[44.91328049 96.31468201]
[60.03635025 100.96263123]
[74.69794464 97.79441071]
[88.81486511 77.19755554]
[113.74340820 78.64169312]
[125.22321320 68.98694611]
[136.70301819 59.33219910]
[148.18281555 49.67745209]
[159.66262817 40.02270508]
[171.14242554 30.36795807]
[182.62222290 20.71321106]
[194.10203552 11.05846500]
[205.58183289 1.40371847]
[211.42442322 -16.03027725]
[228.77581787 -18.48320580]
[240.05760193 -28.36862946]
[251.33937073 -38.25405502]
[262.62115479 -48.13947678]
[273.90292358 -58.02490234]
[282.28790283 -98.31078339]
[287.63973999 -112.32355499]
[292.99160767 -126.33631897]
[298.34347534 -140.34909058]
[297.66702271 -147.02156067]
[300.12936401 -152.22564697]
[304.20663452 -154.81398010]
[310.12194824 -168.59835815]
[316.03729248 -182.38272095]
[321.95263672 -196.16708374]
[327.86798096 -209.95144653]
[333.78332520 -223.73582458]
[339.69863892 -237.52018738]
[332.90881348 -253.61160278]
[339.69680786 -269.33740234]
[355.43222046 -275.19775391]
[361.06698608 -289.09918213]
[366.70175171 -303.00061035]
[372.33651733 -316.90200806]
[377.97125244 -330.80343628]
[383.60601807 -344.70486450]
[389.24078369 -358.60629272]
[384.33825684 -373.88192749]
[393.34414673 -387.15872192]
[409.34991455 -388.25186157]
[420.07730103 -376.32278442]
[417.29714966 -360.52246094]
[403.14218140 -352.97152710]
[397.50744629 -339.07009888]
[391.87268066 -325.16870117]
[386.23791504 -311.26727295]
[380.60317993 -297.36584473]
[374.96841431 -283.46441650]
[369.33364868 -269.56298828]
[375.97644043 -258.48226929]
[374.99130249 -245.40505981]
[366.51522827 -235.14389038]
[353.48303223 -231.60484314]
[347.56768799 -217.82048035]
[341.65234375 -204.03611755]
[335.73699951 -190.25175476]
[329.82165527 -176.46737671]
[323.90634155 -162.68301392]
[317.99099731 -148.89865112]
[312.35623169 -134.99722290]
[307.00436401 -120.98445892]
[301.65252686 -106.97169495]
[296.30065918 -92.95893097]
[299.67169189 -86.25920868]
[307.90484619 -98.79776001]
[322.88012695 -97.93701935]
[329.62240601 -84.53771210]
[321.38949585 -71.99900818]
[306.41372681 -72.85977936]
[309.78475952 -66.16006470]
[324.22674561 -62.10674667]
[338.66870117 -58.05343246]
[353.11068726 -54.00011826]
[367.55264282 -49.94680023]
[384.43640137 -51.48814011]
[390.59136963 -35.69091034]
[377.11538696 -25.40335464]
[363.49932861 -35.50482559]
[349.05737305 -39.55814362]
[334.61538696 -43.61145782]
[320.17343140 -47.66477203]
[305.73144531 -51.71809006]
[315.71780396 -40.52556610]
[314.18991089 -25.60358620]
[302.14245605 -16.66717148]
[287.41906738 -19.53441620]
[279.60540771 -32.33858871]
[283.78833008 -46.74312973]
[272.50656128 -36.85770416]
[261.22479248 -26.97228050]
[249.94302368 -17.08685684]
[238.66125488 -7.20143270]
[237.53869629 4.87988091]
[228.16911316 13.20668602]
[215.23657227 12.88352108]
[203.75677490 22.53826714]
[192.27697754 32.19301605]
[180.79716492 41.84776306]
[169.31736755 51.50250626]
[157.83757019 61.15725327]
[146.35775757 70.81200409]
[134.87796021 80.46675110]
[123.39815521 90.12149811]
[125.27101898 97.46343994]
[124.89469910 105.03115082]
[122.30269623 112.15106964]
[117.72568512 118.18952179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[6 15]
[7 14]
[8 13]
[21 46]
[22 45]
[24 43]
[25 42]
[26 41]
[27 40]
[48 150]
[49 149]
[50 148]
[51 147]
[52 146]
[53 145]
[54 144]
[55 143]
[56 142]
[58 139]
[59 138]
[60 137]
[61 136]
[62 135]
[63 110]
[64 109]
[65 108]
[66 107]
[69 106]
[70 105]
[71 104]
[72 103]
[73 102]
[74 101]
[75 100]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
