%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGUGCGCUCUCGCCGCCCGUGGAUGAGCGUGGCAUUAGGGCUGGUGCUGGGCUUCACCGCCGCGUCCUGGCUCAUCGCCCCCAGGGUGGCGGAGC\
) } def
/len { sequence length } bind def

/coor [
[18.52925301 401.79220581]
[15.67525768 416.82925415]
[6.15101719 428.81039429]
[-7.85486698 434.98239136]
[-23.12394524 433.92703247]
[-36.14749527 425.88677979]
[-43.93280029 412.70922852]
[-44.69085693 397.42251587]
[-38.24746323 383.53936768]
[-26.08326912 374.25009155]
[-10.99351692 371.68923950]
[-6.40265799 357.40902710]
[-1.81179905 343.12884521]
[2.77905965 328.84863281]
[1.81242895 321.38598633]
[7.74112892 314.19967651]
[12.77387905 300.06915283]
[17.80662918 285.93865967]
[22.83938026 271.80813599]
[27.87212944 257.67761230]
[32.90488052 243.54711914]
[37.93762970 229.41659546]
[42.97038269 215.28608704]
[42.23630524 207.79698181]
[48.38563156 200.79852295]
[53.85540390 186.83135986]
[59.32517624 172.86419678]
[52.49966812 163.46623230]
[51.12548447 151.81089783]
[55.67087555 140.85966492]
[65.08477020 133.45339966]
[77.03724670 131.57560730]
[83.36477661 117.97551727]
[89.69229889 104.37542725]
[95.80755615 90.67858124]
[101.70906067 76.88828278]
[107.39538574 63.00787735]
[112.86515808 49.04071808]
[112.22621918 42.16969681]
[114.87068176 36.88608932]
[119.13373566 34.39266968]
[125.46125793 20.79257965]
[131.78878784 7.19249010]
[138.11630249 -6.40759897]
[144.44383240 -20.00768852]
[150.77136230 -33.60777664]
[156.88661194 -47.30462646]
[162.78811646 -61.09492111]
[168.68962097 -74.88521576]
[174.59112549 -88.67551422]
[180.49263000 -102.46580505]
[178.80877686 -118.19715118]
[190.92941284 -126.85389709]
[196.83091736 -140.64419556]
[192.22357178 -156.01142883]
[201.48355103 -169.11227417]
[217.50741577 -169.89688110]
[228.00300598 -157.76338196]
[224.91902161 -142.01953125]
[210.62121582 -134.74269104]
[204.71971130 -120.95239258]
[206.82568359 -106.20742035]
[194.28292847 -96.56430054]
[188.38142395 -82.77400970]
[182.47991943 -68.98371124]
[176.57841492 -55.19341660]
[170.67691040 -41.40312195]
[170.94396973 -33.88286972]
[164.37144470 -27.28025055]
[158.04393005 -13.68016243]
[151.71640015 -0.08007331]
[145.38887024 13.52001572]
[139.06134033 27.12010384]
[132.73382568 40.72019196]
[126.83232117 54.51049042]
[121.36254883 68.47765350]
[121.86335754 75.98595428]
[115.49935150 82.78978729]
[109.59784698 96.58008575]
[109.55783844 104.79552460]
[103.29238892 110.70295715]
[96.96486664 124.30303955]
[90.63733673 137.90313721]
[97.85976410 155.26518250]
[90.39455414 172.18103027]
[73.29233551 178.33396912]
[67.82256317 192.30113220]
[62.35279083 206.26829529]
[57.10089493 220.31883240]
[52.06814575 234.44934082]
[47.03539276 248.57986450]
[42.00264359 262.71038818]
[36.96989441 276.84088135]
[31.93714333 290.97140503]
[26.90439415 305.10192871]
[21.87164307 319.23242188]
[17.05925560 333.43951416]
[12.46839714 347.71969604]
[7.87753868 361.99990845]
[3.28667998 376.28009033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 100]
[12 99]
[13 98]
[14 97]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[25 88]
[26 87]
[27 86]
[32 83]
[33 82]
[34 81]
[35 79]
[36 78]
[37 76]
[38 75]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
