%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGGUUUCUCCUCCUUCCUCCCAGGAAGGGCCAGGAAAAUGGCCCUGGUCCUGGAGAUCUUCACCCUGCUGGCCUCCAUCUGCUGGGUGUCGGCCAAUAUCUUCGAGUACCAGGUGGAUGCCCAGCCCCUUCGUCCCU\
) } def
/len { sequence length } bind def

/coor [
[291.43756104 110.04889679]
[276.45223999 109.38539124]
[261.46691895 108.72189331]
[246.48161316 108.05839539]
[239.60586548 110.92757416]
[231.17320251 107.21082306]
[216.20622253 106.21598053]
[201.23925781 105.22113800]
[182.97885132 116.78710938]
[164.30761719 104.47004700]
[149.31127930 104.80187988]
[134.31495667 105.13371277]
[119.31861877 105.46554565]
[104.32229614 105.79737854]
[105.49177551 110.80207062]
[105.02577972 116.24489594]
[102.83193970 121.70723724]
[98.91363525 126.75576782]
[93.37169647 130.96292114]
[80.27211761 138.27050781]
[67.17253113 145.57810974]
[54.07294846 152.88569641]
[43.18615723 165.88240051]
[27.68361282 159.01890564]
[29.98733902 142.22221375]
[46.76535416 139.78611755]
[59.86493683 132.47851562]
[72.96452332 125.17092896]
[86.06410217 117.86333466]
[84.57320404 102.93761444]
[70.28698730 98.36552429]
[56.00077057 93.79344177]
[41.71455383 89.22135162]
[27.42833519 84.64926910]
[13.14211750 80.07717896]
[-1.14410019 75.50509644]
[-15.43031788 70.93300629]
[-29.71653557 66.36092377]
[-42.14952850 75.64533234]
[-57.66567612 75.81499481]
[-70.29870605 66.80465698]
[-75.19095612 52.07897949]
[-70.46126556 37.30029297]
[-57.92828751 28.15129662]
[-42.41120911 28.14997101]
[-29.87666893 37.29682159]
[-25.14444923 52.07470322]
[-10.85823154 56.64678955]
[3.42798638 61.21887589]
[17.71420479 65.79096222]
[32.00042343 70.36304474]
[46.28664017 74.93513489]
[60.57285690 79.50722504]
[74.85907745 84.07930756]
[89.14529419 88.65139771]
[103.99046326 90.80104828]
[118.98679352 90.46921539]
[133.98312378 90.13738251]
[148.97944641 89.80554962]
[163.97578430 89.47372437]
[168.62110901 82.32691956]
[175.66101074 77.69091797]
[183.87519836 76.27867889]
[191.87557983 78.25205231]
[198.34069824 83.20713806]
[202.23410034 90.25416565]
[217.20108032 91.24900818]
[232.16804504 92.24385071]
[247.14511108 93.07307434]
[262.13043213 93.73657227]
[277.11575317 94.40007782]
[292.10107422 95.06357574]
[308.18994141 86.18206024]
[322.62850952 96.09729767]
[337.62481689 96.42913055]
[342.23394775 82.05428314]
[350.69833374 69.57324982]
[362.32495117 59.99270248]
[376.16610718 54.08248901]
[391.09674072 52.31372452]
[405.90579224 54.82126617]
[419.39456177 61.39346695]
[430.47363281 71.49002075]
[438.25085449 84.28634644]
[442.10327148 98.74097443]
[457.09957886 99.07280731]
[472.09591675 99.40464020]
[487.09225464 99.73646545]
[502.08856201 100.06829834]
[517.08489990 100.40013123]
[532.08123779 100.73196411]
[547.07757568 101.06378937]
[562.07391357 101.39562225]
[577.07025146 101.72745514]
[591.03820801 94.29734039]
[603.59118652 102.31430054]
[618.58752441 102.64612579]
[633.58386230 102.97795868]
[638.79614258 88.76139832]
[648.34405518 77.00913239]
[661.19195557 68.99596405]
[675.94610596 65.59109497]
[691.00616455 67.16386414]
[704.73846436 73.54367065]
[715.65350342 84.03848267]
[722.56726074 97.50988770]
[724.72973633 112.49662781]
[721.90643311 127.37303925]
[714.40356445 140.52545166]
[703.03503418 150.52717590]
[689.03393555 156.29331970]
[673.91906738 157.19839478]
[659.32995605 153.14422607]
[646.84912109 144.57058716]
[637.83038330 132.40750122]
[633.25201416 117.97428894]
[618.25567627 117.64245605]
[603.25933838 117.31063080]
[590.36401367 124.76448059]
[576.73840332 116.72378540]
[561.74206543 116.39195251]
[546.74572754 116.06011963]
[531.74938965 115.72829437]
[516.75305176 115.39646149]
[501.75674438 115.06462860]
[486.76040649 114.73279572]
[471.76409912 114.40096283]
[456.76776123 114.06913757]
[441.77142334 113.73730469]
[437.28341675 128.00737000]
[428.94778442 140.44717407]
[417.43295288 150.04377747]
[403.66668701 156.01289368]
[388.76119995 157.86291504]
[373.92343140 155.43545532]
[360.35723877 148.91879272]
[349.16577148 138.83334351]
[341.26174927 125.99010468]
[337.29299927 111.42545319]
[322.29666138 111.09362793]
[313.29617310 119.24942017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[6 68]
[7 67]
[8 66]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[19 29]
[20 28]
[21 27]
[22 26]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[74 140]
[75 139]
[85 129]
[86 128]
[87 127]
[88 126]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[96 118]
[97 117]
[98 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
