%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUUUCCGACAAAACACCAAAUGGCGGAUGACGCCGGUGCAGCGGGGGGGCCCGGGGGCCCUGGUGGCCCUGGGAUGGGGAACCGCGGUGGCUUCCGCGGAGGUUUCGGCAGUGGCAUCC\
) } def
/len { sequence length } bind def

/coor [
[73.07469940 128.60569763]
[68.72695160 123.77507019]
[65.23513031 118.29374695]
[62.69478989 112.31173706]
[47.81498337 114.20681763]
[32.93517685 116.10189819]
[18.05536842 117.99697876]
[3.17556071 119.89205170]
[-11.70424652 121.78713226]
[-26.58405495 123.68221283]
[-41.46386337 125.57729340]
[-45.21731949 136.61369324]
[-52.82655716 145.37651062]
[-63.13530350 150.59375000]
[-74.59938812 151.52767944]
[-85.51802826 148.07893372]
[-94.28613281 140.79542542]
[-99.63024902 130.78576660]
[-114.61099243 131.54551697]
[-129.59173584 132.30525208]
[-144.57249451 133.06498718]
[-148.33534241 135.72152710]
[-152.34814453 136.85194397]
[-156.07676697 136.57487488]
[-159.08686829 135.17741394]
[-161.09196472 133.06498718]
[-176.07270813 132.30525208]
[-191.05345154 131.54551697]
[-206.03421021 130.78576660]
[-218.85438538 140.43058777]
[-234.35162354 136.28146362]
[-240.63775635 121.52124023]
[-232.89060974 107.47270966]
[-217.05313110 104.91269684]
[-205.27447510 115.80502319]
[-190.29371643 116.56476593]
[-175.31297302 117.32450104]
[-160.33222961 118.08423615]
[-145.33222961 118.08423615]
[-130.35147095 117.32450104]
[-115.37072754 116.56476593]
[-100.38998413 115.80502319]
[-91.24467468 99.63972473]
[-74.12278748 92.06941986]
[-55.72278595 96.24878693]
[-43.35894012 110.69748688]
[-28.47913361 108.80240631]
[-13.59932613 106.90732574]
[1.28048193 105.01224518]
[16.16028976 103.11717224]
[31.04009628 101.22209167]
[45.91990662 99.32701111]
[60.79971313 97.43193054]
[73.29725647 71.18644714]
[100.41594696 60.71788406]
[103.43542480 46.02493668]
[98.63446045 30.94974709]
[108.77536011 20.04051018]
[111.79483795 5.34756136]
[114.81431580 -9.34538746]
[117.83379364 -24.03833580]
[120.85327148 -38.73128510]
[123.87274933 -53.42423630]
[116.28048706 -67.55707550]
[122.72847748 -82.24730682]
[138.27038574 -86.22584534]
[150.98377991 -76.44068909]
[151.11602783 -60.39818573]
[138.56570435 -50.40475845]
[135.54621887 -35.71180725]
[132.52674866 -21.01885796]
[129.50726318 -6.32590961]
[126.48778534 8.36703968]
[123.46830750 23.05998802]
[128.48524475 37.08423996]
[118.12837219 49.04441452]
[115.10889435 63.73736191]
[122.88836670 68.07226562]
[129.49156189 74.04801178]
[134.57910156 81.35749054]
[137.88955688 89.62505341]
[139.25276184 98.42580414]
[154.07978821 100.69721985]
[168.90681458 102.96863556]
[183.73384094 105.24005890]
[198.56086731 107.51147461]
[213.38789368 109.78289032]
[228.29051208 111.48932648]
[243.24720764 112.62832642]
[258.20388794 113.76731873]
[273.16058350 114.90631866]
[284.98745728 104.42296600]
[300.75793457 105.45635223]
[311.11566162 117.39340210]
[309.91558838 133.15205383]
[297.86968994 143.38301086]
[282.12460327 142.01638794]
[272.02160645 129.86300659]
[257.06491089 128.72401428]
[242.10820007 127.58501434]
[227.15150452 126.44602203]
[224.19256592 128.55639648]
[220.02960205 129.27285767]
[215.36073303 128.02980042]
[211.11647034 124.60991669]
[196.28944397 122.33849335]
[181.46241760 120.06707764]
[166.63539124 117.79566193]
[151.80836487 115.52424622]
[136.98135376 113.25283051]
[131.36718750 123.65072632]
[122.91491699 131.90867615]
[129.17755127 145.53877258]
[142.86334229 154.57377625]
[141.61172485 170.92509460]
[126.71026611 177.77188110]
[113.48830414 168.07077026]
[115.54746246 151.80140686]
[109.28482819 138.17132568]
[102.86447906 139.17974854]
[96.36573792 139.11584473]
[89.96646118 137.98138428]
[83.84179688 135.80740356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[18 42]
[19 41]
[20 40]
[21 39]
[26 38]
[27 37]
[28 36]
[29 35]
[55 77]
[56 76]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 101]
[89 100]
[90 99]
[91 98]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
