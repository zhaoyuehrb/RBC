%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUACGCUACACCCGGAAGUGUCUUCAGGGAGAGGAAGCCGGCGGCCUCACUGCUAUGGGCCGCAACAAGAAGAAGAAGCGAGAUGGUGACGACCGGCGGCCGAGGCUCGUUCUUAGCUUCGACGAGGAGAAGAGGCGGGAGUACCUGACAGGCU\
) } def
/len { sequence length } bind def

/coor [
[116.91509247 210.10401917]
[103.53028107 217.95426941]
[88.09080505 216.40435791]
[76.53345490 206.05026245]
[73.30226898 190.87333679]
[79.63970184 176.70942688]
[93.10888672 169.00483704]
[94.60714722 154.07984924]
[96.10540009 139.15486145]
[89.48878479 135.62351990]
[76.75572205 143.55252075]
[76.25554657 128.56083679]
[69.63892365 125.02950287]
[58.07357788 134.58160400]
[46.50823212 144.13371277]
[40.79514694 158.88740540]
[26.05495644 161.02658081]
[14.48960876 170.57868958]
[2.92426038 180.13078308]
[-8.64108753 189.68289185]
[-17.00307465 204.43122864]
[-33.48987198 200.47879028]
[-34.25588226 183.54214478]
[-18.19319344 178.11755371]
[-6.62784529 168.56544495]
[4.93750238 159.01333618]
[16.50284958 149.46122742]
[21.38870430 135.39077759]
[36.95612335 132.56835938]
[48.52147293 123.01625824]
[60.08682251 113.46415710]
[60.74125671 100.31874847]
[65.32795715 88.92758942]
[72.83135223 80.34282684]
[81.99901581 75.16679382]
[76.43252563 61.23789597]
[62.18442154 54.94271469]
[56.73762894 40.73753738]
[62.82692719 27.19294167]
[57.26043701 13.26404476]
[51.69394302 -0.66485226]
[34.92745209 2.80125713]
[16.09885406 -9.34686184]
[3.63724232 -17.69600677]
[-8.82437038 -26.04515076]
[-21.28598213 -34.39429474]
[-33.74759293 -42.74344254]
[-46.20920563 -51.09258652]
[-55.13471985 -53.28878021]
[-58.83433151 -59.73554230]
[-71.12639618 -68.33235931]
[-86.64343262 -65.33286285]
[-99.68962860 -74.25320435]
[-102.52489471 -89.80108643]
[-93.46712494 -102.75224304]
[-77.89012909 -105.42297363]
[-65.03546906 -96.22877502]
[-62.52957916 -80.62442017]
[-50.23751831 -72.02760315]
[-37.86006165 -63.55419922]
[-25.39844894 -55.20505524]
[-12.93683720 -46.85590744]
[-0.47522500 -38.50676346]
[11.98638725 -30.15761948]
[24.44799995 -21.80847359]
[31.75029755 -23.51915741]
[24.81699753 -36.82063675]
[17.88369751 -50.12211609]
[10.95039749 -63.42359543]
[4.01709700 -76.72507477]
[-8.05026531 -85.63455200]
[-15.51768875 -98.64368439]
[-17.12511635 -113.55731201]
[-12.60131073 -127.85888672]
[-2.70962000 -139.13516235]
[10.88082504 -145.48338318]
[25.87676620 -145.83232117]
[39.74777985 -140.12312317]
[50.15325928 -129.31913757]
[55.33738327 -115.24345398]
[54.42537689 -100.27120972]
[47.57063675 -86.92820740]
[47.26670074 -71.93128204]
[46.96276474 -56.93436432]
[46.65882874 -41.93744278]
[46.35489655 -26.94052315]
[53.65719223 -28.65120697]
[61.11382675 -41.66652679]
[68.57046509 -54.68185043]
[67.97471619 -71.07017517]
[82.01137543 -79.54981995]
[96.24071503 -71.39765167]
[96.02482605 -54.99992752]
[81.58578491 -47.22521591]
[74.12915039 -34.20989227]
[66.67251587 -21.19457245]
[65.62284088 -6.23134422]
[71.18933105 7.69755268]
[76.75582123 21.62644958]
[90.50289154 27.24371147]
[96.34653473 41.29029846]
[90.36141968 55.67140198]
[95.92790985 69.60030365]
[121.35991669 77.98914337]
[130.50820923 103.15793610]
[144.59788513 108.30390167]
[158.68756104 113.44987488]
[172.97184753 118.02799988]
[187.42787170 122.03095245]
[201.88388062 126.03390503]
[216.33990479 130.03684998]
[230.79591370 134.03981018]
[239.95906067 133.31535339]
[245.49960327 138.27017212]
[259.87261963 142.56156921]
[274.24566650 146.85296631]
[288.03030396 139.59890747]
[302.54544067 144.15573120]
[309.37615967 157.34197998]
[323.74917603 161.63337708]
[338.12219238 165.92477417]
[352.49523926 170.21618652]
[367.23724365 163.88746643]
[381.30807495 171.59403992]
[383.91378784 187.42407227]
[373.05551147 199.23411560]
[357.06277466 197.96452332]
[348.20382690 184.58920288]
[333.83081055 180.29780579]
[319.45779419 176.00640869]
[305.08474731 171.71501160]
[292.14260864 178.99761963]
[277.50518799 174.85028076]
[269.95425415 161.22599792]
[255.58123779 156.93460083]
[241.20820618 152.64320374]
[226.79296875 148.49581909]
[212.33694458 144.49287415]
[197.88093567 140.48991394]
[183.42491150 136.48696899]
[168.96890259 132.48400879]
[166.43318176 133.79927063]
[163.20962524 134.16035461]
[159.66983032 133.29475403]
[156.27894592 131.07341003]
[153.54159546 127.53955078]
[139.45191956 122.39358521]
[125.36224365 117.24761200]
[124.36466980 122.19972992]
[122.44272614 127.18495941]
[119.57176971 132.03698730]
[115.75619507 136.58387756]
[111.03038788 140.65312195]
[109.53212738 155.57810974]
[108.03387451 170.50308228]
[119.70286560 180.73120117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 155]
[8 154]
[9 153]
[13 31]
[14 30]
[15 29]
[17 27]
[18 26]
[19 25]
[20 24]
[35 103]
[36 102]
[39 99]
[40 98]
[41 97]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[50 59]
[51 58]
[87 96]
[88 95]
[89 94]
[105 148]
[106 147]
[107 146]
[108 141]
[109 140]
[110 139]
[111 138]
[112 137]
[114 136]
[115 135]
[116 134]
[119 131]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
