%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAUGCGGGGGCGGGGCAGCGGCGACGCUGGGUGUGUGGGCGCAGAUGGCGGCGGCGCACGGCGCCUGAGCGGGCCGGGGCCAUGAGCGCCGCCCGGCCCCAGUUCAGCAUUGAUGAUGCCUUCGAGCUGUCCCUGGAGGACGGGGGCCCUGGGCCCGAGUCCAGCGGGGUCGCGCGCUUUG\
) } def
/len { sequence length } bind def

/coor [
[76.07514191 258.84487915]
[75.82179260 243.84701538]
[75.56845093 228.84915161]
[75.31510925 213.85128784]
[75.06176758 198.85343933]
[67.11061859 186.25865173]
[74.61373138 172.32977295]
[74.36038971 157.33190918]
[74.10704803 142.33404541]
[73.85370636 127.33618927]
[65.28468323 115.02474213]
[51.30839539 109.57833099]
[37.33210754 104.13191986]
[23.35581970 98.68551636]
[9.37953091 93.23910522]
[-6.28818130 95.43759918]
[-15.33748341 83.60715485]
[-29.31377220 78.16074371]
[-43.29006195 72.71434021]
[-57.26634979 67.26792908]
[-72.09337616 69.53934479]
[-83.79824829 78.91996765]
[-95.50312042 88.30058289]
[-107.20799255 97.68119812]
[-112.65502167 113.14929199]
[-128.82188416 115.89969635]
[-139.07748413 103.10303497]
[-132.87174988 87.92341614]
[-116.58860779 85.97632599]
[-104.88373566 76.59571075]
[-93.17886353 67.21509552]
[-81.47399139 57.83447647]
[-81.28399658 50.33688354]
[-96.05329132 52.95753479]
[-109.11934662 60.32492065]
[-123.30803680 55.45859909]
[-129.10197449 41.62277222]
[-122.61476135 28.09812737]
[-108.19783020 23.95663071]
[-95.52161407 31.97635651]
[-80.90400696 35.34169769]
[-80.71401215 27.84410286]
[-91.92873383 17.88268471]
[-103.14346313 7.92126560]
[-114.35819244 -2.04015350]
[-125.57292175 -12.00157261]
[-141.13160706 -11.24972343]
[-152.36302185 -21.51177788]
[-152.98391724 -36.34923172]
[-164.19863892 -46.31065369]
[-175.41337585 -56.27207184]
[-186.62809753 -66.23348999]
[-197.84283447 -76.19490814]
[-213.40150452 -75.44306183]
[-224.63293457 -85.70511627]
[-225.25382996 -100.54257202]
[-236.46855164 -110.50399017]
[-247.68327332 -120.46540833]
[-258.89801025 -130.42681885]
[-269.09143066 -127.15072632]
[-279.64337158 -128.40362549]
[-288.64804077 -133.89151001]
[-294.50735474 -142.56158447]
[-296.21438599 -152.80374146]
[-293.52587891 -162.74931335]
[-304.22167969 -173.26596069]
[-320.02130127 -172.88188171]
[-331.40710449 -183.84266663]
[-331.62411499 -199.64546204]
[-320.54357910 -210.91476440]
[-304.73934937 -210.96469116]
[-293.58786011 -199.76560974]
[-293.70501709 -183.96176147]
[-283.00921631 -173.44511414]
[-263.61376953 -175.06163025]
[-249.03479004 -161.71279907]
[-248.93658447 -141.64155579]
[-237.72186279 -131.68013000]
[-226.50712585 -121.71871948]
[-215.29240417 -111.75730133]
[-200.48529053 -112.89092255]
[-188.97006226 -102.94837952]
[-187.88140869 -87.40963745]
[-176.66668701 -77.44821930]
[-165.45195007 -67.48680115]
[-154.23722839 -57.52537918]
[-143.02249146 -47.56396103]
[-128.21539307 -48.69758224]
[-116.70015717 -38.75504684]
[-115.61150360 -23.21630096]
[-104.39677429 -13.25488186]
[-93.18204498 -3.29346275]
[-81.96731567 6.66795635]
[-70.75259399 16.62937546]
[-51.81994247 53.29164124]
[-37.84365082 58.73804855]
[-23.86736488 64.18445587]
[-9.89107513 69.63086700]
[4.77695894 67.04280853]
[14.82593918 79.26281738]
[28.80222702 84.70922852]
[42.77851486 90.15563202]
[56.75480270 95.60204315]
[70.73109436 101.04844666]
[74.02701569 88.62537384]
[82.13771057 79.19452667]
[93.16882324 74.40787506]
[104.76962280 74.89408112]
[114.63142395 80.19711304]
[126.79639435 71.42137909]
[138.96136475 62.64564514]
[151.12632751 53.86991119]
[156.26963806 46.29405594]
[163.57168579 45.05073929]
[175.88313293 36.48171616]
[188.19459534 27.91269302]
[200.50604248 19.34366989]
[200.68588257 3.82763624]
[209.97843933 -8.59926224]
[224.81056213 -13.15862942]
[239.47898865 -8.09729576]
[248.34339905 4.63855267]
[247.99525452 20.15172195]
[238.56842041 32.47708130]
[223.68771362 36.87528229]
[209.07507324 31.65512085]
[196.76361084 40.22414398]
[184.45216370 48.79316711]
[172.14071655 57.36219025]
[159.90206909 66.03488159]
[147.73709106 74.81061554]
[135.57212830 83.58634949]
[123.40715790 92.36208344]
[124.56562042 98.33779144]
[124.22270966 104.41508484]
[137.45898438 111.47206879]
[150.69526672 118.52904510]
[163.93153381 125.58602905]
[177.16781616 132.64300537]
[192.11740112 128.26721191]
[205.44033813 135.61254883]
[209.51986694 149.89166260]
[222.75614929 156.94863892]
[235.99241638 164.00563049]
[249.22869873 171.06260681]
[264.17828369 166.68679810]
[277.50122070 174.03213501]
[281.58074951 188.31124878]
[294.81701660 195.36824036]
[308.05331421 202.42521667]
[321.28958130 209.48219299]
[334.52584839 216.53918457]
[351.34719849 218.65554810]
[353.97015381 235.40536499]
[338.60101318 242.56262207]
[327.46887207 229.77545166]
[314.23260498 222.71847534]
[300.99630737 215.66149902]
[287.76004028 208.60450745]
[274.52377319 201.54753113]
[260.39428711 206.11840820]
[246.87028503 199.15019226]
[242.17172241 184.29888916]
[228.93544006 177.24189758]
[215.69915771 170.18492126]
[202.46289062 163.12792969]
[188.33338928 167.69882202]
[174.80940247 160.73059082]
[170.11083984 145.87928772]
[156.87455750 138.82231140]
[143.63829041 131.76531982]
[130.40200806 124.70834351]
[117.16573334 117.65135956]
[105.10320282 126.46724701]
[88.85157013 127.08284760]
[89.10491180 142.08070374]
[89.35825348 157.07856750]
[89.61159515 172.07643127]
[97.58087158 185.74395752]
[90.05963135 198.60008240]
[90.31297302 213.59794617]
[90.56631470 228.59580994]
[90.81965637 243.59367371]
[91.07299805 258.59152222]
[93.58878326 277.80926514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 184]
[2 183]
[3 182]
[4 181]
[5 180]
[7 178]
[8 177]
[9 176]
[10 175]
[11 104]
[12 103]
[13 102]
[14 101]
[15 100]
[17 98]
[18 97]
[19 96]
[20 95]
[21 32]
[22 31]
[23 30]
[24 29]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[56 80]
[57 79]
[58 78]
[59 77]
[65 74]
[66 73]
[109 133]
[110 132]
[111 131]
[112 130]
[114 129]
[115 128]
[116 127]
[117 126]
[135 173]
[136 172]
[137 171]
[138 170]
[139 169]
[142 166]
[143 165]
[144 164]
[145 163]
[148 160]
[149 159]
[150 158]
[151 157]
[152 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
