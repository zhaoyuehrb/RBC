%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGUGGCUGCAGAGGCGAGGUGACGGCGCGUGCGGAACGAACUCUGCACCCCCAGGAAUGGGGAGCGCUGGCUUUUCCGUGGGAAAAUUCCACGUGGAAGUGGCCUCUCGCGGCCGGGAAUGUGUCUCGGGGACGCCCGAGUGUGGGAAUCGGCUCG\
) } def
/len { sequence length } bind def

/coor [
[231.87007141 338.18893433]
[221.20855713 324.38516235]
[215.22843933 307.98049927]
[214.50369263 290.51593018]
[219.11405945 273.63558960]
[228.63648987 258.93225098]
[218.89476013 247.52615356]
[209.15304565 236.12007141]
[199.41131592 224.71398926]
[189.66960144 213.30789185]
[179.92788696 201.90180969]
[170.18615723 190.49571228]
[160.33293152 179.18580627]
[150.36914062 167.97319031]
[140.40536499 156.76055908]
[130.44157410 145.54794312]
[120.47778320 134.33531189]
[110.51399994 123.12268829]
[103.00589752 125.96657562]
[94.75837708 126.36308289]
[86.57101440 124.13358307]
[79.28037262 119.36073303]
[73.67481232 112.39321136]
[70.41027069 103.82281494]
[69.93591309 94.43508911]
[72.43792725 85.13751221]
[58.36505508 79.94575500]
[44.29218292 74.75399780]
[30.21931267 69.56224823]
[16.14644432 64.37049103]
[2.07357359 59.17873383]
[-12.60876751 56.10808945]
[-27.58275223 55.22502518]
[-42.55673599 54.34196472]
[-57.53071976 53.45890427]
[-72.50470734 52.57584000]
[-87.47869110 51.69277954]
[-102.45267487 50.80971527]
[-114.09854126 61.49378586]
[-129.88436890 60.73022842]
[-140.44471741 48.97205353]
[-139.51431274 33.19517517]
[-127.64513397 22.75973511]
[-111.87897491 23.85689735]
[-101.56961060 35.83573151]
[-86.59562683 36.71879578]
[-71.62164307 37.60185623]
[-56.64765930 38.48492050]
[-41.67367554 39.36798096]
[-26.69968987 40.25104141]
[-11.72570610 41.13410568]
[-5.98545408 27.27591133]
[-17.19808006 17.31212616]
[-28.41070366 7.34833860]
[-39.62332916 -2.61544776]
[-50.83595276 -12.57923412]
[-66.99900055 -15.35196495]
[-72.42465973 -30.82756424]
[-61.53149033 -43.08606339]
[-45.52544022 -39.51696777]
[-40.87216568 -23.79185867]
[-29.65954208 -13.82807255]
[-18.44691658 -3.86428618]
[-7.23429251 6.09950066]
[3.97833228 16.06328773]
[11.06885052 32.04314041]
[7.26532936 45.10586166]
[21.33819962 50.29761887]
[35.41106796 55.48937607]
[49.48394012 60.68112946]
[63.55680847 65.87288666]
[77.62967682 71.06464386]
[91.12590027 64.51850128]
[95.76116180 50.25265503]
[100.39641571 35.98680878]
[105.03166962 21.72096062]
[109.66692352 7.45511293]
[114.30217743 -6.81073475]
[111.20805359 -22.32643700]
[122.49961090 -32.03983307]
[127.13486481 -46.30568314]
[131.77012634 -60.57152939]
[136.40538025 -74.83737946]
[141.04063416 -89.10322571]
[145.67588806 -103.36907196]
[150.31114197 -117.63491821]
[149.45529175 -134.56724548]
[165.48898315 -140.07699585]
[175.22195435 -126.19515228]
[164.57698059 -112.99966431]
[159.94172668 -98.73381805]
[155.30647278 -84.46797180]
[150.67121887 -70.20212555]
[146.03596497 -55.93627548]
[141.40071106 -41.67042542]
[136.76545715 -27.40457916]
[140.19111633 -12.90926647]
[128.56802368 -2.17548013]
[123.93276978 12.09036732]
[119.29751587 26.35621452]
[114.66226196 40.62206268]
[110.02700806 54.88791275]
[105.39175415 69.15375519]
[125.81604767 88.26658630]
[121.72662354 113.15889740]
[131.69041443 124.37152863]
[141.65419006 135.58415222]
[151.61798096 146.79676819]
[161.58177185 158.00939941]
[171.54556274 169.22203064]
[179.62933350 173.58818054]
[181.59225464 180.75399780]
[191.33396912 192.16007996]
[201.07568359 203.56617737]
[210.81741333 214.97225952]
[220.55912781 226.37835693]
[230.30085754 237.78443909]
[240.04257202 249.19053650]
[253.54104614 242.82269287]
[268.21597290 240.17343140]
[283.06320190 241.41717529]
[297.06851196 246.46228027]
[309.27697754 254.95761108]
[318.85800171 266.31704712]
[325.16189575 279.75985718]
[327.76385498 294.36447144]
[326.49267578 309.13150024]
[321.44189453 323.05227661]
[333.74789429 331.62908936]
[346.05392456 340.20590210]
[358.35995483 348.78274536]
[370.66598511 357.35955811]
[382.97198486 365.93637085]
[399.34890747 366.79013062]
[406.55590820 381.52072144]
[397.17907715 394.97460938]
[380.86447144 393.31155396]
[374.39517212 378.24240112]
[362.08914185 369.66555786]
[349.78314209 361.08874512]
[337.47711182 352.51193237]
[325.17108154 343.93511963]
[312.86505127 335.35830688]
[308.81869507 339.35342407]
[304.39199829 342.92254639]
[299.62963867 346.02963257]
[294.57968140 348.64340210]
[298.93392944 362.99752808]
[303.28820801 377.35162354]
[317.34274292 384.57974243]
[322.09011841 399.65414429]
[314.71380615 413.63146973]
[299.59005737 418.21920776]
[285.69149780 410.69555664]
[281.26391602 395.52413940]
[288.93411255 381.70590210]
[284.57983398 367.35177612]
[280.22555542 352.99768066]
[262.84188843 353.19137573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[13 110]
[14 109]
[15 108]
[16 107]
[17 106]
[18 105]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[73 103]
[74 102]
[75 101]
[76 100]
[77 99]
[78 98]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
[128 143]
[129 142]
[130 141]
[131 140]
[132 139]
[133 138]
[147 158]
[148 157]
[149 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
