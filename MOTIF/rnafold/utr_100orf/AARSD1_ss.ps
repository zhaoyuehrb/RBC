%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCUCCGUUCGCUCCCAGGCUUCUCUGCGCGUGCGCCUCCUCACACGCCUGCAGGUAUGGCGUUCUGGUGUCAGCGUGACAGUUAUGCCCGAGAGUUCACCACCACCGUGGUCUCCUGCUGUCCCGCGGAGCUGCAGACUGAAGGGAGCAACGGCA\
) } def
/len { sequence length } bind def

/coor [
[110.57356262 344.65676880]
[95.47651672 347.83209229]
[81.06751251 342.31994629]
[71.94440460 329.87918091]
[71.01834869 314.47964478]
[78.58484650 301.03524780]
[92.22945404 293.83605957]
[93.41372681 278.88287354]
[94.59799957 263.92968750]
[95.78227234 248.97653198]
[96.96654510 234.02334595]
[94.34567261 227.07008362]
[98.32479858 218.78739929]
[99.80427551 203.86053467]
[101.28374481 188.93368530]
[102.76322174 174.00682068]
[104.24269867 159.07995605]
[105.72216797 144.15309143]
[71.12198639 122.83023834]
[72.78083038 89.70048523]
[60.59352493 80.95579529]
[48.40622330 72.21110535]
[34.42835617 78.42129517]
[19.31854439 76.81183624]
[7.12410545 67.91452789]
[1.06099689 54.19976807]
[2.66596818 39.39133835]
[-9.52133465 30.64664459]
[-21.70863724 21.90195274]
[-33.98173523 13.27808666]
[-46.33943176 4.77588797]
[-58.69712448 -3.72631097]
[-71.05481720 -12.22850990]
[-83.41251373 -20.73070908]
[-95.93577576 -28.98709488]
[-108.61971283 -36.99444580]
[-121.30365753 -45.00179672]
[-133.98759460 -53.00914764]
[-146.67153931 -61.01649857]
[-155.60501099 -55.07657242]
[-165.97546387 -52.48397064]
[-176.57678223 -53.51368713]
[-186.18493652 -58.02097321]
[-193.69918823 -65.46105194]
[-198.26828003 -74.95484161]
[-199.38673401 -85.39275360]
[-196.95074463 -95.56440735]
[-208.96290588 -104.54817963]
[-220.97506714 -113.53195190]
[-232.98721313 -122.51572418]
[-244.99937439 -131.49949646]
[-259.41531372 -126.00548553]
[-274.50833130 -129.19984436]
[-285.46234131 -140.06324768]
[-288.78192139 -155.12922668]
[-283.40780640 -169.59030151]
[-271.05487061 -178.83197021]
[-255.66488647 -179.90527344]
[-242.14874268 -172.46769714]
[-234.81938171 -158.89256287]
[-236.01559448 -143.51165771]
[-224.00344849 -134.52787781]
[-211.99128723 -125.54410553]
[-199.97914124 -116.56033325]
[-187.96697998 -107.57656097]
[-169.79139709 -114.64250183]
[-150.87692261 -109.34011841]
[-138.84922791 -93.62896729]
[-138.66418457 -73.70043945]
[-125.98024750 -65.69308472]
[-113.29630280 -57.68573761]
[-100.61236572 -49.67838669]
[-87.92842865 -41.67103577]
[-83.10726166 -41.84654617]
[-78.13486481 -38.95869827]
[-74.91031647 -33.08840179]
[-62.55261993 -24.58620453]
[-50.19492722 -16.08400536]
[-37.83723068 -7.58180666]
[-25.47953796 0.92039204]
[-18.14739037 2.12728381]
[-12.96394634 9.71465015]
[-0.77664274 18.45934105]
[11.41066074 27.20403481]
[24.92505455 20.94090843]
[39.85924149 22.29222679]
[52.19340134 30.99480057]
[58.55730820 44.79326248]
[57.15091705 60.02379990]
[69.33821869 68.76849365]
[81.52552032 77.51318359]
[93.71649170 67.64697266]
[111.02285004 64.87655640]
[129.17370605 71.66743469]
[142.85128784 87.91669464]
[155.84167480 80.41669464]
[168.83204651 72.91669464]
[171.48890686 68.30001831]
[175.28656006 65.48032379]
[179.33453369 64.59019470]
[182.82171631 65.38344574]
[196.23358154 58.66617966]
[209.64544678 51.94890976]
[223.05732727 45.23163986]
[236.46919250 38.51436996]
[245.03904724 24.53260803]
[261.42318726 25.23386765]
[268.76702881 39.89675140]
[259.51583862 53.43734360]
[243.18646240 51.92623901]
[229.77459717 58.64350891]
[216.36271667 65.36077881]
[202.95085144 72.07804871]
[189.53898621 78.79531860]
[176.33204651 85.90707397]
[163.34167480 93.40707397]
[150.35128784 100.90707397]
[151.53556824 115.86025238]
[165.54457092 121.22193909]
[179.55358887 126.58361816]
[193.56259155 131.94529724]
[209.37393188 124.52027893]
[225.35847473 130.68154907]
[231.83543396 146.17608643]
[245.94763184 151.25994873]
[260.05984497 156.34381104]
[277.01077271 156.02359009]
[282.01095581 172.22341919]
[267.82839966 181.51275635]
[254.97598267 170.45600891]
[240.86378479 165.37216187]
[226.75157166 160.28829956]
[215.94371033 167.36047363]
[202.84103394 166.89288330]
[192.25453186 158.83224487]
[188.20091248 145.95431519]
[174.19189453 140.59262085]
[160.18289185 135.23094177]
[146.17388916 129.86926270]
[139.79266357 133.81008911]
[152.99963379 140.92176819]
[153.44432068 155.91517639]
[140.68203735 163.79705811]
[127.47493744 156.68563843]
[127.03024292 141.69174194]
[120.64903259 145.63256836]
[119.16955566 160.55943298]
[117.69007874 175.48629761]
[116.21060944 190.41314697]
[114.73113251 205.34001160]
[113.25165558 220.26687622]
[111.91972351 235.20762634]
[110.73545074 250.16079712]
[109.55117798 265.11398315]
[108.36690521 280.06713867]
[107.18263245 295.02032471]
[119.52391052 304.27755737]
[124.87979126 318.74539185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 156]
[8 155]
[9 154]
[10 153]
[11 152]
[13 151]
[14 150]
[15 149]
[16 148]
[17 147]
[18 146]
[20 91]
[21 90]
[22 89]
[27 84]
[28 83]
[29 82]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[35 73]
[36 72]
[37 71]
[38 70]
[39 69]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[95 117]
[96 116]
[97 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
[118 139]
[119 138]
[120 137]
[121 136]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
