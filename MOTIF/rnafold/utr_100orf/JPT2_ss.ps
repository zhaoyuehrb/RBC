%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCGCGCGGCGAGCUGAGGGUGGCGGCGGUCGACAUGUUCCAGGUCCCGGAUAGCGAGGGCGGCCGCGCCGGCUCCAGGGCCAUGAAGCCCCCAGGAGGAGAAUCGAGCAAUCUUUUUGGAAGUCCAGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[77.32519531 112.78350830]
[75.58607483 103.91791534]
[60.75239563 101.69038391]
[45.91871262 99.46284485]
[31.08503151 97.23531342]
[16.25135231 95.00777435]
[1.41767073 92.78024292]
[-13.44057465 90.72292328]
[-28.32143211 88.83609772]
[-42.98525238 94.77604675]
[-54.63817215 85.49925995]
[-69.51902771 83.61243439]
[-83.95037842 95.77964783]
[-102.38828278 93.66249084]
[-113.30655670 79.04863739]
[-128.25827026 77.84603119]
[-143.20999146 76.64342499]
[-158.16169739 75.44082642]
[-175.86972046 84.95136261]
[-191.38317871 73.49578857]
[-206.37429810 72.97993469]
[-221.36543274 72.46408081]
[-236.36543274 72.46408081]
[-251.35655212 72.97993469]
[-266.34768677 73.49578857]
[-274.90359497 76.94357300]
[-281.68762207 73.84761810]
[-296.68661499 74.01959991]
[-311.68563843 74.19158173]
[-326.68466187 74.36356354]
[-336.45770264 86.57099915]
[-351.80114746 89.58973694]
[-365.47027588 81.99441528]
[-371.01095581 67.37132263]
[-365.80703735 52.62502670]
[-352.31564331 44.71828079]
[-336.90701294 47.38441086]
[-326.85662842 59.36454773]
[-311.85763550 59.19256592]
[-296.85861206 59.02058411]
[-281.85958862 58.84860229]
[-266.86352539 58.50466537]
[-251.87240601 57.98881149]
[-236.88128662 57.47295761]
[-234.18374634 55.07500839]
[-230.15881348 53.91132736]
[-225.42187500 54.60575867]
[-220.84957886 57.47295761]
[-205.85844421 57.98881149]
[-190.86732483 58.50466537]
[-183.97245789 50.81850052]
[-173.75978088 48.18725204]
[-163.59234619 51.72973251]
[-156.95909119 60.48911285]
[-142.00738525 61.69171524]
[-127.05567169 62.89431763]
[-112.10395813 64.09692383]
[-105.15206909 54.92177963]
[-94.50833893 50.23029327]
[-82.80587769 51.31089020]
[-73.00228882 58.00791931]
[-67.63220215 68.73158264]
[-52.75134659 70.61840057]
[-39.15190506 64.54350281]
[-26.43460846 73.95524597]
[-11.55375099 75.84207153]
[-4.46008730 73.54256439]
[3.64520621 77.94655609]
[18.47888756 80.17409515]
[33.31256866 82.40162659]
[48.14624786 84.62916565]
[62.97993088 86.85669708]
[77.81361389 89.08423615]
[98.54416656 71.39939117]
[127.59549713 82.73951721]
[139.07386780 73.08306885]
[150.55224609 63.42662430]
[162.03062439 53.77017975]
[167.93734741 34.55730438]
[187.02346802 31.79731560]
[198.04705811 21.62477875]
[209.07064819 11.45224380]
[220.09423828 1.27970850]
[220.47778320 -14.51992607]
[231.97848511 -25.36010361]
[247.77317810 -24.80953979]
[258.49114990 -13.19487286]
[257.77365112 2.59311962]
[246.04629517 13.18770218]
[230.26678467 12.30329800]
[219.24319458 22.47583389]
[208.21960449 32.64836884]
[197.19601440 42.82090378]
[197.69642639 53.13428879]
[192.28356934 62.18543243]
[182.56250000 66.81432343]
[171.68705750 65.24855804]
[160.20869446 74.90499878]
[148.73031616 84.56144714]
[137.25193787 94.21788788]
[151.95471191 91.24658966]
[166.65747070 88.27528381]
[179.22991943 80.09398651]
[194.03999329 77.71458435]
[208.54241943 81.54602051]
[220.24473572 90.92981720]
[227.13578796 104.25323486]
[228.03123474 119.22648621]
[222.77717590 133.27621460]
[212.27661133 143.98780823]
[198.33419800 149.52032471]
[183.34609985 148.92294312]
[169.88821411 142.29833984]
[160.27380371 130.78565979]
[147.09222412 123.62703705]
[133.91064453 116.46841431]
[142.04653931 129.07028198]
[150.18243408 141.67214966]
[158.31834412 154.27401733]
[166.45423889 166.87588501]
[174.59014893 179.47775269]
[182.72604370 192.07963562]
[197.55680847 199.07823181]
[198.64140320 215.44146729]
[184.86407471 224.33625793]
[170.39776611 216.61239624]
[170.12417603 200.21553040]
[161.98826599 187.61366272]
[153.85237122 175.01179504]
[145.71647644 162.40992737]
[137.58056641 149.80804443]
[129.44467163 137.20617676]
[121.30876923 124.60430908]
[110.99246216 129.24769592]
[100.15781403 129.94099426]
[90.20805359 126.91156006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[8 66]
[9 65]
[11 63]
[12 62]
[15 57]
[16 56]
[17 55]
[18 54]
[20 50]
[21 49]
[22 48]
[23 44]
[24 43]
[25 42]
[27 41]
[28 40]
[29 39]
[30 38]
[75 100]
[76 99]
[77 98]
[78 97]
[80 93]
[81 92]
[82 91]
[83 90]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
