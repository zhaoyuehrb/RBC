%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAUGCACACGACCCAGAAGGACACGACGUACACCAAGAUCUUCGUCGGGGGGCUGCCCUACCACACCACCGACGCCAGCCUGCGCAAGUACUUCGAGGUCU\
) } def
/len { sequence length } bind def

/coor [
[62.93365479 326.61511230]
[58.03949356 341.00662231]
[48.00672913 352.42642212]
[34.36528397 359.13308716]
[19.19537926 360.10391235]
[4.81031799 355.19082642]
[-6.59628439 345.14303589]
[-13.28500366 331.49276733]
[-14.23585892 316.32162476]
[-9.30385113 301.94302368]
[0.75892454 290.54965210]
[14.41796684 283.87890625]
[29.59037209 282.94799805]
[34.43851852 268.75308228]
[39.28666306 254.55818176]
[44.13480759 240.36326599]
[37.36198044 227.14720154]
[42.07647705 212.68247986]
[55.98462296 205.66812134]
[60.83276749 191.47320557]
[65.68091583 177.27830505]
[70.52906036 163.08338928]
[67.32061768 148.53845215]
[79.10298157 137.97973633]
[83.95112610 123.78482819]
[65.24069214 95.27331543]
[86.82767487 60.68236542]
[75.68050385 50.64540863]
[64.53333282 40.60844803]
[53.38615799 30.57148933]
[42.23898315 20.53453064]
[28.53394508 27.11026955]
[13.35544205 27.93577576]
[-0.98191506 22.88516808]
[-12.29178143 12.72862625]
[-18.84948540 -0.98505145]
[-19.65502548 -16.16462898]
[-14.58556175 -30.49532890]
[-4.41415119 -41.79182434]
[9.30814075 -48.33148575]
[24.48876381 -49.11705399]
[38.81278229 -44.02874374]
[50.09589005 -33.84247971]
[56.61749268 -20.11159897]
[57.38309479 -4.92995501]
[52.27594376 9.38735867]
[63.42311478 19.42431831]
[74.57028961 29.46127701]
[85.71746063 39.49823380]
[96.86463165 49.53519440]
[111.19822693 45.11386871]
[114.75443268 30.54151726]
[118.31063843 15.96916580]
[121.86684418 1.39681530]
[116.75120544 -14.18401432]
[127.88692474 -26.22260857]
[143.81852722 -22.33469200]
[148.15695190 -6.51982117]
[136.43919373 4.95302105]
[132.88298035 19.52537155]
[129.32678223 34.09772110]
[125.77057648 48.67007446]
[129.90229797 54.92937088]
[140.00952148 43.84586716]
[150.11674500 32.76236343]
[155.67799377 18.83136940]
[168.31782532 10.75458145]
[183.29614258 11.56090927]
[194.99584961 20.94796944]
[199.02938843 35.39547729]
[193.88414001 49.48541641]
[181.48962402 57.93385315]
[166.49372864 57.57241821]
[152.32974243 62.51019669]
[138.16575623 67.44796753]
[142.29748535 73.70726776]
[157.09484863 76.16453552]
[171.89219666 78.62181091]
[184.59985352 69.22547150]
[200.21713257 71.64951324]
[209.47859192 84.45580292]
[206.88957214 100.04658508]
[193.98608398 109.17212677]
[178.42355347 106.41841125]
[169.43493652 93.41916656]
[154.63757324 90.96189880]
[139.84020996 88.50463104]
[137.52319336 107.53538513]
[127.33666229 121.98312378]
[112.83956146 129.18676758]
[98.14604187 128.63298035]
[93.29789734 142.82788086]
[96.15956116 158.38813782]
[84.72396851 167.93153381]
[79.87582397 182.12644958]
[75.02767944 196.32135010]
[70.17953491 210.51626587]
[76.89101410 224.57307434]
[71.77209473 238.89965820]
[58.32971573 245.21141052]
[53.48157120 259.40631104]
[48.63342667 273.60122681]
[43.78528214 287.79614258]
[55.21828079 297.81387329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 103]
[14 102]
[15 101]
[16 100]
[19 97]
[20 96]
[21 95]
[22 94]
[24 92]
[25 91]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[51 62]
[52 61]
[53 60]
[54 59]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
