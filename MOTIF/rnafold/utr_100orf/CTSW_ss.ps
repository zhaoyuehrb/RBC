%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGCGGCUUCCUGCCUCCAUGCCACUCCAGACUGCACCGGCAUGGCACUGACUGCCCACCCCUCCUGCCUCCUGGCCCUGUUGGUGGCAGGCCUAGCCCAAGGCAUCAGAGGCCCCCUUAGGGCCCAGGACCUAGGUCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.78620148 185.94079590]
[87.80884552 185.11686707]
[88.63249969 170.13999939]
[89.45593262 155.16261292]
[90.27935791 140.18524170]
[82.79067230 139.77351379]
[75.81982422 153.05535889]
[68.84897614 166.33720398]
[72.22985840 182.01997375]
[61.96537399 194.34960938]
[45.92955399 193.86787415]
[36.42370987 180.94430542]
[40.73991013 165.49276733]
[55.56713486 159.36634827]
[62.53798294 146.08451843]
[69.50882721 132.80267334]
[67.38202667 122.46593475]
[68.08509827 112.90966797]
[53.28824997 115.37003326]
[38.49140549 117.83039093]
[23.69456100 120.29075623]
[8.89771652 122.75112152]
[-5.89912748 125.21148682]
[-20.69597244 127.67185211]
[-23.75441742 142.53826904]
[-31.97998810 155.29383850]
[-44.26024628 164.21345520]
[-58.93438339 168.09083557]
[-74.01784515 166.40159607]
[-87.47071838 159.37417603]
[-97.47361755 147.95898438]
[-102.67372131 133.69984436]
[-102.36776733 118.52516174]
[-96.59712219 104.48720551]
[-86.14223480 93.48449707]
[-72.41703033 87.00505066]
[-57.27773285 85.92516327]
[-42.77181244 90.39088440]
[-30.86106873 99.79825592]
[-23.15633774 112.87500763]
[-8.35949230 110.41464233]
[6.43735218 107.95427704]
[21.23419571 105.49391174]
[36.03104019 103.03354645]
[50.82788467 100.57318878]
[65.62473297 98.11282349]
[71.66659546 80.44396210]
[86.04416656 68.52849579]
[104.52755737 65.87197876]
[109.69225311 51.78915405]
[114.85694122 37.70632935]
[120.02163696 23.62350655]
[122.80645752 8.88428020]
[123.13597107 -6.11210060]
[123.46547699 -21.10848045]
[123.79499054 -36.10486221]
[124.12450409 -51.10124207]
[121.16661072 -59.82723236]
[124.62957764 -66.42244720]
[125.28843689 -81.40797424]
[125.94730377 -96.39349365]
[112.22425079 -102.87064362]
[102.05392456 -114.07811737]
[96.96307373 -128.28715515]
[97.69813538 -143.32202148]
[104.11600494 -156.89317322]
[115.21054077 -166.94586182]
[129.27020264 -171.97131348]
[129.92907715 -186.95683289]
[130.58793640 -201.94235229]
[122.54418182 -216.23326111]
[131.13029480 -230.20504761]
[147.51362610 -229.48472595]
[154.84039307 -214.81330872]
[145.57345581 -201.28349304]
[144.91459656 -186.29797363]
[144.25573730 -171.31243896]
[157.82008362 -165.07246399]
[167.98956299 -154.08485413]
[173.19160461 -140.00283813]
[172.60432434 -124.96146393]
[166.28607178 -111.25404358]
[155.17138672 -100.98239899]
[140.93283081 -95.73463440]
[140.27395630 -80.74910736]
[139.61509705 -65.76358795]
[139.12088013 -50.77172852]
[138.79136658 -35.77534866]
[138.46186829 -20.77896881]
[138.13235474 -5.78258944]
[137.80284119 9.21379089]
[150.14759827 17.73476219]
[164.05261230 12.10887432]
[177.95762634 6.48298597]
[191.86264038 0.85709804]
[197.79922485 -13.78982735]
[212.38632202 -19.87193489]
[226.96966553 -13.78081799]
[232.89721680 0.86977124]
[226.65225220 15.38789845]
[211.93981934 21.16021729]
[197.48852539 14.76211071]
[183.58351135 20.38799858]
[169.67849731 26.01388741]
[155.77348328 31.63977432]
[143.46069336 33.00069809]
[134.10446167 28.78820038]
[128.93977356 42.87102509]
[123.77507782 56.95384979]
[118.61038208 71.03667450]
[132.32199097 88.14632416]
[132.92317200 110.06406403]
[145.96812439 117.46873474]
[159.01307678 124.87340546]
[172.05804443 132.27807617]
[185.10299683 139.68273926]
[200.88864136 136.82040405]
[212.87338257 147.48554993]
[211.86357117 163.49679565]
[198.63381958 172.57167053]
[183.33288574 167.74873352]
[177.69831848 152.72769165]
[164.65336609 145.32302856]
[151.60841370 137.91836548]
[138.56346130 130.51368713]
[125.51850128 123.10901642]
[126.35916138 127.20430756]
[126.76395416 131.49717712]
[126.71140289 135.94757080]
[132.18421936 149.91354370]
[137.65702820 163.87951660]
[143.12983704 177.84548950]
[156.27645874 187.64845276]
[154.09167480 203.90141296]
[138.82301331 209.88471985]
[126.17755127 199.44323730]
[129.16386414 183.31829834]
[123.69105530 169.35232544]
[118.21824646 155.38635254]
[112.74542999 141.42037964]
[105.25674438 141.00866699]
[104.43331146 155.98605347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[8 14]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[49 110]
[50 109]
[51 108]
[52 107]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[59 86]
[60 85]
[61 84]
[68 77]
[69 76]
[70 75]
[92 105]
[93 104]
[94 103]
[95 102]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
