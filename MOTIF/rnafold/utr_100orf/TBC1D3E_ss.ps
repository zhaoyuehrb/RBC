%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:48:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGGAUGGACGUGGUAGAGGUCGCGGGCAGUUGGUGGGCACAAGAGCGAGAGGACAUCAUUAUGAAAUACGAAAAGGGACACCGAGCUGGGCUGCCAGAGGACA\
) } def
/len { sequence length } bind def

/coor [
[49.63624954 620.24859619]
[37.16909790 611.90771484]
[31.87100029 597.87316895]
[26.54341125 611.89514160]
[21.21582222 625.91717529]
[21.09206581 635.06079102]
[15.69186974 640.11737061]
[10.14359093 654.05352783]
[4.59531116 667.98968506]
[9.59265041 683.23455811]
[0.66941530 696.56707764]
[-15.32925129 697.75964355]
[-26.13054276 685.89746094]
[-23.44863129 670.08013916]
[-9.34084988 662.44140625]
[-3.79257083 648.50524902]
[1.75570834 634.56909180]
[7.19381142 620.58959961]
[12.52139950 606.56756592]
[17.84898758 592.54559326]
[22.28108978 578.21533203]
[25.80003738 563.63391113]
[29.31898499 549.05249023]
[32.83793259 534.47113037]
[24.87562561 521.93566895]
[28.23661995 507.09796143]
[41.43893051 498.83132935]
[44.95787811 484.24993896]
[48.47682571 469.66854858]
[51.76514816 455.03344727]
[54.82202911 440.34820557]
[57.87891006 425.66299438]
[60.93579102 410.97778320]
[63.99266815 396.29257202]
[59.01145935 382.25561523]
[69.39875031 370.32183838]
[72.45562744 355.63662720]
[75.51251221 340.95141602]
[67.15844727 328.67358398]
[70.04936218 313.73712158]
[82.98412323 305.05786133]
[86.04100800 290.37265015]
[71.10388184 284.62792969]
[60.66111755 273.16067505]
[56.60437012 258.70346069]
[59.37100601 244.44776917]
[67.93968964 233.34112549]
[80.13774109 227.47782898]
[79.66421509 212.48529053]
[79.19068909 197.49276733]
[78.71715546 182.50024414]
[78.24362946 167.50772095]
[77.77010345 152.51519775]
[77.29656982 137.52267456]
[76.82304382 122.53015137]
[68.95026398 109.76225281]
[55.76706314 102.60660553]
[42.58386612 95.45095825]
[29.40066719 88.29531097]
[24.16311264 88.43593597]
[19.83225822 86.71949768]
[16.96489143 83.80471039]
[15.77448940 80.47596741]
[2.94484353 72.70420837]
[-12.91564846 75.11757660]
[-24.59301949 64.11673737]
[-23.12939262 48.14058685]
[-9.64753437 39.44466782]
[5.51042652 44.69973755]
[10.71659946 59.87456512]
[23.54624557 67.64631653]
[36.55631638 75.11211395]
[49.73951340 82.26776123]
[62.92271042 89.42340851]
[76.10591125 96.57905579]
[87.55418396 86.88694763]
[82.67190552 72.70373535]
[77.78962708 58.52053070]
[63.61750031 46.77040100]
[67.62522125 29.68945503]
[62.51964951 15.58508873]
[57.41408157 1.48072231]
[52.30851364 -12.62364483]
[47.20294189 -26.72801018]
[42.09737396 -40.83237839]
[36.99180222 -54.93674469]
[24.10613823 -65.08029938]
[26.71536636 -81.27053833]
[42.13533783 -86.85234070]
[54.50331116 -76.08361816]
[51.09616852 -60.04231262]
[56.20174026 -45.93794632]
[61.30730820 -31.83358002]
[66.41287994 -17.72921371]
[71.51844788 -3.62484717]
[76.62401581 10.47951984]
[81.72958374 24.58388519]
[92.55183411 30.00185204]
[96.91749573 41.71858215]
[91.97283173 53.63825226]
[96.85511017 67.82145691]
[101.73738861 82.00466919]
[116.73384857 82.35984802]
[131.72897339 82.71501160]
[137.27725220 68.77884674]
[142.82553101 54.84268570]
[148.37382507 40.90652466]
[153.92210388 26.97036362]
[147.44352722 12.55496883]
[153.13372803 -2.18942404]
[167.61682129 -8.51522636]
[182.30021667 -2.66945267]
[188.47254944 11.87970352]
[182.47186279 26.50048637]
[167.85826111 32.51864243]
[162.30998230 46.45480347]
[156.76170349 60.39096832]
[151.21342468 74.32712555]
[145.66514587 88.26329041]
[151.46507263 93.01837921]
[168.86483765 107.28364563]
[181.44274902 99.11074829]
[184.84217834 83.90937805]
[197.71438599 75.80007935]
[212.18562317 79.13459015]
[224.76353455 70.96170044]
[237.34144592 62.78880310]
[239.06338501 47.24631500]
[250.40863037 36.48436737]
[266.02029419 35.58442688]
[278.52703857 44.97141266]
[282.02352905 60.21307755]
[274.85888672 74.11277771]
[260.41598511 80.10749817]
[245.51432800 75.36670685]
[232.93643188 83.53960419]
[220.35852051 91.71250153]
[217.52644348 106.29039001]
[204.88706970 114.75804901]
[189.61564636 111.68865967]
[177.03773499 119.86155701]
[91.81556702 122.05662537]
[92.28909302 137.04914856]
[92.76262665 152.04167175]
[93.23615265 167.03419495]
[93.70967865 182.02671814]
[94.18321228 197.01924133]
[94.65673828 212.01176453]
[95.13026428 227.00428772]
[116.51712799 239.39335632]
[122.10550690 266.12042236]
[136.85897827 268.82870483]
[151.61245728 271.53701782]
[168.28297424 268.44985962]
[175.86433411 283.61425781]
[163.39128113 295.09729004]
[148.90415955 286.29049683]
[134.15068054 283.58218384]
[119.39720154 280.87390137]
[131.04617310 290.32385254]
[145.35606384 294.82128906]
[155.07673645 306.24530029]
[157.22549438 321.09060669]
[151.14303589 334.80206299]
[138.69567871 343.17242432]
[123.70276642 343.63339233]
[110.76470184 336.04351807]
[103.85138702 322.73162842]
[105.08402252 307.78256226]
[100.72621918 293.42953491]
[97.66934204 308.11474609]
[106.06642151 321.23446655]
[102.75711060 336.08380127]
[90.19772339 344.00830078]
[87.14084625 358.69351196]
[84.08396149 373.37872314]
[88.84652710 388.46609497]
[78.67787933 399.34945679]
[75.62100220 414.03466797]
[72.56412506 428.71987915]
[69.50724030 443.40509033]
[66.45036316 458.09030151]
[68.15792084 464.49386597]
[66.60204315 469.97262573]
[63.05821609 473.18750000]
[59.53926849 487.76889038]
[56.02032089 502.35028076]
[63.99904633 515.72857666]
[60.22261810 530.46600342]
[47.41932678 537.99005127]
[43.90037918 552.57147217]
[40.38143158 567.15283203]
[36.86248398 581.73425293]
[49.15756226 573.14172363]
[64.15677643 573.29492188]
[76.27382660 582.13671875]
[80.99582672 596.37408447]
[76.56412506 610.70446777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[7 17]
[8 16]
[9 15]
[21 193]
[22 192]
[23 191]
[24 190]
[27 187]
[28 186]
[29 185]
[30 182]
[31 181]
[32 180]
[33 179]
[34 178]
[36 176]
[37 175]
[38 174]
[41 171]
[42 170]
[48 149]
[49 148]
[50 147]
[51 146]
[52 145]
[53 144]
[54 143]
[55 142]
[56 75]
[57 74]
[58 73]
[59 72]
[63 71]
[64 70]
[76 102]
[77 101]
[78 100]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[121 141]
[122 140]
[125 137]
[126 136]
[127 135]
[151 159]
[152 158]
[153 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
