%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGCGGCGGAAGUAGGAAGCCGAGGUCUGAAUUGCGCGUGGUGGCCAUGGCGGCCAGCGGGGCUGUGGAACCAGGGCCCCCGGGGGCUGCCGUCGCCCCGUCGCCCGCCCCGGCCCCGCCGCCUGCCCCUGAUCACCUGUUCCGGC\
) } def
/len { sequence length } bind def

/coor [
[181.89086914 363.86666870]
[182.04608154 357.14730835]
[175.61935425 343.59381104]
[169.87275696 338.86553955]
[169.20338440 329.68612671]
[163.06384277 316.00015259]
[156.92428589 302.31417847]
[150.78474426 288.62820435]
[144.64520264 274.94223022]
[138.50564575 261.25625610]
[132.36610413 247.57028198]
[127.20919037 261.65594482]
[115.49537659 271.02539062]
[100.62092590 272.96206665]
[86.89849091 266.90447998]
[78.30670166 254.60890198]
[77.33663177 239.64028931]
[84.26955414 226.33862305]
[97.09535217 218.56050110]
[112.09534454 218.56112671]
[124.91883087 226.33850098]
[121.16397858 211.81607056]
[117.40913391 197.29364014]
[113.65428162 182.77119446]
[102.97738647 172.38595581]
[107.01383972 157.08833313]
[103.25899506 142.56588745]
[99.50414276 128.04345703]
[91.91358185 126.85686493]
[84.92974091 123.65520477]
[79.07661438 118.67869568]
[74.79338074 112.30072021]
[72.40139008 104.99982452]
[72.08012390 97.32379150]
[73.85369110 89.84855652]
[77.58900452 83.13497925]
[83.00582123 77.68679047]
[89.69770813 73.91275787]
[88.11930084 58.99603271]
[86.54088593 44.07931137]
[84.80531311 29.18005562]
[82.91276550 14.29992676]
[81.02021790 -0.58020318]
[76.80764771 -8.76334000]
[79.24804688 -15.79359531]
[77.66963196 -30.71031761]
[76.09122467 -45.62704086]
[66.94472504 -58.53642273]
[73.29981232 -72.00720978]
[71.72139740 -86.92393494]
[70.14299011 -101.84065247]
[68.56457520 -116.75737762]
[66.98616791 -131.67410278]
[65.40775299 -146.59082031]
[63.82934189 -161.50755310]
[62.25093079 -176.42427063]
[60.67251968 -191.34098816]
[48.66694260 -201.26589966]
[47.27870178 -216.41606140]
[56.81457520 -227.80038452]
[55.23616409 -242.71710205]
[53.65775299 -257.63381958]
[52.07934189 -272.55056763]
[50.50093079 -287.46728516]
[48.76535416 -302.36651611]
[46.87280655 -317.24667358]
[37.45616913 -329.96032715]
[43.52584076 -343.56210327]
[41.63328934 -358.44223022]
[31.28205681 -371.16168213]
[37.37384033 -386.38739014]
[53.64193726 -388.45645142]
[63.35112381 -375.24041748]
[56.51342010 -360.33477783]
[58.40596771 -345.45465088]
[67.68723297 -333.80532837]
[61.75293350 -319.13922119]
[63.64548492 -304.25909424]
[67.63648224 -297.97799683]
[65.41765594 -289.04568481]
[66.99606323 -274.12896729]
[68.57447815 -259.21224976]
[70.15288544 -244.29551697]
[71.73130035 -229.37879944]
[83.43857574 -220.24230957]
[85.25180054 -205.13713074]
[75.58924103 -192.91940308]
[77.16765594 -178.00268555]
[78.74606323 -163.08595276]
[80.32447815 -148.16923523]
[81.90288544 -133.25251770]
[83.48130035 -118.33579254]
[85.05970764 -103.41906738]
[86.63812256 -88.50234222]
[88.21652985 -73.58561707]
[97.25013733 -61.74318314]
[91.00794220 -47.20545197]
[92.58635712 -32.28873062]
[94.16476440 -17.37200546]
[95.90034485 -2.47275209]
[97.79289246 12.40737724]
[99.68544006 27.28750801]
[103.67644501 33.56858444]
[101.45761108 42.50090027]
[103.03602600 57.41762161]
[104.61443329 72.33434296]
[123.33745575 84.44221497]
[127.31211090 106.38200378]
[114.02658081 124.28861237]
[117.78142548 138.81105042]
[121.53627777 153.33348083]
[132.48175049 164.75746155]
[128.17671204 179.01635742]
[131.93156433 193.53878784]
[135.68641663 208.06121826]
[139.44126892 222.58364868]
[147.32005310 231.16006470]
[146.05207825 241.43072510]
[152.19161987 255.11669922]
[158.33117676 268.80267334]
[164.47071838 282.48864746]
[170.61027527 296.17462158]
[176.74981689 309.86059570]
[182.88937378 323.54656982]
[189.17285156 337.16708374]
[195.59957886 350.72058105]
[202.31062317 364.13555908]
[209.30300903 377.40606689]
[216.29537964 390.67660522]
[226.93481445 393.31707764]
[234.18731689 401.24087524]
[235.80978394 411.63632202]
[231.50094604 420.99273682]
[237.92765808 434.54623413]
[253.20266724 437.27636719]
[263.93139648 448.48684692]
[265.98837280 463.86697388]
[258.58270264 477.50280762]
[244.56199646 484.15106201]
[229.31750488 481.25537109]
[218.71104431 469.92919922]
[216.82101440 454.52764893]
[224.37417603 440.97296143]
[217.94744873 427.41946411]
[201.27360535 417.70642090]
[203.02487183 397.66897583]
[196.03248596 384.39846802]
[189.04010010 371.12792969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[5 124]
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[21 116]
[22 115]
[23 114]
[24 113]
[26 111]
[27 110]
[28 109]
[38 106]
[39 105]
[40 104]
[41 102]
[42 101]
[43 100]
[45 99]
[46 98]
[47 97]
[49 95]
[50 94]
[51 93]
[52 92]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 78]
[66 77]
[68 75]
[69 74]
[127 148]
[128 147]
[129 146]
[133 144]
[134 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
