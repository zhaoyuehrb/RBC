%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAGAGGCAGCAGAGACACUGGCCCACUCUCACGUUCAAAGCAUCUCCGUCCAGCAUGGCCAGGUACAUGCUGCUGCUGCUCCUGGCGGUAUGGGUGCUGACCGGGGAGCUGUGGCCGGGAGCUGAGGCCCGGGCAGCGCCUUACGGGGUCAGGC\
) } def
/len { sequence length } bind def

/coor [
[234.89671326 490.41900635]
[229.08764648 476.58953857]
[223.27857971 462.76004028]
[211.97134399 460.81896973]
[202.92741394 453.56628418]
[198.48547363 442.72814941]
[199.86613464 430.97567749]
[206.83917236 421.26675415]
[201.58451843 407.21725464]
[196.32984924 393.16775513]
[182.71139526 387.24548340]
[177.18228149 373.07214355]
[183.48641968 358.82803345]
[178.23176575 344.77850342]
[172.97709656 330.72900391]
[160.86715698 329.24093628]
[150.48922729 322.68841553]
[143.86134338 312.27255249]
[142.30335999 299.95248413]
[146.17456055 288.07693481]
[154.79322815 278.93655396]
[150.10128784 264.68923950]
[145.40933228 250.44194031]
[140.71739197 236.19464111]
[136.02543640 221.94734192]
[131.33348083 207.70002747]
[126.50012970 193.50007629]
[121.52584076 179.34887695]
[116.41110992 165.24783325]
[111.15644836 151.19833374]
[105.90178680 137.14883423]
[100.64712524 123.09932709]
[95.39245605 109.04982758]
[89.81420898 103.16557312]
[90.17603302 94.66840363]
[85.20174408 80.51720428]
[73.32586670 70.06377411]
[76.40473175 55.49085999]
[71.43044281 41.33966064]
[66.45615387 27.18846130]
[61.63191605 22.53932190]
[60.14546967 16.98281097]
[61.57763290 12.37462425]
[57.16987991 -1.96314764]
[52.76212311 -16.30091858]
[48.35437012 -30.63869095]
[40.08910370 -18.12128830]
[25.43148613 -14.93471241]
[12.71528435 -22.89072990]
[9.17044640 -37.46585083]
[16.81243324 -50.37321472]
[31.29630089 -54.27418137]
[44.38651276 -46.95151901]
[41.71654510 -61.71197891]
[39.04657745 -76.47244263]
[28.88919640 -84.47940063]
[26.99343491 -96.86744690]
[33.83908463 -106.88201141]
[31.46311569 -121.69264221]
[21.63757515 -134.09301758]
[27.26122093 -147.88519287]
[24.88525009 -162.69581604]
[22.50927925 -177.50645447]
[20.13330841 -192.31707764]
[17.75733948 -207.12771606]
[15.38136864 -221.93833923]
[2.86089039 -231.20523071]
[0.66230172 -246.25917053]
[9.57403183 -258.13842773]
[7.19806099 -272.94906616]
[2.72665954 -280.97827148]
[4.92513752 -288.07751465]
[2.84410429 -302.93246460]
[-7.66754198 -315.51965332]
[-1.76926446 -330.82135010]
[14.47129440 -333.09649658]
[24.34724045 -320.00460815]
[17.69904709 -305.01348877]
[19.78007889 -290.15853882]
[22.00869179 -275.32501221]
[24.38466072 -260.51440430]
[36.56499100 -252.01879883]
[39.18554688 -237.03256226]
[30.19199944 -224.31431580]
[32.56797028 -209.50367737]
[34.94393921 -194.69305420]
[37.31990814 -179.88241577]
[39.69588089 -165.07179260]
[42.07184982 -150.26115417]
[51.72744370 -138.92013550]
[46.27374649 -124.06861877]
[48.64971542 -109.25798798]
[60.44176483 -96.29270172]
[53.80703735 -79.14241028]
[56.47700882 -64.38195038]
[59.14697647 -49.62148666]
[62.69214249 -35.04644394]
[67.09989929 -20.70867348]
[71.50765228 -6.37090158]
[75.91540527 7.96687031]
[80.60735321 22.21417236]
[85.58164215 36.36537170]
[90.55593109 50.51657104]
[102.07601166 59.95780945]
[99.35294342 75.54291534]
[104.32723236 89.69411469]
[109.44196320 103.79516602]
[114.69662476 117.84466553]
[119.95128632 131.89416504]
[125.20594788 145.94366455]
[130.46061707 159.99317932]
[136.42991638 166.98098755]
[135.67703247 174.37458801]
[140.65132141 188.52578735]
[146.48051453 195.63090515]
[145.58079529 203.00808716]
[150.27273560 217.25538635]
[154.96469116 231.50268555]
[159.65663147 245.74998474]
[164.34858704 259.99728394]
[169.04052734 274.24459839]
[186.42787170 279.22433472]
[197.28419495 293.49386597]
[197.44227600 311.26647949]
[187.02659607 325.47436523]
[192.28126526 339.52386475]
[197.53591919 353.57336426]
[211.64018250 360.18453979]
[216.76901245 374.50756836]
[210.37934875 387.91308594]
[215.63401794 401.96258545]
[220.88867188 416.01208496]
[238.38996887 423.15380859]
[245.05305481 440.50274658]
[237.10806274 456.95095825]
[242.91712952 470.78045654]
[248.72619629 484.60995483]
[268.38629150 496.89389038]
[265.20364380 519.11590576]
[272.35665894 532.30053711]
[285.73840332 540.74090576]
[285.00671387 555.61749268]
[292.15972900 568.80212402]
[306.41473389 576.90936279]
[306.25054932 593.30767822]
[291.83612061 601.12792969]
[277.99975586 592.32525635]
[278.97509766 575.95513916]
[271.82211304 562.77050781]
[258.95199585 555.27325439]
[259.17202759 539.45355225]
[252.01901245 526.26892090]
[244.77969360 526.01171875]
[238.02714539 523.20593262]
[232.63739014 518.16357422]
[229.32777405 511.49002075]
[228.56155396 504.01162720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[3 135]
[8 132]
[9 131]
[10 130]
[13 127]
[14 126]
[15 125]
[21 121]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 114]
[28 113]
[29 111]
[30 110]
[31 109]
[32 108]
[33 107]
[35 106]
[36 105]
[38 103]
[39 102]
[40 101]
[43 100]
[44 99]
[45 98]
[46 97]
[53 96]
[54 95]
[55 94]
[58 92]
[59 91]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[69 81]
[70 80]
[72 79]
[73 78]
[139 152]
[140 151]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
