%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACCCAGAGGCUGAUGCUCACCAUGGGGCGCCUGCAACUGGUUGUGUUGGGCCUCACCUGCUGCUGGGCAGUGGCGAGUGCCGCGAAGCUGGGCGCCGUGUACACAGAAGGUG\
) } def
/len { sequence length } bind def

/coor [
[139.73896790 247.88807678]
[133.49110413 234.25120544]
[127.24322510 220.61434937]
[115.95001221 216.05645752]
[110.66889191 204.63769531]
[114.76191711 192.31626892]
[108.88241577 178.51658630]
[103.00291443 164.71688843]
[97.12342072 150.91719055]
[91.24391937 137.11750793]
[77.60705566 130.86962891]
[63.31652069 135.42820740]
[49.02598572 139.98678589]
[34.73545074 144.54536438]
[31.75267792 148.10668945]
[28.12913895 150.23481750]
[24.42360306 150.90832520]
[21.13932228 150.29949951]
[18.66263771 148.73661804]
[3.96577859 151.73701477]
[-10.73108101 154.73739624]
[-25.42794037 157.73777771]
[-33.93187714 171.05914307]
[-49.38248062 174.38394165]
[-62.61318970 165.73963928]
[-65.77445221 150.25474548]
[-56.99075317 137.11618042]
[-41.47330093 134.11880493]
[-28.42832565 143.04092407]
[-13.73146629 140.04054260]
[0.96539330 137.04014587]
[15.66225338 134.03976440]
[30.17687416 130.25482178]
[44.46741104 125.69625092]
[58.75794220 121.13767242]
[73.04847717 116.57909393]
[68.17528534 95.17494965]
[78.45542145 75.35526276]
[68.50857544 64.12760162]
[58.56174088 52.89994049]
[48.61489868 41.67227936]
[32.98885727 42.27295685]
[20.66425705 32.64807892]
[17.46040154 17.34221840]
[24.89005089 3.58233762]
[39.44515228 -2.13457060]
[54.25323105 2.89084339]
[62.32236862 16.28573227]
[59.84255981 31.72544098]
[69.78939819 42.95310211]
[79.73623657 54.18076324]
[89.68308258 65.40842438]
[104.63443756 64.20142365]
[112.65142822 51.52357483]
[120.66841125 38.84572220]
[128.51448059 26.06138420]
[136.18820190 13.17286301]
[143.86192322 0.28434190]
[144.27368164 -15.53150558]
[157.43287659 -22.50896072]
[165.10659790 -35.39748001]
[166.84652710 -44.50115967]
[173.16333008 -48.52508545]
[181.18031311 -61.20293427]
[189.19729614 -73.88079071]
[197.21429443 -86.55863953]
[205.23127747 -99.23648834]
[208.58644104 -115.85513306]
[225.48442078 -117.23158264]
[231.48490906 -101.37501526]
[217.90913391 -91.21950531]
[209.89213562 -78.54164886]
[201.87515259 -65.86380005]
[193.85816956 -53.18594742]
[185.84117126 -40.50809860]
[177.99511719 -27.72375870]
[170.32139587 -14.83523750]
[170.45851135 0.05873663]
[156.75044250 7.95806456]
[149.07672119 20.84658623]
[141.40299988 33.73510742]
[140.67541504 41.18926620]
[133.34626770 46.86270905]
[125.32927704 59.54056168]
[117.31229401 72.21841431]
[125.59207153 79.84083557]
[130.76742554 89.77386475]
[132.25595093 100.82070923]
[129.91696167 111.66426086]
[124.06398010 121.02410126]
[115.42321014 127.80773163]
[105.04360962 131.23800659]
[110.92311096 145.03768921]
[116.80261230 158.83738708]
[122.68210602 172.63708496]
[128.56161499 186.43676758]
[143.51841736 197.07356262]
[140.88009644 214.36647034]
[147.12796021 228.00332642]
[153.37583923 241.64019775]
[161.89277649 243.08976746]
[169.01904297 247.80398560]
[173.58218384 254.91534424]
[174.86889648 263.17019653]
[172.73558044 271.14947510]
[167.61999512 277.51272583]
[172.37001038 291.74078369]
[177.12004089 305.96884155]
[190.77250671 314.39434814]
[192.55421448 330.33816528]
[181.09837341 341.56951904]
[165.19294739 339.47271729]
[157.03919983 325.65618896]
[162.89198303 310.71884155]
[158.14196777 296.49081421]
[153.39195251 282.26275635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 36]
[12 35]
[13 34]
[14 33]
[19 32]
[20 31]
[21 30]
[22 29]
[38 52]
[39 51]
[40 50]
[41 49]
[53 85]
[54 84]
[55 83]
[56 81]
[57 80]
[58 79]
[60 77]
[61 76]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
