%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCAUGUGGCAAACAAGGAAAUUUGCAAGUUCCCGGUUCCAAGGUGUUACCUGGCUUGGGAGAAGGUUGUAAAGAAAUGUGGCUUCGAAAGGUAAUCU\
) } def
/len { sequence length } bind def

/coor [
[113.71239471 353.53942871]
[123.98948669 341.53289795]
[122.59179688 326.59814453]
[121.19410706 311.66342163]
[119.79641724 296.72866821]
[107.40947723 282.01892090]
[115.61813354 263.73773193]
[113.29465485 248.91876221]
[103.67931366 237.54360962]
[109.18560791 222.71150208]
[106.86213684 207.89254761]
[104.53865814 193.07359314]
[94.88282776 185.60479736]
[92.91259003 173.14915466]
[100.24541473 162.39804077]
[98.38393402 147.51399231]
[96.52245331 132.62994385]
[84.32608032 128.82942200]
[74.50516510 120.65963745]
[68.54812622 109.35877991]
[67.35778046 96.63955688]
[71.11453247 84.42962646]
[79.24902344 74.57946014]
[90.52842712 68.58190918]
[89.59588623 53.61092758]
[88.66333771 38.63994217]
[87.73079681 23.66896057]
[86.79824829 8.69797611]
[85.86570740 -6.27300835]
[84.93315887 -21.24399185]
[69.20208740 -33.46612930]
[67.27397919 -52.99441147]
[79.92147064 -67.60652924]
[77.59799194 -82.42548370]
[75.27452087 -97.24444580]
[72.95104980 -112.06340027]
[70.62757874 -126.88235474]
[68.30410767 -141.70130920]
[58.28618240 -150.00782776]
[56.73821259 -162.52294922]
[63.95450974 -172.36891174]
[62.09302902 -187.25296021]
[60.23154831 -202.13700867]
[55.99520111 -210.43435669]
[58.55107498 -217.51199341]
[57.15338516 -232.44674683]
[55.75569534 -247.38148499]
[48.25978470 -262.58831787]
[60.79724884 -274.00094604]
[75.23458862 -265.11279297]
[70.69043732 -248.77917480]
[72.08812714 -233.84443665]
[73.48581696 -218.90968323]
[75.11559296 -203.99848938]
[76.97708130 -189.11444092]
[78.83856201 -174.23039246]
[90.18398285 -160.94195557]
[83.12306213 -144.02478027]
[85.44653320 -129.20582581]
[87.77000427 -114.38687134]
[90.09347534 -99.56791687]
[92.41695404 -84.74896240]
[94.74042511 -69.93000031]
[104.63359833 -66.21225739]
[112.08050537 -58.59816360]
[115.63185120 -48.47063446]
[114.55476379 -37.71052551]
[108.98289490 -28.34735680]
[99.90414429 -22.17653656]
[100.83668518 -7.20555258]
[101.76923370 7.76543140]
[102.70177460 22.73641586]
[103.63432312 37.70739746]
[104.56686401 52.67838287]
[105.49941254 67.64936829]
[120.93896484 74.73407745]
[130.76708984 88.58979034]
[132.34997559 105.50331116]
[125.26339722 120.94200897]
[111.40650177 130.76846313]
[113.26798248 145.65251160]
[115.12946320 160.53656006]
[126.58975220 174.84420776]
[119.35762024 190.75010681]
[121.68109131 205.56907654]
[124.00456238 220.38803101]
[133.78610229 232.82315063]
[128.11361694 246.59529114]
[130.43708801 261.41424561]
[139.75955200 267.43899536]
[144.04563904 277.43701172]
[142.06356812 287.90722656]
[134.73115540 295.33099365]
[136.12884521 310.26571655]
[137.52653503 325.20046997]
[138.92422485 340.13519287]
[151.25064087 350.02636719]
[152.88955688 365.74545288]
[142.86863708 377.96661377]
[127.13310242 379.43923950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[7 89]
[8 88]
[10 86]
[11 85]
[12 84]
[15 82]
[16 81]
[17 80]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[41 56]
[42 55]
[43 54]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
