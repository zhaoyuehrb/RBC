%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAAUAAAACCGUGUUAACUGAGUUUAUCCUUCUGGGUCUAACAGAUGUCCCUGAACUCCAGGUGGCAGUUUUCACCUUUCUUUUCCUUGCGUAUU\
) } def
/len { sequence length } bind def

/coor [
[166.65086365 340.66809082]
[174.41813660 327.68640137]
[185.81814575 317.74182129]
[179.91665649 303.95150757]
[174.01515198 290.16122437]
[168.11364746 276.37091064]
[152.07221985 273.29251099]
[140.86753845 261.18142700]
[139.00685120 244.62138367]
[147.40928650 230.03970337]
[141.08175659 216.43962097]
[134.75422668 202.83953857]
[128.42671204 189.23944092]
[122.09918213 175.63935852]
[117.83612823 173.14593506]
[115.19166565 167.86231995]
[115.83060455 160.99130249]
[110.36083221 147.02413940]
[104.89105988 133.05699158]
[99.42128754 119.08982086]
[86.18742371 113.18972778]
[80.90379333 99.69789886]
[86.61155701 86.37995148]
[81.14178467 72.41278839]
[75.67200470 58.44562912]
[69.98567963 44.56521988]
[64.08417511 30.77492523]
[58.18267441 16.98463058]
[52.28116989 3.19433427]
[46.37966537 -10.59596157]
[40.47816086 -24.38625717]
[23.13134384 -25.98885918]
[8.99422932 -36.01737595]
[1.82188225 -51.70019531]
[3.46521759 -68.77861023]
[13.39424038 -82.66321564]
[6.64681435 -96.05994415]
[-0.10061125 -109.45666504]
[-6.84803677 -122.85339355]
[-22.10875511 -126.26579285]
[-31.56457329 -138.72056580]
[-30.75074196 -154.33695984]
[-20.05152893 -165.74137878]
[-4.51877308 -167.54901123]
[8.51343060 -158.90635681]
[12.89167595 -143.89419556]
[6.54868841 -129.60081482]
[13.29611397 -116.20409393]
[20.04353905 -102.80736542]
[26.79096603 -89.41064453]
[39.60168076 -90.03759766]
[51.72165298 -85.69873047]
[61.29375076 -77.02055359]
[66.83662415 -65.29737091]
[67.47389221 -52.29830170]
[63.07249451 -40.00036240]
[54.26845932 -30.28776169]
[60.16996384 -16.49746513]
[66.07146454 -2.70716977]
[71.97296906 11.08312607]
[77.87447357 24.87342072]
[83.77597809 38.66371536]
[89.40057373 43.66265488]
[89.63916779 52.97585678]
[95.10894012 66.94301605]
[100.57871246 80.91017914]
[113.81257629 86.81027222]
[119.09620667 100.30210114]
[113.38844299 113.62004852]
[118.85821533 127.58721161]
[124.32799530 141.55436707]
[129.79776001 155.52153015]
[135.69926453 169.31182861]
[142.02679443 182.91191101]
[148.35432434 196.51200867]
[154.68183899 210.11209106]
[161.00936890 223.71218872]
[174.79370117 225.36962891]
[185.84381104 233.59396362]
[191.30131531 246.12289429]
[189.82171631 259.59902954]
[181.90393066 270.46942139]
[187.80543518 284.25970459]
[193.70693970 298.05001831]
[199.60844421 311.84030151]
[214.67324829 310.45938110]
[229.42700195 313.80328369]
[242.42430115 321.54446411]
[252.39178467 332.92446899]
[258.35296631 346.82839966]
[259.72378540 361.89413452]
[256.36999512 376.64562988]
[248.62011719 389.63772583]
[237.23344421 399.59759521]
[223.32550049 405.54943848]
[208.25886536 406.91018677]
[193.50959778 403.54650879]
[180.52268982 395.78793335]
[170.57046509 384.39456177]
[164.62794495 370.48266602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[17 72]
[18 71]
[19 70]
[20 69]
[23 66]
[24 65]
[25 64]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[36 50]
[37 49]
[38 48]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
