%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCGACCUCCAGGAGAGACCAGGCCCAGGAUGCCUCGCCUGUUUUUUUUCCACCUGCUAGGAGUCUGUUUACUACUGAACCAAUUUUCCAGAGCAGUCGCGGACUCAUGGAUGGAGGAAGUUAUUAAAU\
) } def
/len { sequence length } bind def

/coor [
[64.07583618 289.99258423]
[56.21861267 277.09140015]
[52.31568146 262.49880981]
[52.68342972 247.39776611]
[57.29205322 233.01245117]
[65.76795197 220.50901794]
[77.42401123 210.90104675]
[91.31534576 204.96745300]
[89.53455353 190.07353210]
[87.75376892 175.17961121]
[85.97298431 160.28569031]
[84.19219971 145.39176941]
[82.41141510 130.49786377]
[71.31214142 120.40795135]
[56.31639099 120.05098724]
[41.32063675 119.69402313]
[26.32488632 119.33705139]
[11.32913399 118.98008728]
[-3.66661763 118.62312317]
[-18.66236877 118.26615906]
[-35.79509735 128.76556396]
[-51.93834686 118.22637177]
[-66.93409729 118.58333588]
[-81.92984772 118.94029999]
[-96.92559814 119.29726410]
[-111.92135620 119.65422821]
[-121.42616272 128.46702576]
[-133.98559570 128.40209961]
[-142.81401062 120.04366302]
[-157.81401062 120.04366302]
[-172.81401062 120.04366302]
[-188.65313721 126.09000397]
[-198.84790039 112.54366302]
[-188.65313721 98.99732208]
[-172.81401062 105.04366302]
[-157.81401062 105.04366302]
[-142.81401062 105.04366302]
[-128.17094421 95.44738007]
[-112.27832031 104.65847778]
[-97.28256989 104.30151367]
[-82.28681183 103.94454956]
[-67.29106140 103.58758545]
[-52.29531097 103.23061371]
[-45.85068512 95.14839172]
[-35.79509735 91.93059540]
[-25.43087006 94.89085388]
[-18.30540466 103.27040863]
[-3.30965233 103.62737274]
[11.68610001 103.98433685]
[26.68185234 104.34130096]
[41.67760468 104.69826508]
[56.67335510 105.05523682]
[71.66910553 105.41220093]
[72.69841003 94.35212708]
[77.73583984 84.87441254]
[85.74922943 78.31015778]
[95.31632233 75.45389557]
[104.87215424 76.47380829]
[112.96379089 80.92676544]
[124.97190857 71.93759918]
[136.98002625 62.94843674]
[143.39083862 48.48427200]
[158.21633911 47.05113220]
[170.22445679 38.06196594]
[182.23257446 29.07280159]
[194.24069214 20.08363533]
[206.24880981 11.09447098]
[218.25692749 2.10530615]
[230.26506042 -6.88385868]
[242.27317810 -15.87302399]
[244.90364075 -28.56504250]
[255.17190552 -35.79734039]
[267.21170044 -34.10974121]
[279.43032837 -42.81059647]
[291.64895630 -51.51144791]
[299.07235718 -70.18391418]
[318.31161499 -71.42114258]
[330.10241699 -80.69352722]
[341.89318848 -89.96591187]
[339.04406738 -105.00389862]
[343.52084351 -119.64004517]
[354.29486084 -130.51107788]
[368.89028931 -135.11891174]
[383.95321655 -132.40470886]
[396.02227783 -122.99215698]
[402.32412720 -109.04419708]
[401.41061401 -93.76597595]
[393.49163818 -80.66831207]
[380.38699341 -72.76094818]
[365.10797119 -71.86094666]
[351.16558838 -78.17511749]
[339.37478638 -68.90273285]
[327.58398438 -59.63034821]
[327.26831055 -49.29807663]
[321.14672852 -40.69600677]
[311.07574463 -36.85476303]
[300.34982300 -39.29280853]
[288.13119507 -30.59195709]
[275.91253662 -21.89110184]
[269.55105591 -5.58038855]
[251.26232910 -3.86490512]
[239.25421143 5.12425995]
[227.24609375 14.11342525]
[215.23797607 23.10259056]
[203.22985840 32.09175491]
[191.22174072 41.08092117]
[179.21362305 50.07008362]
[167.20550537 59.05924988]
[161.65359497 72.88044739]
[145.96919250 74.95655823]
[133.96107483 83.94571686]
[121.95295715 92.93488312]
[120.23700714 116.24799347]
[97.30532837 128.71707153]
[99.08611298 143.61099243]
[100.86690521 158.50491333]
[102.64768982 173.39881897]
[104.42847443 188.29273987]
[106.20925903 203.18666077]
[121.10791779 205.67800903]
[134.70057678 212.26710510]
[145.88534546 222.41981506]
[153.75552368 235.31311035]
[157.67311096 249.90177917]
[157.32052612 265.00317383]
[152.72636414 279.39312744]
[144.26303101 291.90505981]
[132.61662292 301.52471924]
[118.73126984 307.47229004]
[103.73257446 309.26559448]
[88.83643341 306.75927734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 114]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[29 37]
[30 36]
[31 35]
[59 112]
[60 111]
[61 110]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
[69 102]
[70 101]
[73 99]
[74 98]
[75 97]
[77 93]
[78 92]
[79 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
