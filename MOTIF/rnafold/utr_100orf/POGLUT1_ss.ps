%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGCGGCUCCCGGGCCAUCUUUGUGCGGGGCCGCGCUUCCGCCAGCGCCGCAGCGGGGAAUCUGCAGUAGGUCUGCCGGCGAUGGAGUGGUGGGCUAGCUCGCCGCUUCGGCUCUGGCUGCUGUUGUUCCUCCUGCCCUCAGCGCAGGGCCGCCAGAAGGAGUCAGGUUCAAAAUGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[79.25080872 184.89360046]
[65.60987854 178.65458679]
[61.81381226 164.14352417]
[51.99965286 175.48735046]
[48.74093628 184.04577637]
[41.92124557 186.93864441]
[31.91587639 198.11418152]
[21.91050720 209.28971863]
[11.90513706 220.46525574]
[1.89976728 231.64079285]
[-1.50380838 240.14263916]
[-8.37163925 242.91929626]
[-18.56533623 253.92332458]
[-28.75903130 264.92733765]
[-38.95272827 275.93136597]
[-42.65494919 291.31332397]
[-56.98023987 295.39193726]
[-67.17393494 306.39596558]
[-65.03757477 321.88693237]
[-73.40215302 335.09933472]
[-88.31817627 339.79470825]
[-102.74274445 333.75601196]
[-109.86502075 319.83456421]
[-106.32209015 304.60360718]
[-93.78681183 295.25476074]
[-78.17796326 296.20227051]
[-67.98426819 285.19824219]
[-65.01116943 270.60339355]
[-49.95675278 265.73767090]
[-39.76305771 254.73364258]
[-29.56936073 243.72961426]
[-19.37566376 232.72560120]
[-9.27576733 221.63542175]
[0.72960186 210.45988464]
[10.73497105 199.28434753]
[20.74034119 188.10881042]
[30.74571037 176.93327332]
[40.65583038 165.67318726]
[50.46998978 154.32937622]
[59.79385757 142.57923889]
[68.61063385 130.44398499]
[77.42741394 118.30873108]
[86.24419403 106.17347717]
[92.30643463 92.45308685]
[95.34201050 77.76345062]
[98.37758636 63.07382202]
[92.17847443 45.74570084]
[104.32408142 33.09224319]
[107.10977173 18.35318375]
[109.89546967 3.61412287]
[112.68115997 -11.12493801]
[103.70236206 -31.64367867]
[118.34665680 -47.57006836]
[120.12552643 -62.46421814]
[121.90439606 -77.35836792]
[123.68326569 -92.25251007]
[121.59064484 -101.16805267]
[125.62088776 -107.38367462]
[127.65242004 -122.24546814]
[129.68394470 -137.10726929]
[131.71546936 -151.96905518]
[133.74699402 -166.83084106]
[135.77851868 -181.69264221]
[137.81005859 -196.55442810]
[130.63897705 -207.29335022]
[132.65168762 -219.64237976]
[142.22793579 -227.05647278]
[144.51153564 -241.88162231]
[146.79513550 -256.70678711]
[149.07873535 -271.53192139]
[151.36233521 -286.35708618]
[153.64593506 -301.18225098]
[140.13172913 -294.67327881]
[126.54218292 -301.02340698]
[122.86481476 -315.56567383]
[131.80227661 -327.61230469]
[146.78604126 -328.30978394]
[156.80374146 -317.14614868]
[160.33636475 -331.72424316]
[163.86900330 -346.30230713]
[167.40164185 -360.88040161]
[170.93426514 -375.45849609]
[161.05508423 -387.27828979]
[160.04191589 -402.47128296]
[168.07420349 -415.19708252]
[181.89433289 -420.68725586]
[185.42697144 -435.26535034]
[188.95959473 -449.84344482]
[192.49223328 -464.42150879]
[196.02487183 -478.99960327]
[199.55749512 -493.57766724]
[203.09013367 -508.15576172]
[206.62277222 -522.73382568]
[210.15539551 -537.31195068]
[213.68803406 -551.89001465]
[217.22067261 -566.46807861]
[220.75329590 -581.04620361]
[215.61247253 -596.61871338]
[226.72869873 -608.67529297]
[242.66658020 -604.81317139]
[247.03057861 -589.00531006]
[235.33137512 -577.51354980]
[231.79875183 -562.93548584]
[228.26611328 -548.35736084]
[224.73348999 -533.77929688]
[221.20085144 -519.20123291]
[217.66821289 -504.62313843]
[214.13558960 -490.04504395]
[210.60295105 -475.46694946]
[207.07031250 -460.88888550]
[203.53768921 -446.31079102]
[200.00505066 -431.73272705]
[196.47241211 -417.15463257]
[206.24626160 -405.94705200]
[207.56205750 -390.95596313]
[199.70639038 -377.91210938]
[185.51235962 -371.92584229]
[181.97972107 -357.34777832]
[178.44708252 -342.76968384]
[174.91445923 -328.19158936]
[171.38182068 -313.61352539]
[168.47108459 -298.89865112]
[166.18748474 -284.07348633]
[163.90388489 -269.24832153]
[161.62028503 -254.42318726]
[159.33668518 -239.59802246]
[157.05308533 -224.77287292]
[164.28953552 -208.79603577]
[152.67184448 -194.52290344]
[150.64031982 -179.66111755]
[148.60879517 -164.79931641]
[146.57727051 -149.93753052]
[144.54573059 -135.07572937]
[142.51420593 -120.21394348]
[140.48268127 -105.35214996]
[138.57740784 -90.47364044]
[136.79853821 -75.57949829]
[135.01966858 -60.68534851]
[133.24079895 -45.79119873]
[139.35702515 -40.74687958]
[143.01266479 -33.60609818]
[143.54116821 -25.50708961]
[140.78132629 -17.77449226]
[135.11589050 -11.70269012]
[127.42021942 -8.33924294]
[124.63452911 6.39981747]
[121.84883118 21.13887787]
[119.06314087 35.87793732]
[125.62243652 46.05874634]
[123.40621948 58.37289047]
[113.06721497 66.10939026]
[110.03163910 80.79902649]
[106.99607086 95.48865509]
[123.15370941 94.13420868]
[139.33050537 103.01454926]
[149.52420044 114.01856995]
[159.71789551 125.02259827]
[174.77230835 129.88830566]
[177.74540710 144.48316956]
[187.93910217 155.48719788]
[203.85099792 157.53437805]
[212.04782104 171.32537842]
[206.24166870 186.28091431]
[190.88652039 190.92839050]
[177.76153564 181.70265198]
[176.93507385 165.68089294]
[166.74137878 154.67686462]
[152.41609192 150.59823608]
[148.71386719 135.21629333]
[138.52017212 124.21226501]
[128.32647705 113.20824432]
[120.83972168 113.65374756]
[130.87228394 124.80487061]
[128.40933228 139.60128784]
[115.30548096 146.90122986]
[101.42798615 141.20779419]
[97.22666168 126.80818176]
[105.86620331 114.54475403]
[98.37944794 114.99025726]
[89.56266785 127.12551117]
[80.74589539 139.26077271]
[71.92911530 151.39602661]
[86.92378998 151.79548645]
[96.09896851 163.66207886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[12 32]
[13 31]
[14 30]
[15 29]
[17 27]
[18 26]
[40 182]
[41 181]
[42 180]
[43 179]
[44 153]
[45 152]
[46 151]
[48 148]
[49 147]
[50 146]
[51 145]
[53 139]
[54 138]
[55 137]
[56 136]
[58 135]
[59 134]
[60 133]
[61 132]
[62 131]
[63 130]
[64 129]
[67 127]
[68 126]
[69 125]
[70 124]
[71 123]
[72 122]
[78 121]
[79 120]
[80 119]
[81 118]
[82 117]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
[155 171]
[156 170]
[157 169]
[159 167]
[160 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
