%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGAAUCGCACAGGACCCGGCUCCCCUCGCCUAAGCUGCUGGGGGGCGCCAUGGGCCGCUACCGCAUCCGCGUGGCCACCGGGGCCUGGCUCUUCUCCGGGUCGUACAACCGCGUGCAGCUUUGGCUGGUCGGGACGCGCGGGGAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[343.56921387 266.66693115]
[330.95040894 258.55731201]
[318.33160400 250.44770813]
[305.71279907 242.33808899]
[293.09399414 234.22846985]
[280.39312744 226.24800110]
[267.61154175 218.39747620]
[254.82992554 210.54695129]
[240.44813538 214.24826050]
[227.37394714 206.46879578]
[223.58918762 191.35874939]
[210.80758667 183.50822449]
[203.41746521 182.68240356]
[197.84762573 175.36494446]
[185.22883606 167.25534058]
[172.61003113 159.14572144]
[159.99122620 151.03611755]
[145.10125732 150.66426086]
[137.67491150 136.69429016]
[125.05611420 128.58468628]
[112.43730927 120.47506714]
[99.81851196 112.36545563]
[85.26571655 108.73002625]
[70.31562805 109.95266724]
[55.36554337 111.17530823]
[40.41545486 112.39794922]
[25.46536446 113.62058258]
[10.51527596 114.84322357]
[-4.43481255 116.06586456]
[-13.39423847 125.39901733]
[-25.91166115 126.07881927]
[-35.21274567 118.28588104]
[-50.18466568 119.20330048]
[-59.33875275 131.88150024]
[-74.51315308 135.65928650]
[-88.54297638 128.75289917]
[-94.80376434 114.42333221]
[-90.33937073 99.43656158]
[-77.25774384 90.86888885]
[-61.73562622 92.76570129]
[-51.10208893 104.23138428]
[-36.13017273 103.31395721]
[-22.07822609 92.84452057]
[-5.65745163 101.11577606]
[9.29263687 99.89313507]
[24.24272537 98.67049408]
[39.19281387 97.44786072]
[54.14290237 96.22521973]
[69.09299469 95.00257874]
[84.04308319 93.77993774]
[91.23181915 80.61475372]
[84.17773438 67.37693024]
[77.12365723 54.13910675]
[70.06958008 40.90128326]
[63.01549911 27.66346169]
[55.96142197 14.42563725]
[48.77268600 1.26045239]
[41.45004272 -11.83072376]
[26.50695038 -16.22864151]
[19.26723671 -29.60927010]
[23.55207062 -43.82812500]
[16.22942734 -56.91930008]
[1.87095332 -64.84181976]
[1.82338965 -81.24089813]
[16.13566589 -89.24656677]
[30.08453751 -80.62329102]
[29.32060242 -64.24194336]
[36.64324570 -51.15076828]
[51.00177002 -47.36021042]
[58.61446381 -34.18820953]
[54.54122162 -19.15336800]
[61.86386490 -6.06219053]
[67.91040802 -1.73378086]
[69.19924927 7.37155867]
[76.25332642 20.60938263]
[83.30740356 33.84720612]
[90.36148071 47.08502960]
[97.41555786 60.32285309]
[104.46964264 73.56067657]
[110.79180908 80.72107697]
[113.08840179 88.57521057]
[111.77444458 95.36811829]
[107.92812347 99.74665070]
[120.54692078 107.85626221]
[133.16572571 115.96587372]
[145.78453064 124.07548523]
[161.57707214 125.02739716]
[168.10083008 138.41731262]
[180.71963501 146.52691650]
[193.33843994 154.63653564]
[205.95724487 162.74613953]
[218.65811157 170.72662354]
[231.43971252 178.57714844]
[246.62818909 175.12054443]
[259.47869873 183.26416016]
[262.68045044 197.76535034]
[275.46203613 205.61587524]
[288.24365234 213.46640015]
[297.25311279 215.30972290]
[301.20361328 221.60968018]
[313.82241821 229.71928406]
[326.44122314 237.82890320]
[339.06002808 245.93850708]
[351.67883301 254.04812622]
[370.06024170 254.47079468]
[377.53790283 270.31854248]
[390.31951904 278.16903687]
[403.10110474 286.01956177]
[416.59893799 278.82543945]
[431.78518677 279.34994507]
[444.58480835 287.35217285]
[451.61343384 300.59811401]
[451.07183838 315.48339844]
[463.85342407 323.33392334]
[476.63504028 331.18444824]
[489.41662598 339.03497314]
[502.19824219 346.88549805]
[514.97985840 354.73602295]
[527.76141357 362.58651733]
[541.07055664 369.50521851]
[554.83929443 375.45681763]
[568.60803223 381.40841675]
[582.37677002 387.36001587]
[598.59521484 384.93206787]
[608.59399414 397.93038940]
[602.08721924 412.98342896]
[585.76855469 414.60592651]
[576.42517090 401.12878418]
[562.65643311 395.17718506]
[548.88769531 389.22555542]
[535.11889648 383.27395630]
[540.30749512 397.34802246]
[535.39733887 411.52160645]
[522.61425781 419.36978149]
[507.75292969 417.33493042]
[497.55001831 406.33944702]
[496.63052368 391.36764526]
[505.41131592 379.20632935]
[519.91094971 375.36813354]
[507.12933350 367.51760864]
[494.34771729 359.66708374]
[481.56613159 351.81655884]
[468.78451538 343.96606445]
[456.00289917 336.11553955]
[443.22131348 328.26501465]
[430.18954468 335.47879028]
[415.19696045 335.19918823]
[402.27188110 327.40118408]
[394.93725586 314.09329224]
[395.25057983 298.80117798]
[382.46899414 290.95065308]
[369.68737793 283.10012817]
[357.81417847 285.60354614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[5 100]
[6 98]
[7 97]
[8 96]
[11 93]
[12 92]
[14 91]
[15 90]
[16 89]
[17 88]
[19 86]
[20 85]
[21 84]
[22 83]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[32 42]
[33 41]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 72]
[58 71]
[61 68]
[62 67]
[106 152]
[107 151]
[108 150]
[113 145]
[114 144]
[115 143]
[116 142]
[117 141]
[118 140]
[119 139]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
