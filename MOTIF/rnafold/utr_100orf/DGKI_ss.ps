%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGGAUGCUGCGGGAAGGGGCUGCCAUUUGCUGCCCCUGCCAGCGGCGCGCGGACCUGCCCGCGCUCCUGCAGCCGCCGCCGCCGCCGCCGCCAGCCCGC\
) } def
/len { sequence length } bind def

/coor [
[232.06864929 298.02621460]
[223.85435486 285.47531128]
[217.44906616 281.53552246]
[215.58773804 272.41403198]
[207.76002502 259.61843872]
[199.93229675 246.82286072]
[185.43684387 243.59529114]
[177.31613159 230.73025513]
[180.79980469 215.54797363]
[172.97207642 202.75239563]
[165.14436340 189.95681763]
[157.31663513 177.16125488]
[149.48890686 164.36567688]
[141.66117859 151.57009888]
[133.83346558 138.77452087]
[126.00573730 125.97895050]
[118.17801666 113.18337250]
[75.11232758 116.04594421]
[60.40615082 113.09154510]
[45.69997406 110.13715363]
[30.99380112 107.18275452]
[16.28762817 104.22836304]
[1.58145404 101.27397156]
[-13.47233105 106.14163208]
[-24.42635918 96.04913330]
[-39.13253403 93.09473419]
[-53.23161697 100.74950409]
[-67.95025635 94.36660767]
[-71.99756622 78.84247589]
[-62.26879883 66.08587646]
[-46.22703552 65.88259888]
[-36.17813873 78.38856506]
[-21.47196579 81.34295654]
[-7.47006416 76.26397705]
[4.53584862 86.56779480]
[19.24202347 89.52218628]
[33.94819641 92.47658539]
[48.65436935 95.43097687]
[63.36054611 98.38537598]
[78.06671906 101.33976746]
[87.57156372 89.73554993]
[81.77851868 75.89933777]
[75.98547363 62.06313324]
[64.29112244 49.78801346]
[72.84920502 35.15259171]
[89.28178406 39.32473755]
[89.82167816 56.27008820]
[95.61472321 70.10629272]
[101.40776825 83.94249725]
[116.40602112 84.17124939]
[122.61832428 70.51814270]
[128.83062744 56.86503601]
[135.04293823 43.21192932]
[141.25523376 29.55882454]
[147.46752930 15.90571976]
[141.68997192 1.19534063]
[148.08291626 -13.25823212]
[162.85356140 -18.87995148]
[177.23872375 -12.33454990]
[182.70396423 2.49470139]
[176.00685120 16.80986977]
[161.12063599 22.11802101]
[154.90834045 35.77112961]
[148.69602966 49.42423248]
[142.48373413 63.07733917]
[136.27143860 76.73044586]
[130.05912781 90.38355255]
[130.97358704 105.35565186]
[138.80131531 118.15122223]
[146.62904358 130.94680786]
[154.45675659 143.74237061]
[162.28448486 156.53794861]
[170.11221313 169.33352661]
[177.93992615 182.12910461]
[185.76765442 194.92468262]
[193.59538269 207.72024536]
[208.69865417 211.53193665]
[216.45480347 224.61996460]
[212.72787476 238.99514771]
[220.55558777 251.79072571]
[228.38331604 264.58630371]
[236.40525818 277.26101685]
[244.61956787 289.81192017]
[253.76609802 301.70059204]
[263.79171753 312.85797119]
[281.37127686 318.06570435]
[284.50738525 335.25775146]
[294.86862183 346.10418701]
[310.75112915 350.18801880]
[314.89447021 366.05511475]
[303.03631592 377.38278198]
[287.37530518 372.51809692]
[284.02218628 356.46542358]
[273.66094971 345.61898804]
[261.47381592 344.99349976]
[252.75082397 335.89248657]
[252.63435364 322.88360596]
[242.60873413 311.72622681]
[240.11006165 311.70642090]
[237.46224976 310.74728394]
[234.99954224 308.78936768]
[233.07112122 305.88635254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[4 81]
[5 80]
[6 79]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[25 33]
[26 32]
[41 49]
[42 48]
[43 47]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[84 98]
[85 97]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
