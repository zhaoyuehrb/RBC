%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUCUUUUGCUCUUGUGCUUUUAAACCCAAAGCGGCCGCCGUAGGCGAAGGUGAAGAUGGCUGCCUCUGCCUUUGCUGGUGCAGUGAGAGCAGCUUCAGGAAUCCUACGGCCCCUGAAUAUUUUGGCAUCUUCAACCUACCGCAACUGUGUCAAGA\
) } def
/len { sequence length } bind def

/coor [
[96.08314514 230.14173889]
[97.28462219 245.32318115]
[92.20124817 259.67864990]
[81.71376038 270.72094727]
[67.63916779 276.53695679]
[52.41599274 276.11898804]
[38.68172836 269.53948975]
[28.81592751 257.93835449]
[24.52789497 243.32560730]
[26.56056213 228.23295593]
[34.56175613 215.27529907]
[47.14521790 206.69764709]
[62.13079453 203.98609924]
[65.65408325 189.40576172]
[69.17737579 174.82540894]
[72.70066833 160.24507141]
[76.22395325 145.66471863]
[64.30113983 136.56272888]
[51.16511536 143.80461121]
[38.02909088 151.04649353]
[24.89306641 158.28837585]
[11.75704288 165.53025818]
[-1.37898159 172.77214050]
[-4.22042084 188.14939880]
[-16.31424141 198.06269836]
[-31.95011330 197.83128357]
[-43.74525452 187.56440735]
[-46.13035965 172.10978699]
[-37.97925568 158.76461792]
[-23.14064407 153.83007812]
[-8.62086487 159.63610840]
[4.51515961 152.39422607]
[17.65118408 145.15234375]
[30.78720856 137.91046143]
[43.92323303 130.66857910]
[57.05925751 123.42669678]
[55.80556870 116.03221893]
[53.29819107 101.24327087]
[52.04450607 93.84879303]
[37.25555420 91.34142303]
[22.46660233 88.83404541]
[7.67765236 86.32666779]
[-8.94932079 89.64029694]
[-16.73625183 74.58041382]
[-4.42055273 62.92880630]
[10.18502808 71.53771973]
[24.97397804 74.04509735]
[39.76292801 76.55246735]
[54.55187988 79.05984497]
[85.14485931 62.43195724]
[111.57764435 71.50560760]
[120.44231415 59.40529251]
[129.30697632 47.30497360]
[138.17164612 35.20465088]
[146.91633606 23.01734924]
[155.54019165 10.74425125]
[164.16406250 -1.52884614]
[172.78793335 -13.80194378]
[181.41180420 -26.07504082]
[190.03565979 -38.34814072]
[198.65953064 -50.62123871]
[203.04037476 -64.96725464]
[202.74401855 -79.96432495]
[202.44766235 -94.96139526]
[202.15130615 -109.95846558]
[201.85494995 -124.95554352]
[201.41044617 -139.94895935]
[200.81785583 -154.93724060]
[200.22525024 -169.92553711]
[199.33663940 -184.89918518]
[198.15237427 -199.85237122]
[196.96809387 -214.80554199]
[195.63615417 -229.74629211]
[194.15669250 -244.67315674]
[182.71037292 -255.91421509]
[184.50559998 -271.85650635]
[198.16520691 -280.27047729]
[213.21072388 -274.70162964]
[218.10050964 -259.42190552]
[209.08354187 -246.15261841]
[210.56301880 -231.22576904]
[214.37252808 -224.84574890]
[211.92127991 -215.98982239]
[213.10554504 -201.03663635]
[214.28982544 -186.08346558]
[217.31785583 -182.32774353]
[217.98329163 -176.61621094]
[215.21354675 -170.51812744]
[215.80613708 -155.52984619]
[216.39874268 -140.54154968]
[219.82360840 -133.94706726]
[216.85202026 -125.25189972]
[217.14837646 -110.25482941]
[217.44473267 -95.25775146]
[217.74108887 -80.26068115]
[218.03746033 -65.26361084]
[230.72138977 -57.25625992]
[244.38816833 -63.43842697]
[258.05496216 -69.62059784]
[271.72171021 -75.80276489]
[285.38848877 -81.98493195]
[299.05526733 -88.16709900]
[302.33886719 -101.26255798]
[312.42926025 -109.93618774]
[325.48123169 -111.17916107]
[336.68908691 -104.75968170]
[350.47534180 -110.67062378]
[362.65017700 -122.46932983]
[377.35812378 -114.03649139]
[373.32638550 -97.56889343]
[356.38629150 -96.88436890]
[342.60003662 -90.97342682]
[337.05233765 -75.12239838]
[321.46087646 -68.02501678]
[305.23745728 -74.50032043]
[291.57067871 -68.31815338]
[277.90390015 -62.13598633]
[264.23712158 -55.95381927]
[250.57034302 -49.77164841]
[236.90356445 -43.58948135]
[251.86117554 -42.46264267]
[259.67123413 -29.65627289]
[259.02490234 -14.67020416]
[250.14128113 -2.58379865]
[236.03135681 2.50638819]
[221.47753906 -1.12490654]
[211.41267395 -12.24689579]
[209.24850464 -27.09221268]
[210.93263245 -41.99737167]
[202.30876160 -29.72427368]
[193.68489075 -17.45117569]
[185.06103516 -5.17807770]
[176.43716431 7.09502029]
[167.81329346 19.36811829]
[159.18942261 31.64121628]
[157.91015625 38.96108246]
[150.27195740 44.06931686]
[141.40728760 56.16963577]
[132.54263306 68.26995850]
[123.67796326 80.37027740]
[130.30569458 94.75239563]
[128.89953613 110.52563477]
[119.83226776 123.50857544]
[126.41671753 136.98616028]
[133.00115967 150.46372986]
[146.89758301 159.17129517]
[146.03448486 175.54771423]
[131.29977417 182.74633789]
[117.85123444 173.36183167]
[119.52358246 157.04817200]
[112.93914032 143.57060242]
[106.35469055 130.09301758]
[100.47051239 140.39569092]
[90.80429840 149.18801880]
[87.28100586 163.76835632]
[83.75772095 178.34870911]
[80.23442841 192.92904663]
[76.71113586 207.50938416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 158]
[14 157]
[15 156]
[16 155]
[17 154]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[39 49]
[40 48]
[41 47]
[42 46]
[51 140]
[52 139]
[53 138]
[54 137]
[55 135]
[56 134]
[57 133]
[58 132]
[59 131]
[60 130]
[61 129]
[62 96]
[63 95]
[64 94]
[65 93]
[66 92]
[67 90]
[68 89]
[69 88]
[70 85]
[71 84]
[72 83]
[73 81]
[74 80]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[106 112]
[107 111]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
