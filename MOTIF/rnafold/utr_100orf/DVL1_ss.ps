%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:39:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGGGCCGGGCCCUGAGCGCGCGGGCUCCGCGCCGCCGCCGCGCCAUGGCGGAGACCAAGAUUAUCUACCACAUGGACGAGGAGGAGACGCCGUACCUGGUCAAGCUGCCCGUGGCCCCCGAGCGCGUCACGCUGGCCGACUUCA\
) } def
/len { sequence length } bind def

/coor [
[85.02742767 580.00537109]
[76.87379456 567.14306641]
[74.66305542 552.07550049]
[78.77825165 537.41314697]
[88.50637817 525.69635010]
[102.16199493 518.95513916]
[101.52538300 503.96862793]
[100.88876343 488.98214722]
[100.25214386 473.99566650]
[99.61552429 459.00918579]
[98.97890472 444.02267456]
[89.03905487 438.25961304]
[83.08118439 428.29486084]
[82.70146942 416.57064819]
[88.11188507 406.02716064]
[98.05773926 399.36499023]
[98.05773926 384.36499023]
[98.05773926 369.36499023]
[97.89853668 354.36584473]
[97.58016205 339.36923218]
[97.26177979 324.37261963]
[96.94339752 309.37597656]
[88.93769836 296.81579590]
[96.38034058 282.85452271]
[96.06195831 267.85791016]
[95.74358368 252.86128235]
[95.42520142 237.86465454]
[84.52773285 227.77600098]
[83.99121857 212.57183838]
[94.64701843 201.20997620]
[94.32863617 186.21336365]
[94.01025391 171.21673584]
[93.69187164 156.22010803]
[93.37348938 141.22349548]
[71.91680908 130.89694214]
[59.59454727 110.52075958]
[60.41469193 86.72256470]
[74.11047363 67.24301910]
[67.07464600 53.99548721]
[53.76826477 45.43682480]
[54.63181686 30.56727219]
[47.59599304 17.31973839]
[34.28961182 8.76107407]
[35.15316391 -6.10847664]
[28.11733818 -19.35601044]
[20.94130898 -32.52812576]
[13.62588406 -45.62333679]
[6.31046057 -58.71854782]
[-1.00496376 -71.81375885]
[-8.32038784 -84.90897369]
[-20.53480530 -89.19145966]
[-26.34526253 -100.30592346]
[-23.10427094 -112.00521088]
[-30.14009476 -125.25274658]
[-37.31612396 -138.42486572]
[-44.63154984 -151.52006531]
[-51.94697189 -164.61528015]
[-67.35093689 -165.46467590]
[-79.83694458 -174.52575684]
[-85.42076111 -188.90715027]
[-82.32061005 -204.01982117]
[-71.52574158 -215.04135132]
[-56.48075104 -218.45483398]
[-41.98644257 -213.17102051]
[-32.66790390 -200.87596130]
[-31.49864006 -185.49298096]
[-38.85176086 -171.93070984]
[-31.53633690 -158.83549500]
[-24.22091293 -145.74028015]
[-18.17108154 -141.40472412]
[-16.89256096 -132.28857422]
[-9.85673618 -119.04103851]
[5.49101448 -110.59252930]
[4.77482367 -92.22439575]
[12.09024811 -79.12918854]
[19.40567207 -66.03397369]
[26.72109604 -52.93876266]
[34.03652191 -39.84355164]
[40.08635330 -35.50798798]
[41.36487198 -26.39183617]
[48.40069580 -13.14430237]
[61.20383072 -5.53319025]
[60.84352875 10.28391361]
[67.87935638 23.53144646]
[80.68248749 31.14255905]
[80.32218170 46.95966339]
[87.35800934 60.20719528]
[96.55194092 58.38993073]
[105.91959381 58.66907120]
[114.98899841 61.03056335]
[123.30323029 65.35542297]
[130.44338989 71.42575836]
[143.04650879 63.29180908]
[155.64964294 55.15785980]
[168.25277710 47.02391052]
[175.25366211 32.19422913]
[191.61708069 31.11218071]
[200.50973511 44.89088440]
[192.78363037 59.35599518]
[176.38671875 59.62704086]
[163.78359985 67.76099396]
[151.18046570 75.89493561]
[138.57733154 84.02888489]
[140.77914429 91.03625488]
[141.71891785 98.32102966]
[141.36758423 105.65776062]
[139.73600769 112.81940460]
[136.87467957 119.58431244]
[132.87216187 125.74311829]
[127.85231781 131.10523987]
[121.97049713 135.50471497]
[115.40873718 138.80538940]
[108.37010956 140.90512085]
[108.68849182 155.90173340]
[109.00687408 170.89836121]
[109.32525635 185.89497375]
[109.64363861 200.89160156]
[120.77204132 211.79096985]
[120.88128662 227.00421143]
[110.42182159 237.54627991]
[110.74020386 252.54289246]
[111.05857849 267.53952026]
[111.37696075 282.53613281]
[119.40543365 296.16897583]
[111.94001770 309.05761719]
[112.25839996 324.05422974]
[112.57678223 339.05084229]
[112.89515686 354.04745483]
[116.22489166 362.62951660]
[113.05773926 369.36499023]
[113.05773926 384.36499023]
[113.05773926 399.36499023]
[126.94620514 412.17016602]
[127.13407898 430.74249268]
[113.96539307 443.38607788]
[114.60201263 458.37255859]
[115.23862457 473.35903931]
[115.87524414 488.34552002]
[116.51186371 503.33200073]
[117.14848328 518.31848145]
[131.32659912 523.87731934]
[142.01333618 534.72692871]
[147.35716248 548.98748779]
[146.43220520 564.18829346]
[139.39874268 577.69567871]
[127.47535706 587.16949463]
[112.72784424 590.96826172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[11 135]
[16 132]
[17 131]
[18 130]
[19 128]
[20 127]
[21 126]
[22 125]
[24 123]
[25 122]
[26 121]
[27 120]
[30 117]
[31 116]
[32 115]
[33 114]
[34 113]
[38 87]
[39 86]
[41 84]
[42 83]
[44 81]
[45 80]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[53 72]
[54 71]
[55 69]
[56 68]
[57 67]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
