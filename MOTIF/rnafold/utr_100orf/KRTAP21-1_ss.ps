%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAGAAGCAUCUUCUUGAAACCCAUCUCAAUUCUCUCCUCUUGACAACAUGUGUUGCAACUACUACGGCAACUCCUGUGGCUAUGGCUCCGGCUGUGGCUGUGGCUAUGGCUCUGGCUCUGGCUGUGGCUGUGGCUAUGGAACUGGCU\
) } def
/len { sequence length } bind def

/coor [
[113.06056976 133.06677246]
[93.26715851 136.52230835]
[73.86763000 128.57540894]
[66.96063232 141.89056396]
[60.05363464 155.20571899]
[53.28552246 168.59199524]
[46.65702438 182.04795837]
[40.02852249 195.50393677]
[33.40002441 208.95989990]
[31.82467079 225.84049988]
[15.16767025 228.99972534]
[7.52079344 213.86824036]
[19.94405937 202.33139038]
[26.57255936 188.87542725]
[33.20105743 175.41946411]
[39.82955551 161.96350098]
[39.96485901 154.52526855]
[46.73847961 148.29872131]
[53.64547729 134.98356628]
[60.55247879 121.66840363]
[48.10739136 130.04216003]
[35.66230392 138.41592407]
[23.21721649 146.78967285]
[10.77212906 155.16343689]
[1.76257002 167.15625000]
[-10.57147121 175.69273376]
[-24.96926117 179.90029907]
[-39.95912170 179.34887695]
[-54.00885391 174.09483337]
[-65.68235779 164.67520142]
[-73.78640747 152.05282593]
[-77.49266052 137.51791382]
[-76.42225647 122.55615234]
[-70.68463135 108.69687653]
[-60.86624146 97.35671234]
[-47.97068787 89.69480896]
[-33.31610107 86.49433136]
[-18.40040588 88.08242035]
[-4.74776173 94.29705048]
[10.18748760 95.68928528]
[25.12273598 97.08152771]
[40.05798721 98.47376251]
[54.99323654 99.86599731]
[42.55379486 91.48385620]
[30.11435509 83.10171509]
[21.18627357 80.87882996]
[17.50580978 74.41355133]
[5.24344158 65.77443695]
[-7.01892662 57.13531876]
[-19.28129387 48.49620438]
[-35.65366364 47.55941391]
[-42.78588486 32.79244232]
[-33.34094238 19.38628387]
[-17.03498268 21.13204384]
[-10.64217854 36.23383331]
[1.62018955 44.87295151]
[13.88255787 53.51206589]
[26.14492607 62.15118408]
[38.49649811 70.66227722]
[50.93593979 79.04441833]
[63.37537766 87.42655945]
[69.42610931 77.55136871]
[77.97623444 70.09743500]
[88.14781952 65.64163208]
[98.95011139 64.46286774]
[109.37561798 66.52818298]
[118.49401855 71.50848389]
[125.53516388 78.82128906]
[129.95370483 87.69549561]
[144.77146912 85.36438751]
[159.58921814 83.03328705]
[167.05267334 67.88901520]
[181.91372681 60.23194504]
[198.25059509 62.89139557]
[209.68434143 74.62914276]
[224.45040894 71.99027252]
[239.21646118 69.35140991]
[247.17440796 64.73372650]
[254.31692505 66.81459045]
[269.13467407 64.48348236]
[283.95245361 62.15238190]
[298.77020264 59.82127762]
[313.58795166 57.49017334]
[328.40573120 55.15906906]
[343.22348022 52.82796478]
[358.04122925 50.49686432]
[372.85897827 48.16576004]
[387.67675781 45.83465576]
[402.49450684 43.50355148]
[417.31225586 41.17244720]
[429.74234009 31.38450813]
[443.51742554 37.04990005]
[458.33517456 34.71879578]
[473.15292358 32.38769150]
[487.97070312 30.05658722]
[502.78845215 27.72548294]
[517.60620117 25.39437866]
[530.03625488 15.60644054]
[543.81134033 21.27183151]
[558.62908936 18.94072723]
[573.44689941 16.60962296]
[588.26464844 14.27851868]
[603.08239746 11.94741535]
[615.51245117 2.15947652]
[629.28753662 7.82486677]
[644.10528564 5.49376249]
[658.92303467 3.16265869]
[671.33129883 -7.55963993]
[686.73022461 -1.92009676]
[689.27880859 14.27980995]
[676.35522461 24.37500572]
[661.25415039 17.98041725]
[646.43640137 20.31152153]
[631.61865234 22.64262390]
[620.24841309 32.26382828]
[605.41351318 26.76517296]
[590.59576416 29.09627724]
[575.77795410 31.42738152]
[560.96020508 33.75848389]
[546.14245605 36.08958817]
[534.77227783 45.71079254]
[519.93731689 40.21213913]
[505.11956787 42.54323959]
[490.30178833 44.87434387]
[475.48403931 47.20544815]
[460.66629028 49.53655243]
[445.84851074 51.86765671]
[434.47830200 61.48885727]
[419.64337158 55.99020386]
[404.82562256 58.32130814]
[390.00784302 60.65241241]
[375.19009399 62.98351669]
[360.37234497 65.31462097]
[345.55456543 67.64572144]
[330.73681641 69.97682953]
[315.91906738 72.30792999]
[301.10131836 74.63903809]
[286.28353882 76.97013855]
[271.46578979 79.30124664]
[256.64804077 81.63234711]
[241.85533142 84.11746979]
[227.08926392 86.75633240]
[212.32321167 89.39519501]
[207.61877441 101.92771912]
[197.24238586 110.55570984]
[183.84831238 112.93247986]
[170.93252563 108.32861328]
[161.92033386 97.85104370]
[147.10256958 100.18214417]
[132.28482056 102.51325226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 16]
[7 15]
[8 14]
[9 13]
[43 61]
[44 60]
[45 59]
[47 58]
[48 57]
[49 56]
[50 55]
[69 150]
[70 149]
[71 148]
[75 143]
[76 142]
[77 141]
[79 140]
[80 139]
[81 138]
[82 137]
[83 136]
[84 135]
[85 134]
[86 133]
[87 132]
[88 131]
[89 130]
[90 129]
[92 127]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
