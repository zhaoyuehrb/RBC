%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCAGGGUCCACUACGCUGCGCGCAGUGGGGAAGCUGCAGGUGCGUCUGGCCACUAAGACGGAGCCGAAAAAGCUAGAGAAAUAUUUGCAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[76.43167114 127.23365784]
[71.94601440 122.58566284]
[68.36276245 117.21115112]
[65.79719543 111.28300476]
[50.88599396 112.91278839]
[35.97479630 114.54257202]
[21.06359863 116.17235565]
[6.15240192 117.80213165]
[0.16019957 130.32604980]
[-11.17453766 138.15345764]
[-24.79207039 139.30287170]
[-37.08114624 133.57798767]
[-44.83667374 122.59125519]
[-59.79134369 123.75650787]
[-74.74601746 124.92176819]
[-89.70068359 126.08702850]
[-104.65535736 127.25228119]
[-119.61003113 128.41754150]
[-132.76744080 137.20350647]
[-146.05731201 130.47830200]
[-161.01197815 131.64355469]
[-175.96664429 132.80880737]
[-191.28820801 140.06732178]
[-202.50448608 127.35388947]
[-193.39288330 113.05651855]
[-177.13191223 117.85414124]
[-162.17723083 116.68888092]
[-147.22256470 115.52362823]
[-135.13481140 106.82099915]
[-120.77528381 113.46286774]
[-105.82061768 112.29761505]
[-90.86594391 111.13235474]
[-75.91127014 109.96709442]
[-60.95660400 108.80184174]
[-46.00193024 107.63658142]
[-37.93976212 93.43076324]
[-22.87413788 86.70392609]
[-6.59252644 90.25450134]
[4.52261972 102.89093781]
[19.43381691 101.26115417]
[34.34501266 99.63137054]
[49.25621033 98.00159454]
[64.16741180 96.37181091]
[79.46982574 70.40860748]
[109.14739990 65.16519928]
[115.89482880 51.76847458]
[122.64225006 38.37174988]
[121.09778595 20.10534096]
[135.96580505 10.92691517]
[142.29331970 -2.67317343]
[148.62084961 -16.27326202]
[154.94837952 -29.87335205]
[161.27590942 -43.47344208]
[153.62391663 -56.97257614]
[155.40136719 -72.38751221]
[165.92478943 -83.79089355]
[181.14772034 -86.79788971]
[195.21662903 -80.25224304]
[202.72172546 -66.67089081]
[200.77716064 -51.27614212]
[190.13064575 -39.98759079]
[174.87599182 -37.14591599]
[168.54846191 -23.54582596]
[162.22094727 -9.94573689]
[155.89341736 3.65435219]
[149.56588745 17.25444031]
[153.42247009 28.83652878]
[148.11843872 40.27732468]
[136.03897095 45.11917496]
[129.29154968 58.51589966]
[122.54412842 71.91262817]
[127.41736603 76.64563751]
[131.31515503 82.20955658]
[134.09878540 88.40643311]
[135.66925049 95.01578522]
[135.97067261 101.80246735]
[134.99232483 108.52501678]
[132.76899719 114.94426727]
[144.82145691 123.87390137]
[153.74868774 126.53794861]
[157.10408020 133.27343750]
[168.87300110 142.57357788]
[180.64190674 151.87371826]
[196.30766296 149.78573608]
[208.81053162 159.45289612]
[210.73277283 175.13984680]
[200.93395996 187.53981018]
[185.22755432 189.29608154]
[172.93190002 179.36672974]
[171.34176636 163.64263916]
[159.57286072 154.34248352]
[147.80393982 145.04234314]
[135.89181519 135.92636108]
[123.83936310 126.99671936]
[118.63354492 130.82092285]
[112.82834625 133.65370178]
[106.61048889 135.40394592]
[100.18000031 136.01535034]
[93.74372101 135.46826172]
[87.50868225 133.78024292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[20 28]
[21 27]
[22 26]
[45 71]
[46 70]
[47 69]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[78 94]
[79 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
