%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUAAGUGGAGGCGUCGCGCUGGCGGGCAUUCCUGAAGCUGACAGCAUUCGGGCCGAGAUGUCUCGCUCCGUGGCCUUAGCUGUGCUCGCGCUACUCUCUCUUUCUGGCCUGGAGGCUAUCCAGCGUACUCCAAAGAUUCAGGUUUACUCACGUCAUC\
) } def
/len { sequence length } bind def

/coor [
[136.70452881 322.16296387]
[132.65847778 316.89068604]
[129.84507751 310.85269165]
[128.40420532 304.33328247]
[128.41094971 297.64111328]
[129.87165833 291.09445190]
[132.72340393 285.00619507]
[136.83662415 279.66867065]
[142.02098083 275.33990479]
[137.13591003 261.15765381]
[132.25085449 246.97538757]
[127.36579895 232.79315186]
[122.48073578 218.61090088]
[114.71972656 216.71801758]
[108.28143311 211.83123779]
[104.27857208 204.70079041]
[103.44023895 196.47187805]
[105.98014069 188.50091553]
[111.54888916 182.13195801]
[107.78453064 167.61198425]
[104.02017212 153.09201050]
[100.25581360 138.57203674]
[96.49145508 124.05207062]
[92.72709656 109.53209686]
[84.80867004 96.79245758]
[73.45501709 86.98966980]
[62.10136795 77.18688202]
[50.74771881 67.38409424]
[39.39406586 57.58131027]
[28.04041672 47.77852249]
[16.68676567 37.97573853]
[5.33311558 28.17295074]
[5.01096725 43.16949081]
[-5.69544840 53.67533112]
[-20.69539833 53.71384430]
[-31.45561981 43.26311874]
[-31.85476875 28.26842880]
[-21.66577530 17.26004982]
[-6.68668985 16.49991035]
[-16.81754494 5.43800402]
[-26.94840050 -5.62390232]
[-37.07925797 -16.68580818]
[-47.21011353 -27.74771500]
[-57.34096909 -38.80961990]
[-70.20096588 -40.16458130]
[-78.41159058 -49.62916183]
[-77.96587372 -61.74915695]
[-87.87895966 -73.00662994]
[-101.36029816 -72.31147003]
[-112.60769653 -79.41793060]
[-117.61930084 -91.53161621]
[-114.76614380 -104.12705231]
[-124.45769501 -115.57579803]
[-134.14924622 -127.02455139]
[-143.84078979 -138.47329712]
[-158.66262817 -144.00718689]
[-160.98027039 -158.72036743]
[-170.67181396 -170.16911316]
[-180.36335754 -181.61787415]
[-190.05491638 -193.06661987]
[-205.66369629 -198.09631348]
[-208.84724426 -214.18348694]
[-196.33059692 -224.77902222]
[-180.98980713 -218.98315430]
[-178.60615540 -202.75816345]
[-168.91461182 -191.30941772]
[-159.22306824 -179.86067200]
[-149.53150940 -168.41192627]
[-135.40289307 -163.69692993]
[-132.39204407 -148.16484070]
[-122.70049286 -136.71609497]
[-113.00894928 -125.26734924]
[-103.31739807 -113.81859589]
[-86.53534698 -113.15885162]
[-75.18119049 -100.32947540]
[-76.62149048 -82.91971588]
[-66.70840454 -71.66224670]
[-49.81570435 -66.98799896]
[-46.27906036 -48.94047546]
[-36.14820480 -37.87857056]
[-26.01735115 -26.81666374]
[-15.88649464 -15.75475788]
[-5.75563955 -4.69285154]
[4.37521601 6.36905432]
[15.13590145 16.81930161]
[26.48955154 26.62208748]
[37.84320450 36.42487335]
[49.19685364 46.22765732]
[60.55050278 56.03044510]
[71.90415192 65.83322906]
[83.25780487 75.63601685]
[94.61145782 85.43880463]
[89.34739685 71.39282227]
[80.41489410 59.34249496]
[76.52864838 44.85466766]
[78.23113251 29.95159531]
[85.28469849 16.71349716]
[96.70478821 6.98819065]
[110.89734650 2.13316488]
[125.88133240 2.82609987]
[139.56523132 8.97027397]
[150.03900146 19.70806313]
[155.84068298 33.54065323]
[156.16044617 48.53724289]
[150.95367432 62.60456467]
[140.94714355 73.77905273]
[127.53481293 80.50172424]
[116.49744415 90.65930176]
[131.05345154 87.03678131]
[145.60946655 83.41426849]
[160.16546631 79.79174805]
[174.72148132 76.16923523]
[186.14085388 64.39935303]
[201.97531128 68.66572571]
[205.93571472 84.57946777]
[193.94795227 95.76988983]
[178.34399414 90.72524261]
[163.78797913 94.34775543]
[149.23197937 97.97027588]
[134.67596436 101.59278870]
[120.11995697 105.21530914]
[115.65121460 106.49137115]
[111.28755188 106.65439606]
[107.24707031 105.76773834]
[111.01142883 120.28771210]
[114.77578735 134.80767822]
[118.54014587 149.32765198]
[122.30450439 163.84762573]
[126.06886292 178.36759949]
[142.97180176 193.04058838]
[136.66297913 213.72583008]
[141.54804993 227.90808105]
[146.43310547 242.09033203]
[151.31816101 256.27258301]
[156.20323181 270.45483398]
[179.36701965 278.45251465]
[189.29313660 300.59094238]
[180.04281616 322.75625610]
[187.58502197 335.72216797]
[195.12722778 348.68811035]
[212.09815979 352.83081055]
[220.67550659 367.66113281]
[215.99099731 383.78961182]
[223.78474426 396.60589600]
[238.96849060 401.78604126]
[244.24955750 416.93493652]
[235.57678223 430.43170166]
[219.60317993 431.92276001]
[208.58230591 420.26428223]
[210.96846008 404.39965820]
[203.17469788 391.58337402]
[190.32365417 390.30432129]
[180.41824341 381.71710205]
[177.23596191 368.79895020]
[182.16131592 356.23031616]
[174.61911011 343.26440430]
[167.07690430 330.29846191]
[160.61016846 331.45101929]
[154.03195190 331.17358398]
[147.65538025 329.47268677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 135]
[10 134]
[11 133]
[12 132]
[13 131]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[30 87]
[31 86]
[32 85]
[39 84]
[40 83]
[41 82]
[42 81]
[43 80]
[44 79]
[47 77]
[48 76]
[52 73]
[53 72]
[54 71]
[55 70]
[57 68]
[58 67]
[59 66]
[60 65]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
[138 157]
[139 156]
[140 155]
[143 151]
[144 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
