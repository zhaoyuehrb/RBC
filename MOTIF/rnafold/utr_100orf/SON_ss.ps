%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGGGAGCCUGGAGGACUAGCGAGGAGGAGUUGAGAGAACGGAGCGGACGCCAUGGCGACCAACAUCGAGCAGAUUUUUAGGUCUUUCGUGGUCAGUAAAUUCCGGGAAAUUCAACAGGAGCUUUCCAGUGGAAGGAAUGAAGGCCAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[86.66809082 240.24858093]
[86.51691437 224.44500732]
[97.64431000 213.22196960]
[97.34225464 198.22502136]
[97.04019928 183.22805786]
[96.73814392 168.23109436]
[96.43608856 153.23414612]
[70.28303528 141.83364868]
[54.65983200 119.29543304]
[53.28334427 93.01382446]
[65.40927124 70.90950012]
[55.69054031 59.48381424]
[45.97180939 48.05812836]
[36.25307846 36.63244247]
[26.53434563 25.20675850]
[16.81561470 13.78107357]
[7.09688473 2.35538936]
[-12.15848637 -3.48189378]
[-14.95036507 -22.58165741]
[-25.12128067 -33.60674286]
[-35.29219437 -44.63182831]
[-50.33651352 -49.52866745]
[-53.27941895 -64.12964630]
[-63.45033646 -75.15473175]
[-80.91242218 -75.52223969]
[-92.49935913 -88.13745117]
[-91.42713165 -104.89510345]
[-101.81799316 -115.71314240]
[-112.20886230 -126.53118134]
[-122.59972382 -137.34921265]
[-132.99058533 -148.16725159]
[-143.38145447 -158.98529053]
[-158.52133179 -163.57818604]
[-161.75765991 -178.11694336]
[-172.14852905 -188.93498230]
[-182.53939819 -199.75302124]
[-192.93025208 -210.57106018]
[-203.32112122 -221.38909912]
[-213.71199036 -232.20713806]
[-224.10285950 -243.02516174]
[-241.79460144 -237.98399353]
[-259.52832031 -242.54745483]
[-272.46911621 -255.38325500]
[-277.13345337 -272.91589355]
[-272.32653809 -290.32232666]
[-283.35162354 -300.49322510]
[-302.19070435 -298.97479248]
[-315.96218872 -311.45077515]
[-316.29455566 -329.71224976]
[-327.72024536 -339.43099976]
[-343.24511719 -342.47872925]
[-347.92651367 -356.61853027]
[-359.35220337 -366.33724976]
[-370.77789307 -376.05599976]
[-386.99716187 -378.47817993]
[-392.75656128 -393.83270264]
[-382.13131714 -406.32412720]
[-366.05175781 -403.10235596]
[-361.05917358 -387.48165894]
[-349.63348389 -377.76293945]
[-338.20779419 -368.04421997]
[-323.50015259 -365.69161987]
[-318.00152588 -350.85665894]
[-306.57583618 -341.13793945]
[-295.60653687 -344.50991821]
[-284.25985718 -342.11767578]
[-275.40380859 -334.44674683]
[-271.33428955 -323.33172607]
[-273.18069458 -311.51831055]
[-262.15560913 -301.34741211]
[-251.42317200 -306.41909790]
[-239.57215881 -307.55361938]
[-228.00509644 -304.59298706]
[-218.09893799 -297.86535645]
[-211.04116821 -288.14865112]
[-207.68743896 -276.58081055]
[-208.45793152 -264.52648926]
[-213.28482056 -253.41603088]
[-202.89395142 -242.59799194]
[-192.50308228 -231.77995300]
[-182.11222839 -220.96192932]
[-171.72135925 -210.14389038]
[-161.33049011 -199.32585144]
[-150.93962097 -188.50781250]
[-136.54296875 -184.68869019]
[-132.56341553 -169.37615967]
[-122.17255402 -158.55812073]
[-111.78168488 -147.74008179]
[-101.39082336 -136.92204285]
[-90.99995422 -126.10401154]
[-80.60909271 -115.28597260]
[-67.78290558 -116.82762146]
[-56.24709320 -110.59163666]
[-50.33854675 -98.66677856]
[-52.42525101 -85.32564545]
[-42.25433731 -74.30056000]
[-27.93750954 -70.19230652]
[-24.26711082 -54.80274200]
[-14.09619617 -43.77765656]
[-3.92528105 -32.75257111]
[6.35073614 -33.25487900]
[15.38012600 -27.87897491]
[20.02705574 -18.20866776]
[18.52256966 -7.36334133]
[28.24130058 4.06234312]
[37.96002960 15.48802757]
[47.67876053 26.91371155]
[57.39749146 38.33939743]
[67.11622620 49.76508331]
[76.83495331 61.19076538]
[83.75575256 57.24081802]
[91.35024261 54.53084946]
[99.39526367 53.17557907]
[107.64817047 53.24939728]
[115.85420227 54.78307343]
[123.75427246 57.76181412]
[131.09323120 62.12472534]
[137.62799072 67.76576233]
[143.13562012 74.53613281]
[147.42077637 82.24810791]
[150.32257080 90.68019867]
[151.72038269 99.58347321]
[151.53851318 108.68889618]
[149.74949646 117.71546173]
[146.37597656 126.37886810]
[158.72073364 134.89984131]
[171.06549072 143.42080688]
[183.41024780 151.94178772]
[195.75500488 160.46275330]
[208.09976196 168.98371887]
[224.56982422 173.00534058]
[225.26473999 189.94503784]
[209.17942810 195.30216980]
[199.57879639 181.32847595]
[187.23402405 172.80751038]
[174.88926697 164.28654480]
[162.54450989 155.76556396]
[150.19975281 147.24459839]
[137.85499573 138.72363281]
[131.24951172 142.27574158]
[138.35374451 155.48672485]
[145.45796204 168.69769287]
[152.56198120 181.90879822]
[139.35076904 189.01258850]
[132.24699402 175.80192566]
[125.14276123 162.59094238]
[118.03853607 149.37997437]
[111.43304443 152.93208313]
[111.73509979 167.92904663]
[112.03715515 182.92601013]
[112.33921051 197.92295837]
[112.64126587 212.91992188]
[124.21154785 223.68580627]
[124.69683838 239.48263550]
[113.80922699 250.93844604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[11 110]
[12 109]
[13 108]
[14 107]
[15 106]
[16 105]
[17 104]
[19 100]
[20 99]
[21 98]
[23 96]
[24 95]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[34 84]
[35 83]
[36 82]
[37 81]
[38 80]
[39 79]
[40 78]
[45 70]
[46 69]
[49 64]
[50 63]
[52 61]
[53 60]
[54 59]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
