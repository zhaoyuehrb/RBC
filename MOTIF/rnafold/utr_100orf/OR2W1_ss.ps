%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCAAAGCAAUUAUAGUUCUUUACAUGGUUUUAUUCUGCUUGGCUUCUCUAACCAUCCAAAAAUGGAGAUGAUCCUGUCAGGAGUUGUCGCCAUCU\
) } def
/len { sequence length } bind def

/coor [
[145.60508728 143.53015137]
[144.16220093 129.72171021]
[130.66217041 123.18344116]
[117.16212463 116.64517975]
[103.66208649 110.10691071]
[89.18331146 106.18708038]
[74.22863770 105.02182007]
[59.27396774 103.85656738]
[44.31929779 102.69130707]
[35.34027100 105.17520142]
[28.92003441 101.25014496]
[14.00883579 99.62036133]
[-0.90236145 97.99058533]
[-10.45330048 107.63706207]
[-23.63428497 109.93104553]
[-35.52946854 104.24706268]
[-41.83520508 92.89278412]
[-56.68850708 90.80005646]
[-71.54180145 88.70732880]
[-86.39510345 86.61459351]
[-98.93930054 95.84935760]
[-113.97284698 93.51544189]
[-122.69947815 81.49954987]
[-137.55278015 79.40682220]
[-150.02557373 89.11273956]
[-165.69773865 87.07337952]
[-175.27124023 74.49865723]
[-173.06629944 58.84893799]
[-160.39106750 49.40891647]
[-144.76553345 51.77919388]
[-135.46003723 64.55352783]
[-120.60674286 66.64625549]
[-108.89982605 57.50931549]
[-93.80665588 59.42005157]
[-84.30237579 71.76129913]
[-69.44907379 73.85402679]
[-54.59577560 75.94675446]
[-39.74247742 78.03948975]
[-26.84778404 67.36867523]
[-9.88212872 69.27791595]
[0.72742081 83.07938385]
[15.63861847 84.70916748]
[30.54981613 86.33895111]
[45.48455429 87.73664093]
[60.43922806 88.90189362]
[75.39389801 90.06715393]
[90.34856415 91.23241425]
[79.73294830 80.63483429]
[74.59877777 66.54085541]
[75.91062927 51.59833145]
[83.42204285 38.61454391]
[95.72182465 30.02878952]
[110.49920654 27.45408440]
[124.97792053 31.37414742]
[136.43782043 41.05250931]
[142.72592163 54.67087173]
[142.66084290 69.67073059]
[136.25483704 83.23403168]
[124.71141052 92.81260681]
[110.20035553 96.60687256]
[123.70039368 103.14513397]
[137.20042419 109.68340302]
[150.70046997 116.22167206]
[165.41105652 108.04702759]
[181.94017029 110.16502380]
[193.87553406 121.55670166]
[196.70408630 137.64405823]
[210.40093994 143.75930786]
[224.09777832 149.87457275]
[237.79463196 155.98982239]
[253.55026245 154.55081177]
[262.01745605 166.80462646]
[275.71429443 172.91987610]
[289.41116333 179.03514099]
[303.10800171 185.15039062]
[316.80484009 191.26564026]
[330.59515381 197.16714478]
[344.47555542 202.85346985]
[358.35595703 208.53979492]
[372.23635864 214.22612000]
[389.18536377 214.63551331]
[393.48394775 231.03547668]
[378.91485596 239.70600891]
[366.55004883 228.10653687]
[352.66964722 222.42021179]
[338.78924561 216.73388672]
[324.90881348 211.04756165]
[317.39364624 211.43153381]
[310.68960571 204.96249390]
[296.99273682 198.84724426]
[283.29589844 192.73197937]
[269.59906006 186.61672974]
[255.90220642 180.50148010]
[241.12626648 182.37788391]
[231.67938232 169.68667603]
[217.98252869 163.57141113]
[204.28567505 157.45616150]
[190.58883667 151.34091187]
[179.59663391 159.08868408]
[166.09910583 160.35852051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 47]
[7 46]
[8 45]
[9 44]
[11 43]
[12 42]
[13 41]
[17 38]
[18 37]
[19 36]
[20 35]
[23 32]
[24 31]
[67 98]
[68 97]
[69 96]
[70 95]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
