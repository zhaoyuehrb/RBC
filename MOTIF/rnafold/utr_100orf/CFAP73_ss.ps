%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGUGCCCUGGGAGGAAUAUUUCCGACUGGCUUUGCAAGAGAAACUGUCUACAAAGCUGCCAGAGCAGGCUGAGGAUCAUGUCCCACCAGUACUGC\
) } def
/len { sequence length } bind def

/coor [
[61.00485992 452.11090088]
[44.67705917 450.58285522]
[38.08334351 435.56768799]
[48.00676346 422.51174927]
[49.40445328 407.57699585]
[50.80214310 392.64227295]
[52.19982910 377.70751953]
[53.59751892 362.77276611]
[54.99520874 347.83804321]
[56.39289856 332.90328979]
[53.96997452 328.59979248]
[54.35217667 322.70373535]
[58.37016296 317.09347534]
[60.69363403 302.27450562]
[63.01710892 287.45556641]
[54.06333923 275.60797119]
[56.20856857 260.54632568]
[68.69612885 251.23512268]
[71.01959991 236.41616821]
[73.34307861 221.59721375]
[61.01060867 213.20817566]
[53.51262283 200.24324036]
[52.38267136 185.24710083]
[57.89828110 171.19013977]
[69.01532745 160.88003540]
[83.56522369 156.40100098]
[85.88870239 141.58204651]
[88.21217346 126.76309204]
[75.50367737 118.02843475]
[68.61481476 103.56184387]
[69.93679810 86.98899078]
[79.71331024 72.80362701]
[95.81755066 65.14955139]
[93.03433990 50.41002655]
[90.25112152 35.67049789]
[87.46790314 20.93096733]
[84.68469238 6.19143963]
[81.90147400 -8.54808903]
[79.11825562 -23.28761864]
[68.84684753 -31.27855492]
[66.91040802 -43.73948669]
[73.81700897 -53.80511093]
[71.49353790 -68.62406921]
[69.17006683 -83.44302368]
[55.68605042 -91.36232758]
[50.49586105 -106.11346436]
[56.05015182 -120.73139191]
[69.72634888 -128.31398010]
[85.06697083 -125.28096008]
[94.82865143 -113.06443024]
[94.40221405 -97.43266296]
[83.98902130 -85.76649475]
[86.31249237 -70.94754028]
[88.63596344 -56.12858582]
[100.38916779 -43.19940567]
[93.85778809 -26.07083511]
[96.64099884 -11.33130550]
[99.42421722 3.40822315]
[102.20743561 18.14775276]
[104.99064636 32.88727951]
[107.77386475 47.62680817]
[110.55708313 62.36633682]
[123.95381165 69.11376190]
[137.45384216 62.57549667]
[150.95388794 56.03723145]
[155.90315247 41.02788925]
[170.05342102 33.98904800]
[185.00959778 39.09672546]
[191.89845276 53.32062912]
[186.63293457 68.22196198]
[172.33699036 74.96003723]
[157.49215698 69.53726959]
[143.99211121 76.07553864]
[130.49208069 82.61380005]
[133.62832642 99.26284027]
[128.61978149 114.69574738]
[117.34239960 125.34233093]
[103.03112793 129.08656311]
[100.70765686 143.90551758]
[98.38418579 158.72447205]
[110.86504364 167.44168091]
[118.29312897 180.65948486]
[119.24182892 195.72999573]
[113.57641602 209.66067505]
[102.47022247 219.70866394]
[88.16203308 223.92068481]
[85.83856201 238.73963928]
[83.51509094 253.55859375]
[92.55364990 266.24490356]
[89.98621368 281.24032593]
[77.83606720 289.77902222]
[75.51258850 304.59799194]
[73.18911743 319.41693115]
[71.32763672 334.30099487]
[69.92994690 349.23571777]
[68.53225708 364.17047119]
[67.13457489 379.10522461]
[65.73688507 394.03994751]
[64.33919525 408.97470093]
[62.94150543 423.90942383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[13 93]
[14 92]
[15 91]
[18 88]
[19 87]
[20 86]
[26 80]
[27 79]
[28 78]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[42 54]
[43 53]
[44 52]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
