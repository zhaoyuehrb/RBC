%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGCAGUCCGUGCUGGUGGGAGCGUGGCGACUAGUUGCACAGCAACGGUCCAGGAAGAUGAGUGCCUGCGGGAGGAAGGCCCUGACCCUGCUGAGCAGUGUCUUUGCUGUCUGUGGCUUGGGCCUCCUGGGUAUCGCGGUCAGCACCGACUACUGGC\
) } def
/len { sequence length } bind def

/coor [
[108.88449860 146.71702576]
[98.50718689 135.88598633]
[99.50431824 120.91957855]
[93.79788208 134.79173279]
[88.09145355 148.66387939]
[82.38501740 162.53604126]
[76.67858887 176.40818787]
[81.50220490 191.70892334]
[72.42790222 204.93905640]
[56.41670609 205.94956970]
[45.75103760 193.96528625]
[48.61268234 178.17951965]
[62.80643463 170.70175171]
[68.51287079 156.82960510]
[74.21929932 142.95745850]
[79.92573547 129.08529663]
[85.63216400 115.21315002]
[81.58521271 100.76938629]
[69.50177765 91.88172150]
[57.41834259 82.99405670]
[45.33491135 74.10639191]
[33.25147629 65.21872711]
[21.16803932 56.33105850]
[5.74447107 58.51079941]
[-6.38324165 49.32530975]
[-8.36624241 34.60786057]
[-20.44967651 25.72019577]
[-36.15101242 23.77631760]
[-41.81918716 10.00239182]
[-53.90262222 1.11472571]
[-65.98605347 -7.77294016]
[-80.01926422 -13.07095528]
[-94.96147919 -14.38639069]
[-109.90368652 -15.70182610]
[-124.84589386 -17.01726151]
[-133.72027588 -14.64424419]
[-140.06585693 -18.50692749]
[-154.97955322 -20.11366081]
[-169.89324951 -21.72039413]
[-184.80696106 -23.32712936]
[-199.72065735 -24.93386269]
[-216.11631775 -20.61892700]
[-224.80139160 -35.17934799]
[-213.21426392 -47.55573273]
[-198.11392212 -39.84756088]
[-183.20022583 -38.24082565]
[-168.28652954 -36.63409424]
[-153.37281799 -35.02735901]
[-138.45912170 -33.42062759]
[-123.53046417 -31.95947075]
[-108.58824921 -30.64403534]
[-93.64604187 -29.32859993]
[-78.70383453 -28.01316452]
[-71.80285645 -41.33144379]
[-81.49440765 -52.78019333]
[-91.18595886 -64.22894287]
[-100.87750244 -75.67769623]
[-115.97687531 -72.86616516]
[-130.45372009 -77.99612427]
[-140.41384888 -89.68763733]
[-143.17802429 -104.79574585]
[-138.00271606 -119.25643921]
[-126.28004456 -129.17987061]
[-111.16334534 -131.89668274]
[-96.71894836 -126.67607117]
[-86.83230591 -114.92234802]
[-84.16288757 -99.79721069]
[-89.42875671 -85.36923981]
[-79.73720551 -73.92049408]
[-70.04565430 -62.47174454]
[-60.35410690 -51.02299118]
[-63.37041855 -65.71659088]
[-52.57170105 -76.12753296]
[-38.18353271 -80.36788940]
[-23.46468925 -77.47727203]
[-11.74884033 -68.11036682]
[-5.68950462 -54.38868713]
[-6.65905952 -39.42005539]
[-14.43791103 -26.59471130]
[-27.26422882 -18.81746483]
[-42.23320389 -17.84982109]
[-57.09838867 -19.85637474]
[-45.01495361 -10.96870899]
[-32.93152237 -2.08104324]
[-18.09447479 -0.77287138]
[-11.56201172 13.63676071]
[0.52142352 22.52442741]
[15.16149426 20.03365898]
[27.54242325 28.87488365]
[30.05570602 44.24762344]
[42.13914108 53.13528824]
[54.22257614 62.02295685]
[66.30600739 70.91062164]
[78.38944244 79.79828644]
[90.47287750 88.68595123]
[97.21369171 83.00410461]
[107.19667816 81.71041107]
[117.46768951 86.48387909]
[124.33831787 97.03630066]
[138.65745544 101.50421906]
[152.97659302 105.97213745]
[167.29573059 110.44006348]
[181.65777588 114.76806641]
[196.06137085 118.95574188]
[210.46495056 123.14341736]
[224.19694519 115.79016876]
[238.74456787 120.24225616]
[245.67015076 133.37892151]
[260.07373047 137.56660461]
[274.47732544 141.75427246]
[288.88092041 145.94195557]
[303.28448486 150.12963867]
[318.69604492 146.55268860]
[328.75720215 157.53552246]
[343.16076660 161.72320557]
[357.56436157 165.91087341]
[371.96795654 170.09855652]
[386.37155151 174.28622437]
[400.85409546 178.19207764]
[415.41009521 181.81459045]
[429.96612549 185.43710327]
[444.52212524 189.05961609]
[459.07812500 192.68214417]
[473.63415527 196.30465698]
[488.19015503 199.92716980]
[505.02066040 197.88496399]
[511.64218140 213.49238586]
[498.47772217 224.17572021]
[484.56762695 214.48318481]
[470.01162720 210.86067200]
[455.45562744 207.23814392]
[440.89959717 203.61563110]
[426.34359741 199.99311829]
[411.78759766 196.37059021]
[397.23159790 192.74807739]
[392.71109009 194.42616272]
[387.08673096 193.24630737]
[382.18386841 188.68981934]
[367.78027344 184.50213623]
[353.37667847 180.31446838]
[338.97311401 176.12678528]
[324.56951904 171.93911743]
[310.18820190 175.81559753]
[299.09683228 164.53321838]
[284.69323730 160.34553528]
[270.28964233 156.15786743]
[255.88606262 151.97018433]
[241.48246765 147.78251648]
[228.59315491 155.15823364]
[213.92620850 151.11651611]
[206.27728271 137.54701233]
[191.87368774 133.35932922]
[177.47009277 129.17164612]
[170.13215637 130.32984924]
[162.82780457 124.75919342]
[148.50866699 120.29127502]
[134.18952942 115.82335663]
[119.87039948 111.35543823]
[132.02433777 120.14645386]
[133.73143005 135.04899597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[18 95]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[26 87]
[27 86]
[29 84]
[30 83]
[31 82]
[32 53]
[33 52]
[34 51]
[35 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[54 71]
[55 70]
[56 69]
[57 68]
[99 158]
[100 157]
[101 156]
[102 155]
[103 153]
[104 152]
[105 151]
[108 148]
[109 147]
[110 146]
[111 145]
[112 144]
[114 142]
[115 141]
[116 140]
[117 139]
[118 138]
[119 135]
[120 134]
[121 133]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
