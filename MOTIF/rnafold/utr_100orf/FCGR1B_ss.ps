%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUCUUGCAUGUUACAGAUUUCACUACUCCCACCAGCUUGGAGACAACAUGUGGUUCUUGACAACUCUGCUCCUUUGGGUUCCAGUUGAUGGGCAAGUGGACACCACAAAGGCAGUGAUCACUUUGCAGCCUCCAUGGGUCAGCGUGU\
) } def
/len { sequence length } bind def

/coor [
[105.95362854 227.62185669]
[101.31297302 242.33470154]
[89.44003296 252.18542480]
[74.12342834 254.03071594]
[60.25062180 247.28172302]
[52.24838638 234.09204102]
[52.67020035 218.67044067]
[61.38146591 205.93791199]
[75.60244751 199.95733643]
[78.08756256 185.16464233]
[80.57268524 170.37193298]
[83.05780029 155.57922363]
[85.54292297 140.78651428]
[88.02803802 125.99380493]
[90.51316071 111.20110321]
[82.44804382 123.84838867]
[68.67012024 129.77871704]
[53.94065475 126.94272614]
[43.34974670 116.32045746]
[40.55731964 101.58267212]
[46.52836227 87.82234192]
[59.19944763 79.79465485]
[74.19179535 80.27377319]
[86.32466888 89.09439087]
[78.60058594 76.23598480]
[70.87650299 63.37758636]
[63.15241623 50.51918411]
[49.75809097 48.77285767]
[39.97211456 39.74719238]
[37.23211288 26.91883659]
[42.32330322 15.04127121]
[34.86839294 2.02496171]
[27.41348267 -10.99134731]
[19.95857239 -24.00765800]
[6.38589621 -32.13742065]
[6.77459145 -47.02695084]
[-0.68031901 -60.04326248]
[-8.13522911 -73.05957031]
[-15.59013939 -86.07588196]
[-23.04504967 -99.09219360]
[-30.07182121 -105.03157806]
[-30.51642799 -112.45774841]
[-37.69893646 -125.62632751]
[-44.88144684 -138.79490662]
[-52.06395340 -151.96350098]
[-67.98920441 -161.14860535]
[-66.95402527 -178.63940430]
[-74.40893555 -191.65571594]
[-81.86384583 -204.67202759]
[-98.67311859 -206.25334167]
[-111.12027740 -217.41352844]
[-114.45273590 -233.62651062]
[-107.55599976 -248.49057007]
[-115.28008270 -261.34896851]
[-123.00416565 -274.20736694]
[-130.72825623 -287.06576538]
[-145.92179871 -285.61016846]
[-160.23930359 -290.89898682]
[-170.83802795 -301.88217163]
[-175.61355591 -316.37896729]
[-173.61773682 -331.51101685]
[-165.24682617 -344.27389526]
[-152.16287231 -352.13345337]
[-136.96369934 -353.52923584]
[-122.66713715 -348.18405151]
[-112.11175537 -337.15924072]
[-107.39334106 -322.64373779]
[-109.44873810 -307.51965332]
[-117.86985016 -294.78985596]
[-110.14576721 -281.93145752]
[-102.42167664 -269.07305908]
[-94.69759369 -256.21466064]
[-81.31134796 -256.28143311]
[-69.55390930 -249.65769958]
[-62.56329727 -237.98800659]
[-62.26605225 -224.27943420]
[-68.84754181 -212.12693787]
[-61.39262772 -199.11062622]
[-53.93771744 -186.09431458]
[-42.31491089 -182.59895325]
[-36.01013184 -171.76065063]
[-38.89537430 -159.14599609]
[-31.71286392 -145.97741699]
[-24.53035545 -132.80883789]
[-17.34784698 -119.64025116]
[-10.02874088 -106.54710388]
[-2.57383013 -93.53079224]
[4.88108015 -80.51448059]
[12.33599091 -67.49816895]
[19.79090118 -54.48186111]
[32.83035278 -47.28311539]
[32.97488022 -31.46256828]
[40.42979050 -18.44625854]
[47.88470078 -5.42994833]
[55.33961105 7.58636093]
[71.71852112 11.27272415]
[80.56437683 25.93679237]
[76.01081848 42.79509735]
[83.73490143 55.65349960]
[91.45899200 68.51190186]
[99.18307495 81.37030792]
[124.03097534 92.46455383]
[137.93353271 98.09651184]
[151.83609009 103.72846985]
[161.03077698 104.05928040]
[165.96731567 109.62491608]
[179.74969482 115.54487610]
[193.53207397 121.46484375]
[206.83706665 113.70061493]
[221.98564148 115.24153900]
[233.18960571 125.28819275]
[236.29217529 139.83163452]
[250.07455444 145.75160217]
[263.85693359 151.67156982]
[277.63931274 157.59153748]
[293.37289429 155.92874146]
[302.01342773 168.06095886]
[315.79580688 173.98092651]
[329.57818604 179.90089417]
[343.36056519 185.82084656]
[358.73394775 181.23408508]
[371.82238770 190.51159668]
[372.58554077 206.53648376]
[360.43798828 217.01582336]
[344.69830322 213.91076660]
[337.44058228 199.60324097]
[323.65820312 193.68327332]
[309.87582397 187.76330566]
[296.09344482 181.84333801]
[281.34567261 183.92958069]
[271.71936035 171.37391663]
[257.93698120 165.45394897]
[244.15460205 159.53398132]
[230.37222290 153.61402893]
[217.68844604 161.37673950]
[202.68835449 160.16792297]
[191.14129639 150.24226379]
[187.61210632 135.24722290]
[173.82972717 129.32725525]
[160.04734802 123.40729523]
[146.20413208 117.63102722]
[132.30157471 111.99906921]
[118.39901733 106.36711121]
[105.30587006 113.68621826]
[102.82074738 128.47892761]
[100.33563232 143.27163696]
[97.85050964 158.06434631]
[95.36539459 172.85704041]
[92.88027191 187.64974976]
[90.39515686 202.44245911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 150]
[10 149]
[11 148]
[12 147]
[13 146]
[14 145]
[15 144]
[24 101]
[25 100]
[26 99]
[27 98]
[31 95]
[32 94]
[33 93]
[34 92]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[42 85]
[43 84]
[44 83]
[45 82]
[47 79]
[48 78]
[49 77]
[53 72]
[54 71]
[55 70]
[56 69]
[102 143]
[103 142]
[104 141]
[106 140]
[107 139]
[108 138]
[112 134]
[113 133]
[114 132]
[115 131]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
