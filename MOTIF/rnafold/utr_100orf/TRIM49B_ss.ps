%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUUCUGGAAUCUUACAGGUCUUUCAGAGGGAACUCAUCUGCCCCAUCUGCAUGAACUACUUCAUAGACCCGGUCACCAUAGACUGUGGGCACAGCU\
) } def
/len { sequence length } bind def

/coor [
[75.34803772 130.45480347]
[65.81963348 120.48986053]
[53.49530029 129.04034424]
[41.17096329 137.59083557]
[28.84663010 146.14131165]
[21.28926277 164.70123291]
[2.09591484 165.89631653]
[-9.67299938 175.19645691]
[-21.44191360 184.49661255]
[-33.21082687 193.79675293]
[-32.44901276 209.29510498]
[-40.97055817 222.26287842]
[-55.49875259 227.71366882]
[-70.44721222 223.55155945]
[-80.06794739 211.37695312]
[-80.66159058 195.87123108]
[-71.99987030 182.99667358]
[-57.41339874 177.70379639]
[-42.51097107 182.02783203]
[-30.74205589 172.72769165]
[-18.97314262 163.42755127]
[-7.20422840 154.12741089]
[-6.89626455 143.69757080]
[-0.69047374 135.03486633]
[9.50137711 131.23263550]
[20.29614639 133.81698608]
[32.62047958 125.26649475]
[44.94481659 116.71601105]
[57.26914978 108.16552734]
[57.03587341 93.16734314]
[44.45158005 85.00428009]
[31.86728859 76.84121704]
[15.47105217 76.53226471]
[7.77841139 62.04933167]
[16.70289612 48.29122162]
[33.06376266 49.41109848]
[40.03035355 64.25692749]
[52.61464310 72.41999054]
[65.19893646 80.58305359]
[79.42936707 67.44170380]
[97.58229065 62.90557480]
[115.04590607 67.47774506]
[127.68693542 79.42500305]
[141.38378906 73.30974579]
[155.08064270 67.19448853]
[168.77748108 61.07923508]
[182.47433472 54.96398163]
[186.26858521 39.70829391]
[198.40702820 30.12222672]
[213.62023926 29.97239876]
[222.36135864 17.78252983]
[231.10247803 5.59266090]
[232.17539978 -1.22408092]
[236.03965759 -5.69367361]
[240.78547668 -7.06039476]
[250.26753235 -18.68325043]
[259.74957275 -30.30610847]
[269.23162842 -41.92896271]
[278.71365356 -53.55182266]
[280.80227661 -69.81742096]
[296.03527832 -75.89091492]
[308.74227905 -65.52442169]
[305.85140991 -49.38209152]
[290.33651733 -44.06977463]
[280.85446167 -32.44691849]
[271.37243652 -20.82406235]
[261.89038086 -9.20120525]
[252.40834045 2.42165184]
[243.29234314 14.33377647]
[234.55122375 26.52364540]
[225.81011963 38.71351242]
[228.29318237 43.12346649]
[229.76701355 47.96507645]
[230.16226196 53.01057816]
[244.21279907 58.26247406]
[258.26333618 63.51436996]
[272.31387329 68.76626587]
[286.36441040 74.01816559]
[300.63937378 67.23575592]
[315.50097656 72.61242676]
[322.13208008 86.95829773]
[316.59857178 101.76221466]
[302.18338013 108.24127960]
[287.43881226 102.55157471]
[281.11251831 88.06870270]
[267.06198120 82.81680298]
[253.01144409 77.56490326]
[238.96090698 72.31301117]
[224.91036987 67.06111145]
[207.38874817 76.21514893]
[188.58958435 68.66083527]
[174.89274597 74.77608490]
[161.19589233 80.89134216]
[147.49903870 87.00659180]
[133.80220032 93.12184906]
[134.77197266 105.23915863]
[131.45011902 117.17456818]
[124.08832550 127.42741394]
[113.45565796 134.65237427]
[100.76037598 137.83505249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[7 22]
[8 21]
[9 20]
[10 19]
[30 39]
[31 38]
[32 37]
[43 95]
[44 94]
[45 93]
[46 92]
[47 91]
[50 71]
[51 70]
[52 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
