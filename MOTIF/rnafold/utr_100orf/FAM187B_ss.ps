%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUUCGGGGUGGCACCAGCCCACUGCCACAGCCCCAGUCCACCAUGCCACCCAUGCUGUGGCUGCUGCUCCACUUUGCUGCCCCGGCACUGGGGUUCUACUUUUCCAUCAGCUGCCCCAGUGGUAAGCAGUGCCAACAGGCCC\
) } def
/len { sequence length } bind def

/coor [
[58.96711731 142.98268127]
[49.06674194 131.71401978]
[47.20873642 116.82954407]
[54.03516769 103.47290802]
[67.18701172 96.25979614]
[82.11968231 97.68299866]
[68.62521362 91.13323212]
[55.13075256 84.58345795]
[41.63629150 78.03369141]
[28.14182663 71.48392487]
[14.64736462 64.93415833]
[1.15290117 58.38438797]
[-12.34156227 51.83461761]
[-25.83602524 45.28485107]
[-39.33048630 38.73508072]
[-52.82495117 32.18531418]
[-76.84233856 36.72618103]
[-90.39544678 17.21962929]
[-104.71994781 12.76893711]
[-119.04444885 8.31824493]
[-133.36895752 3.86755228]
[-140.03314209 9.15834713]
[-148.16610718 11.31686592]
[-156.38998413 10.05559921]
[-163.34248352 5.65992689]
[-167.90260315 -1.07199287]
[-169.37110901 -8.97319031]
[-183.25997925 -14.63880920]
[-197.14884949 -20.30442810]
[-211.03771973 -25.97004890]
[-224.92658997 -31.63566780]
[-238.81546021 -37.30128860]
[-252.70433044 -42.96690750]
[-266.59320068 -48.63252640]
[-275.70547485 -36.60633469]
[-287.62042236 -27.34911537]
[-301.52572632 -21.49204063]
[-316.47323608 -19.43445969]
[-331.44387817 -21.31665611]
[-345.41687012 -27.01030350]
[-357.43954468 -36.12719727]
[-366.69216919 -48.04573059]
[-372.54388428 -61.95328140]
[-374.59567261 -76.90161133]
[-372.70770264 -91.87151337]
[-367.00866699 -105.84231567]
[-357.88711548 -117.86146545]
[-345.96502686 -127.10948181]
[-332.05520630 -132.95581055]
[-317.10610962 -135.00186157]
[-302.13693237 -133.10809326]
[-288.16833496 -127.40366364]
[-276.15267944 -118.27748871]
[-266.90927124 -106.35180664]
[-261.06832886 -92.43974304]
[-259.02804565 -77.48983765]
[-260.92758179 -62.52139664]
[-247.03871155 -56.85577774]
[-233.14984131 -51.19015884]
[-219.26097107 -45.52453995]
[-205.37210083 -39.85892105]
[-191.48323059 -34.19330215]
[-177.59436035 -28.52768135]
[-163.70549011 -22.86206245]
[-142.72244263 -28.06178665]
[-128.91825867 -10.45694923]
[-114.59375763 -6.00625706]
[-100.26925659 -1.55556452]
[-85.94475555 2.89512777]
[-81.57431030 -1.52897120]
[-76.08828735 -4.54290581]
[-69.93096161 -5.87619066]
[-63.60857391 -5.39552307]
[-57.64770508 -3.11772370]
[-52.55143738 0.78974891]
[-48.75688934 6.02090549]
[-46.59778595 12.15510654]
[-46.27518082 18.69084930]
[-32.78071976 25.24061775]
[-19.28625679 31.79038620]
[-5.79179335 38.34015656]
[7.70266962 44.88992310]
[21.19713211 51.43969345]
[34.69159698 57.98945999]
[48.18605804 64.53923035]
[61.68052292 71.08899689]
[75.17498779 77.63876343]
[88.66944885 84.18853760]
[125.18622589 69.52683258]
[140.06138611 67.59560394]
[154.93653870 65.66438293]
[169.81170654 63.73316193]
[184.68685913 61.80193710]
[199.56202698 59.87071609]
[214.43717957 57.93949127]
[229.31234741 56.00827026]
[244.18750000 54.07704926]
[246.95307922 39.20402527]
[254.18110657 25.91452408]
[265.16345215 15.51051044]
[278.82415771 9.01126385]
[293.82489014 7.05351448]
[308.69607544 9.82906342]
[321.98071289 17.06598854]
[332.37738037 28.05529213]
[338.86746216 41.72035217]
[340.81515503 56.72240829]
[338.02966309 71.59171295]
[330.78381348 84.87151337]
[319.78756714 95.26080322]
[306.11813354 101.74173737]
[291.11477661 103.67938232]
[276.24734497 100.88390350]
[262.97241211 93.62918091]
[252.59049988 82.62595367]
[246.11872864 68.95220947]
[231.24356079 70.88343048]
[216.36840820 72.81465149]
[201.49324036 74.74587250]
[186.61808777 76.67710114]
[171.74291992 78.60832214]
[156.86776733 80.53954315]
[141.99259949 82.47076416]
[127.11744690 84.40198517]
[123.13697052 90.75854492]
[137.11703491 96.19526672]
[152.11582947 96.38525391]
[161.90582275 107.74993134]
[159.87310791 122.61156464]
[147.39093018 130.92993164]
[132.89199829 127.08531952]
[126.17147827 113.67459869]
[115.17601776 103.47165680]
[111.19554138 109.82821655]
[115.95341492 124.05364227]
[120.71128082 138.27906799]
[133.34411621 148.73580933]
[130.33831787 164.85714722]
[114.78599548 170.05880737]
[102.68604279 158.98977661]
[106.48586273 143.03692627]
[101.72798920 128.81150818]
[96.97012329 114.58608246]
[96.45904541 129.57737732]
[87.61285400 141.69120789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[18 69]
[19 68]
[20 67]
[21 66]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[134 143]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
