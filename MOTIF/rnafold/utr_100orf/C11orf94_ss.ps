%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUAGGGACGACAGGAGCCAGGACCCGUGUAGGAGAUGGUUCUCGCCAUGCUGGGGGCUCUGCACCCCCGGGCUGGGCUCAGCCUCUUCCUCCACCUCAUCCUGGCAGUGGCACUGCUUCGCUCCCAGCCUCUGA\
) } def
/len { sequence length } bind def

/coor [
[137.03364563 456.40899658]
[148.56063843 446.02111816]
[146.85693359 431.11816406]
[138.23847961 425.43548584]
[134.12753296 415.72595215]
[136.12689209 405.14862061]
[143.80654907 397.29373169]
[142.78291321 382.32870483]
[141.75927734 367.36367798]
[140.73564148 352.39862061]
[139.54173279 337.44622803]
[138.17770386 322.50836182]
[136.81369019 307.57052612]
[135.10998535 292.66757202]
[133.06748962 277.80731201]
[131.02497864 262.94702148]
[112.93908691 251.92982483]
[108.61865234 230.91384888]
[121.21403503 213.20207214]
[117.49691772 198.66993713]
[113.77980042 184.13780212]
[110.06268311 169.60565186]
[106.34557343 155.07351685]
[102.62845612 140.54138184]
[98.91133881 126.00923920]
[83.72423553 120.31662750]
[74.85500336 106.73757935]
[75.74645996 90.54316711]
[86.05256653 78.01966858]
[82.00561523 63.57590866]
[77.95866394 49.13214874]
[66.78504181 37.93122482]
[70.80164337 23.58841515]
[66.75469208 9.14465523]
[62.70774460 -5.29910421]
[58.66079330 -19.74286270]
[54.61384201 -34.18662262]
[41.11960602 -41.96758652]
[37.22117996 -56.67326355]
[44.72229767 -69.48999786]
[40.67534637 -83.93376160]
[36.62839508 -98.37751770]
[32.58144379 -112.82128143]
[20.11558151 -118.05632019]
[13.06740189 -129.36509705]
[13.83563709 -142.47283936]
[21.91304207 -152.57594299]
[18.19592667 -167.10807800]
[14.47880936 -181.64022827]
[1.16519070 -189.72633362]
[-2.39747858 -204.51695251]
[5.39344740 -217.15962219]
[1.67633057 -231.69175720]
[-2.04078627 -246.22389221]
[-12.95654392 -257.67626953]
[-8.61449337 -271.92391968]
[-12.33161068 -286.45605469]
[-16.04872704 -300.98818970]
[-19.76584435 -315.52032471]
[-34.23719406 -321.12030029]
[-42.62487411 -334.17504883]
[-41.70365143 -349.66476440]
[-31.82775688 -361.63333130]
[-16.79467201 -365.47857666]
[-2.38492417 -359.72195435]
[5.86064434 -346.57696533]
[4.77144384 -331.09817505]
[-5.23370552 -319.23745728]
[-1.51658881 -304.70532227]
[2.20052791 -290.17318726]
[5.91764498 -275.64105225]
[16.56752968 -265.22811890]
[12.49135208 -249.94100952]
[16.20846939 -235.40887451]
[19.92558479 -220.87673950]
[32.83011627 -213.52766418]
[36.80681610 -198.84297180]
[29.01094818 -185.35734558]
[32.72806549 -170.82519531]
[36.44518280 -156.29306030]
[51.24412918 -148.38591003]
[55.87659836 -131.90919495]
[47.02520370 -116.86823273]
[51.07215500 -102.42446899]
[55.11910629 -87.98071289]
[59.16605759 -73.53694916]
[72.23452759 -66.48354340]
[76.54447174 -51.89316940]
[69.05760193 -38.23357391]
[73.10455322 -23.78981400]
[77.15150452 -9.34605598]
[81.19845581 5.09770393]
[85.24540710 19.54146385]
[96.12956238 29.70927429]
[92.40242767 45.08519745]
[96.44937897 59.52895737]
[100.49633026 73.97271729]
[113.27306366 77.60599518]
[122.59385681 87.07006073]
[126.03182983 99.90072632]
[122.69181824 112.75724792]
[113.44347382 122.29212189]
[117.16059113 136.82426453]
[120.87770844 151.35639954]
[124.59482574 165.88853455]
[128.31193542 180.42068481]
[132.02905273 194.95281982]
[135.74617004 209.48495483]
[144.69902039 211.38320923]
[152.48654175 216.10678101]
[158.25126648 223.10182190]
[161.36964417 231.56629944]
[161.51939392 240.54191589]
[158.71260071 249.02261353]
[153.29113770 256.06738281]
[145.88526917 260.90451050]
[147.92778015 275.76480103]
[149.97027588 290.62509155]
[153.79603577 296.18756104]
[154.12213135 301.97021484]
[151.75154114 306.20648193]
[153.11555481 321.14434814]
[154.47958374 336.08221436]
[158.40576172 344.42736816]
[155.70066833 351.37500000]
[156.72430420 366.34002686]
[157.74794006 381.30505371]
[158.77157593 396.27008057]
[170.79759216 412.37747192]
[161.75985718 429.41445923]
[163.46356201 444.31741333]
[177.03759766 451.83572388]
[183.56953430 465.91101074]
[180.54771423 481.13101196]
[169.13407898 491.64331055]
[153.71742249 493.40573120]
[140.22575378 485.74060059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[7 128]
[8 127]
[9 126]
[10 125]
[11 123]
[12 122]
[13 121]
[14 118]
[15 117]
[16 116]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[24 103]
[25 102]
[29 97]
[30 96]
[31 95]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[40 86]
[41 85]
[42 84]
[43 83]
[47 80]
[48 79]
[49 78]
[52 75]
[53 74]
[54 73]
[56 71]
[57 70]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
