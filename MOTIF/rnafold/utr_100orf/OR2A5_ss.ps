%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAAAAAAUCAGACAUGGGUCACAGAAUUCAUUCUCCUGGGAUUUCCACUCAGCCUAAGGAUUCAGAUGCUCCUCUCUGGGCUUUUCUCCCUGUUAU\
) } def
/len { sequence length } bind def

/coor [
[88.89085388 254.17494202]
[82.23394012 267.77508545]
[71.51998901 278.47509766]
[57.91117859 285.11428833]
[42.88367462 286.97250366]
[28.06756210 283.84817505]
[15.06997395 276.08020020]
[5.30079412 264.51116943]
[-0.18028961 250.39607239]
[-0.77873075 235.26594543]
[3.57038522 220.76202393]
[12.39529896 208.45756531]
[24.73874855 199.68727112]
[39.26181030 195.40249634]
[54.38913345 196.06799316]
[59.85890579 182.10083008]
[65.32867432 168.13366699]
[70.79845428 154.16650391]
[70.29763794 146.65820312]
[76.66164398 139.85437012]
[82.56314850 126.06407166]
[88.46465302 112.27377319]
[85.82093048 107.74651337]
[84.78948975 102.82518768]
[85.34589386 98.04343414]
[87.30037689 93.87931824]
[90.32998657 90.70758057]
[94.02348328 88.76626587]
[91.24027252 74.02673340]
[88.45705414 59.28720474]
[85.67383575 44.54767609]
[82.89061737 29.80814743]
[80.10740662 15.06861877]
[66.23954010 11.89514256]
[54.68302155 3.67331457]
[47.18410492 -8.31353378]
[44.86016846 -22.21634674]
[48.03334808 -35.90554428]
[56.18631744 -47.29722977]
[68.04631805 -54.67039490]
[65.72284698 -69.48934937]
[63.39937592 -84.30831146]
[61.07590103 -99.12726593]
[58.75242996 -113.94622040]
[45.26841354 -121.86552429]
[40.07822800 -136.61665344]
[45.63251495 -151.23458862]
[59.30871201 -158.81718445]
[74.64933777 -155.78414917]
[84.41101837 -143.56762695]
[83.98458099 -127.93585968]
[73.57138824 -116.26969147]
[75.89485931 -101.45073700]
[78.21833038 -86.63178253]
[80.54180145 -71.81282806]
[82.86528015 -56.99386978]
[98.17594910 -52.71342468]
[110.15864563 -42.17799377]
[116.40898132 -27.43478966]
[115.64389038 -11.38180256]
[107.96469116 2.80182672]
[94.84693146 12.28540230]
[97.63014984 27.02493095]
[100.41336823 41.76445770]
[103.19657898 56.50399017]
[105.97979736 71.24351501]
[108.76301575 85.98304749]
[119.11931610 96.83417511]
[133.71299744 100.30181885]
[148.30667114 103.76947021]
[167.17031860 97.00577545]
[180.87333679 110.49799347]
[195.65437317 113.05164337]
[204.82577515 111.41522217]
[210.85235596 115.92143250]
[225.54681396 118.93353271]
[239.67584229 111.33418274]
[254.36930847 117.77480316]
[258.35565186 133.31471252]
[248.57687378 146.03302002]
[232.53442383 146.17332458]
[222.53471375 133.62799072]
[207.84024048 130.61589050]
[193.10072327 127.83267212]
[178.31968689 125.27902222]
[170.34877014 132.01255798]
[159.75619507 133.17527771]
[150.12135315 128.12545776]
[144.83901978 118.36314392]
[130.24534607 114.89550018]
[115.65167236 111.42785645]
[102.25494385 118.17527771]
[96.35343933 131.96557617]
[90.45193481 145.75587463]
[84.76560974 159.63627625]
[79.29583740 173.60343933]
[73.82606506 187.57060242]
[68.35629272 201.53776550]
[79.91255951 211.32200623]
[87.66360474 224.32969666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 98]
[16 97]
[17 96]
[18 95]
[20 94]
[21 93]
[22 92]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[68 91]
[69 90]
[70 89]
[72 85]
[73 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
