%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCGCCCCGCCGCCGCUGCUGCCCCCAGCCCCGGCCCCAGGCGUCCCAGCCAUGGUCCGCCCAAUGCUCUUGCUCAGCCUCGGCCUCCUGGCUGGUCUGCUGCCGGCGCUGGCCGCCUGCCCCCAGAACUGCCACUGCCACAGCGACCUGC\
) } def
/len { sequence length } bind def

/coor [
[79.53848267 174.81484985]
[76.88955688 160.05059814]
[81.66910553 145.83244324]
[92.69750977 135.66687012]
[79.91590118 143.51739502]
[67.13430023 151.36791992]
[54.35270309 159.21842957]
[41.57109833 167.06895447]
[42.67392349 181.04615784]
[37.65859604 194.06809998]
[27.56133461 203.60351562]
[14.40012169 207.82540894]
[0.77155489 205.96095276]
[-10.66141415 198.43220520]
[-23.60049438 206.02037048]
[-36.53957748 213.60852051]
[-49.47865677 221.19668579]
[-53.57084274 236.22637939]
[-66.80101013 243.73753357]
[-81.10430908 239.74363708]
[-94.04338837 247.33180237]
[-106.98246765 254.91995239]
[-119.92155457 262.50811768]
[-127.54953003 277.02520752]
[-143.94422913 277.40728760]
[-152.24018860 263.26129150]
[-143.90322876 249.13941956]
[-127.50971222 249.56903076]
[-114.57063293 241.98088074]
[-101.63154602 234.39271545]
[-88.69246674 226.80455017]
[-85.19559479 212.37168884]
[-72.18161774 204.49189758]
[-57.06681824 208.25759888]
[-44.12773514 200.66944885]
[-31.18865585 193.08128357]
[-18.24957466 185.49311829]
[-18.76361656 169.37005615]
[-11.04741764 155.09738159]
[2.88430381 146.60003662]
[19.29327393 146.26855469]
[33.72058105 154.28735352]
[46.50218201 146.43682861]
[59.28378296 138.58631897]
[72.06538391 130.73579407]
[84.84698486 122.88526917]
[75.75812531 99.55315399]
[89.03618622 82.03677368]
[86.29763794 67.28887939]
[83.55908966 52.54098892]
[80.82054901 37.79309464]
[78.08200073 23.04520226]
[75.34345245 8.29730988]
[72.60490417 -6.45058393]
[67.93547058 -14.37300396]
[69.96413422 -21.52704811]
[67.52698517 -36.32773590]
[55.72307968 -42.88927841]
[49.95521927 -54.88469696]
[52.13603210 -67.81723022]
[61.24386978 -76.98117065]
[59.10914993 -91.82849121]
[56.97442627 -106.67581177]
[44.31005859 -112.20246124]
[36.10789871 -123.18743134]
[34.43357468 -136.68482971]
[39.61976242 -149.14070129]
[50.20685959 -157.32875061]
[48.37544250 -172.21652222]
[46.54402924 -187.10429382]
[33.32968903 -195.46583557]
[28.63088608 -210.38076782]
[34.66625214 -224.80673218]
[48.58607101 -231.93222046]
[63.81783295 -228.39279175]
[73.16956329 -215.85968018]
[72.22566223 -200.25061035]
[61.43180466 -188.93571472]
[63.26322174 -174.04794312]
[65.09463501 -159.16015625]
[79.68277740 -151.69302368]
[87.03872681 -136.86317444]
[84.09841156 -120.40395355]
[71.82174683 -108.81053162]
[73.95646667 -93.96321106]
[76.09119415 -79.11589050]
[89.96057129 -69.65197754]
[92.77813721 -52.75771332]
[82.32767487 -38.76487732]
[84.76481628 -23.96418953]
[87.35279846 -9.18913078]
[90.09134674 5.55876255]
[92.82989502 20.30665588]
[95.56843567 35.05455017]
[98.30698395 49.80244064]
[101.04553223 64.55033875]
[103.78408051 79.29822540]
[118.12746429 85.55502319]
[125.28816223 101.12253571]
[119.86554718 118.93962860]
[134.07359314 123.74914551]
[148.28163147 128.55865479]
[162.48968506 133.36817932]
[176.69772339 138.17768860]
[188.62487793 133.16549683]
[200.38455200 137.50808716]
[205.83015442 148.35177612]
[219.93713379 153.45011902]
[234.04411316 158.54844666]
[248.15109253 163.64678955]
[263.75949097 161.06065369]
[273.09924316 172.66319275]
[287.20620728 177.76152039]
[301.31320190 182.85986328]
[315.42019653 187.95820618]
[329.26031494 178.28479004]
[345.97390747 178.73988342]
[359.00601196 188.94763184]
[363.36294556 204.74603271]
[377.57098389 209.55554199]
[391.77902222 214.36506653]
[407.74557495 210.62322998]
[418.77056885 222.76330566]
[413.51245117 238.29663086]
[397.38031006 241.24385071]
[386.96951294 228.57310486]
[372.76147461 223.76359558]
[358.55340576 218.95407104]
[348.39035034 227.66284180]
[335.14212036 230.21809387]
[322.26379395 225.84407043]
[313.16824341 215.58657837]
[310.32183838 202.06518555]
[296.21487427 196.96684265]
[282.10787964 191.86851501]
[268.00088501 186.77017212]
[253.40151978 189.72096252]
[243.05274963 177.75376892]
[228.94577026 172.65544128]
[214.83879089 167.55709839]
[200.73181152 162.45875549]
[183.67929077 166.49339294]
[171.88821411 152.38574219]
[157.68016052 147.57621765]
[143.47212219 142.76670837]
[129.26406860 137.95718384]
[115.05603027 133.14767456]
[128.07086182 140.60517883]
[135.89389038 153.40361023]
[136.59613037 168.38717651]
[130.00440979 181.86119080]
[117.74413300 190.50326538]
[102.83841705 192.18243408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[14 37]
[15 36]
[16 35]
[17 34]
[20 31]
[21 30]
[22 29]
[23 28]
[48 97]
[49 96]
[50 95]
[51 94]
[52 93]
[53 92]
[54 91]
[56 90]
[57 89]
[61 86]
[62 85]
[63 84]
[68 80]
[69 79]
[70 78]
[100 147]
[101 146]
[102 145]
[103 144]
[104 143]
[107 141]
[108 140]
[109 139]
[110 138]
[112 136]
[113 135]
[114 134]
[115 133]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
