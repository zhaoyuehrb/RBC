%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGACGUGGUAAGGGCGGGAAGGGUUUGGGUAAGGGGGGUGCCAAGCGCCACCGCAAGGUGUUGCGUGACAACAUCCAGGGCAUCACCAAGCCGG\
) } def
/len { sequence length } bind def

/coor [
[-8.26304054 256.49935913]
[-24.08352089 258.57125854]
[-39.18231964 253.59481812]
[-49.36861038 264.60568237]
[-59.55490494 275.61657715]
[-69.74119568 286.62744141]
[-69.30430603 302.19815063]
[-79.79151154 313.21963501]
[-94.63849640 313.54019165]
[-104.82479095 324.55108643]
[-111.14255524 340.28390503]
[-128.00947571 338.56832886]
[-131.03016663 321.88565063]
[-115.83566284 314.36477661]
[-105.64936829 303.35391235]
[-106.48316193 288.52688599]
[-96.30966949 277.21517944]
[-80.75207520 276.44116211]
[-70.56578064 265.43026733]
[-60.37948990 254.41940308]
[-50.19319534 243.40852356]
[-55.93337631 230.67770386]
[-56.35622406 216.67547607]
[-51.36376572 203.54008484]
[-41.68755341 193.29022217]
[-28.78164101 187.51477051]
[-14.60416412 187.12658691]
[-1.32024121 192.21835327]
[9.20356178 181.52958679]
[19.72736359 170.84083557]
[30.25116730 160.15206909]
[40.77497101 149.46330261]
[51.29877090 138.77455139]
[61.82257462 128.08578491]
[54.57100296 113.51050568]
[52.67919540 97.34123993]
[56.37034988 81.48565674]
[65.20897675 67.81441498]
[78.15228271 57.94046021]
[93.67321014 53.02873993]
[109.94058228 53.65874100]
[125.03514862 59.75613403]
[134.87406921 48.43378830]
[144.71301270 37.11144257]
[154.55194092 25.78910065]
[164.39086914 14.46675587]
[158.84594727 -1.02069020]
[161.79988098 -17.10861206]
[172.36384583 -29.47417641]
[187.61703491 -34.84252548]
[203.41381836 -31.85378075]
[212.89585876 -43.47663879]
[222.37791443 -55.09949493]
[231.85995483 -66.72235107]
[240.97595215 -78.63447571]
[249.71705627 -90.82434082]
[258.45819092 -103.01421356]
[267.19927979 -115.20407867]
[268.27264404 -131.56806946]
[283.09860229 -138.57684326]
[296.42550659 -129.02038574]
[294.54376221 -112.72956085]
[279.38916016 -106.46296692]
[270.64804077 -94.27309418]
[261.90692139 -82.08322906]
[253.16581726 -69.89335632]
[253.08677673 -64.95529175]
[249.78230286 -60.05731201]
[243.48281860 -57.24030304]
[234.00076294 -45.61744690]
[224.51872253 -33.99459076]
[215.03666687 -22.37173462]
[220.73904419 -9.85845470]
[220.45425415 3.95646238]
[214.18092346 16.34279060]
[203.10688782 24.82765770]
[189.38467407 27.68918991]
[175.71321106 24.30568504]
[165.87428284 35.62802887]
[156.03535461 46.95037460]
[146.19642639 58.27271652]
[136.35749817 69.59506226]
[143.50738525 81.20014191]
[147.05868530 94.36020660]
[146.71765137 107.98675537]
[142.51249695 120.95269012]
[134.79103088 132.18559265]
[124.19190979 140.75633240]
[111.59182739 145.95603943]
[98.03295135 147.35459900]
[84.63677979 144.83634949]
[72.51133728 138.60958862]
[61.98752975 149.29835510]
[51.46372986 159.98710632]
[40.93992615 170.67587280]
[30.41612434 181.36462402]
[19.89232063 192.05339050]
[9.36851788 202.74215698]
[14.97723579 217.92622375]
[13.45103645 233.98287964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[6 18]
[9 15]
[10 14]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[42 82]
[43 81]
[44 80]
[45 79]
[46 78]
[51 72]
[52 71]
[53 70]
[54 69]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
