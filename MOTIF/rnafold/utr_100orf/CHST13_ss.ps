%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCGUAUCCAGCGGACUGUCCUCCGCCGCGCGCCCGGCACAGCAUGGGGAGGCGCUGCUGCCGGCGGCGCGUGCUGGCGGCCGCCUGUCUGGGCGCCGCGCUCCUGCUCCUAUGCGCCGCGCCCCGCUCCCUGCGCCCGGCAU\
) } def
/len { sequence length } bind def

/coor [
[-38.29474640 354.97647095]
[-44.84451294 368.47094727]
[-51.39428329 381.96539307]
[-57.79848862 395.52954102]
[-64.05639648 409.16180420]
[-70.31430054 422.79406738]
[-76.57220459 436.42633057]
[-72.36578369 451.90811157]
[-81.96311188 464.76388550]
[-98.00194550 465.13180542]
[-108.17866516 452.72961426]
[-104.68655396 437.07122803]
[-90.20446777 430.16842651]
[-83.94656372 416.53616333]
[-77.68865967 402.90390015]
[-71.43075562 389.27163696]
[-71.49921417 381.82659912]
[-64.88874817 375.41561890]
[-58.33897781 361.92117310]
[-51.78920746 348.42669678]
[-58.87781143 339.65594482]
[-62.16343307 328.81414795]
[-61.12677002 317.48117065]
[-55.88135529 307.32373047]
[-47.16254044 299.85037231]
[-36.22464752 296.18722534]
[-24.66057014 296.90869141]
[-17.25393677 283.86486816]
[-9.84730434 270.82101440]
[-2.44067097 257.77719116]
[-2.88452959 242.88919067]
[10.65793228 234.70919800]
[18.06456566 221.66535950]
[25.47119904 208.62152100]
[32.87783051 195.57768250]
[28.68447685 181.33157349]
[36.01004410 167.99775696]
[50.98109436 163.69596863]
[58.38772964 150.65213013]
[57.76565552 147.11183167]
[58.87387466 143.09214783]
[61.91923141 139.43139648]
[66.71640015 137.02809143]
[74.94904327 124.48921204]
[83.18168640 111.95033264]
[77.40854645 97.31065369]
[83.67488098 81.23779297]
[100.54536438 73.01595306]
[98.61414337 58.14079285]
[96.68292236 43.26563263]
[87.23326874 30.57647896]
[93.26756287 16.95896912]
[91.33634186 2.08380938]
[89.40511322 -12.79135036]
[87.47389221 -27.66650963]
[85.54267120 -42.54167175]
[81.77117157 -48.11425400]
[81.48013306 -53.88145065]
[83.86264038 -58.09668732]
[82.57316589 -73.04116058]
[81.28369141 -87.98563385]
[79.99422455 -102.93010712]
[78.70475006 -117.87458038]
[77.41527557 -132.81904602]
[76.12580872 -147.76351929]
[74.83633423 -162.70799255]
[73.54685974 -177.65246582]
[72.25739288 -192.59693909]
[60.95500565 -203.98271179]
[62.95288086 -219.90087891]
[76.71842194 -228.14039612]
[91.69187164 -222.38059998]
[96.38689423 -207.03991699]
[87.20186615 -193.88641357]
[88.49133301 -178.94194031]
[89.78080750 -163.99746704]
[91.07028198 -149.05299377]
[92.35974884 -134.10852051]
[93.64922333 -119.16405487]
[94.93869781 -104.21958160]
[96.22816467 -89.27510834]
[97.51763916 -74.33063507]
[98.80711365 -59.38616180]
[100.41783142 -44.47289276]
[102.34905243 -29.59773254]
[104.28027344 -14.72257328]
[106.21150208 0.15258683]
[108.14272308 15.02774620]
[117.45423889 26.65292931]
[111.55808258 41.33441162]
[113.48930359 56.20957184]
[115.42052460 71.08473206]
[126.68925476 80.98502350]
[141.68925476 80.98502350]
[156.68925476 80.98502350]
[171.68925476 80.98502350]
[186.68925476 80.98502350]
[201.68925476 80.98502350]
[215.48942566 73.24772644]
[228.21669006 80.98502350]
[243.21669006 80.98502350]
[258.21670532 80.98502350]
[273.21670532 80.98502350]
[279.79266357 67.21115875]
[291.69903564 57.66123199]
[306.57177734 54.23139191]
[321.45794678 57.60263443]
[333.40182495 67.10559845]
[340.03198242 80.85346985]
[340.03198242 96.11658478]
[333.40182495 109.86444855]
[321.45794678 119.36741638]
[306.57177734 122.73866272]
[291.69903564 119.30882263]
[279.79266357 109.75889587]
[273.21670532 95.98502350]
[258.21670532 95.98502350]
[243.21669006 95.98502350]
[228.21669006 95.98502350]
[215.48942566 103.72232819]
[201.68925476 95.98502350]
[186.68925476 95.98502350]
[171.68925476 95.98502350]
[156.68925476 95.98502350]
[141.68925476 95.98502350]
[126.68925476 95.98502350]
[116.32731628 117.33101654]
[95.72057343 120.18297577]
[87.48793030 132.72186279]
[79.25527954 145.26074219]
[71.43157196 158.05876160]
[64.02493286 171.10260010]
[68.00145721 186.16331482]
[60.30426407 199.28611755]
[45.92167282 202.98431396]
[38.51504135 216.02815247]
[31.10840607 229.07199097]
[23.70177269 242.11582947]
[23.61585999 257.93679810]
[10.60316944 265.18380737]
[3.19653654 278.22766113]
[-4.21009684 291.27148438]
[-11.61672974 304.31533813]
[-2.95761538 321.29739380]
[-6.17172289 339.93585205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 16]
[5 15]
[6 14]
[7 13]
[27 143]
[28 142]
[29 141]
[30 140]
[32 138]
[33 137]
[34 136]
[35 135]
[38 132]
[39 131]
[43 130]
[44 129]
[45 128]
[48 92]
[49 91]
[50 90]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[98 121]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
