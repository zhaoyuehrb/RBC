%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCAUGUUAUACUUAAUAAAACAAAACAUACCUGUAUACACACACAUUCACUCACAUUGAAGAUGCAAGAUGAAGAAAGAUACAUGACAUUGAAUGUACAGUCAAAGAAAAGGAGUUCUGCCCAAACAUCUCAACUUACAUUUAAAGAUUAUUCAGUGACGU\
) } def
/len { sequence length } bind def

/coor [
[165.86186218 161.91471863]
[162.73454285 147.24433899]
[168.69279480 133.47846985]
[181.52967834 125.71739197]
[166.82844543 122.73853302]
[152.12721252 119.75967407]
[137.42596436 116.78081512]
[122.72473145 113.80196381]
[108.02349091 110.82310486]
[93.35127258 113.94178009]
[81.13263702 122.64263153]
[68.91399384 131.34349060]
[56.69535828 140.04434204]
[44.47671890 148.74519348]
[49.60243225 162.94482422]
[50.70590591 178.00088501]
[47.70525360 192.79611206]
[40.82314301 206.23260498]
[30.57027245 217.31326294]
[17.70747375 225.21586609]
[3.18925238 229.35395813]
[-11.90704346 229.42047119]
[-26.46116829 225.41049194]
[-39.39311218 217.62155151]
[-49.74323273 206.63166809]
[-56.74348831 193.25636292]
[-59.87441254 178.48815918]
[-58.90366745 163.42295837]
[-53.90328979 149.17869568]
[-45.24434280 136.81240845]
[-33.56937408 127.24173737]
[-19.74474716 121.17690277]
[-4.79633951 119.06794739]
[10.16657734 121.07136536]
[24.03365517 127.03850555]
[35.77586365 136.52655029]
[47.99450302 127.82569885]
[60.21314240 119.12484741]
[72.43178558 110.42399597]
[84.65042114 101.72313690]
[85.36334229 94.25710297]
[70.46906281 96.03488922]
[56.00487137 100.00819397]
[44.52233505 90.35669708]
[45.94876099 75.42467499]
[59.05092239 68.12170410]
[72.50051117 74.76059723]
[86.78918457 79.32501984]
[87.50210571 71.85898590]
[77.15091705 61.00297165]
[66.79973602 50.14696121]
[56.44854736 39.29095078]
[45.99448395 28.53397369]
[35.43849182 17.87700462]
[19.86354828 17.63417053]
[9.31008244 6.67611456]
[9.63757133 -8.17071438]
[-0.91842341 -18.82768250]
[-11.47441769 -29.48465157]
[-22.03041267 -40.14162064]
[-37.47264099 -47.13975525]
[-35.02283096 -63.91577148]
[-18.22425270 -66.20576477]
[-11.37344360 -50.69761658]
[-0.81744921 -40.04064560]
[9.73854542 -29.38367844]
[20.29454041 -18.72670937]
[35.14381409 -18.91284370]
[46.00090408 -8.25553608]
[46.09545898 7.32101059]
[56.65145493 17.97797966]
[63.62442398 20.52875900]
[67.30455780 28.93976593]
[77.65574646 39.79577637]
[88.00692749 50.65178680]
[98.35811615 61.50779724]
[108.41677094 50.38019562]
[122.95682526 46.69418716]
[137.10186768 51.68597412]
[146.10792542 63.68142319]
[146.95457458 78.65750885]
[139.35786438 91.59157562]
[125.86556244 98.14579773]
[111.00234985 96.12186432]
[125.70358276 99.10072327]
[140.40483093 102.07958221]
[155.10606384 105.05843353]
[169.80729675 108.03729248]
[184.50854492 111.01615143]
[199.39381409 112.86781311]
[214.37681580 113.58154297]
[229.35983276 114.29526520]
[244.34284973 115.00899506]
[259.32586670 115.72272491]
[274.30886841 116.43645477]
[289.29187012 117.15018463]
[304.27487183 117.86391449]
[319.25790405 118.57764435]
[323.13012695 116.39381409]
[327.09558105 115.65897369]
[330.67892456 116.22007751]
[333.50582886 117.78304291]
[335.34078979 119.95899963]
[350.22607422 121.81066132]
[365.11135864 123.66232300]
[371.15515137 109.82930756]
[380.84222412 98.27148438]
[393.38088989 89.92002869]
[407.75027466 85.44464874]
[422.78329468 85.19989014]
[437.26153564 89.19702911]
[450.01385498 97.10389709]
[460.01135254 108.27243805]
[466.45010376 121.79181671]
[468.81607056 136.56271362]
[483.70132446 138.41438293]
[498.58660889 140.26603699]
[513.47186279 142.11770630]
[528.35717773 143.96936035]
[535.51928711 130.58772278]
[547.03436279 120.69995117]
[561.34497070 115.64327240]
[576.51580811 116.10157776]
[590.49511719 122.01287842]
[601.39233398 132.57771301]
[607.73364258 146.36727905]
[608.66143799 161.51666260]
[604.05029297 175.97700500]
[594.52380371 187.79269409]
[581.37036133 195.36573792]
[566.36883545 197.67195129]
[551.54809570 194.39944458]
[538.91247559 185.99076843]
[530.17083740 173.58316040]
[526.50549316 158.85462952]
[511.62020874 157.00297546]
[496.73495483 155.15130615]
[481.84967041 153.29965210]
[466.96438599 151.44799805]
[461.05169678 165.18907166]
[451.49691772 176.71891785]
[439.06784058 185.09770203]
[424.76696777 189.63926697]
[409.75070190 189.96743774]
[395.23577881 186.04704285]
[382.40078735 178.18756104]
[372.29037476 167.01866150]
[365.73022461 153.43975830]
[363.25967407 138.54759216]
[348.37442017 136.69593811]
[333.48913574 134.84426880]
[318.54415894 133.56065369]
[303.56115723 132.84692383]
[288.57815552 132.13319397]
[273.59512329 131.41946411]
[258.61212158 130.70573425]
[243.62911987 129.99200439]
[228.64610291 129.27827454]
[213.66308594 128.56454468]
[198.68008423 127.85082245]
[209.22396851 138.51977539]
[211.62841797 153.32580566]
[205.00254822 166.78306580]
[191.80134583 173.90545654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[49 76]
[50 75]
[51 74]
[52 73]
[53 71]
[54 70]
[57 67]
[58 66]
[59 65]
[60 64]
[90 160]
[91 159]
[92 158]
[93 157]
[94 156]
[95 155]
[96 154]
[97 153]
[98 152]
[103 151]
[104 150]
[105 149]
[115 139]
[116 138]
[117 137]
[118 136]
[119 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
