%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUGAACGCAACUCCCAAUUGCAGAAAAUUGGCAACGUCUCUGAAGAGCCCUUGCUUUUGCCUGGACCCCCAGCAUCAUGGUUUCCCAUUUCAUGGGGUCUCUCAGUGUCCUGUGUUUCCUUCUGCUGCUUGGAUUCCAGUUCGUCUGCCCACAGCCCUCCACUCAACACAGGAAGG\
) } def
/len { sequence length } bind def

/coor [
[87.43116760 125.16767883]
[77.39421082 136.31484985]
[67.35724640 147.46202087]
[57.41794968 158.69635010]
[47.57706451 170.01699829]
[37.73617935 181.33764648]
[52.41975021 178.27288818]
[66.70417786 182.85057068]
[76.87129974 193.87916565]
[80.27467346 208.48796082]
[76.02842712 222.87438965]
[65.23782349 233.29374695]
[50.71160507 237.03392029]
[36.23085785 233.12138367]
[25.56484032 222.57452393]
[21.48985863 208.13865662]
[25.06524277 193.57382202]
[13.40805435 203.01362610]
[1.75086462 212.45343018]
[-9.90632439 221.89323425]
[-21.56351471 231.33305359]
[-33.22070312 240.77285767]
[-34.62323380 256.51480103]
[-46.79963303 266.59005737]
[-62.52585602 265.02114868]
[-72.47181702 252.73892212]
[-70.73675537 237.03016663]
[-58.35004425 227.21461487]
[-42.66051102 229.11566162]
[-31.00332069 219.67585754]
[-19.34613037 210.23605347]
[-7.68894100 200.79624939]
[3.96824813 191.35644531]
[15.62543774 181.91664124]
[26.41553497 171.49676514]
[36.25642014 160.17611694]
[46.09730530 148.85546875]
[48.11828613 141.72454834]
[56.21007919 137.42506409]
[66.24703979 126.27789307]
[76.28399658 115.13071442]
[72.04922485 96.81541443]
[80.29550934 79.92214203]
[73.02336121 66.80284882]
[65.75122070 53.68355179]
[58.47907257 40.56425476]
[51.56184769 34.55471420]
[51.19677353 27.15192795]
[44.15470123 13.90771389]
[37.11262512 0.66350001]
[17.53417206 1.28768766]
[1.18103075 -17.50549698]
[-11.93826485 -24.77764130]
[-26.95730019 -20.64649582]
[-40.15853500 -28.20837402]
[-44.00439453 -42.55218506]
[-57.12369156 -49.82432938]
[-73.50196838 -48.99728012]
[-82.17893982 -62.91281891]
[-74.22846985 -77.25583649]
[-57.82933044 -77.27146149]
[-49.85154724 -62.94362640]
[-36.73225021 -55.67148209]
[-22.53001213 -60.01107407]
[-9.12158680 -52.82297134]
[-4.66612053 -37.89693451]
[8.45317554 -30.62479210]
[14.55904102 -34.98006439]
[26.77077484 -43.69060898]
[32.87664032 -48.04587936]
[30.27191734 -62.81799698]
[27.66719437 -77.59011078]
[25.06247330 -92.36222839]
[22.45775032 -107.13434601]
[9.06898117 -111.23676300]
[-1.19294465 -120.66712189]
[-6.36016512 -133.53945923]
[-5.47533512 -147.31558228]
[1.23154306 -159.30551147]
[12.39923096 -167.19273376]
[10.05271435 -182.00807190]
[7.70619726 -196.82339478]
[5.35968065 -211.63871765]
[-5.37552023 -224.03579712]
[0.24800090 -239.44059753]
[16.44524765 -242.00598145]
[26.55388069 -229.09291077]
[20.17500496 -213.98522949]
[22.52152252 -199.16990662]
[24.86804008 -184.35458374]
[27.21455574 -169.53926086]
[42.42675018 -164.12763977]
[52.90056610 -151.71662903]
[55.71036148 -135.62641907]
[49.99754715 -120.22426605]
[37.22986603 -109.73906708]
[39.83458710 -94.96694946]
[42.43931198 -80.19483948]
[45.04403305 -65.42272186]
[47.64875793 -50.65060425]
[61.18136978 -25.72201920]
[50.35684204 -6.37857342]
[57.39891434 6.86564064]
[64.44098663 20.10985374]
[71.59836578 33.29211044]
[78.87051392 46.41140747]
[86.14265442 59.53070068]
[93.41480255 72.65000153]
[110.30452728 73.82359314]
[123.46195984 84.47827148]
[128.12147522 100.75491333]
[142.46604919 105.14048767]
[156.81062317 109.52606201]
[171.15519714 113.91163635]
[185.49977112 118.29721069]
[199.84432983 122.68278503]
[214.18890381 127.06836700]
[228.53347778 131.45393372]
[242.87805176 135.83950806]
[252.70182800 122.44104767]
[266.49194336 113.22109222]
[282.57788086 109.27547455]
[299.01818848 111.06236267]
[313.83486938 118.34913635]
[325.25115967 130.24253845]
[331.90487671 145.29806519]
[333.01068115 161.69549561]
[347.49957275 165.57777405]
[361.98843384 169.46005249]
[376.47732544 173.34234619]
[382.99600220 171.99351501]
[388.39578247 173.87550354]
[391.39953613 177.62121582]
[405.74411011 182.00679016]
[420.08868408 186.39237976]
[427.79174805 180.86857605]
[437.03854370 179.54501343]
[445.72171021 182.59484863]
[451.92129517 189.20890808]
[454.32907104 197.80557251]
[468.42446899 202.93586731]
[482.51986694 208.06617737]
[497.60894775 202.61651611]
[511.20156860 211.13827515]
[512.87060547 227.09426880]
[501.33572388 238.24444580]
[485.44549561 236.03532410]
[477.38955688 222.16156006]
[463.29415894 217.03126526]
[449.19876099 211.90095520]
[429.28991699 217.28492737]
[415.70312500 200.73693848]
[401.35855103 196.35136414]
[387.01397705 191.96578979]
[372.59506226 187.83123779]
[358.10617065 183.94894409]
[343.61727905 180.06666565]
[329.12838745 176.18437195]
[321.96310425 187.62237549]
[311.84924316 196.58526611]
[299.60223389 202.33770752]
[286.21319580 204.40368652]
[272.76849365 202.60595703]
[260.36181641 197.08117676]
[250.00511169 188.26956177]
[242.54600525 176.87982178]
[238.59851074 163.83219910]
[238.49247742 150.18408203]
[224.14790344 145.79850769]
[209.80332947 141.41293335]
[195.45875549 137.02735901]
[181.11418152 132.64178467]
[166.76962280 128.25621033]
[152.42504883 123.87063599]
[138.08047485 119.48505402]
[123.73590088 115.09947968]
[118.35299683 121.32028961]
[111.40067291 125.71793365]
[103.47343445 127.91635132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 37]
[5 36]
[6 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[43 108]
[44 107]
[45 106]
[46 105]
[48 104]
[49 103]
[50 102]
[52 67]
[53 66]
[56 63]
[57 62]
[70 100]
[71 99]
[72 98]
[73 97]
[74 96]
[80 91]
[81 90]
[82 89]
[83 88]
[111 176]
[112 175]
[113 174]
[114 173]
[115 172]
[116 171]
[117 170]
[118 169]
[119 168]
[127 158]
[128 157]
[129 156]
[130 155]
[133 154]
[134 153]
[135 152]
[140 150]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
