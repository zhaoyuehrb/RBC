%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:37:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCUUCUGACAAAUAAUCUCAAAUUUAUCACUGACCCUUUUGUUUGUAGGCUCCGACACCUGAGUCCAACACCUUCAGAAGAACACAUGAAAAAUA\
) } def
/len { sequence length } bind def

/coor [
[41.86933136 106.38858795]
[41.57662582 97.41195679]
[42.66192245 88.49636841]
[28.45485115 83.68397522]
[14.24777794 78.87158966]
[0.04070404 74.05920410]
[-14.16636944 69.24681854]
[-28.37344360 64.43443298]
[-42.58051682 59.62204742]
[-48.04919052 60.73601532]
[-52.86225891 59.63156891]
[-56.25197220 56.97365570]
[-57.85054398 53.64204788]
[-71.54739380 47.52679443]
[-85.24423981 41.41154099]
[-98.94109344 35.29628754]
[-112.63793945 29.18103218]
[-126.33478546 23.06577682]
[-140.03163147 16.95052338]
[-153.72848511 10.83526897]
[-163.10113525 22.65068817]
[-175.11820984 31.76336479]
[-189.02429199 37.60046768]
[-203.94523621 39.79507065]
[-218.94309998 38.20921707]
[-233.07510376 32.94260025]
[-245.45289612 24.32628250]
[-255.29840088 12.90188885]
[-261.99273682 -0.61242950]
[-265.11505127 -15.36715317]
[-264.46911621 -30.43478584]
[-260.09552002 -44.86816788]
[-252.26919556 -57.75999832]
[-241.48210144 -68.29988861]
[-228.41232300 -75.82529449]
[-213.88143921 -79.86316681]
[-198.80288696 -80.15966797]
[-184.12449646 -76.69616699]
[-170.76898193 -69.69039154]
[-159.57586670 -59.58271408]
[-151.24877930 -47.00852203]
[-146.31114197 -32.75823593]
[-145.07336426 -17.72764397]
[-147.61323547 -2.86157990]
[-133.91638184 3.25367427]
[-120.21953583 9.36892891]
[-106.52268219 15.48418236]
[-92.82583618 21.59943771]
[-79.12899017 27.71469116]
[-65.43213654 33.82994461]
[-51.73529053 39.94519806]
[-37.76813126 45.41497421]
[-23.56105614 50.22735977]
[-9.35398293 55.03974533]
[4.85309076 59.85213089]
[19.06016350 64.66452026]
[33.26723862 69.47690582]
[47.47431183 74.28929138]
[61.53520203 55.94948578]
[81.60266113 44.48850250]
[104.54300690 41.69605637]
[126.77392578 48.00821686]
[144.82388306 62.43928528]
[155.87426758 82.73574066]
[170.65530396 80.18209076]
[185.43632507 77.62843323]
[200.21736145 75.07478333]
[214.99838257 72.52112579]
[220.91297913 58.27257919]
[233.60499573 49.50239563]
[249.02447510 49.00910950]
[262.25109863 56.95013046]
[269.06433105 70.79150391]
[267.29003906 86.11650085]
[257.49444580 98.03496552]
[242.80328369 102.74376678]
[227.90441895 98.74034119]
[217.55204773 87.30216217]
[202.77101135 89.85581207]
[187.98999023 92.40946960]
[173.20895386 94.96311951]
[158.42791748 97.51676941]
[158.11911011 106.49286652]
[156.43946838 115.31581116]
[153.42863464 123.77751160]
[149.15759277 131.67839050]
[143.72709656 138.83207703]
[137.26522827 145.06985474]
[129.92439270 150.24458313]
[121.87776184 154.23423767]
[113.31510925 156.94467163]
[104.43839264 158.31199646]
[95.45699310 158.30393982]
[86.58274841 156.92070007]
[78.02497101 154.19490051]
[69.98550415 150.19082642]
[62.65398026 145.00292969]
[56.20331573 138.75357056]
[50.78565979 131.59014893]
[46.52879715 123.68161774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
