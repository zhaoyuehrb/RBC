%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUGGGGUCUGGGGGCAUUGCUCAGCGGUGCUAGGCUGGCGCGGCUUGAGCCGCCGCCGGACUGACAGCUCGGUCUGCGGACCAUGGAGACCUGCGCCGGUCCACACCCGCUGCGCCUCUUCCUCUGCCGGAUGCAGCUCUGUCUCGCGCUGCUUUUGGGACCCUGGCGGCCUGGGACCGCCG\
) } def
/len { sequence length } bind def

/coor [
[132.74131775 290.87588501]
[129.98507690 276.13128662]
[127.22882843 261.38668823]
[124.47258759 246.64210510]
[121.59258270 231.92117310]
[118.58903503 217.22496033]
[115.58548737 202.52874756]
[112.58193207 187.83253479]
[109.57838440 173.13632202]
[106.57482910 158.44010925]
[103.57128143 143.74389648]
[100.56773376 129.04768372]
[78.92116547 113.51505280]
[81.06803131 90.85347748]
[70.77780151 79.93967438]
[60.48757553 69.02586365]
[50.19734573 58.11205673]
[39.90711594 47.19824982]
[24.99965858 50.62097168]
[10.47643566 46.15187454]
[0.20838478 35.08691025]
[-3.12027383 20.46582794]
[1.28678036 6.23756552]
[-9.00344944 -4.67624092]
[-24.10013962 -9.40916157]
[-27.20168304 -23.97726631]
[-37.49191284 -34.89107513]
[-47.78214264 -45.80488205]
[-58.07237244 -56.71868515]
[-68.36260223 -67.63249207]
[-78.65283203 -78.54630280]
[-89.03437042 -89.37328339]
[-99.50649261 -100.11268616]
[-112.91712952 -98.73203278]
[-124.50199127 -105.23818207]
[-130.13488770 -117.05651093]
[-127.95860291 -129.76893616]
[-138.24882507 -140.68273926]
[-148.53906250 -151.59654236]
[-158.82928467 -162.51036072]
[-169.11952209 -173.42416382]
[-179.40974426 -184.33796692]
[-189.69998169 -195.25177002]
[-199.99020386 -206.16557312]
[-210.28044128 -217.07939148]
[-220.66198730 -227.90637207]
[-231.13410950 -238.64576721]
[-241.69606018 -249.29682922]
[-252.34712219 -259.85879517]
[-262.99816895 -270.42074585]
[-277.01876831 -264.61572266]
[-292.15295410 -264.62084961]
[-306.09448242 -270.40423584]
[-316.73083496 -281.05575562]
[-322.46325684 -294.93035889]
[-322.44696045 -309.90185547]
[-316.71557617 -323.68881226]
[-327.36663818 -334.25076294]
[-338.01770020 -344.81274414]
[-348.66876221 -355.37469482]
[-356.98431396 -359.20614624]
[-359.40814209 -366.20468140]
[-369.88027954 -376.94409180]
[-380.35238647 -387.68350220]
[-390.82452393 -398.42288208]
[-401.29663086 -409.16229248]
[-411.76873779 -419.90167236]
[-422.24087524 -430.64108276]
[-438.16452026 -434.56149292]
[-442.47067261 -450.38516235]
[-430.72955322 -461.83407593]
[-415.01937866 -457.13058472]
[-411.50146484 -441.11322021]
[-401.02935791 -430.37380981]
[-390.55722046 -419.63439941]
[-380.08511353 -408.89501953]
[-369.61300659 -398.15560913]
[-359.14086914 -387.41619873]
[-348.66876221 -376.67681885]
[-338.10678101 -366.02575684]
[-327.45574951 -355.46380615]
[-316.80468750 -344.90182495]
[-306.15362549 -334.33987427]
[-292.41528320 -340.18685913]
[-277.44445801 -340.32888794]
[-263.52221680 -334.71322632]
[-252.78169250 -324.16671753]
[-246.88142395 -310.27426147]
[-246.74916077 -295.14068604]
[-252.43621826 -281.07180786]
[-241.78515625 -270.50985718]
[-231.13410950 -259.94787598]
[-224.15615845 -257.46536255]
[-220.39469910 -249.11788940]
[-209.92257690 -238.37849426]
[-202.98731995 -235.77909851]
[-199.36663818 -227.36961365]
[-189.07640076 -216.45581055]
[-178.78617859 -205.54200745]
[-168.49594116 -194.62820435]
[-158.20571899 -183.71438599]
[-147.91548157 -172.80058289]
[-137.62525940 -161.88677979]
[-127.33502960 -150.97297668]
[-117.04479980 -140.05915833]
[-100.23796844 -140.28964233]
[-88.22085571 -128.05969238]
[-88.76708984 -110.58480072]
[-78.29497528 -99.84540558]
[-71.35971069 -97.24600983]
[-67.73902130 -88.83653259]
[-57.44879532 -77.92272186]
[-47.15856552 -67.00891876]
[-36.86833572 -56.09511185]
[-26.57810593 -45.18130493]
[-16.28787613 -34.26749802]
[-1.92721236 -30.31520462]
[1.91035724 -14.96647072]
[12.20058727 -4.05266380]
[26.66324425 -7.61596394]
[41.06344604 -3.43383574]
[51.50587845 7.46671391]
[55.11377716 22.22746849]
[50.82092285 36.90802002]
[61.11115265 47.82182693]
[71.40138245 58.73563385]
[81.69161224 69.64944458]
[91.98184204 80.56324768]
[106.36931610 77.17033386]
[121.22957611 84.34526062]
[129.04188538 100.81170654]
[143.71235657 103.93859863]
[158.38282776 107.06549072]
[173.05328369 110.19238281]
[187.72375488 113.31927490]
[202.83366394 108.62873077]
[213.66841125 118.84916687]
[228.33888245 121.97605896]
[243.00933838 125.10295105]
[257.67980957 128.22984314]
[272.35028076 131.35673523]
[282.57403564 119.89504242]
[297.16394043 115.09604645]
[312.19537354 118.25064850]
[323.62496948 128.51028442]
[328.37820435 143.11515808]
[325.17648315 158.13662720]
[314.88107300 169.53399658]
[300.26138306 174.24143982]
[285.25003052 170.99266052]
[273.88497925 160.66157532]
[269.22338867 146.02719116]
[254.55291748 142.90031433]
[239.88246155 139.77342224]
[225.21199036 136.64653015]
[210.54151917 133.51963806]
[196.48094177 138.43383789]
[184.59686279 127.98973846]
[169.92639160 124.86284637]
[155.25593567 121.73595428]
[140.58546448 118.60906219]
[125.91500092 115.48217010]
[115.26394653 126.04413605]
[118.26749420 140.74034119]
[121.27104187 155.43655396]
[124.27459717 170.13276672]
[127.27814484 184.82897949]
[130.28169250 199.52519226]
[133.28524780 214.22140503]
[136.28880310 228.91763306]
[141.08250427 236.71820068]
[139.21717834 243.88586426]
[141.97341919 258.63046265]
[144.72966003 273.37506104]
[147.48591614 288.11965942]
[159.78800964 301.80850220]
[153.33953857 318.12023926]
[156.34307861 332.81643677]
[168.88258362 342.82345581]
[168.73294067 358.86581421]
[156.00894165 368.63717651]
[140.47135925 364.64181519]
[134.03929138 349.94461060]
[141.64686584 335.82000732]
[138.64331055 321.12377930]
[128.71786499 314.18630981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 175]
[2 174]
[3 173]
[4 172]
[5 170]
[6 169]
[7 168]
[8 167]
[9 166]
[10 165]
[11 164]
[12 163]
[14 128]
[15 127]
[16 126]
[17 125]
[18 124]
[23 119]
[24 118]
[26 116]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[32 109]
[33 108]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[44 98]
[45 97]
[46 95]
[47 94]
[48 92]
[49 91]
[50 90]
[57 83]
[58 82]
[59 81]
[60 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
[131 162]
[132 161]
[133 160]
[134 159]
[135 158]
[137 156]
[138 155]
[139 154]
[140 153]
[141 152]
[177 185]
[178 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
