%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCAGCCUCUGAGUUUGCAAAAAGCCUUACAGCAGUGCGAACUGGUCCAAAACAUGAUAGACUUGAGCAUCUCCAACCUGGAAGGGCUUAGGACCAAAUGUGCUACCUCCAACGACCUCACACAAAAAGAAAUCCGGACCCUGGAGAGCAAGC\
) } def
/len { sequence length } bind def

/coor [
[95.20787811 252.38740540]
[80.50827026 248.12358093]
[69.48196411 237.50854492]
[64.66270447 222.98155212]
[67.15793610 207.88081360]
[76.39426422 195.67636108]
[90.24925995 189.17268372]
[90.85324860 174.18484497]
[91.30628967 159.19169617]
[91.60834503 144.19473267]
[91.91040039 129.19776917]
[92.21245575 114.20081329]
[83.28759003 106.78667450]
[80.99476624 94.16867065]
[67.07947540 99.76909637]
[53.16418839 105.36951447]
[39.24889755 110.96994019]
[25.33361053 116.57035828]
[11.41832066 122.17078400]
[-2.49696851 127.77120209]
[-16.41225815 133.37162781]
[-18.87492180 145.07208252]
[-26.62141991 154.02175903]
[-37.62212372 158.05378723]
[-49.07975388 156.26701355]
[-58.14049911 149.22438049]
[-72.27001190 154.25994873]
[-78.81790924 168.64398193]
[-93.64810181 174.10665894]
[-107.96211243 167.40705872]
[-113.26768494 152.51992798]
[-106.41711426 138.27755737]
[-91.47473145 133.12966919]
[-77.30558014 140.13043213]
[-63.17606735 135.09486389]
[-56.38967896 118.13794708]
[-39.08908081 111.35615540]
[-22.01268005 119.45633698]
[-8.09739017 113.85591125]
[5.81789923 108.25549316]
[19.73318863 102.65506744]
[33.64847565 97.05464935]
[47.56376648 91.45422363]
[61.47905731 85.85380554]
[75.39434814 80.25338745]
[87.29464722 71.12196350]
[96.30577850 59.13032150]
[105.31690979 47.13867950]
[114.32804871 35.14703751]
[123.33917999 23.15539742]
[113.40290833 12.55869484]
[105.38996124 0.44679806]
[99.52695465 -12.83537388]
[95.97928619 -26.90984344]
[94.84648895 -41.37632751]
[96.15943146 -55.82361984]
[99.87949371 -69.84129333]
[105.89967346 -83.03133392]
[114.04769897 -95.01946259]
[124.09091949 -105.46575928]
[135.74299622 -114.07427979]
[148.67201233 -120.60146332]
[162.50994873 -124.86299133]
[176.86320496 -126.73903656]
[177.46719360 -141.72686768]
[178.07118225 -156.71470642]
[178.67517090 -171.70254517]
[179.27915955 -186.69036865]
[179.88314819 -201.67820740]
[180.48713684 -216.66604614]
[177.69369507 -225.42453003]
[181.25720215 -231.94873047]
[182.16288757 -246.92135620]
[183.06855774 -261.89398193]
[183.82344055 -276.87500000]
[184.42742920 -291.86282349]
[185.03141785 -306.85064697]
[179.62776184 -322.92041016]
[193.57360840 -332.56143188]
[206.69845581 -321.82949829]
[200.01924133 -306.24667358]
[199.41525269 -291.25881958]
[198.81126404 -276.27099609]
[201.70089722 -269.42163086]
[198.04119873 -260.98831177]
[197.13551331 -246.01568604]
[196.22984314 -231.04304504]
[195.47497559 -216.06205750]
[194.87098694 -201.07421875]
[194.26699829 -186.08638000]
[193.66300964 -171.09854126]
[193.05902100 -156.11071777]
[192.45501709 -141.12287903]
[191.85102844 -126.13504028]
[206.38909912 -122.96788788]
[220.16204834 -117.33833313]
[232.75625610 -109.41544342]
[243.79347229 -99.43717194]
[252.94223022 -87.70318604]
[259.92776489 -74.56588745]
[264.54025269 -60.41983032]
[279.39144897 -62.52736664]
[294.24267578 -64.63490295]
[309.09387207 -66.74243927]
[313.78421021 -81.22560883]
[324.25503540 -92.19141388]
[338.39077759 -97.50183868]
[353.36889648 -96.15373993]
[366.22332764 -88.46784210]
[374.43194580 -76.01457977]
[389.28317261 -78.12211609]
[401.85156250 -88.65620422]
[417.16378784 -82.78524017]
[419.46789551 -66.54876709]
[406.39364624 -56.64947891]
[391.39068604 -63.27091217]
[376.53948975 -61.16337204]
[372.11965942 -46.91800308]
[361.91110229 -35.95923233]
[347.89941406 -30.49718666]
[332.84432983 -31.66513252]
[319.73602295 -39.28482056]
[311.20141602 -51.89123535]
[296.35021973 -49.78369904]
[281.49899292 -47.67615891]
[266.64779663 -45.56862259]
[266.09204102 -29.98866653]
[262.72750854 -14.76111984]
[256.66336060 -0.38827693]
[248.09782410 12.65543270]
[237.31172180 23.93910217]
[224.65927124 33.08958054]
[210.55645752 39.80381775]
[195.46736145 43.85889053]
[179.88883972 45.11941910]
[164.33421326 43.54207230]
[149.31639099 39.17705536]
[135.33082581 32.16653061]
[126.31968689 44.15817261]
[117.30855560 56.14981461]
[108.29742432 68.14145660]
[99.28628540 80.13309479]
[114.24987793 87.96544647]
[117.06230164 103.53118896]
[107.20941925 114.50286865]
[106.90736389 129.49983215]
[106.60530853 144.49679565]
[106.30325317 159.49374390]
[109.27248383 168.19421387]
[105.84107971 174.78883362]
[105.23709106 189.77667236]
[118.52382660 197.37413025]
[126.74815369 210.28222656]
[128.02018738 225.53477478]
[122.04762268 239.62687683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 151]
[8 150]
[9 148]
[10 147]
[11 146]
[12 145]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[26 35]
[27 34]
[46 142]
[47 141]
[48 140]
[49 139]
[50 138]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[72 87]
[73 86]
[74 85]
[75 83]
[76 82]
[77 81]
[101 126]
[102 125]
[103 124]
[104 123]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
