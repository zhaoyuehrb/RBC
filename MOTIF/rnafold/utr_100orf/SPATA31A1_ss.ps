%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCUAGUCCCCACGGGGAUGCCCAGAGCUCAGUUGCUUGAAAGCAACGCGCCUAUUCACAUGGAGAAUCUUCCCUUUCCUUUAAAAUUACUUAGUGCCUCAUCGCUAAACGCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[87.97544861 235.61151123]
[86.84960938 250.69752502]
[81.11515808 264.69650269]
[71.33390045 276.23696899]
[58.46411133 284.18829346]
[43.76663971 287.77151489]
[28.68138695 286.63555908]
[14.68625927 280.89172363]
[3.15235448 271.10272217]
[-4.79035282 258.22763062]
[-8.36371708 243.52775574]
[-7.21765661 228.44326782]
[-1.46445048 214.45198059]
[8.33226109 202.92463684]
[21.21269417 194.99057007]
[35.91495895 191.42704773]
[50.99867249 192.58322144]
[56.69392014 178.70646667]
[62.38916397 164.82971191]
[68.08441162 150.95297241]
[67.04834747 146.17742920]
[69.08843994 140.70919800]
[74.45229340 136.51617432]
[80.86012268 122.95372772]
[66.92880249 101.58931732]
[74.16369629 74.45574188]
[101.44947815 60.47167587]
[88.93701172 52.19893646]
[79.93492126 50.03512573]
[76.21094513 43.54548264]
[63.91746521 34.95069885]
[50.93995667 38.81746674]
[38.30171585 34.52906036]
[30.58657074 23.87934303]
[30.45426941 10.92468834]
[18.38805580 2.01365542]
[6.32184267 -6.89737749]
[-5.74436998 -15.80840969]
[-17.81058311 -24.71944237]
[-29.87679672 -33.63047409]
[-46.22413635 -34.93296814]
[-53.02452469 -49.85565948]
[-43.28229904 -63.04736710]
[-27.01943207 -60.93759155]
[-20.96576309 -45.69668961]
[-8.89955044 -36.78565598]
[3.16666269 -27.87462234]
[15.23287582 -18.96359062]
[27.29908943 -10.05255699]
[39.36530304 -1.14152467]
[55.81329346 -4.37610197]
[69.82057190 5.43092251]
[72.51224518 22.65721703]
[84.80573273 31.25199890]
[97.20974731 39.68647003]
[109.72221375 47.95920944]
[97.33491516 39.50019836]
[91.84098816 25.54252243]
[95.13896942 10.90956974]
[106.08917999 0.65808666]
[120.90752411 -1.66929770]
[134.47319031 4.73169708]
[142.09825134 17.64906311]
[141.14772034 32.61891556]
[131.94975281 44.46828842]
[141.32383728 32.75817871]
[150.69790649 21.04807091]
[160.07199097 9.33796310]
[169.44607544 -2.37214422]
[165.21598816 -17.30150986]
[170.60061646 -31.85435677]
[183.52946472 -40.43481827]
[199.03114319 -39.74353409]
[211.14491272 -30.04631233]
[215.21279907 -15.07193661]
[209.67060852 -0.57835889]
[196.64944458 7.86134481]
[181.15617371 7.00193596]
[171.78210449 18.71204376]
[162.40802002 30.42215157]
[153.03393555 42.13225937]
[143.65986633 53.84236526]
[144.72721863 61.26602936]
[158.56787109 55.48361588]
[168.15394592 43.94639969]
[182.79635620 40.69070816]
[196.36807251 47.07887650]
[203.19003296 60.43779373]
[200.40763855 75.17747498]
[189.18515015 85.13015747]
[174.21859741 86.13117218]
[161.77104187 77.76216888]
[146.86193848 76.11334991]
[147.92930603 83.53701019]
[160.22279358 92.13179016]
[172.51626587 100.72657776]
[184.80975342 109.32135773]
[197.10324097 117.91613770]
[209.39671326 126.51092529]
[224.91326904 123.50886536]
[237.96093750 132.42704773]
[240.79876709 147.97445679]
[231.74314880 160.92710876]
[216.16659546 163.60041809]
[203.31040955 154.40835571]
[200.80194092 138.80441284]
[188.50845337 130.20962524]
[176.21496582 121.61483765]
[163.92149353 113.02005768]
[151.62800598 104.42527771]
[139.33451843 95.83049011]
[131.60583496 117.91911316]
[113.91220093 130.04464722]
[94.42256165 129.36155701]
[88.01473236 142.92399597]
[81.96115875 156.64820862]
[76.26591492 170.52496338]
[70.57067108 184.40171814]
[64.87541962 198.27845764]
[76.42243958 208.05198669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 119]
[18 118]
[19 117]
[20 116]
[23 115]
[24 114]
[27 56]
[28 55]
[30 54]
[31 53]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
