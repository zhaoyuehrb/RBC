%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUUUGGACAGCAUGCCAGGCCACCCAGGAGCAGCUGAGCAACUUGUCAAGACCGGGUGGAGGUCCUGGCACUUGGGGUUCUGGAAGGCCCUUGCCCCACUGCAGGCUGCCU\
) } def
/len { sequence length } bind def

/coor [
[107.87598419 247.20889282]
[96.02803040 257.08966064]
[80.71614838 258.97372437]
[66.82629395 252.25990295]
[58.79067612 239.09053040]
[59.17342758 223.66790771]
[67.85241699 210.91336060]
[82.05820465 204.89678955]
[84.50585175 190.09783936]
[82.46504211 182.88763428]
[87.22777557 174.93037415]
[90.07874298 160.20379639]
[92.92970276 145.47723389]
[95.78066254 130.75065613]
[76.03161621 111.80599976]
[80.55249023 88.88906097]
[70.77188110 77.51630402]
[60.99126434 66.14354706]
[51.21065140 54.77079010]
[41.43003845 43.39803314]
[31.64942551 32.02527618]
[21.86881256 20.65251732]
[11.48173714 9.83084202]
[0.51919734 -0.40745530]
[-10.44334221 -10.64575291]
[-21.40588188 -20.88405037]
[-32.36841965 -31.12234688]
[-43.33095932 -41.36064529]
[-51.86125183 -44.99872589]
[-54.44825363 -52.03146744]
[-65.12704468 -62.56538391]
[-76.16111755 -58.69297791]
[-87.78826141 -59.28202057]
[-98.28070831 -64.20574188]
[-106.09413147 -72.69614410]
[-110.09496307 -83.46356201]
[-109.72474670 -94.89247131]
[-105.07772827 -105.28382874]
[-114.85833740 -116.65658569]
[-124.63895416 -128.02934265]
[-140.09234619 -126.62490845]
[-153.40263367 -134.60086060]
[-159.45173645 -148.89028931]
[-155.91366577 -163.99862671]
[-144.14886475 -174.11639404]
[-128.68115234 -175.35310364]
[-115.45817566 -167.23323059]
[-109.56443024 -152.87901306]
[-113.26619720 -137.80995178]
[-103.48558044 -126.43720245]
[-93.70497131 -115.06444550]
[-75.35128021 -117.75731659]
[-58.87660217 -108.91500854]
[-50.85086823 -91.86436462]
[-54.59313202 -73.24417877]
[-43.91433716 -62.71025848]
[-33.09266281 -52.32318497]
[-22.13012314 -42.08488464]
[-11.16758442 -31.84658813]
[-0.20504494 -21.60829163]
[10.75749493 -11.36999512]
[21.72003365 -1.13169765]
[24.65327072 -1.17321384]
[27.77806854 0.02568778]
[30.59025574 2.54361820]
[32.56738663 6.26335955]
[33.24156952 10.87190437]
[43.02218246 22.24466133]
[52.80279541 33.61742020]
[62.58340836 44.99017715]
[72.36402130 56.36293411]
[82.14463806 67.73568726]
[91.92524719 79.10844421]
[108.35800934 76.14365387]
[124.32362366 85.81343842]
[130.54945374 105.48964691]
[145.43626404 107.32897949]
[160.32305908 109.16831970]
[175.20985413 111.00765991]
[190.09666443 112.84699249]
[204.98345947 114.68633270]
[215.59370422 103.51812744]
[230.57060242 100.77114868]
[244.13281250 107.29270935]
[251.17004395 120.39291382]
[266.05685425 122.23224640]
[280.93792725 115.34130096]
[294.18859863 125.00317383]
[292.17770386 141.27856445]
[276.97387695 147.42474365]
[264.21749878 137.11904907]
[249.33070374 135.27970886]
[239.31658936 146.27313232]
[224.57492065 149.29760742]
[210.71702576 142.98796082]
[203.14411926 129.57313538]
[188.25732422 127.73379517]
[173.37051392 125.89445496]
[158.48371887 124.05512238]
[143.59692383 122.21578217]
[128.71011353 120.37644196]
[143.00285339 124.92812347]
[150.55369568 137.88900757]
[147.46414185 152.56738281]
[135.32931519 161.38476562]
[120.41446686 159.78871155]
[110.42016602 148.60327148]
[110.50724030 133.60160828]
[107.65627289 148.32818604]
[104.80531311 163.05476379]
[101.95435333 177.78134155]
[99.30480194 192.54548645]
[96.85716248 207.34443665]
[108.36924744 217.61456299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 113]
[9 112]
[11 111]
[12 110]
[13 109]
[14 108]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[22 67]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[30 56]
[31 55]
[38 51]
[39 50]
[40 49]
[76 101]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
