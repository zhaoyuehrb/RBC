%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCCCCGCCGCUCGCCCCGCGCUGAGAUCGCCGCCGCCGCCUCCGCCGCCGCCUCCGUCUCCGCUGCUGCUGCUGCUGCCCCUGCUGCCGCUGUGGC\
) } def
/len { sequence length } bind def

/coor [
[163.14776611 311.02352905]
[161.09169006 297.80334473]
[167.16404724 285.66244507]
[160.83653259 272.06234741]
[154.50900269 258.46224976]
[148.18147278 244.86216736]
[138.10536194 242.15142822]
[131.11195374 234.11111450]
[129.76881409 223.31636047]
[134.77865601 213.41143799]
[129.30888367 199.44427490]
[117.46332550 190.41477966]
[119.63561249 174.74340820]
[114.16584015 160.77624512]
[103.12459564 155.56962585]
[98.51023102 143.83369446]
[103.34749603 131.75239563]
[98.31475067 117.62187958]
[88.90274811 113.79208374]
[83.14719391 105.41790771]
[82.94451141 95.25857544]
[88.36147308 86.66150665]
[84.21694946 72.24544525]
[79.84872437 57.89557648]
[75.25786591 43.61537933]
[63.66821289 32.84548950]
[67.13895416 18.36090469]
[62.54809189 4.08070803]
[57.95723343 -10.19948864]
[53.36637497 -24.47968483]
[48.77551651 -38.75988007]
[33.84638214 -42.08677673]
[22.66080475 -52.37170029]
[18.15502548 -66.77879333]
[21.44356346 -81.40895081]
[31.54553223 -92.35498810]
[26.95467186 -106.63518524]
[15.36501884 -117.40507507]
[18.83575630 -131.88966370]
[14.24489689 -146.16986084]
[2.65524292 -156.93974304]
[6.12598038 -171.42433167]
[1.53512144 -185.70452881]
[-10.97431755 -196.30857849]
[-7.77982664 -212.39358521]
[7.83237648 -217.41265869]
[19.80179596 -206.20262146]
[15.81531811 -190.29539490]
[20.40617752 -176.01519775]
[31.66746140 -166.26672363]
[28.52509308 -150.76071167]
[33.11595154 -136.48051453]
[44.37723923 -126.73204803]
[41.23487091 -111.22604370]
[45.82572937 -96.94584656]
[60.41387939 -93.93729401]
[71.61193085 -83.96434784]
[76.34587860 -69.63060760]
[73.24927521 -54.75418854]
[63.05571365 -43.35074234]
[67.64656830 -29.07054329]
[72.23743439 -14.79034710]
[76.82829285 -0.51015085]
[81.41915131 13.77004528]
[92.68043518 23.51851845]
[89.53806305 39.02452087]
[94.12892151 53.30471802]
[99.26325226 58.80600357]
[98.63301086 68.10091400]
[102.77753448 82.51698303]
[116.85280609 94.58209229]
[112.44525909 112.58912659]
[117.47801208 126.71964264]
[131.75842285 138.21385193]
[128.13299561 155.30647278]
[133.60276794 169.27363586]
[145.83956909 179.30216980]
[143.27604675 193.97450256]
[148.74581909 207.94166565]
[165.05590820 219.58493042]
[161.78157043 238.53465271]
[168.10908508 252.13473511]
[174.43661499 265.73483276]
[180.76414490 279.33489990]
[197.23985291 284.95574951]
[204.49119568 300.41204834]
[198.52140808 316.04858398]
[205.26882935 329.44531250]
[212.01625061 342.84201050]
[218.76368713 356.23873901]
[225.51110840 369.63546753]
[239.51211548 378.17385864]
[238.84771729 394.55953979]
[224.20138550 401.93634033]
[210.64001465 392.71563721]
[212.11437988 376.38290405]
[205.36695862 362.98617554]
[198.61953735 349.58944702]
[191.87210083 336.19271851]
[185.12467957 322.79598999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 84]
[4 83]
[5 82]
[6 81]
[10 79]
[11 78]
[13 76]
[14 75]
[17 73]
[18 72]
[22 70]
[23 69]
[24 67]
[25 66]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[36 55]
[37 54]
[39 52]
[40 51]
[42 49]
[43 48]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
