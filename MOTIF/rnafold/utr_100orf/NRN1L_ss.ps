%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGCACUAGGCUCUCAGCCAGGGAUGAUGCGCUGCUGCCGCCGCCGCUGCUGCUGCCGGCAACCACCCCAUGCCCUGAGGCCGUUGCUGUUGCUGCCCCUCGUCCUUUUACCUCCCCUGGCAG\
) } def
/len { sequence length } bind def

/coor [
[306.47875977 366.33737183]
[293.53466797 360.96160889]
[283.60015869 351.01300049]
[278.20959473 337.98092651]
[278.21340942 323.83456421]
[283.64425659 310.72509766]
[273.23623657 299.92355347]
[262.82824707 289.12200928]
[249.97480774 290.68060303]
[238.41415405 284.42877197]
[232.50881958 272.46920776]
[234.63464355 259.10388184]
[224.49699402 248.04818726]
[214.35934448 236.99250793]
[207.44564819 234.15841675]
[204.11184692 225.53573608]
[194.25074768 214.23269653]
[184.38964844 202.92965698]
[174.52854919 191.62660217]
[164.66746521 180.32356262]
[147.81282043 175.60395813]
[144.29411316 157.58000183]
[134.15646362 146.52432251]
[123.88284302 135.59487915]
[113.47483826 124.79332733]
[103.06683350 113.99178314]
[89.68527985 109.93891144]
[86.13162231 96.41622925]
[75.72361755 85.61467743]
[57.95158005 80.98876953]
[54.28266144 63.87465668]
[43.61067200 53.33385086]
[32.93867874 42.79304504]
[22.00922966 32.51943207]
[10.82901382 22.51929283]
[-4.61518478 19.08603096]
[-8.94315720 4.83408594]
[-20.12337303 -5.16605282]
[-35.56757355 -8.59931564]
[-39.89554214 -22.85125923]
[-51.07575989 -32.85139847]
[-66.51995850 -36.28466034]
[-70.84793091 -50.53660583]
[-82.02814484 -60.53674316]
[-98.18210602 -63.36193466]
[-103.55749512 -78.85507202]
[-92.62458038 -91.07814026]
[-76.63020325 -87.45709229]
[-72.02800751 -71.71695709]
[-60.84779358 -61.71682358]
[-46.20327759 -58.99883652]
[-41.07562256 -44.03161621]
[-29.89540482 -34.03147507]
[-15.25089073 -31.31348991]
[-10.12323475 -16.34626961]
[1.05698156 -6.34613037]
[15.70149612 -3.62814450]
[20.82915306 11.33907700]
[32.00936890 21.33921432]
[36.84417343 21.95831680]
[41.30822372 25.69146538]
[43.47948456 32.12105560]
[54.15147781 42.66186142]
[64.82347107 53.20266724]
[76.98458099 53.46177292]
[85.96619415 62.25030899]
[86.52516174 75.20667267]
[96.93316650 86.00821686]
[110.31472015 90.06108856]
[113.86837769 103.58377075]
[124.27638245 114.38532257]
[134.68438721 125.18686676]
[142.98649597 129.25379944]
[145.21214294 136.38667297]
[155.34979248 147.44235229]
[168.24684143 148.80097961]
[176.46348572 158.30857849]
[175.97050476 170.46246338]
[185.83160400 181.76550293]
[195.69270325 193.06855774]
[205.55378723 204.37159729]
[215.41488647 215.67463684]
[225.41502380 226.85485840]
[235.55267334 237.91053772]
[245.69032288 248.96621704]
[263.12741089 249.37170410]
[274.68890381 261.97836304]
[273.62979126 278.71401978]
[284.03778076 289.51556396]
[294.44580078 300.31710815]
[309.80645752 295.10800171]
[325.84686279 297.08605957]
[339.38439941 305.80801392]
[347.75512695 319.49758911]
[349.33792114 335.40710449]
[343.86828613 350.36871338]
[354.54028320 360.90951538]
[365.21224976 371.45031738]
[375.88424683 381.99111938]
[386.55624390 392.53192139]
[399.66320801 385.04125977]
[414.30535889 381.36569214]
[429.39617920 381.77798462]
[443.81579590 386.24755859]
[456.49420166 394.44271851]
[466.49057007 405.75534058]
[473.06311035 419.34591675]
[475.72406006 434.20599365]
[474.27603149 449.23284912]
[468.82638550 463.31134033]
[459.77960205 475.39678955]
[447.80697632 484.59237671]
[433.79693604 490.21569824]
[418.78915405 491.84948730]
[403.89730835 489.37252808]
[390.22647095 482.96859741]
[378.79107666 473.11291504]
[370.43975830 460.53683472]
[365.79217529 446.17358398]
[365.19326782 431.08901978]
[368.68743896 416.40252686]
[376.01544189 403.20391846]
[365.34344482 392.66311646]
[354.67144775 382.12231445]
[343.99945068 371.58151245]
[333.32748413 361.04071045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 90]
[7 89]
[8 88]
[12 85]
[13 84]
[14 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[22 75]
[23 74]
[24 72]
[25 71]
[26 70]
[28 68]
[29 67]
[31 64]
[32 63]
[33 62]
[34 59]
[35 58]
[37 56]
[38 55]
[40 53]
[41 52]
[43 50]
[44 49]
[96 126]
[97 125]
[98 124]
[99 123]
[100 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
