%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUCACGGACCCUGGACCCAGCGCACCCGCACCAUGGCCGGCCCCAGCCUCGCUUGCUGUCUGCUCGGCCUCCUGGCGCUGACCUCCGCCUGCUACAUCCAGAACUGCCCCCUGGGAGGCAAGAGGGCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[101.19724274 263.53631592]
[86.78112030 268.55010986]
[71.61821747 266.80392456]
[58.71914291 258.64447021]
[50.64502335 245.69180298]
[48.99897003 230.51771545]
[54.10781860 216.13499451]
[64.95719910 205.39936829]
[79.39295197 200.44238281]
[81.10903931 185.54087830]
[82.82512665 170.63935852]
[80.44444275 163.57252502]
[84.75521088 155.41728210]
[86.81253052 140.55903625]
[88.86984253 125.70078278]
[90.92715454 110.84254456]
[86.85140991 96.40688324]
[77.32720947 84.81854248]
[67.80300140 73.23020935]
[50.40441513 71.87500000]
[39.54825592 58.64411163]
[41.53725052 41.98433304]
[31.74983406 30.61742783]
[21.96241951 19.25052452]
[12.17500591 7.88361931]
[2.38759089 -3.48328519]
[-7.39982367 -14.85018921]
[-17.39837456 -10.44317436]
[-28.15457535 -8.59510040]
[-39.02497482 -9.41017532]
[-49.36083221 -12.83348370]
[-58.54683304 -18.65463829]
[-66.03770447 -26.52070427]
[-71.39060211 -35.95758057]
[-74.29128265 -46.39859009]
[-74.57253265 -57.21848679]
[-72.22380829 -67.77091980]
[-67.39148712 -77.42703247]
[-60.36975479 -85.61292267]
[-68.50565338 -98.21479034]
[-76.64155579 -110.81665802]
[-84.77745819 -123.41853333]
[-92.91335297 -136.02040100]
[-101.19320679 -148.52816772]
[-109.61592102 -160.94017029]
[-126.81723785 -163.88333130]
[-136.41584778 -178.05299377]
[-132.90924072 -194.46055603]
[-141.61433411 -206.67616272]
[-150.31942749 -218.89178467]
[-159.02453613 -231.10739136]
[-174.62658691 -232.16081238]
[-185.86546326 -243.03379822]
[-187.43449402 -258.59246826]
[-178.59281921 -271.49047852]
[-163.51524353 -275.63781738]
[-149.32089233 -269.07620239]
[-142.71194458 -254.90383911]
[-146.80891418 -239.81250000]
[-138.10382080 -227.59687805]
[-129.39871216 -215.38127136]
[-120.69361877 -203.16564941]
[-107.76210022 -202.81875610]
[-97.25118256 -194.94783020]
[-93.15898132 -182.26524353]
[-97.20391846 -169.36288452]
[-88.78120422 -156.95086670]
[-82.36606598 -153.14904785]
[-80.31148529 -144.15629578]
[-72.17558289 -131.55442810]
[-64.03968811 -118.95256042]
[-55.90378571 -106.35069275]
[-47.76788330 -93.74882507]
[-28.65133095 -97.33895111]
[-9.80184650 -92.35508728]
[5.11302328 -79.72563171]
[13.17356491 -61.87057495]
[12.77940178 -42.23786545]
[3.96708059 -24.63760376]
[13.75449562 -13.27069950]
[23.54191017 -1.90379548]
[33.32932281 9.46310902]
[43.11673737 20.83001328]
[52.90415192 32.19691849]
[65.81308746 31.35786629]
[77.00077057 38.23294449]
[82.23744965 50.48736954]
[79.39133453 63.70600510]
[88.91554260 75.29434204]
[98.43975067 86.88267517]
[133.12190247 80.77369690]
[147.83786011 83.67897034]
[162.55381775 86.58423615]
[177.26977539 89.48950195]
[170.35220337 76.17983246]
[174.66975403 61.81464005]
[187.77883911 54.52410507]
[202.26019287 58.43440628]
[209.91789246 71.33245850]
[206.41793823 85.91842651]
[193.74211121 93.93700409]
[207.92053223 98.83317566]
[222.09895325 103.72934723]
[236.27737427 108.62551117]
[250.45579529 113.52168274]
[262.51199341 103.89611816]
[277.86062622 102.33939362]
[291.60397339 109.34825134]
[299.35656738 122.68618011]
[298.64465332 138.09710693]
[289.69531250 150.66345215]
[275.36431885 156.37535095]
[260.22457886 153.41015625]
[249.10717773 142.71403503]
[245.55961609 127.70009613]
[231.38121033 122.80393219]
[217.20278931 117.90776062]
[203.02436829 113.01159668]
[188.84594727 108.11542511]
[174.36450195 104.20545959]
[159.64854431 101.30019379]
[144.93258667 98.39492798]
[130.21662903 95.48966217]
[124.10882568 99.84220886]
[125.54016113 114.77375793]
[111.89321136 108.54730988]
[105.78540039 112.89985657]
[103.72808838 127.75810242]
[101.67077637 142.61634827]
[99.61345673 157.47459412]
[97.72663879 172.35545349]
[96.01055145 187.25695801]
[94.29446411 202.15847778]
[107.22557068 210.26705933]
[115.35063934 223.18782043]
[117.05643463 238.35533142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 133]
[10 132]
[11 131]
[13 130]
[14 129]
[15 128]
[16 127]
[17 90]
[18 89]
[19 88]
[22 84]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 67]
[45 66]
[48 62]
[49 61]
[50 60]
[51 59]
[91 123]
[92 122]
[93 121]
[94 120]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
