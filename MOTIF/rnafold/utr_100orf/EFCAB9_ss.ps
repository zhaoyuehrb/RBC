%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAGACUGAAGCAAGGAUCGUUUCUGUGGUACCUCUAUCUGGACAAAAUAUACUGCUUAUUAUCCGUGAGAAACGUGAAGGCUUUGGCAGAAUAUUUUC\
) } def
/len { sequence length } bind def

/coor [
[93.76739502 126.18264008]
[83.32538605 136.95132446]
[72.88337708 147.72000122]
[62.44136810 158.48867798]
[51.99935913 169.25735474]
[52.07054138 184.83403015]
[41.32745743 195.60624695]
[26.47704124 195.57812500]
[16.03503227 206.34680176]
[16.52898216 222.14337158]
[5.64765167 233.60513306]
[-10.15325546 233.93205261]
[-21.49934387 222.93014526]
[-21.65917778 207.12666321]
[-10.53793335 195.89753723]
[5.26635408 195.90478516]
[15.70836353 185.13610840]
[15.22292614 170.29360962]
[25.65920448 159.22387695]
[41.23067856 158.81535339]
[51.67268753 148.04667664]
[62.11469650 137.27798462]
[72.55670929 126.50931549]
[82.99871826 115.74063110]
[70.91527557 124.62828827]
[55.99141693 123.11882782]
[45.93236542 111.99159241]
[45.93162918 96.99159241]
[55.98958588 85.86336517]
[70.91329956 84.35243988]
[82.99871826 93.24063110]
[72.55670929 82.47195435]
[64.18365479 78.39509583]
[61.96531296 71.20717621]
[51.85987854 60.12204361]
[36.24395370 60.94478226]
[23.78378296 51.49606705]
[20.36267853 36.23729706]
[27.59598351 22.37319565]
[42.06834793 16.44996643]
[56.94636917 21.26437759]
[65.20509338 34.54321289]
[62.94501114 50.01660919]
[73.05044556 61.10174561]
[83.32538605 72.02994537]
[93.76739502 82.79862213]
[108.06152344 87.34591675]
[122.80612183 84.58967590]
[137.55072021 81.83342743]
[152.29531860 79.07718658]
[167.03991699 76.32094574]
[181.78451538 73.56470490]
[196.52909851 70.80845642]
[208.67257690 60.66712570]
[222.60487366 65.93405151]
[237.34947205 63.17781067]
[252.09405518 60.42156601]
[266.83865356 57.66532516]
[281.58325195 54.90908051]
[285.66616821 38.38589478]
[296.45870972 25.29580116]
[311.80142212 18.18377304]
[328.65631104 18.40600014]
[343.70834351 25.87153625]
[354.01754761 39.06948471]
[368.56451416 35.41077805]
[383.05337524 31.52849197]
[397.48077393 27.42354774]
[411.90814209 23.31860352]
[420.93951416 10.05911255]
[436.94735718 8.99668503]
[447.65182495 20.94632530]
[444.84136963 36.74129105]
[430.67193604 44.26503372]
[416.01309204 37.74598694]
[401.58572388 41.85093307]
[387.15832520 45.95587921]
[381.48831177 50.89936066]
[372.22320557 49.95773315]
[357.67623901 53.61643982]
[356.06793213 66.69181061]
[350.04913330 78.44665527]
[340.33340454 87.43884277]
[328.08932495 92.55661774]
[314.80001831 93.15606689]
[302.08343506 89.14203644]
[291.49545288 80.98240662]
[284.33950806 69.65367889]
[269.59490967 72.40991974]
[254.85031128 75.16616058]
[240.10571289 77.92240906]
[225.36111450 80.67864990]
[214.27227783 90.62284088]
[199.28535461 85.55305481]
[184.54075623 88.30929565]
[169.79615784 91.06554413]
[155.05155945 93.82178497]
[140.30696106 96.57802582]
[125.56236267 99.33426666]
[110.81777191 102.09051514]
[112.17225647 110.86602020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[8 17]
[9 16]
[31 46]
[32 45]
[34 44]
[35 43]
[47 100]
[48 99]
[49 98]
[50 97]
[51 96]
[52 95]
[53 94]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[65 80]
[66 79]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
