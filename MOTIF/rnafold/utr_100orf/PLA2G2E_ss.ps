%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUUCUUCUGCUGCCUUUUAUGCUCCUUGUGCACCUCCCUUCCCCCCAACCUGGGAUGAAAUCUCCCCACGUGCUGGUGUUCCUUUGCCUCCUGGUGGCUCUGGUCACCGGGAACCUGGUUCAGUUUGGGGUGAUGAUCGAGAAGAUGACAGGCA\
) } def
/len { sequence length } bind def

/coor [
[23.23642540 398.09155273]
[20.95199394 401.54986572]
[17.89738083 403.40966797]
[12.95318794 417.57141113]
[21.90922737 430.24301147]
[21.67298508 445.75827026]
[12.33529854 458.15130615]
[-2.51329994 462.65673828]
[-17.16322136 457.54208374]
[-25.98127174 444.77410889]
[-25.57673264 429.26229858]
[-16.10515404 416.97131348]
[-1.20855486 412.62722778]
[3.73563886 398.46548462]
[8.25800228 384.16345215]
[12.35456181 369.73367310]
[16.45112228 355.30392456]
[20.54768181 340.87414551]
[24.64424133 326.44436646]
[20.67694664 312.08786011]
[31.88899231 300.92538452]
[35.98555374 286.49563599]
[40.08211136 272.06585693]
[44.17867279 257.63607788]
[42.97372818 250.30361938]
[48.50133896 242.96319580]
[52.88219070 228.61718750]
[49.19931412 214.18507385]
[60.62971115 203.24630737]
[65.01055908 188.90029907]
[69.39141083 174.55427551]
[73.77226257 160.20826721]
[66.57041931 147.22100830]
[70.80886078 132.60969543]
[84.47992706 125.14379883]
[88.86077881 110.79778290]
[80.87755585 123.49692535]
[66.43959045 127.56448364]
[53.00122452 120.90037537]
[47.50072098 106.94528961]
[52.77800369 92.90426636]
[66.10839844 86.02671814]
[80.61105347 89.86474609]
[67.62066650 82.36474609]
[54.63028717 74.86474609]
[39.54144287 78.73313904]
[26.47418976 70.94202423]
[22.87925148 56.53327560]
[9.88887119 49.03327560]
[-3.10151005 41.53327560]
[-16.09189034 34.03327560]
[-32.83215332 31.34999275]
[-34.88789749 14.52114105]
[-19.28581238 7.88704395]
[-8.59189129 21.04289436]
[4.39848995 28.54289436]
[17.38887024 36.04289246]
[30.37925148 43.54289246]
[44.65506363 39.45182800]
[57.93599701 46.87284088]
[62.13028717 61.87436295]
[75.12066650 69.37436676]
[88.11105347 76.87436676]
[97.30229950 82.80464935]
[101.43495178 91.30904388]
[112.70032501 81.40493774]
[117.95586395 66.48213959]
[132.62309265 63.88956070]
[143.88847351 53.98545456]
[155.15385437 44.08134842]
[166.41921997 34.17724228]
[177.68460083 24.27313423]
[177.75996399 13.32943821]
[183.74818420 4.43342209]
[193.45204163 0.41372204]
[203.54449463 2.38528061]
[215.19235229 -7.06603718]
[226.84020996 -16.51735497]
[238.48806763 -25.96867180]
[250.13592529 -35.41999054]
[235.13912964 -35.73059082]
[222.61296082 -43.98255157]
[216.40815735 -57.63906860]
[218.43218994 -72.50188446]
[228.06285095 -84.00189972]
[242.33949280 -88.60380554]
[256.87322998 -84.89289856]
[267.19610596 -74.00997162]
[270.13470459 -59.30063629]
[264.78643799 -45.28785706]
[277.92245483 -52.52973938]
[291.05850220 -59.77162552]
[303.89816284 -67.52680969]
[316.42141724 -75.78319550]
[328.94467163 -84.03958893]
[341.46792603 -92.29597473]
[353.99121094 -100.55236053]
[366.51446533 -108.80874634]
[379.03771973 -117.06513214]
[391.56097412 -125.32151794]
[404.08425903 -133.57789612]
[416.60751343 -141.83428955]
[423.46356201 -156.73149109]
[439.81564331 -157.97296143]
[448.84216309 -144.28157043]
[441.25738525 -129.74186707]
[424.86389160 -129.31103516]
[412.34063721 -121.05464172]
[399.81738281 -112.79825592]
[387.29409790 -104.54187012]
[374.77084351 -96.28548431]
[362.24758911 -88.02909851]
[349.72433472 -79.77271271]
[337.20104980 -71.51632690]
[324.67779541 -63.25993729]
[312.15454102 -55.00355148]
[311.47653198 -52.23136520]
[309.63006592 -49.56874084]
[306.65417480 -47.47325134]
[302.75665283 -46.37863541]
[298.30038452 -46.63560104]
[285.16433716 -39.39371490]
[272.02832031 -32.15183258]
[259.58724976 -23.77213287]
[247.93937683 -14.32081413]
[236.29151917 -4.86949682]
[224.64366150 4.58182096]
[212.99580383 14.03313828]
[207.48686218 32.53561020]
[187.58869934 35.53850937]
[176.32333374 45.44261551]
[165.05795288 55.34672165]
[153.79258728 65.25083160]
[142.52720642 75.15493774]
[138.07743835 89.36932373]
[122.60443115 92.67031097]
[111.33905792 102.57441711]
[103.20678711 115.17863464]
[98.82593536 129.52464294]
[105.99399567 143.35420227]
[101.34682465 157.84069824]
[88.11827850 164.58912659]
[83.73742676 178.93513489]
[79.35657501 193.28114319]
[74.97572327 207.62716675]
[78.34525299 223.08538818]
[67.22820282 232.99803162]
[62.84735489 247.34405518]
[58.60844040 261.73263550]
[54.51187897 276.16241455]
[50.41532135 290.59219360]
[46.31875992 305.02194214]
[49.99304199 320.41058350]
[39.07400894 330.54095459]
[34.97745132 344.97070312]
[30.88088989 359.40048218]
[26.78433037 373.83023071]
[22.68776894 388.26000977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[15 158]
[16 157]
[17 156]
[18 155]
[19 154]
[21 152]
[22 151]
[23 150]
[24 149]
[26 148]
[27 147]
[29 145]
[30 144]
[31 143]
[32 142]
[35 139]
[36 138]
[43 63]
[44 62]
[45 61]
[48 58]
[49 57]
[50 56]
[51 55]
[65 137]
[66 136]
[68 134]
[69 133]
[70 132]
[71 131]
[72 130]
[76 128]
[77 127]
[78 126]
[79 125]
[80 124]
[90 123]
[91 122]
[92 121]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
