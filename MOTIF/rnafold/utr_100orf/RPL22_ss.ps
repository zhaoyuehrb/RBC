%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCUGCGUAGUUCGCUCACCUCCCUUUCUAACUCCGCUGCCGCCAUGGCUCCUGUGAAAAAGCUUGUGGUGAAGGGGGGCAAAAAAAAGAAGCAAGUUCUGAAGUUCACUCUUGAUUGCACCCACCCUGUAGAAGAUGGAAUCA\
) } def
/len { sequence length } bind def

/coor [
[182.29983521 170.35000610]
[169.00085449 163.41192627]
[154.13806152 164.38496399]
[145.48162842 151.14196777]
[132.18264771 144.20390320]
[118.88365936 137.26582336]
[104.50363922 141.53373718]
[97.14287567 154.60351562]
[89.78211212 167.67329407]
[92.69750977 183.44923401]
[82.07272339 195.46977234]
[66.05818176 194.51379395]
[56.93886566 181.31465149]
[61.71033859 165.99757385]
[76.71233368 160.31253052]
[84.07309723 147.24275208]
[91.43386078 134.17297363]
[78.97251129 126.72232056]
[70.97297668 115.22322845]
[68.51049805 101.95265198]
[71.61157227 89.34188080]
[59.30899048 80.76013184]
[47.00640869 72.17838287]
[34.70382309 63.59663391]
[22.40123940 55.01488495]
[10.09865570 46.43313599]
[-2.20392799 37.85138321]
[-14.50651169 29.26963425]
[-26.80909538 20.68788528]
[-22.19760704 34.96143341]
[-24.61756134 49.76493835]
[-33.53417969 61.82702637]
[-46.97700500 68.48213196]
[-61.97535324 68.25955963]
[-75.21479034 61.20849991]
[-83.76956177 48.88714218]
[-85.74919128 34.01834869]
[-80.71619415 19.88792229]
[-69.78280640 9.61850166]
[-55.36515427 5.47949457]
[-40.64993286 8.38530064]
[-50.61521912 -2.82599282]
[-60.58050156 -14.03728676]
[-70.54578400 -25.24858093]
[-80.51107025 -36.45987320]
[-91.47718811 -36.47753525]
[-100.41745758 -42.43914413]
[-104.47882080 -52.14918518]
[-102.52853394 -62.26766968]
[-112.00566101 -73.89453888]
[-121.48278809 -85.52140808]
[-130.95991516 -97.14826965]
[-146.10891724 -94.61782074]
[-160.48794556 -100.01591492]
[-170.22908020 -111.89049530]
[-172.71203613 -127.04735565]
[-167.26890564 -141.40937805]
[-155.36384583 -151.11326599]
[-140.19927979 -153.54869080]
[-125.85438538 -148.06056213]
[-116.18786621 -136.12515259]
[-113.79998016 -120.95301819]
[-119.33304596 -106.62539673]
[-109.85591888 -94.99853516]
[-100.37879181 -83.37166595]
[-90.90166473 -71.74479675]
[-72.39170074 -66.29781342]
[-69.29977417 -46.42515945]
[-59.33449173 -35.21386337]
[-49.36920929 -24.00257111]
[-39.40392303 -12.79127693]
[-29.43864059 -1.57998312]
[-18.22734642 8.38530064]
[-5.92476177 16.96705055]
[6.37782192 25.54880142]
[18.68040657 34.13055038]
[30.98299026 42.71229935]
[43.28557205 51.29405212]
[55.58815765 59.87580109]
[67.89073944 68.45755005]
[80.19332123 77.03929901]
[88.69274902 71.27705383]
[98.79760742 68.60934448]
[109.39757538 69.45401764]
[119.28627014 73.83593750]
[127.29852295 81.37071228]
[132.44737244 91.29576874]
[134.04469299 102.54658508]
[131.79081726 113.87065125]
[125.82173157 123.96683502]
[139.12072754 130.90490723]
[152.41970825 137.84298706]
[168.23373413 137.36621094]
[175.93891907 150.11294556]
[189.23791504 157.05101013]
[195.92950439 150.99310303]
[203.93405151 146.86303711]
[212.71147156 144.92840576]
[221.67231750 145.30908203]
[230.21743774 147.96978760]
[237.77799988 152.72308350]
[243.85334778 159.24261475]
[248.04417419 167.08546448]
[250.07870483 175.72222900]
[249.83039856 184.57275391]
[247.32566833 193.04512024]
[259.44204712 201.88781738]
[271.55844116 210.73049927]
[283.67480469 219.57319641]
[299.09017944 217.33615112]
[311.25195312 226.47650146]
[313.28964233 241.18647766]
[325.40600586 250.02915955]
[337.52239990 258.87185669]
[349.63879395 267.71453857]
[356.27416992 268.81658936]
[360.65576172 272.57473755]
[362.07308960 277.20306396]
[373.80056763 286.55541992]
[385.52804565 295.90774536]
[397.25552368 305.26010132]
[408.98297119 314.61245728]
[424.27362061 311.33679199]
[438.06823730 318.70178223]
[443.85339355 333.22988892]
[438.89755249 348.06137085]
[425.54067993 356.19329834]
[410.08950806 353.78598022]
[399.83959961 341.97610474]
[399.63064575 326.33993530]
[387.90316772 316.98757935]
[376.17568970 307.63522339]
[364.44821167 298.28289795]
[352.72073364 288.93054199]
[340.79608154 279.83093262]
[328.67971802 270.98825073]
[316.56332397 262.14553833]
[304.44692993 253.30285645]
[289.81622314 255.84802246]
[277.40252686 247.05287170]
[274.83212280 231.68957520]
[262.71572876 222.84689331]
[250.59934998 214.00419617]
[238.48297119 205.16149902]
[218.76882935 213.69390869]
[197.72911072 208.76570129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[4 92]
[5 91]
[6 90]
[7 17]
[8 16]
[9 15]
[21 81]
[22 80]
[23 79]
[24 78]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[49 66]
[50 65]
[51 64]
[52 63]
[106 144]
[107 143]
[108 142]
[109 141]
[112 138]
[113 137]
[114 136]
[115 135]
[118 134]
[119 133]
[120 132]
[121 131]
[122 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
