%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUGCAUUGUGGGAGAACGAAAGAUGGCGGCGCCCGUAAGGCGGACGCUGUUAGGGGUGGCGGGGGGUUGGCGGCGGUUCGAGAGGCUCUGGGCCGGCAGUCUAAGCUCUCGCAGCCUGGCUC\
) } def
/len { sequence length } bind def

/coor [
[95.21092224 124.50405121]
[84.73737335 135.24205017]
[80.64045715 150.52360535]
[66.21493530 154.23217773]
[55.74137878 164.97016907]
[58.21103287 180.17567444]
[51.33404541 193.76097107]
[37.93468094 200.61087036]
[23.24698257 198.28503418]
[12.77342987 209.02304077]
[2.29987788 219.76104736]
[-8.17367458 230.49903870]
[-7.72606468 246.29699707]
[-18.64096832 257.72680664]
[-34.44276810 258.00735474]
[-45.75653458 246.97221375]
[-45.87001038 231.16833496]
[-34.71587372 219.97187805]
[-18.91167641 220.02549744]
[-8.43812466 209.28749084]
[2.03542733 198.54948425]
[12.50897980 187.81147766]
[9.81769753 173.18634033]
[16.33140945 159.62036133]
[29.74103928 152.40682983]
[45.00337601 154.49662781]
[55.47692871 143.75862122]
[58.82470322 129.24511719]
[73.99936676 124.76850128]
[84.47291565 114.03050232]
[82.05255127 99.22705841]
[68.70447540 92.38390350]
[55.35639954 85.54074097]
[42.00831985 78.69757843]
[26.19809914 79.28700256]
[18.40229607 66.59548187]
[5.05421972 59.75231934]
[-8.29385757 52.90916061]
[-21.64193535 46.06599808]
[-38.49513626 44.22048569]
[-41.38717651 27.51502419]
[-26.13516808 20.11147308]
[-14.79877472 32.71792221]
[-1.45069766 39.56108093]
[11.89737988 46.40424347]
[25.24545670 53.24740219]
[40.10093689 52.16851425]
[48.85148239 65.34950256]
[62.19955826 72.19266510]
[75.54763794 79.03582764]
[88.89571381 85.87898254]
[103.86658478 86.81337738]
[117.96196747 81.68307495]
[132.05735779 76.55277252]
[146.15275574 71.42247009]
[160.24813843 66.29216766]
[174.34352112 61.16186523]
[177.21850586 49.49167633]
[185.32583618 40.78271103]
[196.53131104 37.15542603]
[207.96766663 39.41470718]
[216.76806641 46.87466431]
[231.10165405 42.45333862]
[245.43524170 38.03200912]
[259.76882935 33.61068344]
[274.10241699 29.18935394]
[288.43603516 24.76802635]
[302.76962280 20.34669876]
[313.67608643 8.88547325]
[328.11853027 12.52759743]
[342.45211792 8.10626984]
[356.72946167 3.50659895]
[370.94839478 -1.27070093]
[385.16729736 -6.04800081]
[392.61480713 -21.81868172]
[408.82766724 -27.26895523]
[423.69302368 -19.51061440]
[437.78842163 -24.64091682]
[451.88378906 -29.77121925]
[465.97918701 -34.90151978]
[480.07458496 -40.03182220]
[494.16995239 -45.16212463]
[508.20031738 -50.46774673]
[522.16339111 -55.94786072]
[536.12652588 -61.42797852]
[548.66174316 -72.84304047]
[563.10083008 -63.95767212]
[558.55981445 -47.62317657]
[541.60662842 -47.46487045]
[527.64349365 -41.98475647]
[513.68041992 -36.50464249]
[508.54718018 -31.07273674]
[499.30026245 -31.06673622]
[485.20486450 -25.93643379]
[471.10949707 -20.80613327]
[457.01409912 -15.67582989]
[442.91870117 -10.54552841]
[428.82333374 -5.41522598]
[425.03216553 6.96617556]
[414.62591553 14.99594116]
[401.29763794 15.53936386]
[389.94458008 8.17090988]
[375.72567749 12.94820881]
[361.50677490 17.72550964]
[356.10916138 22.89479065]
[346.87344360 22.43986130]
[332.53985596 26.86118889]
[322.65863037 38.00617218]
[307.19094849 34.68029022]
[292.85736084 39.10161972]
[278.52377319 43.52294540]
[264.19015503 47.94427490]
[249.85656738 52.36560059]
[235.52297974 56.78693008]
[221.18939209 61.20825577]
[213.72589111 77.83592987]
[196.21618652 83.93719482]
[179.47383118 75.25725555]
[165.37844849 80.38755798]
[151.28305054 85.51786041]
[137.18766785 90.64816284]
[123.09226990 95.77846527]
[108.99688721 100.90876770]
[111.32529449 106.43117523]
[110.13576508 113.65436554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[4 27]
[5 26]
[9 22]
[10 21]
[11 20]
[12 19]
[31 51]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[38 44]
[39 43]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[57 118]
[62 115]
[63 114]
[64 113]
[65 112]
[66 111]
[67 110]
[68 109]
[70 107]
[71 106]
[72 104]
[73 103]
[74 102]
[77 98]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
