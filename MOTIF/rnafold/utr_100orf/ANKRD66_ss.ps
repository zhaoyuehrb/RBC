%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAUGGACACAACACUCCGGAUGGUUAGGACUGCCUGUCAGCACAGAGCUCCUCAAAUUUCACACAAGACAGGCUGUUCUCACAUUUCAAUGCACUCACCUG\
) } def
/len { sequence length } bind def

/coor [
[94.23873901 200.11271667]
[96.33746338 185.02909851]
[104.39530182 172.10659790]
[117.01620483 163.58410645]
[114.36284637 148.82064819]
[111.70949554 134.05718994]
[109.05613708 119.29373169]
[94.91899109 114.27964783]
[83.55632019 124.07198334]
[72.19365692 133.86431885]
[73.61402130 149.31623840]
[65.65179443 162.63475037]
[51.36860275 168.69857788]
[36.25663376 165.17608643]
[26.12674141 153.42172241]
[24.87408257 137.95529175]
[32.98032379 124.72395325]
[47.32845306 118.81541443]
[62.40132141 122.50164032]
[73.76399231 112.70931244]
[85.12666321 102.91697693]
[92.75463104 90.00132751]
[95.84430695 75.32297516]
[98.93398285 60.64463043]
[90.56623840 47.50619507]
[93.90870667 32.66427612]
[106.48577118 24.76787376]
[109.57544708 10.08952618]
[104.84660339 -5.00844049]
[115.03953552 -15.86907673]
[118.12921143 -30.54742432]
[121.21889496 -45.22577286]
[124.30857086 -59.90411758]
[127.39824677 -74.58246613]
[122.66940308 -89.68043518]
[132.86233521 -100.54106903]
[135.95201111 -115.21941376]
[139.04170227 -129.89776611]
[142.13137817 -144.57611084]
[145.22105408 -159.25445557]
[148.31072998 -173.93280029]
[151.40040588 -188.61116028]
[150.73377991 -203.59632874]
[146.35293579 -217.94235229]
[141.97207642 -232.28836060]
[128.54183960 -241.06379700]
[127.17263794 -257.04830933]
[138.91481018 -267.97994995]
[154.76077271 -265.47293091]
[162.55484009 -251.45036316]
[156.31809998 -236.66921997]
[160.69894409 -222.32319641]
[165.07980347 -207.97718811]
[170.35363770 -222.01950073]
[179.80151367 -233.67015076]
[192.45166016 -241.73077393]
[207.00292969 -245.37231445]
[221.95861816 -244.22018433]
[235.78044128 -238.39289856]
[247.04673767 -228.48983765]
[254.59869385 -215.52958679]
[257.65954590 -200.84519958]
[255.91444397 -185.94706726]
[249.54290771 -172.36753845]
[239.20028687 -161.50335693]
[225.95039368 -154.47200012]
[211.15603638 -151.99665833]
[196.33894348 -154.33197021]
[183.02313232 -161.23770142]
[172.57821655 -172.00355530]
[166.07876587 -185.52146912]
[162.98907471 -170.84312439]
[159.89939880 -156.16477966]
[156.80972290 -141.48643494]
[153.72004700 -126.80808258]
[150.63035583 -112.12973785]
[147.54067993 -97.45139313]
[152.49052429 -83.40332031]
[142.07659912 -71.49279022]
[138.98692322 -56.81443787]
[135.89723206 -42.13609314]
[132.80755615 -27.45774460]
[129.71788025 -12.77939701]
[134.66772461 1.26867557]
[124.25379181 13.17920494]
[121.16411591 27.85755348]
[129.49072266 40.15401840]
[126.56645203 55.08396530]
[113.61233521 63.73431015]
[110.52265167 78.41265869]
[107.43297577 93.09100342]
[119.55485535 98.63782501]
[123.81959534 116.64038086]
[126.47295380 131.40383911]
[129.12631226 146.16729736]
[131.77966309 160.93075562]
[146.57827759 164.52529907]
[158.63150024 173.83334351]
[165.85102844 187.24223328]
[166.98602295 202.42880249]
[161.83984375 216.76187134]
[151.30412292 227.75814819]
[137.20420837 233.51246643]
[121.98300171 233.02786255]
[108.27767181 226.38829041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 96]
[5 95]
[6 94]
[7 93]
[8 21]
[9 20]
[10 19]
[22 91]
[23 90]
[24 89]
[27 86]
[28 85]
[30 83]
[31 82]
[32 81]
[33 80]
[34 79]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
