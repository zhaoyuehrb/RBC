%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACACGCUCCUCACUGCAAAUCACCUGAGCUCAGAACUCCUGUUAACAUGUCUUACAACUGCAGCUCUGGAAACUUCUCCUCCUGCUGUUUUGGAAGUUACCUGAGGUAUCCAGUUUCCACUUAUAAUUUGUUCUACCCCAGCAAUG\
) } def
/len { sequence length } bind def

/coor [
[92.69255829 385.81826782]
[77.45955658 384.85989380]
[64.15512848 377.37957764]
[55.42087936 364.86257935]
[52.99099731 349.79412842]
[57.34793854 335.16607666]
[67.62662506 323.88284302]
[81.78622437 318.18472290]
[82.72808075 303.21432495]
[83.66993713 288.24392700]
[69.18940735 282.14080811]
[57.64646149 271.43862915]
[50.44325638 257.41247559]
[48.46329498 241.74261475]
[51.96310806 226.31333923]
[60.53918076 212.98629761]
[73.17438507 203.37590027]
[88.35859680 198.65371704]
[88.98673248 183.66688538]
[89.61486816 168.68003845]
[90.24300385 153.69319153]
[90.87113953 138.70635986]
[91.49927521 123.71951294]
[83.28847504 119.85813141]
[76.76348114 113.17478180]
[72.88335419 104.38583374]
[72.30898285 94.52818298]
[75.29855347 84.83741760]
[81.65190887 76.59289551]
[68.35884857 69.64345551]
[55.06579971 62.69401550]
[41.77274323 55.74457169]
[28.47969055 48.79513168]
[15.11459255 41.98527527]
[1.67891622 35.31574631]
[-11.75676060 28.64621925]
[-26.02260780 24.01096535]
[-40.81254959 21.50943375]
[-55.60248947 19.00790215]
[-70.77613831 25.22822380]
[-83.58264923 14.98492146]
[-80.84778595 -1.18457270]
[-65.38494110 -6.64646959]
[-53.10095596 4.21796179]
[-38.31101608 6.71949291]
[-23.52107620 9.22102451]
[-34.42394257 -1.08079720]
[-40.65262985 -14.72643661]
[-41.29278946 -29.71277046]
[-36.25045013 -43.83986664]
[-26.26581001 -55.03392410]
[-12.80456924 -61.65170288]
[2.15721583 -62.72174072]
[16.42321777 -58.08695984]
[27.89924431 -48.42772675]
[34.90066528 -35.16197586]
[36.39969635 -20.23706627]
[32.17628860 -5.84391451]
[22.85042381 5.90462589]
[9.79109478 13.28391743]
[-5.08723259 15.21054363]
[8.34844398 21.88007164]
[21.78412056 28.54959869]
[29.22305489 28.70759010]
[35.42913055 35.50207901]
[48.72218323 42.45151901]
[62.01523972 49.40095901]
[75.30828857 56.35039902]
[88.60134888 63.29984283]
[103.51917267 61.73191452]
[115.07687378 52.17055511]
[126.63457489 42.60919571]
[138.19227600 33.04783630]
[149.74996948 23.48647499]
[161.30766296 13.92511463]
[172.86537170 4.36375523]
[184.42306519 -5.19760466]
[182.71946716 -23.19385338]
[192.03417969 -38.50312042]
[208.50967407 -45.14506149]
[225.53543091 -40.65636063]
[236.68260193 -50.69331741]
[247.82978821 -60.73027802]
[258.97695923 -70.76723480]
[258.89123535 -90.79675293]
[273.26940918 -104.30344391]
[292.65084839 -103.00737762]
[303.14578247 -113.72447205]
[313.64074707 -124.44155884]
[310.92028809 -139.71829224]
[317.72912598 -153.66174316]
[331.44909668 -160.91033936]
[346.80459595 -158.67687988]
[357.89111328 -147.82014465]
[360.44567871 -132.51478577]
[353.48599243 -118.64603424]
[339.68820190 -111.54669189]
[324.35784912 -113.94660950]
[313.86288452 -103.22951508]
[303.36791992 -92.51242828]
[306.25955200 -82.54488373]
[304.70623779 -72.20123291]
[298.92553711 -63.38696289]
[289.92004395 -57.75442505]
[279.30395508 -56.39322281]
[269.01391602 -59.62006378]
[257.86672974 -49.58310699]
[246.71957397 -39.54614639]
[235.57238770 -29.50918770]
[238.62644958 -17.68316650]
[236.32342529 -5.61450100]
[229.04379272 4.37292719]
[218.13230896 10.32915878]
[205.64987183 11.05872536]
[193.98442078 6.36009359]
[182.42672729 15.92145348]
[170.86903381 25.48281288]
[159.31132507 35.04417419]
[147.75363159 44.60553360]
[136.19593811 54.16689301]
[124.63822937 63.72825241]
[113.08053589 73.28961182]
[120.90863037 79.77183533]
[125.94403839 88.34223175]
[127.71393585 97.89646149]
[126.15525055 107.26104736]
[121.60467529 115.33734894]
[114.74059296 121.23040771]
[106.48611450 124.34764862]
[105.85797882 139.33448792]
[105.22984314 154.32133484]
[104.60171509 169.30816650]
[103.97357941 184.29501343]
[103.34544373 199.28186035]
[116.74480438 204.45089722]
[127.86992645 213.49946594]
[135.63684082 225.52876282]
[139.29408264 239.35043335]
[138.49542236 253.60392761]
[133.33255005 266.89044189]
[124.32479858 277.91018677]
[112.36695862 285.58959961]
[98.64034271 289.18576050]
[97.69848633 304.15615845]
[96.75662231 319.12658691]
[110.09040833 326.55441284]
[118.87387848 339.03695679]
[121.36308289 354.09573364]
[117.06378174 368.74081421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 145]
[9 144]
[10 143]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[34 63]
[35 62]
[36 61]
[37 46]
[38 45]
[39 44]
[70 122]
[71 121]
[72 120]
[73 119]
[74 118]
[75 117]
[76 116]
[77 115]
[81 109]
[82 108]
[83 107]
[84 106]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
