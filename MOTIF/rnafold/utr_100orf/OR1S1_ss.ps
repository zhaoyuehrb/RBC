%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGACUUUUAGUUCCUUUCUUCAGAUCGGCAGAAAUAUGCAUCAAGGAAACCAAACCACCAUCACUGAAUUCAUUCUCCUGGGAUUUUUCAAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[126.78448486 173.05271912]
[123.14121246 162.80296326]
[125.89312744 152.04969788]
[117.53533936 139.59387207]
[109.17755890 127.13805389]
[94.41365814 128.09794617]
[81.13972473 121.56366730]
[72.89612579 109.27801514]
[71.88156128 94.51777649]
[78.36662292 81.21972656]
[70.00883484 68.76390839]
[61.65105438 56.30809021]
[53.29327011 43.85226822]
[44.93548584 31.39645004]
[36.57770157 18.94062996]
[25.56682396 8.75433731]
[12.49938107 1.38942611]
[-0.56806284 -5.97548485]
[-13.63550663 -13.34039593]
[-26.70294952 -20.70530701]
[-24.88368034 -5.81604099]
[-33.89828110 6.17299318]
[-48.70722961 8.55943871]
[-61.03171539 0.00917443]
[-63.98185730 -14.69785404]
[-55.90840149 -27.33982086]
[-41.32402802 -30.84924698]
[-52.79801941 -40.51090240]
[-64.27200317 -50.17255783]
[-70.98480225 -51.77179337]
[-75.14069366 -55.97158813]
[-76.13461304 -60.80923843]
[-86.98574066 -71.16553497]
[-97.83687592 -81.52183533]
[-113.62902832 -80.90266418]
[-125.17671204 -91.69277191]
[-125.62889099 -107.49059296]
[-114.71729279 -118.92355347]
[-98.91558075 -119.20867920]
[-87.59862518 -108.17681885]
[-87.48057556 -92.37297058]
[-76.62944031 -82.01667023]
[-65.77831268 -71.66036987]
[-54.61034775 -61.64654922]
[-43.13636017 -51.98488998]
[-31.66237450 -42.32323456]
[-19.33803940 -33.77275085]
[-6.27059507 -26.40784073]
[6.79684830 -19.04292870]
[19.86429214 -11.67801762]
[32.93173599 -4.31310606]
[27.37000656 -18.24390602]
[27.06668854 -33.24083710]
[32.06058884 -47.38512802]
[41.71276855 -58.86709213]
[54.78827667 -66.21767426]
[69.61418152 -68.49639893]
[84.29357910 -65.41172791]
[96.94832611 -57.35832596]
[105.95932007 -45.36657333]
[110.17364502 -30.97076035]
[109.05210114 -16.01274872]
[102.73818970 -2.40633368]
[92.03974152 8.10761547]
[78.32555389 14.18389606]
[63.35029602 15.04508114]
[49.03352356 10.58284664]
[57.39130783 23.03866577]
[65.74909210 35.49448776]
[74.10687256 47.95030594]
[82.46466064 60.40612411]
[90.82244110 72.86194611]
[105.58634186 71.90205383]
[118.86027527 78.43633270]
[127.10387421 90.72198486]
[128.11843872 105.48222351]
[121.63337708 118.78027344]
[129.99116516 131.23608398]
[138.34893799 143.69190979]
[156.78909302 151.53700256]
[157.68553162 170.74661255]
[166.80152893 182.65873718]
[175.91752625 194.57086182]
[185.03350830 206.48298645]
[203.92570496 213.16648865]
[206.01467896 232.28321838]
[215.85360718 243.60556030]
[231.52618408 248.43280029]
[234.91770935 264.47741699]
[222.53924561 275.23406982]
[207.12472534 269.63726807]
[204.53126526 253.44448853]
[194.69233704 242.12214661]
[184.25949097 242.30096436]
[175.31677246 236.50596619]
[171.04331970 226.50253296]
[173.12138367 215.59898376]
[164.00540161 203.68685913]
[154.88940430 191.77473450]
[145.77340698 179.86260986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[10 72]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[27 46]
[28 45]
[29 44]
[32 43]
[33 42]
[34 41]
[81 100]
[82 99]
[83 98]
[84 97]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
