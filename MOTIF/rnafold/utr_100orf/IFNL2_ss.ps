%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGUGACAGCCUCAGAGUGUUUCUUCUGCUGACAAAGACCAGAGAUCAGGAAUGAAACUAGACAUGACUGGGGACUGCACGCCAGUGCUGGUGCUGAUGGCCGCAGUGCUGACCGUGACUGGAGCAGUUCCUGUCGCCAGGCUCCACGGGG\
) } def
/len { sequence length } bind def

/coor [
[81.45011139 127.40322113]
[74.03187561 120.51075745]
[69.04522705 111.69772339]
[66.95709991 101.78934479]
[52.18498611 99.18462372]
[37.41286850 96.57990265]
[28.35484886 98.17616272]
[22.36552429 93.76706696]
[7.65000105 90.85958862]
[-7.06552172 87.95211792]
[-21.81011772 85.19587708]
[-36.58223343 82.59115601]
[-51.35435104 79.98642731]
[-66.12646484 77.38170624]
[-80.89858246 74.77698517]
[-95.67070007 72.17226410]
[-112.78732300 78.88432312]
[-125.80771637 67.15769196]
[-140.63020325 64.85681915]
[-155.45268250 62.55594254]
[-170.27516174 60.25506592]
[-185.09764099 57.95419312]
[-199.92013550 55.65331650]
[-218.30734253 63.81655121]
[-232.90420532 51.19004440]
[-247.80865479 49.49964523]
[-262.71310425 47.80924988]
[-277.00958252 60.16635513]
[-295.48922729 58.24681473]
[-306.55554199 43.72049713]
[-321.51681519 42.64342499]
[-336.47808838 41.56635666]
[-351.43936157 40.48928833]
[-358.57925415 53.94075012]
[-370.57708740 63.32010269]
[-385.35412598 67.00231934]
[-400.35018921 64.34942627]
[-412.96713257 55.82106018]
[-421.01895142 42.89480972]
[-423.11065674 27.81022644]
[-418.87982178 13.18080521]
[-409.05947876 1.54118025]
[-395.35107422 -5.09201145]
[-380.12963867 -5.56952953]
[-366.03240967 0.19135861]
[-355.50180054 11.19254494]
[-350.36230469 25.52800560]
[-335.40103149 26.60507584]
[-320.43975830 27.68214607]
[-305.47845459 28.75921631]
[-298.62539673 19.54799652]
[-288.05606079 14.76506615]
[-276.37329102 15.71622753]
[-266.51663208 22.27911758]
[-261.02270508 32.90480042]
[-246.11825562 34.59519958]
[-231.21380615 36.28559494]
[-223.76341248 29.18286705]
[-213.41088867 27.34785843]
[-203.56893921 31.63275337]
[-197.61924744 40.83083344]
[-182.79676819 43.13171005]
[-167.97428894 45.43258286]
[-153.15180969 47.73345947]
[-138.32933044 50.03433228]
[-123.50684357 52.33520889]
[-113.52273560 45.43739319]
[-101.12137604 47.27521515]
[-93.06597900 57.40014648]
[-78.29386139 60.00486755]
[-63.52174377 62.60959244]
[-48.74962616 65.21431732]
[-33.97751236 67.81903839]
[-19.20539474 70.42375946]
[-12.02776432 68.47599030]
[-4.15804911 73.23659515]
[10.55747318 76.14406586]
[25.27299690 79.05154419]
[40.01759338 81.80778503]
[54.78970718 84.41250610]
[69.56182861 87.01722717]
[82.41335297 71.96886444]
[101.55435181 66.94521332]
[120.13947296 73.74288177]
[131.72853088 64.21954346]
[143.31756592 54.69620514]
[154.90661621 45.17286682]
[166.49566650 35.64952850]
[178.08471680 26.12619209]
[189.67376709 16.60285568]
[201.26281738 7.07951784]
[202.94746399 -8.40594959]
[214.83607483 -17.89887810]
[229.58871460 -16.19738579]
[241.17776489 -25.72072220]
[252.76681519 -35.24406052]
[261.16543579 -49.97157669]
[277.64236450 -45.97816849]
[278.36627197 -29.03968430]
[262.29016113 -23.65501213]
[250.70111084 -14.13167477]
[239.11206055 -4.60833693]
[237.92175293 10.19432354]
[226.30447388 20.01743317]
[210.78614807 18.66856575]
[199.19709778 28.19190407]
[187.60806274 37.71524048]
[176.01901245 47.23857880]
[164.42996216 56.76191711]
[152.84091187 66.28525543]
[141.25186157 75.80859375]
[129.66281128 85.33193207]
[133.08956909 100.33972931]
[129.35539246 115.27400970]
[140.74647522 125.03328705]
[152.13754272 134.79255676]
[163.52862549 144.55183411]
[174.91969299 154.31111145]
[196.15695190 156.85325623]
[202.40339661 176.48927307]
[214.37365723 185.52879333]
[226.34391785 194.56831360]
[238.31417847 203.60783386]
[256.61056519 205.41691589]
[262.87124634 221.78298950]
[275.02456665 230.57484436]
[287.17791748 239.36668396]
[299.33123779 248.15852356]
[315.70834351 252.54331970]
[316.02853394 269.49423218]
[299.82870483 274.49441528]
[290.53939819 260.31185913]
[278.38604736 251.52001953]
[266.23272705 242.72816467]
[254.07939148 233.93632507]
[242.05029297 235.53729248]
[231.84242249 228.25918579]
[229.27465820 215.57809448]
[217.30439758 206.53857422]
[205.33413696 197.49905396]
[193.36387634 188.45953369]
[184.78295898 191.12719727]
[175.80735779 189.48704529]
[168.50648499 183.78709412]
[164.62356567 175.22587585]
[165.16041565 165.70217896]
[153.76934814 155.94290161]
[142.37826538 146.18363953]
[130.98719788 136.42436218]
[119.59612274 126.66508484]
[110.61515045 131.34251404]
[100.64020538 133.08511353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 81]
[5 80]
[6 79]
[8 78]
[9 77]
[10 76]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[25 57]
[26 56]
[27 55]
[30 50]
[31 49]
[32 48]
[33 47]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[94 102]
[95 101]
[96 100]
[114 150]
[115 149]
[116 148]
[117 147]
[118 146]
[120 141]
[121 140]
[122 139]
[123 138]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
