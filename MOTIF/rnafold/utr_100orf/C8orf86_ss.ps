%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:33:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGAUGCUCAGGUCAGGGAGGGAAUGAGACCCCUGGGGAAGGGACUCCUCCCAGCUGAGGAGUUGAUUAGAAGCAAUCUUGGAGUUGGCAGGAGCCUUAGAGACUGCCUGAGCCAGUCCGGGA\
) } def
/len { sequence length } bind def

/coor [
[92.66787720 363.48022461]
[96.44470978 348.42980957]
[108.36822510 338.49957275]
[107.24727631 323.54153442]
[94.50082397 315.88214111]
[88.63935089 302.02188110]
[92.10373688 287.19448853]
[103.76950073 277.13385010]
[102.64854431 262.17581177]
[101.52759552 247.21774292]
[100.40664673 232.25968933]
[99.28569031 217.30163574]
[98.16474152 202.34358215]
[97.04379272 187.38551331]
[93.36625671 180.87927246]
[96.08610535 172.04138184]
[95.33841705 157.06002808]
[94.59072876 142.07867432]
[79.67057037 137.23693848]
[67.52957153 127.30470276]
[59.82746124 113.63974762]
[44.99499893 115.87538147]
[30.16253662 118.11101532]
[15.33007431 120.34664917]
[8.30204678 134.18090820]
[-5.53060246 141.21208191]
[-20.84893799 138.73655701]
[-31.76274681 127.70621490]
[-34.07544708 112.36244965]
[-26.89775658 98.60525513]
[-12.98964691 91.72454834]
[2.30093193 94.36610413]
[13.09444046 105.51419067]
[27.92690277 103.27855682]
[42.75936508 101.04292297]
[57.59182739 98.80728912]
[59.75685120 86.57000732]
[65.37493896 75.48508453]
[73.96403503 66.50366974]
[84.78714752 60.39640427]
[96.91559601 57.68732834]
[109.30870056 58.60889435]
[115.13522339 44.78675079]
[120.96174622 30.96460724]
[126.78826904 17.14246368]
[127.25518036 7.90732956]
[132.93620300 3.05124474]
[139.10551453 -10.62134266]
[145.27481079 -24.29393005]
[151.44412231 -37.96651840]
[157.61343384 -51.63910675]
[156.23666382 -67.40029907]
[168.52381897 -75.81903076]
[174.69313049 -89.49161530]
[180.86244202 -103.16419983]
[187.03173828 -116.83679199]
[193.20104980 -130.50938416]
[199.37036133 -144.18196106]
[197.07192993 -162.40077209]
[211.60136414 -172.15867615]
[217.42788696 -185.98081970]
[223.25440979 -199.80296326]
[229.08093262 -213.62510681]
[229.54785156 -222.86022949]
[235.22886658 -227.71632385]
[241.39817810 -241.38891602]
[247.56748962 -255.06149292]
[239.75938416 -268.47094727]
[241.35786438 -283.90545654]
[251.74827576 -295.43017578]
[266.93530273 -298.61358643]
[281.07919312 -292.23162842]
[288.74136353 -278.73825073]
[286.97555542 -263.32199097]
[276.46072388 -251.91065979]
[261.24008179 -248.89219666]
[255.07077026 -235.21960449]
[248.90145874 -221.54701233]
[242.90307617 -207.79858398]
[237.07655334 -193.97644043]
[231.25003052 -180.15429688]
[225.42350769 -166.33215332]
[229.69702148 -154.94226074]
[224.86842346 -143.33938599]
[213.04293823 -138.01266479]
[206.87364197 -124.34007263]
[200.70433044 -110.66748047]
[194.53501892 -96.99489594]
[188.36572266 -83.32231140]
[182.19641113 -69.64971924]
[184.01445007 -54.86648560]
[171.28601074 -45.46979904]
[165.11671448 -31.79721260]
[158.94740295 -18.12462425]
[152.77809143 -4.45203638]
[146.60879517 9.22055149]
[140.61041260 22.96898460]
[134.78388977 36.79113007]
[128.95736694 50.61326981]
[123.13084412 64.43541718]
[134.90455627 75.88471222]
[141.44792175 90.94762421]
[141.78041077 107.36701202]
[135.85221863 122.68247223]
[124.55164337 134.59902954]
[109.57208252 141.33099365]
[110.31977081 156.31234741]
[111.06745911 171.29370117]
[112.00184631 186.26457214]
[113.12280273 201.22262573]
[114.24375153 216.18067932]
[115.36470032 231.13873291]
[116.48565674 246.09680176]
[117.60660553 261.05484009]
[118.72755432 276.01290894]
[131.76248169 284.22247314]
[137.39808655 298.36791992]
[133.66783142 312.94699097]
[122.20532990 322.42056274]
[123.32627869 337.37863159]
[136.59664917 345.42083740]
[142.57444763 359.74023438]
[138.96109009 374.83074951]
[127.14601135 384.88973999]
[111.67232513 386.04934692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 120]
[4 119]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[14 109]
[16 108]
[17 107]
[18 106]
[21 36]
[22 35]
[23 34]
[24 33]
[42 100]
[43 99]
[44 98]
[45 97]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[60 82]
[61 81]
[62 80]
[63 79]
[65 78]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
