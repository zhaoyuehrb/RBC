%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCACUCCUGCCUUCACCAUGAAGUCCAGCGGCCUCUUCCCCUUCCUGGUGCUGCUUGCCCUGGGAACUCUGGCACCUUGGGCUGUGGAAGGCUCUGGAAAGUCCUUCAAAGCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[153.81700134 359.03823853]
[143.46513367 353.22644043]
[135.17797852 344.69863892]
[129.64671326 334.15026855]
[127.33719635 322.44586182]
[128.45066833 310.54830933]
[132.90635681 299.43957520]
[140.34713745 290.03970337]
[150.16819763 283.13055420]
[145.97590637 268.72830200]
[141.78363037 254.32604980]
[126.85359955 242.14901733]
[131.62458801 222.64445496]
[126.69644928 208.47712708]
[121.76831818 194.30978394]
[116.84017944 180.14244080]
[111.91204834 165.97511292]
[107.97408295 163.08534241]
[105.87940216 157.64097595]
[107.11541748 150.94972229]
[102.92312622 136.54747009]
[98.73084259 122.14522552]
[94.53855896 107.74298096]
[90.52785492 104.16568756]
[88.87149048 98.56946564]
[90.52177429 92.49059296]
[87.07646179 77.89163208]
[83.63114166 63.29266357]
[80.18582916 48.69369888]
[76.74050903 34.09473419]
[73.10752106 19.54133797]
[69.28745270 5.03592110]
[55.91683197 -2.95559096]
[52.24937439 -17.72056389]
[59.95045853 -30.41815758]
[56.13039398 -44.92357254]
[52.31032562 -59.42898941]
[40.86152267 -60.71808624]
[30.39731407 -65.47406006]
[21.93711472 -73.21533966]
[16.29945374 -83.17044830]
[14.02279949 -94.35484314]
[15.31416035 -105.66828156]
[20.03038406 -116.00307465]
[27.69381142 -124.35253143]
[37.54060745 -129.90899658]
[35.23225021 -144.73030090]
[32.92388916 -159.55162048]
[30.61553192 -174.37294006]
[28.30717278 -189.19425964]
[25.99881363 -204.01557922]
[23.69045639 -218.83689880]
[13.92160606 -231.28198242]
[19.60813141 -245.04833984]
[17.29977417 -259.86965942]
[5.24528456 -270.45593262]
[6.14999819 -286.47344971]
[19.31989479 -295.63494873]
[34.65215683 -290.91253662]
[40.38518524 -275.92880249]
[32.12108994 -262.17800903]
[34.42945099 -247.35670471]
[44.03319168 -235.97174072]
[38.51177597 -221.14526367]
[40.82013321 -206.32394409]
[43.12849045 -191.50262451]
[45.43685150 -176.68130493]
[47.74520874 -161.85998535]
[50.05356598 -147.03866577]
[52.36192703 -132.21734619]
[70.22044373 -126.50743866]
[82.86799622 -112.55831909]
[86.84055328 -94.07105255]
[80.99031067 -76.00536346]
[66.81574249 -63.24905777]
[70.63581085 -48.74364090]
[74.45587921 -34.23822403]
[87.41219330 -26.98085022]
[91.49291992 -12.32471371]
[83.79286957 1.21585453]
[87.61293793 15.72127056]
[92.41590881 21.45611954]
[91.33947754 30.64941788]
[94.78479004 45.24838257]
[98.23011017 59.84735107]
[101.67542267 74.44631195]
[105.12074280 89.04528046]
[108.94081116 103.55069733]
[113.13309479 117.95294189]
[117.32537842 132.35519409]
[121.51766205 146.75744629]
[126.07938385 161.04696655]
[131.00752258 175.21430969]
[135.93565369 189.38165283]
[140.86378479 203.54898071]
[145.79193115 217.71632385]
[155.97367859 221.94851685]
[161.96601868 230.93989563]
[161.95355225 241.52403259]
[156.18586731 250.13375854]
[160.37815857 264.53601074]
[164.57043457 278.93826294]
[182.90702820 281.25735474]
[198.40864563 291.23059082]
[208.06730652 306.87152100]
[210.03091431 325.09893799]
[203.95831299 342.34390259]
[191.07759094 355.24856567]
[196.72850037 369.14343262]
[202.37942505 383.03829956]
[208.03034973 396.93316650]
[213.68125916 410.82800293]
[226.95214844 420.46209717]
[224.97534180 436.74166870]
[209.78440857 442.91967773]
[197.00650024 432.64074707]
[199.78640747 416.47894287]
[194.13548279 402.58407593]
[188.48457336 388.68920898]
[182.83364868 374.79434204]
[177.18272400 360.89950562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 102]
[10 101]
[11 100]
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[20 91]
[21 90]
[22 89]
[23 88]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[31 81]
[32 80]
[35 77]
[36 76]
[37 75]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[54 62]
[55 61]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
