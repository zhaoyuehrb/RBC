%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGAUUCACACACUUGGAUGUAGACCUCGACCUUCACAGGACUCUUCAUUGCUGGUUGGCAAUGAUGUAUCGGCCAGAUGUGGUGAGGGCUAGGAAAAGAGUUUGUUGGGAACCCUGGGUUAUCGGCCUCGUCAUCUUCAUAUCCCUGAUUGUCCUGGCAG\
) } def
/len { sequence length } bind def

/coor [
[20.38506889 272.43914795]
[1.84066975 274.27801514]
[-16.21616936 269.76074219]
[-24.08406448 282.53164673]
[-31.95195961 295.30255127]
[-32.60302353 311.11038208]
[-45.86630249 317.88787842]
[-53.73419952 330.65878296]
[-61.60209656 343.42968750]
[-69.46999359 356.20062256]
[-77.33788300 368.97152710]
[-73.44164276 384.28802490]
[-81.58868408 397.83059692]
[-96.94551086 401.56466675]
[-110.40119171 393.27490234]
[-113.97270966 377.87945557]
[-105.54114532 364.51217651]
[-90.10879517 361.10363770]
[-82.24090576 348.33273315]
[-74.37300873 335.56179810]
[-66.50511169 322.79089355]
[-58.63721848 310.01998901]
[-58.54891968 295.12564087]
[-44.72287369 287.43466187]
[-36.85497665 274.66375732]
[-28.98708344 261.89285278]
[-37.08572388 253.65579224]
[-43.26546097 243.88703918]
[-47.24451447 233.02583313]
[-48.84014511 221.56140137]
[-47.97703934 210.01083374]
[-44.69087601 198.89585876]
[-39.12683868 188.71920776]
[-31.53322983 179.94189453]
[-22.25036812 172.96234131]
[-11.69535351 168.09828186]
[-0.34332237 165.57231140]
[11.29394436 165.50170898]
[22.69109154 167.89294434]
[33.33290482 172.64131165]
[42.60528946 160.85050964]
[51.87767410 149.05972290]
[61.15005875 137.26892090]
[70.42243958 125.47812653]
[79.69482422 113.68732452]
[77.06868744 108.59056091]
[75.69968414 103.02285004]
[75.66287231 97.28941345]
[76.96027374 91.70458221]
[65.08174133 82.54486084]
[53.20320511 73.38514709]
[41.32467270 64.22542572]
[29.44613838 55.06570816]
[17.56760597 45.90599060]
[5.68907166 36.74627304]
[-6.18946218 27.58655548]
[-22.50622559 25.94482040]
[-28.99520874 10.88410473]
[-18.98110390 -2.10241652]
[-2.76556325 0.34467465]
[2.97025609 15.70802116]
[14.84879017 24.86773872]
[26.72732353 34.02745819]
[38.60585785 43.18717575]
[50.48439026 52.34689331]
[62.36292267 61.50661087]
[74.24145508 70.66632843]
[86.11999512 79.82604980]
[94.07940674 76.23890686]
[102.79137421 75.67201233]
[111.14854431 78.19741058]
[118.08863068 83.49411011]
[131.73310852 77.26288605]
[145.37759399 71.03165436]
[159.02206421 64.80043030]
[172.66654968 58.56920624]
[175.89356995 48.12218094]
[184.18365479 41.33522797]
[194.62414551 40.27891922]
[203.71585083 45.06309891]
[217.58767700 39.35584641]
[231.45948792 33.64859390]
[245.33129883 27.94134140]
[259.20312500 22.23408890]
[273.07492065 16.52683449]
[286.94674683 10.81958199]
[296.76507568 -1.58651590]
[311.47900391 0.72632694]
[325.35083008 -4.98092604]
[335.16912842 -17.38702393]
[349.88305664 -15.07418156]
[363.75488281 -20.78143501]
[377.62670898 -26.48868752]
[387.44500732 -38.89478683]
[402.15896606 -36.58194351]
[416.03076172 -42.28919601]
[429.90258789 -47.99644852]
[432.27096558 -59.70178604]
[439.93380737 -68.70452118]
[450.88555908 -72.82783508]
[462.34530640 -71.14906311]
[471.46295166 -64.20329285]
[485.54199219 -69.37829590]
[487.21566772 -83.29057312]
[494.69299316 -95.06299591]
[506.46188354 -102.42161560]
[520.18817139 -103.97437286]
[533.17828369 -99.47409058]
[542.90795898 -89.85578918]
[557.08294678 -94.76181030]
[571.25799561 -99.66783142]
[585.43298340 -104.57385254]
[599.60803223 -109.47986603]
[612.59844971 -120.37413788]
[626.66308594 -110.90721130]
[621.45959473 -94.77153015]
[604.51403809 -95.30485535]
[590.33898926 -90.39883423]
[576.16400146 -85.49282074]
[561.98901367 -80.58679962]
[547.81396484 -75.68077850]
[545.15557861 -59.76312637]
[534.78289795 -47.27790070]
[519.44598389 -41.68291092]
[503.28598022 -44.58936310]
[490.71697998 -55.29925919]
[476.63793945 -50.12425232]
[470.00878906 -33.09583664]
[452.75988770 -26.15913773]
[435.60983276 -34.12463379]
[421.73803711 -28.41737938]
[407.86621094 -22.71012688]
[399.04010010 -10.71224976]
[383.33395386 -12.61687183]
[369.46212769 -6.90961885]
[355.59033203 -1.20236576]
[346.76422119 10.79551125]
[331.05807495 8.89088917]
[317.18624878 14.59814262]
[308.36013794 26.59601974]
[292.65399170 24.69139862]
[278.78219604 30.39865112]
[264.91036987 36.10590363]
[251.03855896 41.81315613]
[237.16673279 47.52040863]
[223.29492188 53.22766113]
[209.42311096 58.93491364]
[198.82209778 75.07451630]
[178.89776611 72.21368408]
[165.25329590 78.44491577]
[151.60881042 84.67613983]
[137.96434021 90.90736389]
[124.31985474 97.13858795]
[115.13723755 119.24855804]
[91.48562622 122.95970917]
[82.21324158 134.75050354]
[72.94085693 146.54130554]
[63.66846848 158.33210754]
[54.39608383 170.12289429]
[45.12369919 181.91369629]
[55.59482956 197.48857117]
[60.19479752 215.66094971]
[58.39909744 234.29814148]
[50.43289566 251.21806335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[40 160]
[41 159]
[42 158]
[43 157]
[44 156]
[45 155]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[72 153]
[73 152]
[74 151]
[75 150]
[76 149]
[80 147]
[81 146]
[82 145]
[83 144]
[84 143]
[85 142]
[86 141]
[88 139]
[89 138]
[91 136]
[92 135]
[93 134]
[95 132]
[96 131]
[97 130]
[102 127]
[103 126]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
