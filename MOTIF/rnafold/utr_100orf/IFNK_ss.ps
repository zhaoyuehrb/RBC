%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUUUUUAGCUUGCAAAAAAAAUGAGCACCAAACCUGAUAUGAUUCAAAAGUGUUUGUGGCUUGAGAUCCUUAUGGGUAUAUUCAUUGCUGGCACCCUAUCCCUGGACUGUAACUUACUGA\
) } def
/len { sequence length } bind def

/coor [
[214.24084473 345.32632446]
[207.29589844 332.03091431]
[200.35093689 318.73550415]
[193.40599060 305.44012451]
[179.51925659 306.56848145]
[166.21583557 302.28518677]
[155.52989197 293.21020508]
[149.10868835 280.69888306]
[147.95872498 266.63949585]
[152.28810120 253.16827393]
[161.46980286 242.34489441]
[154.86387634 228.87783813]
[148.25796509 215.41076660]
[135.70637512 207.39161682]
[136.57543945 191.59429932]
[129.96952820 178.12724304]
[123.36361694 164.66017151]
[116.75770569 151.19309998]
[100.32731628 153.86508179]
[83.86566162 151.39297485]
[68.94483948 144.01284790]
[56.98976517 132.42951965]
[49.14215469 117.74919128]
[46.15144730 101.37381744]
[48.30325317 84.86724091]
[55.39207458 69.80583954]
[44.26187134 59.75006866]
[33.13166809 49.69429398]
[22.00146484 39.63852310]
[6.43699169 40.25895309]
[-4.70736980 29.90241432]
[-5.20293474 15.06024361]
[-16.33313751 5.00447130]
[-27.46334267 -5.05130148]
[-38.59354782 -15.10707378]
[-49.72375107 -25.16284752]
[-60.98044205 -35.07682037]
[-72.36180878 -44.84740829]
[-86.10565186 -38.28792572]
[-101.32942200 -37.89215469]
[-115.39552307 -43.72866440]
[-125.86690521 -54.78623962]
[-130.92935181 -69.14909363]
[-129.70574951 -84.32877350]
[-122.40809631 -97.69531250]
[-110.30076599 -106.93286896]
[-95.48142242 -110.44097900]
[-80.51760101 -107.61185455]
[-68.00187683 -98.93564606]
[-60.10267639 -85.91556549]
[-58.18858337 -70.80741882]
[-62.59122467 -56.22878265]
[-51.20985413 -46.45819473]
[-44.00317764 -44.46588516]
[-39.66797638 -36.29304886]
[-28.53777313 -26.23727798]
[-17.40756989 -16.18150520]
[-6.27736568 -6.12573242]
[4.85283804 3.93004036]
[19.66899300 2.92150521]
[31.09985161 12.96093464]
[32.05723572 28.50831985]
[43.18744278 38.56409073]
[54.31764603 48.61986542]
[65.44784546 58.67563629]
[79.08007050 50.36220551]
[94.55046082 46.41029358]
[110.49968719 47.16714478]
[125.52633667 52.56625366]
[134.40449524 40.47583008]
[143.28263855 28.38540459]
[152.16079712 16.29498100]
[153.41879272 -0.05584505]
[168.32292175 -6.89682531]
[181.54109192 2.80945349]
[179.47558594 19.07800484]
[164.25122070 25.17313576]
[155.37306213 37.26356125]
[146.49491882 49.35398483]
[137.61676025 61.44440842]
[145.17105103 70.65498352]
[150.51623535 81.30069733]
[153.39089966 92.86090851]
[153.65443420 104.77026367]
[151.29397583 116.44631958]
[146.42495728 127.31806946]
[139.28550720 136.85380554]
[130.22477722 144.58718872]
[136.83068848 158.05426025]
[143.43659973 171.52133179]
[150.04251099 184.98838806]
[163.06660461 193.97079468]
[161.72503662 208.80485535]
[168.33094788 222.27192688]
[174.93685913 235.73898315]
[191.15151978 235.47639465]
[205.81666565 242.26176453]
[216.03930664 254.70106506]
[219.82698059 270.29046631]
[216.47596741 285.92025757]
[206.70140076 298.49517822]
[213.64634705 311.79055786]
[220.59129333 325.08596802]
[227.53623962 338.38137817]
[242.35052490 335.42941284]
[257.39624023 336.77209473]
[271.45373535 342.30053711]
[283.38342285 351.56658936]
[292.21820068 363.81906128]
[297.24188232 378.06472778]
[298.04721069 393.14877319]
[294.56890869 407.84838867]
[287.08895874 420.97189331]
[276.21371460 431.45550537]
[262.82479858 438.44931030]
[248.00756836 441.38635254]
[232.96319580 440.02856445]
[218.91125488 434.48602295]
[206.99090576 425.20800781]
[198.16844177 412.94665527]
[193.15907288 398.69592285]
[192.36888123 383.61108398]
[195.86193848 368.91497803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[11 95]
[12 94]
[13 93]
[15 91]
[16 90]
[17 89]
[18 88]
[26 65]
[27 64]
[28 63]
[29 62]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 53]
[38 52]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
