%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUGACUACACAGUUAAGGGUCGUCCAUCUGCUUCCCCUUCUCCUAGCCUGCUUUGUGCAAACAAGUCCCAAGCAGGAGAAGAUGAAGAUGGAUUGCCACA\
) } def
/len { sequence length } bind def

/coor [
[2.74695468 328.09393311]
[-5.35638762 332.36947632]
[-14.38045692 333.67538452]
[-23.27705002 331.88980103]
[-32.24122620 343.91656494]
[-41.20539856 355.94335938]
[-50.16957092 367.97015381]
[-59.13374329 379.99694824]
[-60.50833511 396.33837891]
[-75.46088409 403.07287598]
[-88.60948944 393.27255249]
[-86.42799377 377.01913452]
[-71.16053009 371.03277588]
[-62.19635773 359.00598145]
[-53.23218536 346.97918701]
[-44.26800919 334.95239258]
[-35.30383682 322.92562866]
[-40.62443161 302.50454712]
[-29.36279869 284.33688354]
[-8.17395496 279.90661621]
[-1.14085984 266.65762329]
[5.89223528 253.40866089]
[5.02561808 238.53927612]
[18.33023643 229.97787476]
[25.36333275 216.72889709]
[32.39642715 203.47990417]
[39.42952347 190.23092651]
[46.46261597 176.98193359]
[53.49571228 163.73295593]
[60.52880859 150.48397827]
[67.56190491 137.23498535]
[66.77614594 133.63078308]
[67.80970764 129.45814514]
[70.91271973 125.63115692]
[75.89166260 123.14032745]
[84.10595703 110.58941650]
[81.24668884 96.38481140]
[89.18144226 84.26103210]
[103.34313202 81.19628143]
[111.55743408 68.64537811]
[119.77172852 56.09446716]
[127.98603058 43.54356003]
[136.20033264 30.99265289]
[144.41462708 18.44174385]
[152.62892151 5.89083624]
[160.84323120 -6.66007137]
[162.98185730 -15.72055817]
[169.50431824 -19.46318626]
[178.09754944 -31.75775337]
[179.66163635 -47.50145721]
[193.29464722 -53.50064468]
[201.88787842 -65.79521179]
[202.54483032 -85.82856750]
[220.14227295 -93.59384155]
[227.96998596 -106.38941956]
[235.79771423 -119.18498993]
[243.62544250 -131.98057556]
[251.45315552 -144.77613831]
[251.32879639 -161.17481995]
[265.60342407 -169.24742126]
[279.59252930 -160.68955994]
[278.90530396 -144.30482483]
[264.24874878 -136.94842529]
[256.42102051 -124.15284729]
[248.59329224 -111.35726929]
[240.76556396 -98.56169128]
[232.93783569 -85.76612091]
[236.25338745 -75.88099670]
[233.43215942 -65.61347961]
[225.19528198 -58.52078247]
[214.18244934 -57.20198059]
[205.58921814 -44.90741348]
[204.63977051 -30.04310036]
[190.39210510 -23.16452026]
[181.79887390 -10.86995411]
[173.39413452 1.55422747]
[165.17984009 14.10513592]
[156.96553040 26.65604401]
[148.75123596 39.20695114]
[140.53694153 51.75785828]
[132.32263184 64.30876923]
[124.10833740 76.85967255]
[115.89404297 89.41058350]
[118.75331116 103.61518860]
[110.81855774 115.73896790]
[96.65686798 118.80371857]
[88.44256592 131.35462952]
[80.81088257 144.26808167]
[73.77779388 157.51705933]
[66.74469757 170.76605225]
[59.71160126 184.01502991]
[52.67850494 197.26402283]
[45.64541245 210.51300049]
[38.61231613 223.76199341]
[31.57922173 237.01097107]
[31.94278526 252.82800293]
[19.14121819 260.44174194]
[12.10812378 273.69073486]
[5.07502937 286.93972778]
[10.55436039 294.55590820]
[13.15177059 303.52575684]
[12.59514141 312.80337524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[20 99]
[21 98]
[22 97]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[35 87]
[36 86]
[39 83]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[46 76]
[48 75]
[49 74]
[51 72]
[52 71]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
