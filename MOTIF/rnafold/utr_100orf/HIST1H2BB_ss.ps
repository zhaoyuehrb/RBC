%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGAACCCUCUAAGUCUGCUCCAGCCCCUAAAAAGGGUUCUAAGAAGGCUAUCACUAAGGCGCAGAAGAAGGAUGGUAAGAAGCGUAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[164.69117737 261.04449463]
[172.22184753 250.31440735]
[164.65460205 237.36308289]
[157.08735657 224.41175842]
[149.52011108 211.46043396]
[137.91464233 210.98886108]
[127.91792297 204.84062195]
[122.14383698 194.48446655]
[122.16962433 182.50640869]
[128.10696411 171.96432495]
[121.35954285 158.56759644]
[108.72415924 150.68113708]
[109.42675018 134.87553406]
[102.67932129 121.47880554]
[95.93190002 108.08208466]
[92.27722168 106.32035065]
[89.47673035 102.88127899]
[88.29359436 98.21445465]
[89.24620819 93.10758209]
[83.77643585 79.14041901]
[78.30666351 65.17326355]
[72.83689117 51.20610046]
[67.36711884 37.23893738]
[55.13032150 27.21040726]
[57.69384384 12.53806591]
[52.22406769 -1.42909503]
[45.06327057 -14.60949612]
[36.32215500 -26.79936409]
[27.58103943 -38.98923492]
[18.83992386 -51.17910385]
[8.48362446 -62.03023148]
[-3.28528976 -71.33037567]
[-15.05420399 -80.63051605]
[-31.09145355 -80.19905853]
[-41.31723404 -92.56081390]
[-37.88719559 -108.23290253]
[-23.43257713 -115.19304657]
[-9.04172039 -108.10200500]
[-5.75406075 -92.39943695]
[6.01485348 -83.09928894]
[17.78376770 -73.79914856]
[15.91627979 -88.68244171]
[22.19243622 -102.30631256]
[34.71809387 -110.55906677]
[49.71299744 -110.95001984]
[62.65167999 -103.36118317]
[69.62924194 -90.08286285]
[68.53984833 -75.12247467]
[59.71228027 -62.99506760]
[45.81070328 -57.36069870]
[31.02979279 -59.92021942]
[39.77090836 -47.73035049]
[48.51202393 -35.54048157]
[57.25313950 -23.35061073]
[60.14905548 -38.06841278]
[70.97905731 -48.44680405]
[85.80679321 -50.71356964]
[99.24285889 -44.04481506]
[106.40366364 -30.86441994]
[104.68649292 -15.96303272]
[94.71548462 -4.75683212]
[80.11477661 -1.31891191]
[66.19123077 -6.89886808]
[71.66100311 7.06829309]
[83.50656128 16.09779739]
[81.33427429 31.76916504]
[86.80404663 45.73632431]
[92.27381897 59.70348740]
[97.74359131 73.67064667]
[103.21337128 87.63780975]
[109.32862091 101.33465576]
[116.07604980 114.73138428]
[122.82347107 128.12811279]
[135.94148254 136.97279358]
[134.75627136 151.82015991]
[141.50369263 165.21688843]
[159.60383606 170.31484985]
[168.24742126 186.66000366]
[162.47143555 203.89318848]
[170.03868103 216.84451294]
[177.60592651 229.79583740]
[185.17317200 242.74716187]
[202.58477783 242.18466187]
[217.85713196 250.38125610]
[226.92025757 265.05276489]
[227.40902710 282.20309448]
[219.27983093 297.21255493]
[227.63760376 309.66836548]
[235.99539185 322.12420654]
[250.94776917 328.85906982]
[252.32194519 345.20053101]
[238.70429993 354.33789062]
[224.10348511 346.87142944]
[223.53956604 330.48199463]
[215.18179321 318.02615356]
[206.82400513 305.57034302]
[194.19012451 307.78222656]
[181.62539673 304.98098755]
[171.05033875 297.55776978]
[164.09547424 286.61306763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[10 76]
[11 75]
[13 73]
[14 72]
[15 71]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[25 64]
[26 63]
[27 54]
[28 53]
[29 52]
[30 51]
[31 41]
[32 40]
[33 39]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
