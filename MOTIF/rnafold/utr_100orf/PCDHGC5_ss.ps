%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGCCCAAGACACUCCCACAGCUCGCUGGGAAAUGGCAAGUGCUGUGCAUGUUGUCCUUGUGCUGCUGGGGCUGGGUGUCUGGGCAGCUUCGUUACU\
) } def
/len { sequence length } bind def

/coor [
[125.80538940 427.92706299]
[122.54737854 413.15408325]
[124.01593781 398.09756470]
[130.06719971 384.23260498]
[140.10832214 372.91754150]
[153.15557861 365.26086426]
[149.91529846 350.61502075]
[146.67503357 335.96917725]
[143.43476868 321.32333374]
[140.19450378 306.67749023]
[135.59510803 300.72174072]
[137.08871460 291.52600098]
[134.30549622 276.78646851]
[131.52227783 262.04693604]
[128.73905945 247.30740356]
[125.95584106 232.56787109]
[123.17263031 217.82835388]
[119.70498657 203.23466492]
[115.56045532 188.81860352]
[111.41593170 174.40254211]
[106.45516968 168.74424744]
[107.37418365 159.47341919]
[103.68000031 144.93544006]
[99.98581696 130.39744568]
[96.29163361 115.85946655]
[84.27869415 104.25621796]
[88.79728699 88.17739868]
[84.65275574 73.76133728]
[80.50823212 59.34527206]
[69.25912476 48.22015762]
[73.17864990 33.85051727]
[69.03412628 19.43445206]
[64.88960266 5.01838732]
[60.74507523 -9.39767647]
[50.74700928 -14.21894360]
[45.25331497 -23.60777473]
[45.92072678 -34.24303818]
[52.27517319 -42.51934052]
[49.03490448 -57.16518402]
[45.79463959 -71.81102753]
[42.55437088 -86.45686340]
[38.19536972 -91.80646515]
[37.44735336 -97.66737366]
[39.59804153 -102.11318970]
[37.27456665 -116.93214417]
[34.95109558 -131.75109863]
[26.52427864 -146.46249390]
[38.32797241 -158.63250732]
[53.28996277 -150.65910339]
[49.77005005 -134.07456970]
[52.09352493 -119.25561523]
[54.41699600 -104.43666077]
[57.20021439 -89.69713593]
[60.44047928 -75.05129242]
[63.68074799 -60.40544891]
[66.92101288 -45.75960922]
[81.03766632 -32.70077896]
[75.16114044 -13.54220295]
[79.30566406 0.87386125]
[83.45018768 15.28992558]
[87.59471893 29.70598984]
[98.54737854 39.79997253]
[94.92429352 55.20074463]
[99.06882477 69.61680603]
[103.21334839 84.03287506]
[113.12532806 90.35632324]
[116.19776154 101.70505524]
[110.82961273 112.16528320]
[114.52379608 126.70326996]
[118.21797943 141.24125671]
[121.91217041 155.77923584]
[125.83199310 170.25801086]
[129.97651672 184.67407227]
[134.12104797 199.09014893]
[138.15362549 202.94833374]
[139.98979187 207.53242493]
[139.73823547 211.83258057]
[137.91215515 215.04513550]
[140.69537354 229.78465271]
[143.47859192 244.52418518]
[146.26181030 259.26370239]
[149.04502869 274.00323486]
[151.82823181 288.74276733]
[154.84034729 303.43722534]
[158.08061218 318.08306885]
[161.32087708 332.72891235]
[164.56114197 347.37475586]
[167.80140686 362.02059937]
[182.86083984 363.45889282]
[196.73794556 369.48226929]
[208.07319641 379.50064087]
[215.75607300 392.53247070]
[219.03387451 407.30105591]
[217.58549500 422.35952759]
[211.55281067 436.23257446]
[201.52687073 447.56112671]
[188.48988342 455.23526001]
[173.71910095 458.50314331]
[158.66162109 457.04467773]
[144.79258728 451.00271606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[18 74]
[19 73]
[20 72]
[22 71]
[23 70]
[24 69]
[25 68]
[27 65]
[28 64]
[29 63]
[31 61]
[32 60]
[33 59]
[34 58]
[38 56]
[39 55]
[40 54]
[41 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
