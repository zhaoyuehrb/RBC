%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAGGUGCCGCUGUUGCUGCUCGUGUUAAAUCUAGAACCGUAGCCAGACAUGGGACUGGAGGACGAGCAAAAGAUGCUUACCGAAUCCGGAGAUCCUGAGGAGGAGGAAGAGGAAGAGGAGGAAUUAGUGGAUCCCCUAACAACAGUGA\
) } def
/len { sequence length } bind def

/coor [
[102.75071716 274.99218750]
[95.05239868 288.22073364]
[82.08210754 296.34661865]
[66.82032013 297.50259399]
[52.77407074 291.42297363]
[43.17109680 279.50488281]
[40.21808624 264.48693848]
[44.59362030 249.82019043]
[55.29223251 238.87495422]
[69.85546112 234.16635132]
[72.34058380 219.37364197]
[74.82569885 204.58094788]
[77.31082153 189.78823853]
[79.79593658 174.99552917]
[82.28105927 160.20281982]
[84.76617432 145.41011047]
[87.25129700 130.61740112]
[71.93103027 117.66600800]
[66.88057709 98.25100708]
[52.46836090 94.09312439]
[38.05614471 89.93523407]
[23.64393044 85.77734375]
[9.23171425 81.61946106]
[-5.18050194 77.46157074]
[-19.59271812 73.30368805]
[-26.46814346 80.35356140]
[-35.40131760 84.35707092]
[-45.12265396 84.79211426]
[-54.26769257 81.64047241]
[-61.56858444 75.38433075]
[-66.02985382 66.93308258]
[-67.06403351 57.49124146]
[-81.08074951 52.14973068]
[-95.09746552 46.80821609]
[-109.11417389 41.46670532]
[-123.13088989 36.12519073]
[-137.41377258 42.34106445]
[-151.55261230 36.72433853]
[-157.39048767 23.06948853]
[-171.40719604 17.72797585]
[-185.42390442 12.38646317]
[-199.44061279 7.04495096]
[-212.35968018 15.64016056]
[-227.86212158 14.96656513]
[-239.98695374 5.28317451]
[-244.07192993 -9.68654919]
[-238.54627991 -24.18644142]
[-225.53474426 -32.64099884]
[-210.04052734 -31.79927063]
[-198.02145386 -21.98491859]
[-194.09910583 -6.97176218]
[-180.08239746 -1.63024962]
[-166.06568909 3.71126294]
[-152.04896545 9.05277538]
[-138.60417175 2.74619555]
[-124.31313324 7.96357536]
[-117.78937531 22.10847855]
[-103.77265930 27.44999123]
[-89.75595093 32.79150391]
[-75.73923492 38.13301468]
[-61.72252274 43.47452927]
[-43.93666458 33.51461792]
[-24.26490402 39.87656021]
[-15.43483067 58.89146805]
[-1.02261460 63.04935837]
[13.38960171 67.20724487]
[27.80181694 71.36512756]
[42.21403503 75.52301788]
[56.62625122 79.68090820]
[71.03846741 83.83879089]
[75.72272491 76.44235992]
[82.29457855 70.40037537]
[90.36302185 66.19322205]
[99.41542816 64.18860626]
[108.84996796 64.61099243]
[118.01557922 67.52035522]
[126.25691986 72.80210876]
[132.96105957 80.16921997]
[144.85343933 71.02748108]
[156.74581909 61.88574982]
[161.68362427 54.12237167]
[168.98204041 52.68061066]
[181.06202698 43.78826141]
[181.09733582 28.38355827]
[190.09152222 16.09706116]
[204.42626953 11.51676750]
[218.54042053 16.19957733]
[230.62040710 7.30722761]
[242.70040894 -1.58512211]
[228.61294556 -6.73715734]
[223.65583801 -20.89438438]
[231.45231628 -33.70901489]
[246.30380249 -35.81459427]
[257.35504150 -25.67210960]
[256.52880859 -10.69547939]
[269.46685791 -18.28538704]
[282.40490723 -25.87529564]
[295.34298706 -33.46520233]
[302.96899414 -47.98332596]
[319.36364746 -48.36761475]
[327.66149902 -34.22274017]
[319.32644653 -20.09974289]
[302.93289185 -20.52714729]
[289.99481201 -12.93723965]
[277.05676270 -5.34733152]
[264.11871338 2.24257708]
[251.59275818 10.49486637]
[239.51275635 19.38721657]
[227.43276978 28.27956581]
[227.71049500 43.14768219]
[219.07789612 55.47416306]
[204.67390442 60.41159439]
[189.95437622 55.86825180]
[177.87438965 64.76059723]
[165.88755798 73.77812958]
[153.99517822 82.91986084]
[142.10279846 92.06159973]
[142.25883484 107.06078339]
[154.33882141 115.95314026]
[166.41880798 124.84548950]
[175.24670410 127.43784332]
[178.65502930 134.05062866]
[190.54740906 143.19235229]
[202.43978882 152.33409119]
[216.92707825 147.03108215]
[231.97657776 150.42460632]
[242.78605652 161.43182373]
[245.90623474 176.54037476]
[240.34147644 190.92915344]
[227.86749268 200.00677490]
[212.46466064 200.87658691]
[199.04798889 193.26104736]
[191.89868164 179.59024048]
[193.29804993 164.22647095]
[181.40567017 155.08473206]
[169.51329041 145.94300842]
[157.52645874 136.92547607]
[145.44647217 128.03312683]
[133.36648560 119.14077759]
[124.21411133 127.57797241]
[113.31666565 132.29481506]
[102.04399872 133.10252380]
[99.55888367 147.89523315]
[97.07376099 162.68794250]
[94.58864594 177.48065186]
[92.10352325 192.27334595]
[89.61840820 207.06605530]
[87.13328552 221.85876465]
[84.64817047 236.65147400]
[96.87330627 245.86041260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 149]
[11 148]
[12 147]
[13 146]
[14 145]
[15 144]
[16 143]
[17 142]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[39 54]
[40 53]
[41 52]
[42 51]
[78 117]
[79 116]
[80 115]
[82 114]
[83 113]
[87 109]
[88 108]
[89 107]
[95 106]
[96 105]
[97 104]
[98 103]
[118 139]
[119 138]
[120 137]
[122 136]
[123 135]
[124 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
