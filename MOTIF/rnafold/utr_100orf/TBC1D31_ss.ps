%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUUCCCGGGCCGGGAGCGCUGGGCCUGCCGGGAAGGCGCUGGGACGGUUACCCAGCGGGCCGCCGGCGGUCGUGGGCAAGCUUCGCCAUGCAGAGCACUGACCUAGGCAACAAGGAGAGCGGCAAGAUAUGGCACCGCAAGCCGUCCCCGGCCACGCGGGACGGAAUUAUAGUGAACAUUAUUCACA\
) } def
/len { sequence length } bind def

/coor [
[181.08830261 382.05212402]
[172.89129639 366.98287964]
[170.32960510 349.99591064]
[173.72789001 333.13125610]
[182.69403076 318.41998291]
[196.16430664 307.63970947]
[191.08555603 293.52566528]
[186.00682068 279.41162109]
[180.92807007 265.29757690]
[175.84931946 251.18353271]
[170.42393494 237.19906616]
[164.65519714 223.35270691]
[158.88645935 209.50634766]
[153.11773682 195.65998840]
[147.34899902 181.81361389]
[141.58026123 167.96725464]
[135.81153870 154.12089539]
[123.77462769 145.34809875]
[125.60955811 129.63365173]
[119.84082031 115.78730011]
[111.00765228 121.86008453]
[100.80876160 123.58096313]
[91.19815063 120.93985748]
[83.88610077 114.73352051]
[80.03514862 106.36183167]
[65.05999756 105.49877930]
[50.08484650 104.63572693]
[35.10969543 103.77268219]
[26.34499741 106.40644836]
[19.89596176 102.77027893]
[4.93703127 101.66104889]
[-10.02189922 100.55181122]
[-24.98082924 99.44257355]
[-39.93975830 98.33334351]
[-47.61185837 111.48249817]
[-60.18100739 119.96208954]
[-75.12423706 122.13463593]
[-89.46994781 117.62224579]
[-100.38880920 107.37100220]
[-105.75178528 93.45324707]
[-120.71071625 92.34400940]
[-135.66964722 91.23477173]
[-150.62857056 90.12554169]
[-165.58750916 89.01630402]
[-180.54643250 87.90706635]
[-195.50537109 86.79783630]
[-206.28497314 98.12628937]
[-221.83012390 99.82401276]
[-234.80087280 91.08937836]
[-239.07283020 76.04662323]
[-232.62889099 61.79847717]
[-218.51171875 55.07247162]
[-203.38697815 59.04442596]
[-194.39613342 71.83890533]
[-179.43719482 72.94813538]
[-164.47827148 74.05737305]
[-149.51933289 75.16661072]
[-134.56040955 76.27584076]
[-119.60147858 77.38507843]
[-104.64254761 78.49431610]
[-97.28545380 65.51977539]
[-84.97402191 56.99111176]
[-70.11966705 54.64395905]
[-55.66030502 58.99677277]
[-44.47930145 69.23748779]
[-38.83052444 83.37441254]
[-23.87159348 84.48364258]
[-8.91266346 85.59288025]
[6.04626656 86.70211792]
[21.00519753 87.81134796]
[35.97274399 88.79753113]
[50.94789505 89.66057587]
[65.92304230 90.52362823]
[80.89819336 91.38668060]
[87.57076263 81.78168488]
[98.83739471 76.87451935]
[111.59107208 78.69379425]
[121.95234680 87.31175232]
[129.70022583 74.46767426]
[137.44810486 61.62359619]
[133.86994934 46.46330261]
[141.91036987 33.54795456]
[156.38545227 30.23015594]
[164.13333130 17.38607979]
[158.26016235 3.14486885]
[161.85679626 -11.65099716]
[173.34028625 -21.37690926]
[188.17129517 -22.46291542]
[195.91917419 -35.30699158]
[203.66705322 -48.15106964]
[211.41493225 -60.99514771]
[219.16282654 -73.83922577]
[226.91070557 -86.68330383]
[219.60867310 -100.12307739]
[220.01152039 -115.31302643]
[227.91096497 -128.17634583]
[241.10017395 -135.31083679]
[255.98933411 -134.88850403]
[263.73721313 -147.73257446]
[263.65594482 -166.13870239]
[279.32339478 -174.02813721]
[286.85897827 -186.99790955]
[283.03195190 -202.09730530]
[290.85888672 -215.14314270]
[305.27743530 -218.69857788]
[312.81301880 -231.66835022]
[320.34860229 -244.63812256]
[313.95318604 -258.77593994]
[317.12216187 -273.96597290]
[328.63699341 -284.36734009]
[344.06997681 -285.98049927]
[357.48684692 -278.18515015]
[363.72851562 -263.97879028]
[360.39492798 -248.82400513]
[348.76794434 -238.54817200]
[333.31835938 -237.10253906]
[325.78277588 -224.13276672]
[318.24719238 -211.16299438]
[322.29910278 -196.87602234]
[314.84173584 -183.61547852]
[299.82876587 -179.46232605]
[292.29318237 -166.49255371]
[295.08737183 -154.71217346]
[288.90124512 -143.84071350]
[276.58129883 -139.98469543]
[268.83340454 -127.14061737]
[276.15136719 -114.16705322]
[275.99185181 -99.17270660]
[268.29763794 -86.18558502]
[255.04891968 -78.74459076]
[239.75477600 -78.93541718]
[232.00689697 -66.09133911]
[224.25901794 -53.24726486]
[216.51112366 -40.40318680]
[208.76324463 -27.55911064]
[201.01536560 -14.71503353]
[206.97193909 -1.08942223]
[203.72459412 13.60475254]
[192.31405640 23.68706512]
[176.97741699 25.13396263]
[169.22952271 37.97803879]
[173.04591370 52.32972336]
[165.37142944 65.46581268]
[150.29219055 69.37148285]
[142.54429626 82.21556091]
[134.79641724 95.05963135]
[133.68717957 110.01856232]
[139.45591736 123.86492920]
[151.90544128 133.62811279]
[149.65789795 148.35217285]
[155.42663574 162.19853210]
[161.19535828 176.04489136]
[166.96409607 189.89125061]
[172.73283386 203.73760986]
[178.50155640 217.58396912]
[184.27029419 231.43032837]
[188.44718933 234.61730957]
[190.74304199 238.68447876]
[191.13847351 242.76338196]
[189.96336365 246.10478210]
[195.04211426 260.21884155]
[200.12086487 274.33288574]
[205.19961548 288.44692993]
[210.27835083 302.56097412]
[223.27842712 301.79232788]
[236.01954651 304.41995239]
[247.63066101 310.25701904]
[257.31976318 318.89758301]
[264.42807007 329.74468994]
[268.47460938 342.05169678]
[269.18899536 354.97366333]
[266.52926636 367.62527466]
[260.68447876 379.14163208]
[252.06106567 388.73727417]
[241.25479126 395.75976562]
[245.63119507 410.10714722]
[250.00759888 424.45452881]
[254.38400269 438.80187988]
[258.76040649 453.14926147]
[272.18789673 461.92886353]
[273.55215454 477.91381836]
[261.80657959 488.84182739]
[245.96141052 486.32986450]
[238.17169189 472.30487061]
[244.41302490 457.52566528]
[240.03662109 443.17828369]
[235.66021729 428.83090210]
[231.28382874 414.48355103]
[226.90742493 400.13616943]
[209.83314514 399.67407227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 164]
[7 163]
[8 162]
[9 161]
[10 160]
[11 156]
[12 155]
[13 154]
[14 153]
[15 152]
[16 151]
[17 150]
[19 148]
[20 147]
[25 74]
[26 73]
[27 72]
[28 71]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[78 146]
[79 145]
[80 144]
[83 141]
[84 140]
[88 136]
[89 135]
[90 134]
[91 133]
[92 132]
[93 131]
[98 126]
[99 125]
[101 122]
[102 121]
[105 118]
[106 117]
[107 116]
[175 189]
[176 188]
[177 187]
[178 186]
[179 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
