%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAAGUUGACCUCUGGGUCCGGAAUCGCGGGCAAAGAUGGCGGCGGCCAGGUGUUGGAGGCCUUUGCUACGCGGUCCGAGGCUUUCAUUGCACACCGCGGCUAAUGCCGCCGCCACGGCUACAGAAACGACCUGCC\
) } def
/len { sequence length } bind def

/coor [
[126.01308441 212.07215881]
[123.87705994 206.01771545]
[123.56056213 199.56462097]
[125.11327362 193.25126648]
[128.42796326 187.61099243]
[133.24757385 183.12713623]
[129.55664062 168.58833313]
[125.86571503 154.04951477]
[122.17478180 139.51071167]
[118.48385620 124.97189331]
[111.81288910 121.54433441]
[99.20522308 129.67124939]
[98.47095490 114.68920135]
[91.79998779 111.26163483]
[77.83098602 116.72672272]
[63.86199188 122.19180298]
[57.46339798 136.39376831]
[43.21899796 141.73715210]
[29.71902847 135.54954529]
[15.75003242 141.01463318]
[1.78103662 146.47970581]
[-12.18795967 151.94479370]
[-26.15695572 157.40988159]
[-32.26214218 171.98733521]
[-46.91844559 177.90074158]
[-61.43053818 171.64176941]
[-67.18865967 156.92376709]
[-60.77660751 142.47866821]
[-45.99855042 136.87648010]
[-31.62203979 143.44088745]
[-17.65304375 137.97579956]
[-3.68404770 132.51071167]
[10.28494835 127.04563141]
[24.25394440 121.58054352]
[29.97099686 107.87467957]
[44.05969238 102.13330841]
[58.39690781 108.22280884]
[72.36590576 102.75772858]
[86.33489990 97.29264069]
[97.11976624 86.86734772]
[103.05519104 73.09162140]
[108.99062347 59.31589508]
[114.92605591 45.54016495]
[120.86148834 31.76444054]
[126.79692078 17.98871231]
[132.73234558 4.21298552]
[138.66778564 -9.56274128]
[144.60321045 -23.33846855]
[150.53865051 -37.11419678]
[139.87434387 -57.51981354]
[147.38551331 -79.00881958]
[167.96348572 -88.11690521]
[171.65441895 -102.65571594]
[175.34535217 -117.19452667]
[179.03627014 -131.73333740]
[182.72720337 -146.27215576]
[185.75740051 -160.96289062]
[188.12065125 -175.77555847]
[190.48391724 -190.58822632]
[192.84716797 -205.40087891]
[195.21043396 -220.21354675]
[197.57368469 -235.02621460]
[199.93693542 -249.83888245]
[202.30020142 -264.65155029]
[204.66345215 -279.46420288]
[207.02671814 -294.27685547]
[200.03123474 -311.26824951]
[211.51811218 -324.48782349]
[213.54600525 -339.35012817]
[215.57389832 -354.21240234]
[208.87213135 -369.17965698]
[218.70120239 -382.30679321]
[234.94978333 -380.08972168]
[240.90275574 -364.80920410]
[230.43618774 -352.18450928]
[228.40829468 -337.32220459]
[226.38040161 -322.45993042]
[233.46565247 -312.59057617]
[231.84091187 -300.14492798]
[221.83938599 -291.91360474]
[219.47612000 -277.10095215]
[217.11286926 -262.28826904]
[214.74960327 -247.47561646]
[212.38635254 -232.66294861]
[210.02308655 -217.85029602]
[207.65983582 -203.03762817]
[205.29656982 -188.22496033]
[202.93331909 -173.41229248]
[200.57005310 -158.59963989]
[202.18946838 -156.21359253]
[202.91987610 -153.01591492]
[202.43701172 -149.35765076]
[200.55560303 -145.70413208]
[197.26602173 -142.58122253]
[193.57508850 -128.04240417]
[189.88415527 -113.50359344]
[186.19322205 -98.96478271]
[182.50228882 -84.42597198]
[188.72341919 -79.75135040]
[193.44548035 -73.53206635]
[196.29666138 -66.23327637]
[197.04579163 -58.40600586]
[195.62101746 -50.64555740]
[192.11634827 -43.54622269]
[186.78567505 -37.65578079]
[180.02438354 -33.43323135]
[172.34005737 -31.21305847]
[164.31437683 -31.17876434]
[158.37893677 -17.40303802]
[152.44351196 -3.62731028]
[146.50807190 10.14841652]
[140.57264709 23.92414474]
[134.63722229 37.69987106]
[128.70178223 51.47559738]
[122.76634979 65.25132751]
[116.83092499 79.02705383]
[110.89549255 92.80278015]
[133.02265930 121.28096771]
[136.71359253 135.81977844]
[140.40452576 150.35858154]
[144.09545898 164.89739990]
[147.78639221 179.43620300]
[166.77882385 194.83053589]
[160.71894836 217.80578613]
[166.65438843 231.58151245]
[172.58981323 245.35723877]
[187.61953735 249.67480469]
[196.31477356 262.67199707]
[194.56990051 278.21191406]
[183.20878601 288.95712280]
[167.59580994 289.83401489]
[155.10293579 280.42858887]
[151.62892151 265.18179321]
[158.81408691 251.29266357]
[152.87866211 237.51693726]
[146.94322205 223.74121094]
[140.70141602 223.29757690]
[134.80943298 221.07223511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[14 39]
[15 38]
[16 37]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[40 117]
[41 116]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[68 77]
[69 76]
[70 75]
[124 136]
[125 135]
[126 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
