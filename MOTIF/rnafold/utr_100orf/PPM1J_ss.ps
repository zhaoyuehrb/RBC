%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGAGGGCGGGGCAGGGAGGCAGCAUGCUAAACCGGGUGCGCUCGGCCGUGGCGCACCUGGUGAGCUCCGGGGGCGCUCCGCCUCCGCGCCCCAAAUCCCCGGACCUGCCCAACGCCGCCUCGG\
) } def
/len { sequence length } bind def

/coor [
[100.85725403 369.02279663]
[84.50254059 367.81637573]
[77.61457062 352.93392944]
[87.27909851 339.68518066]
[88.38256836 324.72583008]
[89.48603821 309.76647949]
[90.58950043 294.80712891]
[91.69297028 279.84774780]
[92.79644012 264.88839722]
[93.53245544 249.90646362]
[93.90057373 234.91098022]
[94.26869202 219.91549683]
[94.26869202 204.91549683]
[93.90057373 189.92002869]
[93.53245544 174.92454529]
[93.16433716 159.92906189]
[92.79621887 144.93357849]
[92.42810059 129.93809509]
[92.05998230 114.94261169]
[88.20893097 129.43983459]
[77.84905243 140.28753662]
[63.54423523 144.80111694]
[48.83469772 141.86349487]
[37.36080933 132.20172119]
[31.96217155 118.20691681]
[33.97485733 103.34255981]
[42.90075684 91.28734589]
[56.53086090 85.02473450]
[71.49193573 86.10462952]
[84.08199310 94.26044464]
[74.28440094 82.90231323]
[64.48680878 71.54418182]
[51.63823318 69.79537964]
[43.71374893 60.04467010]
[44.57314682 47.91251373]
[35.05724716 36.31735992]
[25.54134750 24.72220230]
[16.02544785 13.12704468]
[6.50954866 1.53188777]
[-3.00635052 -10.06326866]
[-12.52225018 -21.65842628]
[-22.03814888 -33.25358200]
[-31.55404854 -44.84873962]
[-41.06994629 -56.44389725]
[-50.58584595 -68.03905487]
[-58.53642654 -72.75214386]
[-60.18877792 -80.03753662]
[-69.41725159 -91.86273193]
[-84.81361389 -97.50933075]
[-87.35473633 -113.71040344]
[-74.42652893 -123.79967499]
[-59.32842255 -117.39817047]
[-57.59205627 -101.09120941]
[-48.36358261 -89.26601410]
[-38.99068832 -77.55495453]
[-29.47479057 -65.95979309]
[-19.95889091 -54.36463928]
[-10.44299221 -42.76948166]
[-0.92709291 -31.17432594]
[8.58880615 -19.57916832]
[18.10470581 -7.98401165]
[27.62060547 3.61114526]
[37.13650513 15.20630169]
[46.65240479 26.80145836]
[56.16830444 38.39661407]
[72.87359619 43.62335205]
[75.84494019 61.74658966]
[85.64253235 73.10472107]
[95.44012451 84.46285248]
[109.99059296 88.10755920]
[123.98548126 82.70912933]
[137.98037720 77.31070709]
[151.97526550 71.91227722]
[165.97015381 66.51385498]
[179.96505737 61.11542892]
[193.95994568 55.71700287]
[207.44006348 49.13776016]
[220.30598450 41.42621613]
[233.17192078 33.71467590]
[246.03784180 26.00313568]
[246.41688538 10.58042908]
[255.09281921 -2.17621350]
[269.29714966 -8.19619465]
[284.49737549 -5.55855942]
[295.84310913 4.89503193]
[299.71401978 19.82887650]
[294.87487793 34.47763824]
[282.86984253 44.16695023]
[267.52969360 45.80499268]
[253.74938965 38.86906433]
[240.88345337 46.58060455]
[228.01753235 54.29214859]
[215.15159607 62.00368881]
[229.51588440 66.32427979]
[237.91387939 78.75302124]
[236.56318665 93.69208527]
[226.07214355 104.41300201]
[211.16586304 106.08714294]
[198.55804443 97.96047974]
[193.92715454 83.69321442]
[199.35836792 69.71189117]
[185.36347961 75.11032104]
[171.36859131 80.50874329]
[157.37368774 85.90717316]
[143.37879944 91.30559540]
[129.38391113 96.70402527]
[115.38901520 102.10244751]
[107.05546570 114.57449341]
[107.42358398 129.56997681]
[107.79170227 144.56546021]
[108.15982056 159.56094360]
[108.52793884 174.55642700]
[108.89605713 189.55191040]
[109.26417542 204.54737854]
[112.45905304 210.53068542]
[112.12212372 216.33750916]
[109.26417542 220.28361511]
[108.89605713 235.27909851]
[108.52793884 250.27458191]
[111.42538452 256.40744019]
[110.80393219 262.19073486]
[107.75579834 265.99188232]
[106.65232849 280.95123291]
[105.54885864 295.91058350]
[104.44538879 310.86993408]
[103.34192657 325.82928467]
[102.23845673 340.78866577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 127]
[5 126]
[6 125]
[7 124]
[8 123]
[9 122]
[10 119]
[11 118]
[12 117]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[30 69]
[31 68]
[32 67]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[47 54]
[48 53]
[70 107]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[76 101]
[77 93]
[78 92]
[79 91]
[80 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
