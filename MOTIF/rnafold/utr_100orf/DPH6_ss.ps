%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGGCGCGACCUCCUGGCUCCCGCCCGCGCUCGCCGCACGCACGCGCACUGCGCCCAGCAUGAGGGUCGCGGCUCUGAUCAGUGGUGGGAAGGACAGCUGCUAUAAUAUGAUGCAGUGCAUUGCUGCUGGGCAUCAGAUCGUUGCUUUAGCAAAUCUAA\
) } def
/len { sequence length } bind def

/coor [
[44.00673294 200.53953552]
[33.34914780 211.09490967]
[28.98871994 226.30335999]
[14.50124931 229.76203918]
[3.84366441 240.31741333]
[-6.81392097 250.87278748]
[-17.36929321 261.53036499]
[-27.82147217 272.28918457]
[-38.27365112 283.04800415]
[-48.72583008 293.80679321]
[-59.17800903 304.56561279]
[-44.17810440 304.61978149]
[-32.61833191 314.17864990]
[-29.74801064 328.90145874]
[-36.87056351 342.10256958]
[-50.75161743 347.78732300]
[-65.08775330 343.37423706]
[-73.36888885 330.86730957]
[-71.83527374 315.94754028]
[-83.63959503 325.20269775]
[-95.44392395 334.45785522]
[-101.05572510 349.86694336]
[-117.25102234 352.44464111]
[-127.36946869 339.53924561]
[-121.00208282 324.42672729]
[-104.69908142 322.65353394]
[-92.89476013 313.39837646]
[-81.09043121 304.14321899]
[-69.93681335 294.11343384]
[-59.48463821 283.35461426]
[-49.03245926 272.59582520]
[-38.58028030 261.83700562]
[-28.12810135 251.07820129]
[-25.71119690 244.05566406]
[-17.36929321 240.21520996]
[-6.71170759 229.65983582]
[3.94587755 219.10446167]
[7.54400444 204.65098572]
[22.79377747 200.43731689]
[33.45136261 189.88195801]
[33.98828888 183.76480103]
[38.02254105 178.18295288]
[45.02122116 175.12538147]
[52.72888947 162.25714111]
[60.43655396 149.38888550]
[61.17935181 141.99931335]
[68.41880798 136.34893799]
[76.37303925 123.63162231]
[84.32727814 110.91430664]
[81.17625427 96.77156067]
[88.85979462 84.48703766]
[102.95540619 81.13146210]
[110.90964508 68.41414642]
[118.86387634 55.69682693]
[119.06639099 37.30594254]
[134.83207703 29.64471817]
[142.53973389 16.77646828]
[150.24740601 3.90821671]
[157.95506287 -8.96003437]
[165.66273499 -21.82828522]
[173.37040710 -34.69653702]
[181.07806396 -47.56478500]
[188.78573608 -60.43303680]
[174.39517212 -56.20080185]
[160.21603394 -61.09487534]
[151.49989319 -73.30261993]
[151.47499084 -88.30259705]
[160.15055847 -100.53920746]
[174.31336975 -105.48033142]
[188.71789551 -101.29589844]
[198.02908325 -89.53572083]
[198.79798889 -74.55428314]
[208.39050293 -86.08613586]
[217.98301697 -97.61799622]
[227.35148621 -109.33258057]
[236.49246216 -121.22554779]
[238.76763916 -136.88230896]
[252.65824890 -142.25820923]
[261.79922485 -154.15116882]
[270.94018555 -166.04412842]
[279.96615601 -178.02462769]
[288.87622070 -190.09155273]
[297.78628540 -202.15847778]
[306.69635010 -214.22540283]
[315.13476562 -226.62672424]
[323.08901978 -239.34403992]
[331.04324341 -252.06137085]
[338.99749756 -264.77868652]
[346.95172119 -277.49600220]
[354.90597534 -290.21331787]
[362.86019897 -302.93063354]
[356.18695068 -316.84002686]
[358.11572266 -332.14633179]
[368.03103638 -343.96539307]
[382.76898193 -348.52575684]
[397.62667847 -344.37225342]
[407.86315918 -332.83023071]
[410.21194458 -317.58270264]
[403.92358398 -303.49511719]
[391.00463867 -295.06277466]
[375.57751465 -294.97637939]
[367.62329102 -282.25906372]
[359.66903687 -269.54174805]
[351.71481323 -256.82443237]
[343.76055908 -244.10713196]
[335.80633545 -231.38981628]
[327.85208130 -218.67250061]
[328.38464355 -215.87388611]
[327.81356812 -212.69125366]
[325.98522949 -209.55403137]
[322.90774536 -206.93977356]
[318.76327515 -205.31532288]
[309.85321045 -193.24841309]
[300.94314575 -181.18148804]
[292.03305054 -169.11456299]
[290.58270264 -161.83074951]
[282.83316040 -156.90315247]
[273.69219971 -145.01019287]
[264.55120850 -133.11723328]
[262.92987061 -118.31113434]
[248.38543701 -112.08457184]
[239.24446106 -100.19160461]
[238.97433472 -95.37966919]
[235.64657593 -90.69849396]
[229.51486206 -88.02548218]
[219.92234802 -76.49362946]
[210.32984924 -64.96176910]
[201.65399170 -52.72537231]
[193.94631958 -39.85712051]
[186.23864746 -26.98887062]
[178.53099060 -14.12061882]
[170.82331848 -1.25236785]
[163.11566162 11.61588287]
[155.40798950 24.48413467]
[147.70031738 37.35238647]
[150.33625793 49.18898392]
[143.97994995 59.98473740]
[131.58119202 63.65106583]
[123.62696075 76.36837769]
[115.67272186 89.08569336]
[118.82374573 103.22843933]
[111.14020538 115.51296234]
[97.04459381 118.86853790]
[89.09035492 131.58586121]
[81.13612366 144.30317688]
[73.30480194 157.09654236]
[65.59713745 169.96479797]
[57.88947296 182.83305359]
[71.36036682 176.23493958]
[86.29039001 174.78776550]
[100.77771759 178.67587280]
[112.97691345 187.40396118]
[121.33399963 199.86026001]
[124.78443146 214.45800781]
[122.88867950 229.33773804]
[115.88822937 242.60398865]
[104.67482758 252.56690979]
[90.67685699 257.95736694]
[75.67743683 258.08868408]
[61.58722305 252.94419861]
[50.20107269 243.17916870]
[42.96939087 230.03752136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[4 37]
[5 36]
[6 35]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[19 28]
[20 27]
[21 26]
[43 148]
[44 147]
[45 146]
[47 145]
[48 144]
[49 143]
[52 140]
[53 139]
[54 138]
[56 135]
[57 134]
[58 133]
[59 132]
[60 131]
[61 130]
[62 129]
[63 128]
[72 127]
[73 126]
[74 125]
[75 122]
[76 121]
[78 119]
[79 118]
[80 117]
[81 115]
[82 114]
[83 113]
[84 112]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
