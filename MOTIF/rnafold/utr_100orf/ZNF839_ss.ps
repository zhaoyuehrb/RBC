%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCUCGGCCGCCAUGGCGGAUGCGGAGCCGGAGGCUGGGGGCGGCAGCGAGGAUGGCGGCGGCGGCGGCGGCCCGGCUCCUCCGGGCCAGAGCGGCAGCGUCGCACGUGUGG\
) } def
/len { sequence length } bind def

/coor [
[70.71545410 130.84925842]
[61.17865753 117.38288116]
[46.62203979 121.00294495]
[32.06542206 124.62301636]
[17.50880432 128.24308777]
[2.95218730 131.86315918]
[-11.60443020 135.48321533]
[-26.16104698 139.10328674]
[-40.66730881 142.92013550]
[-55.12055969 146.93305969]
[-69.57380676 150.94598389]
[-84.02706146 154.95890808]
[-95.25427246 166.10612488]
[-109.58757782 162.05575562]
[-124.04083252 166.06867981]
[-129.09820557 170.65657043]
[-134.85026550 171.73371887]
[-139.38581848 169.88481140]
[-154.03512573 173.10935974]
[-168.68443298 176.33392334]
[-173.94358826 190.83718872]
[-186.22277832 200.17662048]
[-201.60375977 201.37205505]
[-215.17851257 194.04200745]
[-222.61538696 180.52548218]
[-221.54130554 165.13554382]
[-212.29899597 152.78308105]
[-197.83764648 147.40971375]
[-182.77183533 150.73005676]
[-171.90898132 161.68461609]
[-157.25967407 158.46005249]
[-142.61036682 155.23550415]
[-128.05375671 151.61543274]
[-113.60050201 147.60250854]
[-103.40708923 136.74232483]
[-88.03998566 140.50566101]
[-73.58673859 136.49273682]
[-59.13348389 132.47981262]
[-44.68023682 128.46688843]
[-39.00168991 123.58049774]
[-29.78111458 124.54666901]
[-15.22449875 120.92660522]
[-0.66788107 117.30653381]
[13.88873577 113.68647003]
[28.44535255 110.06639862]
[43.00197220 106.44632721]
[57.55858612 102.82626343]
[58.77851868 89.50949097]
[64.07272339 77.22958374]
[72.91792297 67.20027161]
[84.43987274 60.41283417]
[97.49976349 57.53813553]
[110.80677795 58.86030197]
[123.04566193 64.24865723]
[133.00674438 73.17061615]
[139.70550537 84.74436188]
[154.43675232 81.91767883]
[169.16801453 79.09100342]
[183.85963440 76.06510162]
[198.50894165 72.84054565]
[213.15824890 69.61598969]
[227.80755615 66.39143372]
[242.45687866 63.16687775]
[257.10617065 59.94232178]
[271.66281128 56.32225418]
[286.11605835 52.30932617]
[297.34326172 41.16211319]
[311.67657471 45.21248627]
[326.12982178 41.19955826]
[331.64328003 26.81526566]
[344.42013550 18.53243446]
[359.44653320 19.35161400]
[370.97131348 28.74938202]
[385.42456055 24.73645782]
[399.87780762 20.72353172]
[414.33105469 16.71060753]
[428.78430176 12.69768238]
[443.23754883 8.68475723]
[457.69079590 4.67183208]
[466.80645752 -8.52983856]
[482.82073975 -9.49023628]
[493.44885254 2.52737284]
[490.53781128 18.30410767]
[476.32073975 25.73740768]
[461.70373535 19.12508202]
[447.25048828 23.13800621]
[432.79721069 27.15093231]
[418.34396362 31.16385651]
[403.89071655 35.17678070]
[389.43746948 39.18970871]
[374.98422241 43.20263290]
[369.95422363 57.19680786]
[357.50106812 65.64565277]
[342.28286743 65.13560486]
[330.14273071 55.65280914]
[315.68948364 59.66573334]
[305.49606323 70.52591705]
[290.12896729 66.76258087]
[275.67572021 70.77550507]
[272.53454590 74.53353882]
[266.94799805 76.27616882]
[260.33074951 74.59162903]
[245.68142700 77.81618500]
[231.03211975 81.04074097]
[216.38281250 84.26529694]
[201.73350525 87.48985291]
[187.08419800 90.71440887]
[181.14942932 95.28620911]
[171.99468994 93.82225800]
[157.26342773 96.64893341]
[142.53218079 99.47561646]
[139.53120422 115.70175934]
[130.58078003 129.56478882]
[117.02795410 138.97833252]
[100.91242218 142.52561951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 39]
[10 38]
[11 37]
[12 36]
[14 34]
[15 33]
[18 32]
[19 31]
[20 30]
[56 111]
[57 110]
[58 109]
[59 107]
[60 106]
[61 105]
[62 104]
[63 103]
[64 102]
[65 99]
[66 98]
[68 96]
[69 95]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
