%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCGCGACCUCGGCUCGAGAAGGUGCUUUAGUCUGAAGAUGGCGGCCUCAGCAGCGAGAGGUGCUGCGGCGCUGCGUAGAAGUAUCAAUCAGCCGGUUGCUUUUGUGAGAAGAAUUCCUUGGACUGCGGCGUCGAGUC\
) } def
/len { sequence length } bind def

/coor [
[81.75360107 115.81311798]
[67.92737579 121.62992859]
[54.10113907 127.44674683]
[40.27490997 133.26356506]
[26.44867706 139.08036804]
[12.62244415 144.89718628]
[-1.20378757 150.71398926]
[-15.03001976 156.53080750]
[-18.67115021 171.49905396]
[-30.29204750 181.33816528]
[-45.30075455 182.43486023]
[-57.92617035 174.57757568]
[-71.75240326 180.39439392]
[-85.51344299 186.36378479]
[-99.20761108 192.48504639]
[-112.90177917 198.60629272]
[-126.52739716 204.87866211]
[-140.08279419 211.30136108]
[-149.24096680 224.20246887]
[-164.05548096 222.65988159]
[-177.61088562 229.08258057]
[-191.16629028 235.50527954]
[-196.24359131 250.47178650]
[-210.45347595 257.38949585]
[-225.36547852 252.15423584]
[-232.13255310 237.87200928]
[-226.73992920 223.01618958]
[-212.38694763 216.40049744]
[-197.58898926 221.94987488]
[-184.03358459 215.52717590]
[-170.47817993 209.10447693]
[-162.28958130 196.66276550]
[-146.50550842 197.74595642]
[-132.95010376 191.32325745]
[-128.21485901 185.57125854]
[-119.02303314 184.91212463]
[-105.32886505 178.79087830]
[-91.63469696 172.66961670]
[-86.77336884 167.02377319]
[-77.56921387 166.56816101]
[-63.74298096 160.75134277]
[-60.53181839 146.23149109]
[-49.25309372 136.26884460]
[-34.09344101 134.84114075]
[-20.84683228 142.70457458]
[-7.02060032 136.88775635]
[6.80563164 131.07095337]
[20.63186455 125.25413513]
[34.45809555 119.43732452]
[48.28432846 113.62051392]
[62.11056137 107.80370331]
[75.93679047 101.98688507]
[79.60876465 82.72398376]
[97.58061981 70.79372406]
[91.76380920 56.96749115]
[85.94699860 43.14125824]
[80.13018036 29.31502533]
[74.31336975 15.48879433]
[68.49655914 1.66256213]
[54.24365997 -5.70184040]
[51.25629044 -21.46430206]
[61.82610703 -33.53321075]
[77.84484863 -32.65033340]
[87.02430725 -19.49293709]
[82.32279205 -4.15425062]
[88.13960266 9.67198181]
[93.95641327 23.49821281]
[99.77322388 37.32444382]
[105.59004211 51.15067673]
[111.40685272 64.97690582]
[124.42479706 72.42896271]
[139.29283142 70.44364929]
[154.16087341 68.45834351]
[169.02891541 66.47303772]
[183.89695740 64.48772430]
[198.76498413 62.50241852]
[213.63302612 60.51711273]
[228.50106812 58.53180313]
[243.36911011 56.54649734]
[257.49575806 51.50291443]
[270.25927734 43.62303543]
[283.02279663 35.74315643]
[295.78631592 27.86327934]
[308.54983521 19.98340034]
[321.31335449 12.10352135]
[334.07690430 4.22364283]
[346.84042358 -3.65623593]
[359.51599121 -11.67681885]
[372.10208130 -19.83712578]
[372.79110718 -35.33889389]
[382.48654175 -47.45408630]
[397.46032715 -51.52416229]
[411.95471191 -45.98409271]
[420.39633179 -32.96414948]
[419.53918457 -17.47076416]
[409.71286011 -5.46146345]
[394.69580078 -1.55406535]
[380.26239014 -7.25104523]
[367.67630005 0.90926093]
[363.74401855 7.23739052]
[354.72030640 9.10728645]
[341.95675659 16.98716545]
[329.19323730 24.86704445]
[316.42971802 32.74692154]
[303.66619873 40.62680054]
[290.90267944 48.50667953]
[278.13916016 56.38655853]
[265.37564087 64.26643372]
[274.68121338 71.86805725]
[277.13229370 82.60717773]
[290.68771362 89.02987671]
[304.24310303 95.45257568]
[317.79556274 87.89540100]
[333.19766235 89.78085327]
[344.52697754 100.38395691]
[347.42721558 115.62759399]
[340.78311157 129.65026855]
[327.14947510 137.05998230]
[311.76873779 135.00755310]
[300.55508423 124.28218079]
[297.82040405 109.00798035]
[284.26501465 102.58528137]
[270.70959473 96.16258240]
[262.12939453 100.07027435]
[252.45269775 98.61607361]
[244.86445618 91.88619995]
[242.07325745 81.76409912]
[245.35441589 71.41453552]
[230.48637390 73.39984131]
[215.61833191 75.38514709]
[200.75028992 77.37046051]
[185.88226318 79.35576630]
[171.01422119 81.34107208]
[156.14617920 83.32637787]
[141.27815247 85.31169128]
[126.41011047 87.29699707]
[128.54891968 98.92919159]
[125.91443634 110.15107727]
[119.18196869 119.13522339]
[109.67308044 124.51786041]
[99.10220337 125.60399628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[7 46]
[8 45]
[12 41]
[13 40]
[14 38]
[15 37]
[16 36]
[17 34]
[18 33]
[20 31]
[21 30]
[22 29]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[71 136]
[72 135]
[73 134]
[74 133]
[75 132]
[76 131]
[77 130]
[78 129]
[79 128]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 99]
[89 98]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
