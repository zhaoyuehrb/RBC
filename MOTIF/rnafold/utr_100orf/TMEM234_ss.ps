%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGUCUCCGCCCCUUCGUUCCCGGAAGUAGAAGACAGCGGCGUUGCCAUGGCGGCGUCUCUGGGGCAGGUGUUGGCUCUGGUGCUGGUGGCCGCUCUGUGGGGUGGCACGCAGCCGCUGCUGAAGCGGGCCUCCGCCGGCCUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[98.21173096 169.93612671]
[96.64380646 155.01829529]
[89.18489075 155.80226135]
[83.95630646 169.86148071]
[78.72772980 183.92071533]
[73.49914551 197.97994995]
[76.76602936 214.05039978]
[64.30446625 224.71067810]
[48.93384171 218.99438477]
[46.46613693 202.78196716]
[59.43991852 192.75135803]
[64.66850281 178.69213867]
[69.89707947 164.63290405]
[75.12566376 150.57366943]
[63.08339691 141.63029480]
[51.13544846 150.69929504]
[39.18750000 159.76828003]
[27.23955154 168.83726501]
[26.65642548 184.46397400]
[16.12679482 196.02514648]
[0.62242812 198.06196594]
[-12.53598595 189.61270142]
[-17.13544655 174.66682434]
[-11.00423050 160.28134155]
[2.96269202 153.24862671]
[18.17056465 156.88931274]
[30.11851501 147.82032776]
[42.06646347 138.75134277]
[54.01441193 129.68235779]
[49.74982452 115.61753082]
[49.51274490 101.48870087]
[53.01739120 88.38422394]
[59.70069885 77.23397827]
[68.78612518 68.74342346]
[79.36167145 63.35011292]
[90.46482849 61.20526886]
[101.16692352 62.18061447]
[104.59218597 47.57693100]
[108.01744843 32.97324753]
[111.44271088 18.36956406]
[114.86797333 3.76587987]
[118.29323578 -10.83780384]
[121.71849823 -25.44148827]
[125.14376068 -40.04516983]
[108.23834991 -36.69789124]
[91.00228882 -45.82672882]
[82.39878845 -65.83901215]
[70.08155060 -74.39971924]
[57.76431274 -82.96041870]
[41.78372955 -81.54602051]
[30.81891632 -93.25723267]
[33.28113937 -109.11021423]
[47.28158951 -116.94391632]
[62.08032608 -110.74899292]
[66.32501984 -95.27766418]
[78.64225769 -86.71695709]
[90.95949554 -78.15625000]
[97.41506195 -81.97406769]
[89.77964020 -94.88531494]
[102.69100189 -102.52053833]
[110.32618713 -89.60968781]
[116.78175354 -93.42749786]
[115.21382904 -108.34532166]
[113.64589691 -123.26315308]
[112.07797241 -138.18098450]
[110.51004791 -153.09881592]
[108.94211578 -168.01663208]
[107.37419128 -182.93446350]
[93.86918640 -190.57609558]
[87.46569061 -204.71026611]
[90.62597656 -219.90211487]
[102.13485718 -230.31005859]
[117.56692505 -231.93202209]
[130.98825073 -224.14434814]
[137.23803711 -209.94154358]
[133.91313171 -194.78488159]
[122.29202271 -184.50239563]
[123.85994720 -169.58456421]
[125.42787170 -154.66673279]
[126.99580383 -139.74890137]
[128.56373596 -124.83107758]
[130.13165283 -109.91325378]
[131.69958496 -94.99542236]
[142.66865540 -78.46897888]
[141.59013367 -61.71245575]
[154.73472595 -68.93875885]
[167.87933350 -76.16506958]
[181.02392578 -83.39137268]
[194.09213257 -90.75492859]
[207.08251953 -98.25492859]
[220.07289124 -105.75492859]
[225.98899841 -112.80333710]
[233.41479492 -113.27270508]
[246.55940247 -120.49900818]
[259.70401001 -127.72531128]
[272.84860229 -134.95161438]
[285.99319458 -142.17791748]
[299.13778687 -149.40423584]
[307.16555786 -163.70413208]
[323.56454468 -163.63125610]
[331.46487427 -149.26057434]
[322.73941040 -135.37541199]
[306.36410522 -136.25962830]
[293.21951294 -129.03332520]
[280.07489014 -121.80702209]
[266.93029785 -114.58071136]
[253.78570557 -107.35440826]
[240.64109802 -100.12810516]
[227.57289124 -92.76454926]
[214.58251953 -85.26454926]
[201.59213257 -77.76454926]
[197.34390259 -71.65592957]
[188.25022888 -70.24677277]
[175.10563660 -63.02046585]
[161.96102905 -55.79416275]
[148.81643677 -48.56785583]
[139.74745178 -36.61990738]
[136.32218933 -22.01622391]
[132.89692688 -7.41254091]
[129.47166443 7.19114304]
[126.04639435 21.79482651]
[122.62113190 36.39850998]
[119.19586945 51.00219345]
[115.77060699 65.60588074]
[139.27728271 81.37541962]
[147.50956726 112.40043640]
[131.68547058 144.62899780]
[139.72286987 157.29391479]
[147.76026917 169.95883179]
[155.79766846 182.62376404]
[163.83506775 195.28868103]
[171.87248230 207.95359802]
[179.90988159 220.61851501]
[195.38627625 223.82107544]
[203.99525452 237.07479858]
[200.62924194 252.51647949]
[187.28523254 260.98483276]
[171.88000488 257.45574951]
[163.55319214 244.02296448]
[167.24496460 228.65591431]
[159.20755005 215.99099731]
[151.17015076 203.32608032]
[143.13275146 190.66116333]
[135.09535217 177.99624634]
[127.05795288 165.33131409]
[119.02054596 152.66639709]
[111.56163025 153.45036316]
[113.12956238 168.36819458]
[114.69725800 183.28604126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[15 29]
[16 28]
[17 27]
[18 26]
[37 124]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[44 117]
[47 57]
[48 56]
[49 55]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[85 116]
[86 115]
[87 114]
[88 113]
[89 111]
[90 110]
[91 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
[127 146]
[128 145]
[129 144]
[130 143]
[131 142]
[132 141]
[133 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
