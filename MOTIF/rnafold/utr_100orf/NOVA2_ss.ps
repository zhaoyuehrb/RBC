%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGCAGCCGCCGCAGCAGCAGCAGCCGCCGCCCCAGGCCCCCCCCAUGGAGCCCGAGGCCCCGGAUUCCCGCAAGAGGCCCCUCGAAACGCCCCCCGAGGUGGUCUGCACCAAGCGCAGCAACACGGGAGAGGAAGGCGAAUACU\
) } def
/len { sequence length } bind def

/coor [
[89.07326508 189.24101257]
[100.68714142 178.95037842]
[99.10873413 164.03364563]
[97.53031921 149.11692810]
[95.95191193 134.20019531]
[81.79739380 129.23535156]
[71.24684906 139.89772034]
[67.04008484 155.14939880]
[52.58824921 158.75407410]
[42.03770447 169.41642761]
[37.83094025 184.66810608]
[23.37910080 188.27278137]
[12.82855606 198.93515015]
[8.62179279 214.18682861]
[-5.83004522 217.79148865]
[-16.38059044 228.45385742]
[-20.01580429 244.44502258]
[-35.76000977 249.03326416]
[-47.41691971 237.49859619]
[-42.99490356 221.70689392]
[-27.04295349 217.90330505]
[-16.49240875 207.24095154]
[-13.04029083 192.75190735]
[2.16619277 188.38459778]
[12.71673870 177.72222900]
[16.16885567 163.23320007]
[31.37533951 158.86589050]
[41.92588425 148.20352173]
[45.37800217 133.71449280]
[60.58448792 129.34716797]
[71.13503265 118.68481445]
[69.89681244 106.44398499]
[73.13080597 95.86415863]
[59.51031113 89.58067322]
[45.88982010 83.29718781]
[32.38354492 90.70574188]
[17.28118896 88.76350403]
[6.34767294 78.42318726]
[3.63198233 63.80254745]
[-9.98850918 57.51906204]
[-23.60900116 51.23557663]
[-39.38115692 52.48041916]
[-47.69679260 40.12325668]
[-61.31728363 33.83976746]
[-76.05761719 39.54047012]
[-90.47762299 33.07216644]
[-96.02216339 18.27238083]
[-89.40176392 3.92156839]
[-74.54418945 -1.46618998]
[-60.26417160 5.30556726]
[-55.03379822 20.21927643]
[-41.41330338 26.50276375]
[-26.61537743 24.80848312]
[-17.32551575 37.61508560]
[-3.70502353 43.89857101]
[9.91546822 50.18205643]
[22.80070305 42.75852966]
[37.76345062 44.36483002]
[49.04314041 54.59331512]
[52.17330551 69.67668915]
[65.79380035 75.96018219]
[79.41429138 82.24366760]
[99.14035034 72.82795715]
[119.42214203 80.97792053]
[132.61820984 73.84603119]
[135.14637756 63.17935944]
[142.99327087 55.84373093]
[153.37106323 54.11175156]
[162.77236938 58.32172775]
[176.25737000 51.75247955]
[189.74235535 45.18322754]
[203.22734070 38.61397934]
[216.71234131 32.04473114]
[230.19732666 25.47547913]
[229.15098572 4.53086185]
[238.84825134 -14.59226227]
[257.14907837 -26.64271927]
[279.48703003 -28.05537605]
[300.00558472 -17.99262619]
[310.99621582 -28.20073509]
[321.98687744 -38.40884399]
[332.97753906 -48.61695480]
[343.96820068 -58.82506561]
[354.85061646 -69.14846802]
[365.62362671 -79.58602905]
[376.39660645 -90.02358246]
[387.16961670 -100.46114349]
[397.94259644 -110.89869690]
[394.12475586 -125.77550507]
[398.27224731 -140.56381226]
[409.26943970 -151.28561401]
[424.15814209 -155.05682373]
[438.93338013 -150.86299133]
[449.62066650 -139.83224487]
[453.34518433 -124.93179321]
[449.10504150 -110.16977692]
[438.04086304 -99.51712036]
[423.12881470 -95.83932495]
[408.38015747 -100.12570190]
[397.60714722 -89.68814850]
[386.83416748 -79.25058746]
[376.06115723 -68.81303406]
[365.28817749 -58.37547684]
[362.65496826 -51.41514587]
[354.17630005 -47.83441162]
[343.18563843 -37.62630081]
[332.19497681 -27.41819000]
[321.20434570 -17.21008110]
[310.21368408 -7.00197077]
[315.02902222 7.20409775]
[329.96157837 8.62516785]
[343.19546509 -0.44363588]
[358.49420166 4.38634109]
[364.12185669 19.40995407]
[355.76141357 33.10237503]
[339.82626343 34.95994568]
[328.54049683 23.55770111]
[313.60797119 22.13663101]
[310.28048706 32.05249786]
[304.79858398 40.83407593]
[297.50393677 48.02777100]
[288.83001709 53.27577972]
[279.27664185 56.33374023]
[269.38110352 57.08176804]
[259.68811035 55.52846527]
[250.71971130 51.80776215]
[242.94725037 46.16892624]
[236.76657104 38.96046829]
[223.28158569 45.52972031]
[209.79660034 52.09896851]
[196.31159973 58.66821671]
[182.82661438 65.23746490]
[169.34162903 71.80671692]
[159.80490112 88.58202362]
[139.75009155 87.04209900]
[126.55403137 94.17398834]
[128.49436951 107.96005249]
[123.16622925 122.05373383]
[110.86863708 132.62179565]
[112.44704437 147.53851318]
[114.02545929 162.45523071]
[115.60386658 177.37196350]
[129.11424255 185.00408936]
[135.52766418 199.13375854]
[132.37806702 214.32781982]
[120.87649536 224.74385071]
[105.44557190 226.37667847]
[92.01878357 218.59843445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 142]
[3 141]
[4 140]
[5 139]
[6 31]
[7 30]
[9 28]
[10 27]
[12 25]
[13 24]
[15 22]
[16 21]
[33 62]
[34 61]
[35 60]
[39 56]
[40 55]
[41 54]
[43 52]
[44 51]
[64 136]
[65 135]
[69 133]
[70 132]
[71 131]
[72 130]
[73 129]
[74 128]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
