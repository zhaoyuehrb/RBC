%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGCGACAGCAGCUGCCAGUGCGUCAUCAGAGAGCGCCGGAAGCGGUCCGAGAAUGAAGAGUGUGAUCUACCAUGCAUUGUCUCAGAAAGAGGCGAAUGACUCCGAUGUCCAGCCUUCAGGAGCACAGCGGGCCGAGGCCUUCGUGAGGGCCU\
) } def
/len { sequence length } bind def

/coor [
[100.04058075 121.17215729]
[94.75390625 135.20964050]
[94.65142822 144.40081787]
[89.21846008 149.47335815]
[83.65196228 163.40225220]
[78.08547211 177.33114624]
[72.51898193 191.26004028]
[75.39691925 207.40469360]
[62.68161392 217.76098633]
[47.45347595 211.67527771]
[45.37791443 195.40800476]
[58.59008408 185.69355774]
[64.15657806 171.76464844]
[69.72306824 157.83575439]
[75.28955841 143.90686035]
[80.71641541 129.92297363]
[86.00308990 115.88548279]
[84.80600739 114.74465179]
[83.70161438 113.51387024]
[69.51179504 118.37689209]
[58.96543884 130.17031860]
[44.41714859 126.97711945]
[30.22732735 131.84014893]
[16.03750610 136.70317078]
[1.84768403 141.56617737]
[-5.30417252 147.34017944]
[-12.67497635 146.38145447]
[-26.95926094 150.95957947]
[-33.96678543 165.12539673]
[-48.96514511 170.10783386]
[-63.05607224 162.95094299]
[-67.87967682 147.90074158]
[-60.57419205 133.88626099]
[-45.47383881 129.22206116]
[-31.53738594 136.67529297]
[-17.25310135 132.09716797]
[-3.01533651 127.37636566]
[11.17448521 122.51334381]
[25.36430550 117.65032196]
[39.55412674 112.78730011]
[49.08553314 101.34170532]
[64.64877319 104.18706512]
[78.83859253 99.32404327]
[82.73403931 85.94094086]
[94.53881836 77.28772736]
[109.86997223 77.62704468]
[122.37201691 87.66532898]
[130.34341431 74.95876312]
[138.31481934 62.25220108]
[146.28622437 49.54563904]
[154.25762939 36.83907700]
[162.22903442 24.13251305]
[170.20043945 11.42594910]
[159.99275208 -5.57257557]
[159.74372864 -25.32100487]
[169.44271851 -42.43592453]
[186.37789917 -52.29137802]
[205.89411926 -52.26914978]
[212.55647278 -65.70838165]
[219.21884155 -79.14761353]
[225.88119507 -92.58685303]
[232.54354858 -106.02608490]
[227.72744751 -120.83969116]
[234.67547607 -134.37406921]
[248.82765198 -138.87420654]
[255.49002075 -152.31343079]
[256.51000977 -161.44841003]
[262.42248535 -165.95291138]
[269.35241699 -179.25614929]
[276.28234863 -192.55938721]
[265.72375488 -203.37483215]
[259.03414917 -216.90596008]
[256.85733032 -231.82205200]
[259.39407349 -246.66050720]
[266.38351440 -259.97027588]
[277.13003540 -270.45376587]
[290.57241821 -277.09326172]
[305.38861084 -279.24984741]
[320.12579346 -276.72473145]
[327.05572510 -290.02798462]
[333.98565674 -303.33120728]
[340.91555786 -316.63446045]
[347.71206665 -330.00634766]
[354.37442017 -343.44558716]
[361.03677368 -356.88482666]
[367.69912720 -370.32406616]
[374.36148071 -383.76330566]
[370.61944580 -399.36383057]
[380.59652710 -411.92715454]
[396.63922119 -411.81573486]
[406.44088745 -399.11508179]
[402.48254395 -383.56802368]
[387.80072021 -377.10092163]
[381.13836670 -363.66171265]
[374.47601318 -350.22247314]
[367.81365967 -336.78323364]
[361.15127563 -323.34399414]
[360.99719238 -315.91271973]
[354.21881104 -309.70452881]
[347.28887939 -296.40127563]
[340.35894775 -283.09805298]
[333.42901611 -269.79479980]
[343.94445801 -259.16531372]
[350.66867065 -245.78788757]
[352.93191528 -230.96702576]
[350.50006104 -216.15226746]
[343.59890747 -202.79650879]
[332.89306641 -192.21348572]
[319.42218018 -185.44859314]
[304.49987793 -183.17556763]
[289.58557129 -185.62945557]
[282.65567017 -172.32621765]
[275.72573853 -159.02297974]
[268.92926025 -145.65107727]
[262.26687622 -132.21183777]
[267.25372314 -118.22374725]
[260.68859863 -104.49954224]
[245.98278809 -99.36372375]
[239.32041931 -85.92449188]
[232.65806580 -72.48526001]
[225.99571228 -59.04602432]
[219.33335876 -45.60679245]
[226.71800232 -38.03831100]
[231.69517517 -28.68469238]
[233.85536194 -18.29026222]
[233.01379395 -7.68594646]
[229.22612000 2.27715325]
[222.78495789 10.79607201]
[214.19721985 17.18069077]
[204.14434814 20.90964317]
[193.42817688 21.67286301]
[182.90699768 19.39735222]
[174.93559265 32.10391617]
[166.96418762 44.81047821]
[158.99278259 57.51704025]
[151.02139282 70.22360229]
[143.04998779 82.93016815]
[135.07858276 95.63672638]
[133.72972107 110.57595825]
[139.29621887 124.50485229]
[144.86270142 138.43374634]
[150.42919922 152.36265564]
[155.99568176 166.29154968]
[161.56217957 180.22044373]
[167.12867737 194.14933777]
[180.34083557 203.86380005]
[178.26527405 220.13105774]
[163.03713989 226.21678162]
[150.32183838 215.86047363]
[153.19976807 199.71583557]
[147.63328552 185.78694153]
[142.06678772 171.85803223]
[136.50030518 157.92913818]
[130.93380737 144.00024414]
[125.36731720 130.07135010]
[119.80082703 116.14244843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[4 15]
[5 14]
[6 13]
[7 12]
[19 43]
[20 42]
[22 40]
[23 39]
[24 38]
[25 37]
[27 36]
[28 35]
[47 138]
[48 137]
[49 136]
[50 135]
[51 134]
[52 133]
[53 132]
[58 122]
[59 121]
[60 120]
[61 119]
[62 118]
[65 115]
[66 114]
[68 113]
[69 112]
[70 111]
[79 102]
[80 101]
[81 100]
[82 99]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[139 156]
[140 155]
[141 154]
[142 153]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
