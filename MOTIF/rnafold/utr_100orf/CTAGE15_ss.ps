%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAGCCUCGACGCUAUGGAGGAGCCCGGUGCUACCCCUCAGCCCUACCUGGGGCUGGUCCUGGAGGAGCUACGCAGAGUUGUGGCAGCACUACCUGAGAGUAUGAGACCAGAUG\
) } def
/len { sequence length } bind def

/coor [
[81.94710541 117.96202087]
[91.54547119 106.43479919]
[76.67817688 104.44391632]
[61.97315979 110.28112793]
[50.38542557 100.92304230]
[35.51813507 98.93215942]
[20.65084267 96.94127655]
[5.78354979 94.95039368]
[-9.08374310 92.95951080]
[-23.95103455 90.96862793]
[-38.81832886 88.97774506]
[-53.68561935 86.98686218]
[-69.30398560 100.87503052]
[-89.83473969 99.02944946]
[-102.37220764 83.02951813]
[-117.36689758 82.63021088]
[-132.36157227 82.23090363]
[-143.78077698 92.82522583]
[-158.98182678 92.20666504]
[-169.01152039 81.25491333]
[-184.00621033 80.85560608]
[-192.79710388 83.78426361]
[-199.39328003 80.24079132]
[-214.37200928 79.44245911]
[-229.36006165 78.84358978]
[-244.35473633 78.44427490]
[-259.34942627 78.04496765]
[-271.93399048 87.99525452]
[-287.52651978 84.21995544]
[-294.16574097 69.61515808]
[-286.75860596 55.38440704]
[-270.98727417 52.44432449]
[-258.95010376 63.05028534]
[-243.95542908 63.44959259]
[-228.96075439 63.84890366]
[-222.10289001 60.84300995]
[-213.57368469 64.46372223]
[-198.59494019 65.26205444]
[-183.60690308 65.86092377]
[-168.61221313 66.26023102]
[-158.01385498 55.85780716]
[-142.80143738 56.04915619]
[-131.96226501 67.23622131]
[-116.96759033 67.63552856]
[-101.97290039 68.03483582]
[-97.34763336 59.57723236]
[-89.86798096 53.40392303]
[-80.57536316 50.43072510]
[-70.78471375 51.12393188]
[-61.89845657 55.42777252]
[-55.20557785 62.76618195]
[-51.69473648 72.11957550]
[-36.82744598 74.11045837]
[-21.96015167 76.10134125]
[-7.09285975 78.09222412]
[7.77443266 80.08310699]
[22.64172554 82.07398987]
[37.50901794 84.06487274]
[52.37630844 86.05575562]
[66.01792145 80.07614136]
[78.66905975 89.57662201]
[93.53635406 91.56750488]
[108.50314331 92.56515503]
[123.50314331 92.56515503]
[138.50314331 92.56515503]
[153.50314331 92.56515503]
[161.83724976 77.21863556]
[176.67996216 68.18558502]
[193.96363831 67.83779144]
[209.00355530 76.18091583]
[217.76766968 90.87694550]
[232.74641418 90.07861328]
[247.72514343 89.28028107]
[255.57228088 78.23915100]
[268.17590332 73.83705902]
[280.81527710 77.48346710]
[288.89361572 87.61704254]
[303.88827515 87.21773529]
[318.88296509 86.81842804]
[327.50555420 83.42605591]
[334.28094482 86.61344147]
[349.28094482 86.61344147]
[363.08111572 78.87614441]
[375.80838013 86.61344147]
[390.80838013 86.61344147]
[405.80838013 86.61344147]
[419.73220825 77.94973755]
[434.06762695 85.91387177]
[434.06762695 102.31301880]
[419.73220825 110.27714539]
[405.80838013 101.61344147]
[390.80838013 101.61344147]
[375.80838013 101.61344147]
[363.08111572 109.35074615]
[349.28094482 101.61344147]
[334.28094482 101.61344147]
[319.28228760 101.81311798]
[304.28759766 102.21242523]
[289.29290771 102.61173248]
[278.32061768 115.28050232]
[261.24816895 116.17333984]
[248.52348328 104.25901794]
[233.54473877 105.05735016]
[218.56599426 105.85568237]
[214.01979065 117.79244995]
[205.23194885 127.12690735]
[193.50515747 132.42301941]
[180.59782410 132.84725952]
[168.46047974 128.29963684]
[158.94096375 119.43418121]
[153.50314331 107.56515503]
[138.50314331 107.56515503]
[123.50314331 107.56515503]
[108.50314331 107.56515503]
[116.48660278 120.26414490]
[111.79374695 134.51115417]
[97.82606506 139.97958374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[15 45]
[16 44]
[17 43]
[20 40]
[21 39]
[23 38]
[24 37]
[25 35]
[26 34]
[27 33]
[63 114]
[64 113]
[65 112]
[66 111]
[71 104]
[72 103]
[73 102]
[77 99]
[78 98]
[79 97]
[81 96]
[82 95]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
