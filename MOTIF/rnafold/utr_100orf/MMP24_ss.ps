%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUGCCGAGGAGCCGGGGCGGCCGCGCCGCGCCGGGGCCGCCGCCGCCGCCGCCGCCGCCGGGCCAGGCCCCGCGCUGGAGCCGCUGGCGGGUCCCUGGGC\
) } def
/len { sequence length } bind def

/coor [
[93.01158905 272.31362915]
[80.33169556 281.74740601]
[64.70733643 279.36941528]
[55.40815353 266.59048462]
[57.95119476 250.99214172]
[70.82772064 241.82858276]
[73.08468628 226.99935913]
[75.34165192 212.17012024]
[69.60744476 198.42355347]
[79.33309174 185.94468689]
[81.59005737 171.11544800]
[83.84702301 156.28622437]
[78.11281586 142.53965759]
[87.83846283 130.06077576]
[90.09543610 115.23155212]
[83.12458801 101.94970703]
[69.63826752 95.38319397]
[56.15194321 88.81668091]
[42.56798172 82.45459747]
[28.88948441 76.29840851]
[15.21098709 70.14221191]
[1.53248990 63.98602295]
[-12.14600754 57.82983017]
[-25.82450485 51.67363739]
[-41.58436584 53.06551361]
[-50.01487732 40.78643417]
[-63.69337463 34.63024521]
[-79.45323944 36.02211761]
[-87.88375092 23.74304008]
[-101.56224823 17.58684921]
[-115.24074554 11.43065643]
[-132.16593933 10.44373035]
[-135.90293884 -6.09323311]
[-121.04676056 -14.26208019]
[-109.08454895 -2.24784112]
[-95.40605164 3.90835094]
[-81.72755432 10.06454277]
[-66.94606781 8.23233509]
[-57.53718185 20.95174599]
[-43.85868454 27.10793877]
[-29.07720184 25.27573013]
[-19.66831398 37.99514008]
[-5.98981571 44.15133286]
[7.68868208 50.30752563]
[21.36717987 56.46371841]
[35.04567719 62.61990738]
[48.72417450 68.77610016]
[56.24061203 68.64887238]
[62.71845627 75.33035278]
[76.20478058 81.89687347]
[89.69110107 88.46338654]
[95.40388489 85.59810638]
[101.64162445 85.32803345]
[107.30644989 87.58023834]
[111.45021057 91.84823608]
[126.01433563 88.25850677]
[140.57846069 84.66876984]
[155.14259338 81.07903290]
[169.70671082 77.48929596]
[184.27084351 73.89956665]
[195.81835938 63.08449936]
[210.02745056 67.55113220]
[224.59158325 63.96139526]
[239.15570068 60.37166214]
[252.03079224 47.31607819]
[268.67413330 52.64986420]
[283.12319946 48.62188339]
[297.57226562 44.59390640]
[312.02133179 40.56592941]
[326.40789795 36.32018280]
[340.72872925 31.85763741]
[354.05184937 21.37287903]
[367.81509399 31.27288246]
[362.11203003 47.23882675]
[345.19125366 46.17844772]
[330.87045288 50.64099503]
[325.32867432 55.72054672]
[316.04931641 55.01499176]
[301.60025024 59.04296875]
[287.15118408 63.07094574]
[272.70211792 67.09892273]
[266.40933228 77.55213165]
[254.27421570 80.95892334]
[242.74543762 74.93579102]
[228.18130493 78.52552032]
[213.61718750 82.11525726]
[203.11140442 92.67356110]
[187.86058044 88.46369171]
[173.29644775 92.05342865]
[158.73233032 95.64315796]
[144.16819763 99.23289490]
[129.60406494 102.82263184]
[115.03993988 106.41236877]
[104.92466736 117.48851776]
[102.66769409 132.31774902]
[108.24047852 147.12500000]
[98.67625427 158.54318237]
[96.41928864 173.37242126]
[94.16232300 188.20164490]
[99.73509979 203.00889587]
[90.17088318 214.42709351]
[87.91391754 229.25631714]
[85.65695190 244.08555603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 103]
[7 102]
[8 101]
[10 99]
[11 98]
[12 97]
[14 95]
[15 94]
[16 51]
[17 50]
[18 49]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[26 40]
[27 39]
[29 37]
[30 36]
[31 35]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[62 86]
[63 85]
[64 84]
[66 81]
[67 80]
[68 79]
[69 78]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
