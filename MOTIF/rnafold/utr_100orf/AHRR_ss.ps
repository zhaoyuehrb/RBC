%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACGUGGACUCCCUUUAAUCCAGUGACUGUCAGGUCGAUCAUAUGCCGAGGACGAUGAUCCCGCCGGGGGAGUGCACGUACGCGGGCCGGAAGCGGAGGAGGCCCCUGCAGAAACAGAGGCCCGCCGUGGGGGCAGAGAAGU\
) } def
/len { sequence length } bind def

/coor [
[353.78601074 186.62525940]
[353.19235229 179.09385681]
[338.92651367 174.45858765]
[324.56359863 170.13348389]
[310.11035156 166.12055969]
[295.65707397 162.10763550]
[281.20382690 158.09471130]
[266.75057983 154.08178711]
[252.41728210 158.13215637]
[241.19006348 146.98493958]
[226.73681641 142.97201538]
[212.28356934 138.95909119]
[197.83032227 134.94616699]
[183.37707520 130.93324280]
[168.92381287 126.92031860]
[154.47056580 122.90739441]
[140.01731873 118.89447021]
[134.53819275 128.44345093]
[126.79652405 136.43998718]
[117.22448730 142.35244751]
[106.37790680 145.76789856]
[94.90404510 146.42041016]
[83.50300598 144.21080017]
[72.88500214 139.21636963]
[63.72615814 131.68966675]
[56.62550735 122.04627228]
[52.06598663 110.84212494]
[37.26358795 113.26885986]
[22.46119118 115.69558716]
[7.65879250 118.12231445]
[-4.67995453 128.92451477]
[-20.11499405 123.38451385]
[-22.76808167 107.20140076]
[-9.90994644 97.02296448]
[5.23206234 103.31991577]
[20.03446007 100.89318848]
[34.83685684 98.46646118]
[49.63925552 96.03972626]
[53.02231598 81.42620850]
[40.79226303 72.74140930]
[28.56221008 64.05661011]
[16.33215523 55.37180710]
[4.10210228 46.68700409]
[-8.12795162 38.00220108]
[-17.00784874 35.55743408]
[-20.52612495 28.99440193]
[-32.56515884 20.04668045]
[-47.73544312 23.84094238]
[-61.77275848 16.94980049]
[-68.04911041 2.62704229]
[-63.60099792 -12.36456585]
[-50.52868271 -20.94644356]
[-35.00451279 -19.06649017]
[-24.35853004 -7.61236382]
[-23.61743736 8.00764847]
[-11.57840443 16.95536995]
[0.55685014 25.77214813]
[12.78690434 34.45695114]
[25.01695824 43.14175034]
[37.24701309 51.82655334]
[49.47706604 60.51135635]
[61.70711899 69.19615936]
[78.28839111 56.82170105]
[98.17273712 52.52066040]
[117.71051025 56.78934097]
[133.43594360 68.57730103]
[142.68183899 85.52713776]
[144.03024292 104.44122314]
[158.48348999 108.45414734]
[172.93673706 112.46707153]
[187.38999939 116.47999573]
[201.84324646 120.49291992]
[216.29649353 124.50584412]
[230.74974060 128.51876831]
[245.20298767 132.53169250]
[260.57009888 128.76835632]
[270.76351929 139.62854004]
[285.21676636 143.64146423]
[299.67001343 147.65438843]
[314.12326050 151.66731262]
[328.57650757 155.68023682]
[335.18038940 154.37556458]
[340.60736084 156.35472107]
[343.56176758 160.19274902]
[357.82760620 164.82800293]
[377.52493286 151.88188171]
[400.19705200 157.32810974]
[411.61340332 177.36761475]
[426.46490479 179.47308350]
[441.31640625 181.57855225]
[450.17233276 170.96166992]
[463.02270508 166.16320801]
[476.45565796 168.34254456]
[486.96099854 176.82131958]
[491.84768677 189.28948975]
[506.65008545 191.71623230]
[521.45245361 194.14295959]
[536.25488281 196.56968689]
[544.44262695 187.82890320]
[555.72882080 184.19647217]
[567.24169922 186.47398376]
[576.11096191 193.97462463]
[580.18328857 204.72442627]
[594.86663818 207.79010010]
[609.55004883 210.85577393]
[624.23339844 213.92144775]
[639.32360840 209.16790771]
[650.20092773 219.34307861]
[664.88427734 222.40875244]
[679.56768799 225.47442627]
[692.65216064 216.61036682]
[708.15612793 219.67666626]
[716.88140869 232.85415649]
[713.65130615 248.32484436]
[700.38232422 256.91024780]
[684.94665527 253.51681519]
[676.50201416 240.15780640]
[661.81860352 237.09213257]
[647.13525391 234.02645874]
[633.09527588 238.99925232]
[621.16772461 228.60482788]
[606.48437500 225.53915405]
[591.80096436 222.47348022]
[577.11761475 219.40780640]
[562.50531006 230.34515381]
[544.21301270 227.14779663]
[533.82812500 211.37208557]
[519.02575684 208.94535828]
[504.22335815 206.51863098]
[489.42095947 204.09188843]
[478.16122437 215.99072266]
[461.86947632 218.88893127]
[446.90005493 211.45593262]
[439.21090698 196.43005371]
[424.35940552 194.32458496]
[409.50793457 192.21910095]
[405.86987305 198.58689880]
[400.73101807 203.85003662]
[394.41412354 207.66201782]
[387.32003784 209.76794434]
[379.90222168 210.02160645]
[372.63769531 208.39556885]
[365.99652100 204.98364258]
[360.41119385 199.99552917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 81]
[5 80]
[6 79]
[7 78]
[8 77]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[27 38]
[28 37]
[29 36]
[30 35]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[46 56]
[47 55]
[88 136]
[89 135]
[90 134]
[95 130]
[96 129]
[97 128]
[98 127]
[103 124]
[104 123]
[105 122]
[106 121]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
