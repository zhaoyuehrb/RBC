%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUGGAAUGAAUCACUCUGUGGUAUCAGAAUUUGUAUUCAUGGGACUCACCAACUCACGGGAGAUUCAGCUUCUACUUUUUGUUUUCUCUUUGUUGU\
) } def
/len { sequence length } bind def

/coor [
[223.14163208 414.36450195]
[223.06753540 399.30831909]
[226.12577820 384.56585693]
[232.18270874 370.78152466]
[240.97351074 358.55798340]
[252.11389160 348.42953491]
[244.54666138 335.47821045]
[236.97941589 322.52688599]
[229.41217041 309.57556152]
[221.84492493 296.62423706]
[213.87855530 283.91448975]
[205.52076721 271.45867920]
[197.16299438 259.00286865]
[188.80520630 246.54704285]
[180.44741821 234.09121704]
[172.08964539 221.63540649]
[160.18435669 218.93681335]
[153.14378357 208.47476196]
[155.25704956 195.63377380]
[147.29067993 182.92405701]
[139.32432556 170.21432495]
[131.35795593 157.50460815]
[123.39158630 144.79489136]
[115.42521667 132.08517456]
[107.26215363 119.50087738]
[98.90437317 107.04505920]
[94.29971313 113.78433990]
[86.62533569 118.34541321]
[76.73910522 119.71211243]
[65.79032898 117.16981506]
[55.12171555 110.38158417]
[43.64772797 100.71992493]
[32.17374039 91.05827332]
[20.69975090 81.39661407]
[4.46860027 79.05529785]
[-1.36726177 63.72967148]
[9.19559956 51.18543243]
[25.29101944 54.32701111]
[30.36140823 69.92263031]
[41.83539581 79.58428192]
[53.30938339 89.24594116]
[64.78337097 98.90759277]
[78.18068695 92.15986633]
[91.57682037 85.41274261]
[90.64427948 70.44175720]
[89.71173096 55.47077560]
[77.69889069 45.20105362]
[76.54962921 29.43860817]
[86.94578552 17.53501511]
[102.71950531 16.55246735]
[114.51251221 27.07389450]
[115.32823944 42.85711670]
[104.68271637 54.53823090]
[105.61526489 69.50921631]
[106.54780579 84.48020172]
[111.36019135 98.68727112]
[119.71797943 111.14309692]
[127.23390198 116.64794922]
[128.13493347 124.11880493]
[136.10130310 136.82852173]
[144.06767273 149.53823853]
[152.03404236 162.24797058]
[160.00041199 174.95768738]
[167.96678162 187.66740417]
[184.39297485 195.80540466]
[184.54545593 213.27761841]
[192.90324402 225.73344421]
[201.26103210 238.18925476]
[209.61880493 250.64508057]
[217.97659302 263.10089111]
[226.33438110 275.55673218]
[232.34397888 278.94845581]
[235.17767334 284.13302612]
[234.79624939 289.05697632]
[242.36349487 302.00830078]
[249.93074036 314.95962524]
[257.49798584 327.91094971]
[265.06521606 340.86227417]
[279.35861206 336.13018799]
[294.32354736 334.47366333]
[309.30584717 335.96511841]
[323.65054321 340.53936768]
[336.73052979 347.99639893]
[347.97402954 358.01028442]
[356.88949585 370.14321899]
[363.08721924 383.86480713]
[366.29623413 398.57519531]
[366.37625122 413.63134766]
[363.32379150 428.37503052]
[357.27230835 442.16171265]
[348.48629761 454.38873291]
[337.34991455 464.52157593]
[324.34991455 472.11724854]
[310.05468750 476.84368896]
[295.08908081 478.49432373]
[280.10736084 476.99697876]
[265.76446533 472.41711426]
[252.68742371 464.95492554]
[241.44787598 454.93661499]
[232.53717041 442.80020142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 57]
[26 56]
[31 42]
[32 41]
[33 40]
[34 39]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
