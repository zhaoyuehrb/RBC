%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUGAGCAGGGGAGGGAGACGGAGGAGGAGGAGGGGGGAGGUGGUGCUUCCGACACAGCGCCCAUGCUGCCCCGGGGACCUCCCGACCACCAGGCCU\
) } def
/len { sequence length } bind def

/coor [
[74.53576660 332.44732666]
[61.40409088 340.30972290]
[46.12207413 341.15737915]
[32.20140839 334.79550171]
[22.84096909 322.68594360]
[20.19171143 307.61148071]
[24.86241531 293.03604126]
[35.77978897 282.30899048]
[50.43510056 277.89532471]
[53.21831512 263.15579224]
[44.63733673 251.03547668]
[47.24994278 236.04785156]
[60.02104187 227.12950134]
[62.80425644 212.38998413]
[56.21403885 202.11442566]
[58.53707504 189.71974182]
[69.05203247 182.05210876]
[72.29229736 167.40626526]
[66.17267609 160.55380249]
[63.96144867 151.49308777]
[66.30537415 142.32186890]
[72.78066254 135.22724915]
[81.96284485 131.96420288]
[86.55370331 117.68400574]
[91.14456177 103.40380859]
[89.80318451 98.13324738]
[91.61339569 92.50828552]
[96.49034119 88.39438629]
[101.96012115 74.42722321]
[107.42989349 60.46006393]
[112.89966583 46.49290085]
[102.59655762 35.28543472]
[98.19912720 20.77510452]
[100.52832794 5.85548639]
[109.06925201 -6.52246428]
[122.08376312 -13.93406868]
[136.96400452 -14.95581818]
[142.43377686 -28.92297935]
[147.90354919 -42.89014053]
[153.37332153 -56.85729980]
[151.20103455 -72.52867126]
[163.04660034 -81.55817413]
[168.51637268 -95.52533722]
[160.22851562 -112.40478516]
[166.62763977 -129.75202942]
[183.31425476 -136.95629883]
[187.90510559 -151.23649597]
[192.49597168 -165.51669312]
[197.08682251 -179.79689026]
[201.67768860 -194.07708740]
[206.26853943 -208.35728455]
[197.00047302 -220.80245972]
[196.85121155 -236.31881714]
[205.87814331 -248.94000244]
[220.61024475 -253.81289673]
[235.38269043 -249.06378174]
[244.51521301 -236.51878357]
[244.49613953 -221.00172424]
[235.33282471 -208.47921753]
[220.54873657 -203.76641846]
[215.95788574 -189.48622131]
[211.36701965 -175.20602417]
[206.77616882 -160.92582703]
[202.18530273 -146.64564514]
[197.59445190 -132.36544800]
[204.99101257 -123.40998840]
[207.08715820 -111.86263275]
[203.23138428 -100.65000153]
[194.29614258 -92.67279816]
[182.48353577 -90.05555725]
[177.01376343 -76.08840179]
[179.57728577 -61.41605759]
[167.34048462 -51.38752747]
[161.87071228 -37.42036819]
[156.40093994 -23.45320511]
[150.93116760 -9.48604488]
[161.16027832 1.36894381]
[165.68057251 15.64747143]
[163.54441833 30.53363419]
[155.12248230 43.06723404]
[142.04074097 50.73243332]
[126.86682129 51.96267319]
[121.39704895 65.92983246]
[115.92727661 79.89699554]
[110.45750427 93.86415863]
[105.42475891 107.99467468]
[100.83390045 122.27486420]
[96.24303436 136.55506897]
[102.27864838 156.99064636]
[86.93814087 170.64654541]
[83.69787598 185.29237366]
[89.69340515 202.61579895]
[77.54378510 215.17318726]
[74.76056671 229.91271973]
[83.40021515 242.87397766]
[80.36766815 257.78231812]
[67.95784760 265.93902588]
[65.17462921 280.67855835]
[77.21138000 290.13238525]
[83.46539307 304.10186768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 98]
[10 97]
[13 94]
[14 93]
[17 91]
[18 90]
[23 88]
[24 87]
[25 86]
[28 85]
[29 84]
[30 83]
[31 82]
[37 76]
[38 75]
[39 74]
[40 73]
[42 71]
[43 70]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
