%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGUGACUUUCCUCCCUGGACAAAGGCAUCAUGAGUUGUCAGAUCUCUUGCAAAUCUCGAGGAAGAGGAGGAGGUGGAGGAGGAUUCCGGGGCUUCAGCAGCGGCUCAGCUGUGGUGUCUGGUGGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[266.62493896 254.90930176]
[264.15502930 251.60203552]
[262.78955078 247.25396729]
[251.34927368 237.55241394]
[239.90899658 227.85086060]
[228.46871948 218.14932251]
[221.26538086 216.20428467]
[216.87742615 208.08375549]
[205.66772461 198.11668396]
[188.34692383 195.55616760]
[182.59471130 178.10914612]
[171.15443420 168.40760803]
[159.71415710 158.70605469]
[148.27388000 149.00450134]
[136.83360291 139.30296326]
[125.39332581 129.60140991]
[113.95304871 119.89985657]
[102.51277161 110.19831085]
[107.90139008 124.19698334]
[113.28674316 138.19691467]
[111.19951630 153.05097961]
[102.16447449 165.02462769]
[88.45318604 171.10743713]
[73.51291656 169.77009583]
[61.09992599 161.34884644]
[54.33504868 147.96092224]
[54.91830826 132.97494507]
[68.69761658 127.04783630]
[53.76352692 125.64321136]
[38.82943726 124.23859406]
[23.89534760 122.83396912]
[13.74062252 134.56687927]
[-1.37876272 138.05740356]
[-15.64909649 131.96337891]
[-23.58314323 118.62806702]
[-22.13010216 103.17917633]
[-11.84869480 91.55711365]
[3.30766678 88.23080444]
[17.51105309 94.47928619]
[25.29997063 107.89987946]
[40.23405838 109.30450439]
[55.16814804 110.70912170]
[70.10224152 112.11374664]
[75.01972961 106.45085907]
[84.85472107 95.12509155]
[89.77220917 89.46220398]
[86.28762817 74.87256622]
[82.80305481 60.28292084]
[79.31847382 45.69327545]
[75.83389282 31.10363388]
[72.34931183 16.51399040]
[68.86473083 1.92434633]
[58.51141739 12.77832699]
[43.55091858 11.69044781]
[34.87674713 -0.54714888]
[38.80501938 -15.02363586]
[52.47535324 -21.19793320]
[65.93335724 -14.57461548]
[64.17902374 -29.47167397]
[62.42469406 -44.36873245]
[60.67036438 -59.26578903]
[48.11100769 -68.85943604]
[46.09676743 -84.53484344]
[55.82266235 -96.99206543]
[71.51848602 -98.84046173]
[83.87219238 -88.98340607]
[85.55454254 -73.26891327]
[75.56742096 -61.02011871]
[77.32175446 -46.12306213]
[79.07608032 -31.22600365]
[80.83041382 -16.32894516]
[83.45437622 -1.56023407]
[86.93895721 13.02940941]
[90.42353058 27.61905289]
[93.90811157 42.20869827]
[97.39269257 56.79833984]
[100.87727356 71.38798523]
[104.36185455 85.97763062]
[112.21431732 98.75803375]
[123.65460205 108.45957947]
[135.09487915 118.16113281]
[146.53515625 127.86267853]
[157.97543335 137.56422424]
[169.41571045 147.26577759]
[180.85598755 156.96733093]
[192.29626465 166.66886902]
[205.25274658 166.40275574]
[214.59204102 174.79673767]
[215.63479614 186.90698242]
[226.84449768 196.87405396]
[238.17027283 206.70904541]
[249.61054993 216.41058350]
[261.05081177 226.11213684]
[272.49108887 235.81369019]
[284.37353516 244.96833801]
[296.67202759 253.55596924]
[308.97048950 262.14361572]
[321.26898193 270.73123169]
[333.66726685 279.17413330]
[346.16366577 287.47109985]
[361.94024658 288.65850830]
[368.26354980 302.14425659]
[380.75994873 310.44122314]
[393.25634766 318.73818970]
[408.55743408 315.82006836]
[421.11236572 324.41238403]
[423.80004883 339.01760864]
[436.29644775 347.31457520]
[445.26754761 349.48632812]
[448.98541260 355.95538330]
[461.28390503 364.54302979]
[477.66003418 365.41116333]
[484.85412598 380.14810181]
[475.46545410 393.59375000]
[459.15231323 391.91635132]
[452.69625854 376.84149170]
[440.39779663 368.25387573]
[427.99948120 359.81097412]
[415.50308228 351.51400757]
[400.99954224 354.70513916]
[388.20822144 346.46887207]
[384.95938110 331.23458862]
[372.46298218 322.93762207]
[359.96658325 314.64065552]
[345.08380127 314.04672241]
[337.86669922 299.96749878]
[325.37030029 291.67053223]
[317.98892212 290.58132935]
[312.68133545 283.02972412]
[300.38284302 274.44207764]
[288.08438110 265.85446167]
[275.78588867 257.26681519]
[272.92446899 257.69009399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[8 90]
[9 89]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[28 43]
[29 42]
[30 41]
[31 40]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[58 71]
[59 70]
[60 69]
[61 68]
[95 132]
[96 131]
[97 130]
[98 129]
[99 127]
[100 126]
[102 124]
[103 123]
[104 122]
[107 119]
[108 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
