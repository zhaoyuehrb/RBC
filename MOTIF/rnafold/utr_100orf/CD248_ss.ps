%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCGGGGGCAUCGCGAUGCUGCUGCGCCUGUUGCUGGCCUGGGCGGCCGCAGGGCCCACACUGGGCCAGGACCCCUGGGCUGCUGAGCCCCGUGCCGCCUGCGGCCCCAGCAGCU\
) } def
/len { sequence length } bind def

/coor [
[-12.53632259 238.56349182]
[-25.28890228 236.25692749]
[-36.31051636 246.43161011]
[-41.20222473 261.47760010]
[-55.80219650 264.42547607]
[-66.82380676 274.60015869]
[-77.84542084 284.77484131]
[-82.73712921 299.82083130]
[-97.33709717 302.76870728]
[-108.35871124 312.94338989]
[-119.38032532 323.11807251]
[-130.40193176 333.29275513]
[-141.42355347 343.46743774]
[-145.77770996 359.27798462]
[-161.71318054 363.15002441]
[-172.83691406 351.10037231]
[-167.70576477 335.52462769]
[-151.59822083 332.44583130]
[-140.57661438 322.27114868]
[-129.55500793 312.09646606]
[-118.53339386 301.92178345]
[-107.51177979 291.74710083]
[-103.40840912 277.42889404]
[-88.02009583 273.75323486]
[-76.99848175 263.57855225]
[-65.97687531 253.40386963]
[-61.87350464 239.08564758]
[-46.48519135 235.40998840]
[-35.46358109 225.23532104]
[-35.54869843 208.47579956]
[-23.28840637 196.56147766]
[-5.86645746 197.14848328]
[4.88039398 186.68400574]
[15.62724495 176.21954346]
[26.37409592 165.75506592]
[37.12094879 155.29058838]
[47.86779785 144.82611084]
[58.33227158 134.07926941]
[68.50695038 123.05765533]
[78.68162537 112.03604126]
[88.85630035 101.01442719]
[98.88336945 89.85835266]
[108.76103973 78.56979370]
[118.63871002 67.28123474]
[128.51637268 55.99267197]
[138.39404297 44.70410919]
[148.27171326 33.41554642]
[158.14938354 22.12698555]
[168.02705383 10.83842373]
[171.38322449 2.20169377]
[178.32107544 -0.61465818]
[188.49574280 -11.63627052]
[192.17140198 -27.02458191]
[206.48962402 -31.12795067]
[216.66430664 -42.14956284]
[226.83898926 -53.17117691]
[237.01365662 -64.19278717]
[240.68931580 -79.58110046]
[255.00753784 -83.68447113]
[265.18222046 -94.70607758]
[264.11819458 -105.69297028]
[269.23718262 -115.22215271]
[278.59472656 -120.19303131]
[288.91632080 -119.14435577]
[299.66314697 -129.60882568]
[310.41000366 -140.07330322]
[314.89944458 -155.24417114]
[329.41577148 -158.57968140]
[340.16262817 -169.04415894]
[350.90948486 -179.50862122]
[361.65634155 -189.97309875]
[372.40316772 -200.43757629]
[379.53311157 -215.81939697]
[396.28756714 -213.22621155]
[398.43383789 -196.40866089]
[382.86764526 -189.69071960]
[372.12078857 -179.22624207]
[361.37396240 -168.76177979]
[350.62710571 -158.29730225]
[339.88024902 -147.83282471]
[336.15948486 -133.41044617]
[320.87448120 -129.32644653]
[310.12762451 -118.86197662]
[299.38076782 -108.39749908]
[295.65191650 -89.50148773]
[276.20382690 -84.53140259]
[266.02914429 -73.50978851]
[263.08126831 -58.90981674]
[248.03527832 -54.01810837]
[237.86059570 -42.99649811]
[227.68591309 -31.97488594]
[217.51124573 -20.95327377]
[214.56335449 -6.35330057]
[199.51736450 -1.46159291]
[189.34268188 9.56001949]
[179.31562805 20.71609497]
[169.43795776 32.00465775]
[159.56028748 43.29321671]
[149.68261719 54.58177948]
[139.80494690 65.87033844]
[129.92727661 77.15890503]
[120.04959869 88.44746399]
[110.17192841 99.73602295]
[107.61028290 107.49671173]
[99.87791443 111.18910980]
[89.70323944 122.21071625]
[79.52856445 133.23233032]
[69.35388184 144.25395203]
[67.47217560 150.80929565]
[63.15618134 154.75181580]
[58.33227158 155.57296753]
[47.58541870 166.03744507]
[36.83856964 176.50190735]
[26.09171867 186.96638489]
[15.34486675 197.43086243]
[4.59801531 207.89533997]
[5.96319675 221.37199402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[5 26]
[6 25]
[7 24]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[32 116]
[33 115]
[34 114]
[35 113]
[36 112]
[37 111]
[38 108]
[39 107]
[40 106]
[41 105]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[51 95]
[52 94]
[54 92]
[55 91]
[56 90]
[57 89]
[59 87]
[60 86]
[64 84]
[65 83]
[66 82]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
