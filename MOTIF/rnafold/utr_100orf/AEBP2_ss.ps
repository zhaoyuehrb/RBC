%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAGGAGGAGGAGCAGGCGCCGCCAUGGCCGCCGCUAUCACCGACAUGGCCGACCUGGAGGAGCUCUCCCGCCUGAGCCCUCUGCCCCCCGGCAGCCCGGGUUCGGCGGCGCGGGGCCGGGCUG\
) } def
/len { sequence length } bind def

/coor [
[113.10675812 139.68687439]
[112.70027161 124.69239044]
[124.00526428 114.83332825]
[109.60813141 110.62351990]
[95.97993469 113.74825287]
[86.18206787 103.77361298]
[71.78492737 99.56381226]
[57.38779449 95.35401154]
[42.99065781 91.14420319]
[33.43082809 102.92916870]
[20.12319756 110.13680267]
[5.11046791 111.69615936]
[-9.31644154 107.40059662]
[-20.96798134 97.93452454]
[-28.08827591 84.76460266]
[-29.61969757 69.91253662]
[-44.01683426 65.70273590]
[-58.41397095 61.49293137]
[-72.81111145 57.28312683]
[-87.25921631 53.25171280]
[-101.75607300 49.39930344]
[-108.39865875 50.78854752]
[-113.87998962 48.83427048]
[-116.86541748 44.98124695]
[-131.15402222 40.41662598]
[-145.44262695 35.85200500]
[-159.73123169 31.28738594]
[-174.01983643 26.72276688]
[-188.30844116 22.15814590]
[-200.17857361 27.38116074]
[-212.03108215 23.20676041]
[-217.63664246 12.41149807]
[-231.80796814 7.49485493]
[-243.37031555 17.60462761]
[-258.44158936 20.56302643]
[-272.96771240 15.57425308]
[-283.04119873 3.98026586]
[-285.95233154 -11.10021210]
[-280.91806030 -25.61060905]
[-269.29254150 -35.64769745]
[-254.20301819 -38.51155472]
[-239.70846558 -33.43181992]
[-229.70787048 -21.77490807]
[-226.89132690 -6.67647600]
[-212.71998596 -1.75983226]
[-195.74588013 -6.02991390]
[-183.74382019 7.86954117]
[-169.45521545 12.43416119]
[-155.16661072 16.99878120]
[-140.87800598 21.56340027]
[-126.58940125 26.12801933]
[-112.30079651 30.69264030]
[-97.90366364 34.90244293]
[-83.40679932 38.75485229]
[-76.05538177 37.41774368]
[-68.60130310 42.88599014]
[-54.20417023 47.09579086]
[-39.80703354 51.30559540]
[-25.40989494 55.51539612]
[-16.11820412 43.82806396]
[-3.02432632 36.56887817]
[11.89153671 34.87126923]
[26.35996056 39.02485657]
[38.16759109 48.42663574]
[45.49573898 61.66828918]
[47.20045853 76.74707031]
[61.59759521 80.95687103]
[75.99473572 85.16667175]
[90.39186859 89.37648010]
[104.02006531 86.25174713]
[113.81793213 96.22638702]
[128.21507263 100.43618774]
[142.84486389 103.74816132]
[157.65138245 106.14963531]
[172.45790100 108.55110931]
[187.26440430 110.95257568]
[202.07092285 113.35404968]
[211.15336609 111.62943268]
[217.21211243 116.00240326]
[231.95469666 118.76937103]
[246.69728088 121.53633881]
[261.43988037 124.30330658]
[276.18246460 127.07028198]
[291.01754761 129.28843689]
[305.92471313 130.95474243]
[320.83184814 132.62103271]
[335.73901367 134.28733826]
[350.64617920 135.95362854]
[368.62030029 126.98580933]
[383.79135132 138.87200928]
[398.76269531 139.79905701]
[413.73400879 140.72608948]
[428.70532227 141.65313721]
[443.67666626 142.58018494]
[458.10928345 134.79357910]
[471.92510986 143.62844849]
[470.91159058 159.99624634]
[456.11135864 167.05918884]
[442.74960327 157.55151367]
[427.77828979 156.62446594]
[412.80697632 155.69741821]
[397.83563232 154.77037048]
[382.86431885 153.84333801]
[375.74209595 161.35252380]
[365.43417358 163.69392395]
[355.35400391 159.84094238]
[348.97988892 150.86079407]
[334.07272339 149.19448853]
[319.16555786 147.52819824]
[304.25839233 145.86189270]
[289.35125732 144.19560242]
[286.32324219 146.19425964]
[282.14617920 146.76278687]
[277.53308105 145.36373901]
[273.41549683 141.81286621]
[258.67291260 139.04589844]
[243.93031311 136.27893066]
[229.18772888 133.51196289]
[214.44512939 130.74499512]
[199.66944885 128.16056824]
[184.86293030 125.75909424]
[170.05642700 123.35762024]
[155.24990845 120.95614624]
[140.44338989 118.55467224]
[146.39984131 132.32131958]
[139.57501221 145.67878723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[6 69]
[7 68]
[8 67]
[9 66]
[16 59]
[17 58]
[18 57]
[19 56]
[20 54]
[21 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[32 45]
[33 44]
[73 124]
[74 123]
[75 122]
[76 121]
[77 120]
[79 119]
[80 118]
[81 117]
[82 116]
[83 115]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
