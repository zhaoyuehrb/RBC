%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCAGUCGCAAGACCUGAGCAUGGCGGCCACCAGGUGCCUGCGCUGGGGCCUGAGCCGAGCCGGAGUCUGGCUGCUCCCACCGCCCGCACGGUGCCCACGCCGGGCGCUGCACAAGCAGA\
) } def
/len { sequence length } bind def

/coor [
[76.65837097 94.96257782]
[63.73179245 87.35314178]
[47.91408920 87.02015686]
[40.87118530 73.89588165]
[27.94460487 66.28644562]
[15.01802349 58.67700577]
[2.09144402 51.06756973]
[-10.83513641 43.45813370]
[-23.76171684 35.84869766]
[-36.68829727 28.23925972]
[-42.13882828 28.20760155]
[-46.54282761 26.22052956]
[-49.31641769 23.03450775]
[-50.27601624 19.52905655]
[-62.58746719 10.96003246]
[-74.89891815 2.39100933]
[-87.21037292 -6.17801380]
[-99.62937927 -14.59039593]
[-112.15396118 -22.84478569]
[-124.67853546 -31.09917641]
[-133.67709351 -33.24744415]
[-137.41218567 -39.72468567]
[-149.72363281 -48.29370880]
[-165.47038269 -49.82681274]
[-171.49638367 -63.44799423]
[-183.80784607 -72.01701355]
[-196.11929321 -80.58603668]
[-208.43074036 -89.15505981]
[-221.05888367 -97.25013733]
[-233.98545837 -104.85957336]
[-246.91203308 -112.46900940]
[-259.83862305 -120.07844543]
[-268.93444824 -121.76818848]
[-272.99279785 -128.04794312]
[-285.72244263 -135.98239136]
[-298.45211792 -143.91685486]
[-311.18179321 -151.85131836]
[-324.01092529 -159.62388611]
[-336.93750000 -167.23332214]
[-353.33172607 -166.83067322]
[-361.64541626 -180.96624756]
[-353.32620239 -195.09857178]
[-336.93215942 -194.68952942]
[-329.32806396 -180.15991211]
[-316.40148926 -172.55047607]
[-308.95639038 -171.86080933]
[-303.24731445 -164.58097839]
[-290.51766968 -156.64651489]
[-277.78799438 -148.71206665]
[-265.05831909 -140.77760315]
[-252.22918701 -133.00503540]
[-239.30259705 -125.39559174]
[-226.37602234 -117.78615570]
[-213.44943237 -110.17671967]
[-209.86349487 -110.76831818]
[-205.81044006 -109.57821655]
[-202.16613770 -106.40605164]
[-199.86172485 -101.46651459]
[-187.55026245 -92.89749146]
[-175.23881531 -84.32846832]
[-162.92736816 -75.75944519]
[-148.06121826 -74.83925629]
[-141.15460205 -60.60515976]
[-128.84315491 -52.03613663]
[-116.42414856 -43.62375259]
[-103.89956665 -35.36936188]
[-91.37499237 -27.11497307]
[-83.97435760 -26.04910851]
[-78.64134979 -18.48946571]
[-66.32989502 -9.92044258]
[-54.01844406 -1.35141897]
[-41.70699310 7.21760416]
[-29.07885933 15.31267929]
[-16.15227890 22.92211533]
[-3.22569919 30.53155327]
[9.70088100 38.14099121]
[22.62746048 45.75042725]
[35.55403900 53.35986328]
[48.48062134 60.96929932]
[63.37372589 60.75800323]
[71.34123230 74.42655945]
[84.26780701 82.03599548]
[101.10437775 73.54878998]
[120.90811157 79.80380249]
[131.66394043 99.77545166]
[146.27568054 103.16617584]
[160.88743591 106.55689240]
[175.49917603 109.94761658]
[190.11091614 113.33833313]
[194.45939636 111.81944275]
[198.62834167 111.83654785]
[202.13688660 113.12864685]
[204.64639282 115.30027008]
[205.99301147 117.88278198]
[220.18675232 122.73435211]
[234.38049316 127.58592224]
[248.57423401 132.43748474]
[264.55178833 128.74295044]
[275.54080200 140.91563416]
[270.23669434 156.43331909]
[254.09588623 159.33273315]
[243.72267151 146.63122559]
[229.52893066 141.77966309]
[215.33518982 136.92808533]
[201.14144897 132.07652283]
[186.72019958 127.95008087]
[172.10844421 124.55935669]
[157.49670410 121.16863251]
[142.88496399 117.77791595]
[128.27322388 114.38719177]
[118.50263977 125.76856232]
[124.06687927 139.69836426]
[129.63111877 153.62815857]
[135.19537354 167.55795288]
[148.40597534 177.27453613]
[146.32778931 193.54147339]
[131.09866333 199.62472534]
[118.38503265 189.26637268]
[121.26557159 173.12219238]
[115.70133209 159.19239807]
[110.13708496 145.26260376]
[104.57284546 131.33280945]
[86.11858368 125.54098511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[14 72]
[15 71]
[16 70]
[17 69]
[18 67]
[19 66]
[20 65]
[22 64]
[23 63]
[25 61]
[26 60]
[27 59]
[28 58]
[29 54]
[30 53]
[31 52]
[32 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 45]
[39 44]
[85 110]
[86 109]
[87 108]
[88 107]
[89 106]
[94 105]
[95 104]
[96 103]
[97 102]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
