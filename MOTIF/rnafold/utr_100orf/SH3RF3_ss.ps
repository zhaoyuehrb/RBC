%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCUCGGAGCGUCCUGGCUGUGCGCAUCCAAGGCGGCCGCCGCUGCUGCGCAGAGCGAGGGCGACGAGGACAGGCCAGGCGAGCGACGGCGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[79.92347717 300.83886719]
[79.45697784 285.84613037]
[78.99047852 270.85336304]
[78.52398682 255.86062622]
[78.05748749 240.86788940]
[77.59098816 225.87513733]
[77.12448883 210.88240051]
[73.71004486 204.17665100]
[76.88395691 195.41770935]
[76.88395691 180.41770935]
[66.20308685 170.10003662]
[65.98940277 154.88790894]
[76.88395691 143.75477600]
[76.88395691 128.75477600]
[81.36962891 91.01766968]
[72.62851715 78.82780457]
[63.88739777 66.63793182]
[55.14628220 54.44806671]
[46.40516663 42.25819778]
[32.07546234 35.55221939]
[30.94653702 20.70046043]
[22.20542145 8.51059151]
[13.46430588 -3.67927766]
[-0.86539948 -10.38525486]
[-1.99432480 -25.23701477]
[-10.73544025 -37.42688370]
[-19.47655678 -49.61675262]
[-28.21767235 -61.80662155]
[-36.95878601 -73.99649048]
[-45.69990158 -86.18635559]
[-56.63543701 -85.22885895]
[-66.87164307 -88.96179199]
[-74.50808716 -96.61847687]
[-78.15828705 -106.71079254]
[-77.20113373 -117.31809235]
[-71.88546753 -126.45264435]
[-79.45270538 -139.40397644]
[-87.01995087 -152.35530090]
[-94.58719635 -165.30662537]
[-102.15443420 -178.25794983]
[-115.36554718 -188.88352966]
[-108.81242371 -204.51979065]
[-91.97313690 -202.55131531]
[-89.20310974 -185.82519531]
[-81.63586426 -172.87387085]
[-74.06862640 -159.92254639]
[-66.50138092 -146.97122192]
[-58.93413925 -134.01989746]
[-39.89728928 -130.69252014]
[-29.04676056 -114.34207153]
[-33.51003265 -94.92747498]
[-24.76891899 -82.73760223]
[-16.02780342 -70.54773712]
[-7.28668737 -58.35786819]
[1.45442832 -46.16799927]
[10.19554424 -33.97813034]
[23.90002632 -28.14405441]
[25.65417480 -12.42039299]
[34.39529037 -0.23052439]
[43.13640594 11.95934391]
[56.84088898 17.79342079]
[58.59503555 33.51708221]
[67.33615112 45.70695114]
[76.07727051 57.89682007]
[84.81838226 70.08668518]
[93.55949402 82.27655792]
[93.20806122 67.28067780]
[104.04248047 56.90689468]
[119.00896454 57.90911484]
[128.36351013 69.63483429]
[126.01579285 84.44997406]
[113.49475098 92.70898438]
[128.49293518 92.94226074]
[140.96656799 82.85326385]
[156.59992981 86.45570374]
[163.40043640 100.98611450]
[156.15133667 115.29798889]
[140.41349792 118.41249847]
[128.25965881 107.94045258]
[113.26147461 107.70716858]
[107.91709900 112.96907043]
[122.37532806 116.96401215]
[126.14461517 131.48271179]
[115.45562744 142.00627136]
[100.99748230 138.01101685]
[97.22834015 123.49287415]
[91.88395691 128.75477600]
[91.88395691 143.75477600]
[102.77851105 154.88790894]
[102.56482697 170.10003662]
[91.88395691 180.41770935]
[91.88395691 195.41770935]
[92.11723328 210.41590881]
[92.58373260 225.40864563]
[93.05023193 240.40139771]
[93.51673126 255.39413452]
[93.98322296 270.38687134]
[94.44972229 285.37963867]
[94.91622162 300.37237549]
[97.70491028 319.55239868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[9 92]
[10 91]
[13 88]
[14 87]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[21 60]
[22 59]
[23 58]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
