%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCGUCUAUGCUCCAGGCCCUCUCCUCGCGGUGCCGGUGAACCCGCCAGCCGCCCCGAUGUACAGCAUGAUGAUGGAGACCGACCUGCACUCGCCCGGCGGCGCCCAGGCCCCCACGAACCUCUCGGGCCCCGCCGGGGCGGGCGGCGGCGGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[-91.73799133 300.51824951]
[-102.49868011 310.96847534]
[-113.25936127 321.41873169]
[-124.02005005 331.86898804]
[-134.78073120 342.31924438]
[-132.07940674 351.75588989]
[-133.02407837 361.46759033]
[-137.44046021 370.10324097]
[-144.67428589 376.47714233]
[-153.68785095 379.73181152]
[-163.20881653 379.45315552]
[-171.90977478 375.72271729]
[-183.45252991 385.30212402]
[-194.99528503 394.88150024]
[-195.38177490 405.81524658]
[-201.61743164 414.53552246]
[-211.42753601 418.27917480]
[-221.45759583 416.02627563]
[-233.36531067 425.14804077]
[-245.27302551 434.26977539]
[-247.09991455 449.96810913]
[-259.54382324 459.71105957]
[-275.22195435 457.71832275]
[-284.83279419 445.17211914]
[-282.67440796 429.51589966]
[-270.02728271 420.03823853]
[-254.39477539 422.36206055]
[-242.48706055 413.24029541]
[-230.57933044 404.11856079]
[-224.55169678 385.77685547]
[-204.57467651 383.33874512]
[-193.03192139 373.75936890]
[-181.48916626 364.17996216]
[-181.39508057 343.78311157]
[-166.13726807 329.81182861]
[-145.23097229 331.55853271]
[-134.47029114 321.10830688]
[-123.70960999 310.65805054]
[-112.94892120 300.20779419]
[-102.18824005 289.75756836]
[-91.53002167 279.20281982]
[-80.97528839 268.54461670]
[-81.30453491 253.69781494]
[-70.75235748 242.73851013]
[-55.17744827 242.49383545]
[-44.62271500 231.83561707]
[-34.06798172 221.17739868]
[-23.51324654 210.51918030]
[-12.95851231 199.86096191]
[-2.40377831 189.20275879]
[0.08087514 182.20179749]
[8.46240902 178.44206238]
[19.22309494 167.99182129]
[29.98377991 157.54158020]
[40.74446487 147.09132385]
[51.50514984 136.64108276]
[62.26583481 126.19083405]
[73.02651978 115.74058533]
[65.33521271 104.98963928]
[62.32029724 90.68618011]
[65.51374817 74.98154449]
[57.47140884 62.31975937]
[49.42906189 49.65797806]
[41.38671875 36.99619675]
[27.79064178 26.86787224]
[33.75938034 10.99933338]
[50.66007996 12.34196281]
[54.04850006 28.95385361]
[62.09084320 41.61563492]
[70.13318634 54.27741623]
[78.17552948 66.93920135]
[85.53320312 65.48499298]
[90.37208557 51.28692245]
[100.24853516 62.57658005]
[107.60620880 61.12237549]
[110.22694397 46.35309219]
[112.70346069 31.55894279]
[115.03552246 16.74133492]
[109.53782654 1.90604198]
[119.15975952 -9.46354866]
[121.49182129 -24.28115654]
[111.98837280 -36.90890121]
[114.28028107 -52.54612350]
[127.00779724 -61.91553497]
[142.61991882 -59.45843124]
[151.85423279 -46.63256836]
[149.23220825 -31.04730034]
[136.30943298 -21.94909477]
[133.97737122 -7.13148737]
[139.64186096 6.64395094]
[129.85313416 19.07339668]
[127.52106476 33.89100266]
[129.59817505 41.02349472]
[124.99622345 48.97382736]
[122.37548828 63.74311066]
[129.06625366 77.23854065]
[129.73391724 90.44861603]
[144.69894409 89.42498016]
[159.66398621 88.40134430]
[174.62901306 87.37770844]
[189.59403992 86.35407257]
[204.55906677 85.33043671]
[219.52410889 84.30680084]
[234.48913574 83.28316498]
[247.72912598 74.62214661]
[260.95474243 81.47286987]
[275.91976929 80.44923401]
[290.88479614 79.42559814]
[305.84982300 78.40196228]
[320.77850342 76.94080353]
[335.65802002 75.04338837]
[350.53750610 73.14596558]
[356.39865112 58.94939804]
[368.58261108 49.59810638]
[383.81198120 47.60754013]
[397.99011230 53.51315308]
[407.30316162 65.72636414]
[409.24597168 80.96188354]
[403.29595947 95.12142944]
[391.05361938 104.39615631]
[375.81207275 106.29121399]
[361.67123413 100.29682922]
[352.43493652 88.02547455]
[337.55541992 89.92289734]
[322.67593384 91.82031250]
[320.22354126 94.41976929]
[316.36975098 95.93570709]
[311.64941406 95.71331024]
[306.87347412 93.36698914]
[291.90844727 94.39062500]
[276.94342041 95.41426086]
[261.97836304 96.43790436]
[249.80879211 105.02570343]
[235.51277161 98.24819946]
[220.54774475 99.27183533]
[205.58271790 100.29547119]
[190.61767578 101.31910706]
[175.65264893 102.34274292]
[160.68762207 103.36637878]
[145.72257996 104.39001465]
[130.75755310 105.41365051]
[121.17810822 122.95260620]
[102.92664337 131.09291077]
[83.47676849 126.50127411]
[72.71607971 136.95152283]
[61.95539856 147.40176392]
[51.19470978 157.85200500]
[40.43402481 168.30226135]
[29.67334175 178.75250244]
[18.91265488 189.20275879]
[8.25443840 199.75749207]
[-2.30029559 210.41569519]
[-12.85502911 221.07391357]
[-23.40976334 231.73213196]
[-33.96449661 242.39035034]
[-44.51922989 253.04856873]
[-44.61194229 268.62512207]
[-55.46777344 279.28372192]
[-70.31707001 279.09933472]
[-80.87180328 289.75756836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[12 33]
[13 32]
[14 31]
[18 29]
[19 28]
[20 27]
[41 160]
[42 159]
[45 156]
[46 155]
[47 154]
[48 153]
[49 152]
[50 151]
[52 150]
[53 149]
[54 148]
[55 147]
[56 146]
[57 145]
[58 144]
[61 71]
[62 70]
[63 69]
[64 68]
[75 95]
[76 94]
[77 92]
[78 91]
[80 89]
[81 88]
[97 141]
[98 140]
[99 139]
[100 138]
[101 137]
[102 136]
[103 135]
[104 134]
[106 132]
[107 131]
[108 130]
[109 129]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
