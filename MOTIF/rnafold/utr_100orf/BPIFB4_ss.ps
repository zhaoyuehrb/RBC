%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCAGUGCCAGCAUGUGGAUGGCCUGGUGUGUGGCUGCGCUGUCUGUGGUGGCUGUGUGUGGCACCAGCCACGAGACAAACACGGUCCUCAGGGUGACGAAAGAUGUGUUGA\
) } def
/len { sequence length } bind def

/coor [
[93.63258362 157.11854553]
[80.13384247 150.57759094]
[73.46351624 137.14231873]
[76.41301727 122.43516541]
[87.74920654 112.61035919]
[73.53440857 117.39988708]
[59.31961060 122.18940735]
[45.10481262 126.97892761]
[30.89001465 131.76844788]
[27.73290634 145.26296997]
[18.36877823 155.33180237]
[5.34589291 159.39331055]
[-7.86952639 156.47944641]
[-17.81580162 147.46392822]
[-32.15508270 151.86676025]
[-46.49436569 156.26959229]
[-60.83364868 160.67243958]
[-68.27858734 174.35493469]
[-82.88337708 178.61576843]
[-95.88166046 171.43383789]
[-110.22094727 175.83666992]
[-120.98844147 188.20571899]
[-137.03009033 184.80015564]
[-141.84359741 169.12336731]
[-130.47726440 157.30226135]
[-114.62378693 161.49739075]
[-100.28450012 157.09455872]
[-93.55636597 143.85568237]
[-79.07701874 139.18630981]
[-65.23648834 146.33316040]
[-50.89720535 141.93031311]
[-36.55792236 137.52748108]
[-22.21863937 133.12463379]
[-17.43828583 117.48437500]
[-4.17341852 107.63813019]
[12.51169777 107.58946228]
[26.10049057 117.55365753]
[40.31528854 112.76412964]
[54.53008652 107.97460938]
[68.74488068 103.18508911]
[82.95967865 98.39556122]
[85.95461273 91.52908325]
[91.41190338 86.87083435]
[98.05214691 85.15225220]
[101.67221832 70.59563446]
[105.29228210 56.03901672]
[108.91235352 41.48239899]
[112.53241730 26.92578125]
[106.31245422 17.79916191]
[106.22099304 6.97620964]
[112.04309082 -1.88422382]
[121.60595703 -5.92317629]
[126.00879669 -20.26245880]
[130.41163635 -34.60174179]
[134.81446838 -48.94102097]
[139.21731567 -63.28030396]
[143.62014771 -77.61959076]
[148.02299500 -91.95886993]
[147.55741882 -101.21823120]
[152.74407959 -106.62390137]
[157.53359985 -120.83869934]
[162.32312012 -135.05349731]
[161.65074158 -151.99411011]
[177.74317932 -157.32983398]
[187.32521057 -143.34336853]
[176.53791809 -130.26397705]
[171.74839783 -116.04917908]
[166.95887756 -101.83438110]
[162.36227417 -87.55603027]
[157.95942688 -73.21675110]
[153.55659485 -58.87746811]
[149.15376282 -44.53818512]
[144.75091553 -30.19890213]
[140.34808350 -15.85962009]
[135.94523621 -1.52033770]
[141.75094604 16.84105110]
[127.08903503 30.54585075]
[123.46897125 45.10246658]
[119.84889984 59.65908432]
[116.22882843 74.21569824]
[112.60876465 88.77231598]
[118.16083527 102.70697021]
[130.79956055 110.78549194]
[143.43829346 118.86400604]
[156.07702637 126.94252777]
[168.71575928 135.02104187]
[181.35449219 143.09956360]
[194.97920227 136.14869690]
[210.15357971 136.94552612]
[222.80761719 145.17605591]
[229.59750366 158.54592896]
[228.78900146 173.41911316]
[241.42773438 181.49763489]
[255.82392883 175.70718384]
[270.86599731 179.51712036]
[280.76995850 191.46244812]
[281.72756958 206.94995117]
[273.37057495 220.02435303]
[258.91241455 225.65829468]
[243.91255188 221.68540955]
[234.13874817 209.63334656]
[233.34921265 194.13636780]
[220.71047974 186.05784607]
[207.55142212 193.03671265]
[192.56625366 192.48825073]
[179.78314209 184.45965576]
[172.68840027 171.02233887]
[173.27597046 155.73829651]
[160.63723755 147.65977478]
[147.99850464 139.58125305]
[135.35977173 131.50274658]
[122.72104645 123.42421722]
[110.08231354 115.34570312]
[118.71196747 127.61473083]
[118.02571106 142.59902954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[14 33]
[15 32]
[16 31]
[17 30]
[20 27]
[21 26]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[60 68]
[61 67]
[62 66]
[82 113]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
