%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:19:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAUUGGUUAAAGAAGUAUAUUAGUGCUAAUUUCCCUCCGUUUGUCCUAGCUUUUCUCUUCUGUCAACCCCACACGCCUUUGGCACAAUGAAGUGGGUAACCUUUAUUUCCCUUCUUUUUCUCUUUAGCUCGGCUUAUUCCAGGGGUGUGUUUCGUCGAGAUGCACACAAGAGUGAGGUUGCUCAUC\
) } def
/len { sequence length } bind def

/coor [
[-153.22557068 124.38878632]
[-161.22576904 120.16277313]
[-166.29705811 112.83672333]
[-181.29499817 112.58871460]
[-196.29295349 112.34070587]
[-211.29090881 112.09269714]
[-226.28884888 111.84468842]
[-241.28680420 111.59667969]
[-256.28628540 111.47267151]
[-271.28628540 111.47267151]
[-286.28628540 111.47267151]
[-301.28628540 111.47267151]
[-316.28628540 111.47267151]
[-331.28628540 111.47267151]
[-346.28628540 111.47267151]
[-340.18612671 128.52351379]
[-346.49737549 149.65991211]
[-357.01593018 160.35383606]
[-367.53448486 171.04776001]
[-378.05303955 181.74169922]
[-388.57159424 192.43562317]
[-392.15887451 208.43760681]
[-407.88925171 213.07299805]
[-419.58068848 201.57331848]
[-415.20599365 185.76843262]
[-399.26553345 181.91706848]
[-388.74697876 171.22314453]
[-378.22842407 160.52922058]
[-367.70986938 149.83528137]
[-357.19131470 139.14135742]
[-360.09005737 132.22418213]
[-373.92440796 138.02168274]
[-387.75875854 143.81916809]
[-401.59310913 149.61665344]
[-412.95883179 159.40541077]
[-425.78070068 151.62083435]
[-422.33926392 137.02095032]
[-407.39059448 135.78230286]
[-393.55624390 129.98481750]
[-379.72189331 124.18733215]
[-365.88754272 118.38983917]
[-368.78628540 111.47267151]
[-383.78628540 111.47267151]
[-398.78628540 111.47267151]
[-409.78298950 122.82380676]
[-425.58639526 122.99089813]
[-436.82061768 111.87480927]
[-436.82061768 96.07052612]
[-425.58639526 84.95443726]
[-409.78298950 85.12152863]
[-398.78628540 96.47267151]
[-383.78628540 96.47267151]
[-368.78628540 96.47267151]
[-383.21871948 92.38552856]
[-396.40826416 85.24160004]
[-407.71664429 75.38659668]
[-416.59652710 63.29745483]
[-422.61825562 49.55922318]
[-425.49035645 34.83675766]
[-425.07385254 19.84254074]
[-421.38888550 5.30221367]
[-414.61383057 -8.08055210]
[-405.07650757 -19.65810394]
[-393.23852539 -28.87015343]
[-379.67272949 -35.27088547]
[-365.03564453 -38.55054092]
[-350.03564453 -38.55039978]
[-335.39865112 -35.27046967]
[-321.83297729 -28.86948586]
[-309.99514771 -19.65721703]
[-300.45806885 -8.07948589]
[-293.68322754 5.30340672]
[-289.99856567 19.84380341]
[-289.58233643 34.83802795]
[-292.45471191 49.56044006]
[-298.47668457 63.29856110]
[-307.35681152 75.38753510]
[-318.66534424 85.24232483]
[-331.85504150 92.38600922]
[-346.28628540 96.47267151]
[-331.28628540 96.47267151]
[-316.28628540 96.47267151]
[-301.28628540 96.47267151]
[-286.28628540 96.47267151]
[-271.28628540 96.47267151]
[-256.28628540 96.47267151]
[-249.58538818 93.32303619]
[-241.03878784 96.59872437]
[-226.04084778 96.84673309]
[-211.04289246 97.09474945]
[-196.04493713 97.34275818]
[-181.04699707 97.59076691]
[-166.04904175 97.83877563]
[-148.97409058 86.26214600]
[-130.74632263 97.50782013]
[-115.75453186 97.01186371]
[-100.76273346 96.51591492]
[-85.77093506 96.01996613]
[-70.77912903 95.52401733]
[-55.78733444 95.02806091]
[-40.79553604 94.53211212]
[-25.80373573 94.03616333]
[-10.81193733 93.54021454]
[4.17986155 93.04425812]
[19.17165947 92.54830933]
[34.16345978 92.05236053]
[40.75656509 88.68289948]
[49.40678787 91.67421722]
[64.40473938 91.42620850]
[79.40268707 91.17819977]
[94.40063477 90.93019104]
[109.02848816 87.60964966]
[122.66358185 81.35792542]
[136.29867554 75.10619354]
[149.93377686 68.85446930]
[148.08206177 58.25339508]
[148.49641418 47.50816345]
[151.15484619 37.09737015]
[155.93554688 27.48397636]
[162.62237549 19.09472847]
[170.91464233 12.30120659]
[180.44070435 7.40336990]
[190.77452087 4.61631060]
[201.45478821 4.06081343]
[212.00547791 5.75812340]
[221.95709229 9.62915611]
[230.86750793 15.49817276]
[238.34169006 23.10076141]
[244.04911804 32.09574127]
[258.31497192 27.46048737]
[272.58081055 22.82523155]
[285.77630615 12.18026066]
[299.65814209 21.91324234]
[294.14840698 37.94692993]
[277.21606445 37.09107971]
[262.95022583 41.72633362]
[248.68437195 46.36159134]
[248.17556763 65.91483307]
[240.26097107 83.83545685]
[226.10708618 97.42443848]
[207.82203674 104.62546539]
[188.14155579 104.33607483]
[170.01972961 96.57639313]
[156.18550110 82.48956299]
[142.55041504 88.74129486]
[128.91531372 94.99301910]
[115.28021240 101.24475098]
[114.41262817 116.21963501]
[127.23451996 124.00418091]
[140.05641174 131.78872681]
[152.87829590 139.57327271]
[165.70019531 147.35780334]
[178.52207947 155.14234924]
[194.33378601 155.69042969]
[201.19754028 168.90928650]
[214.01943970 176.69383240]
[229.88232422 174.29627991]
[241.54872131 185.30876160]
[240.06916809 201.28344727]
[226.57864380 209.96591187]
[211.42593384 204.69573975]
[206.23489380 189.51573181]
[193.41300964 181.73118591]
[178.51840210 181.73989868]
[170.73753357 167.96424866]
[157.91564941 160.17970276]
[145.09375000 152.39515686]
[132.27186584 144.61061096]
[119.44997406 136.82606506]
[106.62808228 129.04153442]
[97.85971069 122.41899872]
[93.85349274 113.96038055]
[94.64864349 105.92813873]
[79.65069580 106.17614746]
[64.65274811 106.42415619]
[49.65479660 106.67216492]
[34.65940857 107.04415894]
[19.66761017 107.54010773]
[4.67581224 108.03606415]
[-10.31598663 108.53201294]
[-25.30778503 109.02796173]
[-40.29958344 109.52391052]
[-55.29138184 110.01985931]
[-70.28318024 110.51581573]
[-85.27497864 111.01176453]
[-100.26677704 111.50771332]
[-115.25857544 112.00366211]
[-130.25038147 112.49961853]
[-135.73899841 120.20586395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[42 53]
[43 52]
[44 51]
[95 188]
[96 187]
[97 186]
[98 185]
[99 184]
[100 183]
[101 182]
[102 181]
[103 180]
[104 179]
[105 178]
[106 177]
[108 176]
[109 175]
[110 174]
[111 173]
[112 147]
[113 146]
[114 145]
[115 144]
[129 137]
[130 136]
[131 135]
[148 170]
[149 169]
[150 168]
[151 167]
[152 166]
[153 165]
[155 163]
[156 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
