%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCUGGGGCGGUGCUGACUGUCGCGGGCUGCGAGGGCGGUGUUUGCGUCGCUCAUGCGCGGGGCGGGACCUCGCGGGGCGCGGGAAAGAGGCAGAGCGCGCGCAGGUGUGAGGGGCGGCGACAUCUGUGGGGUUCAGAGCGUCUGUCAGUCAC\
) } def
/len { sequence length } bind def

/coor [
[128.73516846 199.35192871]
[127.52816772 184.40057373]
[126.32116699 169.44921875]
[125.11417389 154.49784851]
[123.90717316 139.54649353]
[109.54215240 135.22837830]
[100.29136658 147.03613281]
[97.87121582 162.67112732]
[83.93138885 167.91809082]
[74.68061066 179.72584534]
[65.42982483 191.53359985]
[56.17904282 203.34135437]
[46.92826080 215.14909363]
[37.67747879 226.95684814]
[35.91032791 243.26051331]
[20.80016518 249.63349915]
[7.89102697 239.51983643]
[10.46272945 223.32359314]
[25.86972427 217.70606995]
[35.12050629 205.89831543]
[44.37129211 194.09056091]
[53.62207413 182.28280640]
[62.87285614 170.47506714]
[72.12364197 158.66731262]
[73.88211060 143.87687683]
[88.48361969 137.78533936]
[97.73439789 125.97759247]
[86.95217896 119.89909363]
[81.08883667 110.25882721]
[66.23763275 112.36636353]
[51.38642883 114.47389984]
[36.53522491 116.58144379]
[21.68401909 118.68898010]
[9.11560631 129.22306824]
[-6.19660521 123.35210419]
[-8.50072575 107.11563110]
[4.57352638 97.21633911]
[19.57648087 103.83777618]
[34.42768478 101.73023224]
[49.27889252 99.62269592]
[64.13009644 97.51515961]
[78.98130035 95.40762329]
[107.84497070 77.53500366]
[123.40222931 111.50234222]
[116.43138123 98.22050476]
[109.46053314 84.93866730]
[96.19623566 76.31491852]
[97.13261414 61.44977951]
[90.16176605 48.16793823]
[83.36333466 41.97957993]
[83.18732452 34.54771042]
[76.48535156 21.12819099]
[69.78337097 7.70867205]
[63.08139801 -5.71084738]
[56.37942123 -19.13036728]
[51.92433167 -22.06536674]
[49.33718109 -26.03330231]
[48.69650650 -30.13362503]
[49.70563889 -33.56866074]
[43.82613754 -47.36835480]
[37.94664001 -61.16804504]
[32.06714249 -74.96773529]
[26.18764114 -88.76742554]
[20.30814171 -102.56712341]
[14.42864323 -116.36681366]
[0.14246987 -123.66645813]
[-2.91640115 -139.41519165]
[7.59853411 -151.53195190]
[23.62111664 -150.72177124]
[32.86019516 -137.60617065]
[28.22833443 -122.24631500]
[34.10783386 -108.44661713]
[39.98733139 -94.64692688]
[45.86683273 -80.84723663]
[51.74633026 -67.04754639]
[57.62583160 -53.24785233]
[63.50532913 -39.44816208]
[69.79894257 -25.83234406]
[76.50091553 -12.41282463]
[83.20289612 1.00669515]
[89.90486908 14.42621422]
[96.60684967 27.84573364]
[103.44360352 41.19709015]
[110.41445160 54.47893143]
[123.18015289 62.15266800]
[122.74237061 77.96781921]
[129.71322632 91.24965668]
[136.68406677 104.53149414]
[149.44200134 112.42042542]
[164.43894958 112.72248077]
[179.43591309 113.02453613]
[193.38909912 105.56669617]
[205.95797729 113.55872345]
[220.95494080 113.86077881]
[238.09288025 103.31875610]
[254.24061584 113.89449310]
[269.23757935 113.59243774]
[284.23452759 113.29038239]
[299.23150635 112.98832703]
[307.40762329 102.24166107]
[320.10086060 98.24228668]
[332.58941650 102.24211884]
[340.36257935 112.56033325]
[355.36257935 112.56033325]
[370.36257935 112.56033325]
[385.36257935 112.56033325]
[400.36257935 112.56033325]
[415.36257935 112.56033325]
[430.36257935 112.56033325]
[445.36257935 112.56033325]
[460.36257935 112.56033325]
[467.41888428 98.97845459]
[479.98535156 90.24104309]
[495.17431641 88.35588074]
[509.49545288 93.75617218]
[519.65789795 105.20096588]
[523.32635498 120.06033325]
[519.65789795 134.91970825]
[509.49545288 146.36450195]
[495.17431641 151.76478577]
[479.98535156 149.87962341]
[467.41888428 141.14221191]
[460.36257935 127.56033325]
[445.36257935 127.56033325]
[430.36257935 127.56033325]
[415.36257935 127.56033325]
[400.36257935 127.56033325]
[385.36257935 127.56033325]
[370.36257935 127.56033325]
[355.36257935 127.56033325]
[340.36257935 127.56033325]
[329.01968384 139.94206238]
[311.89501953 140.32440186]
[299.53353882 127.98528290]
[284.53659058 128.28733826]
[269.53964233 128.58940125]
[254.54267883 128.89144897]
[248.10440063 136.91625977]
[238.09288025 140.10997009]
[227.77307129 137.17564392]
[220.65287781 128.85774231]
[205.65592957 128.55567932]
[192.77542114 136.03512573]
[179.13386536 128.02149963]
[164.13690186 127.71943665]
[149.13993835 127.41738129]
[138.85853577 138.33949280]
[140.06553650 153.29086304]
[141.27252197 168.24221802]
[142.47952271 183.19357300]
[143.68652344 198.14494324]
[154.92591858 209.59289551]
[152.84024048 225.49978638]
[139.02946472 233.66322327]
[124.08801270 227.82090759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 27]
[7 26]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[44 88]
[45 87]
[46 86]
[48 84]
[49 83]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[89 146]
[90 145]
[91 144]
[93 142]
[94 141]
[96 137]
[97 136]
[98 135]
[99 134]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
