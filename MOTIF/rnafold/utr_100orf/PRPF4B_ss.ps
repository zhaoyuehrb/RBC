%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGCUCUUUUCCUUCUUCCUCCACUUCCCCUACCCUCCACCGUCCGGGAGCCGCCGCCACCGCCGCCGAGGAGUCAGGAAGUUCAAGAUGGCCGCCGCGGAGACCCAGUCGCUACGGGAGCAGCCAGAGAUGGAAGAUGCUAAUUCUGAAAAGAGUAUAAAUGAAGAAAAUGGAGAAGUAUCAGAAG\
) } def
/len { sequence length } bind def

/coor [
[113.20502472 369.94631958]
[111.00406647 384.78396606]
[117.53095245 399.82830811]
[107.54958344 412.83999634]
[91.32792664 410.43374634]
[85.55344391 395.08489990]
[96.16641998 382.58300781]
[98.36737823 367.74536133]
[94.30942535 357.99911499]
[99.86022949 347.50729370]
[99.86022949 332.50729370]
[99.86022949 317.50729370]
[99.86022949 302.50729370]
[99.86022949 287.50729370]
[99.86022949 272.50729370]
[99.86022949 257.50729370]
[99.49211121 242.51181030]
[98.75609589 227.52987671]
[98.02008057 212.54794312]
[97.28406525 197.56602478]
[96.54804993 182.58409119]
[95.81203461 167.60215759]
[73.80523682 162.46138000]
[54.71464920 150.36692810]
[40.66558075 132.66522217]
[33.22208405 111.32697296]
[33.21282959 88.72771454]
[18.78940392 84.60888672]
[4.36597633 80.49005890]
[-10.05745029 76.37123108]
[-24.48087692 72.25240326]
[-38.90430450 68.13356781]
[-49.85493469 75.99219513]
[-63.13844681 76.10219574]
[-73.89757538 68.64765167]
[-78.32724762 56.53780365]
[-92.68135071 52.18353271]
[-107.07060242 47.94684219]
[-121.49402618 43.82801056]
[-135.91744995 39.70918274]
[-150.34088135 35.59035492]
[-161.29150391 43.44897842]
[-174.57502747 43.55897903]
[-185.33415222 36.10443115]
[-189.76382446 23.99458694]
[-204.11793518 19.64031601]
[-215.85061646 25.02347565]
[-227.72355652 21.08969498]
[-233.53491211 10.46900845]
[-247.81584167 5.88046360]
[-262.09680176 1.29191828]
[-276.02890015 8.25855923]
[-290.44644165 3.40168428]
[-297.00219727 -9.92338562]
[-311.28314209 -14.51193142]
[-327.18972778 -10.52287674]
[-338.40170288 -22.49047852]
[-333.38516235 -38.10349655]
[-317.30068970 -41.30059433]
[-306.69461060 -28.79287148]
[-292.41366577 -24.20432663]
[-279.32327271 -31.21697617]
[-264.77499390 -26.76697540]
[-257.50823975 -12.98902225]
[-243.22729492 -8.40047646]
[-228.94636536 -3.81193137]
[-212.02606201 -8.44118309]
[-199.76365662 5.28621149]
[-185.40954590 9.64048100]
[-170.93855286 1.08566403]
[-154.43067932 5.72773075]
[-146.22204590 21.16692734]
[-131.79862976 25.28575706]
[-117.37519836 29.40458488]
[-102.95176697 33.52341461]
[-95.64497375 32.33510971]
[-88.32707977 37.82942963]
[-73.97297668 42.18369675]
[-59.50197220 33.62887955]
[-42.99409866 38.27094650]
[-34.78547668 53.71014404]
[-20.36204910 57.82897186]
[-5.93862152 61.94780350]
[8.48480511 66.06663513]
[22.90823174 70.18546295]
[37.33166122 74.30429077]
[42.57777405 64.07955170]
[49.47695160 54.88889313]
[57.83058167 46.99688339]
[67.39817810 40.63071823]
[77.90431213 35.97367096]
[89.04653168 33.15980148]
[100.50408173 32.27012253]
[111.94711304 33.33024216]
[123.04621887 36.30963898]
[129.68055725 22.85654640]
[124.83358002 8.05301380]
[131.75337219 -5.49582529]
[145.89614868 -10.02544403]
[152.53048706 -23.47853470]
[159.16481018 -36.93162537]
[158.32910156 -52.73074341]
[170.89759827 -60.72336578]
[177.53193665 -74.17646027]
[176.69621277 -89.97557831]
[189.26472473 -97.96820068]
[195.89904785 -111.42129517]
[202.53338623 -124.87438202]
[204.11605835 -141.75430298]
[220.77442932 -144.90629578]
[228.41473389 -129.77151489]
[215.98648071 -118.24005127]
[209.35214233 -104.78696442]
[202.71781921 -91.33386993]
[204.02806091 -76.49700928]
[190.98503113 -67.54212952]
[184.35069275 -54.08903885]
[185.66093445 -39.25217438]
[172.61790466 -30.29729652]
[165.98358154 -16.84420395]
[159.34924316 -3.39111328]
[164.36523438 10.58656311]
[157.82872009 24.32441902]
[143.13363647 29.49087715]
[136.49931335 42.94396973]
[147.87347412 49.30038452]
[158.10934448 57.94830704]
[166.74259949 68.67630768]
[180.69287109 63.16357040]
[194.64312744 57.65083313]
[204.40844727 44.47621918]
[220.66760254 46.61449814]
[226.69454956 61.86598587]
[216.28929138 74.54126740]
[200.15586853 71.60108948]
[186.20559692 77.11383057]
[172.25534058 82.62657166]
[172.50073242 90.12255096]
[187.49270630 89.63176727]
[202.48468018 89.14098358]
[216.59129333 84.04161835]
[225.80010986 95.88212585]
[217.38464355 108.29904938]
[202.97546387 104.13294983]
[187.98348999 104.62373352]
[172.99153137 105.11452484]
[173.23692322 112.61050415]
[187.51785278 117.19905090]
[201.79879761 121.78759766]
[216.07974243 126.37614441]
[230.36067200 130.96469116]
[246.26725769 126.97563171]
[257.47924805 138.94323730]
[252.46269226 154.55625916]
[236.37821960 157.75335693]
[225.77212524 145.24563599]
[211.49119568 140.65708923]
[197.21025085 136.06854248]
[182.92930603 131.47999573]
[168.64837646 126.89144897]
[163.18249512 136.30638123]
[156.45751953 144.70603943]
[148.65184021 151.92732239]
[139.96417236 157.83724976]
[130.60847473 162.33543396]
[120.80879974 165.35554504]
[110.79396820 166.86613464]
[111.52998352 181.84806824]
[112.26599884 196.83000183]
[113.00201416 211.81193542]
[113.73802948 226.79386902]
[114.47404480 241.77580261]
[117.32295990 246.18797302]
[118.10517120 250.79087830]
[117.09640503 254.76155090]
[114.86022949 257.50729370]
[114.86022949 272.50729370]
[114.86022949 287.50729370]
[114.86022949 302.50729370]
[114.86022949 317.50729370]
[114.86022949 332.50729370]
[114.86022949 347.50729370]
[124.59399414 336.09442139]
[138.61749268 330.77075195]
[153.47282410 332.84899902]
[165.49696350 341.81674194]
[171.72500610 355.46267700]
[170.62123108 370.42199707]
[162.45782471 383.00607300]
[149.24769592 390.11190796]
[134.24821472 389.98733521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[10 182]
[11 181]
[12 180]
[13 179]
[14 178]
[15 177]
[16 176]
[17 172]
[18 171]
[19 170]
[20 169]
[21 168]
[22 167]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[32 81]
[36 78]
[37 77]
[38 75]
[39 74]
[40 73]
[41 72]
[45 69]
[46 68]
[49 66]
[50 65]
[51 64]
[54 61]
[55 60]
[95 125]
[96 124]
[99 121]
[100 120]
[101 119]
[103 117]
[104 116]
[106 114]
[107 113]
[108 112]
[128 137]
[129 136]
[130 135]
[147 160]
[148 159]
[149 158]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
