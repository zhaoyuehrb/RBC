%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCACUUUCUUUGCCAAAGGCAAACGCAGAACGUUUCAGAGCCAUGAGGAUGCUUCUGCAUUUGAGUUUGCUAGCUCUUGGAGCUGCCUACGUGUAUGCCAUCCCCACAGAAAUUCCCACAAGUGCAUUGGUGAAAGAGACCU\
) } def
/len { sequence length } bind def

/coor [
[172.47377014 222.59355164]
[167.68424988 208.37875366]
[162.89472961 194.16395569]
[158.10520935 179.94915771]
[153.31568909 165.73435974]
[148.52615356 151.51956177]
[143.73663330 137.30476379]
[138.94711304 123.08996582]
[120.25619507 137.07786560]
[98.60283661 139.19837952]
[80.42874908 130.44894409]
[69.87975311 141.11283875]
[59.33075714 151.77674866]
[48.78176117 162.44064331]
[38.23276520 173.10453796]
[27.68377113 183.76843262]
[20.84314346 199.28108215]
[4.04306507 197.00212097]
[1.58224165 180.22770691]
[17.01987267 173.21943665]
[27.56886864 162.55554199]
[38.11786270 151.89164734]
[48.66685867 141.22775269]
[59.21585464 130.56385803]
[69.76484680 119.89995575]
[64.82681274 108.54515076]
[64.00473022 96.19039154]
[49.73888397 91.55513763]
[35.47303391 86.91988373]
[21.20718765 82.28462982]
[6.94134045 77.64937592]
[-7.32450771 73.01412201]
[-21.63973045 68.53367615]
[-36.00265121 64.20857239]
[-50.36557007 59.88346863]
[-64.72849274 55.55836105]
[-79.13742065 51.38910294]
[-93.59066772 47.37617874]
[-108.04392242 43.36325073]
[-121.67653656 51.35871506]
[-136.94860840 47.29185867]
[-144.79948425 33.57547379]
[-140.57139587 18.34725380]
[-126.77277374 10.64182568]
[-111.59010315 15.03068638]
[-104.03099823 28.91000175]
[-89.57774353 32.92292786]
[-75.12449646 36.93585205]
[-67.78365326 35.68535614]
[-60.40338516 41.19544220]
[-46.04046631 45.52054596]
[-31.67754555 49.84565353]
[-17.31462669 54.17075729]
[-9.94841862 53.07958984]
[-2.68925261 58.74827194]
[11.57659531 63.38352585]
[25.84244347 68.01878357]
[40.10829163 72.65403748]
[54.37413788 77.28929138]
[68.63998413 81.92454529]
[73.59174347 73.38473511]
[80.89190674 66.24188232]
[90.13490295 61.14466858]
[100.73612976 58.62116241]
[111.96841431 59.02969360]
[123.01184845 62.52082443]
[133.01359558 69.01409149]
[137.49403381 54.69886398]
[130.42227173 40.81982422]
[135.16999817 26.36597824]
[148.44511414 19.70965195]
[152.92556763 5.39442873]
[152.50663757 -3.80633044]
[157.66123962 -9.18049908]
[162.45077515 -23.39529610]
[167.24029541 -37.61009598]
[172.02981567 -51.82489014]
[176.81933594 -66.03968811]
[176.14695740 -82.98030090]
[192.23939514 -88.31602478]
[201.82142639 -74.32956696]
[191.03413391 -61.25016785]
[186.24461365 -47.03536987]
[181.45509338 -32.82057190]
[176.66555786 -18.60577393]
[171.87603760 -4.39097595]
[167.24078369 9.87487125]
[162.76034546 24.19009590]
[169.87176514 37.22709274]
[165.53189087 51.80858994]
[151.80926514 59.17930603]
[147.32882690 73.49452972]
[158.10636902 83.92738342]
[172.26844788 78.98416138]
[186.43052673 74.04093170]
[188.61674500 58.89236450]
[197.60183716 46.50177002]
[211.32107544 39.71641541]
[226.62188721 40.09552002]
[239.98826599 47.55197525]
[248.34869385 60.37233734]
[249.78202820 75.61058044]
[243.95889282 89.76507568]
[232.21739197 99.58321381]
[217.25564575 102.80886078]
[202.51176453 98.70079041]
[191.37374878 88.20301056]
[177.21166992 93.14624023]
[163.04959106 98.08946991]
[177.84790039 100.54103851]
[192.64620972 102.99260712]
[207.58786011 101.67096710]
[221.15739441 108.06375885]
[229.65211487 120.42659760]
[230.75408936 135.38606262]
[224.16261292 148.86021423]
[211.67631531 157.17237854]
[196.70227051 158.05444336]
[183.32641602 151.26571655]
[175.19819641 138.65731812]
[164.18005371 128.47888184]
[153.16191101 118.30044556]
[157.95143127 132.51524353]
[162.74095154 146.73004150]
[167.53048706 160.94483948]
[172.32000732 175.15963745]
[177.10952759 189.37443542]
[181.89904785 203.58923340]
[186.68856812 217.80403137]
[200.77848816 229.60629272]
[196.73648071 246.65095520]
[201.83283997 260.75866699]
[206.92919922 274.86636353]
[221.67210388 280.07986450]
[229.57008362 293.57638550]
[226.89395142 308.98327637]
[214.90728760 319.02587891]
[199.26983643 318.96237183]
[187.36511230 308.82275391]
[184.81417847 293.39465332]
[192.82150269 279.96270752]
[187.72514343 265.85501099]
[182.62878418 251.74731445]
[171.77922058 246.29414368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 53]
[34 52]
[35 51]
[36 50]
[37 48]
[38 47]
[39 46]
[67 92]
[68 91]
[71 88]
[72 87]
[74 86]
[75 85]
[76 84]
[77 83]
[78 82]
[93 109]
[94 108]
[95 107]
[131 143]
[132 142]
[133 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
