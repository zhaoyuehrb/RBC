%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCAGCGCUGAAGGAAGGUGGGAAGCCAUCAGAGCAGGAAGAUAAAAUAACUGCACAACUUACUCAAAACCCAGGACAAAUUCAGAGAGUCAAGGAUGGAACUUUGGGCUCCCCAGAGGCUGCCCCAGACACGAGGGAAGGCCACAGCACCCUCAAAGGAUCCAGACCGAGGGUUUCGGAGAGAUGGACAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[228.81513977 155.12727356]
[215.48260498 148.25387573]
[200.62472534 149.29908752]
[191.90408325 136.09829712]
[178.57154846 129.22489929]
[165.23901367 122.35149384]
[151.90647888 115.47809601]
[138.57394409 108.60469818]
[146.97906494 121.02862549]
[156.44650269 132.66339111]
[160.98652649 146.95983887]
[159.96629333 161.92509460]
[153.52803040 175.47311401]
[142.56918335 185.71536255]
[128.61735535 191.22412109]
[113.61734772 191.23150635]
[99.66010284 185.73648071]
[88.68926239 175.50244141]
[93.25368500 161.21377563]
[82.39767456 171.56495667]
[71.54166412 181.91613770]
[60.68565369 192.26731873]
[49.82964325 202.61851501]
[45.73115158 218.49725342]
[29.86023140 222.62591553]
[18.54352379 210.75729370]
[23.42268753 195.10079956]
[39.47845840 191.76249695]
[50.33446884 181.41131592]
[61.19047928 171.06013489]
[72.04648590 160.70893860]
[82.90249634 150.35775757]
[79.73286438 143.56045532]
[64.78993988 142.25314331]
[73.39358521 129.96583557]
[70.22395325 123.16852570]
[55.31637573 124.83110046]
[40.40879822 126.49366760]
[25.50122070 128.15625000]
[20.92747688 142.68211365]
[10.83609009 154.08753967]
[-3.02454782 160.39646912]
[-18.25299644 160.51583862]
[-32.21083450 154.42497253]
[-42.47978210 143.17915344]
[-47.28068542 128.72677612]
[-45.78175354 113.57180786]
[-38.24268723 100.33993530]
[-25.96967888 91.32366180]
[-11.08909798 88.08512115]
[3.82090521 91.18539429]
[16.17708015 100.08734894]
[23.83864784 113.24866486]
[38.74622345 111.58609009]
[53.65380096 109.92352295]
[68.56137848 108.26094818]
[72.20785522 101.70707703]
[58.32814407 96.01905060]
[44.44843674 90.33102417]
[30.56872559 84.64299011]
[16.68901634 78.95496368]
[1.68912959 78.89662170]
[-9.82752705 69.28586578]
[-12.56935501 54.53858566]
[-5.27655745 41.43075943]
[8.70001793 35.98508835]
[22.93850708 40.70371246]
[30.89681244 53.41905975]
[43.04780960 62.21413040]
[55.19880676 71.00920105]
[67.34980774 79.80426788]
[79.50080872 88.59933472]
[83.14727783 82.04546356]
[76.70035553 68.50157166]
[62.07841492 63.13159943]
[55.73325729 49.30432129]
[60.94281387 35.39762878]
[54.49588776 21.85372925]
[48.04896545 8.30983067]
[32.75276947 7.77594376]
[19.46252060 0.18464291]
[11.23221874 -12.71964645]
[9.95312500 -27.97161484]
[15.91916752 -42.06646729]
[27.75939369 -51.76531601]
[42.75300598 -54.83943176]
[57.45458221 -50.58240509]
[68.48580933 -39.97247314]
[73.31178284 -25.44771957]
[70.82354736 -10.34582329]
[61.59286118 1.86290705]
[68.03978729 15.40680504]
[74.48670959 28.95070267]
[88.56523895 33.67622757]
[95.29627228 47.31982803]
[90.24425507 62.05464554]
[96.69117737 75.59854126]
[104.19023132 75.47954559]
[103.95224762 60.48143387]
[103.71448517 45.48331833]
[118.71260834 45.24579239]
[118.95035553 60.24344635]
[119.18834686 75.24156189]
[126.68740082 75.12256622]
[132.70135498 61.38093567]
[138.71531677 47.63930893]
[144.72927856 33.89768219]
[150.74324036 20.15605545]
[156.75718689 6.41442919]
[162.77114868 -7.32719755]
[163.58244324 -24.26172256]
[180.07974243 -28.17008209]
[188.40226746 -13.39944077]
[176.51277161 -1.31323969]
[170.49882507 12.42838669]
[164.48486328 26.17001343]
[158.47090149 39.91164017]
[152.45693970 53.65326691]
[146.44299316 67.39489746]
[140.42903137 81.13652039]
[145.44734192 95.27216339]
[158.77987671 102.14556122]
[172.11241150 109.01895905]
[185.44494629 115.89235687]
[198.77748108 122.76575470]
[214.58898926 122.21217346]
[222.35600281 134.92134094]
[235.68853760 141.79473877]
[241.36535645 132.47062683]
[250.54971313 124.87970734]
[262.63534546 120.30685425]
[276.56048584 119.80403137]
[290.90084839 124.03435516]
[304.01400757 133.15330505]
[314.22088623 146.74336243]
[329.15295410 145.31753540]
[344.08505249 143.89169312]
[359.01712036 142.46585083]
[373.94921875 141.04000854]
[380.38696289 132.25611877]
[390.39242554 128.54736328]
[400.57199097 130.91377258]
[407.61294556 138.33705139]
[422.58273315 137.38568115]
[435.92901611 127.85632324]
[450.74072266 134.89521790]
[451.78082275 151.26133728]
[437.97933960 160.11865234]
[423.53408813 152.35548401]
[408.56430054 153.30683899]
[393.30404663 165.17164612]
[375.37506104 155.97209167]
[360.44296265 157.39793396]
[345.51089478 158.82376099]
[330.57879639 160.24960327]
[315.64672852 161.67544556]
[313.19372559 168.76295471]
[327.36874390 173.66897583]
[341.54367065 178.57521057]
[336.63720703 192.75007629]
[322.46270752 187.84399414]
[308.28768921 182.93797302]
[305.83468628 190.02546692]
[316.69070435 200.37666321]
[327.54672241 210.72784424]
[338.48449707 220.99258423]
[349.50338745 231.17022705]
[360.52224731 241.34785461]
[371.54113770 251.52549744]
[382.55999756 261.70315552]
[398.29779053 268.00854492]
[396.59545898 284.87683105]
[379.91516113 287.91061401]
[372.38235474 272.72201538]
[361.36349487 262.54437256]
[350.34460449 252.36674500]
[339.32574463 242.18910217]
[328.30685425 232.01145935]
[321.25268555 229.78002930]
[317.19552612 221.58384705]
[306.33950806 211.23266602]
[295.48352051 200.88148499]
[288.95877075 204.57983398]
[275.90930176 211.97654724]
[269.38455200 215.67489624]
[272.68920898 230.30635071]
[275.99386597 244.93778992]
[279.29852295 259.56924438]
[292.04086304 269.31671143]
[292.22061157 285.35873413]
[279.69992065 295.38928223]
[264.08358765 291.71377563]
[257.35113525 277.15173340]
[264.66708374 262.87390137]
[261.36242676 248.24244690]
[258.05776978 233.61100769]
[254.75311279 218.97955322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[4 125]
[5 124]
[6 123]
[7 122]
[8 121]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[36 56]
[37 55]
[38 54]
[39 53]
[73 97]
[74 96]
[77 93]
[78 92]
[79 91]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
[135 156]
[136 155]
[137 154]
[138 153]
[139 152]
[143 150]
[144 149]
[163 182]
[164 181]
[165 180]
[166 178]
[167 177]
[168 176]
[169 175]
[170 174]
[185 197]
[186 196]
[187 195]
[188 194]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
