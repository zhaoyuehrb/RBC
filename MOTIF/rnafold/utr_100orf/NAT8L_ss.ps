%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAUUGUGGGCCUCCCGACAUGGUCUGCGAGACGAAGAUCGUGGCCGCCGAGGACCAUGAGGCGCUGCCGGGGGCCAAGAAGGACGCGCUGCUCGCCG\
) } def
/len { sequence length } bind def

/coor [
[147.97587585 346.94549561]
[152.66983032 332.24957275]
[164.57839966 322.44192505]
[162.71691895 307.55789185]
[160.85543823 292.67382812]
[151.59851074 281.00512695]
[157.56341553 266.35144043]
[155.70193481 251.46740723]
[153.84045410 236.58335876]
[151.97897339 221.69931030]
[148.28479004 207.16133118]
[142.81501770 193.19416809]
[137.34524536 179.22700500]
[131.87547302 165.25984192]
[126.40570068 151.29267883]
[120.93592072 137.32551575]
[115.46614838 123.35836029]
[97.01654816 126.37836456]
[81.83422089 117.28981781]
[76.43662262 101.49170685]
[82.16386414 86.87885284]
[73.80607605 74.42303467]
[65.44829559 61.96721268]
[57.09050751 49.51139069]
[48.73272324 37.05557251]
[40.37493896 24.59975243]
[32.01715851 12.14393234]
[23.65937233 -0.31188723]
[14.72974014 -12.36434174]
[5.24769306 -23.98719788]
[-4.23435307 -35.61005402]
[-21.58689308 -37.00014877]
[-32.42144012 -50.19451523]
[-30.48647690 -66.81965637]
[-40.32540512 -78.14199829]
[-50.16433334 -89.46434021]
[-60.00326538 -100.78668976]
[-74.95652008 -108.77645874]
[-71.41846466 -125.35712433]
[-54.50634384 -126.54732513]
[-48.68091965 -110.62561798]
[-38.84199142 -99.30327606]
[-29.00306129 -87.98092651]
[-19.16413307 -76.65858459]
[-6.20682049 -77.54740906]
[5.03517866 -70.66116333]
[10.28378296 -58.35454178]
[7.38850355 -45.09210205]
[16.87055016 -33.46924591]
[26.35259628 -21.84638786]
[29.98617744 -21.17398453]
[33.43753815 -18.59662819]
[35.76136780 -14.23942375]
[36.11519241 -8.66967106]
[44.47297668 3.78614855]
[52.83076096 16.24196815]
[61.18854523 28.69778824]
[69.54632568 41.15360641]
[77.90411377 53.60942841]
[86.26189423 66.06524658]
[94.61968231 78.52106476]
[111.94190979 77.94723511]
[126.47795105 90.84944153]
[139.31002808 83.08169556]
[152.14210510 75.31394958]
[162.56094360 61.93918991]
[178.29722595 68.24835205]
[176.59086609 85.11621094]
[159.90985107 88.14602661]
[147.07777405 95.91377258]
[134.24569702 103.68151093]
[129.43331909 117.88858795]
[134.90309143 131.85574341]
[140.37286377 145.82290649]
[145.84263611 159.79006958]
[151.31240845 173.75723267]
[156.78218079 187.72439575]
[162.25195312 201.69155884]
[168.68334961 188.14027405]
[181.73576355 180.74874878]
[196.66503906 182.20356750]
[208.04489136 191.97593689]
[211.73907471 206.51391602]
[206.40490723 220.53341675]
[193.98115540 228.93881226]
[178.98347473 228.67498779]
[166.86302185 219.83782959]
[168.72450256 234.72187805]
[170.58598328 249.60592651]
[172.44746399 264.48995972]
[181.83753967 277.22326660]
[175.73948669 290.81234741]
[177.60096741 305.69641113]
[179.46244812 320.58044434]
[193.41963196 327.15316772]
[201.58831787 340.24041748]
[201.36189270 355.66610718]
[192.81262207 368.50799561]
[178.66853333 374.66821289]
[163.44297791 372.18112183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[7 90]
[8 89]
[9 88]
[10 87]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 50]
[30 49]
[31 48]
[34 44]
[35 43]
[36 42]
[37 41]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
