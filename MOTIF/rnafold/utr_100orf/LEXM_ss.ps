%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGCCCGGGUUGCCGUGGCAGCAGCGGAGGCGGGCAGCGCGCAGGCCUGCCAUGAGGGAAAGCCAGGAUGCCGCCGGAGCUCAUGGCUGGAACCGCGUCGGCUCCACGGCCACCAAGUGGUUCACCGGGGCGCCCUUCGGGGUGCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[56.41941833 211.05790710]
[58.82727051 196.25244141]
[66.95632172 183.64614868]
[79.44925690 175.34394836]
[94.22010803 172.73205566]
[108.80256653 176.24658203]
[120.76272583 185.30181885]
[115.98313904 171.08366394]
[111.20355225 156.86552429]
[106.42396545 142.64738464]
[101.64437866 128.42924500]
[88.33419037 125.97758484]
[77.65906525 117.65810394]
[72.03031158 105.35002136]
[72.71935272 91.83346558]
[59.98968887 83.89900970]
[47.26002502 75.96454620]
[34.53036118 68.03009033]
[21.80069542 60.09562683]
[9.07103252 52.16116714]
[2.39242697 51.54825592]
[-2.24429131 48.13556290]
[-4.00456858 43.63834000]
[-16.40222549 35.19451904]
[-28.79988480 26.75070000]
[-44.13430405 29.48809052]
[-56.58700562 20.74824905]
[-59.10218811 6.11235237]
[-71.49984741 -2.33146667]
[-83.89750671 -10.77528572]
[-99.65898132 -12.14873600]
[-105.82271576 -25.70814896]
[-118.22037506 -34.15196609]
[-130.61802673 -42.59578705]
[-143.01568604 -51.03960419]
[-156.67733765 -57.23309708]
[-171.19850159 -60.99288177]
[-185.71965027 -64.75267029]
[-200.24081421 -68.51245880]
[-214.76196289 -72.27224731]
[-223.91456604 -71.39414215]
[-229.53781128 -76.25817871]
[-243.97978210 -80.31150055]
[-259.72671509 -75.73260498]
[-271.37677002 -87.27418518]
[-266.94537354 -103.06326294]
[-250.99116516 -106.85737610]
[-239.92646790 -94.75347137]
[-225.48448181 -90.70015717]
[-211.00218201 -86.79340363]
[-196.48101807 -83.03361511]
[-181.95986938 -79.27382660]
[-167.43870544 -75.51403809]
[-152.91755676 -71.75424957]
[-148.57087708 -77.86624146]
[-160.79472351 -86.55977631]
[-152.10099792 -98.78349304]
[-139.87753296 -90.09022522]
[-135.53085327 -96.20221710]
[-143.84860229 -108.68480682]
[-159.23381042 -113.23178864]
[-165.13761902 -128.14904785]
[-157.03112793 -141.99334717]
[-141.13294983 -144.14450073]
[-129.63880920 -132.95236206]
[-131.36601257 -117.00255585]
[-123.04826355 -104.51995850]
[-120.08862305 -93.45782471]
[-120.32579041 -83.10563660]
[-123.28223419 -74.26927948]
[-128.29516602 -67.57642365]
[-134.57186890 -63.43726349]
[-122.17421722 -54.99344254]
[-109.77655792 -46.54962540]
[-97.37889862 -38.10580444]
[-82.50418091 -37.33631516]
[-75.45368958 -23.17294312]
[-63.05602646 -14.72912502]
[-50.65837097 -6.28530550]
[-36.11820602 -9.30511665]
[-23.42493439 -0.91849285]
[-20.35606575 14.35304260]
[-7.95840740 22.79686165]
[4.43925047 31.24068069]
[17.00549316 39.43150330]
[29.73515701 47.36596298]
[42.46482086 55.30042267]
[55.19448471 63.23488235]
[67.92414856 71.16934204]
[80.65380859 79.10380554]
[95.62116241 71.86191559]
[112.08138275 74.21305847]
[124.42272949 85.35567474]
[138.86470032 81.30235291]
[153.30667114 77.24903870]
[167.74865723 73.19572449]
[182.19062805 69.14241028]
[196.63259888 65.08909607]
[211.07456970 61.03577805]
[216.82009888 43.88995361]
[231.55278015 33.67704391]
[249.31170654 34.30145645]
[263.04663086 45.32798004]
[277.31246948 40.69272614]
[291.57833862 36.05747223]
[305.84417725 31.42221642]
[316.40927124 18.87985229]
[332.50411987 22.02429581]
[337.57174683 37.62081146]
[326.39898682 49.62504196]
[310.47943115 45.68806458]
[296.21359253 50.32331848]
[281.94772339 54.95857239]
[267.68188477 59.59382629]
[265.66427612 71.63166046]
[258.65960693 81.71569061]
[247.95779419 87.88066864]
[235.57617188 88.89313507]
[223.87940979 84.49770355]
[215.12789917 75.47775269]
[200.68591309 79.53106689]
[186.24394226 83.58438873]
[171.80197144 87.63770294]
[157.36000061 91.69101715]
[142.91801453 95.74433136]
[128.47604370 99.79764557]
[125.17353058 113.31237030]
[115.86252594 123.64965820]
[120.64211273 137.86779785]
[125.42169952 152.08593750]
[130.20127869 166.30407715]
[134.98086548 180.52223206]
[141.58677673 193.98928833]
[149.90452576 206.47187805]
[158.22227478 218.95446777]
[166.54002380 231.43707275]
[174.85777283 243.91966248]
[183.17552185 256.40225220]
[198.10620117 263.18508911]
[199.42790222 279.53088379]
[185.78097534 288.62448120]
[171.20420837 281.11117554]
[170.69293213 264.72000122]
[162.37518311 252.23741150]
[154.05743408 239.75480652]
[145.73968506 227.27221680]
[137.42193604 214.78962708]
[129.10418701 202.30703735]
[128.94427490 217.30618286]
[122.79801178 230.98915100]
[111.69166565 241.07127380]
[97.47967529 245.86911011]
[82.53503418 244.58157349]
[69.35307312 237.42364502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 132]
[8 131]
[9 130]
[10 129]
[11 128]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[23 84]
[24 83]
[25 82]
[28 79]
[29 78]
[30 77]
[32 75]
[33 74]
[34 73]
[35 72]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[42 49]
[43 48]
[59 67]
[60 66]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[103 114]
[104 113]
[105 112]
[106 111]
[133 148]
[134 147]
[135 146]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
