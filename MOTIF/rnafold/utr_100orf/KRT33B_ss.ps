%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUCAGGUUUUGAAACUGACUUCCAGAGCUCCACUGCCUCCCUGCACCAUGCCCUACAACUUCUGCCUGCCCAGCCUGAGCUGCCGCACCAGCUGCUCCUCCCGGCCCUGUGUGCCCCCCAGCUGCCACGGCUACACCCUGCCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[93.76363373 123.98902130]
[85.77371216 136.68394470]
[77.78379822 149.37887573]
[69.79388428 162.07380676]
[61.93645859 174.85116577]
[54.21237183 187.70956421]
[46.48828888 200.56796265]
[38.76420212 213.42637634]
[45.68668747 227.21342468]
[44.03368759 242.55197144]
[34.33267212 254.54754639]
[19.67919540 259.37240601]
[4.74913406 255.48693848]
[-5.69338703 244.13101196]
[-8.31619740 228.92823792]
[-2.28236628 214.72976685]
[10.48273182 206.06628418]
[25.90579987 205.70228577]
[33.62988663 192.84388733]
[41.35396957 179.98548889]
[49.07805634 167.12707520]
[49.83119583 159.72583008]
[57.09895325 154.08389282]
[65.08886719 141.38896179]
[73.07878876 128.69403076]
[81.06870270 115.99909973]
[75.23506165 98.96892548]
[82.46414948 82.48260498]
[75.55714417 69.16744995]
[68.65014648 55.85229492]
[61.74314880 42.53713608]
[50.94757462 44.62847900]
[39.60872269 42.81542969]
[29.15056992 36.99277496]
[20.99566269 27.57606125]
[16.37523270 15.48430729]
[16.15246201 2.05403090]
[1.44450021 -0.89145160]
[-13.26346111 -3.83693409]
[-26.27502632 5.13383627]
[-41.80356216 2.19443178]
[-50.63626480 -10.91125011]
[-47.53284836 -26.40784264]
[-34.33451462 -35.10149002]
[-18.87159920 -31.83440781]
[-10.31797886 -18.54489517]
[4.38998270 -15.59941292]
[19.09794426 -12.65393066]
[25.27373123 -16.90947533]
[13.77841949 -26.54575157]
[2.28310847 -36.18202972]
[-9.21220303 -45.81830597]
[-22.94969177 -51.84170532]
[-31.74221039 -63.99455261]
[-33.16603851 -78.92681885]
[-26.82868767 -92.52233887]
[-14.47709179 -101.03339386]
[0.48394355 -102.11386108]
[13.93030643 -95.46590424]
[22.15541267 -82.92208099]
[22.89198875 -67.94032288]
[27.80309296 -53.76706696]
[32.71419907 -39.59381866]
[37.62530136 -25.42056656]
[43.80109024 -29.67611122]
[46.28620911 -44.46881866]
[48.77132797 -59.26152420]
[41.92238617 -70.24086761]
[44.33942413 -82.54439545]
[54.18200302 -89.64587402]
[56.97432709 -104.38368225]
[59.76665115 -119.12148285]
[53.27205276 -136.32032776]
[65.15994263 -149.19192505]
[67.64505768 -163.98463440]
[70.13018036 -178.77734375]
[72.61529541 -193.57003784]
[66.37814331 -208.73678589]
[76.60723114 -221.55465698]
[92.77974701 -218.83773804]
[98.25879669 -203.38095093]
[87.40800476 -191.08493042]
[84.92288971 -176.29222107]
[82.43776703 -161.49951172]
[79.95265198 -146.70680237]
[86.72631073 -136.63581848]
[84.73226929 -124.25668335]
[74.50445557 -116.32916260]
[71.71213531 -101.59135437]
[68.91980743 -86.85354614]
[75.61363220 -70.66118622]
[63.56403351 -56.77640533]
[61.07891464 -41.98369980]
[58.59379578 -27.19099236]
[82.77741241 -11.30804348]
[88.36739349 14.88957882]
[75.05830383 35.63013840]
[81.96530151 48.94529343]
[88.87230682 62.26044846]
[95.77930450 75.57560730]
[111.53144073 78.05937195]
[122.51047516 89.62483978]
[124.17192841 105.48480988]
[137.10998535 113.07471466]
[150.04803467 120.66461945]
[162.98609924 128.25453186]
[176.00241089 135.70944214]
[189.09556580 143.02854919]
[203.13485718 136.68786621]
[218.04151917 139.79347229]
[228.14169312 150.94921875]
[229.71733093 165.73620605]
[242.81048584 173.05531311]
[255.90364075 180.37442017]
[268.99679565 187.69352722]
[282.16537476 194.87603760]
[295.40795898 201.92117310]
[308.65054321 208.96630859]
[320.62722778 199.55999756]
[335.39596558 195.84457397]
[350.39797974 198.46372986]
[363.03402710 206.96371460]
[371.11489868 219.87182617]
[373.24050903 234.95167542]
[369.04260254 249.59056091]
[359.24847412 261.25222778]
[345.55499268 267.91622925]
[330.33468628 268.42797852]
[316.22451782 262.69879150]
[305.66918945 251.72132874]
[300.49749756 237.39746094]
[301.60540771 222.20889282]
[288.36282349 215.16375732]
[275.12023926 208.11862183]
[267.68984985 207.75129700]
[261.67767334 200.78668213]
[248.58453369 193.46757507]
[235.49137878 186.14846802]
[222.39822388 178.82936096]
[208.97694397 185.23306274]
[194.18345642 182.47319031]
[183.72949219 171.40214539]
[181.77645874 156.12170410]
[168.68330383 148.80259705]
[161.26216125 148.28076172]
[155.39619446 141.19258118]
[142.45812988 133.60267639]
[129.52008057 126.01277161]
[116.58202362 118.42285919]
[109.73880005 122.79300690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 21]
[6 20]
[7 19]
[8 18]
[28 100]
[29 99]
[30 98]
[31 97]
[37 48]
[38 47]
[39 46]
[65 94]
[66 93]
[67 92]
[70 90]
[71 89]
[72 88]
[74 85]
[75 84]
[76 83]
[77 82]
[103 149]
[104 148]
[105 147]
[106 146]
[107 144]
[108 143]
[112 139]
[113 138]
[114 137]
[115 136]
[116 134]
[117 133]
[118 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
