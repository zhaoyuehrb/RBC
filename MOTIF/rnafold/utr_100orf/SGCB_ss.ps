%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:57:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUCGCGGAGGGGCGGGCACAGUCGGGCGGGGAGCUCGGCGGCGGCGGGCGCGGGAAGAUGGCGGCAGCGGCGGCGGCGGCUGCAGAACAGCAAAGUUCCAAUGGUCCUGUAAAGAAGUCCAUGCGUGAGAAGGCUGUUGAGAGAAGGAGUGUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[196.93261719 299.65136719]
[190.42436218 286.13684082]
[172.83883667 281.18466187]
[164.26539612 264.69247437]
[170.52531433 246.85337830]
[163.49473572 233.60305786]
[156.46414185 220.35273743]
[149.43356323 207.10243225]
[142.40296936 193.85211182]
[127.65402985 191.95300293]
[116.72217560 181.61091614]
[113.94380188 166.63981628]
[120.59044647 152.74275208]
[113.55986786 139.49243164]
[106.52928162 126.24211884]
[99.49869537 112.99180603]
[95.58515930 113.75775146]
[91.25579834 113.27490234]
[86.91984558 111.38861847]
[72.43729401 115.29445648]
[66.63495636 131.15678406]
[52.67017746 140.35948181]
[36.13652039 139.45283508]
[23.51716042 128.99005127]
[9.11357117 133.17773438]
[-5.29001713 137.36540222]
[-19.69360542 141.55308533]
[-34.09719467 145.74075317]
[-48.50078201 149.92843628]
[-62.90436935 154.11611938]
[-71.85948181 167.42721558]
[-87.86096191 168.58149719]
[-98.63383484 156.69349670]
[-95.91407776 140.88265991]
[-81.78806305 133.27770996]
[-67.09204865 139.71252441]
[-52.68846130 135.52484131]
[-38.28487015 131.33717346]
[-23.88128281 127.14949036]
[-9.47769451 122.96181488]
[4.92589426 118.77413940]
[19.32948303 114.58646393]
[22.67682457 101.63335419]
[32.07199478 91.95704651]
[45.12903214 88.16890717]
[58.45496750 91.36502838]
[68.53144836 100.81190491]
[83.01400757 96.90605927]
[91.90167236 84.82263184]
[91.31642914 69.83405304]
[90.73118591 54.84547043]
[90.14595032 39.85689163]
[75.97246552 30.67033195]
[70.10795593 15.00788784]
[74.67095947 -0.90948564]
[87.67948914 -10.88426590]
[86.80190277 -25.85857201]
[85.92431641 -40.83287811]
[85.04673767 -55.80718613]
[68.44946289 -68.63895416]
[66.63349152 -89.24720001]
[80.33995819 -104.35261536]
[78.29745483 -119.21290588]
[63.29651642 -126.97513580]
[55.93421555 -141.99183655]
[58.92499924 -158.27798462]
[70.90001678 -169.47250366]
[68.56795502 -184.29010010]
[66.23589325 -199.10771179]
[63.90383148 -213.92532349]
[61.57176971 -228.74291992]
[51.78302765 -241.17237854]
[57.44752884 -254.94781494]
[55.11546707 -269.76541138]
[44.39236832 -282.17297363]
[50.03091431 -297.57226562]
[66.23065948 -300.12185669]
[76.32669067 -287.19891357]
[69.93307495 -272.09747314]
[72.26513672 -257.27987671]
[81.88707733 -245.91027832]
[76.38938141 -231.07498169]
[78.72144318 -216.25738525]
[81.05349731 -201.43977356]
[83.38555908 -186.62216187]
[85.71762085 -171.80456543]
[98.14325714 -166.84561157]
[106.55340576 -156.30191040]
[108.65946960 -142.87057495]
[103.80335999 -130.05596924]
[93.15774536 -121.25540924]
[95.20024872 -106.39511871]
[104.13635254 -103.26963043]
[111.34588623 -97.04474640]
[115.79486847 -88.55688477]
[116.82465363 -78.97074127]
[114.24913025 -69.61950684]
[108.38658905 -61.81947708]
[100.02104187 -56.68476868]
[100.89862823 -41.71046066]
[101.77620697 -26.73615646]
[102.65379333 -11.76184940]
[114.53728485 -5.61609507]
[121.88036346 5.69669867]
[122.66806793 19.26931000]
[116.58677673 31.54993439]
[105.13452911 39.27165222]
[105.71976471 54.26023102]
[106.30500793 69.24880981]
[106.89025116 84.23738861]
[113.07343292 70.57106781]
[125.44727325 62.09238434]
[140.42413330 61.25961685]
[153.66168213 68.31421661]
[161.32186890 81.21079254]
[161.18370056 96.21015167]
[153.28726196 108.96343994]
[139.92201233 115.77299500]
[124.96303558 114.66448975]
[112.74900818 105.96121979]
[119.77959442 119.21153259]
[126.81018066 132.46185303]
[133.84075928 145.71217346]
[149.07476807 147.99940491]
[159.91419983 158.69334412]
[162.34939575 173.54371643]
[155.65328979 186.82153320]
[162.68386841 200.07183838]
[169.71446228 213.32215881]
[176.74504089 226.57247925]
[183.77563477 239.82279968]
[195.66198730 241.04162598]
[205.37123108 247.79765320]
[210.53895569 258.30380249]
[209.97575378 269.87823486]
[203.93890381 279.62860107]
[210.44715881 293.14312744]
[217.08695984 306.59350586]
[223.85766602 319.97848511]
[230.62837219 333.36346436]
[237.39907837 346.74844360]
[244.16978455 360.13339233]
[250.94050598 373.51837158]
[266.24511719 373.68432617]
[279.71405029 380.95388794]
[288.25222778 393.65655518]
[289.89767456 408.87335205]
[284.27224731 423.10757446]
[272.66864014 433.08831787]
[257.75329590 436.52203369]
[242.95361328 432.61975098]
[231.67047119 422.27810669]
[226.49664307 407.87359619]
[228.62106323 392.71621704]
[237.55552673 380.28909302]
[230.78482056 366.90411377]
[224.01411438 353.51913452]
[217.24339294 340.13415527]
[210.47268677 326.74920654]
[203.70198059 313.36422729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[5 131]
[6 130]
[7 129]
[8 128]
[9 127]
[13 123]
[14 122]
[15 121]
[16 120]
[19 48]
[20 47]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[49 110]
[50 109]
[51 108]
[52 107]
[56 102]
[57 101]
[58 100]
[59 99]
[62 92]
[63 91]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[73 80]
[74 79]
[138 160]
[139 159]
[140 158]
[141 157]
[142 156]
[143 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
