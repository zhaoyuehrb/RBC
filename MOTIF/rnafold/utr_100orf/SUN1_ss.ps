%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGGUUUGAAGUGGUGAACAUGGAUUUUUCUCGGCUUCACAUGUACAGUCCUCCCCAGUGUGUGCCGGAGAACACGGGCUACACGUAUGCGCUCAGUUCCAGCUAUUCUUCAGAUGCUC\
) } def
/len { sequence length } bind def

/coor [
[97.38885498 409.08441162]
[87.31201172 397.40277100]
[85.17302704 382.12438965]
[91.65444946 368.12460327]
[104.68807983 359.87060547]
[104.68807983 344.87060547]
[104.68807983 329.87060547]
[104.68807983 314.87060547]
[104.68807983 299.87060547]
[104.68807983 284.87060547]
[104.68807983 269.87060547]
[104.68807983 254.87062073]
[104.29866791 239.87567139]
[103.52011108 224.89588928]
[102.74155426 209.91610718]
[101.96299744 194.93632507]
[100.79582214 179.98181152]
[99.24080658 165.06263733]
[97.68579102 150.14344788]
[96.13077545 135.22427368]
[85.09191895 132.14761353]
[75.61214447 125.70899963]
[68.68282318 116.58175659]
[65.02862549 105.72041321]
[65.03170013 94.26083374]
[68.69171906 83.40145111]
[75.62593079 74.27792358]
[67.84664917 61.45284653]
[60.06735992 48.62776566]
[52.28807449 35.80268478]
[44.50878525 22.97760391]
[37.29378891 17.17558098]
[36.69900894 9.71704769]
[29.25529289 -3.30566621]
[21.81157684 -16.32838058]
[14.36785889 -29.35109329]
[2.08227181 -33.53089142]
[-3.82757735 -44.63027954]
[-0.64650625 -56.37950897]
[-7.74963617 -69.59107971]
[-14.85276699 -82.80264282]
[-21.95589638 -96.01421356]
[-29.05902672 -109.22578430]
[-44.11714935 -107.32383728]
[-58.84454727 -110.99374390]
[-71.24945831 -119.73917389]
[-79.65422058 -132.37738037]
[-82.92216492 -147.19915771]
[-80.61132050 -162.19998169]
[-73.03421783 -175.35108948]
[-61.21559143 -184.87393188]
[-46.75381851 -189.48060608]
[-31.60472870 -188.54811096]
[-17.81711769 -182.20254517]
[-7.25564432 -171.30210876]
[-1.34866166 -157.32096863]
[-0.89504069 -142.14999390]
[-5.95613003 -127.84091187]
[-15.84745789 -116.32891083]
[-8.74432850 -103.11734772]
[-1.64119804 -89.90577698]
[5.46193218 -76.69420624]
[12.56506252 -63.48263931]
[27.94764519 -55.14430237]
[27.39057350 -36.79481125]
[34.83428955 -23.77209663]
[42.27800751 -10.74938297]
[49.72172546 2.27333045]
[57.33386612 15.19831657]
[65.11315155 28.02339745]
[72.89244080 40.84848022]
[80.67173004 53.67356110]
[88.45101166 66.49864197]
[101.01828766 64.57849121]
[113.45449829 67.21743774]
[124.15898895 74.07581329]
[131.75398254 84.27088928]
[146.30000305 80.60847473]
[160.84602356 76.94606781]
[175.39204407 73.28366089]
[178.91860962 58.38997269]
[188.97142029 46.84876251]
[203.24041748 41.31210709]
[218.44667053 43.05229568]
[231.09591675 51.66944504]
[238.28143311 65.18339539]
[238.35206604 80.48873901]
[231.29154968 94.06842804]
[218.72236633 102.80193329]
[203.53282166 104.68237305]
[189.21333313 99.27763367]
[179.05445862 87.82968140]
[164.50843811 91.49208832]
[149.96240234 95.15450287]
[135.41638184 98.81690979]
[129.04223633 120.30439758]
[111.04994965 133.66925049]
[112.60496521 148.58843994]
[114.15998077 163.50761414]
[115.71499634 178.42678833]
[119.38767242 184.15950012]
[119.50182343 189.99478149]
[116.94277954 194.15777588]
[117.72133636 209.13755798]
[118.49989319 224.11734009]
[119.27845001 239.09712219]
[122.64862061 245.01271057]
[122.45974731 250.84605408]
[119.68807983 254.87062073]
[119.68807983 269.87060547]
[119.68807983 284.87060547]
[119.68807983 299.87060547]
[119.68807983 314.87060547]
[119.68807983 329.87060547]
[119.68807983 344.87060547]
[119.68807983 359.87060547]
[132.72171021 368.12460327]
[139.20312500 382.12438965]
[137.06414795 397.40277100]
[126.98730469 409.08441162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 106]
[14 105]
[15 104]
[16 103]
[17 100]
[18 99]
[19 98]
[20 97]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[33 68]
[34 67]
[35 66]
[36 65]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[77 95]
[78 94]
[79 93]
[80 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
