%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUUUUCCCCAAGCGAAGCAUGAACAGUUGCUAAGUGGAAAAUGGAGGCUGAAUUUUACAUGGUGAUUCUUACCUGCUUGAUCUUCAGGAACUCAGAAGGGUUUCAGAUUGUCCAUGUCCAGAAACAACAGUGUCUUUUCA\
) } def
/len { sequence length } bind def

/coor [
[28.34943008 248.05105591]
[13.44986916 249.78399658]
[-0.80236262 245.10704041]
[-11.77815723 234.88294983]
[-17.45281029 220.99777222]
[-16.77952003 206.01289368]
[-9.88444328 192.69491577]
[-23.51670837 198.95281982]
[-37.14897156 205.21072388]
[-50.78123474 211.46862793]
[-64.41349792 217.72653198]
[-78.04576874 223.98443604]
[-80.50952911 227.75990295]
[-83.74132538 230.26020813]
[-87.23040771 231.40068054]
[-90.49286652 231.27655029]
[-93.12969971 230.13755798]
[-107.24945831 235.20039368]
[-114.05210114 249.21331787]
[-128.44366455 254.14662170]
[-141.76091003 247.57498169]
[-155.88067627 252.63781738]
[-170.00044250 257.70068359]
[-184.12019348 262.76351929]
[-188.33912659 277.69604492]
[-200.55023193 287.27041626]
[-216.05809021 287.80508423]
[-228.89961243 279.09448242]
[-234.13697815 264.48797607]
[-229.75631714 249.60209656]
[-217.44206238 240.16076660]
[-201.92932129 239.79434204]
[-189.18304443 248.64375305]
[-175.06327820 243.58090210]
[-160.94352722 238.51806641]
[-146.82376099 233.45521545]
[-140.71658325 219.91867065]
[-126.46926880 214.58309937]
[-112.31230164 221.08064270]
[-98.19254303 216.01779175]
[-84.30367279 210.35217285]
[-70.67140198 204.09426880]
[-57.03913879 197.83636475]
[-43.40687561 191.57846069]
[-29.77461243 185.32055664]
[-16.14234734 179.06265259]
[-10.75968361 170.98146057]
[0.03252695 169.17460632]
[11.81727505 159.89453125]
[23.60202217 150.61445618]
[28.81435585 136.66165161]
[44.44330597 134.20268250]
[56.22805405 124.92261505]
[68.01280212 115.64254761]
[79.79754639 106.36248016]
[81.34785461 89.96417999]
[94.17823792 79.63514709]
[110.52939606 81.62197113]
[122.11174011 72.09048462]
[133.69409180 62.55900192]
[145.27644348 53.02751541]
[156.54516602 43.12722015]
[167.48852539 32.86843109]
[178.43190002 22.60963821]
[189.37525940 12.35084724]
[200.31861877 2.09205627]
[211.26197815 -8.16673470]
[207.88215637 -23.08397484]
[212.39302063 -37.59428024]
[223.48747253 -47.83045959]
[238.11807251 -51.11704636]
[252.33360291 -46.66907883]
[263.27694702 -56.92786789]
[274.22033691 -67.18666077]
[279.10449219 -86.69523621]
[298.03134155 -90.44037628]
[308.52322388 -101.16047668]
[319.01510620 -111.88057709]
[329.50695801 -122.60067749]
[329.50808716 -138.17750549]
[340.30105591 -148.89976501]
[355.15118408 -148.80270386]
[365.64303589 -159.52281189]
[376.13491821 -170.24290466]
[386.62680054 -180.96301270]
[396.88558960 -191.90637207]
[406.90655518 -203.06793213]
[416.92749023 -214.22949219]
[423.00994873 -230.05479431]
[439.90057373 -228.59092712]
[443.16970825 -211.95515442]
[428.08905029 -204.20852661]
[418.06811523 -193.04696655]
[408.04714966 -181.88540649]
[407.41424561 -177.08499146]
[403.71209717 -172.65336609]
[397.34689331 -170.47113037]
[386.85501099 -159.75103760]
[376.36315918 -149.03092957]
[365.87127686 -138.31083679]
[366.28781128 -123.46623230]
[355.80026245 -112.44506836]
[340.22708130 -112.10880280]
[329.73519897 -101.38870239]
[319.24331665 -90.66860199]
[308.75143433 -79.94850159]
[309.77658081 -69.69293213]
[304.84994507 -60.38973618]
[295.40344238 -55.26380920]
[284.47912598 -56.24329758]
[273.53576660 -45.98450470]
[262.59237671 -35.72571564]
[266.11407471 -21.25286674]
[261.89053345 -6.86475611]
[250.95999146 3.54627585]
[236.18891907 7.11169720]
[221.52076721 2.77662826]
[210.57740784 13.03541946]
[199.63404846 23.29421043]
[188.69068909 33.55300140]
[177.74731445 43.81179428]
[166.80395508 54.07058334]
[166.34756470 57.63603210]
[164.09655762 61.14587021]
[160.10215759 63.73817062]
[154.80792236 64.60986328]
[143.22557068 74.14134979]
[131.64323425 83.67283630]
[120.06087494 93.20431519]
[120.33704376 105.91816711]
[113.28213501 116.49863434]
[101.43930054 121.13169861]
[89.07762146 118.14722443]
[77.29286957 127.42729187]
[65.50812531 136.70736694]
[53.72337723 145.98744202]
[47.66812134 160.60401917]
[32.88209534 162.39921570]
[21.09734535 171.67927551]
[9.31259823 180.95935059]
[24.31245995 180.89494324]
[37.95582962 187.12858582]
[47.72591782 198.51039124]
[51.82043457 212.94073486]
[49.48406601 227.75767517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[17 40]
[18 39]
[21 36]
[22 35]
[23 34]
[24 33]
[48 140]
[49 139]
[50 138]
[52 136]
[53 135]
[54 134]
[55 133]
[58 129]
[59 128]
[60 127]
[61 126]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
[67 117]
[72 112]
[73 111]
[74 110]
[76 106]
[77 105]
[78 104]
[79 103]
[82 100]
[83 99]
[84 98]
[85 97]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
