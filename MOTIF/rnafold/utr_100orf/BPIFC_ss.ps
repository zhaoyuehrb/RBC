%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGUACAAAGACAAUCCCAGUCCUCUGGGGAUGUUUCCUCCUGUGGAAUCUCUAUGUCUCAUCCUCUCAGACCAUUUACCCUGGAAUCAAGGCAAGGA\
) } def
/len { sequence length } bind def

/coor [
[130.39041138 125.48049927]
[124.04887390 132.00030518]
[116.32199860 136.95631409]
[107.59238434 140.05766296]
[98.30278015 141.10643005]
[88.93365479 140.00985718]
[79.97832489 136.78713989]
[71.91702271 131.57040405]
[65.19113922 124.59970093]
[60.17913437 116.21211243]
[57.17532730 106.82559204]
[56.37288666 96.91811371]
[41.38920975 97.61772156]
[26.40553474 98.31732941]
[11.42185879 99.01693726]
[-2.00242472 107.38945770]
[-15.07671738 100.25418091]
[-30.06039238 100.95378876]
[-45.04407120 101.65339661]
[-60.02774429 102.35300446]
[-75.01142120 103.05260468]
[-89.99509430 103.75221252]
[-103.49967194 113.05590057]
[-118.19095612 105.76905060]
[-118.95581818 89.38774872]
[-105.00743103 80.76367188]
[-90.69470215 88.76853943]
[-75.71102905 88.06893158]
[-60.72735214 87.36932373]
[-45.74367523 86.66971588]
[-30.75999832 85.97011566]
[-15.77632236 85.27050781]
[-3.42377210 76.94802094]
[10.72225285 84.03325653]
[25.70592880 83.33364868]
[40.68960571 82.63404846]
[55.67328262 81.93444061]
[63.44102478 69.10236359]
[57.11349869 55.50227737]
[50.78597641 41.90218735]
[35.85541916 36.72009659]
[29.03749084 22.46206856]
[34.37714767 7.58713484]
[48.70646286 0.92033219]
[63.52410889 6.41695547]
[70.03903961 20.81595612]
[64.38606262 35.57466125]
[70.71359253 49.17475128]
[77.04111481 62.77484131]
[97.50884247 57.54171753]
[117.43194580 62.52962112]
[132.15036011 75.99690247]
[138.49644470 94.28927612]
[153.48011780 94.98887634]
[168.46379089 95.68848419]
[182.60981750 88.60324860]
[194.96237183 96.92573547]
[209.94604492 97.62534332]
[224.92971802 98.32495117]
[239.91339111 99.02455139]
[254.89707947 99.72415924]
[261.88845825 87.49806976]
[273.43261719 79.54695129]
[287.21636963 77.39402008]
[300.50799561 81.40760803]
[310.69845581 90.73968506]
[315.81362915 103.50424957]
[330.76831055 104.66950226]
[339.74734497 102.18561554]
[346.16757202 106.11066437]
[361.07876587 107.74044800]
[375.98995972 109.37023163]
[385.00430298 96.93491364]
[399.03515625 90.68743896]
[414.30828857 92.30834961]
[426.71527100 101.36162567]
[432.91873169 115.41198730]
[431.24996948 130.67994690]
[422.15783691 143.05851746]
[408.08810425 149.21791077]
[392.82543945 147.50128174]
[380.47543335 138.37040710]
[374.36016846 124.28142548]
[359.44897461 122.65164948]
[344.53778076 121.02186584]
[329.60305786 119.62417603]
[314.64837646 118.45891571]
[305.90405273 131.94993591]
[291.48941040 139.27781677]
[275.25048828 138.38244629]
[261.57290649 129.41192627]
[254.19746399 114.70783234]
[239.21379089 114.00823212]
[224.23011780 113.30862427]
[209.24644470 112.60901642]
[194.26275635 111.90941620]
[181.18847656 119.04468536]
[167.76419067 110.67216492]
[152.78050232 109.97255707]
[137.79682922 109.27294922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 37]
[13 36]
[14 35]
[15 34]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[38 49]
[39 48]
[40 47]
[53 100]
[54 99]
[55 98]
[57 96]
[58 95]
[59 94]
[60 93]
[61 92]
[67 87]
[68 86]
[70 85]
[71 84]
[72 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
