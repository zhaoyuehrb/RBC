%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGAUAAUGAAAAGGCCUGGUGGCAGCAAUGGACCUCCCAUACAGGCCUCGAGGGGUGGGGCGGGACUCAGGAGGACCGUAUGGGGUUUGGAGGGG\
) } def
/len { sequence length } bind def

/coor [
[79.92903900 149.63237000]
[79.50518036 134.63836670]
[84.38522339 120.45438385]
[93.94171906 108.89778900]
[79.24725342 111.90988922]
[64.55279541 114.92199707]
[55.83414459 127.83024597]
[40.88896179 130.67562866]
[28.63665009 122.28417969]
[13.94218731 125.29627991]
[1.97681832 135.64715576]
[-12.04491425 130.62318420]
[-26.73937607 133.63528442]
[-30.32329559 144.01113892]
[-37.90505600 151.83619690]
[-48.00980759 155.68769836]
[-58.71346283 154.90631104]
[-68.00902557 149.70790100]
[-74.18288422 141.13002014]
[-89.09408569 142.75981140]
[-104.00527954 144.38958740]
[-116.90531921 154.51484680]
[-132.02120972 148.15545654]
[-133.80300903 131.85339355]
[-120.41776276 122.37882996]
[-105.63506317 129.47839355]
[-90.72386169 127.84860992]
[-75.81266785 126.21882629]
[-65.01335907 110.19235229]
[-45.65979767 106.95029449]
[-29.75148201 118.94082642]
[-15.05702019 115.92871857]
[-4.14269686 105.79329681]
[10.93008137 110.60182190]
[25.62454414 107.58971405]
[33.58726883 95.05454254]
[48.44663239 91.79050446]
[61.54068756 100.22753906]
[76.23515320 97.21543121]
[90.92961121 94.20332336]
[104.52970123 87.87580109]
[116.29861450 78.57565308]
[128.06753540 69.27551270]
[139.83644104 59.97536850]
[151.60536194 50.67522430]
[163.37426758 41.37508392]
[175.14318848 32.07493973]
[180.04754639 24.15408516]
[187.42582703 22.67540932]
[199.47827148 13.74577522]
[211.39039612 4.62978506]
[223.15931702 -4.67035818]
[234.92822266 -13.97050095]
[246.69714355 -23.27064514]
[246.73513794 -36.84538269]
[254.51828003 -47.72764206]
[266.98239136 -52.02283478]
[279.44177246 -48.35598373]
[291.49423218 -57.28561401]
[303.54669189 -66.21524811]
[315.59915161 -75.14488220]
[315.31970215 -90.65943909]
[324.24041748 -103.35591125]
[338.93109131 -108.35224915]
[353.74288940 -103.72724915]
[362.98034668 -91.25932312]
[363.09146118 -75.74264526]
[354.03353882 -63.14369583]
[339.28952026 -58.30702209]
[324.52877808 -63.09242630]
[312.47631836 -54.16279221]
[300.42385864 -45.23316193]
[288.37139893 -36.30352783]
[286.66937256 -19.65292931]
[273.24041748 -9.11054707]
[255.99728394 -11.50173092]
[244.22837830 -2.20158720]
[232.45945740 7.09855604]
[220.69053650 16.39869881]
[217.33514404 23.13418579]
[208.40791321 25.79822922]
[196.35545349 34.72786331]
[184.44332886 43.84385300]
[172.67440796 53.14399719]
[160.90550232 62.44414139]
[149.13658142 71.74428558]
[137.36767578 81.04442596]
[125.59876251 90.34456635]
[113.82984161 99.64471436]
[128.82923889 99.77911377]
[142.82179260 105.18359375]
[154.01722717 115.16669464]
[160.98315430 128.45111084]
[162.82832336 143.33718872]
[159.31663513 157.92033386]
[150.89741516 170.33471680]
[138.64784241 178.99195862]
[124.13519287 182.78443909]
[109.21627045 181.22692871]
[95.79988098 174.51869202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 40]
[5 39]
[6 38]
[9 35]
[10 34]
[12 32]
[13 31]
[19 28]
[20 27]
[21 26]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[49 82]
[50 81]
[51 79]
[52 78]
[53 77]
[54 76]
[58 73]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
