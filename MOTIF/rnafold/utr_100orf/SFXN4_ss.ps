%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCACGCGCGGCCUGGCGGCGGCGGCCACUCUAACCAGCGCAAAAUGUCCCUGGAACAGGAGGAGGAAACGCAACCUGGGCGGCUCCUAGGACGCAGAGACGCCGUCCCCGCCUUCAUUGAGCCCAACGUGCGCUUCUGGAUCA\
) } def
/len { sequence length } bind def

/coor [
[221.87475586 646.18829346]
[231.61717224 633.44213867]
[230.97183228 618.45605469]
[230.32650757 603.46990967]
[229.68116760 588.48382568]
[228.39169312 573.53930664]
[226.46047974 558.66418457]
[224.52925110 543.78900146]
[222.59802246 528.91387939]
[220.66680908 514.03869629]
[218.09741211 499.26040649]
[214.89459229 484.60632324]
[211.69178772 469.95223999]
[192.08163452 460.22552490]
[185.77516174 438.98208618]
[197.17568970 419.66586304]
[192.11285400 405.54611206]
[187.05000305 391.42636108]
[181.98716736 377.30657959]
[176.92431641 363.18682861]
[165.34532166 353.81793213]
[167.97070312 338.21609497]
[162.90785217 324.09631348]
[157.84501648 309.97656250]
[152.78216553 295.85681152]
[147.71932983 281.73706055]
[142.65647888 267.61727905]
[129.11993408 261.51010132]
[123.78435516 247.26278687]
[130.28190613 233.10583496]
[125.21906281 218.98606873]
[120.15621948 204.86630249]
[115.09337616 190.74655151]
[106.08879089 202.74310303]
[91.10330963 203.40298462]
[81.07910156 192.24435425]
[83.33567810 177.41506958]
[96.22532654 169.74322510]
[110.33503723 174.82951355]
[106.81766510 160.24774170]
[103.30029297 145.66596985]
[92.72307587 145.20309448]
[82.53497314 142.32312012]
[73.28075409 137.18003845]
[65.45526886 130.04887390]
[59.47695160 121.31092834]
[55.66548538 111.43345642]
[54.22467041 100.94461060]
[55.23154831 90.40525818]
[58.63228607 80.37895203]
[64.24503326 71.40182495]
[54.22407913 60.24026108]
[44.20312119 49.07870483]
[34.18216324 37.91714478]
[19.10150528 30.17052460]
[22.37064362 13.53474808]
[39.26127625 12.07088470]
[45.34372330 27.89618683]
[55.36468124 39.05774689]
[65.38563538 50.21930313]
[75.40659332 61.38086319]
[81.18895721 58.25772095]
[87.35887909 55.99459839]
[93.78925323 54.63812256]
[100.34757996 54.21624374]
[102.91697693 39.43794250]
[105.48637390 24.65963936]
[108.05577087 9.88133812]
[99.22927094 -2.95340252]
[102.04552460 -17.90410042]
[114.33588409 -26.23972702]
[116.90528107 -41.01802826]
[119.47467804 -55.79632950]
[109.25677490 -67.63391876]
[109.09014893 -83.27061462]
[119.05348206 -95.32324982]
[134.44238281 -98.10093689]
[147.99069214 -90.29214478]
[153.30131531 -75.58393097]
[147.86672974 -60.92108154]
[134.25297546 -53.22693253]
[131.68357849 -38.44863129]
[129.11418152 -23.67033005]
[137.86984253 -11.67558193]
[135.47463989 3.34831905]
[122.83407593 12.45073509]
[120.26467896 27.22903633]
[117.69528198 42.00733948]
[115.12588501 56.78564072]
[133.39497375 68.67829895]
[144.09390259 87.67113495]
[144.79737854 109.45875549]
[135.34593201 129.10220337]
[117.88207245 142.14860535]
[121.39943695 156.73037720]
[124.91680908 171.31214905]
[129.21313477 185.68370056]
[134.27597046 199.80346680]
[139.33882141 213.92323303]
[144.40165710 228.04298401]
[158.41458130 234.84562683]
[163.34788513 249.23719788]
[156.77624512 262.55444336]
[161.83909607 276.67419434]
[166.90193176 290.79397583]
[171.96478271 304.91372681]
[177.02761841 319.03347778]
[182.09046936 333.15322876]
[194.03158569 343.53207397]
[191.04408264 358.12399292]
[196.10691833 372.24374390]
[201.16976929 386.36349487]
[206.23262024 400.48327637]
[211.29545593 414.60302734]
[219.76022339 415.35678101]
[227.58436584 418.58593750]
[234.06459045 423.97833252]
[238.62490845 431.02838135]
[240.86790466 439.08444214]
[240.60922241 447.40893555]
[237.89260864 455.24603271]
[232.98403931 461.89010620]
[226.34585571 466.74942017]
[229.54867554 481.40350342]
[232.75148010 496.05758667]
[235.91381836 499.27066040]
[237.66641235 502.96179199]
[238.03558350 506.61392212]
[237.21771240 509.77465820]
[235.54196167 512.10748291]
[237.47319031 526.98260498]
[239.40441895 541.85778809]
[241.33563232 556.73297119]
[243.26686096 571.60809326]
[246.14126587 575.08117676]
[247.57006836 578.90930176]
[247.62391663 582.57965088]
[246.53736877 585.65832520]
[244.66728210 587.83850098]
[245.31262207 602.82458496]
[245.95794678 617.81066895]
[246.60328674 632.79681396]
[257.40536499 644.65826416]
[254.72450256 660.47576904]
[240.61721802 668.11541748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 142]
[3 141]
[4 140]
[5 139]
[6 134]
[7 133]
[8 132]
[9 131]
[10 130]
[11 125]
[12 124]
[13 123]
[16 114]
[17 113]
[18 112]
[19 111]
[20 110]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[30 100]
[31 99]
[32 98]
[33 97]
[39 96]
[40 95]
[41 94]
[51 61]
[52 60]
[53 59]
[54 58]
[65 89]
[66 88]
[67 87]
[68 86]
[71 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
