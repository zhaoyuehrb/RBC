%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUUCAGAUAACCAGUGGUCAGCAGAUGAGGAUGAAGGCCAAUUAUCCCGACUAAUCAGGAAAUCUAGAGACUCCCCCUUUGUCCCUAUAGGUAUAG\
) } def
/len { sequence length } bind def

/coor [
[184.75320435 239.21916199]
[186.69924927 227.76147461]
[192.13240051 217.45736694]
[182.29347229 206.13502502]
[172.45454407 194.81268311]
[162.61561584 183.49034119]
[152.77668762 172.16799927]
[138.58821106 167.63627625]
[135.37657166 152.14447021]
[125.53764343 140.82212830]
[115.69871521 129.49978638]
[105.85978699 118.17743683]
[91.41345215 117.05952454]
[81.90936279 106.12250519]
[82.81787109 91.66149139]
[72.97894287 80.33914948]
[54.18078232 79.85588837]
[41.77796936 66.14291382]
[43.13187027 48.01803207]
[32.60807037 37.32927322]
[22.08426666 26.64051437]
[11.56046391 15.95175457]
[1.03666079 5.26299524]
[-10.85301304 7.50430870]
[-22.20615387 3.68586588]
[-30.16238785 -5.10551500]
[-32.77841949 -16.54629707]
[-29.50173187 -27.68958092]
[-39.34066010 -39.01192474]
[-49.17958832 -50.33427048]
[-59.01851654 -61.65661240]
[-68.85744476 -72.97895813]
[-79.04373932 -83.98983765]
[-89.56754303 -94.67859650]
[-105.14033508 -93.25659180]
[-117.95427704 -102.21968079]
[-121.95900726 -117.33576965]
[-115.26361847 -131.46749878]
[-101.02947235 -137.94230652]
[-85.97749329 -133.70297241]
[-77.21476746 -120.75119019]
[-78.87878418 -105.20240021]
[-68.35498047 -94.51364136]
[-63.50245667 -93.59507751]
[-59.23854065 -89.50499725]
[-57.53510284 -82.81788635]
[-47.69617462 -71.49554443]
[-37.85724640 -60.17319870]
[-28.01831627 -48.85085297]
[-18.17938805 -37.52851105]
[-0.00410006 -37.47031021]
[12.70393562 -24.03970146]
[11.72542000 -5.26080751]
[22.24922371 5.42795229]
[32.77302551 16.11671066]
[43.29682922 26.80547142]
[53.82062912 37.49423218]
[65.18478394 35.09309769]
[76.38777161 38.58998489]
[84.53451538 47.20512772]
[87.45946503 58.82059097]
[84.30128479 70.50022125]
[94.14021301 81.82256317]
[108.58654785 82.94047546]
[118.09063721 93.87749481]
[117.18212891 108.33850861]
[127.02105713 119.66085052]
[136.85998535 130.98320007]
[146.69891357 142.30554199]
[161.59114075 147.64710999]
[164.09902954 162.32905579]
[173.93795776 173.65141296]
[183.77688599 184.97375488]
[193.61581421 196.29609680]
[203.45474243 207.61843872]
[221.88320923 203.05455017]
[240.06306458 208.24385071]
[253.19509888 221.73445129]
[257.85351562 239.89399719]
[252.87937927 257.88745117]
[264.04733276 267.90124512]
[275.21530151 277.91506958]
[289.78744507 273.06243896]
[304.83038330 276.16174316]
[316.29763794 286.37927246]
[321.10458374 300.96655273]
[317.95812988 315.99969482]
[307.70474243 327.43487549]
[293.10244751 332.19604492]
[278.07922363 329.00250244]
[266.67626953 318.71331787]
[261.96087646 304.09616089]
[265.20147705 289.08303833]
[254.03352356 279.06921387]
[242.86555481 269.05538940]
[232.72406006 274.33386230]
[221.41587830 276.19250488]
[210.06507874 274.42953491]
[199.80529785 269.20404053]
[191.66647339 261.02166748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[9 69]
[10 68]
[11 67]
[12 66]
[15 63]
[16 62]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 43]
[34 42]
[80 95]
[81 94]
[82 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
