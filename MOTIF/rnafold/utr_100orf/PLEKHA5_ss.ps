%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGGGAGGCGCGCUCGCUCCGCGCUCCCUUCGCUCGCUCGUUCCCUCCUCCCUCGGCAGCCGCGGCGGCAGCAGGAGAAGGCGGCGGCGGCGGCUAGGGAUCAGACAUGGCGGCGGAUCUGAACCUGGAGUGGAUCUCCCUGCCCCGGUCCUGGACUUACGGGAUCACCAGGGGCGGCCGAGUCUUCUUCAUCAACGAGGAGGCCA\
) } def
/len { sequence length } bind def

/coor [
[28.48478699 298.00704956]
[21.19161797 304.05401611]
[12.25167942 307.01031494]
[2.90692115 306.50967407]
[-4.62559938 319.48123169]
[-12.15812016 332.45278931]
[-19.69064140 345.42434692]
[-27.22316170 358.39587402]
[-34.75568390 371.36743164]
[-36.35933304 380.36160278]
[-42.50016785 384.47613525]
[-50.22681046 397.33300781]
[-57.95345688 410.18984985]
[-65.68009949 423.04672241]
[-60.41949844 437.77288818]
[-65.90388489 452.41720581]
[-79.54370117 460.06503296]
[-94.89864349 457.10534668]
[-104.71857452 444.93557739]
[-104.36682892 429.30197144]
[-94.00948334 417.58618164]
[-78.53696442 415.32006836]
[-70.81031799 402.46322632]
[-63.08367538 389.60635376]
[-55.35703278 376.74948120]
[-47.72723389 363.83493042]
[-40.19471359 350.86337280]
[-32.66219330 337.89181519]
[-25.12967110 324.92025757]
[-17.59715080 311.94869995]
[-10.06462955 298.97717285]
[-16.94893456 279.73281860]
[-7.25694418 261.40515137]
[13.09277630 256.11380005]
[19.83222580 242.71307373]
[26.57167435 229.31233215]
[21.66526794 215.29580688]
[28.30912971 201.60954285]
[43.04420853 196.55828857]
[49.78365707 183.15754700]
[56.52310944 169.75682068]
[63.26255798 156.35607910]
[70.00200653 142.95533752]
[76.74145508 129.55459595]
[69.75672150 123.56079865]
[64.32292938 115.91568756]
[60.82975006 107.02214813]
[59.56184387 97.37458801]
[60.67755508 87.53153229]
[64.19474792 78.08328247]
[69.98489380 69.61652374]
[58.79757690 59.62433243]
[47.61026001 49.63213348]
[36.42294693 39.63993835]
[25.23563194 29.64774323]
[16.74919701 26.26434898]
[13.95670319 19.42029190]
[2.92084432 9.26106834]
[-8.11501408 -0.89815497]
[-23.50846291 -4.55224037]
[-27.63188934 -18.86470413]
[-38.66774750 -29.02392769]
[-49.70360565 -39.18315125]
[-60.73946381 -49.34237671]
[-71.77532196 -59.50159836]
[-87.16876984 -63.15568542]
[-91.29219818 -77.46814728]
[-102.32805634 -87.62737274]
[-117.72150421 -91.28145599]
[-121.84493256 -105.59391785]
[-132.88079834 -115.75314331]
[-147.27102661 -110.53972626]
[-162.43417358 -112.62243652]
[-174.88583374 -121.52268982]
[-181.76473999 -135.19526672]
[-181.49014282 -150.49830627]
[-174.12515259 -163.91529846]
[-161.36218262 -172.36309814]
[-146.13409424 -173.90046692]
[-131.94015503 -168.17413330]
[-122.04205322 -156.49996948]
[-118.71429443 -141.56060791]
[-122.72156525 -126.78900146]
[-111.68570709 -116.62977600]
[-97.08161926 -113.70234680]
[-92.16883087 -98.66323090]
[-81.13297272 -88.50400543]
[-66.52888489 -85.57657623]
[-61.61610031 -70.53746033]
[-50.58024216 -60.37823486]
[-39.54438400 -50.21900940]
[-28.50852394 -40.05978775]
[-17.47266579 -29.90056229]
[-2.86857677 -26.97313309]
[2.04420924 -11.93401337]
[13.08006763 -1.77479005]
[24.11592674 8.38443375]
[35.22782898 18.46042824]
[46.41514206 28.45262337]
[57.60245895 38.44482040]
[68.78977203 48.43701553]
[79.97708893 58.42921066]
[94.36948395 54.20322418]
[98.37866211 39.74893570]
[102.38784027 25.29464531]
[106.39701843 10.84035587]
[110.40619659 -3.61393356]
[102.88364410 -17.25390816]
[107.15542603 -31.85550117]
[120.20542145 -38.94305038]
[124.21459961 -53.39733887]
[119.58762360 -69.13020325]
[131.09356689 -80.81546783]
[146.89610291 -76.43232727]
[150.73893738 -60.48978424]
[138.66888428 -49.38816071]
[134.65971375 -34.93386841]
[142.19430542 -22.13678360]
[138.33433533 -7.42096710]
[124.86048889 0.39524561]
[120.85131073 14.84953499]
[116.84213257 29.30382538]
[112.83294678 43.75811386]
[108.82376862 58.21240234]
[120.83059692 64.18290710]
[130.04933167 73.35823822]
[135.71232605 84.61837769]
[137.46333313 96.69355774]
[152.36811829 98.38102722]
[167.27288818 100.06849670]
[182.17767334 101.75596619]
[197.08245850 103.44343567]
[211.66545105 97.30773926]
[223.44149780 106.42771912]
[238.34628296 108.11518860]
[253.25105286 109.80265045]
[262.13186646 107.65830994]
[268.36657715 111.62914276]
[283.24429321 113.54045105]
[298.12203979 115.45176697]
[314.94207764 107.95903015]
[328.47293091 119.13310242]
[343.37771606 120.82057190]
[358.28250122 122.50804138]
[373.18728638 124.19551086]
[388.09204102 125.88298035]
[402.99682617 127.57044983]
[417.90161133 129.25791931]
[432.85037231 130.49661255]
[447.82962036 131.28540039]
[462.80886841 132.07418823]
[477.78811646 132.86299133]
[492.76736450 133.65177917]
[507.74661255 134.44056702]
[522.72583008 135.22935486]
[534.30426025 124.47219849]
[550.09454346 125.13637543]
[560.72869873 136.82785034]
[559.89764404 152.61027527]
[548.09436035 163.12020874]
[532.32159424 162.12231445]
[521.93707275 150.20860291]
[506.95782471 149.41981506]
[491.97857666 148.63102722]
[476.99932861 147.84222412]
[462.02008057 147.05343628]
[447.04083252 146.26464844]
[432.06158447 145.47586060]
[429.88949585 147.25025940]
[426.88314819 148.27049255]
[423.32650757 148.21429443]
[419.61489868 146.86813354]
[416.21414185 144.16270447]
[401.30935669 142.47523499]
[386.40457153 140.78776550]
[371.49981689 139.10029602]
[356.59503174 137.41282654]
[341.69024658 135.72535706]
[326.78546143 134.03788757]
[317.13082886 141.32745361]
[304.69869995 140.04255676]
[296.21072388 130.32949829]
[281.33300781 128.41818237]
[266.45526123 126.50687408]
[251.56358337 124.70743561]
[236.65881348 123.01996613]
[221.75402832 121.33249664]
[208.23712158 127.58889008]
[195.39498901 118.34821320]
[180.49020386 116.66074371]
[165.58541870 114.97327423]
[150.68064880 113.28580475]
[135.77586365 111.59833527]
[125.62998962 127.52339935]
[109.02339172 136.51043701]
[90.14219666 136.29405212]
[83.40274811 149.69477844]
[76.66329956 163.09552002]
[69.92385101 176.49626160]
[63.18439865 189.89700317]
[56.44495010 203.29774475]
[61.17587662 218.13876343]
[54.15021896 231.63302612]
[39.97241592 236.05177307]
[33.23296356 249.45251465]
[26.49351501 262.85327148]
[32.07723618 270.79177856]
[34.37147522 280.16268921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[11 25]
[12 24]
[13 23]
[14 22]
[34 206]
[35 205]
[36 204]
[39 201]
[40 200]
[41 199]
[42 198]
[43 197]
[44 196]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[57 97]
[58 96]
[59 95]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[67 87]
[68 86]
[70 84]
[71 83]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[110 117]
[111 116]
[128 193]
[129 192]
[130 191]
[131 190]
[132 189]
[134 187]
[135 186]
[136 185]
[138 184]
[139 183]
[140 182]
[142 179]
[143 178]
[144 177]
[145 176]
[146 175]
[147 174]
[148 173]
[149 168]
[150 167]
[151 166]
[152 165]
[153 164]
[154 163]
[155 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
