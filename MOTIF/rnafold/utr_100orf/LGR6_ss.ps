%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCAGCCCGCCGGGGCUCCGGGCGCUAUGGCUUUGCGCCGCGCUGUGCGCUUCCCGGAGGGCCGGCGGCGCCCCCCAGCCCGGCCCGGGGCCCACCG\
) } def
/len { sequence length } bind def

/coor [
[-5.58552265 237.47500610]
[-17.76363564 234.47767639]
[-28.37678146 227.84205627]
[-40.14569473 237.14219666]
[-51.91461182 246.44233704]
[-63.68352509 255.74247742]
[-75.15750885 265.40414429]
[-86.32546997 275.41796875]
[-97.49343872 285.43179321]
[-108.66139984 295.44561768]
[-119.82936096 305.45944214]
[-124.41226959 321.20520020]
[-140.40220642 324.84582520]
[-151.35008240 312.63613892]
[-145.99366760 297.13644409]
[-129.84318542 294.29147339]
[-118.67521667 284.27764893]
[-107.50725555 274.26382446]
[-96.33929443 264.25000000]
[-85.17133331 254.23617554]
[-84.02745056 249.43177795]
[-79.74295044 245.36326599]
[-72.98366547 243.97357178]
[-61.21475220 234.67343140]
[-49.44583893 225.37329102]
[-37.67692566 216.07313538]
[-42.20685196 199.18392944]
[-39.01527786 181.93878174]
[-28.68009949 167.70550537]
[-13.17868710 159.28321838]
[4.49029398 158.35198975]
[20.88694572 165.13777161]
[31.73807716 154.78147888]
[42.58920670 144.42517090]
[53.44033813 134.06887817]
[64.29147339 123.71257782]
[75.14260101 113.35627747]
[85.99372864 102.99997711]
[90.11045837 89.63793182]
[103.64997101 86.14889526]
[114.50109863 75.79259491]
[125.35222626 65.43629456]
[136.20335388 55.07999420]
[140.84454346 39.95484924]
[155.39353943 36.76491547]
[166.24467468 26.40861511]
[177.09580994 16.05231476]
[187.94694519 5.69601393]
[192.39915466 -15.14191818]
[212.39790344 -19.81790543]
[222.23683167 -31.14025116]
[232.07575989 -42.46259308]
[241.91468811 -53.78493881]
[251.75361633 -65.10728455]
[251.65489197 -78.12062836]
[260.23104858 -87.36584473]
[272.41064453 -88.18775177]
[282.59692383 -99.19862366]
[292.78323364 -110.20950317]
[302.96951294 -121.22038269]
[306.06530762 -137.32467651]
[321.64645386 -142.43939209]
[333.68438721 -131.30294800]
[329.79553223 -115.37157440]
[313.98040771 -111.03408813]
[303.79409790 -100.02320862]
[293.60781860 -89.01233673]
[283.42150879 -78.00145721]
[280.56445312 -60.76374435]
[263.07595825 -55.26835251]
[253.23703003 -43.94601059]
[243.39810181 -32.62366486]
[233.55917358 -21.30132103]
[223.72024536 -9.97897720]
[225.82624817 -1.03633571]
[223.44377136 7.98087072]
[217.00596619 14.92059994]
[207.92929077 18.06338501]
[198.30323792 16.54714394]
[187.45210266 26.90344429]
[176.60098267 37.25974655]
[165.74984741 47.61604691]
[161.88481140 62.00043869]
[146.55966187 65.93112183]
[135.70852661 76.28742218]
[124.85739899 86.64372253]
[114.00627136 97.00002289]
[109.88954163 110.36206818]
[96.35002899 113.85110474]
[85.49890137 124.20740509]
[74.64777374 134.56370544]
[63.79663849 144.92001343]
[52.94550705 155.27630615]
[42.09437561 165.63261414]
[31.24324608 175.98890686]
[36.31044388 187.65036011]
[37.48231125 200.28617859]
[34.65714645 212.63235474]
[28.13229561 223.45870972]
[18.57295990 231.69140625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[32 95]
[33 94]
[34 93]
[35 92]
[36 91]
[37 90]
[38 89]
[40 87]
[41 86]
[42 85]
[43 84]
[45 82]
[46 81]
[47 80]
[48 79]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
