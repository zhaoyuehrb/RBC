%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:28:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUUUGUUGCUUAGGAUAUGAAUGGCUGAGCGGAGGCUGUAAAACCUGGCACUCUGCUUGGGUUAUCAAUACUCUGGCUGACCAUCGUCAUCGUGGGA\
) } def
/len { sequence length } bind def

/coor [
[120.26686096 254.32647705]
[113.16714478 249.93870544]
[107.17940521 244.10809326]
[102.59192657 237.10845947]
[99.62707520 229.27005005]
[98.43051147 220.96398926]
[99.06406403 212.58468628]
[101.50251770 204.53112793]
[105.63461304 197.18783569]
[111.26809692 190.90655518]
[118.13867188 185.98941040]
[113.54781342 171.70921326]
[108.95695496 157.42901611]
[103.82262421 151.92773438]
[104.45286560 142.63281250]
[100.30834198 128.21675110]
[96.16381836 113.80068970]
[86.23367310 103.95773315]
[89.42012024 90.34383392]
[85.27559662 75.92777252]
[81.13106537 61.51170731]
[67.58452606 53.82216644]
[63.58675003 39.14318848]
[71.00103760 26.27602005]
[66.85650635 11.85995674]
[62.71198273 -2.55610776]
[58.56745529 -16.97217178]
[54.42293167 -31.38823509]
[50.27840424 -45.80429840]
[36.74020767 -58.16408157]
[41.42126083 -74.99825287]
[36.83040237 -89.27845001]
[32.23954391 -103.55864716]
[27.64868355 -117.83884430]
[23.05782509 -132.11903381]
[18.46696663 -146.39923096]
[13.87610722 -160.67942810]
[9.06372070 -174.88650513]
[4.03097057 -189.01701355]
[-1.00177944 -203.14753723]
[-6.03452969 -217.27804565]
[-20.75380707 -222.55790710]
[-28.59090614 -236.08985901]
[-25.84539223 -251.48454285]
[-13.81361008 -261.47305298]
[1.82339978 -261.33911133]
[13.68231964 -251.14598083]
[16.16372871 -235.70652771]
[8.09598446 -222.31079102]
[13.12873459 -208.18028259]
[18.16148567 -194.04977417]
[23.19423485 -179.91925049]
[28.49717140 -174.58030701]
[28.15630341 -165.27029419]
[32.74716187 -150.99009705]
[37.33802032 -136.70989990]
[41.92888260 -122.42970276]
[46.51974106 -108.14950562]
[51.11059952 -93.86930847]
[55.70145798 -79.58911133]
[66.39765167 -73.70613098]
[70.27346802 -61.70602417]
[64.69446564 -49.94882584]
[68.83899689 -35.53276062]
[72.98352051 -21.11669731]
[77.12804413 -6.70063353]
[81.27257538 7.71543026]
[85.41709900 22.13149452]
[98.53296661 29.09637451]
[102.94146729 43.65727234]
[95.54713440 57.36717987]
[99.69165802 71.78324127]
[103.83618164 86.19931030]
[113.76632690 96.04226685]
[110.57987976 109.65616608]
[114.72440338 124.07222748]
[118.86893463 138.48829651]
[123.23715210 152.83816528]
[127.82801056 167.11836243]
[132.41886902 181.39855957]
[155.17784119 185.91378784]
[171.17996216 202.56324768]
[174.75543213 225.26625061]
[164.74131775 245.83056641]
[173.48243713 258.02044678]
[182.22355652 270.21029663]
[189.90704346 275.47875977]
[191.03997803 282.91796875]
[199.39776611 295.37377930]
[214.35014343 302.10867310]
[215.72433472 318.45013428]
[202.10667419 327.58749390]
[187.50585938 320.12103271]
[186.94195557 303.73156738]
[178.58416748 291.27575684]
[170.03367615 278.95141602]
[161.29257202 266.76156616]
[152.55145264 254.57168579]
[144.67385864 257.18743896]
[136.40516663 258.03424072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 80]
[12 79]
[13 78]
[15 77]
[16 76]
[17 75]
[19 73]
[20 72]
[21 71]
[24 68]
[25 67]
[26 66]
[27 65]
[28 64]
[29 63]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 52]
[39 51]
[40 50]
[41 49]
[84 98]
[85 97]
[86 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
