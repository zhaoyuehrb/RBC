%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGGGGAAAACCAUACUACACUGCCUGAAUUCCUCCUUCUGGGAUUCUCUGACCUCAAGGCCCUGCAGGGCCCCCUGUUCUGGGUGGUGCUUCUGG\
) } def
/len { sequence length } bind def

/coor [
[49.41427612 287.61157227]
[39.91483688 291.94174194]
[29.70919991 294.09631348]
[19.28853607 293.97564697]
[9.15347958 291.58959961]
[-0.20993246 287.05670166]
[-10.04886150 298.37902832]
[-19.88779068 309.70138550]
[-18.53273392 325.44747925]
[-28.77251434 337.48583984]
[-44.53205109 338.67434692]
[-56.46149063 328.30786133]
[-57.48331070 312.53665161]
[-46.99127960 300.71746826]
[-31.21013451 299.86245728]
[-21.37120628 288.54010010]
[-11.53227615 277.21777344]
[-20.99748993 259.32583618]
[-22.15407372 239.07563782]
[-14.75709152 220.14437866]
[-0.11799874 205.98429871]
[19.12772179 199.19314575]
[39.49499512 201.03764343]
[46.24242020 187.64091492]
[52.98984528 174.24418640]
[59.73727036 160.84745789]
[66.48469543 147.45074463]
[73.23212433 134.05401611]
[79.97954559 120.65728760]
[86.72697449 107.26056671]
[85.79442596 92.28958130]
[77.43664551 79.83375549]
[69.07885742 67.37793732]
[60.72107697 54.92211914]
[52.36329269 42.46630096]
[44.00550842 30.01048088]
[35.64772415 17.55466080]
[20.08149910 16.06247520]
[9.15315247 4.87742758]
[8.02271843 -10.71924305]
[17.22395134 -23.36326599]
[32.41231155 -27.08452034]
[46.41631699 -20.12594414]
[52.62371063 -5.77316427]
[48.10354233 9.19687653]
[56.46132660 21.65269661]
[64.81911469 34.10851669]
[73.17689514 46.56433487]
[81.53468323 59.02015686]
[89.89246368 71.47597504]
[98.25025177 83.93179321]
[96.88723755 68.99385071]
[90.77950287 55.29364777]
[92.10614777 40.35242844]
[100.53219604 27.94268799]
[113.93017578 21.19775200]
[128.91723633 21.82064438]
[141.70930481 29.65408897]
[149.07653809 42.72022629]
[149.15876770 57.72000122]
[141.93524170 70.86613464]
[129.23008728 78.83928680]
[119.77504730 90.48412323]
[133.65545654 84.79779816]
[147.53585815 79.11147308]
[161.41627502 73.42514801]
[175.29667664 67.73882294]
[184.89689636 54.44342041]
[201.18145752 56.37871552]
[207.39817810 71.55384064]
[197.15184021 84.35792542]
[180.98300171 81.61923218]
[167.10260010 87.30555725]
[153.22218323 92.99188232]
[139.34178162 98.67820740]
[125.46137238 104.36453247]
[139.31170654 110.12372589]
[148.35345459 122.09230042]
[150.10800171 136.98933411]
[144.09437561 150.73110962]
[131.96110535 159.55061340]
[117.03424835 161.03015137]
[103.40570831 154.76414490]
[94.81144714 142.47030640]
[93.60741425 127.51869965]
[100.12369537 114.00798798]
[93.37627411 127.40471649]
[86.62884521 140.80143738]
[79.88142395 154.19816589]
[73.13399506 167.59489441]
[66.38657379 180.99160767]
[59.63914490 194.38833618]
[52.89171982 207.78506470]
[60.68258286 214.85842896]
[66.73985291 223.45176697]
[70.77579498 233.14988708]
[72.60018921 243.48526001]
[72.12935638 253.96061707]
[69.38992310 264.07284546]
[64.51738739 273.33709717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[23 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 88]
[29 87]
[30 86]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
