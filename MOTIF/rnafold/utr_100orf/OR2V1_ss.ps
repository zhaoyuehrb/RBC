%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAAGAUGGGUGAACCAGUCCUACACAGAUGGCUUCUUCCUCUUGGGCAUCUUUUCCCACAGCCAGACUGACCUUGUCCUCUUCUCUGCAGUUAUGG\
) } def
/len { sequence length } bind def

/coor [
[125.69504547 317.90585327]
[133.08164978 304.62026978]
[144.99324036 295.17663574]
[140.84872437 280.76058960]
[136.70419312 266.34451294]
[132.55966187 251.92845154]
[128.41514587 237.51239014]
[124.27061462 223.09631348]
[120.12609100 208.68025208]
[115.16532898 203.02195740]
[116.08434296 193.75114441]
[112.39015961 179.21315002]
[108.69597626 164.67517090]
[105.00179291 150.13717651]
[101.30760956 135.59919739]
[97.61342621 121.06121063]
[83.28458405 113.03323364]
[78.99250031 97.17946625]
[87.31435394 83.01927948]
[83.16983032 68.60321808]
[79.02530670 54.18714905]
[74.88077545 39.77108765]
[70.73625183 25.35502243]
[63.58077621 38.53831100]
[50.54121780 45.95248413]
[35.55292511 45.35993576]
[23.13937378 36.93949890]
[17.04697990 23.23246956]
[19.11442757 8.37563038]
[28.71776390 -3.14721370]
[42.95869446 -7.85846281]
[57.53930283 -4.33625937]
[68.05958557 6.35719776]
[68.05958557 -8.64280224]
[68.05958557 -23.64280128]
[68.05958557 -38.64280319]
[68.05958557 -53.64280319]
[62.27779007 -56.61132431]
[57.53696060 -61.00896454]
[54.17752075 -66.49571228]
[52.43410492 -72.65431976]
[52.41924286 -79.02201843]
[54.11627197 -85.12528992]
[57.38188553 -90.51508331]
[61.95806122 -94.79982758]
[67.49238586 -97.67389679]
[73.56513214 -98.93934631]
[77.25931549 -113.47733307]
[80.95349884 -128.01531982]
[84.64768219 -142.55329895]
[74.62383270 -154.39822388]
[73.51021576 -169.87527466]
[81.73503113 -183.03324890]
[96.13568115 -188.81260681]
[111.17481232 -184.99107361]
[121.06958008 -173.03811646]
[122.01523590 -157.54988098]
[113.64816284 -144.48191833]
[99.18566895 -138.85911560]
[95.49148560 -124.32113647]
[91.79730225 -109.78314972]
[88.10311890 -95.24516296]
[98.64894867 -73.24027252]
[83.05958557 -53.64280319]
[83.05958557 -38.64280319]
[83.05958557 -23.64280128]
[83.05958557 -8.64280224]
[83.05958557 6.35719776]
[85.15232086 21.21049690]
[89.29684448 35.62656021]
[93.44136810 50.04262543]
[97.58589172 64.45868683]
[101.73042297 78.87475586]
[113.55842590 83.70767975]
[120.45947266 94.46102142]
[119.92583466 107.22714996]
[112.15140533 117.36702728]
[115.84558868 131.90501404]
[119.53977203 146.44299316]
[123.23396301 160.98098755]
[126.92814636 175.51896667]
[130.62232971 190.05696106]
[134.54216003 204.53573608]
[138.68667603 218.95179749]
[142.83120728 233.36785889]
[146.97573853 247.78392029]
[151.12025452 262.19998169]
[155.26478577 276.61605835]
[159.40931702 291.03210449]
[174.51760864 292.70770264]
[187.83224487 300.04180908]
[197.32279968 311.91604614]
[201.54206848 326.51968384]
[199.84661865 341.62576294]
[192.49499512 354.93072510]
[180.60827637 364.40567017]
[165.99909973 368.60571289]
[150.89524841 366.89041138]
[137.59997559 359.52127075]
[128.14068604 347.62210083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[16 77]
[19 73]
[20 72]
[21 71]
[22 70]
[23 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[47 62]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
