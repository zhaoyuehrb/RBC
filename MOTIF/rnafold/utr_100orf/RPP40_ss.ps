%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAAGGGGCGGGGCGUGCCCCGCCAGCGGAGGCCGGGAGGACCAGGAACCCAGGAGAGCAUGGCCACGCUGCGCCGGCUUCGGGAGGCGCCGCGGCACUUACUGGUUUGCGAGAAAUCCAACUUCGGCAACCACAAGUCGCGCCACCGGCAUCUUGUGC\
) } def
/len { sequence length } bind def

/coor [
[165.46025085 199.49607849]
[156.27124023 187.64018250]
[147.08222961 175.78430176]
[137.89321899 163.92840576]
[123.13052368 162.31649780]
[113.64266968 150.42384338]
[115.43348694 134.95028687]
[106.24447632 123.09439850]
[91.24518585 122.94895935]
[81.82800293 134.62443542]
[72.41082001 146.29991150]
[62.99363708 157.97537231]
[53.57645798 169.65084839]
[44.15927505 181.32632446]
[34.74209213 193.00180054]
[32.74408340 209.27877808]
[17.54512405 215.43699646]
[4.78060389 205.14141846]
[7.58156490 188.98324585]
[23.06661987 183.58462524]
[32.48380280 171.90914917]
[41.90098190 160.23367310]
[51.31816483 148.55819702]
[60.73534775 136.88272095]
[70.15252686 125.20725250]
[79.56970978 113.53177643]
[75.54711914 99.08121490]
[61.45173264 93.95091248]
[47.35634232 88.82061005]
[33.26095200 83.69030762]
[21.23049545 88.42964172]
[9.57659149 83.82984161]
[4.37183428 72.87614441]
[-9.62142086 67.47347260]
[-23.61467743 62.07080841]
[-37.60793304 56.66814423]
[-51.60118866 51.26547623]
[-62.11590195 62.20698166]
[-75.98123932 68.27290344]
[-91.07186127 68.56742859]
[-105.08759308 63.07680130]
[-115.90400696 52.66670990]
[-121.89444733 38.94592285]
[-122.17460632 24.01773453]
[-136.16786194 18.61507034]
[-151.82862854 20.86255646]
[-160.91488647 9.06047535]
[-174.90814209 3.65780902]
[-191.86196899 3.59343815]
[-196.49339294 -12.71564484]
[-182.10379028 -21.68088150]
[-169.50547791 -10.33544636]
[-155.51222229 -4.93278074]
[-140.85235596 -7.56670237]
[-130.76519775 4.62181377]
[-116.77194214 10.02447987]
[-106.53261566 -0.84223032]
[-92.87594604 -6.97745180]
[-77.87025452 -7.41786718]
[-63.80124664 -2.06523681]
[-52.82389832 8.29388714]
[-46.63235474 22.10358620]
[-46.19852066 37.27222061]
[-32.20526505 42.67488861]
[-18.21201134 48.07755280]
[-4.21875525 53.48022079]
[9.77449989 58.88288498]
[26.91607666 55.22259140]
[38.39125443 69.59491730]
[52.48664474 74.72521973]
[66.58203125 79.85552216]
[80.67742157 84.98582458]
[93.20973969 76.74318695]
[94.08191681 61.76856613]
[94.95408630 46.79394531]
[95.82625580 31.81932259]
[96.69843292 16.84469986]
[83.82234955 8.47200298]
[76.87198639 -5.22427559]
[77.71696472 -20.55990791]
[86.12997437 -33.40968323]
[99.84797668 -40.31707764]
[115.18088531 -39.42403793]
[128.00422668 -30.97078514]
[134.86859131 -17.23120499]
[133.92749023 -1.90117109]
[125.43408203 10.89561081]
[111.67304993 17.71687317]
[110.80088043 32.69149399]
[109.92871094 47.66611862]
[109.05653381 62.64073944]
[108.18436432 77.61536407]
[121.65349579 84.21706390]
[132.95503235 74.35424042]
[144.25657654 64.49141693]
[155.55810547 54.62860107]
[166.85964966 44.76577759]
[171.29658508 36.72373199]
[178.47729492 34.82387543]
[189.96795654 25.18206215]
[201.45863342 15.54024696]
[206.55595398 -0.04658224]
[222.65678406 -3.16034532]
[233.19795227 9.40213013]
[227.33561707 24.71764755]
[211.10044861 27.03091431]
[199.60977173 36.67272949]
[188.11911011 46.31454086]
[176.72247314 56.06731796]
[165.42092896 65.93013763]
[154.11940002 75.79296112]
[142.81785583 85.65577698]
[131.51631165 95.51860046]
[146.16284180 92.28141022]
[160.23680115 97.47020721]
[165.65745544 111.45650482]
[158.75619507 124.77463531]
[144.20367432 128.41114807]
[131.84849548 119.90447235]
[118.10037231 113.90539551]
[127.28937531 125.76128387]
[142.72050476 127.88681030]
[151.87057495 140.04127502]
[149.74911499 154.73939514]
[158.93812561 166.59529114]
[168.12713623 178.45118713]
[177.31613159 190.30706787]
[186.99169922 188.67218018]
[196.53544617 190.68942261]
[204.62489319 196.03567505]
[210.15515137 203.92961121]
[212.38967896 213.24562073]
[211.05825806 222.67419434]
[206.38883972 230.90606689]
[214.63146973 243.43838501]
[222.87409973 255.97070312]
[231.11674500 268.50302124]
[239.35937500 281.03533936]
[247.60200500 293.56765747]
[262.82202148 296.88256836]
[271.00271606 309.70956421]
[267.74862671 324.19909668]
[275.99127197 336.73141479]
[291.54306030 338.36697388]
[302.36785889 349.65228271]
[303.35452271 365.25869751]
[294.03713989 377.81738281]
[278.81512451 381.39849854]
[264.87585449 374.31115723]
[258.80099487 359.90179443]
[263.45895386 344.97402954]
[255.21630859 332.44171143]
[240.62290955 329.69067383]
[232.08517456 317.09854126]
[235.06968689 301.81027222]
[226.82705688 289.27795410]
[218.58442688 276.74563599]
[210.34178162 264.21331787]
[202.09915161 251.68101501]
[193.85652161 239.14869690]
[173.59455872 236.79490662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[7 121]
[8 120]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[27 72]
[28 71]
[29 70]
[30 69]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[44 56]
[45 55]
[47 53]
[48 52]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[99 108]
[100 107]
[101 106]
[134 160]
[135 159]
[136 158]
[137 157]
[138 156]
[139 155]
[142 152]
[143 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
