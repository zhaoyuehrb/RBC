%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUUAUCCCUUUAAGCAUGGUUUAUUUUCUGAGCAAGGAGUCAUCAUGGGAGACCUUUUUUCCUUAUUUUGGGAGGUAGAUCCUCCCCCAAUACCUGUAAAUUGUGCCAUUCCAAAUCAGGAUUAUGAAUGCUGGAAGGAUGACU\
) } def
/len { sequence length } bind def

/coor [
[42.35481262 707.04583740]
[27.91040421 701.05474854]
[20.74224854 687.15686035]
[24.23492622 671.91430664]
[36.73930359 662.52416992]
[37.37592316 647.53765869]
[38.01253891 632.55120850]
[38.64915848 617.56469727]
[39.28577805 602.57824707]
[39.92239380 587.59173584]
[37.04395294 580.72790527]
[40.73492050 572.29492188]
[41.68949127 557.32531738]
[42.64405823 542.35571289]
[35.73237610 529.16186523]
[44.33221054 515.88201904]
[45.28677750 500.91244507]
[46.24134445 485.94284058]
[47.19591522 470.97326660]
[48.15048218 456.00366211]
[46.04534531 453.09378052]
[45.28400421 448.99844360]
[46.41755676 444.37890625]
[49.67221451 440.12133789]
[51.57748413 425.24282837]
[53.48274994 410.36431885]
[55.38801575 395.48580933]
[47.73600006 379.72583008]
[58.92710876 365.14294434]
[60.51614380 350.22735596]
[62.10517883 335.31176758]
[63.69421387 320.39617920]
[65.28324890 305.48059082]
[66.87228394 290.56497192]
[56.15005112 282.54641724]
[50.76303864 270.17059326]
[52.22383118 256.64334106]
[60.25577164 245.52705383]
[72.83757782 239.80262756]
[74.74285126 224.92411804]
[76.64811707 210.04560852]
[78.55338287 195.16711426]
[80.45864868 180.28860474]
[71.20755768 171.26181030]
[68.83045959 158.35853577]
[74.42111969 146.27362061]
[86.13206482 139.53671265]
[88.35270691 124.70200348]
[90.57334137 109.86728668]
[86.63982391 95.39222717]
[77.21652222 83.72169495]
[67.79322052 72.05115509]
[58.36992264 60.38061905]
[48.94662476 48.71008301]
[39.52332306 37.03954697]
[23.78706932 33.91707230]
[16.54520226 19.60152435]
[23.35306358 5.07456493]
[38.98824692 1.48003352]
[51.45677185 11.57534790]
[51.19385910 27.61624718]
[60.61716080 39.28678131]
[70.04045868 50.95731735]
[79.46376038 62.62785339]
[88.88706207 74.29839325]
[98.31036377 85.96892548]
[113.03746033 83.12068176]
[117.42980194 68.77818298]
[121.82214355 54.43568420]
[126.21448517 40.09318161]
[119.05751038 26.25788498]
[123.71628571 11.77512074]
[136.95022583 5.03729916]
[141.34257507 -9.30520153]
[145.73490906 -23.64770317]
[150.12725830 -37.99020386]
[154.51959229 -52.33270645]
[158.91194153 -66.67520905]
[152.68702698 -81.46134949]
[160.49234009 -95.47765350]
[176.34030151 -97.97200775]
[188.07369995 -87.03095245]
[186.69169617 -71.04753876]
[173.25444031 -62.28286362]
[168.86209106 -47.94036484]
[164.46975708 -33.59786224]
[160.07740784 -19.25536156]
[155.68507385 -4.91286039]
[151.29272461 9.42964077]
[158.48417664 22.42266655]
[154.23402405 37.03057480]
[140.55699158 44.48552322]
[136.16464233 58.82802582]
[131.77230835 73.17052460]
[127.37995911 87.51302338]
[142.34918213 86.55265808]
[156.11311340 92.51539612]
[165.65089417 104.09255981]
[168.86921692 118.74324036]
[165.06173706 133.25196838]
[155.06410217 144.43441772]
[141.07054138 149.83631897]
[126.15232849 148.27207947]
[113.58364105 140.08500671]
[106.12300110 127.07198334]
[105.40805817 112.08792877]
[103.18741608 126.92264557]
[100.96678162 141.75735474]
[111.61992645 155.59103394]
[109.05699158 172.52153015]
[95.33715820 182.19386292]
[93.43189240 197.07237244]
[91.52661896 211.95088196]
[89.62135315 226.82939148]
[87.71608734 241.70790100]
[100.16831207 253.10612488]
[103.36661530 269.51281738]
[96.24989319 284.45428467]
[81.78787994 292.15402222]
[80.19884491 307.06961060]
[78.60980988 321.98519897]
[77.02077484 336.90081787]
[75.43173981 351.81640625]
[73.84270477 366.73199463]
[81.34215546 377.28140259]
[79.66815948 389.71081543]
[70.26652527 397.39108276]
[68.36125946 412.26959229]
[66.45598602 427.14810181]
[64.55072021 442.02661133]
[63.12007904 456.95822144]
[62.16551208 471.92782593]
[61.21094131 486.89743042]
[60.25637436 501.86700439]
[59.30180359 516.83660889]
[66.14521027 531.10119629]
[57.61365509 543.31030273]
[56.65908432 558.27990723]
[55.70451736 573.24945068]
[54.90887833 588.22839355]
[54.27226257 603.21484375]
[53.63564301 618.20135498]
[52.99902344 633.18780518]
[52.36240768 648.17431641]
[51.72578812 663.16076660]
[63.38877869 673.57751465]
[65.57621765 689.06134033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 140]
[12 139]
[13 138]
[14 137]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[26 128]
[27 127]
[29 124]
[30 123]
[31 122]
[32 121]
[33 120]
[34 119]
[39 115]
[40 114]
[41 113]
[42 112]
[43 111]
[47 108]
[48 107]
[49 106]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[67 95]
[68 94]
[69 93]
[70 92]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
