%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAGCGGAAGGCGGGUACCGGAAACGGUGUUUGGUGGAGCCCGCGAUGGCCGAACCUGCGUCUGUCGCGGCUGAAUCUCUCGCGGGCAGCAGGGCGCGCGCUGCACGCACAGUACUAGGUCAGGUGGUGCUCCCGGGUGAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[69.55947876 121.64362335]
[66.73012543 136.37437439]
[72.61194611 151.68241882]
[62.08677292 164.25828552]
[45.98200226 161.16502380]
[40.86483765 145.58468628]
[51.99938202 133.54501343]
[54.82873917 118.81427002]
[49.27991104 113.76843262]
[43.11134720 127.44135284]
[28.20145607 125.79968262]
[25.15555000 111.11219025]
[38.18225098 103.67675018]
[32.63342285 98.63091278]
[18.23698425 102.84310913]
[3.84054661 107.05529785]
[-10.55589199 111.26749420]
[-24.95232964 115.47968292]
[-39.34876633 119.69187927]
[-50.42092133 130.99311829]
[-64.80881500 127.14112854]
[-79.20525360 131.35331726]
[-93.60169220 135.56550598]
[-105.96673584 149.16821289]
[-122.83515930 144.43423462]
[-137.13958740 148.94902039]
[-151.44401550 153.46379089]
[-165.74845886 157.97857666]
[-179.03324890 168.51187134]
[-192.83250427 158.66217041]
[-187.18774414 142.67552185]
[-170.26322937 143.67413330]
[-155.95880127 139.15936279]
[-141.65437317 134.64457703]
[-127.34992981 130.12980652]
[-121.46025085 119.51541901]
[-109.52624512 115.66217041]
[-97.81388092 121.16907501]
[-83.41744995 116.95687866]
[-69.02101135 112.74468994]
[-58.97858429 101.74473572]
[-43.56096268 105.29544067]
[-29.16452217 101.08324432]
[-14.76808453 96.87105560]
[-0.37164643 92.65885925]
[14.02479172 88.44667053]
[28.42123032 84.23447418]
[79.00354767 63.28700638]
[103.49817657 89.26403046]
[112.61913300 77.35571289]
[114.86798096 61.69515228]
[128.74952698 56.29590225]
[137.87048340 44.38758469]
[146.99145508 32.47926712]
[145.11206055 17.01622581]
[154.53164673 5.06942940]
[169.28488159 3.37300348]
[178.40583801 -8.53531456]
[187.52679443 -20.44363213]
[196.64776611 -32.35194778]
[205.76872253 -44.26026535]
[208.53010559 -53.04003143]
[215.20967102 -56.32080460]
[224.57966614 -68.03417969]
[233.82565308 -79.84568024]
[242.94662476 -91.75399780]
[252.06758118 -103.66231537]
[261.18853760 -115.57063293]
[263.94992065 -124.35039520]
[270.62948608 -127.63117218]
[279.99948120 -139.34454346]
[289.36947632 -151.05792236]
[298.61547852 -162.86941528]
[307.73645020 -174.77774048]
[303.87664795 -181.74707031]
[302.06643677 -189.47767639]
[302.42831421 -197.38201904]
[304.92013550 -204.86349487]
[309.33966064 -211.36143494]
[315.34069824 -216.39311218]
[322.46035767 -219.58961487]
[330.15457153 -220.72283936]
[337.83975220 -219.72175598]
[344.93713379 -216.67663574]
[355.71011353 -227.11419678]
[366.48312378 -237.55174255]
[377.25610352 -247.98930359]
[381.78350830 -263.14889526]
[396.30810547 -266.44808960]
[407.08111572 -276.88565063]
[407.08038330 -292.68994141]
[418.31411743 -303.80651855]
[434.11752319 -303.64016724]
[445.11474609 -292.28952026]
[444.78131104 -276.48876953]
[433.31503296 -265.61215210]
[417.51867676 -266.11264038]
[406.74566650 -255.67509460]
[402.98886108 -241.26205444]
[387.69366455 -237.21630859]
[376.92068481 -226.77874756]
[366.14767456 -216.34120178]
[355.37469482 -205.90364075]
[357.66534424 -183.50985718]
[342.66836548 -166.37258911]
[319.64474487 -165.65676880]
[310.52380371 -153.74845886]
[308.94277954 -146.47656250]
[301.08285522 -141.68792725]
[291.71286011 -129.97454834]
[282.34286499 -118.26116943]
[273.09686279 -106.44966888]
[263.97589111 -94.54135132]
[254.85493469 -82.63303375]
[245.73397827 -70.72471619]
[244.15295410 -63.45282745]
[236.29304504 -58.66418076]
[226.92303467 -46.95080566]
[217.67704773 -35.13930511]
[208.55607605 -23.23098564]
[199.43511963 -11.32266903]
[190.31414795 0.58564907]
[181.19319153 12.49396706]
[183.39878845 27.17970467]
[174.31848145 39.38636398]
[158.89976501 41.60022736]
[149.77880859 53.50854492]
[140.65783691 65.41686249]
[139.06138611 80.22566223]
[124.52745056 86.47667694]
[115.40649414 98.38499451]
[113.35717773 113.24434662]
[118.91431427 127.17697906]
[124.47145844 141.10961914]
[130.02859497 155.04223633]
[135.58572388 168.97486877]
[150.49197388 173.70115662]
[158.82914734 186.93087769]
[156.66067505 202.41737366]
[145.01045227 212.84840393]
[129.37936401 213.29875183]
[117.14791107 203.55575562]
[114.09143829 188.21978760]
[121.65309906 174.53201294]
[116.09596252 160.59938049]
[110.53882599 146.66674805]
[104.98168945 132.73411560]
[99.42454529 118.80148315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[21 40]
[22 39]
[23 38]
[25 35]
[26 34]
[27 33]
[28 32]
[49 131]
[50 130]
[52 128]
[53 127]
[54 126]
[57 123]
[58 122]
[59 121]
[60 120]
[61 119]
[63 118]
[64 117]
[65 115]
[66 114]
[67 113]
[68 112]
[70 111]
[71 110]
[72 109]
[73 107]
[74 106]
[84 103]
[85 102]
[86 101]
[87 100]
[89 98]
[90 97]
[132 148]
[133 147]
[134 146]
[135 145]
[136 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
