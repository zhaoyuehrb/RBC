%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAUUCCCUACCCAGCAGCCCUCGCGCGGUCCGGCACAGCGGACACCAGGACUCCAAAAUGGCGUCAGUUGGUGAGUGUCCGGCCCCAGUACCAGUGAAGGACAAGAAACUUCUGGAGGUCAAACUGGGGGAGCUGCCAAGCUGGAUCUUGAUGCGGG\
) } def
/len { sequence length } bind def

/coor [
[-29.27045441 435.55276489]
[-40.43044281 440.30120850]
[-46.40645981 454.05935669]
[-52.38247681 467.81753540]
[-42.36880112 479.33660889]
[-38.35301208 494.06195068]
[-41.13244629 509.06988525]
[-50.15524673 521.38049316]
[-63.62993240 528.54956055]
[-78.88108826 529.15368652]
[-92.88059235 523.07281494]
[-102.84883118 511.51440430]
[-106.80660248 496.77334595]
[-103.96808624 481.77651978]
[-94.89687347 469.50149536]
[-81.39406586 462.38552856]
[-66.14064789 461.84152222]
[-60.16463089 448.08334351]
[-54.18861389 434.32516479]
[-57.13830566 417.04769897]
[-42.30575562 406.17495728]
[-36.59932327 392.30282593]
[-30.89289093 378.43066406]
[-33.20660400 363.71685791]
[-20.80108452 353.89779663]
[-15.09465313 340.02566528]
[-9.52383327 326.09848022]
[-4.08915710 312.11764526]
[-6.68952179 297.45178223]
[5.52204752 287.39254761]
[10.95672321 273.41168213]
[16.39139938 259.43084717]
[21.82607651 245.44998169]
[27.26075172 231.46913147]
[32.69542694 217.48826599]
[38.13010406 203.50741577]
[43.56478119 189.52656555]
[38.57876205 169.52694702]
[55.34708405 156.23689270]
[59.95449448 141.96203613]
[64.56190491 127.68716431]
[69.16931152 113.41230011]
[66.40460968 98.66928864]
[56.93828964 87.03362274]
[47.47196960 75.39794922]
[38.00564957 63.76228333]
[28.09256172 52.50481033]
[17.74779701 41.64268112]
[7.40303278 30.78055191]
[-2.94173121 19.91842270]
[-13.28649521 9.05629349]
[-23.84123039 -1.60192335]
[-34.60191345 -12.05216980]
[-45.36259842 -22.50241661]
[-60.65299988 -26.56618690]
[-64.39282990 -40.98363876]
[-75.15351868 -51.43388367]
[-85.91419983 -61.88413239]
[-101.48925018 -68.58146667]
[-99.36524200 -85.40184021]
[-82.61423492 -88.01718903]
[-75.46395874 -72.64481354]
[-64.70326996 -62.19456863]
[-53.94258499 -51.74432373]
[-39.42185974 -48.42802429]
[-34.91235352 -33.26310349]
[-24.15166855 -22.81285477]
[-13.39098263 -12.36260891]
[-8.63973427 -11.54016972]
[-4.37132597 -7.69230175]
[-2.42436624 -1.28847063]
[7.92039824 9.57365894]
[18.26516151 20.43578720]
[28.60992622 31.29791832]
[38.95468903 42.16004562]
[41.80049133 42.33752060]
[44.74491501 43.68184280]
[47.33229065 46.23548889]
[49.10049820 49.87139893]
[49.64131927 54.29596329]
[59.10763931 65.93163300]
[68.57395935 77.56729889]
[78.04027557 89.20297241]
[88.99267578 79.98189545]
[102.29453278 78.90528870]
[112.91132355 85.26224518]
[126.36171722 78.62245178]
[139.81210327 71.98265076]
[153.26249695 65.34284973]
[166.71289062 58.70305252]
[180.16328430 52.06325150]
[193.61367798 45.42345428]
[206.86399841 38.39286804]
[219.90287781 30.97752190]
[232.94177246 23.56217384]
[234.57765198 6.75133276]
[245.78605652 -5.66141891]
[262.01812744 -8.93302441]
[276.85937500 -1.97199440]
[289.75106812 -9.64034271]
[302.64279175 -17.30869102]
[315.53451538 -24.97703934]
[315.96530151 -40.39838791]
[324.68392944 -53.12586212]
[338.90838623 -59.09817123]
[354.09967041 -56.40957260]
[365.41030884 -45.91798782]
[369.23107910 -30.97124481]
[364.34283447 -16.33879471]
[352.30538940 -6.68979836]
[336.95983887 -5.10321569]
[323.20288086 -12.08531952]
[310.31115723 -4.41697121]
[297.41943359 3.25137711]
[284.52770996 10.91972542]
[284.53817749 24.29834747]
[277.87200928 36.02278137]
[266.18347168 42.96645355]
[252.48190308 43.21685028]
[240.35711670 36.60106277]
[227.31823730 44.01641083]
[214.27934265 51.43175888]
[213.00025940 54.76872253]
[210.01293945 57.63676834]
[205.56294250 59.22683334]
[200.25347900 58.87384796]
[186.80308533 65.51364899]
[173.35269165 72.15344238]
[159.90229797 78.79324341]
[146.45190430 85.43304443]
[133.00151062 92.07283783]
[119.55111694 98.71263885]
[115.84785461 114.11018372]
[101.14463806 122.81612396]
[83.44417572 118.01971436]
[78.83676910 132.29457092]
[74.22936249 146.56944275]
[69.62194824 160.84431458]
[75.04798126 168.66534424]
[76.21890259 177.97285461]
[72.99532318 186.63528442]
[66.22973633 192.72811890]
[57.54563522 194.96124268]
[52.11095810 208.94209290]
[46.67628098 222.92294312]
[41.24160767 236.90380859]
[35.80693054 250.88465881]
[30.37225342 264.86550903]
[24.93757820 278.84637451]
[19.50290298 292.82720947]
[21.71454239 308.49307251]
[9.89169788 317.55230713]
[4.45702124 331.53317261]
[4.25815248 340.71719360]
[-1.22249973 345.73208618]
[-6.92893219 359.60424805]
[-5.02338171 375.31027222]
[-17.02073669 384.13708496]
[-22.72716904 398.00924683]
[-28.43360138 411.88140869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[21 160]
[22 159]
[23 158]
[25 156]
[26 155]
[27 153]
[28 152]
[30 150]
[31 149]
[32 148]
[33 147]
[34 146]
[35 145]
[36 144]
[37 143]
[39 138]
[40 137]
[41 136]
[42 135]
[43 83]
[44 82]
[45 81]
[46 80]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 68]
[53 67]
[54 66]
[56 64]
[57 63]
[58 62]
[86 132]
[87 131]
[88 130]
[89 129]
[90 128]
[91 127]
[92 126]
[93 122]
[94 121]
[95 120]
[99 115]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
