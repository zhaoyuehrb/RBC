%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGCAGCGGCGGGGACGGGGUCAGUGCCAAGAUGUCGACGGCGGCGGUUCCGGAGCUGAAGCAGAUCAGCCGGGUGGAGGCGAUGCGCCUAGGGCCGGGCUGGAGCCACUCGUGCCACGCCAUGCUGUACG\
) } def
/len { sequence length } bind def

/coor [
[90.52542114 417.51971436]
[82.89701843 403.00283813]
[91.88237000 389.28439331]
[92.23139954 374.28845215]
[92.58043671 359.29251099]
[89.56356812 352.46987915]
[93.11611176 343.95281982]
[93.81398773 328.96905518]
[94.51187134 313.98529053]
[95.20974731 299.00155640]
[95.55878448 284.00561523]
[95.55878448 269.00561523]
[95.55878448 254.00559998]
[95.55878448 239.00559998]
[95.38425446 224.00662231]
[95.03521729 209.01068115]
[87.00386810 196.46688843]
[94.41795349 182.49041748]
[94.06892395 167.49447632]
[93.71988678 152.49853516]
[93.37084961 137.50260925]
[93.02182007 122.50666046]
[80.31286621 112.94843292]
[76.57009888 97.49304199]
[62.93883514 91.23297119]
[49.30756760 84.97289276]
[35.67630005 78.71281433]
[22.04503441 72.45273590]
[6.27503872 73.72467804]
[-2.06181097 61.38181686]
[-15.69307804 55.12173843]
[-29.03890228 64.80906677]
[-45.35291290 66.46159363]
[-60.19983292 59.72462082]
[-69.59073639 46.51152039]
[-71.05467987 30.46137810]
[-84.82792664 24.52018166]
[-98.60116577 18.57898521]
[-112.37440491 12.63778877]
[-126.14765167 6.69659185]
[-142.36422729 9.13680649]
[-152.37281799 -3.85396051]
[-145.87745667 -18.91192245]
[-129.55999756 -20.54673767]
[-120.20645142 -7.07664967]
[-106.43321228 -1.13545310]
[-92.65997314 4.80574322]
[-78.88672638 10.74693966]
[-65.11348724 16.68813705]
[-54.67727280 7.80345726]
[-41.36225510 4.28415203]
[-27.76868248 6.87679958]
[-16.57688904 15.12856007]
[-10.01881409 27.46504974]
[-9.43300152 41.49047089]
[4.19826555 47.75054932]
[18.99326134 46.03084946]
[28.30511093 58.82147217]
[41.93637848 65.08155060]
[55.56764603 71.34162140]
[69.19891357 77.60169983]
[82.83017731 83.86177826]
[96.99230194 76.62910461]
[112.52422333 80.04032135]
[124.12630463 70.53285980]
[124.58717346 59.55028534]
[130.92903137 50.84361649]
[140.82687378 47.18960953]
[150.87539673 49.58479309]
[162.90724182 40.62741470]
[174.93908691 31.67003632]
[186.97093201 22.71265602]
[199.00279236 13.75527763]
[211.03463745 4.79789877]
[217.48367310 -9.64926052]
[232.31291199 -11.04319191]
[244.34475708 -20.00057030]
[256.37661743 -28.95795059]
[258.56356812 -46.26985931]
[272.29687500 -56.48012161]
[288.84118652 -53.69910431]
[300.66134644 -62.93402481]
[312.48150635 -72.16894531]
[324.30166626 -81.40386963]
[336.12182617 -90.63879395]
[344.88073730 -105.15491486]
[361.25427246 -100.75677490]
[361.56063843 -83.80559540]
[345.35675049 -78.81863403]
[333.53659058 -69.58370972]
[321.71643066 -60.34878540]
[309.89627075 -51.11386490]
[298.07611084 -41.87894058]
[298.29888916 -28.94254112]
[290.89614868 -18.09416199]
[278.40313721 -13.44904709]
[265.33398438 -16.92610168]
[253.30213928 -7.96872330]
[241.27029419 0.98865557]
[235.68185425 14.79512310]
[219.99201965 16.82974625]
[207.96015930 25.78712654]
[195.92831421 34.74450302]
[183.89646912 43.70188522]
[171.86462402 52.65926361]
[159.83277893 61.61664200]
[153.60302734 79.86499786]
[133.63375854 82.13493347]
[122.03169250 91.64239502]
[123.23912811 103.89714813]
[118.09999084 115.08759308]
[108.01775360 122.15763092]
[108.36679077 137.15356445]
[108.71582794 152.14950562]
[109.06485748 167.14544678]
[109.41389465 182.14138794]
[117.47021484 195.75778198]
[110.03115845 208.66165161]
[110.38019562 223.65757751]
[113.73358917 232.25502014]
[110.55878448 239.00559998]
[110.55878448 254.00559998]
[110.55878448 269.00561523]
[110.55878448 284.00561523]
[113.59557343 290.04525757]
[113.12698364 295.82516479]
[110.19350433 299.69943237]
[109.49562836 314.68316650]
[108.79774475 329.66693115]
[108.09986877 344.65069580]
[107.57637787 359.64154053]
[107.22734070 374.63748169]
[106.87830353 389.63342285]
[115.21566772 403.75506592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 133]
[4 132]
[5 131]
[7 130]
[8 129]
[9 128]
[10 127]
[11 124]
[12 123]
[13 122]
[14 121]
[15 119]
[16 118]
[18 116]
[19 115]
[20 114]
[21 113]
[22 112]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[30 56]
[31 55]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[64 109]
[65 108]
[69 106]
[70 105]
[71 104]
[72 103]
[73 102]
[74 101]
[76 99]
[77 98]
[78 97]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
