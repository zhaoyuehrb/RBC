%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGCUGCCACCGCGGAGCCUGCAGGUGCUCCUGCUGCUGCUGCUGUUGCUGCUGCUGCUGCCGGGCAUGUGGGCUGAGGCAGGCUUGCCCAGGGCAG\
) } def
/len { sequence length } bind def

/coor [
[138.93278503 136.24632263]
[127.94963074 128.60623169]
[123.35928345 115.83112335]
[109.15220642 111.01873016]
[95.40451050 113.56675720]
[86.03540802 103.18833923]
[71.82833099 98.37595367]
[56.27533722 101.27679443]
[46.70317459 89.86526489]
[32.49610138 85.05287933]
[16.94310570 87.95372009]
[7.37094593 76.54219055]
[-6.83612776 71.72980499]
[-22.38912392 74.63064575]
[-31.96128464 63.21911621]
[-46.16835785 58.40673065]
[-60.37543106 53.59434509]
[-74.58250427 48.78195572]
[-88.86270142 44.19109726]
[-103.21257019 39.82287598]
[-117.56243134 35.45465851]
[-129.40496826 40.85013199]
[-141.34335327 36.78816223]
[-147.05928040 26.00177383]
[-161.26634216 21.18938637]
[-175.47341919 16.37700081]
[-189.68049622 11.56461334]
[-203.88757324 6.75222683]
[-219.85487366 10.49083614]
[-230.87741089 -1.65147161]
[-225.61614990 -17.18373108]
[-209.48341370 -20.12768555]
[-199.07518005 -7.45484638]
[-184.86810303 -2.64245987]
[-170.66104126 2.16992664]
[-156.45396423 6.98231316]
[-142.24688721 11.79469967]
[-125.34195709 7.37601423]
[-113.19421387 21.10479164]
[-98.84434509 25.47301102]
[-84.49448395 29.84123230]
[-77.04776764 28.75866127]
[-69.77011871 34.57488251]
[-55.56304550 39.38727188]
[-41.35597229 44.19965744]
[-27.14889717 49.01204300]
[-12.61208630 45.76698685]
[-2.02374101 57.52273178]
[12.18333244 62.33511734]
[26.72014427 59.09006119]
[37.30849075 70.84580231]
[51.51556396 75.65819550]
[66.05237579 72.41313934]
[76.64071655 84.16887665]
[90.84779358 88.98126984]
[104.59548950 86.43324280]
[113.96459198 96.81166077]
[128.17166138 101.62404633]
[143.61299133 93.58611298]
[159.80067444 99.01176453]
[166.99061584 114.12612915]
[181.34048462 118.49435425]
[195.69035339 122.86257172]
[210.04022217 127.23078918]
[224.39007568 131.59901428]
[238.86886597 135.51884460]
[253.46253967 138.98648071]
[268.05621338 142.45413208]
[282.64990234 145.92178345]
[297.24356079 149.38941956]
[312.45858765 145.05198669]
[323.05242920 155.52194214]
[337.64611816 158.98957825]
[350.99621582 150.96385193]
[365.74688721 154.68843079]
[373.31591797 167.46517944]
[387.90960693 170.93283081]
[403.45907593 165.72267151]
[415.56506348 176.78507996]
[411.77398682 192.74000549]
[395.98574829 197.17437744]
[384.44195557 185.52650452]
[369.84826660 182.05886841]
[357.34091187 190.06521606]
[342.49145508 186.75640869]
[334.17846680 173.58326721]
[319.58477783 170.11561584]
[305.41360474 174.70108032]
[293.77593994 163.98309326]
[279.18225098 160.51545715]
[264.58856201 157.04780579]
[249.99488831 153.58016968]
[235.40121460 150.11251831]
[230.80175781 151.91134644]
[225.01667786 150.71028137]
[220.02186584 145.94888306]
[205.67199707 141.58065796]
[191.32212830 137.21243286]
[176.97225952 132.84422302]
[162.62240601 128.47599792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[6 55]
[7 54]
[9 52]
[10 51]
[12 49]
[13 48]
[15 46]
[16 45]
[17 44]
[18 43]
[19 41]
[20 40]
[21 39]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[72 87]
[73 86]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
