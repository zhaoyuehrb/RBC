%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGGUGGCAGUCCAGCAGCCAAGAGGGUAGUGGUGUACCGGAAUGGGGACCCAUUCUUCCCAGGCUCCCAGCUGGUGGUGACUCAACGCCGCUUCC\
) } def
/len { sequence length } bind def

/coor [
[106.27356720 494.97888184]
[93.38723755 483.96166992]
[100.40659332 468.52908325]
[101.33914185 453.55810547]
[98.56439209 446.56338501]
[102.54064178 438.13830566]
[103.93833160 423.20355225]
[105.33602142 408.26879883]
[106.73371124 393.33407593]
[108.13139343 378.39932251]
[109.52908325 363.46459961]
[110.92677307 348.52984619]
[111.39327240 333.53710938]
[110.92677307 318.54437256]
[110.46027374 303.55160522]
[109.52773285 288.58062744]
[108.13004303 273.64590454]
[106.73235321 258.71115112]
[97.84279633 246.76020813]
[104.26054382 232.29911804]
[102.86285400 217.36437988]
[101.46517181 202.42964172]
[100.06748199 187.49490356]
[87.18141174 180.07281494]
[81.06433105 166.32344055]
[84.25361633 151.43444824]
[95.73112488 141.15957642]
[94.33343506 126.22483826]
[92.93574524 111.29010010]
[85.98078918 97.99993134]
[74.50680542 88.33827209]
[63.03281403 78.67662048]
[51.55882645 69.01496124]
[35.83571625 70.61473083]
[23.63954926 60.56341171]
[22.20610046 44.82426453]
[32.38580704 32.73505020]
[48.13923264 31.46808434]
[60.12014389 41.77503586]
[61.22048187 57.54097366]
[72.69447327 67.20262909]
[84.16845703 76.86428833]
[95.64244843 86.52593994]
[109.60961151 81.05616760]
[111.47109222 66.17211914]
[113.33257294 51.28807449]
[115.19405365 36.40402603]
[117.05553436 21.51997757]
[118.91701508 6.63592911]
[120.77849579 -8.24811935]
[113.90969086 -23.13944435]
[123.59126282 -36.37572479]
[139.86364746 -34.34061050]
[145.98719788 -19.12765312]
[135.66253662 -6.38663769]
[133.80105591 8.49741077]
[131.93957520 23.38145828]
[130.07809448 38.26550674]
[128.21661377 53.14955521]
[126.35514069 68.03359985]
[124.49365997 82.91764832]
[139.49020386 82.59590149]
[151.94364929 90.95721436]
[157.32299805 104.95945740]
[153.67102051 119.50810242]
[142.31646729 129.30984497]
[127.39051819 130.79844666]
[114.32376099 123.43231201]
[107.87048340 109.89241028]
[109.26817322 124.82714844]
[110.66586304 139.76188660]
[123.85054779 147.72871399]
[129.74707031 161.76739502]
[126.28736877 176.41302490]
[115.00222015 186.09721375]
[116.39990997 201.03195190]
[117.79759979 215.96669006]
[119.19528961 230.90142822]
[128.18481445 243.92060852]
[121.66709137 257.31347656]
[123.06478119 272.24819946]
[124.46247101 287.18295288]
[128.12390137 293.03213501]
[128.13880920 298.94058228]
[125.45301819 303.08511353]
[125.91951752 318.07785034]
[126.38601685 333.07061768]
[129.06408691 337.00231934]
[130.12141418 341.16696167]
[129.70094299 344.98770142]
[128.13011169 348.00457764]
[125.86151123 349.92755127]
[124.46382904 364.86227417]
[123.06613922 379.79702759]
[121.66844940 394.73175049]
[120.27075958 409.66650391]
[118.87306976 424.60122681]
[117.47537994 439.53598022]
[116.31011963 454.49066162]
[115.37757874 469.46163940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[13 87]
[14 86]
[15 85]
[16 82]
[17 81]
[18 80]
[20 78]
[21 77]
[22 76]
[23 75]
[27 71]
[28 70]
[29 69]
[30 43]
[31 42]
[32 41]
[33 40]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
