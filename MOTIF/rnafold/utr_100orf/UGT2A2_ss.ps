%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGGUUUCCAUAAGGGAUUUUACCAUGCCUAAGAAGUUUGUCCAGAUGCUGGUUUUUAAUUUGACUCUGACUGAAGUUGUUCUAAGUGGGAAUGUGUUAA\
) } def
/len { sequence length } bind def

/coor [
[63.52414322 133.73020935]
[51.09996414 142.13494873]
[38.80539703 150.72817993]
[26.64330673 159.50790405]
[14.48121548 168.28762817]
[2.31912541 177.06735229]
[-9.84296513 185.84707642]
[-21.44718742 195.35192871]
[-32.45037079 205.54652405]
[-43.45355606 215.74113464]
[-54.45674133 225.93572998]
[-58.78228378 241.75413513]
[-74.71072388 245.65501404]
[-85.85623932 233.62548828]
[-80.75328827 218.04049683]
[-64.65134430 214.93254089]
[-53.64815903 204.73794556]
[-42.64497375 194.54333496]
[-31.64179039 184.34873962]
[-31.49167252 181.38507080]
[-30.05558968 178.31141663]
[-27.28890419 175.65901184]
[-23.35568428 173.96318054]
[-18.62268829 173.68498230]
[-6.46059895 164.90525818]
[5.70149183 156.12553406]
[17.86358261 147.34580994]
[30.02567291 138.56608582]
[33.66839981 131.98731995]
[42.69521713 129.71076965]
[55.11940002 121.30602264]
[50.51563263 104.41727448]
[52.05526352 86.98012543]
[59.54715347 71.15937042]
[72.06118774 58.91912842]
[88.04378510 51.77901077]
[86.67315674 36.84176254]
[85.30253601 21.90451431]
[83.93190765 6.96726561]
[82.56127930 -7.96998262]
[66.79702759 -16.63423538]
[59.33407974 -32.83090591]
[62.92765808 -50.14012146]
[75.99006653 -61.82083511]
[73.71135712 -76.64674377]
[71.43264771 -91.47264862]
[69.15393829 -106.29855347]
[60.77158356 -121.03533173]
[72.61197662 -133.16963196]
[87.54981995 -125.15108490]
[83.97984314 -108.57726288]
[86.25855255 -93.75135803]
[88.53726196 -78.92545319]
[90.81597137 -64.09954834]
[102.48492432 -60.11468506]
[111.35723114 -51.44709396]
[115.66364288 -39.73761749]
[114.50786591 -27.24186897]
[108.05228424 -16.39574623]
[97.49852753 -9.34060860]
[98.86915588 5.59663963]
[100.23978424 20.53388786]
[101.61040497 35.47113419]
[102.98103333 50.40838242]
[121.58305359 55.25196457]
[136.95405579 66.79438782]
[146.79298401 83.30773926]
[149.62693787 102.31994629]
[164.33311462 105.27434540]
[179.03927612 108.22873688]
[194.09306335 103.36107635]
[205.04710388 113.45357513]
[219.75326538 116.40796661]
[234.45944214 119.36236572]
[249.24887085 121.86689758]
[264.10781860 123.91925049]
[278.96673584 125.97160339]
[293.94500732 119.29448700]
[307.05593872 129.14514160]
[304.81213379 145.39006042]
[289.52185059 151.31787109]
[276.91439819 140.83053589]
[262.05545044 138.77818298]
[247.19651794 136.72583008]
[242.79542542 138.95304871]
[236.92999268 138.31576538]
[231.50505066 134.06854248]
[216.79887390 131.11413574]
[202.09269714 128.15974426]
[188.09080505 133.23872375]
[176.08488464 122.93491364]
[161.37870789 119.98051453]
[146.67254639 117.02612305]
[142.72007751 125.36157227]
[137.29467773 132.82258606]
[130.58337402 139.15190125]
[122.81760406 144.13130188]
[114.26509094 147.58909607]
[105.22073364 149.40606689]
[95.99637604 149.51954651]
[86.91004944 147.92565918]
[78.27506256 144.67932129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[8 19]
[9 18]
[10 17]
[11 16]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[44 54]
[45 53]
[46 52]
[47 51]
[68 93]
[69 92]
[70 91]
[72 89]
[73 88]
[74 87]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
