%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCUGGAGGCGGAGGCCGCGGGUGGGGGCCUAGUGGAGUGAGGGGUAACAAGAUGGCGACCGAGACGGUGGAGCUCCAUAAGCUAAAGCUUGCCGAACUAAAGCAAGAAUGUCUUGCUCGUGGUUUGGAGACCAAGGGAAUAAAGCAAGAUC\
) } def
/len { sequence length } bind def

/coor [
[89.75606537 136.00387573]
[82.61537170 133.15104675]
[73.12868500 144.77011108]
[63.64200592 156.38919067]
[54.15532684 168.00827026]
[44.66864395 179.62733459]
[35.18196487 191.24641418]
[25.69528389 202.86549377]
[29.49510384 217.79423523]
[23.84187698 231.93263245]
[11.09818077 239.93652344]
[-3.73732424 238.91389465]
[-13.22400475 250.53295898]
[-22.71068573 262.15203857]
[-32.19736481 273.77111816]
[-37.53122711 289.86416626]
[-54.47191620 289.19375610]
[-58.51735306 272.72952271]
[-43.81644058 264.28442383]
[-34.32976151 252.66535950]
[-24.84307861 241.04627991]
[-15.35639858 229.42720032]
[-19.32585144 215.09606934]
[-14.03278542 201.00892639]
[-1.31090069 192.64190674]
[14.07621002 193.37879944]
[23.56289101 181.75973511]
[33.04957199 170.14065552]
[42.53625107 158.52157593]
[52.02293396 146.90251160]
[61.50961304 135.28343201]
[70.99629211 123.66436005]
[64.99743652 113.26791382]
[62.59752655 101.50727081]
[64.04331970 89.59164429]
[69.18615723 78.74620819]
[58.79528809 67.92816925]
[48.40442276 57.11013031]
[38.01355743 46.29209518]
[27.62269211 35.47406006]
[17.23182678 24.65602112]
[6.84096241 13.83798504]
[10.37701225 28.41523933]
[9.56487942 43.39323807]
[4.47338867 57.50269318]
[-4.46599054 69.54792023]
[-16.49570465 78.50816345]
[-30.59631157 83.62410736]
[-45.57287979 84.46219635]
[-60.15624237 80.95142365]
[-73.11055756 73.38928986]
[-83.33802032 62.41664886]
[-89.97193146 48.96335220]
[-92.45011139 34.16947937]
[-90.56253815 19.28871727]
[-84.46918488 5.58211136]
[-74.68641663 -5.78879070]
[-62.04325485 -13.86038113]
[-47.61113358 -17.94864464]
[-32.61307907 -17.70712852]
[-18.32007599 -13.15629768]
[-5.94049454 -4.67915201]
[-12.37088299 -18.23090744]
[-18.80127144 -31.78266525]
[-25.23165894 -45.33442307]
[-37.48434448 -57.05227280]
[-29.61631584 -72.06993866]
[-13.00745296 -68.66670227]
[-11.67990303 -51.76480865]
[-5.24951506 -38.21305466]
[1.18087351 -24.66129684]
[7.61126184 -11.10953999]
[11.54425144 -9.62126732]
[14.95663166 -6.50726223]
[17.18190193 -1.98846912]
[17.65899849 3.44711971]
[28.04986382 14.26515675]
[38.44073105 25.08319283]
[48.83159637 35.90122986]
[59.22246170 46.71926498]
[69.61332703 57.53730392]
[80.00418854 68.35533905]
[103.01631927 62.68889236]
[124.81938171 71.97830963]
[136.67379761 92.50000000]
[151.67379761 92.50000000]
[166.67379761 92.50000000]
[175.29357910 76.24852753]
[190.86933899 66.62014771]
[209.09095764 66.17887878]
[224.96664429 74.96022797]
[234.19032288 90.48484802]
[249.16296387 89.57917023]
[264.13558960 88.67349243]
[279.10821533 87.76781464]
[294.03225708 86.25998688]
[308.88345337 84.15245056]
[323.73464966 82.04491425]
[338.58587646 79.93737793]
[353.43707275 77.82984161]
[368.28826904 75.72230530]
[383.13949585 73.61476135]
[397.99069214 71.50722504]
[412.18246460 59.81543732]
[428.19857788 66.92832947]
[443.00433350 64.52216339]
[457.81008911 62.11598969]
[472.61584473 59.70981979]
[487.42160034 57.30365372]
[502.22735596 54.89748383]
[517.03308105 52.49131393]
[531.69720459 43.98249817]
[543.93292236 55.71806335]
[536.04321289 70.72433472]
[519.43927002 67.29706573]
[504.63351440 69.70323944]
[489.82775879 72.10940552]
[475.02200317 74.51557159]
[460.21624756 76.92174530]
[445.41049194 79.32791138]
[430.60473633 81.73408508]
[423.25222778 91.38484192]
[410.89505005 93.48300171]
[400.09823608 86.35842896]
[385.24700928 88.46597290]
[370.39581299 90.57350922]
[355.54461670 92.68104553]
[340.69338989 94.78858185]
[325.84219360 96.89611816]
[310.99099731 99.00365448]
[296.13980103 101.11119080]
[294.34075928 103.33174896]
[291.52862549 104.95201111]
[287.93551636 105.57289886]
[283.93701172 104.88977051]
[280.01391602 102.74044800]
[265.04125977 103.64612579]
[250.06863403 104.55180359]
[235.09600830 105.45748138]
[231.31910706 116.71104431]
[223.92782593 126.04393005]
[213.77983093 132.33522034]
[202.06559753 134.81915283]
[190.16880798 133.17825317]
[179.50283813 127.58364868]
[171.34297180 118.67764282]
[166.67379761 107.50000000]
[151.67379761 107.50000000]
[136.67379761 107.50000000]
[134.36750793 114.83547974]
[130.61099243 121.54492950]
[125.56275940 127.34523773]
[119.43584442 131.99163818]
[112.48877716 135.28807068]
[105.01470947 137.09541321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[12 22]
[13 21]
[14 20]
[15 19]
[36 82]
[37 81]
[38 80]
[39 79]
[40 78]
[41 77]
[42 76]
[62 72]
[63 71]
[64 70]
[65 69]
[85 149]
[86 148]
[87 147]
[92 139]
[93 138]
[94 137]
[95 136]
[96 131]
[97 130]
[98 129]
[99 128]
[100 127]
[101 126]
[102 125]
[103 124]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
