%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCAGCCAUUUCCCACUUUCCUCACUCCGUAAUUCGGCUGGGAAGUUGGGGAAGAUGGAUAGGGUCUUGCUGAGGUGGAUUUCUCUCUUCUGGCUAACAGCCAUGGUCGAAGGCCUUCAGGUCACAGUGCCCGACAAGAAGAAGGUGGCCAUGC\
) } def
/len { sequence length } bind def

/coor [
[96.13108826 115.79946136]
[91.11209106 113.33831024]
[87.29132843 109.37136078]
[72.91829681 113.66275787]
[58.54526901 117.95415497]
[44.17224503 122.24555969]
[40.64020920 133.66703796]
[32.10207367 141.86251831]
[20.77798843 144.86239624]
[9.53541088 142.02755737]
[1.16310871 134.18136597]
[-13.37010670 137.89425659]
[-27.90332222 141.60716248]
[-42.43653870 145.32006836]
[-56.96975327 149.03297424]
[-71.50296783 152.74588013]
[-86.03618622 156.45877075]
[-100.53152466 160.31689453]
[-114.98754120 164.31983948]
[-129.44355774 168.32279968]
[-143.89956665 172.32574463]
[-158.35559082 176.32870483]
[-172.81159973 180.33164978]
[-175.61755371 190.72593689]
[-182.45655823 198.93588257]
[-192.02639771 203.50402832]
[-202.54844666 203.65634155]
[-212.09820557 199.43269348]
[-218.95724487 191.66712952]
[-233.62738037 194.79559326]
[-248.29751587 197.92404175]
[-258.19750977 210.54821777]
[-274.24053955 210.53504944]
[-284.11981201 197.89463806]
[-280.25674438 182.32363892]
[-265.61477661 175.76676941]
[-251.42596436 183.25392151]
[-236.75584412 180.12545776]
[-222.08570862 176.99699402]
[-212.79212952 159.92971802]
[-193.67118835 155.03906250]
[-176.81455994 165.87564087]
[-162.35853577 161.87268066]
[-147.90252686 157.86973572]
[-133.44650269 153.86677551]
[-118.99049377 149.86383057]
[-104.53447723 145.86088562]
[-98.89590454 141.01791382]
[-89.74908447 141.92555237]
[-75.21587372 138.21266174]
[-60.68265533 134.49975586]
[-46.14944077 130.78684998]
[-31.61622429 127.07395172]
[-17.08300972 123.36104584]
[-2.54979348 119.64814758]
[5.77072477 103.38780212]
[23.62406540 98.23016357]
[39.88084793 107.87252808]
[54.25387192 103.58113098]
[68.62689972 99.28973389]
[82.99992371 94.99833679]
[68.03887939 96.07859039]
[54.68651199 89.24379730]
[46.81417465 76.47561646]
[46.70434570 61.47602081]
[54.38887024 48.59393692]
[67.63971710 41.56435394]
[82.61498260 42.42540741]
[94.97278595 50.92744827]
[101.13014984 64.60542297]
[99.30276489 79.49131775]
[104.30750275 65.35086060]
[109.31224823 51.21040344]
[114.31699371 37.06994629]
[119.03780365 22.83218193]
[123.47278595 8.50280857]
[120.16164398 -6.96803188]
[131.31604004 -16.83863258]
[135.75102234 -31.16800690]
[140.18600464 -45.49737930]
[144.62098694 -59.82675171]
[134.61048889 -71.56529999]
[132.55810547 -86.85552979]
[139.11874390 -100.81839752]
[152.19892883 -108.99839020]
[167.62481689 -108.78530884]
[180.47407532 -100.24714661]
[186.64654541 -86.10839844]
[184.17260742 -70.88069153]
[173.84169006 -59.42312241]
[158.95036316 -55.39176941]
[154.51538086 -41.06239700]
[150.08039856 -26.73302269]
[145.64541626 -12.40365028]
[149.27377319 2.04225826]
[137.80215454 12.93779278]
[133.36717224 27.26716423]
[134.79129028 31.87916946]
[133.29331970 37.43439865]
[128.45745850 42.07469177]
[123.45270538 56.21514893]
[118.44795990 70.35560608]
[113.44322205 84.49606323]
[119.00971222 98.42495728]
[132.38160706 105.22144318]
[145.75352478 112.01792145]
[159.12542725 118.81440735]
[172.49732971 125.61088562]
[185.86923218 132.40736389]
[199.24113464 139.20385742]
[203.69255066 138.79621887]
[207.62960815 139.76164246]
[210.67657471 141.76048279]
[212.61067200 144.36453247]
[213.37780762 147.11611938]
[226.16348267 154.95999146]
[238.94915771 162.80387878]
[251.73484802 170.64775085]
[264.52053833 178.49162292]
[277.30621338 186.33549500]
[296.50192261 180.58210754]
[313.52523804 190.56889343]
[317.73754883 209.54042053]
[330.97079468 216.60310364]
[344.20401001 223.66577148]
[357.62261963 216.05364990]
[373.02523804 216.92738342]
[385.49691772 226.00816345]
[391.05801392 240.39836121]
[387.93399048 255.50610352]
[377.12173462 266.51058960]
[362.07135010 269.90029907]
[347.58541870 264.59359741]
[338.28631592 252.28382874]
[337.14135742 236.89901733]
[323.90811157 229.83633423]
[310.67486572 222.77366638]
[301.93609619 228.34002686]
[291.59082031 229.75859070]
[281.52108765 226.70294189]
[273.58737183 219.66691589]
[269.28497314 209.88607788]
[269.46234131 199.12118530]
[256.67663574 191.27729797]
[243.89096069 183.43342590]
[231.10528564 175.58955383]
[218.31961060 167.74568176]
[205.53392029 159.90180969]
[192.44465637 152.57575989]
[179.07275391 145.77928162]
[165.70085144 138.98278809]
[152.32893372 132.18630981]
[138.95703125 125.38983154]
[125.58512878 118.59334564]
[112.21322632 111.79686737]
[107.35922241 115.03811646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 61]
[4 60]
[5 59]
[6 58]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[29 39]
[30 38]
[31 37]
[71 103]
[72 102]
[73 101]
[74 100]
[75 97]
[76 96]
[78 94]
[79 93]
[80 92]
[81 91]
[104 155]
[105 154]
[106 153]
[107 152]
[108 151]
[109 150]
[110 149]
[115 148]
[116 147]
[117 146]
[118 145]
[119 144]
[120 143]
[123 137]
[124 136]
[125 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
