%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCCCGGCAAAUUGGACAUCUGUAAAAGUAUUUUUCUUCCUGGGAUUUUUUCACUACCCCAAAGUUCAGGUCAUCAUAUUUGCGGUGUGCUUGCUGA\
) } def
/len { sequence length } bind def

/coor [
[55.17322159 381.73638916]
[43.10385513 391.34545898]
[27.75311852 392.88116455]
[14.01937675 385.85351562]
[6.28501558 372.50500488]
[7.01804209 357.09506226]
[15.98454952 344.54095459]
[30.32335854 338.84869385]
[33.10657501 324.10916138]
[35.88978958 309.36962891]
[38.67300797 294.63009644]
[41.45622253 279.89056396]
[44.23944092 265.15103149]
[36.16709900 258.32946777]
[31.70650864 248.65817261]
[31.75897789 237.92616272]
[36.38382339 228.15113831]
[44.77421951 221.20018005]
[55.39712524 218.43312073]
[59.54164886 204.01705933]
[63.68617630 189.60099792]
[62.48792648 182.17201233]
[68.19026184 174.80479431]
[72.78112030 160.52459717]
[77.37197876 146.24440002]
[81.96284485 131.96420288]
[86.55370331 117.68400574]
[91.14456177 103.40380859]
[89.80318451 98.13324738]
[91.61339569 92.50828552]
[96.49034119 88.39438629]
[101.96012115 74.42722321]
[107.42989349 60.46006393]
[112.89966583 46.49290085]
[103.10983276 37.33857346]
[97.07796478 25.40559959]
[95.51943970 12.15836239]
[98.60220337 -0.78597641]
[105.92896271 -11.85489655]
[116.58826447 -19.71155167]
[129.26779175 -23.41621017]
[142.41595459 -22.53862381]
[148.74346924 -36.13871384]
[155.07099915 -49.73880386]
[161.39852905 -63.33889008]
[167.72604370 -76.93898010]
[168.54318237 -86.21932983]
[174.46768188 -90.85891724]
[181.21510315 -104.25564575]
[187.96252441 -117.65237427]
[194.70996094 -131.04910278]
[201.45738220 -144.44581604]
[192.50132751 -156.85740662]
[190.35055542 -172.01104736]
[195.49932861 -186.42454529]
[206.76446533 -196.78578186]
[221.55734253 -200.71382141]
[236.47865295 -197.30601501]
[248.09959412 -187.34548950]
[253.74975586 -173.12106323]
[252.13076782 -157.90141296]
[243.61466980 -145.18391418]
[230.15840149 -137.89096069]
[214.85411072 -137.69839478]
[208.10668945 -124.30166626]
[201.35925293 -110.90494537]
[194.61183167 -97.50821686]
[187.86441040 -84.11149597]
[181.32614136 -70.61145782]
[174.99861145 -57.01136398]
[168.67108154 -43.41127777]
[162.34356689 -29.81118774]
[156.01603699 -16.21109772]
[167.04008484 -3.60794687]
[171.54541016 12.57544518]
[168.60067749 29.16959953]
[158.73840332 42.90336227]
[143.85946655 51.04873276]
[126.86682129 51.96267319]
[121.39704895 65.92983246]
[115.92727661 79.89699554]
[110.45750427 93.86415863]
[105.42475891 107.99467468]
[100.83390045 122.27486420]
[96.24303436 136.55506897]
[91.65217590 150.83526611]
[87.06131744 165.11546326]
[82.47045898 179.39566040]
[78.10224152 193.74551392]
[73.95771790 208.16159058]
[69.81318665 222.57765198]
[80.53166199 239.36935425]
[75.79594421 258.41256714]
[58.97896957 267.93426514]
[56.19575119 282.67379761]
[53.41253662 297.41329956]
[50.62932205 312.15283203]
[47.84610367 326.89236450]
[45.06288910 341.63189697]
[56.33868408 352.16088867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 99]
[9 98]
[10 97]
[11 96]
[12 95]
[13 94]
[19 91]
[20 90]
[21 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[31 82]
[32 81]
[33 80]
[34 79]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
