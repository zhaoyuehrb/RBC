%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUGCGCAGGCUCAGUGCUGCUUACCCAUCAUGGAAGCAAUGUGGCUCCUGUGUGUGGCGUUGGCGGUCUUGGCAUGGGGCUUCCUCUGGGUUUGGGACUCCUCAGAACGAAUGAAGAGUCGGGAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[92.35049438 318.82513428]
[78.27548218 311.12619019]
[75.66118622 295.29757690]
[86.51306152 283.48165894]
[87.22142792 268.49838257]
[87.92979431 253.51512146]
[88.63816071 238.53186035]
[75.52854156 228.72476196]
[70.76697540 212.88751221]
[76.40653229 197.16522217]
[90.42404938 187.78102112]
[90.77832794 172.78521729]
[91.13260651 157.78939819]
[91.48689270 142.79357910]
[91.84117126 127.79776764]
[81.91421509 122.63153839]
[74.68594360 114.08831787]
[71.23493958 103.44289398]
[72.07614899 92.28373718]
[59.14522552 84.68168640]
[46.21429825 77.07963562]
[33.28337097 69.47759247]
[20.35244370 61.87554169]
[7.42151785 54.27349472]
[-8.39637184 53.94955063]
[-15.44677734 40.82929993]
[-28.37770462 33.22724915]
[-41.39751053 25.77845001]
[-54.50438309 18.48393440]
[-67.61125183 11.18941975]
[-80.71812439 3.89490509]
[-93.91022491 -3.24430585]
[-107.18572998 -10.22721672]
[-120.46123505 -17.21012878]
[-133.73674011 -24.19303894]
[-147.01223755 -31.17595100]
[-162.82777405 -30.75254059]
[-170.48991394 -43.52520370]
[-183.76541138 -50.50811386]
[-197.04090881 -57.49102402]
[-212.05761719 -52.56414795]
[-226.12194824 -59.77318573]
[-230.88978577 -74.84114075]
[-223.53245544 -88.82846832]
[-208.41493225 -93.43672943]
[-194.50617981 -85.93192291]
[-190.05799866 -70.76652527]
[-176.78250122 -63.78361511]
[-163.50700378 -56.80070496]
[-148.64100647 -57.72357941]
[-140.02932739 -44.45145416]
[-126.75382233 -37.46854019]
[-113.47832489 -30.48563004]
[-100.20281982 -23.50271988]
[-86.92731476 -16.51980782]
[-79.47196198 -16.18699455]
[-73.42360687 -9.21196556]
[-60.31673813 -1.91745067]
[-47.20986557 5.37706423]
[-34.10299683 12.67157841]
[-26.65758514 13.18038559]
[-20.77565575 20.29632378]
[-7.84472942 27.89837265]
[7.04825401 27.67856407]
[15.02356625 41.34256744]
[27.95449257 48.94461441]
[40.88541794 56.54666138]
[53.81634521 64.14871216]
[66.74726868 71.75076294]
[79.67819977 79.35280609]
[102.73316193 71.15885162]
[123.83852386 83.53771210]
[137.96726990 78.50000763]
[152.09602356 73.46229553]
[156.56518555 58.72008896]
[168.71604919 49.54349518]
[183.76254272 49.28443527]
[195.93072510 57.83271408]
[210.05947876 52.79500961]
[224.18821716 47.75730133]
[238.31697083 42.71959305]
[252.44572449 37.68188858]
[259.27328491 23.68110085]
[273.67361450 18.77341843]
[286.97915649 25.36874390]
[301.10791016 20.33103752]
[315.23663330 15.29333019]
[329.36538696 10.25562286]
[333.61087036 -4.66936922]
[345.83901978 -14.22199345]
[361.34780884 -14.72907162]
[374.17379761 -5.99562073]
[379.38516235 8.62016869]
[374.97802734 23.49822617]
[362.64697266 32.91763687]
[347.13360596 33.25644684]
[334.40310669 24.38437080]
[320.27435303 29.42207718]
[306.14559937 34.45978546]
[292.01684570 39.49749374]
[285.88558960 53.02314758]
[271.62881470 58.33336639]
[257.48342896 51.81063461]
[243.35467529 56.84834290]
[229.22593689 61.88605118]
[215.09718323 66.92375946]
[200.96842957 71.96146393]
[196.95355225 86.27993774]
[185.13745117 95.59893036]
[169.92179871 96.18006134]
[157.13372803 87.59104919]
[143.00497437 92.62875366]
[128.87623596 97.66645813]
[128.62353516 104.46942902]
[126.79026794 111.02559662]
[123.47767639 116.97294617]
[118.86867523 121.98307037]
[113.21776581 125.77931213]
[106.83699036 128.15203857]
[106.48270416 143.14785767]
[106.12842560 158.14367676]
[105.77414703 173.13949585]
[105.41986084 188.13531494]
[117.00843811 195.69731140]
[123.27533722 207.91256714]
[122.66819000 221.51950073]
[115.45414734 232.94445801]
[103.62142181 239.24021912]
[102.91305542 254.22348022]
[102.20468903 269.20675659]
[101.49632263 284.19000244]
[111.18504333 296.97705078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 131]
[5 130]
[6 129]
[7 128]
[11 123]
[12 122]
[13 121]
[14 120]
[15 119]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[26 63]
[27 62]
[28 60]
[29 59]
[30 58]
[31 57]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[38 49]
[39 48]
[40 47]
[72 113]
[73 112]
[74 111]
[78 107]
[79 106]
[80 105]
[81 104]
[82 103]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
