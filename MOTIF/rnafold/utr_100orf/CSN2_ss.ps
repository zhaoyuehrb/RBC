%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGACUUAGUAGCCAUGAAGGUCCUCAUCCUCGCCUGCCUGGUGGCUCUUGCUCUUGCAAGGGAGACCAUAGAAAGCCUUUCAAGCAGUGAGGAAUCUAUUACAGAAUACAAGC\
) } def
/len { sequence length } bind def

/coor [
[54.54323196 301.65200806]
[54.07501602 286.65933228]
[57.27570343 272.00946045]
[46.45766449 282.40032959]
[35.63962936 292.79119873]
[24.82159233 303.18206787]
[14.00355530 313.57293701]
[3.18551874 323.96377563]
[-7.63251781 334.35464478]
[-3.31303191 349.03799438]
[-6.32337856 364.04455566]
[-15.97180271 375.92590332]
[-30.04116631 381.95181274]
[-45.29843521 380.73754883]
[-58.23759460 372.56219482]
[-65.88533020 359.30432129]
[-66.48423767 344.01055908]
[-59.89669800 330.19522095]
[-47.63648224 321.03305054]
[-32.52089310 318.62939453]
[-18.02338409 323.53662109]
[-7.20534658 313.14575195]
[3.61269021 302.75488281]
[14.43072701 292.36401367]
[25.24876404 281.97314453]
[36.06679916 271.58227539]
[46.88483810 261.19143677]
[47.39770126 256.64785767]
[49.79261780 252.29942322]
[53.96157455 248.93415833]
[57.55131149 234.37002563]
[61.14104462 219.80589294]
[64.73078156 205.24177551]
[68.32051849 190.67764282]
[71.91024780 176.11352539]
[75.49998474 161.54939270]
[74.02625275 154.20623779]
[79.38655090 146.64505005]
[83.36600494 132.18254089]
[87.34546661 117.72004700]
[78.29591370 98.24786377]
[90.35183716 80.47949219]
[88.74385834 65.56593323]
[87.13587952 50.65236664]
[85.52790070 35.73880005]
[73.50267029 25.83770943]
[72.08440399 10.69032764]
[81.59769440 -0.71287304]
[79.98971558 -15.62643719]
[78.38173676 -30.54000282]
[76.77375793 -45.45356750]
[75.16577911 -60.36713028]
[73.55780029 -75.28069305]
[71.94982910 -90.19425964]
[61.84343719 -103.10909271]
[68.22493744 -118.21566772]
[84.52958679 -119.97363281]
[93.98455811 -106.57453918]
[86.86338806 -91.80223846]
[88.47136688 -76.88867188]
[90.07934570 -61.97510910]
[91.68732452 -47.06154251]
[93.29530334 -32.14797974]
[94.90327454 -17.23441505]
[96.51125336 -2.32085037]
[108.23661804 6.79240370]
[110.07978821 21.89397240]
[100.44146729 34.13082504]
[102.04944611 49.04438782]
[103.65742493 63.95795441]
[105.26539612 78.87152100]
[108.73101807 80.05240631]
[111.94978333 81.79725647]
[114.83070374 84.05673981]
[128.20492554 77.26483154]
[141.57916260 70.47292328]
[154.95338440 63.68101883]
[166.33805847 51.11814880]
[181.56155396 58.58015060]
[178.60545349 75.27439117]
[161.74530029 77.05524445]
[148.37106323 83.84715271]
[134.99684143 90.63906097]
[121.62261200 97.43096924]
[119.90832520 108.82019806]
[112.62412262 117.74172211]
[101.80796814 121.69950104]
[97.82850647 136.16200256]
[93.84905243 150.62449646]
[90.06410980 165.13912964]
[86.47438049 179.70324707]
[82.88464355 194.26737976]
[79.29490662 208.83151245]
[75.70516968 223.39562988]
[72.11544037 237.95976257]
[68.52570343 252.52389526]
[79.61627197 242.42442322]
[92.83496857 235.33456421]
[107.38356781 231.68241882]
[122.38356781 231.68853760]
[136.92918396 235.35253906]
[150.14208984 242.45317078]
[161.22442627 252.56169128]
[169.50698853 265.06765747]
[174.48960876 279.21591187]
[175.87145996 294.15213013]
[173.56904602 308.97436523]
[167.72143555 322.78762817]
[158.68173218 334.75772095]
[146.99578857 344.16189575]
[133.36924744 350.43228149]
[118.62496948 353.19021606]
[103.65327454 352.26916504]
[89.35822296 347.72476196]
[76.60303497 339.83142090]
[66.15791321 329.06573486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[38 89]
[39 88]
[40 87]
[42 71]
[43 70]
[44 69]
[45 68]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
