%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGGGGAUGCCGACGCCUGGGCCUUGAGGAUGCUGCGGAAGCUCACCAUCGAGCAGAUCAACGACUGGUUCACCAUCGGCAAGACGGUGACCAAUGUGGAGCUGCUGGGCGCGCCGCCCGCCUUCCCGG\
) } def
/len { sequence length } bind def

/coor [
[73.55658722 261.02072144]
[62.71308136 249.52316284]
[63.25908279 233.72831726]
[74.87065125 223.00697327]
[75.23033905 208.01129150]
[75.59002686 193.01559448]
[75.94972229 178.01991272]
[76.30941010 163.02423096]
[68.87952423 150.11508179]
[76.94551849 136.50440979]
[77.30520630 121.50872803]
[66.63520813 110.96590424]
[51.64491272 111.50537109]
[36.65461731 112.04484558]
[29.79478073 124.06496429]
[17.97183418 131.04815674]
[4.35065985 131.25009155]
[-7.48393059 124.72527313]
[-14.47064400 113.28438568]
[-29.46956444 113.46424103]
[-44.46848679 113.64409637]
[-59.46740723 113.82395935]
[-74.46633148 114.00381470]
[-89.45662689 114.54328918]
[-104.42967224 115.44205475]
[-114.89001465 126.98411560]
[-130.08761597 127.68229675]
[-141.02674866 117.63883209]
[-155.99978638 118.53760529]
[-169.37947083 128.02003479]
[-184.16633606 120.92916107]
[-185.14894104 104.55947876]
[-171.31646729 95.75070953]
[-156.89855957 103.56455231]
[-141.92552185 102.66578674]
[-132.26634216 91.38588715]
[-117.09435272 90.26110840]
[-105.32844543 100.46900940]
[-90.35540009 99.57023621]
[-86.51642609 96.57910156]
[-80.73318481 96.03513336]
[-74.64618683 99.00489044]
[-59.64726639 98.82503510]
[-44.64834595 98.64517975]
[-29.64942360 98.46531677]
[-14.65050125 98.28546143]
[-5.63837576 84.61932373]
[9.88669491 78.92705536]
[25.91452980 83.62184143]
[36.11514664 97.05455017]
[51.10544205 96.51507568]
[66.09574127 95.97560883]
[104.01065826 80.58269501]
[113.62181854 69.06637573]
[123.23298645 57.55005646]
[132.84414673 46.03373718]
[142.45530701 34.51742172]
[145.35733032 18.96464729]
[159.45260620 14.15085602]
[169.06376648 2.63453841]
[171.96580505 -12.91823578]
[186.06108093 -17.73202705]
[195.67224121 -29.24834442]
[205.28340149 -40.76465988]
[204.91595459 -53.72248840]
[213.24102783 -63.12825775]
[225.34684753 -64.26122284]
[235.23139954 -75.54376221]
[245.11595154 -86.82629395]
[255.00050354 -98.10883331]
[258.34832764 -106.71699524]
[265.25988770 -109.53974152]
[275.41213989 -120.58201599]
[285.56439209 -131.62428284]
[295.71667480 -142.66654968]
[299.36102295 -158.06230164]
[313.67089844 -162.19476318]
[323.82315063 -173.23703003]
[324.58935547 -189.26176453]
[337.67956543 -198.53678894]
[353.05209351 -193.94708252]
[358.91442871 -179.01347351]
[350.76950073 -165.19175720]
[334.86541748 -163.08476257]
[324.71316528 -152.04249573]
[321.79495239 -137.43656921]
[306.75894165 -132.51429749]
[296.60668945 -121.47202301]
[286.45440674 -110.42975616]
[276.30215454 -99.38748932]
[266.28305054 -88.22428131]
[256.39849854 -76.94174957]
[246.51393127 -65.65921021]
[236.62937927 -54.37667084]
[234.19911194 -37.03966141]
[216.79971313 -31.15349960]
[207.18855286 -19.63718224]
[197.57739258 -8.12086487]
[195.36280823 6.60818529]
[180.58009338 12.24569988]
[170.96893311 23.76201820]
[168.75434875 38.49106598]
[153.97161865 44.12858200]
[144.36045837 55.64490128]
[134.74929810 67.16121674]
[125.13813782 78.67753601]
[115.52697754 90.19385529]
[116.42575073 105.16690063]
[127.34548950 115.45082855]
[138.26522827 125.73476410]
[149.18498230 136.01869202]
[160.10472107 146.30262756]
[175.78068542 152.76022339]
[173.91497803 169.61120605]
[157.20606995 172.48323059]
[149.82078552 157.22236633]
[138.90104675 146.93843079]
[127.98130798 136.65451050]
[117.06156158 126.37057495]
[106.14182281 116.08664703]
[92.30089569 121.86841583]
[91.94120789 136.86410522]
[99.34535980 150.84584045]
[91.30509949 163.38391113]
[90.94540405 178.37960815]
[90.58571625 193.37528992]
[90.22602844 208.37097168]
[89.86634064 223.36666870]
[100.95051575 234.63238525]
[100.73860931 250.43525696]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 128]
[5 127]
[6 126]
[7 125]
[8 124]
[10 122]
[11 121]
[12 52]
[13 51]
[14 50]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 39]
[25 38]
[28 35]
[29 34]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[59 101]
[60 100]
[62 98]
[63 97]
[64 96]
[67 94]
[68 93]
[69 92]
[70 91]
[72 90]
[73 89]
[74 88]
[75 87]
[77 85]
[78 84]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
