%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGUCAUCCGCCAUUUUGUGAGAAGCAAGGUGGCCUCCACGUUUCCUGAGCGUCUUCUUCGCUUUUGCCUCGACCGCCCCUUGACCACAGACAUGUCUCGGGAUCGGUUCCGGAGUCGUGGCGGUGGCGGUGGUGGCUUCCACAGGCGUGGAGGAGGCGGCGGCCGCGGCGGCCUCCACGACUUCCGUUCUC\
) } def
/len { sequence length } bind def

/coor [
[66.28689575 137.88169861]
[55.38059616 128.37776184]
[45.75947189 139.88575745]
[36.13835144 151.39376831]
[40.83178711 161.87908936]
[41.26461029 173.30735779]
[37.41245270 184.02098083]
[29.86968231 192.48033142]
[19.75803947 197.48503113]
[8.55991840 198.34422302]
[-2.09891677 194.97163391]
[-12.26754284 205.99882507]
[-22.43616867 217.02603149]
[-32.60479355 228.05322266]
[-42.77341843 239.08041382]
[-52.94204712 250.10762024]
[-63.11067200 261.13479614]
[-73.27929688 272.16201782]
[-83.44792175 283.18920898]
[-93.61654663 294.21640015]
[-94.40653992 310.23999023]
[-107.51049042 319.49557495]
[-122.87617493 314.88305664]
[-128.71635437 299.94079590]
[-120.55094147 286.13116455]
[-104.64374542 284.04776001]
[-94.47512054 273.02056885]
[-84.30649567 261.99337769]
[-74.13787079 250.96618652]
[-63.96924210 239.93899536]
[-53.80061722 228.91178894]
[-43.63198853 217.88459778]
[-33.46336365 206.85740662]
[-23.29473877 195.83020020]
[-13.12611294 184.80300903]
[-17.85649872 166.73689270]
[-10.70106411 149.32478333]
[5.62346363 139.65231323]
[24.63035393 141.77264404]
[34.25147629 130.26464844]
[43.87260056 118.75664520]
[41.65917206 111.59069824]
[27.69861603 117.07730865]
[14.90197563 124.90328979]
[3.09379601 115.65305328]
[7.62861300 101.35495758]
[22.60942268 100.60111237]
[37.23231888 97.25881195]
[35.01889038 90.09287262]
[20.58371353 86.01541901]
[6.14853382 81.93797302]
[-8.28664494 77.86051941]
[-22.72182465 73.78306580]
[-35.54861832 82.72775269]
[-51.11935425 81.28338623]
[-62.08200836 70.13196564]
[-63.26034927 54.53884125]
[-54.09799957 41.86661148]
[-38.92114258 38.09872055]
[-24.89582443 45.01424408]
[-18.64437294 59.34788895]
[-4.20919371 63.42533875]
[10.22598553 67.50279236]
[24.66116333 71.58023834]
[39.09634399 75.65769196]
[44.65092850 70.61818695]
[33.93769836 60.11929703]
[21.31516647 52.01549149]
[24.62742424 37.38576126]
[39.50957489 35.50918198]
[46.35000992 48.85799026]
[55.76009369 60.53918076]
[61.31467819 55.49967957]
[58.65681458 40.73703003]
[55.99894714 25.97438431]
[53.34108353 11.21173668]
[50.68321991 -3.55091095]
[38.47276306 -17.32566643]
[45.03788376 -33.59383774]
[42.14131546 -48.31151199]
[39.24474716 -63.02918243]
[26.40539169 -71.84897614]
[23.67751694 -86.81604767]
[32.16496277 -99.00205994]
[29.26839447 -113.71973419]
[26.37182617 -128.43740845]
[11.98963356 -134.01916504]
[2.92677569 -146.50389099]
[2.07517672 -161.90773010]
[9.70657921 -175.31538391]
[23.38582993 -182.44851685]
[38.74792862 -181.03097534]
[50.89088821 -171.51509094]
[55.93993378 -156.93734741]
[52.28393173 -141.94944763]
[41.08950043 -131.33396912]
[43.98606873 -116.61630249]
[46.88263702 -101.89862823]
[59.35486603 -93.83766937]
[62.50205994 -78.95311737]
[53.96241760 -65.92575073]
[56.85898972 -51.20808029]
[59.75555801 -36.49040604]
[69.62757111 -29.48426819]
[72.15470886 -17.23577690]
[65.44586945 -6.20877552]
[68.10372925 8.55387115]
[70.76159668 23.31651878]
[73.41946411 38.07916641]
[76.07732391 52.84181213]
[121.85822296 61.57549667]
[135.45468140 97.62384033]
[150.29565430 99.80226898]
[165.13661194 101.98069763]
[179.97758484 104.15912628]
[194.83570862 106.21731567]
[209.71002197 108.15514374]
[224.58432007 110.09296417]
[239.45861816 112.03078461]
[254.33291626 113.96860504]
[269.20721436 115.90642548]
[284.08151245 117.84425354]
[298.76562500 111.95460510]
[310.38665771 121.27127838]
[325.26098633 123.20910645]
[340.13528442 125.14692688]
[354.81936646 119.25727844]
[366.44042969 128.57395935]
[381.31472778 130.51177979]
[395.99880981 124.62213898]
[407.61987305 133.93881226]
[422.49417114 135.87663269]
[437.36846924 137.81445312]
[452.24276733 139.75227356]
[467.11706543 141.69009399]
[481.80117798 135.80046082]
[493.42221069 145.11712646]
[508.29653931 147.05494690]
[523.17083740 148.99276733]
[538.12170410 150.20597839]
[553.11383057 150.69171143]
[568.10595703 151.17744446]
[583.09808350 151.66316223]
[598.09020996 152.14889526]
[612.28729248 143.94061279]
[626.35729980 152.36477661]
[625.82623291 168.75532532]
[611.24041748 176.25106812]
[597.60449219 167.14102173]
[582.61236572 166.65530396]
[567.62023926 166.16957092]
[552.62811279 165.68383789]
[537.63592529 165.19812012]
[547.00268555 176.91409302]
[545.49066162 191.83769226]
[533.96429443 201.43681335]
[519.01348877 200.22346497]
[509.18582153 188.89134216]
[510.09997559 173.91921997]
[521.23303223 163.86708069]
[506.35870361 161.92926025]
[491.48440552 159.99142456]
[477.86422729 166.01968384]
[465.17926025 156.56440735]
[450.30496216 154.62657166]
[435.43066406 152.68875122]
[420.55633545 150.75093079]
[405.68203735 148.81311035]
[392.06185913 154.84135437]
[379.37689209 145.38607788]
[364.50259399 143.44825745]
[350.88241577 149.47650146]
[338.19744873 140.02122498]
[323.32315063 138.08340454]
[308.44885254 136.14558411]
[294.82867432 142.17382812]
[282.14370728 132.71855164]
[267.26940918 130.78073120]
[252.39509583 128.84291077]
[237.52079773 126.90508270]
[222.64649963 124.96726227]
[207.77220154 123.02944183]
[192.89788818 121.09162140]
[185.84889221 123.34824371]
[177.79916382 119.00009918]
[162.95819092 116.82167053]
[148.11721802 114.64324188]
[133.27624512 112.46481323]
[130.34193420 122.37924957]
[124.38877869 131.54103088]
[115.63665009 139.02218628]
[104.59052277 143.96762085]
[92.01441193 145.68199158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[73 110]
[74 109]
[75 108]
[76 107]
[77 106]
[79 103]
[80 102]
[81 101]
[84 98]
[85 97]
[86 96]
[112 188]
[113 187]
[114 186]
[115 185]
[116 183]
[117 182]
[118 181]
[119 180]
[120 179]
[121 178]
[122 177]
[124 175]
[125 174]
[126 173]
[128 171]
[129 170]
[131 168]
[132 167]
[133 166]
[134 165]
[135 164]
[137 162]
[138 161]
[139 160]
[140 153]
[141 152]
[142 151]
[143 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
