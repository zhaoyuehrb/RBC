%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUGUAGCUCGCGUUGAAGCCGCACGUCCGGCCCCGAUCCCGGCACCAUGAGCUUCGGCUCGGAGCACUACCUGUGCUCCUCCUCCUCCUACCGCAAGGUGUUCGGGGAUGGCUCUCGCCUGUCCGCCCGCCUCUCUGGGGCCGGCG\
) } def
/len { sequence length } bind def

/coor [
[-19.06314659 348.58517456]
[-21.38245010 363.40478516]
[-34.30726242 371.01721191]
[-48.39269638 365.85964966]
[-53.34565353 351.70025635]
[-62.41464233 363.64819336]
[-71.48362732 375.59616089]
[-73.66420746 391.26635742]
[-87.52209473 396.72604370]
[-96.59108734 408.67401123]
[-105.66007233 420.62194824]
[-101.04639435 435.43728638]
[-106.05395508 450.12414551]
[-118.75724030 459.03515625]
[-134.27157593 458.74383545]
[-146.63139343 449.36224365]
[-151.08407593 434.49774170]
[-145.91749573 419.86605835]
[-133.11828613 411.09338379]
[-117.60801697 411.55297852]
[-108.53903198 399.60501099]
[-99.47004700 387.65707397]
[-97.93814087 372.84146118]
[-83.43157959 366.52716064]
[-74.36258698 354.57922363]
[-65.29360199 342.63125610]
[-56.86235428 330.22506714]
[-49.09194946 317.39459229]
[-48.31203461 309.99496460]
[-41.02206421 304.37921143]
[-32.98466492 291.71429443]
[-24.94726181 279.04937744]
[-16.90986061 266.38446045]
[-8.87245846 253.71952820]
[-0.83505636 241.05461121]
[7.20234537 228.38969421]
[15.23974705 215.72477722]
[23.27714920 203.05986023]
[16.15295982 191.36680603]
[14.76928616 177.67787170]
[19.45434189 164.67094421]
[29.34351158 154.91532898]
[42.53829193 150.36431885]
[56.47060394 151.96421814]
[64.77147675 139.47039795]
[73.07234955 126.97657776]
[64.40026093 119.83418274]
[57.75751114 109.90493011]
[54.02803802 97.80651855]
[53.89744949 84.43135834]
[57.76972580 70.88085938]
[65.70594025 58.37515640]
[55.66897964 47.22798157]
[45.63202286 36.08081055]
[35.59506226 24.93363762]
[19.83983421 20.38338470]
[16.16605759 4.40103722]
[28.35299873 -6.57213402]
[43.86377716 -1.24787247]
[46.74223328 14.89667797]
[56.77919388 26.04384995]
[66.81615448 37.19102478]
[76.85311127 48.33819580]
[90.61943054 42.38097763]
[89.36426544 27.43358421]
[88.10909271 12.48619175]
[86.85392761 -2.46120167]
[85.59876251 -17.40859413]
[84.34358978 -32.35598755]
[83.08842468 -47.30337906]
[71.81220245 -58.71505737]
[73.84661102 -74.62860107]
[87.63101959 -82.83649445]
[102.59121704 -77.04235077]
[107.25101471 -61.69093704]
[98.03582001 -48.55854797]
[99.29098511 -33.61115646]
[100.54615021 -18.66376305]
[101.80132294 -3.71636915]
[103.05648804 11.23102379]
[104.31165314 26.17841721]
[105.56682587 41.12580872]
[112.38609314 44.24791718]
[118.45074463 30.52858543]
[124.51538849 16.80925369]
[126.57960510 1.95196497]
[141.30592346 -0.90028310]
[148.76800537 12.11192036]
[138.87004089 23.38132286]
[132.44734192 36.93672562]
[126.02463531 50.49212646]
[132.84390259 53.61423492]
[144.97915649 44.79745483]
[157.11441040 35.98067474]
[169.24967957 27.16389656]
[175.42187500 11.97060776]
[191.70068359 9.98756695]
[201.33985901 23.25475502]
[194.42344666 38.12402725]
[178.06645203 39.29915237]
[165.93119812 48.11593246]
[153.79594421 56.93270874]
[141.66069031 65.74948883]
[143.79406738 75.91854095]
[143.72518921 85.63545227]
[141.70378113 94.45985413]
[138.06199646 102.02938843]
[152.59074402 105.75974274]
[167.15776062 109.33773804]
[181.76144409 112.76300812]
[196.36512756 116.18827057]
[210.96881104 119.61353302]
[225.60755920 122.88568115]
[240.27976990 126.00435638]
[254.95199585 129.12303162]
[270.37280273 123.54357147]
[282.73913574 134.31416321]
[279.32955933 150.35494995]
[263.65158081 155.16455078]
[251.83331299 143.79524231]
[237.16110229 140.67657471]
[222.48889160 137.55789185]
[215.24436951 139.25485229]
[207.54354858 134.21720886]
[192.93986511 130.79194641]
[178.33618164 127.36669159]
[163.73249817 123.94142151]
[156.45402527 125.48629761]
[148.86039734 120.28849030]
[134.33164978 116.55813599]
[113.65957642 135.58441162]
[85.56616974 135.27745056]
[77.26529694 147.77127075]
[68.96442413 160.26509094]
[76.46372223 174.96595764]
[75.55073547 191.35005188]
[66.56768036 204.97032166]
[52.03437424 212.17739868]
[35.94207001 211.09725952]
[27.90466690 223.76217651]
[19.86726379 236.42709351]
[11.82986259 249.09202576]
[3.79246068 261.75692749]
[-4.24494123 274.42184448]
[-12.28234291 287.08676147]
[-20.31974602 299.75170898]
[-28.35714722 312.41662598]
[-36.26148224 325.16500854]
[-44.03189087 337.99545288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 26]
[6 25]
[7 24]
[9 22]
[10 21]
[11 20]
[27 149]
[28 148]
[30 147]
[31 146]
[32 145]
[33 144]
[34 143]
[35 142]
[36 141]
[37 140]
[38 139]
[44 134]
[45 133]
[46 132]
[52 63]
[53 62]
[54 61]
[55 60]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[92 103]
[93 102]
[94 101]
[95 100]
[107 130]
[108 129]
[109 127]
[110 126]
[111 125]
[112 124]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
