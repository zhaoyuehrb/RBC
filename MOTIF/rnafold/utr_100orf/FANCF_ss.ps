%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAAGCGGAAGUAGGGCCUUCGCGCACCUCAUGGAAUCCCUUCUGCAGCACCUGGAUCGCUUUUCCGAGCUUCUGGCGGUCUCAAGCACUACCUACGUCAGCACCUGGGACCCCGCCACCGUGCGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[93.81551361 110.02487183]
[89.58980560 107.25431824]
[74.59404755 106.89734650]
[59.59829712 106.54038239]
[44.60254669 106.18341827]
[29.60679436 105.82645416]
[14.61104202 105.46949005]
[-0.38470966 105.11252594]
[-15.38046169 104.75555420]
[-24.03961754 115.14809418]
[-36.92360687 118.57534790]
[-49.23599625 113.99475098]
[-56.52702332 103.30234528]
[-71.51003265 102.58861542]
[-86.49304199 101.87488556]
[-101.47605133 101.16115570]
[-113.11495209 111.51363373]
[-128.29968262 110.57637024]
[-138.09745789 99.41666412]
[-153.08047485 98.70293427]
[-157.05307007 100.95503998]
[-161.12319946 101.68730927]
[-164.78216553 101.06581879]
[-167.63327026 99.41023254]
[-169.43354797 97.14140320]
[-184.28086853 95.00668335]
[-199.12818909 92.87196350]
[-205.66690063 102.48831940]
[-215.30529785 108.90174103]
[-226.59965515 111.19835663]
[-237.87577820 109.07746124]
[-247.47708130 102.89025116]
[-254.00798035 93.58238983]
[-256.53674316 82.54959106]
[-271.19393921 79.36111450]
[-286.64114380 84.86711121]
[-298.95608521 74.03776550]
[-295.47018433 58.01339340]
[-279.76947021 53.27848434]
[-268.00546265 64.70391083]
[-253.34826660 67.89239502]
[-240.26831055 54.68187714]
[-221.73912048 51.88817215]
[-205.08418274 60.79463959]
[-196.99346924 78.02463531]
[-182.14614868 80.15936279]
[-167.29882812 82.29408264]
[-152.36674500 83.71992493]
[-137.38374329 84.43365479]
[-126.56952667 74.25581360]
[-111.36445618 74.76619720]
[-100.76232147 86.17814636]
[-85.77931213 86.89187622]
[-70.79630280 87.60560608]
[-55.81329346 88.31932831]
[-43.91534805 76.49568939]
[-26.80978966 76.89624023]
[-15.02349567 89.75980377]
[-0.02774419 90.11676788]
[14.96800804 90.47373962]
[29.96376038 90.83070374]
[44.95951080 91.18766785]
[59.95526505 91.54463196]
[74.95101166 91.90159607]
[89.94676971 92.25856018]
[104.94570160 92.08007050]
[119.92871857 91.36634064]
[134.91172791 90.65261078]
[150.10673523 80.33121490]
[165.39709473 88.85842133]
[180.35887146 87.78833008]
[189.06205750 73.33921814]
[204.49577332 66.95451355]
[220.54190063 70.95225525]
[230.96530151 83.57623291]
[245.89736938 82.15039062]
[260.82943726 80.72454834]
[275.76153564 79.29870605]
[290.65545654 77.51792145]
[305.50277710 75.38320160]
[320.35009766 73.24847412]
[335.19741821 71.11375427]
[350.04473877 68.97903442]
[364.89205933 66.84430695]
[379.73937988 64.70958710]
[394.89376831 51.51443100]
[412.56121826 59.23067093]
[427.29016113 56.39190292]
[430.69833374 41.54925537]
[439.85409546 29.37995720]
[453.17117310 21.99241447]
[468.34225464 20.66656113]
[482.73889160 25.63211060]
[493.86679077 36.02875137]
[499.79794312 50.05520248]
[499.50476074 65.28129578]
[493.03802490 79.06902313]
[481.51815796 89.02956390]
[466.94104004 93.43721008]
[451.83221436 91.52830505]
[438.80941772 83.63357544]
[430.12893677 71.12083435]
[415.39999390 73.95960236]
[410.38488770 82.99863434]
[401.00210571 87.83939362]
[390.29049683 86.63882446]
[381.87411499 79.55690765]
[367.02679443 81.69162750]
[352.17944336 83.82635498]
[337.33212280 85.96107483]
[322.48480225 88.09580231]
[307.63748169 90.23052216]
[292.79016113 92.36524200]
[289.21289062 95.66218567]
[283.49710083 96.68318176]
[277.18737793 94.23078918]
[262.25527954 95.65663147]
[247.32321167 97.08246613]
[232.39112854 98.50830841]
[226.66920471 110.63011932]
[215.60191345 118.38359833]
[202.03852844 119.64122772]
[189.53662109 113.96508026]
[181.42895508 102.75011444]
[166.46717834 103.82020569]
[158.25753784 112.78715515]
[145.73474121 113.74789429]
[135.62545776 105.63562012]
[120.64244080 106.34934998]
[105.65943146 107.06307983]
[102.61913300 109.60965729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[13 55]
[14 54]
[15 53]
[16 52]
[19 49]
[20 48]
[25 47]
[26 46]
[27 45]
[34 41]
[35 40]
[66 130]
[67 129]
[68 128]
[70 125]
[71 124]
[75 119]
[76 118]
[77 117]
[78 116]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[87 103]
[88 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
