%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAACCCAGACUUCAUACCAGCUCCCAACACCAUGACCUGCUGCCAGACCAGCUUCUGUGGAUAUCCCAGCUGCUCCACCAGUGGGACAUGCGGCUCCAGCUGCUGCCAGCCAAGCUGCUGUGAGACCAGCU\
) } def
/len { sequence length } bind def

/coor [
[105.76440430 148.02583313]
[115.95584869 137.01971436]
[130.81173706 134.94560242]
[119.20966339 125.43814087]
[107.60758972 115.93067932]
[89.13114166 113.91150665]
[82.70208740 96.47236633]
[70.67024231 87.51498413]
[58.63839340 78.55760956]
[46.60654449 69.60022736]
[35.15429688 78.49355316]
[21.79563332 84.10057068]
[7.45089483 86.04185486]
[-6.89343119 84.19027710]
[-20.25253868 78.67933655]
[-31.71092224 69.89354706]
[-40.48510742 58.44159698]
[-45.97723770 45.11421204]
[-47.81578064 30.82954597]
[-45.88068390 16.56991386]
[-40.31117249 3.31426668]
[-52.13133621 -5.92065573]
[-63.95149612 -15.15557766]
[-75.77165985 -24.39049911]
[-87.59181976 -33.62542343]
[-100.46017456 -25.64853859]
[-115.25347900 -22.56142426]
[-130.18232727 -24.71778488]
[-143.44764709 -31.83825493]
[-153.45755005 -43.04643250]
[-159.01829529 -56.97671127]
[-159.47666931 -71.94063568]
[-154.79661560 -86.13156128]
[-166.61677551 -95.36648560]
[-178.43693542 -104.60140991]
[-190.25709534 -113.83632660]
[-202.18391418 -122.93309784]
[-214.21575928 -131.89047241]
[-224.98359680 -129.68072510]
[-234.96588135 -133.72787476]
[-240.90583801 -142.44772339]
[-241.01277161 -152.77720642]
[-252.61483765 -162.28466797]
[-264.21691895 -171.79214478]
[-275.81900024 -181.29960632]
[-291.51931763 -179.48986816]
[-303.84872437 -189.37730408]
[-305.49237061 -205.09590149]
[-295.47509766 -217.32006836]
[-279.74002075 -218.79743958]
[-267.62243652 -208.65150452]
[-266.31152344 -192.90167236]
[-254.70945740 -183.39421082]
[-243.10737610 -173.88674927]
[-231.50531006 -164.37928772]
[-212.29188538 -162.74926758]
[-205.25837708 -143.92231750]
[-193.22653198 -134.96493530]
[-185.91586304 -133.48036194]
[-181.02217102 -125.65648651]
[-169.20201111 -116.42156982]
[-157.38185120 -107.18664551]
[-145.56169128 -97.95172119]
[-132.92449951 -105.92584991]
[-118.29418182 -109.10120392]
[-103.43242645 -107.07567596]
[-90.13556671 -100.07461548]
[-80.01742554 -88.92591858]
[-74.31350708 -74.96219635]
[-73.73009491 -59.86148071]
[-78.35689545 -45.44558334]
[-66.53673553 -36.21066284]
[-54.71657562 -26.97573853]
[-42.89641190 -17.74081612]
[-31.07625198 -8.50589466]
[-18.52019119 -17.68655777]
[-3.87833548 -22.97862244]
[11.67477894 -23.94892693]
[26.88909340 -20.51134491]
[40.53948593 -12.93434811]
[51.52444458 -1.82006955]
[58.95492172 11.94354725]
[62.22631073 27.25368309]
[61.06762314 42.88100433]
[55.56392288 57.56838226]
[67.59577179 66.52575684]
[79.62761688 75.48313904]
[91.65946960 84.44052124]
[101.50899506 82.41065979]
[110.86885834 86.08849335]
[116.70180511 94.28058624]
[117.11505890 104.32860565]
[128.71713257 113.83606720]
[140.31919861 123.34353638]
[152.65632629 131.87554932]
[165.64671326 139.37554932]
[178.72348022 146.72389221]
[191.88485718 153.91958618]
[205.04623413 161.11529541]
[218.29045105 168.15736389]
[231.61570740 175.04486084]
[244.94096375 181.93235779]
[258.26620483 188.81985474]
[274.07830811 188.28298950]
[281.83187866 201.00036621]
[295.15713501 207.88786316]
[308.48239136 214.77536011]
[322.28799438 207.69122314]
[337.61569214 210.10804749]
[348.57168579 221.09648132]
[350.94317627 236.43127441]
[343.81823730 250.21586609]
[329.93661499 257.14981079]
[314.63601685 254.56686401]
[303.79986572 243.46022034]
[301.59487915 228.10061646]
[288.26962280 221.21311951]
[274.94436646 214.32562256]
[260.08538818 215.35511780]
[251.37872314 202.14511108]
[238.05346680 195.25761414]
[224.72821045 188.37011719]
[211.40295410 181.48262024]
[203.94830322 181.20332336]
[197.85054016 174.27667236]
[184.68916321 167.08097839]
[171.52778625 159.88528442]
[164.08164978 159.43258667]
[158.14671326 152.36593628]
[145.15632629 144.86593628]
[148.45878601 159.49787903]
[141.75778198 172.91787720]
[128.07734680 179.06976318]
[113.59119415 175.17732239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[7 88]
[8 87]
[9 86]
[10 85]
[21 75]
[22 74]
[23 73]
[24 72]
[25 71]
[33 63]
[34 62]
[35 61]
[36 60]
[37 58]
[38 57]
[42 55]
[43 54]
[44 53]
[45 52]
[95 130]
[96 129]
[97 127]
[98 126]
[99 125]
[100 123]
[101 122]
[102 121]
[103 120]
[105 118]
[106 117]
[107 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
