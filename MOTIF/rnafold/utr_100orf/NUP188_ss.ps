%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUUAGGGCGAGCGGGCGCGCGAAGAUGGCGGCGGCCGCCGGCGGGCCGUGUGUGAGGAGCAGUAGAGAACUGUGGACUAUUCUGCUUGGAAGGUCAGCUCUGAGAGAGCUGAGUCAGAUUGAGG\
) } def
/len { sequence length } bind def

/coor [
[74.68505096 284.89584351]
[66.62175751 272.24740601]
[62.35615540 257.86669922]
[62.21856308 242.86732483]
[66.21962738 228.41078186]
[74.04953003 215.61654663]
[85.10194397 205.47532654]
[98.52101135 198.77246094]
[113.26761627 196.02696228]
[128.19982910 197.45144653]
[142.15708923 202.93319702]
[133.22160339 190.88508606]
[124.28611755 178.83697510]
[115.35063171 166.78886414]
[106.41513824 154.74075317]
[97.47965240 142.69262695]
[88.54415894 130.64451599]
[76.07211304 122.31096649]
[61.52164459 118.66626740]
[46.97117615 115.02156067]
[32.42070770 111.37686157]
[17.87023926 107.73215485]
[3.31977105 104.08745575]
[-11.23069763 100.44274902]
[-21.16172028 110.08698273]
[-34.46279907 113.51085663]
[-47.60656738 109.91757965]
[-57.16228104 100.35666656]
[-60.69122696 87.42046356]
[-75.14786530 83.41976929]
[-90.51177979 87.19611359]
[-100.71438599 76.34456635]
[-115.17102051 72.34387207]
[-129.62767029 68.34317780]
[-144.08430481 64.34249115]
[-159.81445312 68.97870636]
[-171.50646973 57.47962189]
[-167.13259888 41.67451477]
[-151.19232178 37.82232285]
[-140.08361816 49.88584900]
[-125.62697601 53.88653946]
[-111.17033386 57.88722992]
[-96.71369171 61.88792419]
[-82.38381195 57.82542419]
[-71.14717865 68.96312714]
[-56.69053650 72.96382141]
[-44.23471832 62.34583282]
[-27.74199486 61.19483948]
[-13.65274334 70.15744019]
[-7.58599472 85.89228058]
[6.96447372 89.53698730]
[21.51494217 93.18168640]
[36.06541061 96.82639313]
[50.61587906 100.47109222]
[65.16635132 104.11579895]
[79.71681976 107.76049805]
[82.87924194 90.21595001]
[97.05403137 82.52523041]
[101.05471802 68.06858826]
[92.15531921 53.06685638]
[96.71819305 36.58018112]
[111.47256470 28.60870171]
[115.11726379 14.05823231]
[118.76197052 -0.49223644]
[122.40666962 -15.04270554]
[126.05136871 -29.59317398]
[119.07009125 -44.03759384]
[126.14006042 -58.43881226]
[141.83781433 -61.74944305]
[154.12136841 -51.42985916]
[153.56784058 -35.39635849]
[140.60183716 -25.94847107]
[136.95713806 -11.39800262]
[133.31243896 3.15246630]
[129.66773987 17.70293427]
[126.02303314 32.25340271]
[134.15560913 42.32660294]
[134.98097229 55.44225693]
[127.97019196 66.78775024]
[115.51136017 72.06928253]
[111.51067352 86.52592468]
[118.08151245 95.15146637]
[118.59138489 106.57331848]
[112.19111633 116.75169373]
[100.59226990 121.70903015]
[109.52776337 133.75714111]
[118.46324921 145.80525208]
[127.39874268 157.85336304]
[136.33422852 169.90148926]
[145.26971436 181.94960022]
[154.20521545 193.99771118]
[158.94219971 195.20780945]
[162.72914124 197.72615051]
[165.25714111 201.09033203]
[166.40614319 204.78625488]
[179.45744324 212.17971802]
[192.59849548 219.41247559]
[205.82731628 226.48342896]
[219.05613708 233.55438232]
[232.28495789 240.62533569]
[245.51376343 247.69628906]
[258.74258423 254.76722717]
[271.97140503 261.83819580]
[285.20022583 268.90914917]
[302.01931763 271.04324341]
[304.62460327 287.79583740]
[289.24792480 294.93685913]
[278.12927246 282.13793945]
[264.90045166 275.06701660]
[251.67164612 267.99606323]
[238.44282532 260.92510986]
[225.21400452 253.85415649]
[211.98518372 246.78320312]
[198.75636292 239.71224976]
[185.52754211 232.64129639]
[178.06690979 232.25878906]
[172.06396484 225.23103333]
[159.01266479 217.83755493]
[166.16342163 231.02340698]
[169.40373230 245.66923523]
[168.48266602 260.64093018]
[163.47155762 274.77914429]
[154.75843811 286.98904419]
[143.01803589 296.32513428]
[129.15946960 302.06448364]
[114.25591278 303.76266479]
[99.46142578 301.28817749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[29 46]
[30 45]
[32 43]
[33 42]
[34 41]
[35 40]
[58 81]
[59 80]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[95 118]
[96 117]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
