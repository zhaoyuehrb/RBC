%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAAGCCGCGGUGUACUCCAGCGGCCCCCUGUGGCCUCUCCAUCCGCGGCGGAUCUCAGAGGUGUGGACAAGCAGCCUACUAGGGCUAGAGAUGGACAGCAGGAAACUGUCCCCCCGGGGGAAGAAGCUGGAGUCGCACCUCUCCCAAGAGCACAGGCGGCCCCCACUGGGCCUGAUAGCAGCCUGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[325.33352661 516.27722168]
[310.96350098 511.97576904]
[303.71163940 498.84524536]
[307.72341919 484.39169312]
[320.70553589 476.87738037]
[335.23657227 480.59768677]
[328.63418579 467.12890625]
[322.03182983 453.66009521]
[300.15408325 442.70159912]
[292.79754639 422.46560669]
[300.31631470 405.44415283]
[291.03228760 393.66250610]
[281.74829102 381.88085938]
[272.46426392 370.09921265]
[263.18026733 358.31756592]
[253.80067444 346.61187744]
[244.32612610 334.98291016]
[234.85156250 323.35394287]
[225.37701416 311.72497559]
[215.90246582 300.09600830]
[206.42791748 288.46704102]
[196.95335388 276.83807373]
[187.47880554 265.20910645]
[169.92308044 267.01089478]
[154.65991211 257.84277344]
[147.88575745 241.20706177]
[152.48213196 223.68061829]
[142.63407898 212.36619568]
[132.78604126 201.05178833]
[122.93798828 189.73738098]
[113.08993530 178.42297363]
[103.24188995 167.10855103]
[96.46871185 164.12274170]
[93.32745361 155.52890015]
[83.66487122 144.05569458]
[70.19606781 137.45330811]
[55.20848465 136.84306335]
[40.22090530 136.23281860]
[25.23332405 135.62257385]
[10.24574184 135.01232910]
[-2.38951039 147.10018921]
[-19.52089119 146.33264160]
[-30.58012199 133.67158508]
[-45.57565308 133.30537415]
[-60.57118225 132.93916321]
[-75.56671143 132.57295227]
[-90.56224060 132.20674133]
[-106.54426575 137.86457825]
[-116.40525818 124.07337952]
[-105.88282013 110.77997589]
[-90.19602966 117.21120453]
[-75.20050049 117.57742310]
[-60.20496750 117.94363403]
[-45.20944214 118.30984497]
[-30.21391106 118.67605591]
[-22.21089745 108.56624603]
[-9.65755558 104.86103821]
[2.92126489 109.12982178]
[10.85598660 120.02474976]
[25.84356689 120.63499451]
[40.83115005 121.24523926]
[55.81872940 121.85548401]
[70.80631256 122.46572876]
[73.49217224 115.46315002]
[81.54975128 94.45539856]
[69.99828339 84.88652039]
[54.28857040 86.61293793]
[42.01180649 76.66021729]
[40.45157623 60.93313599]
[50.53353500 48.76228333]
[66.27623749 47.36841583]
[78.33981323 57.57848740]
[79.56716156 73.33504486]
[91.11863708 82.90393066]
[102.74760437 73.42938232]
[95.71031952 60.18262100]
[88.67303467 46.93585968]
[81.63575745 33.68909836]
[74.59847260 20.44233894]
[60.41502380 12.21058083]
[60.72278595 -4.18567848]
[75.20515442 -11.87937355]
[88.96392059 -2.95589089]
[87.84523773 13.40505600]
[94.88251495 26.65181541]
[101.91979980 39.89857483]
[108.95707703 53.14533615]
[115.99436188 66.39209747]
[123.43854523 65.47875214]
[121.61184692 50.59039307]
[119.78538513 35.70200729]
[134.67379761 33.87577438]
[136.50019836 48.76369858]
[138.32690430 63.65205765]
[145.77107239 62.73870850]
[149.39727783 48.18361664]
[153.02346802 33.62852478]
[156.64967346 19.07343292]
[160.27586365 4.51834202]
[163.90205383 -10.03674984]
[154.56248474 -22.57893562]
[155.52153015 -38.18708420]
[166.32633972 -49.49150085]
[181.87524414 -51.15459061]
[194.82649231 -42.39109039]
[199.06492615 -27.33885765]
[192.58927917 -13.10509682]
[178.45715332 -6.41055393]
[174.83094788 8.14453793]
[171.20475769 22.69963074]
[167.57856750 37.25472260]
[163.95236206 51.80981445]
[160.32617188 66.36490631]
[142.79850769 129.36193848]
[95.13807678 134.39311218]
[104.80065918 145.86631775]
[114.55629730 157.26049805]
[124.40435028 168.57492065]
[134.25239563 179.88932800]
[144.10044861 191.20373535]
[153.94850159 202.51815796]
[163.79653931 213.83256531]
[176.01295471 211.10118103]
[188.15968323 213.81323242]
[197.93992615 221.39294434]
[203.53125000 232.35011292]
[203.92501831 244.57287598]
[199.10777283 255.73455811]
[208.58232117 267.36352539]
[218.05688477 278.99249268]
[227.53143311 290.62145996]
[237.00598145 302.25042725]
[246.48052979 313.87939453]
[255.95507812 325.50836182]
[265.42962646 337.13732910]
[273.28875732 341.82302856]
[274.96191406 349.03356934]
[284.24591064 360.81521606]
[293.52993774 372.59683228]
[302.81393433 384.37847900]
[312.09796143 396.16012573]
[332.99401855 391.74142456]
[353.83728027 407.39630127]
[368.77719116 408.73742676]
[383.71713257 410.07855225]
[398.35977173 402.69442749]
[411.92575073 411.90835571]
[410.45953369 428.24182129]
[395.46945190 434.89236450]
[382.37600708 425.01846313]
[367.43609619 423.67736816]
[352.49615479 422.33624268]
[348.24728394 428.51660156]
[360.60787964 437.01458740]
[352.10968018 449.37503052]
[339.74951172 440.87734985]
[335.50061035 447.05770874]
[342.10299683 460.52651978]
[348.70538330 473.99533081]
[355.95733643 487.12579346]
[363.84161377 499.88659668]
[371.72586060 512.64739990]
[379.61013794 525.40820312]
[387.49441528 538.16900635]
[395.37866211 550.92987061]
[399.30508423 552.86303711]
[402.12069702 555.66802979]
[403.68750000 558.88555908]
[404.03186035 562.05883789]
[403.32934570 564.78753662]
[410.36663818 578.03424072]
[417.40393066 591.28100586]
[424.44119263 604.52777100]
[431.24139404 610.64978027]
[431.48321533 618.04791260]
[438.30395508 631.40747070]
[452.35153198 639.86901855]
[451.77694702 656.25811768]
[437.17126465 663.71502686]
[423.55957031 654.56878662]
[424.94439697 638.22821045]
[418.12368774 624.86865234]
[411.19442749 611.56506348]
[404.15716553 598.31829834]
[397.11987305 585.07153320]
[390.08258057 571.82476807]
[382.61785889 558.81408691]
[374.73358154 546.05328369]
[366.84933472 533.29248047]
[358.96505737 520.53167725]
[351.08078003 507.77087402]
[343.19653320 495.01004028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 159]
[7 158]
[8 157]
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[27 122]
[28 121]
[29 120]
[30 119]
[31 118]
[32 117]
[34 116]
[35 115]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[65 74]
[66 73]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[95 113]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[143 152]
[144 151]
[145 150]
[160 192]
[161 191]
[162 190]
[163 189]
[164 188]
[165 187]
[170 186]
[171 185]
[172 184]
[173 183]
[175 182]
[176 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
