%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCUCCGCGGGCCCCGCCGCCCGCUCGCCGCUUUCUCGCGGGGCUGGCUAUGCCGGGUGGCGGCUCCCAGGAAUACGGGGUGCUUUGCAUUCAGGAAUACAGAAAAAACAGCAAAGUGGAGUCAAGUACACGUAACAACUUCAUGGGCU\
) } def
/len { sequence length } bind def

/coor [
[116.18961334 132.92063904]
[102.91850281 135.73316956]
[89.85034180 133.51502991]
[78.78246307 126.80252075]
[71.15179443 116.73373413]
[67.84925842 104.86161804]
[52.90049362 103.62292480]
[37.95172501 102.38423920]
[27.58484268 110.12738800]
[15.12307835 108.74919128]
[7.22251749 99.53692627]
[-7.69745731 97.98955536]
[-22.61743164 96.44218445]
[-34.81502151 106.13014984]
[-49.92395401 104.34835052]
[-59.08477402 92.66011047]
[-74.00474548 91.11273956]
[-88.92472076 89.56536865]
[-103.84469604 88.01799774]
[-118.76467133 86.47062683]
[-133.68464661 84.92325592]
[-148.60462952 83.37588501]
[-163.52459717 81.82852173]
[-178.44456482 80.28115082]
[-204.75386047 116.97836304]
[-219.67382812 118.52573395]
[-234.59381104 120.07310486]
[-240.24900818 123.69160461]
[-246.00987244 123.83984375]
[-250.16046143 121.36299133]
[-265.13165283 122.29247284]
[-280.10281372 123.22195435]
[-295.07400513 124.15143585]
[-305.34616089 136.16217041]
[-321.10885620 137.30821228]
[-333.01031494 126.90962219]
[-333.98962402 111.13570404]
[-323.46578979 99.34484100]
[-307.68240356 98.53234863]
[-296.00347900 109.18025970]
[-281.03228760 108.25077820]
[-266.06112671 107.32129669]
[-251.08995056 106.39181519]
[-236.14117432 105.15312958]
[-221.22120667 103.60575867]
[-206.30122375 102.05838776]
[-202.76925659 87.47946167]
[-199.23759460 72.90182495]
[-211.79508972 64.69760132]
[-224.35258484 56.49338150]
[-240.91961670 52.89199066]
[-242.04516602 35.97544861]
[-226.10131836 30.21090889]
[-216.14836121 43.93588638]
[-203.59086609 52.14010620]
[-191.03337097 60.34432983]
[-176.89720154 65.36117554]
[-161.97723389 66.90854645]
[-147.05725098 68.45591736]
[-132.13728333 70.00328064]
[-117.21730042 71.55065155]
[-102.29732513 73.09802246]
[-87.37734985 74.64539337]
[-72.45737457 76.19276428]
[-57.53740311 77.74013519]
[-46.17295074 68.18059540]
[-31.01992989 69.53730774]
[-21.07006073 81.52220917]
[-6.15008688 83.06958008]
[8.76988792 84.61695099]
[24.34519005 76.58997345]
[39.19041443 87.43547058]
[54.13918304 88.67416382]
[69.08795166 89.91284943]
[73.55531311 79.45235443]
[81.54557800 70.89541626]
[92.26842499 65.41859436]
[104.54565430 63.87674332]
[116.93997192 66.67755890]
[127.92323303 73.70685577]
[134.51118469 60.23099518]
[141.09913635 46.75512695]
[147.68707275 33.27926254]
[154.27502441 19.80340004]
[160.86297607 6.32753468]
[162.38749695 -10.55773067]
[179.03489685 -13.76710033]
[186.72731018 1.34128141]
[174.33883667 12.91548347]
[167.75090027 26.39134789]
[161.16294861 39.86721420]
[154.57499695 53.34307861]
[147.98704529 66.81893921]
[141.39909363 80.29480743]
[153.64123535 71.62705231]
[165.88337708 62.95930099]
[174.17420959 50.45881271]
[186.36360168 41.71703720]
[200.86279297 37.87339783]
[215.78192139 39.42887497]
[229.17642212 46.18072510]
[239.30041504 57.24890900]
[244.83435059 71.19077301]
[245.05690002 86.18912506]
[239.93907166 100.28904724]
[230.14793396 111.65274048]
[216.95967102 118.79904938]
[202.09326172 120.79650116]
[187.48641968 117.38475800]
[175.04316711 109.00866699]
[160.41589355 105.68556976]
[145.78863525 102.36247253]
[157.03208923 112.29145050]
[168.27555847 122.22042847]
[181.57171631 119.84441376]
[193.62417603 125.49621582]
[200.10725403 136.89889526]
[198.83828735 149.75828552]
[209.87414551 159.91751099]
[220.91000366 170.07673645]
[231.94586182 180.23596191]
[242.98171997 190.39518738]
[254.01757812 200.55441284]
[265.05343628 210.71363831]
[275.95672607 209.63539124]
[285.44198608 214.66467285]
[290.45703125 223.90747070]
[289.54171753 234.16206360]
[300.14831543 244.76866150]
[315.70959473 243.22560120]
[328.59283447 252.08877563]
[332.71499634 267.17327881]
[326.12969971 281.35662842]
[311.94631958 287.94192505]
[296.86184692 283.81976318]
[287.99865723 270.93652344]
[289.54171753 255.37525940]
[278.93511963 244.76866150]
[259.96548462 241.21665955]
[254.89421082 221.74949646]
[243.85835266 211.59027100]
[232.82249451 201.43104553]
[221.78663635 191.27182007]
[210.75077820 181.11259460]
[199.71492004 170.95336914]
[188.67906189 160.79414368]
[171.95065308 162.22283936]
[159.09165955 150.91116333]
[158.34657288 133.46389771]
[147.10311890 123.53491211]
[135.85964966 113.60593414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 74]
[7 73]
[8 72]
[11 70]
[12 69]
[13 68]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 46]
[26 45]
[27 44]
[30 43]
[31 42]
[32 41]
[33 40]
[48 56]
[49 55]
[50 54]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[112 151]
[113 150]
[114 149]
[118 146]
[119 145]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
[128 138]
[129 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
