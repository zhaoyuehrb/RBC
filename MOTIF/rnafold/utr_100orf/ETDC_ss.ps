%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAAAGAACUCCCUAAAGCCAGUCCCAGUGAGCCUGCACUGAACAUCAAGAAGUCAGGCAAAUCCUUCAAAUGCAAGAAGCCCACCAAAAAUGUGC\
) } def
/len { sequence length } bind def

/coor [
[5.78312397 277.39382935]
[-8.57850838 287.69299316]
[-26.09467506 287.44662476]
[-34.45246124 299.90246582]
[-42.81024170 312.35827637]
[-37.34159851 326.87976074]
[-41.48534393 341.83331299]
[-53.64812088 351.46902466]
[-69.15309143 352.08169556]
[-82.03828430 343.43582153]
[-87.34907532 328.85586548]
[-83.04336548 313.94812012]
[-70.77677155 304.44494629]
[-55.26606369 304.00048828]
[-46.90827942 291.54467773]
[-38.55049515 279.08886719]
[-44.44549942 268.25033569]
[-45.10641861 255.85713196]
[-40.34199142 244.31842041]
[-31.02171326 235.90425110]
[-18.91785240 232.29904175]
[-6.36864042 234.26467896]
[2.74735022 222.35255432]
[11.67698288 210.30010986]
[20.41809845 198.11024475]
[12.46840000 185.47174072]
[9.95631409 170.71250916]
[13.29534435 156.07640076]
[22.00703239 143.80065918]
[34.78925323 135.77391052]
[49.71075439 133.24571228]
[64.50293732 136.63200378]
[73.24405670 124.44213104]
[81.98516846 112.25225830]
[76.94502258 87.73380280]
[100.13286591 69.55686188]
[99.20032501 54.58588028]
[98.26777649 39.61489868]
[97.33523560 24.64391327]
[96.40269470 9.67292976]
[92.69038391 1.12825942]
[95.68132782 -5.77679300]
[95.21482849 -20.76953697]
[94.74832916 -35.76228333]
[80.95357513 -42.39276123]
[71.82956696 -54.68141937]
[69.47293854 -69.80441284]
[74.42523193 -84.28658295]
[85.54844666 -94.80004120]
[100.28653717 -98.92887115]
[115.25280762 -95.72429657]
[127.00811768 -85.92269897]
[132.85118103 -71.77642059]
[131.43930054 -56.53617096]
[123.09693146 -43.70404816]
[109.74107361 -36.22877884]
[110.20757294 -21.23603439]
[110.67407227 -6.24329090]
[111.37367249 8.74038506]
[112.30622101 23.71136856]
[113.23876190 38.68235397]
[114.17131042 53.65333557]
[115.10385132 68.62432098]
[119.13466644 54.17605209]
[132.52050781 47.40703964]
[146.54643250 52.72428131]
[152.08082581 66.66596222]
[145.52049255 80.15528870]
[131.13699341 84.41002655]
[146.12066650 85.10963440]
[161.10433960 85.80923462]
[176.08802795 86.50884247]
[185.67880249 74.31062317]
[200.61698914 70.11178589]
[215.15853882 75.52685547]
[223.71192932 88.47364044]
[222.98820496 103.97383118]
[213.26565552 116.06728363]
[198.28280640 120.10382843]
[183.80085754 114.53132629]
[175.38841248 101.49251556]
[160.40473938 100.79291534]
[145.42106628 100.09330750]
[130.43739319 99.39369965]
[122.73601532 115.57257843]
[108.45536804 123.17803955]
[94.17504120 120.99337769]
[85.43392181 133.18324280]
[76.69281006 145.37310791]
[84.64580536 158.29695129]
[87.03844452 173.24078369]
[83.53688049 187.92250061]
[74.70497894 200.11204529]
[61.91381073 207.97021484]
[47.12883759 210.32606506]
[32.60796738 206.85134888]
[23.86685181 219.04122925]
[21.34196472 228.00880432]
[14.65947533 231.46855164]
[5.54348421 243.38067627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[22 100]
[23 99]
[24 97]
[25 96]
[32 89]
[33 88]
[34 87]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[42 58]
[43 57]
[44 56]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
