%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGAGGAAAAUGCAACAUUGCUGACAGAGUUUGUUCUCACAGGAUUUUUAUAUCAACCACAGUGGAAAAUACCCCUGUUCCUGGCAUUCUUGGUAA\
) } def
/len { sequence length } bind def

/coor [
[199.99429321 364.22375488]
[199.19615173 360.00180054]
[199.96574402 355.30728149]
[194.06425476 341.51699829]
[188.16275024 327.72671509]
[182.26124573 313.93640137]
[170.14059448 305.27966309]
[171.82444763 289.54830933]
[165.92294312 275.75802612]
[160.02143860 261.96774292]
[145.17303467 263.78491211]
[130.39929199 261.34197998]
[116.89891815 254.82847595]
[105.76972198 244.76460266]
[97.91937256 231.95959473]
[93.99137878 217.44674683]
[94.31231689 202.39997864]
[98.86473083 188.03889465]
[107.28782654 175.52993774]
[118.90605927 165.89166260]
[113.00455475 152.10136414]
[107.10305023 138.31106567]
[101.20154572 124.52076721]
[95.30004120 110.73047638]
[85.99990082 98.96156311]
[73.94744873 90.03192902]
[61.89498901 81.10229492]
[51.02507019 83.34967804]
[40.95639801 79.23231506]
[35.02301788 70.38079834]
[35.03956985 59.94643402]
[23.56558228 50.28477859]
[12.09159470 40.62312317]
[-3.63151860 42.22289658]
[-15.82768345 32.17157364]
[-17.26113319 16.43242455]
[-7.08142567 4.34321022]
[8.67199802 3.07624507]
[20.65291023 13.38319778]
[21.75325012 29.14913559]
[33.22723770 38.81079102]
[44.70122528 48.47244644]
[63.84812546 50.26386261]
[70.82462311 69.04984283]
[82.87707520 77.97946930]
[94.92953491 86.90910339]
[108.71982574 81.00759888]
[110.58130646 66.12355042]
[112.44278717 51.23950577]
[102.54407501 38.91915894]
[104.33945465 23.21717834]
[116.76377106 13.44927311]
[132.44589233 15.41056538]
[142.08189392 27.93745613]
[139.95491028 43.59796524]
[127.32683563 53.10098648]
[125.46535492 67.98503113]
[123.60387421 82.86907959]
[138.40901184 85.27909088]
[147.02720642 97.55616760]
[144.26318359 112.29930115]
[131.78314209 120.62088776]
[117.11046600 117.50441742]
[109.09033966 104.82897186]
[114.99184418 118.61926270]
[120.89334869 132.40956116]
[126.79485321 146.19985962]
[132.69635010 159.99015808]
[147.69023132 158.23988342]
[162.55479431 160.78297424]
[176.08679199 167.40490723]
[187.19334412 177.56132507]
[194.98010254 190.42283630]
[198.82331848 204.94267273]
[198.41979980 219.94194031]
[193.81077576 234.20527649]
[185.37792969 246.57937622]
[173.81173706 256.06622314]
[179.71324158 269.85653687]
[185.61474609 283.64682007]
[198.15751648 293.28994751]
[196.05152893 308.03491211]
[201.95303345 321.82519531]
[207.85453796 335.61550903]
[213.75604248 349.40579224]
[220.50347900 362.80252075]
[228.07070923 375.75384521]
[241.71322632 383.76586914]
[241.45335388 398.65820312]
[249.02059937 411.60952759]
[263.52536011 419.26095581]
[263.88092041 435.65625000]
[249.72154236 443.92935181]
[235.61315918 435.56958008]
[236.06927490 419.17678833]
[228.50202942 406.22546387]
[215.40078735 399.13980103]
[215.11938477 383.32107544]
[207.55213928 370.36975098]
[204.68409729 369.58322144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[8 80]
[9 79]
[10 78]
[20 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 46]
[26 45]
[27 44]
[31 42]
[32 41]
[33 40]
[47 58]
[48 57]
[49 56]
[86 99]
[87 98]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
