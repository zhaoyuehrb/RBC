%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGAGGAGCAAUCAUACAGUGACUGAGUUUAUACUGCUGGGCUUCACCACAGACCCAGGAAUGCAGCUGGGCCUCUUCGUGGUGUUCCUGGGCGUGU\
) } def
/len { sequence length } bind def

/coor [
[123.29128265 281.32391357]
[122.35873413 266.35293579]
[121.42619324 251.38194275]
[120.49364471 236.41096497]
[109.19198608 226.77726746]
[108.03298950 211.60783386]
[118.21432495 199.81893921]
[117.28177643 184.84796143]
[116.34923553 169.87696838]
[115.41668701 154.90599060]
[114.48414612 139.93499756]
[113.55159760 124.96401978]
[100.03843689 129.50032043]
[85.47344208 126.92714691]
[73.49240875 117.36837769]
[59.28533554 122.18076324]
[45.07826233 126.99314880]
[30.87118912 131.80552673]
[17.80916214 142.61386108]
[3.80730653 133.05433655]
[9.11713314 116.95334625]
[26.05880356 117.59845734]
[40.26587677 112.78607178]
[54.47294998 107.97368622]
[68.68002319 103.16130066]
[70.77275085 88.30799866]
[58.44841766 79.75751495]
[42.69937897 78.24811554]
[36.65287781 64.63601685]
[24.32854271 56.08553696]
[12.00420856 47.53505325]
[-3.03431797 51.82185745]
[-17.28882599 45.39200592]
[-24.02877426 31.28147507]
[-20.07176208 16.15282440]
[-7.28617239 7.14934063]
[8.29103184 8.52219486]
[19.30476952 19.62316704]
[20.55469322 35.21071625]
[32.87902832 43.76119995]
[45.20336151 52.31168365]
[60.07088470 53.20950317]
[66.99890137 67.43318176]
[79.32323456 75.98366547]
[91.71892548 70.09153748]
[105.15675354 70.06434631]
[117.05664062 75.66249847]
[125.23796844 85.58963776]
[128.31846619 97.78363037]
[141.38591003 90.41871643]
[154.45335388 83.05381012]
[167.52079773 75.68889618]
[180.58824158 68.32398224]
[193.42031860 60.55624008]
[206.00460815 52.39317703]
[218.58891296 44.23011398]
[230.91323853 35.67963028]
[242.96569824 26.74999809]
[255.01814270 17.82036591]
[267.07061768 8.89073277]
[279.12304688 -0.03890040]
[278.84359741 -15.55345917]
[287.76431274 -28.24993134]
[302.45501709 -33.24626541]
[317.26678467 -28.62126732]
[326.50424194 -16.15334511]
[326.61538696 -0.63666809]
[317.55746460 11.96228504]
[302.81344604 16.79895782]
[288.05270386 12.01355362]
[276.00024414 20.94318771]
[263.94778442 29.87281990]
[251.89532471 38.80245209]
[239.84288025 47.73208618]
[238.25628662 52.40899658]
[233.61132812 56.06058502]
[226.75196838 56.81440735]
[214.16767883 64.97747040]
[201.58338928 73.14053345]
[199.70910645 77.70976257]
[194.84611511 81.06550598]
[187.95315552 81.39142609]
[174.88571167 88.75634003]
[161.81826782 96.12125397]
[148.75082397 103.48616028]
[135.68338013 110.85107422]
[128.52258301 124.03147125]
[129.45512390 139.00245667]
[130.38768005 153.97344971]
[131.32022095 168.94442749]
[132.25276184 183.91540527]
[133.18530273 198.88639832]
[144.75093079 209.32067871]
[145.48339844 224.51666260]
[135.46463013 235.47840881]
[136.39717102 250.44940186]
[137.32971191 265.42037964]
[138.26226807 280.39135742]
[145.28161621 295.82394409]
[132.39529419 306.84115601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[15 25]
[16 24]
[17 23]
[18 22]
[26 44]
[27 43]
[29 41]
[30 40]
[31 39]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[54 79]
[55 78]
[56 77]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
