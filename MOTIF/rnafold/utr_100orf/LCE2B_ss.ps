%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGACGUGUCUGUGCUCCUGCGUGUGACCAGGGUUGACUAAACUCUGCCAGGAUGUCUUGCCAGCAAAACCAGCAGCAGUGCCAGCCCCCUCCCAAGUGUCCUCCCAAGUGUACCCCAAAAUGUCCACCUAAGUGUCCCCCUAAAUGCCUGC\
) } def
/len { sequence length } bind def

/coor [
[97.70256805 240.82643127]
[106.89002228 228.76963806]
[119.64875793 220.58485413]
[116.33211517 205.95613098]
[113.01548004 191.32739258]
[109.69883728 176.69865417]
[106.38220215 162.06991577]
[103.06555939 147.44117737]
[82.20458221 146.52665710]
[62.81132126 136.47039795]
[51.93942642 146.80490112]
[41.06753540 157.13940430]
[40.96136475 174.60435486]
[28.52191734 186.37881470]
[11.75066757 185.55886841]
[1.09045804 196.11158752]
[-9.56975174 206.66430664]
[-13.37008667 222.61703491]
[-29.16088486 227.04226685]
[-40.69792557 215.38771057]
[-36.11289215 199.64257812]
[-20.12247276 196.00410461]
[-9.46226311 185.45138550]
[1.19794667 174.89865112]
[-0.53674448 162.09631348]
[5.52563810 150.46740723]
[17.36135292 144.38041687]
[30.73303223 146.26751709]
[41.60492325 135.93301392]
[52.47681427 125.59850311]
[47.26723862 111.53221893]
[32.28649139 110.77248383]
[17.30574226 110.01274872]
[2.32499433 109.25300598]
[-12.65575314 108.49327087]
[-27.63650131 107.73353577]
[-42.61724854 106.97379303]
[-55.43743134 116.61861420]
[-70.93466187 112.46948242]
[-77.22080231 97.70926666]
[-69.47364807 83.66073608]
[-53.63616562 81.10072327]
[-41.85750961 91.99304962]
[-26.87676430 92.75278473]
[-11.89601612 93.51252747]
[3.08473182 94.27226257]
[18.06547928 95.03199768]
[33.04622650 95.79174042]
[48.02697372 96.55147552]
[56.32750320 74.50102234]
[73.11191559 58.96942902]
[94.40862274 52.78983307]
[95.01651001 37.80215454]
[95.62438965 22.81447792]
[96.23227692 7.82679987]
[96.84016418 -7.16087770]
[97.44804382 -22.14855576]
[94.65658569 -30.90920448]
[98.22318268 -37.43293381]
[99.13469696 -52.40521240]
[100.04620361 -67.37749481]
[100.95771790 -82.34976959]
[90.75983429 -94.12435913]
[91.89752197 -109.29538727]
[103.18563843 -118.94495392]
[104.09715271 -133.91723633]
[90.80123901 -139.33695984]
[79.85109711 -148.59075928]
[72.31283569 -160.76026917]
[68.91495514 -174.64414978]
[69.97803497 -188.87664795]
[75.38446808 -202.06192017]
[84.59135437 -212.91098022]
[96.68496704 -220.36769104]
[110.47143555 -223.71153259]
[111.68620300 -238.66226196]
[112.90097046 -253.61299133]
[105.39334106 -268.19268799]
[114.49225616 -281.83605957]
[130.83753967 -280.50799561]
[137.61456299 -265.57467651]
[127.85169983 -252.39822388]
[126.63693237 -237.44749451]
[125.42216492 -222.49676514]
[139.79177856 -216.12850952]
[151.13862610 -205.21372986]
[158.08326721 -191.05397034]
[159.77276611 -175.34669495]
[155.98542786 -159.98194885]
[147.15968323 -146.81480408]
[134.34336853 -137.44145203]
[119.06942749 -133.00572205]
[118.15791321 -118.03343964]
[128.19207764 -107.08577728]
[127.48094940 -91.88877106]
[115.93000031 -81.43825531]
[115.01848602 -66.46598053]
[114.10697174 -51.49369812]
[113.19545746 -36.52141953]
[112.43572235 -21.54067230]
[111.82783508 -6.55299425]
[111.21995544 8.43468285]
[110.61206818 23.42236137]
[110.00418854 38.41003799]
[109.39630127 53.39771652]
[119.81415558 56.78585052]
[129.17985535 62.46869278]
[136.99609375 70.14447784]
[142.84780884 79.40560913]
[146.42427063 89.76032257]
[147.53555298 100.65876770]
[162.31350708 103.23021698]
[177.09144592 105.80166626]
[192.01373291 100.54467010]
[203.22619629 110.34926605]
[218.00413513 112.92071533]
[229.04769897 102.02028656]
[244.39425659 99.72618866]
[258.14273071 106.92054749]
[265.00656128 120.83699036]
[262.34649658 136.12435913]
[251.18531799 146.90434265]
[235.81478882 149.03181458]
[222.14515686 141.68873596]
[215.43267822 127.69865417]
[200.65473938 125.12721252]
[186.78947449 130.56813049]
[174.52000427 120.57961273]
[159.74205017 118.00816345]
[144.96411133 115.43671417]
[142.30262756 121.69218445]
[138.77613831 127.50408173]
[134.45674133 132.75357056]
[129.43275452 137.33331299]
[123.80693054 141.14964294]
[117.69429779 144.12454224]
[121.01093292 158.75328064]
[124.32757568 173.38201904]
[127.64421082 188.01075745]
[130.96084595 202.63948059]
[134.27749634 217.26821899]
[149.31857300 219.15020752]
[162.80746460 226.06579590]
[173.11532593 237.17993164]
[178.99743652 251.15048218]
[179.74349976 266.29046631]
[175.26342773 280.77166748]
[166.09820557 292.84536743]
[153.35458374 301.05364990]
[138.57141113 304.40530396]
[123.53382111 302.49560547]
[110.05769348 295.55514526]
[99.77032471 284.42205811]
[93.91397095 270.44067383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 141]
[4 140]
[5 139]
[6 138]
[7 137]
[8 136]
[10 30]
[11 29]
[12 28]
[15 24]
[16 23]
[17 22]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[59 99]
[60 98]
[61 97]
[62 96]
[65 93]
[66 92]
[75 84]
[76 83]
[77 82]
[111 130]
[112 129]
[113 128]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
