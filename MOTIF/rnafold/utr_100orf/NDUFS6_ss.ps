%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACGUUGCGCCGGGUCAAAGGCCAGCGGCGCAAAAUGGCGGCGGCGAUGACCUUCUGCCGGCUGCUGAACCGGUGUGGCGAGGCGGCGCGGAGCCUGCCCCUGGGCGCCAGGUGUUUCGGGGUGCGGGUCUCGC\
) } def
/len { sequence length } bind def

/coor [
[282.16607666 220.16589355]
[265.63256836 216.51835632]
[252.28617859 206.01123047]
[244.81137085 190.69705200]
[244.73800659 173.60119629]
[231.06765747 167.42691040]
[217.39732361 161.25262451]
[203.72697449 155.07833862]
[190.05664062 148.90405273]
[176.38629150 142.72978210]
[162.71595764 136.55549622]
[149.04560852 130.38121033]
[135.37527466 124.20692444]
[121.70493317 118.03264618]
[108.03459167 111.85836029]
[94.10399628 113.05421448]
[85.79112244 101.81198120]
[72.12078094 95.63769531]
[58.45044327 89.46341705]
[43.81979752 94.80963135]
[30.04408264 88.35328674]
[25.03744888 74.37226105]
[11.36710835 68.19797516]
[-2.30323315 62.02369308]
[-15.97357464 55.84940720]
[-31.73526382 57.22043228]
[-40.14952087 44.93021393]
[-53.81986237 38.75593185]
[-67.49020386 32.58164597]
[-81.16054535 26.40736389]
[-92.26881409 36.74573898]
[-106.45072174 42.02934647]
[-121.53430176 41.48222351]
[-135.22218323 35.21886444]
[-145.44149780 24.22202682]
[-150.65779114 10.18865204]
[-150.10539246 -4.73194170]
[-163.77572632 -10.90622425]
[-179.53741455 -9.53520012]
[-187.95167542 -21.82542038]
[-201.62200928 -27.99970245]
[-217.87770081 -25.83528519]
[-227.66419983 -38.99417877]
[-220.91400146 -53.93964005]
[-204.57113647 -55.29706192]
[-195.44773865 -41.67004395]
[-181.77738953 -35.49576187]
[-166.99349976 -37.30841064]
[-157.60144043 -24.57656479]
[-143.93110657 -18.40228271]
[-133.10195923 -28.68133354]
[-119.12453461 -34.04576111]
[-104.11762238 -33.64903641]
[-90.36885834 -27.52049065]
[-79.98601532 -16.56556892]
[-74.57388306 -2.43221045]
[-74.98626709 12.73702335]
[-61.31592178 18.91130638]
[-47.64558029 25.08558846]
[-33.97523880 31.25987053]
[-19.19134331 29.44722176]
[-9.79929161 42.17906952]
[3.87104964 48.35335159]
[17.54139137 54.52763367]
[31.21173286 60.70191574]
[45.01126099 55.21479034]
[58.96288681 61.28165054]
[64.62472534 75.79307556]
[78.29506683 81.96735382]
[91.96540833 88.14163971]
[105.89600372 86.94578552]
[114.20887756 98.18801880]
[127.87921906 104.36230469]
[141.54956055 110.53658295]
[155.21989441 116.71086884]
[168.89024353 122.88515472]
[182.56057739 129.05943298]
[196.23092651 135.23371887]
[209.90126038 141.40800476]
[223.57160950 147.58227539]
[237.24194336 153.75656128]
[250.91229248 159.93084717]
[260.47802734 150.67897034]
[272.60049438 145.26666260]
[285.81072998 144.32574463]
[298.51623535 147.94764709]
[309.19271851 155.67509460]
[316.56723022 166.55961609]
[319.76974487 179.27799988]
[318.43582153 192.29313660]
[331.80871582 199.08766174]
[345.18161011 205.88218689]
[358.55450439 212.67671204]
[374.36245728 212.02975464]
[382.20440674 224.69282532]
[395.57730103 231.48735046]
[408.95019531 238.28187561]
[422.32312012 245.07640076]
[435.69601440 251.87094116]
[449.06890869 258.66546631]
[462.51882935 265.30621338]
[476.04400635 271.79232788]
[489.56918335 278.27844238]
[503.09436035 284.76455688]
[516.61950684 291.25067139]
[530.14471436 297.73678589]
[543.66986084 304.22290039]
[557.26849365 310.55349731]
[570.93884277 316.72778320]
[584.60919189 322.90206909]
[601.53308105 323.91137695]
[605.24822998 340.45327759]
[590.38122559 348.60244751]
[578.43493652 336.57241821]
[564.76458740 330.39813232]
[551.09423828 324.22384644]
[543.63806152 324.33843994]
[537.18377686 317.74804688]
[523.65856934 311.26196289]
[510.13342285 304.77584839]
[496.60824585 298.28973389]
[483.08306885 291.80361938]
[469.55789185 285.31750488]
[456.03271484 278.83139038]
[448.57586670 278.77499390]
[442.27438354 272.03836060]
[428.90148926 265.24383545]
[415.52856445 258.44931030]
[402.15567017 251.65476990]
[388.78277588 244.86024475]
[375.40988159 238.06571960]
[360.55844116 239.19866943]
[351.75997925 226.04962158]
[338.38708496 219.25508118]
[325.01416016 212.46055603]
[311.64126587 205.66603088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 82]
[6 81]
[7 80]
[8 79]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[17 70]
[18 69]
[19 68]
[22 65]
[23 64]
[24 63]
[25 62]
[27 60]
[28 59]
[29 58]
[30 57]
[37 50]
[38 49]
[40 47]
[41 46]
[90 136]
[91 135]
[92 134]
[93 133]
[95 131]
[96 130]
[97 129]
[98 128]
[99 127]
[100 126]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
