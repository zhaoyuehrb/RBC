%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGCGCCGGGUAGAGGGAGACAGAGUCGCACGGCUGAGACGCCAGGCAGUCGCCUAGCAACAGCGGGACGCGGAGCGAUGGAGACCAGCAGCAGGGAGCUCCAAGCCGCGGAGUAUUUGGAAAAGCAUCAGAUCAAGGAGGUGGUUAGCUACCUCACCAGCGCCCUCCUUUUCUUUC\
) } def
/len { sequence length } bind def

/coor [
[40.00957489 413.63314819]
[29.68156242 419.96429443]
[25.79927635 434.45318604]
[21.91699028 448.94207764]
[30.03519630 462.50195312]
[26.10637283 477.81011963]
[12.46142197 485.78451538]
[-2.80434871 481.69406128]
[-10.63402843 467.96557617]
[-6.38240719 452.74389648]
[7.42810345 445.05978394]
[11.31038952 430.57092285]
[15.19267464 416.08203125]
[9.73500347 399.41580200]
[22.82973480 386.48782349]
[26.45856476 371.93338013]
[30.08739281 357.37896729]
[33.71622086 342.82452393]
[37.34505081 328.27008057]
[40.97387695 313.71563721]
[44.60270691 299.16122437]
[48.23153305 284.60678101]
[40.36400223 272.01162720]
[43.83681870 257.19967651]
[57.10110092 249.03288269]
[60.72993088 234.47845459]
[64.35875702 219.92401123]
[58.61105347 203.35559082]
[71.47816467 190.20104980]
[74.85243225 175.58549500]
[78.22669983 160.96994019]
[59.85158157 150.78892517]
[45.70354080 135.26052856]
[37.27217102 116.01969147]
[35.44518661 95.09219360]
[20.72077751 92.23005676]
[5.99636936 89.36791992]
[-8.72803879 86.50578308]
[-17.12744522 94.96636963]
[-28.45593834 98.27527618]
[-39.85447311 95.71835327]
[-48.50444031 88.04682922]
[-52.32460022 77.26170349]
[-66.94014740 73.88743591]
[-82.12713623 78.32206726]
[-92.78769684 67.92005920]
[-107.40325165 64.54579163]
[-122.01879883 61.17152786]
[-136.63435364 57.79726028]
[-152.15019226 63.10673904]
[-164.32667542 52.12195969]
[-160.63766479 36.14311981]
[-144.87811279 31.60788345]
[-133.26008606 43.18170929]
[-118.64453125 46.55597687]
[-104.02898407 49.93024063]
[-89.41342926 53.30450821]
[-75.27184296 48.62852478]
[-63.56588364 59.27188492]
[-48.95033264 62.64614868]
[-34.06541824 52.02478027]
[-15.82575321 55.69135666]
[-5.86590338 71.78137970]
[8.85850430 74.64350891]
[23.58291245 77.50564575]
[38.30731964 80.36778259]
[44.73514938 66.27750397]
[54.32550049 54.11698914]
[66.52957153 44.58212280]
[80.64897919 38.21854019]
[95.87575531 35.39039230]
[96.66078949 20.41094971]
[97.44583130 5.43150663]
[98.23087311 -9.54793644]
[99.01590729 -24.52737999]
[90.08610535 -30.45418358]
[84.47770691 -39.49223709]
[83.15208435 -49.96451187]
[86.28317261 -59.96053314]
[93.23800659 -67.68489838]
[102.70333862 -71.77972412]
[104.27126312 -86.69755554]
[105.83919525 -101.61538696]
[107.40711975 -116.53321075]
[108.97504425 -131.45103455]
[101.09165192 -148.07803345]
[111.92036438 -161.87251282]
[113.22769928 -176.81542969]
[101.42890930 -186.89353943]
[97.83998871 -201.98986816]
[103.84095764 -216.29959106]
[117.12431335 -224.32031250]
[132.58233643 -222.96791077]
[144.27111816 -212.76240540]
[147.69606018 -197.62802124]
[141.54020691 -183.38424683]
[128.17062378 -175.50810242]
[126.86328888 -160.56517029]
[134.40306091 -151.08343506]
[133.41809082 -138.60697937]
[123.89287567 -129.88311768]
[122.32495117 -114.96528625]
[120.75701904 -100.04745483]
[119.18909454 -85.12963104]
[117.62117004 -70.21179962]
[130.96562195 -56.05132294]
[129.61709595 -36.33578491]
[113.99535370 -23.74234009]
[113.21031189 -8.76289654]
[112.42527771 6.21654606]
[111.64023590 21.19598961]
[110.85519409 36.17543030]
[122.98098755 39.47492599]
[134.24092102 45.05484390]
[144.21073914 52.70495605]
[152.51481628 62.13702393]
[158.84027100 72.99567413]
[173.10610962 68.36042023]
[187.37196350 63.72516251]
[201.63781738 59.08990860]
[215.90365601 54.45465088]
[230.16950989 49.81939697]
[235.85929871 35.25367355]
[249.60531616 27.79841423]
[264.91711426 30.97376251]
[274.56494141 43.28041458]
[273.99334717 58.90755081]
[263.47225952 70.47650909]
[247.96942139 72.52478790]
[234.80476379 64.08524323]
[220.53890991 68.72049713]
[206.27307129 73.35575104]
[192.00721741 77.99101257]
[177.74136353 82.62626648]
[163.47552490 87.26152039]
[164.49389648 94.34782410]
[164.72364807 101.50324249]
[164.16195679 108.64027405]
[162.81568909 115.67166138]
[160.70129395 122.51140594]
[174.06639099 129.32125854]
[187.43148804 136.13111877]
[200.79658508 142.94097900]
[214.16168213 149.75083923]
[227.52677917 156.56069946]
[240.89187622 163.37055969]
[257.23132324 161.97241211]
[266.38864136 175.57666016]
[258.94360352 190.18840027]
[242.55499268 190.77633667]
[234.08203125 176.73565674]
[220.71693420 169.92579651]
[207.35182190 163.11593628]
[193.98672485 156.30607605]
[180.62162781 149.49621582]
[167.25653076 142.68637085]
[153.89143372 135.87651062]
[144.81707764 146.72087097]
[133.60479736 155.33650208]
[120.78946686 161.31239319]
[106.98239899 164.36347961]
[92.84224701 164.34420776]
[89.46798706 178.95976257]
[86.09371948 193.57531738]
[92.25977325 204.92498779]
[89.12914276 217.04238892]
[78.91319275 223.55284119]
[75.28437042 238.10728455]
[71.65554047 252.66171265]
[79.53312683 266.09976196]
[75.64564514 280.80834961]
[62.78596878 288.23559570]
[59.15714264 302.79003906]
[55.52831268 317.34448242]
[51.89948654 331.89892578]
[48.27065659 346.45333862]
[44.64182663 361.00778198]
[41.01300049 375.56222534]
[37.38417053 390.11666870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[15 179]
[16 178]
[17 177]
[18 176]
[19 175]
[20 174]
[21 173]
[22 172]
[25 169]
[26 168]
[27 167]
[29 164]
[30 163]
[31 162]
[35 66]
[36 65]
[37 64]
[38 63]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
[49 54]
[71 112]
[72 111]
[73 110]
[74 109]
[75 108]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[87 98]
[88 97]
[117 135]
[118 134]
[119 133]
[120 132]
[121 131]
[122 130]
[140 157]
[141 156]
[142 155]
[143 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
