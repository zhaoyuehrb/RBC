%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAGUGAAGUUGGGCGACGGCGGCAGCGGGGAGGACGGGCUCAAGAAGCUGGGCAAGCGGGCGGCCGAUGAGGAGUCCCUGGAAGGAGAAGGGGCCG\
) } def
/len { sequence length } bind def

/coor [
[178.71691895 297.67517090]
[168.93728638 294.90338135]
[159.93231201 290.17102051]
[152.09049988 283.67855835]
[145.75093079 275.70254517]
[141.18859863 266.58370972]
[138.60250854 256.71246338]
[138.10693359 246.51220703]
[139.72644043 236.42112732]
[143.39465332 226.87344360]
[148.95697021 218.28060913]
[156.17706299 211.01368713]
[148.60983276 198.06236267]
[141.04258728 185.11102295]
[133.47534180 172.15969849]
[125.90809631 159.20837402]
[112.80685425 152.12271118]
[112.52545166 136.30400085]
[104.95821381 123.35268402]
[90.34395599 121.83329010]
[79.38732147 112.04364014]
[76.23858643 97.69197083]
[82.09046173 84.21456146]
[74.52321625 71.26323700]
[54.97570038 67.42374420]
[44.46929932 50.85005951]
[49.19201660 32.11055756]
[40.45090103 19.92068863]
[31.70978546 7.73081923]
[22.96866989 -4.45904970]
[4.99312162 -3.95165658]
[-9.64007187 -14.13492966]
[-15.31052017 -30.87336159]
[-9.97387409 -47.55859375]
[-19.45592117 -59.18145370]
[-28.93796730 -70.80430603]
[-44.68488693 -72.14970398]
[-54.80426788 -84.28945923]
[-53.29246140 -100.02127075]
[-41.04639435 -110.01174164]
[-25.33144379 -108.33369446]
[-15.47100830 -95.98268890]
[-17.31511116 -80.28635406]
[-7.83306360 -68.66349792]
[1.64898264 -57.04064178]
[13.73445797 -59.52380371]
[25.78296661 -56.54700089]
[35.43408966 -48.62882996]
[40.76937485 -37.26218033]
[40.69350052 -24.63304329]
[35.15853882 -13.20016479]
[43.89965439 -1.01029646]
[52.64076996 11.17957211]
[61.38188553 23.36944008]
[71.88996887 22.23958397]
[81.96595764 25.69001389]
[89.69335938 33.13756943]
[93.57160950 43.23208618]
[92.80709839 54.10086060]
[87.47454834 63.69599152]
[95.04178619 76.64731598]
[109.65604401 78.16670990]
[120.61267853 87.95635986]
[123.76141357 102.30802917]
[117.90953827 115.78543854]
[125.47678375 128.73677063]
[139.11927795 136.74879456]
[138.85942078 151.64114380]
[146.42666626 164.59246826]
[153.99391174 177.54379272]
[161.56115723 190.49511719]
[169.12838745 203.44644165]
[189.73886108 200.13989258]
[209.83541870 205.63275146]
[225.83657837 218.91159058]
[234.90501404 237.57850647]
[235.45059204 258.28408813]
[227.40913391 277.32839966]
[238.26025391 287.68469238]
[249.11138916 298.04098511]
[259.96252441 308.39727783]
[270.81365967 318.75360107]
[281.66479492 329.10989380]
[296.63446045 325.37994385]
[311.23693848 330.35699463]
[320.81265259 342.45281982]
[322.30599976 357.80773926]
[315.24044800 371.52203369]
[301.87063599 379.21951294]
[286.46276855 378.44396973]
[273.93347168 369.44284058]
[268.28079224 355.08837891]
[271.30847168 339.96102905]
[260.45736694 329.60473633]
[249.60621643 319.24841309]
[238.75509644 308.89212036]
[227.90396118 298.53582764]
[217.05282593 288.17953491]
[208.43811035 293.51510620]
[198.90092468 296.96246338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[18 66]
[19 65]
[23 61]
[24 60]
[27 54]
[28 53]
[29 52]
[30 51]
[34 45]
[35 44]
[36 43]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
