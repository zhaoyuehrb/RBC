%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGGGGCGCGACGGCCGGGGCGGGGGCGCUGCUGCUGCGGGGGCAGGCGGCGGCAGGGGCGGCGGCGGCGGCGGCGGCCCGCUCCAGCCAUGCCGAAUAAAAACAAGAAGGAGAAAGAAUCACCAAAAGCAGGGAAGAGUGGAAAAAGUUCAAAAGAAGGACAAGACACAGUAGAAUCAGAGCAAAUUU\
) } def
/len { sequence length } bind def

/coor [
[90.43486023 153.96325684]
[86.41796112 168.41539001]
[82.40106201 182.86753845]
[86.16017914 198.23568726]
[75.29719543 208.42610168]
[71.28029633 222.87825012]
[75.89886475 238.61358643]
[64.38668060 250.29270935]
[48.58649063 245.90112305]
[44.75217438 229.95652771]
[56.82814789 218.86135864]
[60.84504700 204.40921021]
[56.79861832 190.07478333]
[67.94892120 178.85064697]
[71.96581268 164.39849854]
[75.98271179 149.94635010]
[69.22055054 126.11391449]
[75.70927429 107.10542297]
[89.83996582 98.62596893]
[75.79524231 93.35854340]
[61.75051880 88.09111786]
[47.70579529 82.82369995]
[36.16025162 89.77362061]
[22.91359138 88.81527710]
[12.78990841 80.52247620]
[9.34637737 68.09892273]
[-4.61256313 62.60820770]
[-18.57150459 57.11749268]
[-34.24611282 59.26626968]
[-43.25783920 47.40717697]
[-57.21677780 41.91646194]
[-71.17572021 36.42574310]
[-85.13465881 30.93502617]
[-99.09359741 25.44430923]
[-106.51495361 36.87429047]
[-123.34537506 41.66448975]
[-138.34489441 41.54488754]
[-153.34442139 41.42528152]
[-168.34394836 41.30567932]
[-183.34347534 41.18607712]
[-198.34298706 41.06647491]
[-213.34251404 40.94687271]
[-228.34204102 40.82727051]
[-243.34156799 40.70766830]
[-258.34109497 40.58806610]
[-267.45294189 53.14807129]
[-282.21755981 57.92148972]
[-296.95764160 53.07284927]
[-306.00534058 40.46654892]
[-305.88162231 24.94996643]
[-296.63406372 12.48954678]
[-281.81851196 7.87657452]
[-267.13189697 12.88483238]
[-258.22149658 25.58854294]
[-243.22195435 25.70814514]
[-228.22244263 25.82774734]
[-213.22291565 25.94734955]
[-198.22338867 26.06695175]
[-183.22386169 26.18655586]
[-168.22434998 26.30615807]
[-153.22482300 26.42576027]
[-138.22529602 26.54536247]
[-123.22577667 26.66496468]
[-117.07377625 12.98458004]
[-127.11666107 1.84274471]
[-137.15954590 -9.29909039]
[-147.20242310 -20.44092560]
[-162.18917847 -25.51122284]
[-164.96322632 -40.14522171]
[-175.00611877 -51.28705597]
[-189.99285889 -56.35735321]
[-192.76690674 -70.99134827]
[-202.80979919 -82.13318634]
[-218.56744385 -86.67506409]
[-222.24971008 -102.65545654]
[-210.06860352 -113.63510132]
[-194.55499268 -108.31908417]
[-191.66796875 -92.17607117]
[-181.62507629 -81.03423309]
[-167.35665894 -76.76087952]
[-163.86427307 -61.32994080]
[-153.82139587 -50.18810272]
[-139.55297852 -45.91474533]
[-136.06059265 -30.48380852]
[-126.01770782 -19.34197426]
[-115.97482300 -8.20013809]
[-105.93194580 2.94169688]
[-93.60288239 11.48536873]
[-79.64394379 16.97608566]
[-65.68500519 22.46680260]
[-51.72606277 27.95751953]
[-37.76712036 33.44823837]
[-23.09095001 30.90672684]
[-13.08078671 43.15855026]
[0.87815404 48.64926910]
[14.83709431 54.13998413]
[29.94963074 46.77283478]
[46.03306198 52.72717285]
[52.97322083 68.77897644]
[67.01794434 74.04640198]
[81.06266785 79.31381989]
[95.10739136 84.58124542]
[85.30731964 73.22524261]
[71.68132019 66.95372009]
[59.96922302 57.58212280]
[50.86197662 45.66331482]
[44.89684296 31.90042114]
[42.42572784 17.10536766]
[43.59440994 2.15096498]
[48.33394623 -12.08057785]
[56.36473083 -24.74969292]
[67.21300507 -35.10898590]
[80.23879242 -42.54732895]
[94.67365265 -46.62590408]
[109.66602325 -47.10410690]
[124.33146667 -43.95372391]
[137.80480957 -37.36061096]
[149.29119873 -27.71371078]
[158.11303711 -15.58213425]
[163.74989319 -1.68156016]
[165.86920166 13.16796780]
[164.34597778 28.09042549]
[159.27005005 42.20548630]
[150.94087219 54.68045807]
[139.84982300 64.77939606]
[126.65219116 71.90612793]
[117.59594727 83.86374664]
[131.27633667 77.71174622]
[137.82885742 71.33064270]
[145.22427368 71.57266235]
[159.00102234 65.63960266]
[163.32118225 50.61062241]
[176.31985474 41.91762161]
[191.85948181 43.66516876]
[202.60272217 55.02812958]
[203.47694397 70.64125824]
[194.06936646 83.13251495]
[178.82196045 86.60390472]
[164.93408203 79.41635132]
[151.15733337 85.34941101]
[137.42832947 91.39212799]
[123.74794006 97.54412842]
[123.74794006 105.04412842]
[136.73834229 112.54410553]
[123.74794006 120.04412842]
[123.74794006 127.54412842]
[137.42832947 133.69612122]
[151.10871887 139.84812927]
[160.83041382 131.32768250]
[173.00961304 127.13599396]
[185.82257080 127.86329651]
[197.36480713 133.36605835]
[205.93408203 142.79353333]
[210.28153992 154.71917725]
[209.79351807 167.35635376]
[223.27076721 173.94148254]
[236.74801636 180.52659607]
[250.22525024 187.11172485]
[264.44097900 180.59655762]
[279.50491333 184.79315186]
[288.30438232 197.72001648]
[286.68447876 213.27348328]
[275.41012573 224.10966492]
[259.80468750 225.11204529]
[247.23661804 215.80735779]
[243.64013672 200.58897400]
[230.16288757 194.00384521]
[216.68563843 187.41873169]
[203.20838928 180.83360291]
[189.29653931 190.96138000]
[172.08364868 192.66381836]
[156.29576111 185.38296509]
[146.31350708 171.03985596]
[144.95671082 153.52850342]
[131.27633667 147.37651062]
[117.59594727 141.22451782]
[110.80567169 144.40919495]
[119.86191559 156.36680603]
[128.91816711 168.32441711]
[137.97441101 180.28202820]
[147.03063965 192.23963928]
[156.08688354 204.19725037]
[168.52252197 212.58503723]
[175.82664490 225.68655396]
[176.42311096 240.67469788]
[170.18321228 254.31521606]
[158.45343018 263.66467285]
[143.76490784 266.70559692]
[129.28721619 262.78179932]
[118.14442444 252.73995972]
[112.74101257 238.74699402]
[114.24297333 223.82234192]
[110.83940125 209.21359253]
[107.43583679 194.60482788]
[104.03226471 179.99607849]
[100.62870026 165.38731384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[5 12]
[6 11]
[19 102]
[20 101]
[21 100]
[22 99]
[26 96]
[27 95]
[28 94]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[64 87]
[65 86]
[66 85]
[67 84]
[69 82]
[70 81]
[72 79]
[73 78]
[127 142]
[128 141]
[130 140]
[131 139]
[146 176]
[147 175]
[148 174]
[155 169]
[156 168]
[157 167]
[158 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
