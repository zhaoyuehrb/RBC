%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAGCCCACUUCAAGCACCAAUGGGGAGAAGAGGAAGAGCCCCUGUGACUCCAACAGCAAAAAUGAUGAGAUGCAGGAGACACCAAACAGGGACU\
) } def
/len { sequence length } bind def

/coor [
[132.35423279 141.89060974]
[123.05052185 147.64758301]
[112.76196289 151.36877441]
[101.92813110 152.89518738]
[91.01192474 152.16160583]
[80.47974396 149.19938660]
[70.78157806 144.13505554]
[62.33180237 137.18502808]
[55.49142838 128.64622498]
[50.55272675 118.88349915]
[47.72670364 108.31394958]
[32.72851562 108.54722595]
[19.05034256 116.49820709]
[6.20428085 108.95977783]
[-8.79390526 109.19305420]
[-23.79209137 109.42633057]
[-38.79027557 109.65960693]
[-44.23717880 119.19029236]
[-53.13920593 125.47269440]
[-63.78312683 127.38241577]
[-74.15592957 124.62854767]
[-82.32552338 117.79563141]
[-86.80057526 108.22116852]
[-101.75524139 107.05590820]
[-116.30999756 114.61177826]
[-129.98342896 105.55808258]
[-128.70947266 89.20849609]
[-113.79868317 82.38206482]
[-100.58998871 92.10124207]
[-85.63531494 93.26649475]
[-72.04985809 79.52210236]
[-52.43080902 79.92735291]
[-39.02355576 94.66142273]
[-24.02536774 94.42814636]
[-9.02718163 94.19487000]
[5.97100401 93.96159363]
[18.57640839 86.02729797]
[32.49523926 93.54904175]
[47.49342728 93.31576538]
[53.53027725 74.65864563]
[65.94525146 59.47971344]
[83.03436279 49.86232376]
[102.45205688 47.12650299]
[121.53320312 51.64774323]
[137.65884399 62.80549622]
[148.61567688 79.06832123]
[163.09445190 75.14849091]
[177.57322693 71.22866058]
[192.05200195 67.30883026]
[206.53077698 63.38900375]
[221.00955200 59.46917343]
[230.01306152 39.79122543]
[250.20899963 32.81078339]
[268.95916748 42.48022842]
[282.65600586 36.36497116]
[296.35284424 30.24971771]
[310.04971313 24.13446426]
[315.77407837 9.64760208]
[329.75173950 3.64098120]
[343.52749634 9.18758392]
[357.22433472 3.07233000]
[356.43167114 -12.08471775]
[361.17160034 -26.50336838]
[370.80310059 -38.23361969]
[384.02355957 -45.68904495]
[399.04507446 -47.86136627]
[413.83605957 -44.45679092]
[426.39617920 -35.93576050]
[435.02676392 -23.45067787]
[438.56060791 -8.69004250]
[436.51980591 6.34988785]
[429.18032837 19.63508606]
[417.53479004 29.36883926]
[403.15814209 34.23473740]
[387.99475098 33.57470703]
[374.09530640 27.47801208]
[363.33959961 16.76917839]
[349.64273071 22.88443375]
[344.57583618 36.84373474]
[330.77239990 43.24058914]
[316.16494751 37.83131409]
[302.46810913 43.94656754]
[288.77127075 50.06182098]
[275.07440186 56.17707443]
[274.86926270 65.26665497]
[271.61001587 73.80148315]
[265.64706421 80.78119659]
[257.64941406 85.37710571]
[248.52989197 87.03055573]
[239.34082031 85.52069855]
[231.15267944 80.99344635]
[224.92938232 73.94795227]
[210.45060730 77.86777496]
[195.97183228 81.78760529]
[181.49305725 85.70743561]
[167.01428223 89.62726593]
[152.53550720 93.54709625]
[152.73988342 104.48601532]
[150.69090271 115.23326111]
[146.47610474 125.32965851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 39]
[12 38]
[14 36]
[15 35]
[16 34]
[17 33]
[23 30]
[24 29]
[46 97]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[54 84]
[55 83]
[56 82]
[57 81]
[60 78]
[61 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
