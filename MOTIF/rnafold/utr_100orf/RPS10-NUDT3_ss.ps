%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGGGCGGGUCCACGCCAGCCCGGAAGAGACGCAGCACCGCGCAUGCUCCUUCCUUUCCAGCCCCGGUACCGGACCCUGCAGCCGCAGAGAUGUUGAUGCCUAAGAAGAACCGGAUUGCCAUUUAUGAACUCCUUUUUAAGGAGGGAGUCAUGGUGGCCAAGAAGGAUGUCCACAUGCCUAAGCACCCGG\
) } def
/len { sequence length } bind def

/coor [
[76.99308014 257.56475830]
[69.26093292 243.10285950]
[78.14781952 229.32044983]
[78.38947296 214.32238770]
[78.63112640 199.32434082]
[78.87277222 184.32627869]
[64.43185425 180.26921082]
[56.82745361 193.19876099]
[49.22305679 206.12831116]
[41.61865997 219.05784607]
[41.29184341 234.87568665]
[28.17030907 241.92370605]
[20.56591225 254.85324097]
[12.96151352 267.78280640]
[13.37055397 284.17684937]
[-0.76177377 292.49606323]
[-14.89734173 284.18234253]
[-14.49468899 267.78814697]
[0.03196893 260.17840576]
[7.63636684 247.24885559]
[15.24076462 234.31930542]
[15.02366257 219.42628479]
[28.68911362 211.45344543]
[36.29351044 198.52391052]
[43.89791107 185.59436035]
[51.50230789 172.66481018]
[42.78356552 160.45893860]
[28.08670807 163.45932007]
[13.38984776 166.45970154]
[-1.30701196 169.46009827]
[-16.00387192 172.46047974]
[-23.79849815 177.24914551]
[-30.96158028 175.38880920]
[-45.70486832 178.15203857]
[-53.57563019 182.81451416]
[-60.70780945 180.83901978]
[-75.49370575 183.36436462]
[-90.27959442 185.88972473]
[-105.04466248 188.53410339]
[-119.78794861 191.29733276]
[-129.99835205 203.67179871]
[-146.03613281 203.26026917]
[-155.59846497 190.37844849]
[-151.34996033 174.90817261]
[-136.54969788 168.71688843]
[-122.55117798 176.55404663]
[-107.80789185 173.79081726]
[-101.80464935 169.46279907]
[-92.80494690 171.10383606]
[-78.01905823 168.57847595]
[-63.23316574 166.05313110]
[-48.46809769 163.40875244]
[-33.72480774 160.64552307]
[-19.00425720 157.76361084]
[-4.30739737 154.76322937]
[10.38946247 151.76284790]
[25.08632278 148.76246643]
[39.78318024 145.76206970]
[33.66788864 132.47485352]
[30.35789871 118.57934570]
[29.85309219 104.64671326]
[32.04079819 91.22442627]
[36.70503616 78.81484222]
[43.53967667 67.85638428]
[52.16493225 58.70811462]
[62.14626312 51.63825226]
[73.01491547 46.81695938]
[84.28905487 44.31354904]
[82.12171936 29.47095299]
[79.95438385 14.62835598]
[77.78704834 -0.21423970]
[75.61971283 -15.05683613]
[61.27167892 -16.86366272]
[47.89377213 -22.32363129]
[36.39826965 -31.05761337]
[27.56732368 -42.46344376]
[21.99973297 -55.75745010]
[20.07035828 -70.02826691]
[21.90487480 -84.29935455]
[27.37161064 -97.59578705]
[36.09098053 -109.01085663]
[47.46183395 -117.76793671]
[60.70289230 -123.27327728]
[58.77495193 -138.14886475]
[56.84701157 -153.02444458]
[43.38734055 -160.51734924]
[36.99528503 -174.33743286]
[39.93193817 -189.09684753]
[50.86554337 -199.17623901]
[48.93760300 -214.05181885]
[47.00966263 -228.92741394]
[36.62820435 -241.62219238]
[42.68375015 -256.86233521]
[58.94688034 -258.97012329]
[68.68747711 -245.77720642]
[61.88525009 -230.85534668]
[63.81318665 -215.97976685]
[65.74112701 -201.10418701]
[78.88299561 -194.14506531]
[85.48519135 -180.62193298]
[82.82743073 -165.62895203]
[71.72259521 -154.95239258]
[73.65053558 -140.07679749]
[75.57847595 -125.20121765]
[90.99888611 -122.90644836]
[105.16374207 -116.35934448]
[116.92501831 -106.08152771]
[125.32695007 -92.89736176]
[129.68373108 -77.86781311]
[129.63545227 -62.20508194]
[125.17786407 -47.17484283]
[116.66330719 -33.99394226]
[104.77296448 -23.73191261]
[90.46230316 -17.22417068]
[92.62963867 -2.38157535]
[94.79697418 12.46102047]
[96.96430969 27.30361748]
[99.13165283 42.14621353]
[117.91014862 44.98144531]
[134.75912476 53.74399948]
[147.86340332 67.48985291]
[155.81120300 84.73813629]
[170.67077637 82.69042969]
[185.53034973 80.64272308]
[200.38992310 78.59501648]
[215.24949646 76.54731750]
[230.10906982 74.49961090]
[238.19589233 70.22283936]
[245.22430420 72.54061127]
[260.11492920 70.73255920]
[275.00558472 68.92451477]
[289.89620972 67.11646271]
[298.05087280 62.97052765]
[305.04104614 65.40122223]
[319.95886230 63.83329391]
[334.87670898 62.26536942]
[349.79452515 60.69744110]
[364.71234131 59.12951660]
[379.63018799 57.56158829]
[394.54800415 55.99365997]
[409.46585083 54.42573547]
[424.58618164 46.75687790]
[436.14108276 59.16336441]
[427.41815186 73.70114136]
[411.03378296 69.34355927]
[396.11593628 70.91149139]
[381.19812012 72.47941589]
[366.28027344 74.04734039]
[351.36245728 75.61527252]
[336.44464111 77.18319702]
[321.52679443 78.75112152]
[306.60897827 80.31905365]
[291.70425415 82.00709534]
[276.81362915 83.81514740]
[261.92297363 85.62319183]
[247.03234863 87.43124390]
[232.15676880 89.35918427]
[217.29719543 91.40689087]
[202.43762207 93.45458984]
[187.57804871 95.50229645]
[172.71847534 97.55000305]
[157.85890198 99.59770203]
[159.87995911 110.66495514]
[159.70745850 122.43777466]
[157.15675354 134.46983337]
[152.13551331 146.27233887]
[144.65275574 157.33319092]
[134.82388306 167.13813782]
[143.44401550 179.41386414]
[152.06416321 191.68957520]
[160.78289795 203.89546204]
[169.59967041 216.03071594]
[178.41645813 228.16596985]
[193.60974121 234.33816528]
[195.59278870 250.61697388]
[182.32559204 260.25616455]
[167.45632935 253.33973694]
[166.28120422 236.98274231]
[157.46441650 224.84748840]
[148.64764404 212.71223450]
[142.16395569 209.14399719]
[139.78843689 200.30970764]
[131.16830444 188.03399658]
[122.54816437 175.75827026]
[115.37882996 177.96069336]
[119.78366089 192.29936218]
[116.42932129 206.91949463]
[105.44499207 196.70419312]
[101.04016113 182.36552429]
[93.87082672 184.56793213]
[93.62917328 199.56599426]
[93.38752747 214.56404114]
[93.14587402 229.56208801]
[101.58413696 243.62365723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 193]
[4 192]
[5 191]
[6 190]
[7 26]
[8 25]
[9 24]
[10 23]
[12 21]
[13 20]
[14 19]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[33 53]
[34 52]
[36 51]
[37 50]
[38 49]
[39 47]
[40 46]
[68 118]
[69 117]
[70 116]
[71 115]
[72 114]
[83 104]
[84 103]
[85 102]
[89 98]
[90 97]
[91 96]
[122 162]
[123 161]
[124 160]
[125 159]
[126 158]
[127 157]
[129 156]
[130 155]
[131 154]
[132 153]
[134 152]
[135 151]
[136 150]
[137 149]
[138 148]
[139 147]
[140 146]
[141 145]
[168 184]
[169 183]
[170 182]
[171 180]
[172 179]
[173 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
