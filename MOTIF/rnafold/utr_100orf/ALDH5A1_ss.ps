%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCUGUCGCCGUCGUUGCCCGGGCCAUGGCGACCUGCAUUUGGCUGCGGAGCUGUGGGGCCCGGCGCCUCGGGUCGACGUUUCCAGGCUGCCGCCUCCGCCCCCGCGCCGGCGGCCUGGUCCCUG\
) } def
/len { sequence length } bind def

/coor [
[186.74208069 203.33964539]
[181.09455872 197.63996887]
[176.77439880 190.86505127]
[173.98117065 183.31895447]
[172.84577942 175.34150696]
[173.42439270 167.29310608]
[175.69558716 159.53831482]
[163.28733826 151.11007690]
[150.87907410 142.68185425]
[138.47080994 134.25361633]
[126.06254578 125.82539368]
[113.55258179 117.54887390]
[100.94276428 109.42530060]
[95.58567047 109.35357666]
[90.67730713 106.23133087]
[87.93019104 100.58660126]
[75.73085022 91.85871887]
[60.33729935 94.24123383]
[48.08975983 85.21613312]
[45.91325378 70.52605438]
[33.71390915 61.79817200]
[21.40919304 53.21948242]
[9.00093079 44.79125214]
[-3.40733075 36.36302185]
[-15.81559181 27.93479347]
[-28.22385406 19.50656509]
[-40.63211441 11.07833576]
[-53.04037857 2.65010691]
[-65.65019226 -5.47346926]
[-78.45409393 -13.28757381]
[-91.25798798 -21.10167885]
[-104.06188202 -28.91578484]
[-116.86578369 -36.72988892]
[-127.39966583 -33.53710938]
[-137.72335815 -36.66186142]
[-144.43757629 -44.81941223]
[-145.47425842 -55.11180496]
[-157.88252258 -63.54003525]
[-170.29078674 -71.96826172]
[-182.69905090 -80.39649200]
[-195.10731506 -88.82472229]
[-210.58197021 -85.61370087]
[-223.74870300 -94.35512543]
[-226.79592896 -109.86286926]
[-217.91578674 -122.93644714]
[-202.37670898 -125.81955719]
[-189.39773560 -116.80168152]
[-186.67907715 -101.23297882]
[-174.27081299 -92.80475616]
[-161.86256409 -84.37652588]
[-149.45429993 -75.94829559]
[-137.04603577 -67.52006531]
[-117.77100372 -67.63288879]
[-109.05167389 -49.53378677]
[-96.24777985 -41.71968079]
[-83.44388580 -33.90557480]
[-70.63998413 -26.09147072]
[-57.83609009 -18.27736473]
[-52.97282028 -18.54124832]
[-47.91126251 -15.68072605]
[-44.61214828 -9.75815487]
[-32.20388794 -1.32992566]
[-19.79562569 7.09830332]
[-7.38736343 15.52653217]
[5.02089834 23.95476151]
[17.42915916 32.38299179]
[29.83742142 40.81121826]
[37.21438980 41.97913361]
[42.44179153 49.59882736]
[54.64113998 58.32670975]
[69.24716187 55.64350128]
[81.74337006 64.32102966]
[84.45873260 79.65937042]
[96.65807343 88.38725281]
[109.06633759 96.81548309]
[121.67615509 104.93905640]
[130.68609619 106.98999023]
[134.49078369 113.41712952]
[146.89903259 121.84535980]
[159.30729675 130.27359009]
[171.71556091 138.70181274]
[184.12382507 147.13005066]
[205.03294373 136.88009644]
[227.87657166 140.76486206]
[244.06105042 157.18685913]
[247.57740784 179.85794067]
[261.65185547 185.04541016]
[275.72631836 190.23287964]
[289.80075073 195.42034912]
[303.87521362 200.60781860]
[317.94964600 205.79528809]
[332.02410889 210.98275757]
[346.09854126 216.17024231]
[360.17300415 221.35771179]
[374.24746704 226.54518127]
[388.32189941 231.73265076]
[396.43878174 226.58198547]
[405.88253784 225.81877136]
[414.46624756 229.49023438]
[420.26223755 236.63145447]
[422.03479004 245.51502991]
[435.69302368 251.71603394]
[449.35128784 257.91702271]
[465.61117554 255.78440857]
[475.37191772 268.96240234]
[468.59249878 283.89465332]
[452.24700928 285.22012329]
[443.15026855 271.57528687]
[429.49203491 265.37426758]
[415.83380127 259.17327881]
[395.63522339 263.12762451]
[383.13442993 245.80709839]
[369.05999756 240.61962891]
[354.98553467 235.43215942]
[340.91107178 230.24468994]
[326.83663940 225.05722046]
[312.76217651 219.86973572]
[298.68774414 214.68226624]
[284.61328125 209.49479675]
[270.53884888 204.30732727]
[256.46438599 199.11985779]
[242.38993835 193.93238831]
[237.55340576 200.22041321]
[231.48753357 205.35041809]
[224.46372986 209.08653259]
[216.79763794 211.25543213]
[208.83489990 211.75433350]
[200.93559265 210.55587769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 76]
[13 75]
[16 74]
[17 73]
[20 70]
[21 69]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[96 112]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
