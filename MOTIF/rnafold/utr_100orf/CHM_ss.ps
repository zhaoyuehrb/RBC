%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUAAUAGUCACAUGACACGUUUCCCGUCAAGAUGGCGGAUACUCUCCCUUCGGAGUUUGAUGUGAUCGUAAUAGGGACGGGUUUGCCUGAAUCCAUCAUUGCAGCUGCAUGUUCAAGAAGUGGCCGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[141.55438232 104.55974579]
[140.10995483 114.68362427]
[136.18528748 124.36299896]
[129.91497803 132.98776245]
[121.58403778 139.98812866]
[111.61593628 144.87165833]
[100.55154419 147.25697327]
[89.01990509 146.90145874]
[77.70249939 143.72149658]
[68.82891846 155.81527710]
[59.95533371 167.90905762]
[58.70352554 184.26036072]
[43.80198669 191.10696411]
[30.58014107 181.40568542]
[32.63949203 165.13635254]
[47.86155319 159.03547668]
[56.73513794 146.94169617]
[65.60871887 134.84791565]
[62.14127350 128.19758606]
[48.84062576 135.13247681]
[38.33393860 145.83805847]
[24.90558815 139.15379333]
[27.11314011 124.31713104]
[41.90573120 121.83183289]
[55.20638275 114.89693451]
[51.73893356 108.24661255]
[36.74305725 108.59825134]
[21.74717903 108.94989014]
[6.75130224 109.30152893]
[-8.24457550 109.65316772]
[-23.24045372 110.00480652]
[-38.93349075 116.42079163]
[-49.44300461 103.11716461]
[-39.56861496 89.33556366]
[-23.59209251 95.00892639]
[-8.59621429 94.65728760]
[6.39966345 94.30564880]
[21.39554214 93.95401001]
[36.39141846 93.60237122]
[51.38729858 93.25073242]
[64.23209381 69.81040955]
[86.55503082 57.54612350]
[110.71536255 59.12260056]
[129.21945190 72.70487213]
[141.90693665 64.70313263]
[154.59442139 56.70139313]
[167.28189087 48.69965363]
[179.96937561 40.69791412]
[192.65686035 32.69617462]
[196.26191711 17.54225349]
[209.24281311 9.60809135]
[223.66754150 13.13835526]
[236.35502625 5.13661671]
[249.04251099 -2.86512256]
[250.18417358 -18.22750473]
[260.03759766 -29.83626175]
[274.66430664 -33.37513351]
[288.40567017 -27.69067192]
[301.09313965 -35.69240952]
[313.78060913 -43.69414902]
[326.46810913 -51.69588852]
[339.15557861 -59.69762802]
[351.74841309 -67.84754181]
[364.24481201 -76.14450836]
[376.74121094 -84.44147491]
[389.23764038 -92.73844147]
[389.41702271 -110.79132843]
[400.24481201 -125.04223633]
[417.28942871 -129.96655273]
[433.75671387 -123.79527283]
[445.85049438 -132.66885376]
[457.94427490 -141.54243469]
[470.03805542 -150.41603088]
[482.13183594 -159.28961182]
[484.43835449 -176.58506775]
[498.24069214 -186.70034790]
[514.76483154 -183.80693054]
[526.64727783 -192.96157837]
[538.52972412 -202.11624146]
[550.19427490 -211.54693604]
[561.63452148 -221.24847412]
[573.07482910 -230.95002747]
[584.51507568 -240.65158081]
[589.53112793 -256.26473999]
[605.61553955 -259.46234131]
[616.22198486 -246.95497131]
[610.43951416 -231.60911560]
[594.21661377 -229.21130371]
[582.77636719 -219.50975037]
[571.33605957 -209.80819702]
[559.89581299 -200.10665894]
[558.61871338 -195.41610718]
[554.32513428 -191.51480103]
[547.68432617 -190.23379517]
[535.80194092 -181.07914734]
[523.91949463 -171.92448425]
[524.05438232 -158.98577881]
[516.57702637 -148.18736267]
[504.05126953 -143.62799072]
[491.00543213 -147.19583130]
[478.91165161 -138.32225037]
[466.81787109 -129.44866943]
[454.72409058 -120.57508087]
[442.63031006 -111.70149231]
[444.48873901 -99.59877014]
[440.96896362 -87.79528046]
[432.68850708 -78.57912445]
[421.19393921 -73.76448059]
[408.67221069 -74.33467102]
[397.53460693 -80.24202728]
[385.03817749 -71.94506073]
[372.54177856 -63.64809418]
[360.04537964 -55.35112762]
[356.17687988 -48.97100449]
[347.15731812 -47.01014709]
[334.46984863 -39.00840759]
[321.78234863 -31.00666809]
[309.09487915 -23.00493050]
[296.40740967 -15.00319099]
[295.61651611 -0.15352818]
[286.12084961 11.52108288]
[271.39941406 15.41119766]
[257.04425049 9.82235813]
[244.35676575 17.82409668]
[231.66928101 25.82583618]
[228.63996887 40.36402130]
[215.88703918 48.65966034]
[200.65859985 45.38365555]
[187.97111511 53.38539505]
[175.28363037 61.38713455]
[162.59616089 69.38887024]
[149.90867615 77.39060974]
[137.22119141 85.39234924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 18]
[10 17]
[11 16]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[44 133]
[45 132]
[46 131]
[47 130]
[48 129]
[49 128]
[52 125]
[53 124]
[54 123]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[63 113]
[64 112]
[65 111]
[66 110]
[70 104]
[71 103]
[72 102]
[73 101]
[74 100]
[77 96]
[78 95]
[79 94]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
