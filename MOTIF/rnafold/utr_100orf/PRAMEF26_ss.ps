%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCCCUGCAGAUUCGUGAAGAUGAGCAUCCGGACUCCACCCAGACUCCUGGAGCUUGCAGGGCGGAGCCUGCUGAGGGACCAAGCCUUGGCCAUGUCCACCCUGGAGGAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[79.39997101 239.34025574]
[74.05339050 253.81152344]
[61.71806717 263.07669067]
[46.33015442 264.17926025]
[32.79988098 256.76742554]
[25.44470787 243.20628357]
[26.61164665 227.82310486]
[35.92832565 215.52664185]
[50.42183304 210.24064636]
[53.61925507 195.58538818]
[56.81668091 180.93013000]
[60.01410294 166.27488708]
[58.34375381 158.97393799]
[63.49911499 151.27156067]
[67.08885193 136.70744324]
[70.67858887 122.14331055]
[64.57199860 135.84402466]
[51.82228851 143.74623108]
[36.83539963 143.11914062]
[24.79039383 134.17945862]
[19.84968948 120.01650238]
[23.72065926 105.52458954]
[35.06560135 95.71173096]
[49.96401978 93.96897125]
[63.26767731 100.89881897]
[51.39809036 91.72750854]
[39.52850723 82.55619049]
[27.65892410 73.38488007]
[18.83134842 70.56030273]
[15.59816647 63.80453491]
[3.97909236 54.31785202]
[-7.63998222 44.83117294]
[-19.38537025 35.50133514]
[-31.25495529 26.33002281]
[-43.12453842 17.15871048]
[-58.77544022 14.84356785]
[-64.11585236 0.93927997]
[-75.98543549 -8.23203182]
[-91.62750244 -5.97341728]
[-104.23499298 -15.50372696]
[-106.32810211 -31.16879845]
[-96.66503143 -43.67481995]
[-80.97870636 -45.60219574]
[-68.57554626 -35.80744171]
[-66.81412506 -20.10161591]
[-54.94454193 -10.93030453]
[-40.14263535 -9.27115440]
[-33.95322800 5.28912687]
[-22.08364296 14.46043873]
[-10.21405792 23.63175201]
[-2.90194964 25.25253487]
[1.84669852 33.21209717]
[13.46577263 42.69878006]
[25.08484650 52.18545914]
[36.83023453 61.51529694]
[48.69982147 70.68660736]
[60.56940460 79.85791779]
[72.43898773 89.02923584]
[97.17377472 74.11692047]
[118.54151917 87.41417694]
[133.05613708 83.62923431]
[147.57075500 79.84429932]
[162.08538818 76.05936432]
[176.60000610 72.27442169]
[188.00128174 61.30530548]
[202.26905823 65.58077240]
[216.78367615 61.79583740]
[231.29829407 58.01089859]
[235.45501709 43.29122162]
[246.34948730 32.69841766]
[260.98605347 29.00552559]
[275.40936279 33.10722351]
[285.77322388 43.80562210]
[300.28784180 40.02068329]
[314.80249023 36.23574829]
[329.31710815 32.45080948]
[343.83172607 28.66587067]
[358.34634399 24.88093185]
[372.86096191 21.09599495]
[379.40075684 6.89159536]
[393.56295776 0.26088107]
[408.66058350 4.33467293]
[417.56500244 17.18945122]
[416.07183838 32.75558090]
[404.88607788 43.68321609]
[389.28933716 44.81265640]
[376.64590454 35.61061859]
[362.13128662 39.39555359]
[347.61666870 43.18049240]
[333.10205078 46.96543121]
[318.58740234 50.75037003]
[304.07278442 54.53530502]
[289.55816650 58.32024384]
[285.73837280 72.71727753]
[275.15469360 83.33998108]
[260.57861328 87.26479340]
[245.89868164 83.34095001]
[235.08323669 72.52552032]
[220.56861877 76.31046295]
[206.05400085 80.09539795]
[195.69090271 90.79379272]
[180.38493347 86.78904724]
[165.87031555 90.57398224]
[151.35569763 94.35892487]
[136.84107971 98.14385986]
[122.32645416 101.92879486]
[120.16168213 113.42659760]
[112.06867981 123.07094574]
[99.46080780 127.84535980]
[85.24271393 125.73304749]
[81.65297699 140.29716492]
[78.06324005 154.86129761]
[74.66935730 169.47230530]
[71.47193146 184.12756348]
[68.27451324 198.78282166]
[65.07708740 213.43806458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 116]
[10 115]
[11 114]
[12 113]
[14 112]
[15 111]
[16 110]
[25 58]
[26 57]
[27 56]
[28 55]
[30 54]
[31 53]
[32 52]
[33 50]
[34 49]
[35 48]
[37 46]
[38 45]
[60 106]
[61 105]
[62 104]
[63 103]
[64 102]
[66 100]
[67 99]
[68 98]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
