%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGAAAACUAACUGAAAAACGAGAACCUACUGUAUGGUUAGUAAUUUCUUCCAUGUCAUACAAGUAUUCGAGAAAUCUGCUACCUUGAUUAGUAAGACUGAACACAUUGGUUUUGUCAUUUAUUCAUGGAGGA\
) } def
/len { sequence length } bind def

/coor [
[83.82347107 101.77631378]
[69.83638763 96.35768890]
[55.84930038 90.93906403]
[41.86221695 85.52043915]
[27.87513351 80.10181427]
[13.88805008 74.68318939]
[-6.46117210 86.56610870]
[-28.83040619 80.00109100]
[-39.30146790 59.45471954]
[-54.04606628 56.69847488]
[-68.79066467 53.94223404]
[-80.87498474 65.71573639]
[-97.42704773 67.97721100]
[-111.93610382 60.03580856]
[-118.81285858 45.17520523]
[-133.61718750 42.76026535]
[-148.42150879 40.34532928]
[-157.21560669 52.77211761]
[-170.47903442 60.11844254]
[-185.55511475 60.97406006]
[-199.45056152 55.22273254]
[-209.42976379 44.05470276]
[-213.55334473 29.72077370]
[-228.35766602 27.30583572]
[-243.16200256 24.89089775]
[-257.96633911 22.47595978]
[-272.77066040 20.06101990]
[-285.51251221 29.02106857]
[-300.49182129 26.36108398]
[-308.95532227 14.15843773]
[-323.75964355 11.74349976]
[-338.56396484 9.32856178]
[-353.36831665 6.91362333]
[-368.17263794 4.49868488]
[-380.85336304 13.93132687]
[-396.47750854 11.55195618]
[-405.77554321 -1.22778857]
[-403.23114014 -16.82591248]
[-390.35379028 -25.98832321]
[-374.78344727 -23.27912712]
[-365.75769043 -10.30564117]
[-350.95336914 -7.89070320]
[-336.14904785 -5.47576475]
[-321.34472656 -3.06082630]
[-306.54037476 -0.64588803]
[-294.63772583 -9.52632523]
[-279.58963013 -7.28812742]
[-270.35571289 5.25669432]
[-255.55139160 7.67163277]
[-240.74705505 10.08657074]
[-225.94273376 12.50150967]
[-211.13841248 14.91644764]
[-202.67338562 2.63602066]
[-189.66239929 -4.78176117]
[-174.65956116 -5.81908894]
[-160.63693237 -0.21678044]
[-150.39566040 10.96371841]
[-146.00657654 25.54100227]
[-131.20223999 27.95594025]
[-116.39791870 30.37088013]
[-107.78720093 20.10338402]
[-95.11804962 15.41517067]
[-81.68364716 17.63956833]
[-71.03323364 26.29794121]
[-66.03441620 39.19763565]
[-51.28982162 41.95388031]
[-36.54522705 44.71012115]
[-32.59941864 38.45547867]
[-27.18431473 33.38650894]
[-20.64412689 29.84074402]
[-13.39847088 28.05840683]
[-5.91546869 28.16617012]
[1.31850934 30.16821671]
[7.83044815 33.94524384]
[13.19161987 39.26152039]
[17.04580498 45.77955627]
[19.13294601 53.08154297]
[19.30667496 60.69610596]
[33.29375839 66.11473083]
[47.28084183 71.53335571]
[61.26792526 76.95198059]
[75.25501251 82.37060547]
[89.24209595 87.78923035]
[105.70310211 84.75827789]
[116.13118744 97.85051727]
[130.23970032 102.94462585]
[144.34820557 108.03873444]
[158.45672607 113.13283539]
[174.06434631 110.54202271]
[183.40756226 122.14174652]
[197.51608276 127.23585510]
[213.12371826 124.64504242]
[222.46693420 136.24476624]
[236.57543945 141.33886719]
[250.68394470 146.43298340]
[264.79244995 151.52708435]
[278.90097046 156.62120056]
[293.12338257 161.38806152]
[307.45208740 165.82516479]
[321.78082275 170.26225281]
[337.25213623 166.95338440]
[347.12109375 178.10922241]
[361.44982910 182.54632568]
[375.77853394 186.98341370]
[390.10726929 191.42050171]
[403.96957397 183.83024597]
[419.11517334 188.34536743]
[426.55844116 202.28713989]
[421.88345337 217.38415527]
[407.86373901 224.67962646]
[392.81701660 219.84526062]
[385.67016602 205.74922180]
[371.34146118 201.31213379]
[357.01272583 196.87504578]
[342.68402100 192.43794250]
[328.23757935 196.06417847]
[317.34371948 184.59097290]
[303.01501465 180.15388489]
[288.68627930 175.71678162]
[284.04705811 177.15763855]
[278.45413208 175.63488770]
[273.80685425 170.72970581]
[259.69836426 165.63560486]
[245.58984375 160.54148865]
[231.48132324 155.44738770]
[217.37281799 150.35327148]
[202.77432251 153.30845642]
[192.42196655 141.34436035]
[178.31346130 136.25025940]
[163.71496582 139.20544434]
[153.36260986 127.24134827]
[139.25410461 122.14723969]
[125.14559174 117.05313873]
[111.03707886 111.95903015]
[100.15855408 116.27299500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[9 67]
[10 66]
[11 65]
[15 60]
[16 59]
[17 58]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[85 134]
[86 133]
[87 132]
[88 131]
[90 129]
[91 128]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[98 119]
[99 118]
[100 117]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
