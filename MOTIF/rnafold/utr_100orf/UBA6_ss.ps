%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCCGCCCCUUCCUACCUUCCAGUAGCCGGCGGCGGUGUCUCAGGCGGCAAUGGAAGGAUCCGAGCCUGUGGCCGCCCAUCAGGGGGAAGAGGCGUCCUGUUCUUCCUGGGGGACUGGCAGCACAAAUAAAAAUUUGCCCAUUAUGUCAA\
) } def
/len { sequence length } bind def

/coor [
[155.32551575 177.60231018]
[145.68370056 166.11163330]
[136.04188538 154.62097168]
[126.40007019 143.13031006]
[116.75825500 131.63963318]
[107.11643982 120.14897156]
[92.14488983 119.22555542]
[81.16408539 129.44425964]
[70.18328094 139.66296387]
[72.48888397 150.18975830]
[70.20128632 160.63746643]
[63.80542374 169.10813904]
[54.52615738 174.09208679]
[44.09413910 174.73664856]
[34.42316437 170.99151611]
[22.83411789 180.51484680]
[11.24506950 190.03819275]
[-0.34397906 199.56152344]
[-1.63334250 215.31314087]
[-13.73701954 225.47564697]
[-29.47411346 224.01982117]
[-39.50808334 211.80937195]
[-37.88595581 196.08854675]
[-25.57011032 186.18423462]
[-9.86731625 187.97247314]
[1.72173178 178.44914246]
[13.31078053 168.92581177]
[24.89982796 159.40246582]
[25.29897308 139.97796631]
[40.01593399 126.83510590]
[59.96457672 128.68217468]
[70.94538116 118.46346283]
[81.92617798 108.24475098]
[81.92617798 93.24475098]
[70.94538116 83.02604675]
[59.96457672 72.80734253]
[48.98377609 62.58863449]
[38.00297165 52.36992645]
[27.02216911 42.15121841]
[15.37852573 44.89236832]
[3.98169994 41.67709732]
[-4.34164047 33.42398834]
[-7.58605337 22.28573036]
[-5.04973841 11.08849049]
[-15.60175323 0.42758158]
[-26.15376854 -10.23332691]
[-36.70578384 -20.89423561]
[-47.25779724 -31.55514526]
[-55.60319901 -30.02211761]
[-63.77450943 -31.92794228]
[-70.42907715 -36.88208389]
[-74.50450897 -43.99965668]
[-75.38798523 -52.05872345]
[-73.00737762 -59.70984650]
[-82.64919281 -71.20051575]
[-92.29100800 -82.69117737]
[-101.93281555 -94.18184662]
[-117.51964569 -99.27917480]
[-120.63340759 -115.37999725]
[-108.07093811 -125.92117310]
[-92.75541687 -120.05883026]
[-90.44215393 -103.82366180]
[-80.80033875 -92.33299255]
[-71.15852356 -80.84232330]
[-61.51670837 -69.35166168]
[-40.53354263 -64.13545990]
[-36.59688950 -42.10715866]
[-26.04487419 -31.44625092]
[-15.49285984 -20.78534317]
[-4.94084454 -10.12443352]
[5.61117029 0.53647530]
[23.84246826 -0.51080787]
[37.32336426 12.27382851]
[37.24087524 31.17041588]
[48.22167969 41.38912201]
[59.20248032 51.60783005]
[70.18328094 61.82653809]
[81.16408539 72.04524231]
[92.14488983 82.26395416]
[98.22882080 81.01658630]
[104.28664398 81.76298523]
[109.69307709 84.35758209]
[120.88137817 74.36648560]
[132.06967163 64.37538147]
[143.25796509 54.38428879]
[154.44625854 44.39319229]
[165.63456726 34.40209579]
[176.82286072 24.41099739]
[188.01115417 14.41989994]
[199.19944763 4.42880297]
[210.38774109 -5.56229401]
[215.52749634 -20.52536583]
[230.17420959 -23.23151207]
[241.36250305 -33.22261047]
[252.55079651 -43.21370697]
[260.33767700 -58.27360916]
[276.96466064 -54.96002960]
[278.38339233 -38.06554794]
[262.54190063 -32.02540970]
[251.35360718 -22.03431129]
[240.16529846 -12.04321480]
[235.82582092 2.20522594]
[220.37884521 5.62600279]
[209.19055176 15.61709976]
[198.00225830 25.60819626]
[186.81394958 35.59929276]
[175.62565613 45.59038925]
[164.43736267 55.58148575]
[153.24906921 65.57258606]
[142.06077576 75.56368256]
[130.87246704 85.55477905]
[119.68417358 95.54587555]
[118.60710907 110.50715637]
[128.24891663 121.99782562]
[137.89073181 133.48849487]
[147.53254700 144.97915649]
[157.17436218 156.46981812]
[166.81617737 167.96049500]
[177.79698181 178.17919922]
[189.95031738 186.97103882]
[202.10363770 195.76287842]
[214.25697327 204.55471802]
[226.41030884 213.34657288]
[239.56205750 205.66856384]
[254.70039368 204.01011658]
[269.20254517 208.65855408]
[280.55587769 218.80850220]
[286.79339600 232.70141602]
[286.83441162 247.93028259]
[280.67178345 261.85659790]
[269.37329102 272.06753540]
[254.89639282 276.79400635]
[239.74932861 275.21710205]
[226.55642700 267.61004639]
[217.60343933 255.29080200]
[214.44151306 240.39375305]
[217.61846924 225.49989319]
[205.46513367 216.70805359]
[193.31179810 207.91621399]
[181.15846252 199.12437439]
[169.00514221 190.33253479]
[173.79490662 204.54724121]
[172.06082153 219.44667053]
[164.13449097 232.18139648]
[151.53178406 240.31600952]
[136.66288757 242.29479980]
[122.37135315 237.73936462]
[111.39034271 227.52087402]
[105.81990814 213.59355164]
[106.72534180 198.62091064]
[113.93349457 185.46633911]
[126.06585693 176.64558411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[5 114]
[6 113]
[7 33]
[8 32]
[9 31]
[15 28]
[16 27]
[17 26]
[18 25]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[54 65]
[55 64]
[56 63]
[57 62]
[82 112]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[93 101]
[94 100]
[95 99]
[119 141]
[120 140]
[121 139]
[122 138]
[123 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
