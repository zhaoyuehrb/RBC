%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:48:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGGGGGAUCCAGGCAGACAUGCAAACCCUCAGGCAAGAGGCUGCACGGCCCUGUAUCCCCUCGGGGACCCUCGAGGCCAGCUUCCCAGCACCGCUGUACAGCGAUGACUACCUGUCCC\
) } def
/len { sequence length } bind def

/coor [
[142.53781128 121.23303223]
[138.78521729 119.39611816]
[135.55545044 116.09701538]
[120.95648193 112.65169525]
[106.35752106 109.20638275]
[91.71540070 105.94931030]
[77.03256989 102.88103485]
[62.34973526 99.81275177]
[47.66689682 96.74446869]
[32.98406219 93.67619324]
[18.30122757 90.60791016]
[3.21017003 95.35875702]
[-7.66531181 85.18166351]
[-22.34814644 82.11338806]
[-37.03098297 79.04510498]
[-51.75210571 76.16611481]
[-66.50907135 73.47690582]
[-73.63557434 81.69223785]
[-83.48197937 86.11520386]
[-94.19397736 85.98791504]
[-103.78559113 81.40245056]
[-110.50730896 73.27106476]
[-113.16516876 63.14558411]
[-127.67058563 59.32551956]
[-142.17599487 55.50545120]
[-156.68141174 51.68538284]
[-165.87666321 57.77035904]
[-176.68177795 57.72268295]
[-185.45625305 51.80381393]
[-189.37977600 42.21217346]
[-203.66929626 37.65045166]
[-217.95883179 33.08872986]
[-232.24836731 28.52700615]
[-246.17625427 35.99624634]
[-261.28195190 31.34937286]
[-268.60351562 17.34329605]
[-263.79721069 2.28757215]
[-249.71449280 -4.88550615]
[-234.71043396 0.07972202]
[-227.68664551 14.23747540]
[-213.39710999 18.79919815]
[-199.10757446 23.36091995]
[-184.81805420 27.92264175]
[-166.38044739 22.33329773]
[-152.86134338 37.17996979]
[-138.35592651 41.00003433]
[-123.85051727 44.82010269]
[-109.34510040 48.64017105]
[-93.44089508 37.56851196]
[-74.18840027 41.64207077]
[-63.81986237 58.71993637]
[-49.06289291 61.40914917]
[-41.83277893 59.49016953]
[-33.96269989 64.36226654]
[-19.27986526 67.43054962]
[-4.59703064 70.49883270]
[9.44381237 65.52851868]
[21.36950874 75.92507172]
[36.05234528 78.99335480]
[50.73517990 82.06163788]
[65.41801453 85.12991333]
[80.10085297 88.19819641]
[94.78368378 91.26647949]
[102.79452515 89.69161987]
[109.80283356 94.60741425]
[124.40180206 98.05273438]
[139.00076294 101.49804688]
[153.75773621 104.18726349]
[168.63357544 106.11323547]
[183.50941467 108.03920746]
[198.38525391 109.96518707]
[206.33351135 98.37670898]
[218.45454407 91.39915466]
[232.33488464 90.35559845]
[245.23924255 95.39408875]
[254.64953613 105.46978760]
[258.75625610 118.56108093]
[273.57757568 120.86943817]
[283.76687622 107.91926575]
[298.99664307 101.87677002]
[315.10794067 104.29094696]
[327.75177002 114.41515350]
[333.56280518 129.43440247]
[348.43865967 131.36036682]
[363.31448364 133.28634644]
[373.98959351 122.18010712]
[388.98220825 119.52037048]
[402.50622559 126.12077332]
[409.46707153 139.26171875]
[424.34292603 141.18769836]
[439.21875000 143.11367798]
[454.09460449 145.03964233]
[470.57894897 141.07707214]
[478.95001221 155.82028198]
[467.10031128 167.94549561]
[452.16860962 159.91548157]
[437.29278564 157.98951721]
[422.41693115 156.06353760]
[407.54110718 154.13755798]
[397.46313477 165.07249451]
[382.70413208 168.01109314]
[368.88317871 161.62086487]
[361.38851929 148.16218567]
[346.51266479 146.23620605]
[331.63684082 144.31024170]
[324.03494263 155.73207092]
[312.18365479 162.77621460]
[298.38534546 164.00733948]
[285.34979248 159.12600708]
[275.66189575 149.03884888]
[271.26919556 135.69075012]
[256.44787598 133.38240051]
[246.67074585 146.17901611]
[231.70121765 152.36599731]
[215.55722046 150.18110657]
[202.62316895 140.12290955]
[196.45927429 124.84102631]
[181.58343506 122.91505432]
[166.70759583 120.98907471]
[151.83175659 119.06310272]
[149.47998047 120.78863525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[13 56]
[14 55]
[15 54]
[16 52]
[17 51]
[23 48]
[24 47]
[25 46]
[26 45]
[30 43]
[31 42]
[32 41]
[33 40]
[68 120]
[69 119]
[70 118]
[71 117]
[77 112]
[78 111]
[83 105]
[84 104]
[85 103]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
