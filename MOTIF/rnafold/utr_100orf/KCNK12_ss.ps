%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUCCCGCAGCCCCCGGCCCCCGCCCCGCCGUAGCCGCCGCCGCCUGCCGCGCCCCUCCUGCUGCUGCUGCUGCUGCCGCCGUUCGCACCUCAACG\
) } def
/len { sequence length } bind def

/coor [
[50.62506104 252.79800415]
[43.13019943 239.80467224]
[39.67855835 225.20719910]
[40.56040192 210.23313904]
[45.70156479 196.14170837]
[54.66971970 184.11788940]
[66.71070099 175.17279053]
[80.81196594 170.05865479]
[95.78768158 169.20550537]
[110.37850952 172.68511963]
[123.35382843 180.20198059]
[117.88405609 166.23483276]
[112.41428375 152.26766968]
[106.94451141 138.30050659]
[101.47473145 124.33334351]
[95.30369568 123.92135620]
[89.43493652 121.96965790]
[84.24620056 118.60387421]
[80.07146454 114.04064941]
[77.17943573 108.57369232]
[62.19575882 109.27329254]
[47.21208191 109.97290039]
[33.70750809 119.27658844]
[19.01622581 111.98973846]
[18.25136185 95.60843658]
[32.19974518 86.98435974]
[46.51247406 94.98922729]
[61.49615097 94.28961945]
[76.47982788 93.59001160]
[80.27095032 85.68039703]
[86.61614990 79.62454987]
[94.69397736 76.20645905]
[96.09166718 61.27172089]
[89.67391968 46.81063080]
[98.56347656 34.85968781]
[99.96116638 19.92494583]
[101.35885620 4.99020624]
[102.75654602 -9.94453430]
[104.15423584 -24.87927437]
[103.68773651 -39.87201691]
[101.36426544 -54.69097519]
[99.04078674 -69.50993347]
[89.25925446 -81.94504547]
[94.93173981 -95.71720123]
[92.60826111 -110.53615570]
[80.54298401 -121.11011505]
[81.43136597 -137.12855530]
[94.59191132 -146.30349731]
[109.92897797 -141.59671021]
[115.67728424 -126.61884308]
[107.42722321 -112.85963440]
[109.75069427 -98.04067230]
[119.36603546 -86.66551208]
[113.85974884 -71.83340454]
[116.18321991 -57.01444626]
[118.50669098 -42.19549179]
[127.71356201 -54.03751755]
[142.05448914 -58.43496704]
[156.31703186 -53.78951645]
[165.31718445 -41.78963089]
[165.78369141 -26.79688644]
[157.54699707 -14.26066589]
[143.60086060 -8.73748302]
[129.01428223 -12.23483753]
[119.08897400 -23.48158455]
[117.69128418 -8.54684544]
[116.29359436 6.38789511]
[114.89590454 21.32263565]
[113.49821472 36.25737381]
[120.01593781 49.65023041]
[111.02641296 62.66940689]
[109.62872314 77.60414886]
[124.13957214 96.59889984]
[115.44189453 118.86357117]
[120.91166687 132.83073425]
[126.38143921 146.79789734]
[131.85121155 160.76506042]
[137.32098389 174.73220825]
[146.62112427 186.50112915]
[158.94546509 195.05160522]
[171.26980591 203.60209656]
[185.87457275 198.35995483]
[200.76188660 202.73574829]
[210.20726013 215.04690552]
[210.57875061 230.55952454]
[201.73352051 243.30870056]
[187.07272339 248.39210510]
[172.23376465 243.85507202]
[162.92250061 231.44216919]
[162.71931458 215.92643738]
[150.39498901 207.37594604]
[138.07064819 198.82546997]
[142.38497925 213.19161987]
[142.39593506 228.19161987]
[138.10258484 242.56405640]
[129.86596680 255.10032654]
[118.37872314 264.74621582]
[104.60684967 270.69058228]
[89.70845795 272.43353271]
[74.93639374 269.82852173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[20 29]
[21 28]
[22 27]
[32 72]
[33 71]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 56]
[41 55]
[42 54]
[44 52]
[45 51]
[79 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
