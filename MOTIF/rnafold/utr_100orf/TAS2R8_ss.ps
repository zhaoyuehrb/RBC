%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCAGUCCUGCAGAUAACAUCUUUAUAAUCCUAAUAACUGGAGAAUUCAUACUAGGAAUAUUGGGGAAUGGAUACAUUGCACUAGUCAACUGGAUUG\
) } def
/len { sequence length } bind def

/coor [
[116.47393799 306.64886475]
[103.75185394 316.02563477]
[88.13831329 313.57757568]
[78.89656067 300.75708008]
[81.50955200 285.17028809]
[94.42705536 276.06460571]
[96.75052643 261.24563599]
[99.07400513 246.42669678]
[101.39747620 231.60772705]
[103.72094727 216.78877258]
[106.04441833 201.96981812]
[106.04441833 186.96981812]
[103.72094727 172.15086365]
[101.39747620 157.33190918]
[99.07400513 142.51295471]
[96.75052643 127.69399261]
[85.18858337 123.62495422]
[76.48857880 114.99097443]
[72.33156586 103.46036530]
[73.52079010 91.26113129]
[79.82646179 80.75045776]
[90.03016663 73.95928192]
[88.63248444 59.02454376]
[87.23479462 44.08980560]
[85.83710480 29.15506363]
[74.83487701 24.99135971]
[66.27877808 16.99390221]
[61.42602921 6.39186668]
[60.96908951 -5.20705748]
[64.93709564 -16.06042862]
[72.69741058 -24.55281448]
[83.05613708 -29.43620872]
[83.05613708 -44.43621063]
[83.05613708 -59.43621063]
[83.05613708 -74.43621063]
[83.05613708 -89.43621063]
[83.05613708 -104.43621063]
[83.05613708 -119.43621063]
[83.05613708 -134.43620300]
[72.11483765 -151.22526550]
[82.07376099 -167.67617798]
[81.14121246 -182.64717102]
[80.20867157 -197.61814880]
[79.27612305 -212.58914185]
[65.48770142 -219.35485840]
[56.94276810 -232.11727905]
[55.93986511 -247.44340515]
[62.74877167 -261.21054077]
[75.53792572 -269.71542358]
[90.86711121 -270.67028809]
[104.61284637 -263.81826782]
[113.07760620 -251.00251770]
[113.98440552 -235.67041016]
[107.08932495 -221.94622803]
[94.24710846 -213.52168274]
[95.17965698 -198.55068970]
[96.11219788 -183.57971191]
[97.04473877 -168.60873413]
[105.43857574 -162.41035461]
[109.01854706 -152.37351990]
[106.33286285 -141.83227539]
[98.05613708 -134.43620300]
[98.05613708 -119.43621063]
[98.05613708 -104.43621063]
[98.05613708 -89.43621063]
[98.05613708 -74.43621063]
[98.05613708 -59.43621063]
[98.05613708 -44.43621063]
[98.05613708 -29.43620872]
[113.70773315 -19.56165695]
[120.49337006 -2.18688655]
[115.60034180 15.96462154]
[100.77184296 27.75737572]
[102.16953278 42.69211578]
[103.56722260 57.62685776]
[104.96491241 72.56159973]
[120.24772644 80.82851410]
[127.66843414 96.53963470]
[124.34560394 113.59439850]
[111.56948853 125.37052155]
[113.89295959 140.18948364]
[116.21643066 155.00843811]
[118.53990173 169.82739258]
[120.86338043 184.64634705]
[129.22985840 172.19636536]
[142.60929871 165.41473389]
[157.59678650 166.02729797]
[170.37815857 173.87818909]
[177.70071411 186.96940613]
[177.70092773 201.96940613]
[170.37875366 215.06085205]
[157.59759521 222.91209412]
[142.61012268 223.52508545]
[129.23048401 216.74383545]
[120.86338043 204.29328918]
[118.53990173 219.11224365]
[116.21643066 233.93121338]
[113.89295959 248.75016785]
[111.56948853 263.56912231]
[109.24600983 278.38806152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[22 76]
[23 75]
[24 74]
[25 73]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[41 58]
[42 57]
[43 56]
[44 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
