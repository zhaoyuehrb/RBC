%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCUGUGGAAGCAGAUAAGGAGGAAGAGAAUUCCCAGGAGCCAUGUCAGCCUCCAAUAUCACCUUAACACAUCCAACUGCCUUCUUGUUGGUGGGGAUUCCAGGCCUGGAACACCUGCACAUCUGGAUCUCCAUCCCUUUCU\
) } def
/len { sequence length } bind def

/coor [
[98.67010498 157.53132629]
[97.05937958 142.61805725]
[95.44866180 127.70478821]
[86.78044128 124.76919556]
[79.51683807 119.20182037]
[74.42961884 111.59420013]
[72.05931854 102.75466919]
[57.28101730 100.18527222]
[42.50271606 97.61587524]
[27.72441292 95.04647827]
[10.63022327 101.80187988]
[-2.42286825 90.11856079]
[-17.25303268 87.86772919]
[-32.08319473 85.61689758]
[-44.72505188 94.71751404]
[-59.73288345 92.22359467]
[-68.33102417 80.11543274]
[-83.16118622 77.86460114]
[-97.99134827 75.61376953]
[-112.82151794 73.36293793]
[-129.76640320 80.48457336]
[-143.06784058 69.08481598]
[-157.94300842 67.15359497]
[-172.81816101 65.22237396]
[-187.69332886 63.29114914]
[-202.56848145 61.35992432]
[-215.01161194 70.73043823]
[-230.06962585 68.55999756]
[-238.92628479 56.63964081]
[-253.80145264 54.70841599]
[-265.79486084 68.22637939]
[-283.33718872 71.86231995]
[-299.43209839 64.35696411]
[-307.77429199 48.85675049]
[-322.71875000 47.56727600]
[-337.66323853 46.27780533]
[-352.28027344 53.71247864]
[-365.87799072 44.54549026]
[-364.46826172 28.20704842]
[-349.50125122 21.50474358]
[-336.37374878 31.33333206]
[-321.42929077 32.62280273]
[-306.48483276 33.91227722]
[-299.92645264 23.60009003]
[-289.52935791 17.04031563]
[-277.25439453 15.54325676]
[-265.44793701 19.45745277]
[-256.39352417 28.09105682]
[-251.87022400 39.83325577]
[-236.99507141 41.76448059]
[-225.38810730 32.50088501]
[-210.27507019 34.24751663]
[-200.63726807 46.48476791]
[-185.76210022 48.41598892]
[-170.88694763 50.34720993]
[-156.01177979 52.27843475]
[-141.13662720 54.20965576]
[-131.32073975 47.06304169]
[-118.87144470 48.59885788]
[-110.57068634 58.53277206]
[-95.74051666 60.78360367]
[-80.91035461 63.03443527]
[-66.08019257 65.28526306]
[-54.27660751 56.27354813]
[-39.20465088 58.34495163]
[-29.83236504 70.78673553]
[-15.00220108 73.03756714]
[-0.17203724 75.28839874]
[9.79533482 68.35463715]
[22.20870590 70.15795898]
[30.29380989 80.26817322]
[45.07211304 82.83757019]
[59.85041428 85.40696716]
[74.62871552 87.97636414]
[91.40950775 70.11326599]
[118.36667633 71.24810791]
[125.77330780 58.20426941]
[133.17994690 45.16043091]
[140.58657837 32.11658859]
[147.99320984 19.07274818]
[140.73490906 5.45949411]
[142.01150513 -9.91496086]
[151.41561890 -22.14468384]
[165.94644165 -27.32721519]
[180.96723938 -23.80882835]
[191.68493652 -12.71222591]
[194.67955017 2.42170525]
[188.99549866 16.76378250]
[176.44656372 25.73750114]
[161.03704834 26.47938156]
[153.63041687 39.52322388]
[146.22378540 52.56706238]
[138.81715393 65.61090088]
[131.41050720 78.65474701]
[137.22523499 92.48185730]
[151.72795105 96.31215668]
[166.23066711 100.14245605]
[180.73338318 103.97275543]
[195.23609924 107.80305481]
[209.73881531 111.63335419]
[224.24153137 115.46365356]
[233.41236877 114.63020325]
[239.01335144 119.53553009]
[253.43031311 123.67698669]
[267.84725952 127.81844330]
[282.26419067 131.95989990]
[296.84597778 135.47726440]
[311.56558228 138.36404419]
[322.73214722 131.81477356]
[334.96926880 134.57101440]
[341.79696655 144.61132812]
[356.45104980 147.81413269]
[371.90362549 142.32325745]
[384.20794678 153.16462708]
[380.70639038 169.18559265]
[365.00103760 173.90513611]
[353.24822998 162.46821594]
[338.59414673 159.26539612]
[322.22558594 165.50665283]
[308.67880249 153.08363342]
[293.95919800 150.19686890]
[291.52313232 151.71862793]
[288.31625366 152.33090210]
[284.69552612 151.72691345]
[281.12515259 149.73985291]
[278.12274170 146.37684631]
[263.70581055 142.23538208]
[249.28884888 138.09393311]
[234.87190247 133.95248413]
[220.41123962 129.96636963]
[205.90852356 126.13607025]
[191.40580750 122.30577087]
[176.90307617 118.47547150]
[162.40036011 114.64517212]
[147.89764404 110.81487274]
[133.39492798 106.98457336]
[123.79446411 120.02090454]
[110.36193085 126.09407043]
[111.97264862 141.00733948]
[113.58336639 155.92060852]
[126.04971313 165.63481140]
[127.91283417 181.32890320]
[118.06736755 193.69183350]
[102.35446167 195.38893127]
[90.09629822 185.41329956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 140]
[2 139]
[3 138]
[7 74]
[8 73]
[9 72]
[10 71]
[12 68]
[13 67]
[14 66]
[17 63]
[18 62]
[19 61]
[20 60]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[29 50]
[30 49]
[34 43]
[35 42]
[36 41]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[95 136]
[96 135]
[97 134]
[98 133]
[99 132]
[100 131]
[101 130]
[103 129]
[104 128]
[105 127]
[106 126]
[107 121]
[108 120]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
