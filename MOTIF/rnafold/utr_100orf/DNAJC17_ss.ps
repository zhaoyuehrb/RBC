%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUGUAGUACGAAUCCGUCAGGCCGGAACCAUGGCAGUGACCAAGGAGCUCUUACAGAUGGACCUGUACGCGCUGCUAGGCAUUGAGGAGAAGGCAGCGGACAAAGAGGUAAAGAAGGCGUAUAGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[-71.92943573 180.42362976]
[-83.48558807 182.61831665]
[-95.23607635 182.29818726]
[-106.64032745 179.48130798]
[-117.17441559 174.30053711]
[-126.35511017 166.99729919]
[-133.76208496 157.91021729]
[-139.05711365 147.45953369]
[-141.99957275 136.12763977]
[-156.99853516 136.30479431]
[-171.99748230 136.48194885]
[-185.70532227 144.38169861]
[-198.52308655 136.79524231]
[-213.52203369 136.97239685]
[-229.07785034 146.74327087]
[-244.05287170 137.67207336]
[-259.04345703 138.20343018]
[-274.03402710 138.73478699]
[-288.99639893 139.79684448]
[-303.91174316 141.38825989]
[-318.82705688 142.97967529]
[-333.74240112 144.57109070]
[-348.30703735 155.76597595]
[-364.07104492 148.14802551]
[-378.94464111 150.09129333]
[-393.81823730 152.03454590]
[-408.69183350 153.97779846]
[-418.12530518 166.65789795]
[-433.77389526 168.87092590]
[-446.35354614 159.30390930]
[-448.40100098 143.63281250]
[-438.70153809 131.15499878]
[-423.00964355 129.27334595]
[-410.63510132 139.10420227]
[-395.76150513 137.16094971]
[-380.88790894 135.21769714]
[-366.01431274 133.27444458]
[-358.34417725 123.84345245]
[-345.90039062 122.15099335]
[-335.33383179 129.65576172]
[-320.41848755 128.06434631]
[-305.50314331 126.47292328]
[-290.58779907 124.88150787]
[-288.06689453 122.28845215]
[-284.12646484 120.83592987]
[-279.33978271 121.19503784]
[-274.56539917 123.74420929]
[-259.57479858 123.21284485]
[-244.58422852 122.68148041]
[-236.05854797 114.01618958]
[-223.51058960 113.50527191]
[-213.69918823 121.97344208]
[-198.70022583 121.79629517]
[-186.06523132 113.90921783]
[-172.17463684 121.48299408]
[-157.17568970 121.30584717]
[-142.17672729 121.12869263]
[-136.83078003 103.40858459]
[-125.85848999 88.47555542]
[-110.50931549 78.05462646]
[-92.53935242 73.35561371]
[-74.01042938 74.93269348]
[-57.05350876 82.61905670]
[-43.62364578 95.54447174]
[-35.27456284 112.23372650]
[-20.45101547 109.93972015]
[-5.62747002 107.64570618]
[9.19607639 105.35169983]
[24.01962280 103.05768585]
[38.84317017 100.76367950]
[53.66671371 98.46967316]
[68.49025726 96.17565918]
[83.31380463 93.88165283]
[101.31739044 54.93526840]
[113.67761230 46.43674088]
[126.03782654 37.93821716]
[138.39805603 29.43968964]
[150.75827026 20.94116211]
[163.11848450 12.44263554]
[159.58934021 -2.31912327]
[161.63494873 -17.35840416]
[168.97865295 -30.64126396]
[180.62728882 -40.37131119]
[195.00546265 -45.23263168]
[210.16865540 -44.56777191]
[224.06616211 -38.46665192]
[234.81846619 -27.75439453]
[240.97140503 -13.87974834]
[241.69282532 1.28085768]
[236.88519287 15.67707539]
[227.19868469 27.36193275]
[213.94331360 34.75515366]
[198.91177368 36.85685730]
[184.13694763 33.38281631]
[171.61701965 24.80285645]
[159.25679016 33.30138397]
[146.89657593 41.79990768]
[134.53636169 50.29843521]
[122.17613220 58.79696274]
[109.81591797 67.29548645]
[110.69964600 74.74324036]
[112.46710205 89.63874817]
[113.35083008 97.08650208]
[127.35665131 102.45650482]
[141.68821716 95.79452515]
[156.50401306 101.29613495]
[163.01409912 115.69732666]
[157.35615540 130.45413208]
[142.88694763 136.81159973]
[128.19078064 130.99795532]
[121.98664856 116.46232605]
[107.98082733 111.09232330]
[116.80054474 123.22544098]
[116.34777832 138.21861267]
[106.81200409 149.79742432]
[92.18378448 153.11634827]
[78.58480072 146.78645325]
[71.70599365 133.45671082]
[74.42604828 118.70539093]
[85.60781860 108.70520020]
[70.78427124 110.99920654]
[55.96072388 113.29321289]
[41.13717651 115.58722687]
[26.31363106 117.88123322]
[11.49008560 120.17524719]
[-3.33346057 122.46925354]
[-18.15700722 124.76326752]
[-32.98055267 127.05727386]
[-34.08444595 138.81544495]
[-37.66819000 150.06019592]
[-43.56369019 160.27514648]
[-51.49678040 168.99194336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 57]
[10 56]
[11 55]
[13 53]
[14 52]
[16 49]
[17 48]
[18 47]
[19 43]
[20 42]
[21 41]
[22 40]
[24 37]
[25 36]
[26 35]
[27 34]
[65 128]
[66 127]
[67 126]
[68 125]
[69 124]
[70 123]
[71 122]
[72 121]
[73 120]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
