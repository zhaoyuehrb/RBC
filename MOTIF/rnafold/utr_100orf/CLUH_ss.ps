%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCCCCGGCCGACAGCGCCCGGGAACACGGCUCGCAGGCCGGGGGCAAGGGGCGGCCGGGCGCGGCCGAGCUGCCAUCAGUCAUGCUCUUAAACGGGGACUGCCCAGAGAGCCUGAAGAAGGAGGCGGCGGCGGCCGAGCCACCCAGGGAAAAUGGGCUUGACGAGGCCGGCCCGGGAGAUG\
) } def
/len { sequence length } bind def

/coor [
[91.26295471 113.51984406]
[78.18939209 120.87388611]
[65.11582947 128.22792053]
[52.04226303 135.58197021]
[38.96870041 142.93600464]
[25.89513588 150.29005432]
[12.82157135 157.64408875]
[-0.25199345 164.99812317]
[-13.32555771 172.35217285]
[-26.39912224 179.70620728]
[-25.74339104 188.01664734]
[-27.55726624 196.11856079]
[-31.66037369 203.29737854]
[-37.67134857 208.92599487]
[-45.04320908 212.51948547]
[-53.11310959 213.77691650]
[-61.16190720 212.60633850]
[-68.47827148 209.13134766]
[-74.42153931 203.67828369]
[-88.16876984 209.67941284]
[-97.72088623 222.29161072]
[-112.48070526 220.29238892]
[-126.22793579 226.29351807]
[-139.97517395 232.29464722]
[-153.72241211 238.29577637]
[-167.46963501 244.29690552]
[-166.49757385 259.42407227]
[-170.76091003 273.97055054]
[-179.74481201 286.17974854]
[-192.36444092 294.57742310]
[-207.09591675 298.14944458]
[-222.16033936 296.46453857]
[-235.73860168 289.72610474]
[-246.19107056 278.74786377]
[-252.25556946 264.85549927]
[-253.19975281 249.72656250]
[-248.90962219 235.18797302]
[-239.90322876 222.99533081]
[-227.26814270 214.62094116]
[-212.53010559 211.07604980]
[-197.46881104 212.78874207]
[-183.90298462 219.55218506]
[-173.47076416 230.54966736]
[-159.72354126 224.54853821]
[-145.97630310 218.54740906]
[-132.22906494 212.54627991]
[-118.48183441 206.54515076]
[-109.91301727 194.36218262]
[-94.16990662 195.93217468]
[-80.42266846 189.93104553]
[-74.57099152 168.80572510]
[-54.79034805 158.73826599]
[-33.75316238 166.63264465]
[-20.67959785 159.27861023]
[-7.60603428 151.92456055]
[5.46753025 144.57052612]
[18.54109383 137.21649170]
[31.61465836 129.86244202]
[44.68822479 122.50839996]
[57.76178741 115.15436554]
[70.83535004 107.80032349]
[83.90891266 100.44628143]
[93.63626099 89.02792358]
[98.81914520 74.95178986]
[104.00203705 60.87564850]
[101.50959778 45.25200272]
[113.16795349 35.98205185]
[118.35084534 21.90591431]
[123.53372955 7.82977629]
[128.71662903 -6.24636173]
[133.89950562 -20.32250023]
[139.08239746 -34.39863968]
[135.52534485 -52.45615005]
[149.41703796 -63.16485596]
[154.36271667 -77.32607269]
[159.30841064 -91.48729706]
[164.25410461 -105.64851379]
[169.19979858 -119.80973816]
[174.14547729 -133.97096252]
[171.39093018 -149.55052185]
[182.89192200 -159.01501465]
[187.83760071 -173.17623901]
[178.95790100 -189.89297485]
[184.99275208 -207.49723816]
[201.67921448 -214.98893738]
[206.14637756 -229.30830383]
[210.61355591 -243.62767029]
[207.33718872 -259.10592651]
[218.51373291 -268.95141602]
[222.98089600 -283.27081299]
[227.44807434 -297.59017944]
[231.91525269 -311.90954590]
[236.38241577 -326.22891235]
[240.84959412 -340.54827881]
[235.37692261 -348.27218628]
[234.10328674 -357.51324463]
[237.19009399 -366.17001343]
[243.82153320 -372.33267212]
[252.41537476 -374.70425415]
[257.59826660 -388.78039551]
[262.78115845 -402.85653687]
[257.38787842 -417.96585083]
[265.96032715 -431.52658081]
[281.92242432 -433.13604736]
[293.02944946 -421.55960083]
[290.76101685 -405.67773438]
[276.85729980 -397.67364502]
[271.67440796 -383.59750366]
[266.49151611 -369.52136230]
[271.79013062 -349.58563232]
[255.16896057 -336.08111572]
[250.70179749 -321.76174927]
[246.23461914 -307.44238281]
[241.76744080 -293.12298584]
[237.30027771 -278.80361938]
[232.83309937 -264.48425293]
[236.42898560 -250.03022766]
[224.93292236 -239.16050720]
[220.46574402 -224.84114075]
[215.99858093 -210.52175903]
[223.37454224 -201.78576660]
[225.63146973 -190.45497131]
[222.09312439 -179.33076477]
[213.53083801 -171.22080994]
[201.99882507 -168.23054504]
[197.05313110 -154.06933594]
[200.16143799 -139.50267029]
[188.30670166 -129.02526855]
[183.36100769 -114.86404419]
[178.41532898 -100.70282745]
[173.46963501 -86.54160309]
[168.52394104 -72.38038635]
[163.57824707 -58.21916580]
[168.55111694 -47.17771149]
[164.53057861 -35.33063507]
[153.15853882 -29.21574974]
[147.97564697 -15.13961124]
[142.79275513 -1.06347299]
[137.60987854 13.01266479]
[132.42698669 27.08880234]
[127.24409485 41.16493988]
[130.10723877 55.78176880]
[118.07817078 66.05854034]
[112.89528656 80.13467407]
[107.71239471 94.21081543]
[117.02210999 96.62112427]
[124.27333832 106.24980927]
[134.74545288 116.98920441]
[145.21757507 127.72860718]
[153.46762085 131.69920349]
[155.77352905 138.73748779]
[166.06375122 149.65129089]
[176.35398865 160.56509399]
[185.76493835 158.02005005]
[195.39749146 159.08300781]
[203.92439270 163.56484985]
[210.18637085 170.80841064]
[213.34959412 179.78437805]
[213.01666260 189.23757935]
[209.27593994 197.86236572]
[218.81008911 209.44252014]
[228.34423828 221.02267456]
[237.87838745 232.60282898]
[247.41253662 244.18298340]
[262.95111084 249.42556763]
[265.91445923 265.55474854]
[253.25415039 275.97821045]
[237.99401855 269.97317505]
[235.83238220 253.71713257]
[226.29823303 242.13697815]
[216.76408386 230.55682373]
[207.22993469 218.97666931]
[197.69578552 207.39651489]
[177.27449036 207.17517090]
[163.42880249 191.76679993]
[165.44018555 170.85533142]
[155.14994812 159.94151306]
[144.85972595 149.02770996]
[134.47817993 138.20072937]
[124.00605774 127.46132660]
[113.53394318 116.72193146]
[120.61148071 129.94721985]
[116.99349976 144.50436401]
[104.54796600 152.87745667]
[89.70053864 150.74346924]
[80.11697388 139.20416260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[19 50]
[20 49]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[63 145]
[64 144]
[65 143]
[67 141]
[68 140]
[69 139]
[70 138]
[71 137]
[72 136]
[74 133]
[75 132]
[76 131]
[77 130]
[78 129]
[79 128]
[81 126]
[82 125]
[85 120]
[86 119]
[87 118]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
[99 109]
[100 108]
[101 107]
[147 181]
[148 180]
[149 179]
[151 178]
[152 177]
[153 176]
[160 173]
[161 172]
[162 171]
[163 170]
[164 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
