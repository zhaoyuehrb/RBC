%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUUAUUCAUCAUUCCUUAGAAUUUGGGUCUCUUUCAUCUUCGCACUUGUACAGCACCAAGCUCAGCCCAGGGAGCUCAUGUAUCCAUUUUGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[56.72111130 119.48685455]
[42.24233627 123.40668488]
[27.76356125 127.32651520]
[13.28478527 131.24633789]
[-1.19399071 135.16616821]
[-9.82274914 151.87391663]
[-27.57065582 157.05921936]
[-43.29295349 147.94033813]
[-57.50002670 152.75273132]
[-71.70709991 157.56512451]
[-85.91417694 162.37750244]
[-100.12124634 167.18989563]
[-106.60101318 178.47569275]
[-118.66991425 182.13169861]
[-129.60067749 176.69694519]
[-143.95053101 181.06517029]
[-158.30039978 185.43339539]
[-172.65026855 189.80160522]
[-183.44758606 202.14462280]
[-199.48095703 198.70036316]
[-204.25663757 183.01199341]
[-192.86180115 171.21836853]
[-177.01849365 175.45175171]
[-162.66862488 171.08352661]
[-148.31875610 166.71530151]
[-133.96888733 162.34709167]
[-122.80591583 148.90501404]
[-104.93363190 152.98281860]
[-90.72656250 148.17042542]
[-76.51948547 143.35804749]
[-62.31241226 138.54565430]
[-48.10533905 133.73327637]
[-45.31290817 122.45888519]
[-37.28249359 113.90040588]
[-25.97780418 110.32352448]
[-14.24891853 112.75405884]
[-5.11381960 120.68740082]
[9.36495590 116.76757050]
[23.84373093 112.84774017]
[38.32250595 108.92790985]
[52.80128098 105.00807953]
[52.94099808 93.81533051]
[55.69806290 82.96656036]
[60.91913223 73.06516266]
[68.31381989 64.66183472]
[77.47084045 58.22396851]
[87.88089752 54.10961914]
[98.96500397 52.54761887]
[110.10667419 53.62484741]
[115.57644653 39.65768433]
[121.04621887 25.69052505]
[126.51599121 11.72336292]
[118.03956604 -1.27393770]
[118.85523987 -16.76955986]
[128.64936829 -28.80512047]
[143.65589905 -32.75270081]
[158.10453796 -27.09437561]
[166.43946838 -14.00588608]
[165.45574951 1.47997558]
[155.53163147 13.40858078]
[140.48315430 17.19313622]
[135.01338196 31.16029739]
[129.54360962 45.12745667]
[124.07383728 59.09461975]
[133.98806763 66.86978149]
[141.50730896 76.97949219]
[146.10169983 88.71136475]
[147.44749451 101.23869324]
[145.44989014 113.67873383]
[158.94992065 120.21700287]
[172.44996643 126.75526428]
[188.00273132 117.72814178]
[205.72218323 119.69042206]
[218.69548035 131.69137573]
[221.97149658 148.90022278]
[235.85191345 154.58654785]
[249.73231506 160.27287292]
[263.69946289 165.74264526]
[277.75000000 170.99455261]
[293.82586670 167.75433350]
[304.46545410 180.23356628]
[298.72366333 195.59468079]
[282.50717163 198.03549194]
[272.49810791 185.04508972]
[258.44757080 179.79318237]
[250.94796753 180.41070557]
[244.04598999 174.15328979]
[230.16558838 168.46696472]
[216.28517151 162.78063965]
[206.85118103 170.73200989]
[194.84313965 173.86811829]
[182.58273315 171.51779175]
[172.46836853 164.07698059]
[166.50607300 152.94361877]
[165.91169739 140.25531006]
[152.41165161 133.71704102]
[138.91162109 127.17877197]
[124.37554169 140.72631836]
[105.56732941 147.13601685]
[85.78336334 145.28451538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[15 26]
[16 25]
[17 24]
[18 23]
[49 64]
[50 63]
[51 62]
[52 61]
[69 97]
[70 96]
[71 95]
[75 89]
[76 88]
[77 87]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
