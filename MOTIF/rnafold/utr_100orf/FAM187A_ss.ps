%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCACCUGGCCCUCACCACUGUGCUCCUGUGGGCAUGGGGGCUCCAGGCCUUUGAAAUUGUGGAGAAGGAAAACAUUUUUCAGAGGACCCCCUGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[27.99183083 198.54626465]
[12.03652287 198.63885498]
[-2.32798696 191.82713318]
[-13.80197525 201.48878479]
[-25.27596283 211.15043640]
[-36.74995041 220.81210327]
[-42.51665497 238.21302795]
[-59.79671478 240.80166626]
[-70.96467590 250.81547546]
[-82.13263702 260.82931519]
[-82.74212646 276.62182617]
[-94.39669800 287.29641724]
[-110.18190765 286.51998901]
[-120.73265839 274.75320435]
[-119.78939056 258.97708130]
[-107.91172028 248.55133057]
[-92.14646149 249.66134644]
[-80.97850037 239.64752197]
[-69.81053925 229.63369751]
[-68.79931641 217.46836853]
[-59.42184067 209.03701782]
[-46.41160583 209.33811951]
[-34.93761826 199.67645264]
[-23.46363068 190.01480103]
[-11.98964310 180.35314941]
[-16.10557365 167.00839233]
[-14.78749180 153.06192017]
[-8.20354176 140.64762878]
[2.66986966 131.67779541]
[16.19274330 127.54860687]
[30.30879974 128.92283630]
[42.85815430 135.62374878]
[54.62706757 126.32360077]
[66.39598083 117.02346039]
[78.16489410 107.72332001]
[89.93380737 98.42317200]
[93.89090729 91.22341919]
[102.21644592 89.02364349]
[114.26889801 80.09400940]
[126.32135773 71.16437531]
[138.37380981 62.23474503]
[150.42626953 53.30511093]
[149.58941650 45.97591400]
[151.15428162 38.82059097]
[154.91996765 32.59945297]
[160.45358276 27.96231270]
[167.13980103 25.38067245]
[174.24919128 25.09991074]
[181.01777649 27.11634254]
[186.72912598 31.18123627]
[200.22915649 24.64297104]
[213.72920227 18.10470390]
[227.22924805 11.56643867]
[240.72927856 5.02817202]
[254.22932434 -1.51009417]
[267.72937012 -8.04836082]
[281.22940063 -14.58662701]
[294.72943115 -21.12489319]
[299.75857544 -33.12759399]
[311.28045654 -38.25305939]
[322.80117798 -34.21681976]
[336.49801636 -40.33207703]
[350.19485474 -46.44733047]
[351.10101318 -61.72599030]
[359.01364136 -74.82746887]
[372.11450195 -82.74114990]
[387.39309692 -83.64852142]
[401.33850098 -77.34107208]
[410.74621582 -65.26821136]
[413.45434570 -50.20420074]
[408.84063721 -35.61063004]
[397.96527100 -24.84099960]
[383.32733154 -20.37009048]
[368.29049683 -23.22528458]
[356.31011963 -32.75048065]
[342.61328125 -26.63522720]
[328.91641235 -20.51997185]
[319.50787354 -5.79649353]
[301.26770020 -7.62485313]
[287.76766968 -1.08658695]
[274.26763916 5.45167923]
[260.76757812 11.98994541]
[247.26754761 18.52821159]
[233.76750183 25.06647873]
[220.26747131 31.60474396]
[206.76742554 38.14300919]
[193.26739502 44.68127823]
[183.20520020 65.54728699]
[159.35589600 65.35756683]
[147.30343628 74.28720093]
[135.25099182 83.21682739]
[123.19853210 92.14646149]
[111.14608002 101.07609558]
[99.23395538 110.19208527]
[87.46504211 119.49223328]
[75.69612885 128.79237366]
[63.92721176 138.09251404]
[52.15829849 147.39265442]
[55.83933640 163.15539551]
[52.33232117 178.89852905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[8 19]
[9 18]
[10 17]
[32 98]
[33 97]
[34 96]
[35 95]
[36 94]
[38 93]
[39 92]
[40 91]
[41 90]
[42 89]
[50 87]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[56 81]
[57 80]
[58 79]
[61 77]
[62 76]
[63 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
