%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGUUAACCCAGGGAAGGCAGUGGCAAGAUGGCGUCCCUGGAUCGGGUGAAGGUACUGGUGUUGGGAGACUCAGGUGUUGGGAAAUCUUCGUUAGUCCAUCUCCUAUGCCAAAAUCAAGUGCUGGGAA\
) } def
/len { sequence length } bind def

/coor [
[112.11717224 183.53749084]
[123.74438477 173.89463806]
[117.79707336 160.12403870]
[111.84976196 146.35343933]
[105.90245056 132.58282471]
[99.95513916 118.81223297]
[98.33457184 133.72442627]
[85.23934174 141.03982544]
[71.69152069 134.60113525]
[69.09413147 119.82772827]
[79.63343811 109.15415192]
[65.20027924 113.23873901]
[50.76711655 117.32332611]
[36.33395386 121.40791321]
[21.90079308 125.49250031]
[7.46763182 129.57708740]
[-6.96552896 133.66168213]
[-13.97379303 144.56692505]
[-26.15426254 147.63475037]
[-36.78805542 141.73925781]
[-51.31501007 145.47657776]
[-62.75219727 156.40823364]
[-77.00588226 152.08599854]
[-91.53283691 155.82331848]
[-99.35454559 169.55636597]
[-114.61794281 173.65567017]
[-128.26751709 165.68920898]
[-132.20523071 150.38331604]
[-124.09489441 136.81874084]
[-108.74823761 133.04307556]
[-95.27015686 141.29635620]
[-80.74319458 137.55905151]
[-70.34507751 126.89469147]
[-55.05232620 130.94961548]
[-40.52537155 127.21229553]
[-28.73631287 114.27026367]
[-11.05011749 119.22851562]
[3.38304377 115.14392853]
[17.81620407 111.05934143]
[32.24936676 106.97475433]
[46.68252563 102.89016724]
[61.11568832 98.80557251]
[75.54885101 94.72098541]
[82.44852448 87.92989349]
[90.38216400 85.27479553]
[97.39595032 86.37197113]
[102.02849579 90.04325104]
[109.88896179 77.26776886]
[117.74943542 64.49227905]
[118.39130402 48.68410110]
[131.65065002 41.89888382]
[139.51110840 29.12339783]
[140.15298462 13.31521702]
[153.41232300 6.52999973]
[161.27279663 -6.24548531]
[163.13526917 -15.29200554]
[169.47804260 -19.22988892]
[177.64260864 -31.81321144]
[185.80715942 -44.39653397]
[193.97171021 -56.97985840]
[202.13627625 -69.56317902]
[210.30082703 -82.14649963]
[218.46539307 -94.72982788]
[215.38587952 -109.99922180]
[223.84515381 -122.64418793]
[238.42115784 -125.48593140]
[246.58572388 -138.06925964]
[240.68238831 -150.58689880]
[241.75257874 -164.27636719]
[249.40745544 -175.54492188]
[261.54428101 -181.48867798]
[274.92297363 -180.64071655]
[283.38690186 -193.02464294]
[291.85086060 -205.40856934]
[300.31481934 -217.79249573]
[298.77526855 -233.76150513]
[310.40020752 -244.81771851]
[326.27200317 -242.47976685]
[334.21514893 -228.54112244]
[328.13632202 -213.69430542]
[312.69873047 -209.32853699]
[304.23477173 -196.94462585]
[295.77084351 -184.56069946]
[287.30688477 -172.17677307]
[293.32223511 -156.95188904]
[289.06961060 -140.97236633]
[276.02374268 -130.54464722]
[259.16903687 -129.90469360]
[251.00448608 -117.32137299]
[254.34858704 -102.85235596]
[246.24781799 -89.97476959]
[231.04870605 -86.56526947]
[222.88415527 -73.98194885]
[214.71958923 -61.39862442]
[206.55503845 -48.81529999]
[198.39048767 -36.23197556]
[190.22592163 -23.64865494]
[182.06137085 -11.06533146]
[174.04827881 1.61498427]
[166.18780518 14.39046955]
[166.10816956 29.28486252]
[152.28660583 36.98386765]
[144.42613220 49.75935364]
[144.34649658 64.65374756]
[130.52491760 72.35275269]
[122.66445160 85.12823486]
[114.80397797 97.90371704]
[113.72573853 112.86491394]
[119.67304993 126.63552094]
[125.62036133 140.40612793]
[131.56767273 154.17672729]
[137.51498413 167.94732666]
[152.50637817 166.09400940]
[167.41242981 168.54067993]
[181.02478027 175.08901978]
[192.23992920 185.20816040]
[200.14872742 198.07780457]
[204.11001587 212.65466309]
[203.80270386 227.75704956]
[199.25167847 242.16069031]
[190.82589722 254.69795227]
[179.20837402 264.35247803]
[165.34089661 270.34161377]
[150.34765625 272.17987061]
[135.44406128 269.71823120]
[121.83830261 263.15621948]
[110.63332367 253.02581787]
[102.73746490 240.14823914]
[98.79081726 225.56741333]
[99.11330414 210.46533203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[20 35]
[21 34]
[23 32]
[24 31]
[47 107]
[48 106]
[49 105]
[51 103]
[52 102]
[54 100]
[55 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[66 89]
[67 88]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
