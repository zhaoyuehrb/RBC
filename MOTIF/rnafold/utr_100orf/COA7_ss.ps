%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCCGGCUCACGUGACCGUCUUUGGGCCGGCGCGAACCAUGGCCGGCAUGGUGGACUUCCAGGAUGAGGAGCAGGUCAAGUCCUUUUUGGAGAACAUGGAGGUGGAGUGCAACUACCACUGCUACCACGAGAAGGACC\
) } def
/len { sequence length } bind def

/coor [
[73.17092896 123.32104492]
[61.93474579 133.25825500]
[50.80996323 143.32002258]
[39.79796219 153.50511169]
[28.78596115 163.69018555]
[17.77396011 173.87525940]
[6.76195908 184.06034851]
[-4.25004244 194.24542236]
[-15.26204395 204.43049622]
[-26.27404594 214.61557007]
[-37.28604507 224.80065918]
[-47.83340454 235.46617126]
[-57.89517593 246.59095764]
[-67.95694733 257.71572876]
[-70.87136841 273.85382080]
[-86.39396667 279.14352417]
[-98.55643463 268.14321899]
[-94.84705353 252.16909790]
[-79.08172607 247.65396118]
[-69.01995850 236.52919006]
[-58.95818329 225.40440369]
[-59.01146698 222.52456665]
[-57.88020706 219.45059204]
[-55.48459244 216.65148926]
[-51.92254639 214.61611938]
[-47.47112656 213.78865051]
[-36.45912552 203.60357666]
[-25.44712257 193.41850281]
[-14.43512058 183.23341370]
[-3.42311954 173.04833984]
[7.58888197 162.86326599]
[18.60088348 152.67817688]
[29.61288452 142.49310303]
[40.62488556 132.30802917]
[43.42214584 125.40130615]
[51.99753189 122.02207184]
[63.23371124 112.08486176]
[61.40014267 97.19734955]
[48.08855820 90.28347778]
[34.77696991 83.36959839]
[21.46538353 76.45572662]
[8.15379620 69.54185486]
[-5.15779018 62.62797928]
[-20.82592773 66.07602692]
[-33.19942856 55.86446762]
[-32.78640747 39.82672882]
[-19.90369415 30.26559830]
[-4.43380499 34.51555252]
[1.75608397 49.31639099]
[15.06767082 56.23026657]
[28.37925720 63.14413834]
[41.69084549 70.05801392]
[55.00242996 76.97188568]
[68.31401825 83.88576508]
[77.94181824 76.11369324]
[88.76709747 72.74546814]
[86.76779938 57.87930679]
[84.76849365 43.01314545]
[82.76918793 28.14698410]
[80.27424622 13.35592937]
[77.28646088 -1.34349597]
[74.29866791 -16.04292107]
[60.47203445 -23.34759331]
[54.62348557 -37.85029984]
[59.51452255 -52.70330429]
[72.83575439 -60.89347458]
[88.29729462 -58.55366135]
[98.59868622 -46.78865051]
[98.87591553 -31.15352631]
[88.99809265 -19.03071213]
[91.98588562 -4.33128595]
[94.97367096 10.36814022]
[97.77741241 12.63020897]
[99.58728027 16.39863014]
[99.69098663 21.17323112]
[97.63535309 26.14767838]
[99.63465118 41.01383972]
[101.63395691 55.88000488]
[103.63326263 70.74616241]
[116.41987610 75.51786041]
[125.68690491 85.53727722]
[129.44796753 98.65676117]
[144.11320496 101.80812073]
[158.77842712 104.95948029]
[173.44366455 108.11083984]
[188.10888672 111.26219940]
[202.77412415 114.41355133]
[217.43934631 117.56491089]
[232.10456848 120.71627045]
[246.76980591 123.86763000]
[261.43502808 127.01898956]
[267.81546021 118.31841278]
[276.71957397 112.29361725]
[287.09445190 109.62574768]
[297.72375488 110.60086823]
[307.37026978 115.07948303]
[314.91992188 122.51581573]
[319.51043701 132.02420044]
[320.62979126 142.48452759]
[334.95632935 146.92866516]
[349.28286743 151.37280273]
[364.75579834 148.07153320]
[374.61929321 159.23223877]
[388.94583130 163.67637634]
[403.27236938 168.12049866]
[417.59890747 172.56463623]
[431.92544556 177.00877380]
[446.30059814 181.29302979]
[460.72259521 185.41688538]
[475.14456177 189.54072571]
[492.03564453 188.08192444]
[498.11334229 203.90904236]
[484.58724976 214.13061523]
[471.02072144 203.96272278]
[456.59872437 199.83886719]
[442.17672729 195.71502686]
[434.82150269 196.91004944]
[427.48129272 191.33531189]
[413.15475464 186.89117432]
[398.82821655 182.44703674]
[384.50167847 178.00289917]
[370.17514038 173.55877686]
[355.72692871 177.17790222]
[344.83871460 165.69934082]
[330.51217651 161.25520325]
[316.18563843 156.81106567]
[301.46890259 169.55688477]
[281.90859985 170.96679688]
[265.27667236 160.31002808]
[258.28366089 141.68421936]
[243.61843872 138.53285217]
[228.95321655 135.38150024]
[214.28799438 132.23014832]
[199.62275696 129.07878113]
[184.95753479 125.92742920]
[170.29229736 122.77606964]
[155.62707520 119.62471008]
[140.96183777 116.47335052]
[126.29661560 113.32199097]
[113.68821716 128.37242126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 21]
[13 20]
[14 19]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[56 79]
[57 78]
[58 77]
[59 76]
[60 72]
[61 71]
[62 70]
[82 139]
[83 138]
[84 137]
[85 136]
[86 135]
[87 134]
[88 133]
[89 132]
[90 131]
[91 130]
[99 126]
[100 125]
[101 124]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
