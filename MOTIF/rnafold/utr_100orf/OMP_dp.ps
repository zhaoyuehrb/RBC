%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:55 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (OMP)
} def

/sequence { (\
AUGGCGGAGGACAGGCCGCAGCAGCCGCAGCUGGACAUGCCGCUGGUCCUGGACCAGGGCCUGACCAGGCAGAUGCGGCUACGCGUGGAGAGCCUGAAGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 13 0.015625413 ubox
2 18 0.014174169 ubox
2 20 0.008940975 ubox
2 96 0.007086419 ubox
3 12 0.023638644 ubox
3 17 0.023521181 ubox
3 19 0.007030412 ubox
3 22 0.005234074 ubox
3 94 0.143668506 ubox
4 16 0.023694326 ubox
4 19 0.062059427 ubox
4 22 0.004780976 ubox
4 93 0.143900811 ubox
4 100 0.746160055 ubox
5 15 0.023765509 ubox
5 18 0.062585102 ubox
5 21 0.004790856 ubox
5 92 0.143855267 ubox
5 96 0.040056969 ubox
5 99 0.754463306 ubox
6 17 0.062836616 ubox
6 94 0.017362136 ubox
6 95 0.023873649 ubox
7 16 0.062806314 ubox
7 93 0.017388992 ubox
7 94 0.016608778 ubox
8 95 0.765529977 ubox
9 17 0.006626444 ubox
9 94 0.776241691 ubox
9 95 0.074896491 ubox
10 16 0.006685594 ubox
10 93 0.775996358 ubox
10 94 0.074998940 ubox
11 86 0.010325749 ubox
12 63 0.003516963 ubox
12 85 0.010137658 ubox
12 87 0.036939570 ubox
12 96 0.600524329 ubox
13 62 0.003528719 ubox
13 86 0.036782185 ubox
13 95 0.603264469 ubox
14 61 0.003530907 ubox
14 80 0.010593482 ubox
14 94 0.603792146 ubox
15 60 0.003530417 ubox
15 79 0.011043717 ubox
15 84 0.033537107 ubox
15 86 0.010298826 ubox
15 93 0.603664590 ubox
16 59 0.003529675 ubox
16 78 0.011067073 ubox
16 83 0.029180165 ubox
16 85 0.007674965 ubox
16 88 0.869210607 ubox
16 92 0.486819988 ubox
17 58 0.003523708 ubox
17 77 0.011072433 ubox
17 83 0.017032219 ubox
17 85 0.177882992 ubox
17 87 0.951659593 ubox
18 76 0.011071699 ubox
18 82 0.023511379 ubox
18 84 0.179118219 ubox
18 86 0.951282847 ubox
19 75 0.011071294 ubox
19 83 0.178835653 ubox
19 85 0.948108228 ubox
19 87 0.226206524 ubox
19 96 0.004500074 ubox
20 74 0.010965254 ubox
20 80 0.005016370 ubox
20 86 0.217152759 ubox
20 95 0.004691662 ubox
21 79 0.003599825 ubox
21 84 0.967586557 ubox
21 86 0.025165287 ubox
21 93 0.003573574 ubox
21 94 0.004257428 ubox
21 100 0.008189324 ubox
22 33 0.008814066 ubox
22 83 0.965321658 ubox
22 85 0.026290182 ubox
22 87 0.004272219 ubox
22 92 0.003885737 ubox
22 99 0.008247556 ubox
23 32 0.008871007 ubox
23 80 0.927950318 ubox
24 31 0.008881365 ubox
24 70 0.010552200 ubox
24 79 0.999795327 ubox
25 30 0.008853051 ubox
25 69 0.010564128 ubox
25 78 0.999870113 ubox
26 68 0.009204379 ubox
26 77 0.999855448 ubox
27 70 0.003834915 ubox
27 76 0.999852557 ubox
28 69 0.003866780 ubox
28 75 0.999784923 ubox
29 74 0.975033318 ubox
30 70 0.944855130 ubox
31 68 0.691238448 ubox
31 69 0.715613821 ubox
31 72 0.083054022 ubox
32 67 0.929303066 ubox
32 68 0.354967665 ubox
32 71 0.070335792 ubox
33 66 0.996661634 ubox
33 70 0.053777941 ubox
34 65 0.996431241 ubox
36 63 0.987961065 ubox
37 62 0.982738406 ubox
38 63 0.005814120 ubox
38 67 0.004847986 ubox
38 71 0.006536848 ubox
39 60 0.999026987 ubox
39 66 0.004541330 ubox
39 70 0.007023603 ubox
40 59 0.999933419 ubox
40 69 0.007138438 ubox
41 58 0.999048883 ubox
41 68 0.007125973 ubox
43 57 0.998192495 ubox
44 56 0.999651550 ubox
45 55 0.999939947 ubox
45 61 0.009546516 ubox
46 54 0.999939142 ubox
46 60 0.009610005 ubox
47 53 0.999189853 ubox
47 59 0.009607871 ubox
48 52 0.990777854 ubox
48 58 0.009615720 ubox
49 57 0.009618026 ubox
50 56 0.009606151 ubox
51 55 0.009453204 ubox
60 69 0.003773733 ubox
61 68 0.004999490 ubox
62 67 0.004684544 ubox
66 96 0.010038934 ubox
67 95 0.010274691 ubox
68 94 0.010310389 ubox
69 93 0.010316811 ubox
70 92 0.010303986 ubox
73 86 0.010303862 ubox
74 85 0.010365435 ubox
75 84 0.010476611 ubox
76 83 0.010476949 ubox
77 82 0.010448472 ubox
80 96 0.003465389 ubox
81 95 0.005338213 ubox
82 96 0.005789989 ubox
83 93 0.022055136 ubox
83 95 0.005310785 ubox
83 100 0.028216897 ubox
84 92 0.022100142 ubox
84 96 0.011838823 ubox
84 99 0.028418925 ubox
85 93 0.012797894 ubox
85 95 0.011947839 ubox
85 100 0.006736115 ubox
86 92 0.012727064 ubox
86 96 0.009394247 ubox
86 99 0.006730545 ubox
87 94 0.047195832 ubox
87 95 0.013082661 ubox
88 93 0.047052133 ubox
88 94 0.013418074 ubox
89 95 0.007643356 ubox
90 94 0.007591737 ubox
92 100 0.015830679 ubox
93 99 0.015944231 ubox
4 100 0.9500000 lbox
5 99 0.9500000 lbox
8 95 0.9500000 lbox
9 94 0.9500000 lbox
10 93 0.9500000 lbox
16 88 0.9500000 lbox
17 87 0.9500000 lbox
18 86 0.9500000 lbox
19 85 0.9500000 lbox
21 84 0.9500000 lbox
22 83 0.9500000 lbox
23 80 0.9500000 lbox
24 79 0.9500000 lbox
25 78 0.9500000 lbox
26 77 0.9500000 lbox
27 76 0.9500000 lbox
28 75 0.9500000 lbox
29 74 0.9500000 lbox
30 70 0.9500000 lbox
31 69 0.9500000 lbox
32 67 0.9500000 lbox
33 66 0.9500000 lbox
34 65 0.9500000 lbox
36 63 0.9500000 lbox
37 62 0.9500000 lbox
39 60 0.9500000 lbox
40 59 0.9500000 lbox
41 58 0.9500000 lbox
43 57 0.9500000 lbox
44 56 0.9500000 lbox
45 55 0.9500000 lbox
46 54 0.9500000 lbox
47 53 0.9500000 lbox
48 52 0.9500000 lbox
showpage
end
%%EOF
