%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCACGGGGUCCACAGACCCUGGUGCAGGUGUGGGUGGGCGGCCAGCUCUUCCAAGCCGACCGCGCCCUGCUGGUGGAGCACUGUGGCUUCUUCCGAG\
) } def
/len { sequence length } bind def

/coor [
[97.93292236 150.71185303]
[86.80469513 140.65390015]
[85.29376221 125.73018646]
[94.18196106 113.64476776]
[82.12950897 122.57440186]
[76.98118591 130.33889771]
[69.56049347 131.58740234]
[57.23615646 140.13787842]
[44.91181946 148.68836975]
[32.58748627 157.23884583]
[20.26315117 165.78933716]
[7.93881655 174.33981323]
[-4.38551855 182.89030457]
[-10.88703537 197.94560242]
[-27.20515823 199.57376099]
[-36.55320358 186.09985352]
[-29.31469917 171.38468933]
[-12.93600178 170.56596375]
[-0.61166757 162.01548767]
[11.71266747 153.46499634]
[24.03700256 144.91452026]
[36.36133575 136.36402893]
[48.68567276 127.81354523]
[61.01000595 119.26306152]
[73.19987488 110.52194977]
[85.25232697 101.59231567]
[91.79059601 88.09227753]
[91.32409668 73.09953308]
[90.85759735 58.10678482]
[90.39109802 43.11404037]
[89.92460632 28.12129784]
[86.47982788 19.46530724]
[89.68406677 12.65661335]
[89.68406677 -2.34338665]
[89.68406677 -17.34338760]
[89.45079041 -32.34157181]
[88.98429871 -47.33431625]
[88.51779938 -62.32706070]
[80.35505676 -75.87992859]
[87.69279480 -88.84167480]
[87.22630310 -103.83441925]
[86.75980377 -118.82716370]
[72.43357849 -123.83951569]
[60.88798141 -133.69160461]
[53.68445969 -147.05101013]
[51.79723358 -162.11099243]
[55.48152924 -176.83479309]
[64.23908234 -189.23115540]
[76.88549805 -197.62356567]
[91.71045685 -200.87701416]
[106.70900726 -198.55151367]
[119.85271454 -190.96156311]
[129.36399841 -179.13363647]
[133.95654297 -164.66737366]
[133.00924683 -149.51919556]
[126.65019989 -135.73779297]
[115.73944092 -125.18697357]
[101.75254822 -119.29366302]
[102.21904755 -104.30091858]
[102.68553925 -89.30817413]
[110.81491852 -76.82768250]
[103.51054382 -62.79356003]
[103.97704315 -47.80081558]
[104.44353485 -32.80807114]
[107.85797882 -26.10232162]
[104.68406677 -17.34338760]
[104.68406677 -2.34338665]
[104.68406677 12.65661335]
[104.91735077 27.65479851]
[105.38384247 42.64754486]
[105.85034180 57.64028931]
[106.31684113 72.63303375]
[106.78334045 87.62577820]
[125.61159515 101.59231567]
[137.66404724 110.52194977]
[149.71650696 119.45157623]
[167.97918701 121.03939056]
[174.49244690 137.25292969]
[186.81678772 145.80342102]
[199.14111328 154.35389709]
[211.46545410 162.90438843]
[223.78979492 171.45486450]
[239.29542542 168.39698792]
[252.37510681 177.26815796]
[255.26887512 192.80525208]
[246.25993347 205.79042053]
[230.69309998 208.51976013]
[217.80390930 199.37402344]
[215.23930359 183.77920532]
[202.91496277 175.22872925]
[190.59063721 166.67823792]
[178.26629639 158.12776184]
[165.94197083 149.57727051]
[153.87239075 151.40577698]
[143.50158691 144.23144531]
[140.78686523 131.50402832]
[128.73442078 122.57440186]
[116.68196106 113.64476776]
[125.56961823 125.72821045]
[124.06015778 140.65206909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[33 68]
[34 67]
[35 66]
[36 64]
[37 63]
[38 62]
[40 60]
[41 59]
[42 58]
[74 98]
[75 97]
[76 96]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
