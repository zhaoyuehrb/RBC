%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUGCCCAGUAGUUGGAAAGUGAACUCGACUCGUGAUGGUUCUCCUGUCACUUUGGUUGAUAGCAGCCGCUCUGGUAGAGGUUAGGACUUCAGCUGAUGGACAAGCUGGUAAUGAAGAAAUGGUGCAAAUAGAUU\
) } def
/len { sequence length } bind def

/coor [
[145.86323547 244.71203613]
[151.04473877 230.18084717]
[163.27378845 220.77586365]
[161.90975952 205.83799744]
[160.54574585 190.90014648]
[159.18171692 175.96229553]
[157.81770325 161.02444458]
[156.28373718 146.10308838]
[154.58003235 131.20014954]
[152.87632751 116.29722595]
[126.95346069 143.09631348]
[92.89260864 145.78254700]
[68.11032867 127.07176208]
[55.11994553 134.57176208]
[42.12956619 142.07176208]
[29.13918495 149.57176208]
[16.14880371 157.07176208]
[3.15842223 164.57176208]
[2.52708673 179.98620605]
[-6.35639381 192.59918213]
[-20.65733337 198.38595581]
[-35.81235504 195.49996948]
[-46.98554230 184.86213684]
[-50.61157608 169.86695862]
[-45.53340149 155.29933167]
[-33.37144470 145.80773926]
[-18.00654221 144.42091370]
[-4.34157801 151.58139038]
[8.64880276 144.08139038]
[21.63918495 136.58139038]
[34.62956619 129.08139038]
[47.61994553 121.58138275]
[60.61032867 114.08138275]
[58.21236038 101.90392303]
[59.49303818 89.55885315]
[45.87446594 83.27120209]
[32.25589371 76.98355865]
[18.63732147 70.69590759]
[5.01875114 64.40826416]
[-8.59982014 58.12061310]
[-22.21839142 51.83296585]
[-37.70932007 56.00557709]
[-50.54410553 46.38020325]
[-50.87699890 30.34060478]
[-38.45263290 20.19098854]
[-22.80191994 23.71727371]
[-15.93074417 38.21439362]
[-2.31217241 44.50204086]
[11.30639839 50.78968811]
[24.92497063 57.07733536]
[38.54354095 63.36498642]
[52.16211319 69.65263367]
[65.78068542 75.94027710]
[78.14921570 59.14537430]
[98.76634216 49.18405914]
[123.69702911 50.00043488]
[119.97991180 35.46829605]
[116.26279449 20.93615723]
[112.54567719 6.40401888]
[108.82855988 -8.12811947]
[105.11144257 -22.66025734]
[93.26753998 -34.00283432]
[97.43083191 -49.86470795]
[113.31847382 -53.92854309]
[124.58663177 -42.01381683]
[119.64357758 -26.37737465]
[123.36069489 -11.84523582]
[127.07781219 2.68690205]
[130.79493713 17.21903992]
[134.51205444 31.75117874]
[138.22917175 46.28331757]
[153.20487976 47.13655090]
[158.54850769 33.12064362]
[163.89213562 19.10473442]
[169.23574829 5.08882713]
[169.22865295 -11.86511898]
[185.51806641 -16.56526375]
[194.54388428 -2.21357656]
[183.25166321 10.43245316]
[177.90803528 24.44836044]
[172.56440735 38.46426773]
[167.22077942 52.48017502]
[171.75256348 58.45621490]
[183.16162109 48.71796799]
[194.57067871 38.97972107]
[204.32164001 27.58153152]
[218.52693176 32.39913940]
[219.33251953 47.37749481]
[205.72660828 53.69102859]
[193.27136230 62.04965973]
[180.81610107 70.40828705]
[185.34786987 76.38433075]
[200.28573608 75.02030945]
[215.22358704 73.65628052]
[230.16143799 72.29225922]
[245.09928894 70.92823792]
[260.03713989 69.56421661]
[267.86251831 56.16484070]
[282.08282471 49.95499420]
[297.23010254 53.32249069]
[307.47985840 64.97245789]
[308.89089966 80.42523956]
[300.92065430 93.73893738]
[286.63378906 99.79415131]
[271.52395630 96.26253510]
[261.40115356 84.50206757]
[246.46331787 85.86608887]
[231.52545166 87.23011017]
[216.58760071 88.59413910]
[201.64974976 89.95816040]
[186.71189880 91.32218170]
[181.97874451 97.14001465]
[195.74188232 103.10456085]
[210.72940063 102.49246979]
[222.98286438 111.14419556]
[227.42156982 125.47241974]
[222.20506287 139.53613281]
[209.49629211 147.50401306]
[194.56478882 146.07228088]
[183.60166931 135.83460999]
[181.15240479 121.03743744]
[172.51242065 108.77568817]
[167.77926636 114.59352112]
[169.48297119 129.49645996]
[171.18666077 144.39938354]
[175.30178833 152.65301514]
[172.75555420 159.66043091]
[174.11956787 174.59828186]
[175.48359680 189.53613281]
[176.84762573 204.47398376]
[178.21163940 219.41183472]
[191.94184875 226.44639587]
[199.66947937 239.79881287]
[198.92869568 255.20838928]
[189.95587158 267.75796509]
[175.61419678 273.44302368]
[160.48005676 270.44949341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 125]
[9 124]
[10 123]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[72 82]
[73 81]
[74 80]
[75 79]
[92 111]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
