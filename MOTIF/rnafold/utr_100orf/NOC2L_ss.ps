%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCAGCCGCGCGGCAUUCUGGGGCCGGAAGUGGGGUGCACGCUUCGGGUUGGUGUCAUGGCAGCUGCGGGGAGCCGCAAGAGGCGCCUGGCGGAGCUGACGGUGGACGAGUUCCUAGCUUCGGGCUUUGACUCCGAGUCCGAAUCCGAGUCCGAAA\
) } def
/len { sequence length } bind def

/coor [
[-42.88173294 233.86744690]
[-54.28782272 243.60916138]
[-65.69390869 253.35089111]
[-77.09999847 263.09262085]
[-88.50608826 272.83432007]
[-99.91217804 282.57604980]
[-101.71195221 295.38226318]
[-111.45629883 303.26019287]
[-123.55433655 302.39373779]
[-135.14949036 311.90963745]
[-146.74464417 321.42553711]
[-158.33979797 330.94143677]
[-164.52183533 350.09274292]
[-183.67276001 352.53457642]
[-194.88539124 362.49835205]
[-206.09800720 372.46212769]
[-217.31063843 382.42593384]
[-215.65573120 397.85449219]
[-223.41474915 411.29241943]
[-237.60420227 417.57247925]
[-252.76792908 414.27993774]
[-263.07519531 402.68078613]
[-264.56262207 387.23516846]
[-256.65826416 373.88223267]
[-242.40153503 367.75643921]
[-227.27441406 371.21331787]
[-216.06179810 361.24951172]
[-204.84916687 351.28573608]
[-193.63655090 341.32192993]
[-193.94808960 331.04510498]
[-188.41189575 322.12106323]
[-178.66590881 317.65142822]
[-167.85569763 319.34625244]
[-156.26054382 309.83035278]
[-144.66539001 300.31445312]
[-133.07023621 290.79855347]
[-127.81255341 274.07885742]
[-109.65390015 271.16995239]
[-98.24781036 261.42825317]
[-86.84172058 251.68652344]
[-75.43563080 241.94479370]
[-64.02954102 232.20307922]
[-52.62345123 222.46136475]
[-51.71449661 207.63876343]
[-40.28587723 197.59678650]
[-24.74473572 198.65068054]
[-13.33864594 188.90896606]
[-1.93255615 179.16723633]
[9.47353363 169.42552185]
[20.87962341 159.68380737]
[32.28571320 149.94207764]
[43.59561539 140.08885193]
[54.80823898 130.12506104]
[66.02086639 120.16127777]
[77.23348999 110.19749451]
[74.19304657 79.31551361]
[108.25166321 59.63406754]
[105.61471558 44.86766815]
[102.97776794 30.10126877]
[100.34082794 15.33487129]
[95.72959137 7.38834429]
[97.80004883 0.25286907]
[95.45352936 -14.56245613]
[93.10701752 -29.37778091]
[88.65268707 -37.41331100]
[90.86284637 -44.50675964]
[88.80765533 -59.36529922]
[86.75247192 -74.22383881]
[84.11553192 -88.99024200]
[80.90089417 -103.64173126]
[77.68625641 -118.29321289]
[74.47161865 -132.94470215]
[63.02521133 -144.68829346]
[67.73208618 -160.39744568]
[83.75021362 -163.91192627]
[94.60151672 -151.61634827]
[89.12310791 -136.15934753]
[92.33774567 -121.50785065]
[95.55238342 -106.85636139]
[98.76702118 -92.20487976]
[101.10999298 -90.57765961]
[102.93195343 -87.90029907]
[103.82051849 -84.37301636]
[103.44588470 -80.34472656]
[101.61101532 -76.27902222]
[103.66619873 -61.42048645]
[105.72138214 -46.56194687]
[107.92234039 -31.72429848]
[110.26885986 -16.90897369]
[112.61537170 -2.09364796]
[115.10722351 12.69792652]
[117.74417114 27.46432495]
[120.38111115 42.23072433]
[123.01805878 56.99712372]
[136.70120239 63.14298248]
[149.49079895 55.30550385]
[162.28041077 47.46802521]
[175.07000732 39.63054657]
[187.85960388 31.79306793]
[200.64921570 23.95559120]
[204.17823792 18.26571274]
[209.29432678 15.64456654]
[214.09838867 16.07289124]
[227.18583679 8.74357319]
[232.90692139 -6.24470949]
[248.23542786 -10.97934055]
[261.41259766 -1.82831633]
[262.33007812 14.18848133]
[250.28402710 24.78433609]
[234.51515198 21.83101273]
[221.42770386 29.16033173]
[208.48669434 36.74519348]
[195.69708252 44.58267212]
[182.90748596 52.42015076]
[170.11788940 60.25762939]
[157.32827759 68.09510803]
[144.53868103 75.93258667]
[144.53868103 83.43258667]
[159.53868103 83.43281555]
[159.53822327 98.43281555]
[144.53868103 98.43258667]
[144.53868103 105.93258667]
[157.32827759 113.77006531]
[170.11788940 121.60754395]
[182.90748596 129.44502258]
[195.69708252 137.28250122]
[208.48669434 145.11997986]
[221.27629089 152.95745850]
[234.06590271 160.79493713]
[246.85549927 168.63241577]
[261.62658691 163.49928284]
[276.22293091 169.11003113]
[283.75259399 182.81544495]
[280.66030884 198.14422607]
[268.40612793 207.85861206]
[252.77612305 207.37176514]
[241.15029907 196.91354370]
[239.01802063 181.42201233]
[226.22842407 173.58453369]
[213.43881226 165.74705505]
[200.64921570 157.90957642]
[187.85960388 150.07209778]
[175.07000732 142.23461914]
[162.28041077 134.39714050]
[149.49079895 126.55966949]
[136.70120239 118.72219086]
[109.14242554 131.78463745]
[87.19727325 121.41011810]
[75.98464966 131.37390137]
[64.77202606 141.33769226]
[53.55940247 151.30148315]
[49.19323730 159.38525391]
[42.02743149 161.34817505]
[30.62134361 171.08988953]
[19.21525383 180.83160400]
[7.80916452 190.57333374]
[-3.59692478 200.31504822]
[-15.00301456 210.05677795]
[-16.39326286 225.57144165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[9 36]
[10 35]
[11 34]
[12 33]
[14 29]
[15 28]
[16 27]
[17 26]
[46 158]
[47 157]
[48 156]
[49 155]
[50 154]
[51 153]
[52 151]
[53 150]
[54 149]
[55 148]
[57 94]
[58 93]
[59 92]
[60 91]
[62 90]
[63 89]
[64 88]
[66 87]
[67 86]
[68 85]
[69 80]
[70 79]
[71 78]
[72 77]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
[103 111]
[104 110]
[122 146]
[123 145]
[124 144]
[125 143]
[126 142]
[127 141]
[128 140]
[129 139]
[130 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
