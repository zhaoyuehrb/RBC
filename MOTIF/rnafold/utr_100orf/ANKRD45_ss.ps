%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCGCCGUUGCUAUGGUAACCGAGGAGGCCGGGGCCCGGGUGUGGUAUUUUUGGAGUUAAUGGAGUCAGAAGGACCUCCAGAGUCAGAGAGUUCAGAAUUUUUCUCACAGCAAGAAGAGGAAAAUGAAGAAGAAGAAGCCCAAGAACCAGAGGAAACAG\
) } def
/len { sequence length } bind def

/coor [
[-33.76489639 309.89895630]
[-38.74720764 295.75057983]
[-38.37645340 280.75515747]
[-32.70260620 266.87274170]
[-44.90588760 275.59512329]
[-57.10916901 284.31750488]
[-69.31244659 293.03988647]
[-81.51573181 301.76226807]
[-81.76667786 317.16494751]
[-90.93196869 329.32434082]
[-105.32942200 333.70352173]
[-119.37664032 328.82360840]
[-131.57992554 337.54598999]
[-143.78320312 346.26837158]
[-150.51118469 360.58776855]
[-165.36466980 361.69387817]
[-177.56794739 370.41625977]
[-189.77122498 379.13864136]
[-191.96571350 383.98330688]
[-195.46623230 387.15454102]
[-199.40281677 388.43475342]
[-202.94734192 387.98892212]
[-215.63714600 395.98696899]
[-220.57336426 411.25173950]
[-235.63574219 416.77481079]
[-249.26971436 408.31936646]
[-251.01644897 392.37170410]
[-239.53601074 381.16546631]
[-223.63520813 383.29718018]
[-210.94541931 375.29910278]
[-198.49360657 366.93536377]
[-186.29032898 358.21298218]
[-174.08705139 349.49060059]
[-168.23191833 335.79507446]
[-152.50558472 334.06509399]
[-140.30230713 325.34271240]
[-128.09902954 316.62033081]
[-128.16859436 301.74978638]
[-119.36428833 289.54534912]
[-104.89258575 284.81002808]
[-90.23811340 289.55899048]
[-78.03482819 280.83660889]
[-65.83155060 272.11422729]
[-53.62826920 263.39184570]
[-41.42498779 254.66944885]
[-30.61470413 244.27052307]
[-21.42569542 232.41462708]
[-12.23668671 220.55874634]
[-11.94736099 215.74673462]
[-8.59932709 211.07801819]
[-2.45428181 208.43046570]
[7.18753242 196.93978882]
[16.82934570 185.44912720]
[26.47116089 173.95846558]
[36.11297607 162.46778870]
[45.75478745 150.97712708]
[47.65464401 143.79641724]
[55.69669342 139.35948181]
[65.55951691 128.05795288]
[75.42233276 116.75640869]
[67.96246338 97.77496338]
[74.46719360 76.82318115]
[93.91066742 63.65494156]
[89.05465698 49.46271896]
[84.19864655 35.27049637]
[79.34263611 21.07827568]
[74.48662567 6.88605356]
[69.49324036 -7.25841713]
[64.36293793 -21.35380745]
[50.48917770 -29.40976143]
[48.28005600 -45.29998779]
[59.43021774 -56.83486557]
[75.38621521 -55.16582489]
[83.90797424 -41.57320786]
[78.45832825 -26.48410797]
[83.58863068 -12.38871956]
[88.85737610 -7.15304041]
[88.67884827 2.03004432]
[93.53485870 16.22226715]
[98.39086914 30.41448975]
[103.24687958 44.60671234]
[108.10289001 58.79893494]
[110.64545441 44.01599121]
[106.39932251 29.62952614]
[109.80822754 15.02201462]
[119.98359680 4.00104284]
[134.27313232 -0.56067055]
[148.95213318 2.52592778]
[160.19436646 12.45628738]
[165.06945801 26.64196587]
[162.30665588 41.38533783]
[152.62611389 52.84339905]
[138.54904175 58.02970505]
[128.20962524 68.89691162]
[142.49334717 64.31702423]
[156.77705383 59.73713684]
[161.71887207 45.14656448]
[174.15907288 36.36621475]
[189.20610046 36.59206009]
[201.09257507 45.52793884]
[215.37628174 40.94804764]
[229.66000366 36.36816025]
[243.94372559 31.78826904]
[258.22744751 27.20837975]
[272.51116943 22.62848854]
[286.79489136 18.04859924]
[301.07858276 13.46870899]
[315.36230469 8.88881874]
[318.53540039 -6.13872814]
[328.80905151 -17.55570030]
[343.41976929 -22.29099083]
[358.43728638 -19.07082748]
[369.82199097 -8.76142120]
[374.51147461 5.86405087]
[371.24426270 20.87141037]
[360.89920044 32.22375488]
[346.25912476 36.86735535]
[331.26205444 33.55311203]
[319.94219971 23.17253685]
[305.65847778 27.75242805]
[291.37475586 32.33231735]
[277.09106445 36.91220856]
[262.80734253 41.49209595]
[248.52362061 46.07198715]
[234.23989868 50.65187836]
[219.95617676 55.23176575]
[205.67245483 59.81165695]
[201.19833374 73.99334717]
[189.08813477 82.92681122]
[173.86166382 83.01741791]
[161.35694885 74.02085114]
[147.07322693 78.60074615]
[132.78950500 83.18063354]
[135.61138916 98.00170898]
[132.25024414 112.20700073]
[123.67871094 123.41234589]
[111.70761108 129.90461731]
[98.61656189 130.89952087]
[86.72386932 126.61922455]
[76.86105347 137.92076111]
[66.99822998 149.22230530]
[57.24545670 160.61894226]
[47.60364151 172.10960388]
[37.96182632 183.60028076]
[28.32001305 195.09094238]
[18.67819977 206.58160400]
[9.03638458 218.07228088]
[-0.38079703 229.74775696]
[-9.56980515 241.60363770]
[-18.75881386 253.45953369]
[-4.66395807 248.32775879]
[10.33454323 248.53979492]
[24.27870369 254.06793213]
[35.34817505 264.19052124]
[42.09788895 277.58609009]
[43.64669800 292.50592041]
[39.79241562 307.00228882]
[31.03819656 319.18273926]
[18.52686691 327.45721436]
[3.89172721 330.74545288]
[-10.95667362 328.61825562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[12 37]
[13 36]
[14 35]
[16 33]
[17 32]
[18 31]
[22 30]
[23 29]
[46 150]
[47 149]
[48 148]
[51 147]
[52 146]
[53 145]
[54 144]
[55 143]
[56 142]
[58 141]
[59 140]
[60 139]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
[68 76]
[69 75]
[94 133]
[95 132]
[96 131]
[100 127]
[101 126]
[102 125]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
