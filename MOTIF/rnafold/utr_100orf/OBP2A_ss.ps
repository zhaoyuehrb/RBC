%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCAGUGACCUGCCGAGGUCGGCAGCACAGAGCUCUGGAGAUGAAGACCCUGUUCCUGGGUGUCACGCUCGGCCUGGCCGCUGCCCUGUCCUUCACCCUGGAGGAGGAGGAUAUCACAGGGACCUGGUACGUGAAGGCCA\
) } def
/len { sequence length } bind def

/coor [
[79.10965729 374.97695923]
[87.46540070 360.86618042]
[87.13589478 345.86981201]
[86.80638123 330.87341309]
[75.84250641 325.46215820]
[68.19852448 315.82702637]
[65.38986969 303.77856445]
[68.01585388 291.61483765]
[75.63309479 281.68313599]
[86.82900238 275.92703247]
[87.15850830 260.93066406]
[79.70265961 248.03649902]
[87.74124908 234.40962219]
[88.07076263 219.41323853]
[88.40026855 204.41685486]
[88.72978210 189.42047119]
[85.70869446 182.61151123]
[89.23485565 174.09927368]
[89.89372253 159.11375427]
[90.55258179 144.12821960]
[91.21144867 129.14270020]
[91.87030792 114.15718079]
[86.86061859 100.01847076]
[76.91378021 88.79080963]
[66.96694183 77.56314850]
[57.02009964 66.33548737]
[47.07326126 55.10782623]
[37.12641907 43.88016510]
[17.76482201 38.45470047]
[14.54215145 19.43488693]
[4.11174536 8.65496922]
[-6.31866074 -2.12494874]
[-14.60268974 -6.15817404]
[-16.85655403 -13.25811195]
[-27.04763603 -24.26455688]
[-37.23871994 -35.27100372]
[-42.37675476 -36.85116196]
[-45.98954010 -39.96584702]
[-47.74464798 -43.75519180]
[-47.70891571 -47.35425568]
[-57.15299225 -59.00798798]
[-66.59706116 -70.66172028]
[-83.91627502 -76.81047821]
[-86.07271576 -94.19319153]
[-95.77051544 -105.63665009]
[-105.46830750 -117.08010864]
[-118.28347778 -118.93489838]
[-126.12316132 -128.73092651]
[-125.18521881 -140.83963013]
[-134.62928772 -152.49336243]
[-144.07336426 -164.14709473]
[-153.51744080 -175.80082703]
[-169.15478516 -175.88708496]
[-181.04472351 -186.04402161]
[-183.57318115 -201.47584534]
[-175.54632568 -214.89610291]
[-160.75415039 -219.96817017]
[-146.18110657 -214.29716492]
[-138.70811462 -200.56077576]
[-141.86370850 -185.24490356]
[-132.41963196 -173.59117126]
[-122.97555542 -161.93743896]
[-113.53148651 -150.28370667]
[-96.85132599 -144.93757629]
[-94.02484894 -126.77790070]
[-84.32705688 -115.33444214]
[-74.62925720 -103.89099121]
[-62.55693054 -102.56459045]
[-54.38668060 -93.04251862]
[-54.94333267 -80.10578918]
[-45.49925995 -68.45205688]
[-36.05518341 -56.79832840]
[-26.23227310 -45.46208572]
[-16.04119110 -34.45563889]
[-5.85010910 -23.44919395]
[4.46125698 -12.55535507]
[14.89166355 -1.77543700]
[25.32206917 9.00448036]
[35.60781479 8.25941372]
[44.77692795 13.44366837]
[49.64075089 23.03466606]
[48.35408020 33.93332672]
[58.30092239 45.16098785]
[68.24776459 56.38864899]
[78.19460297 67.61631012]
[88.14144135 78.84397125]
[98.08827972 90.07163239]
[105.26045990 83.41989136]
[117.78356171 82.88942719]
[132.38624573 79.45988464]
[146.98892212 76.03034210]
[161.59159851 72.60079956]
[176.19427490 69.17126465]
[190.79696655 65.74172211]
[205.39964294 62.31217957]
[220.00231934 58.88264084]
[231.66792297 48.19506836]
[245.82710266 52.81750870]
[260.42977905 49.38796997]
[270.06802368 36.56283951]
[286.10794067 36.24602509]
[296.24508667 48.68055725]
[292.70312500 64.32772827]
[278.19912720 71.18437195]
[263.85931396 63.99064636]
[249.25663757 67.42018890]
[238.63551331 77.86245728]
[223.43185425 73.48532104]
[208.82917786 76.91485596]
[194.22650146 80.34439850]
[179.62382507 83.77394104]
[165.02114868 87.20348358]
[150.41845703 90.63301849]
[135.81578064 94.06256104]
[121.21310425 97.49210358]
[136.19935608 96.84990692]
[148.44294739 105.51559448]
[152.82015991 119.86272430]
[147.49919128 133.88725281]
[134.70677185 141.72012329]
[119.79633331 140.08343506]
[109.00764465 129.66210938]
[106.85583496 114.81604004]
[106.19696808 129.80155945]
[105.53810883 144.78709412]
[104.87924194 159.77261353]
[104.22038269 174.75813293]
[103.72616577 189.74998474]
[103.39665222 204.74636841]
[103.06713867 219.74275208]
[102.73763275 234.73913574]
[110.16990662 248.70594788]
[102.15489197 261.26016235]
[101.82537842 276.25656128]
[116.54629517 286.73141479]
[122.04180908 303.77856445]
[116.31116486 320.58316040]
[101.80275726 330.54391479]
[102.13227081 345.54028320]
[102.46178436 360.53668213]
[111.42926788 374.26678467]
[103.78196716 388.77371216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[4 138]
[10 134]
[11 133]
[13 131]
[14 130]
[15 129]
[16 128]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[30 78]
[31 77]
[32 76]
[34 75]
[35 74]
[36 73]
[40 72]
[41 71]
[42 70]
[44 67]
[45 66]
[46 65]
[49 63]
[50 62]
[51 61]
[52 60]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
