%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAGCCGAGUCACUGCGUCCUGGCAGCAGAAGCUGCACCAUGUCCAUGUCACCCACGGUCAUCAUCCUGGCAUGUCUUGGGUUCUUCUUGGACCAGAGUGUGUGGGCACACGUGGGUGGUCAGGACAAGCCCUUCUGCU\
) } def
/len { sequence length } bind def

/coor [
[-29.58698082 350.01916504]
[-32.14711761 364.79907227]
[-45.18737030 372.21200562]
[-59.19676590 366.85134888]
[-63.95740128 352.62612915]
[-73.25364685 364.39810181]
[-82.54989624 376.17010498]
[-91.84614563 387.94210815]
[-84.72927094 401.40576172]
[-83.71031952 416.60052490]
[-88.96582794 430.89385986]
[-99.58525848 441.80935669]
[-113.72872162 447.45581055]
[-128.94578552 446.85491943]
[-142.59999084 440.11083984]
[-152.32566833 428.39202881]
[-156.43778992 413.72879028]
[-154.22389221 398.66165161]
[-146.06756592 385.80108643]
[-133.38192749 377.37524414]
[-118.36486053 374.84399414]
[-103.61813354 378.64584351]
[-94.32189178 366.87387085]
[-85.02564240 355.10186768]
[-75.72939301 343.32986450]
[-67.10294342 331.05859375]
[-59.17306137 318.32608032]
[-51.24317551 305.59356689]
[-43.31328964 292.86105347]
[-35.38340759 280.12854004]
[-27.45352173 267.39602661]
[-19.52363586 254.66349792]
[-11.59375095 241.93098450]
[-14.02225494 230.02911377]
[-7.45174646 219.33773804]
[5.03861952 215.91471863]
[13.25020313 203.36204529]
[9.99996758 194.94877625]
[11.04825401 185.85133362]
[16.28253937 178.16897583]
[24.60972977 173.73431396]
[34.18237686 173.67680359]
[43.21405029 161.70062256]
[52.24572372 149.72445679]
[61.27739716 137.74827576]
[70.30906677 125.77208710]
[71.83741760 118.47883606]
[79.67778778 113.63269043]
[88.97403717 101.86070251]
[98.13856506 89.98587799]
[107.17023468 78.00970459]
[116.20191193 66.03352356]
[125.23358154 54.05734253]
[134.26525879 42.08116150]
[143.29693604 30.10498238]
[152.32859802 18.12880325]
[161.36027527 6.15262365]
[170.39195251 -5.82355595]
[179.28964233 -17.89960670]
[188.05226135 -30.07402992]
[185.16044617 -36.54362106]
[184.46205139 -43.54341507]
[185.99578857 -50.35551071]
[189.57313538 -56.29159546]
[194.80078125 -60.76250458]
[201.12371826 -63.33663559]
[207.88398743 -63.78148651]
[214.38922119 -62.08431244]
[224.69633484 -72.98216248]
[228.55767822 -88.32493591]
[242.92445374 -92.25498199]
[253.23156738 -103.15283203]
[263.53869629 -114.05068970]
[273.84582520 -124.94854736]
[284.15292358 -135.84640503]
[287.81683350 -144.30407715]
[294.81317139 -146.86898804]
[305.36050415 -157.53450012]
[315.90786743 -168.20002747]
[320.11007690 -183.45295715]
[334.56082153 -187.06195068]
[345.10818481 -197.72747803]
[355.65554810 -208.39299011]
[366.20291138 -219.05850220]
[376.75027466 -229.72402954]
[378.09912109 -245.71026611]
[391.51815796 -254.50280762]
[406.71347046 -249.35673523]
[412.02850342 -234.21969604]
[403.38601685 -220.70352173]
[387.41577148 -219.17666626]
[376.86840820 -208.51115417]
[366.32107544 -197.84562683]
[355.77371216 -187.18011475]
[345.22634888 -176.51460266]
[341.77856445 -162.02453613]
[326.57339478 -157.65266418]
[316.02603149 -146.98715210]
[305.47866821 -136.32162476]
[295.05078125 -125.53927612]
[284.74368286 -114.64142609]
[274.43655396 -103.74356842]
[264.12942505 -92.84571075]
[253.82231140 -81.94786072]
[250.69819641 -67.38457489]
[235.59419250 -62.67504501]
[225.28707886 -51.77718735]
[222.89225769 -28.75261688]
[200.22668457 -21.31141472]
[191.46406555 -9.13699245]
[190.09858704 -1.81149507]
[182.36813354 3.20811725]
[173.33645630 15.18429661]
[164.30477905 27.16047668]
[155.27311707 39.13665771]
[146.24143982 51.11283493]
[137.20976257 63.08901596]
[128.17808533 75.06519318]
[119.14641571 87.04137421]
[110.11474609 99.01755524]
[108.13766479 106.90451050]
[100.74602509 111.15695190]
[91.44977570 122.92893982]
[82.28524780 134.80375671]
[73.25357819 146.77993774]
[64.22190094 158.75611877]
[55.19022751 170.73229980]
[46.15855408 182.70848083]
[44.97502899 204.05168152]
[25.80288696 211.57362366]
[17.59130478 224.12631226]
[17.02879906 242.49443054]
[1.13876367 249.86087036]
[-6.79112148 262.59338379]
[-14.72100639 275.32589722]
[-22.65089226 288.05841064]
[-30.58077621 300.79092407]
[-38.51066208 313.52343750]
[-46.44054794 326.25595093]
[-54.37042999 338.98846436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[8 22]
[26 140]
[27 139]
[28 138]
[29 137]
[30 136]
[31 135]
[32 134]
[33 133]
[36 131]
[37 130]
[42 128]
[43 127]
[44 126]
[45 125]
[46 124]
[48 123]
[49 122]
[50 120]
[51 119]
[52 118]
[53 117]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
[59 110]
[60 109]
[68 107]
[69 106]
[71 104]
[72 103]
[73 102]
[74 101]
[75 100]
[77 99]
[78 98]
[79 97]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
