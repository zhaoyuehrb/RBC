%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGUGCCGGCUGCUGCCCGUGCUGCCAGAACUAUGAGGGUCCUCUCUGGCACUAGCCUCAUGCUCUGCAGCCUGCUGCUGCUGCUCCAGGCCCUGUGCAGCCCUGGCCUCGCCCCCCAGUCCAGAGGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[87.21677399 186.73333740]
[73.48306274 180.70133972]
[69.63607025 166.20304871]
[78.57383728 154.15504456]
[71.07840729 154.41677856]
[61.70658112 166.12869263]
[52.33475494 177.84060669]
[42.96292496 189.55252075]
[40.38197708 205.16178894]
[26.38888359 210.26498413]
[17.01705742 221.97689819]
[7.64522886 233.68881226]
[5.71036386 249.97341919]
[-9.46459579 256.19055176]
[-22.26895142 245.94453430]
[-19.53068161 229.77561951]
[-4.06668139 224.31698608]
[5.30514622 212.60507202]
[14.67697430 200.89315796]
[16.58758926 186.12161255]
[31.25101662 180.18069458]
[40.62284470 168.46878052]
[49.99467087 156.75686646]
[59.36650085 145.04495239]
[54.56557083 130.83401489]
[40.01113510 127.20517731]
[25.45669937 123.57635498]
[10.90226364 119.94752502]
[-3.65217209 116.31869507]
[-18.20660782 112.68986511]
[-32.76104355 109.06103516]
[-27.88699913 123.24707794]
[-35.73699188 136.02900696]
[-50.59369278 138.09744263]
[-61.63662338 127.94591522]
[-60.82296753 112.96799469]
[-48.74498749 104.07238770]
[-62.77973175 98.77843475]
[-76.81447601 93.48447418]
[-92.89995575 96.67652893]
[-103.50211334 84.16548157]
[-97.71435547 68.82162476]
[-81.49063110 66.42940521]
[-71.52051544 79.44972992]
[-57.48577118 84.74369049]
[-43.45103073 90.03765106]
[-29.13221550 94.50659943]
[-14.57777977 98.13542938]
[-0.02334375 101.76425934]
[14.53109169 105.39308929]
[29.08552742 109.02191925]
[43.63996506 112.65074158]
[58.19440079 116.27957153]
[57.75689316 92.54541779]
[69.24850464 72.99152374]
[88.33406067 62.82711411]
[83.86510468 48.50830078]
[79.39614868 34.18948364]
[65.91222382 25.49677277]
[64.44479370 9.52097321]
[76.11954498 -1.48264933]
[91.98061371 0.92694366]
[99.86074066 14.90131855]
[93.71496582 29.72053146]
[98.18392181 44.03934479]
[102.65287781 58.35815811]
[117.20731354 61.98698807]
[127.87544250 51.44227219]
[138.54356384 40.89755630]
[149.21170044 30.35284042]
[159.87982178 19.80812454]
[170.04580688 8.77849007]
[179.68762207 -2.71217704]
[189.32943726 -14.20284367]
[198.97125244 -25.69351006]
[208.61306763 -37.18417740]
[207.42358398 -52.71553040]
[217.36544800 -64.23134613]
[232.17955017 -65.26961517]
[241.82136536 -76.76028442]
[244.13462830 -92.99546051]
[259.45013428 -98.85779572]
[272.01260376 -88.31662750]
[268.89886475 -72.21580505]
[253.31202698 -67.11846924]
[243.67021179 -55.62780380]
[245.22015381 -40.85846710]
[235.60566711 -29.06794739]
[220.10372925 -27.54236221]
[210.46191406 -16.05169678]
[200.82009888 -4.56102943]
[191.17828369 6.92963696]
[181.53646851 18.42030334]
[181.70375061 21.30619621]
[180.68440247 24.43374252]
[178.37971497 27.33076477]
[174.87124634 29.49822807]
[170.42454529 30.47625351]
[159.75640869 41.02096939]
[149.08828735 51.56568527]
[138.42015076 62.11040115]
[127.75202942 72.65511322]
[139.08732605 89.64291382]
[140.50366211 110.77345276]
[130.87677002 130.48147583]
[112.08976746 143.20382690]
[122.25575256 154.23345947]
[132.42172241 165.26309204]
[142.58770752 176.29272461]
[152.75369263 187.32235718]
[162.91966248 198.35198975]
[173.08564758 209.38163757]
[187.49990845 204.46746826]
[202.66618347 205.84744263]
[215.95680237 213.28245544]
[225.06909180 225.48432922]
[228.42430115 240.33905029]
[225.44111633 255.27291870]
[216.63638306 267.69857788]
[203.53559875 275.46316528]
[188.40852356 277.22146606]
[173.87603760 272.66882324]
[162.45596313 262.59399414]
[156.12690735 248.74253845]
[155.98542786 233.51428223]
[162.05601501 219.54760742]
[151.89002991 208.51797485]
[141.72406006 197.48834229]
[131.55807495 186.45870972]
[121.39209747 175.42907715]
[111.22611237 164.39942932]
[101.06013489 153.36979675]
[93.56470490 153.63154602]
[103.32077026 165.02537537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 24]
[6 23]
[7 22]
[8 21]
[10 19]
[11 18]
[12 17]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[37 46]
[38 45]
[39 44]
[56 66]
[57 65]
[58 64]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[79 86]
[80 85]
[106 132]
[107 131]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
