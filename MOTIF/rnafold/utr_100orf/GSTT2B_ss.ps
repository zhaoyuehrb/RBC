%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCUCAGCGCCUUCACUGCCAUCCCCGCUGUCCUUGCCGCCCCCGCCAUGGGCCUAGAGCUGUUUCUUGACCUGGUGUCCCAGCCCAGCCGCGCCGUCUACAUCUUCGCCAAGAAGAAUGGCAUCCCCUUAGAGCUGCGCACCGUGG\
) } def
/len { sequence length } bind def

/coor [
[134.50590515 459.86740112]
[134.50590515 444.86740112]
[134.50590515 429.86740112]
[134.50590515 414.86740112]
[134.03785706 399.87469482]
[133.10223389 384.90390015]
[124.58612823 372.68402100]
[131.44757080 358.42810059]
[130.51194763 343.45733643]
[129.57632446 328.48654175]
[128.64068604 313.51574707]
[112.83786774 309.74044800]
[98.94566345 301.27923584]
[88.31610870 288.94223022]
[81.98778534 273.91738892]
[80.58440399 257.65609741]
[84.25330353 241.73304749]
[92.65010834 227.69363403]
[104.97100067 216.90408325]
[120.02965546 210.41844177]
[118.47206879 195.49952698]
[116.91448975 180.58061218]
[115.35691071 165.66169739]
[113.79933167 150.74278259]
[112.24174500 135.82388306]
[100.66516876 136.87588501]
[89.62229156 134.37361145]
[80.14883423 128.74101257]
[73.07474518 120.68628693]
[68.95214081 111.11772919]
[54.05023575 112.83042145]
[45.58364105 125.97769165]
[30.63172913 130.55746460]
[16.25433159 124.40730286]
[9.24001980 110.43112946]
[12.90073490 95.22806549]
[25.50800133 85.97653198]
[41.10905075 87.04482269]
[52.33754730 97.92852020]
[67.23944855 96.21582794]
[67.53595734 94.19830322]
[67.95659637 92.20295715]
[54.57031250 85.43484497]
[41.18402481 78.66672516]
[27.79774094 71.89861298]
[13.49458599 78.21951294]
[-1.51079357 73.81807709]
[-10.13331509 60.77253723]
[-8.30168724 45.24259186]
[3.11925054 34.56101227]
[18.73688126 33.77130890]
[31.17703629 43.24635696]
[34.56585693 58.51232910]
[47.95214081 65.28044128]
[61.33842468 72.04856110]
[74.72470856 78.81667328]
[85.73538971 70.26627350]
[99.29508209 67.02915192]
[102.39340973 52.35262680]
[105.49172974 37.67610168]
[108.59004974 22.99957657]
[111.38237762 8.26177120]
[113.86749268 -6.53093624]
[112.19774628 -15.57879829]
[116.56125641 -21.60419846]
[119.35358429 -36.34200287]
[110.51847076 -46.55956268]
[109.22108459 -59.80889130]
[115.71346283 -71.20729065]
[127.41814423 -76.68424988]
[130.51646423 -91.36077881]
[133.61479187 -106.03730774]
[125.25477600 -119.18066406]
[128.60598755 -134.02061462]
[141.18769836 -141.90960693]
[144.28601074 -156.58613586]
[147.38433838 -171.26266479]
[150.48265076 -185.93917847]
[144.88182068 -201.35224915]
[155.63525391 -213.73352051]
[171.68075562 -210.34619141]
[176.51208496 -194.67486572]
[165.15917969 -182.84086609]
[162.06086731 -168.16433716]
[158.96253967 -153.48780823]
[155.86421204 -138.81129456]
[164.18359375 -126.50991821]
[161.25051880 -111.58170319]
[148.29130554 -102.93898010]
[145.19299316 -88.26245880]
[142.09466553 -73.58592987]
[151.86630249 -59.93407440]
[148.70954895 -43.10199356]
[134.09138489 -33.54967880]
[131.29905701 -18.81187248]
[128.66020203 -4.04581738]
[126.17507935 10.74689007]
[128.20666504 15.13416195]
[127.45786285 20.84997940]
[123.26657867 26.09789848]
[120.16825104 40.77442551]
[117.06993103 55.45095062]
[113.97161102 70.12747192]
[126.82214355 78.13523865]
[135.23936462 91.58008575]
[136.98735046 108.07134247]
[151.98654175 107.91530609]
[166.98573303 107.75926971]
[181.98490906 107.60323334]
[196.98410034 107.44719696]
[209.19171143 97.03787231]
[224.91329956 100.23339081]
[232.08860779 114.58241272]
[225.21336365 129.07760620]
[209.56166077 132.59948730]
[197.14013672 122.44638824]
[182.14094543 122.60242462]
[167.14176941 122.75846100]
[152.14257812 122.91449738]
[137.14338684 123.07053375]
[127.16065979 134.26629639]
[128.71824646 149.18521118]
[130.27581787 164.10412598]
[131.83340454 179.02304077]
[133.39099121 193.94194031]
[134.94856262 208.86085510]
[148.56948853 211.25376892]
[161.08663940 217.10372925]
[171.64016724 226.00154114]
[179.50700378 237.32884216]
[184.15040588 250.30114746]
[185.25662231 264.02212524]
[182.75605774 277.54559326]
[176.82760620 289.94070435]
[167.88587952 300.35601807]
[156.55221558 308.07806396]
[143.61148071 312.58010864]
[144.54710388 327.55090332]
[145.48274231 342.52169800]
[146.41836548 357.49249268]
[155.00138855 370.78317261]
[148.07302856 383.96826172]
[149.00865173 398.93905640]
[151.97453308 403.39138794]
[152.80697632 408.06677246]
[151.78758240 412.09945679]
[149.50590515 414.86740112]
[149.50590515 429.86740112]
[149.50590515 444.86740112]
[149.50590515 459.86740112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 143]
[6 142]
[8 140]
[9 139]
[10 138]
[11 137]
[20 126]
[21 125]
[22 124]
[23 123]
[24 122]
[25 121]
[30 40]
[31 39]
[42 56]
[43 55]
[44 54]
[45 53]
[58 103]
[59 102]
[60 101]
[61 100]
[62 97]
[63 96]
[65 95]
[66 94]
[70 91]
[71 90]
[72 89]
[75 86]
[76 85]
[77 84]
[78 83]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
