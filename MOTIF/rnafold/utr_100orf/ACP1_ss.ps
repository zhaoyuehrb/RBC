%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGCAGGCGCGCGGGGCAAGAGGGUGGCAGUGCGCCUGCGCCGCGUCGGCGUGCGGAACGCCGCGGUGUCUCGGCGCCUCUGCGCGCGGGAAGAUGGCGGAACAGGCUACCAAGUCCGUGCUGUUUGUGUGUCUGGGUAACAUUUGUCGAUCACCCAUUGCAGAAGCAGUUUUCAGGAAACUUGUAACCGAUC\
) } def
/len { sequence length } bind def

/coor [
[77.37152100 166.25767517]
[75.76837158 151.34358215]
[80.17153168 137.00440979]
[89.87059021 125.55868530]
[79.47750854 136.37458801]
[69.08443451 147.19050598]
[58.69135666 158.00642395]
[48.29828262 168.82232666]
[37.90520477 179.63824463]
[27.51212692 190.45416260]
[17.11905098 201.27006531]
[6.72597361 212.08598328]
[-3.66710353 222.90188599]
[-14.06018066 233.71780396]
[-24.45325661 244.53372192]
[-21.24726486 261.13586426]
[-28.49284363 276.22958374]
[-43.15828705 283.95672607]
[-59.37609863 281.44946289]
[-69.59538269 292.42971802]
[-68.77802277 308.21286011]
[-79.42234039 319.89508057]
[-95.21323395 320.54553223]
[-106.78225708 309.77828979]
[-107.26571655 293.98141479]
[-96.37677002 282.52685547]
[-80.57565308 282.21044922]
[-70.35636902 271.23019409]
[-74.12190247 258.41482544]
[-71.03575134 245.30784607]
[-61.80052185 235.36019897]
[-48.75203323 231.24520874]
[-35.26916885 234.14064026]
[-24.87609291 223.32472229]
[-14.48301506 212.50881958]
[-4.08993864 201.69290161]
[6.30313826 190.87698364]
[16.69621468 180.06108093]
[27.08929253 169.24516296]
[37.48236847 158.42926025]
[47.87544632 147.61334229]
[58.26852417 136.79742432]
[68.66159821 125.98152161]
[79.05467987 115.16560364]
[75.15313721 100.68189240]
[60.73348236 96.54988861]
[46.31382370 92.41787720]
[32.61034393 99.82411957]
[18.04562187 95.42826843]
[11.06935406 82.31845093]
[-3.35030389 78.18644714]
[-17.76996231 74.05443573]
[-32.18962097 69.92243195]
[-46.60927582 65.79042816]
[-61.02893448 61.65842438]
[-75.69998169 68.14995575]
[-89.85527039 60.59963989]
[-92.63607788 44.79943085]
[-81.90921021 32.86989594]
[-65.90339661 33.96235275]
[-56.89693069 47.23876572]
[-42.47727203 51.37076950]
[-28.05761337 55.50277710]
[-13.63795662 59.63478088]
[0.78170156 63.76678467]
[15.20135975 67.89878845]
[28.06208420 60.47333908]
[42.74452972 64.45836639]
[50.44582748 77.99822235]
[64.86548615 82.13022614]
[79.28514099 86.26222992]
[88.69082642 74.57749176]
[81.57377625 61.37342453]
[74.45671844 48.16934967]
[67.33966064 34.96527863]
[60.22260666 21.76120758]
[53.00049210 8.61430359]
[45.67378235 -4.47459793]
[38.34707260 -17.56349945]
[31.02036285 -30.65239906]
[16.65942955 -38.57045746]
[16.60677147 -54.96951675]
[30.91655922 -62.97963715]
[44.86811066 -54.36069107]
[44.10926437 -37.97911072]
[51.43597412 -24.89020729]
[58.76268387 -11.80130768]
[66.08939362 1.28759348]
[72.10675812 5.59363079]
[73.42667389 14.64415169]
[80.54373169 27.84822273]
[87.66078949 41.05229568]
[94.77784729 54.25636673]
[101.89489746 67.46044159]
[109.31778717 66.38769531]
[114.88259888 52.45812988]
[124.16355896 64.24221039]
[131.58644104 63.16947174]
[134.67391968 48.49065781]
[137.76138306 33.81184769]
[140.84884644 19.13303375]
[131.05352783 6.94346762]
[131.43684387 -8.68941689]
[141.81784058 -20.38424873]
[157.29490662 -22.61908722]
[170.56024170 -14.33870888]
[175.35038757 0.54714471]
[169.40354919 15.00982857]
[155.52766418 22.22050476]
[152.44020081 36.89931870]
[149.35272217 51.57812881]
[146.26525879 66.25694275]
[134.16781616 92.85923004]
[112.25162506 102.71520996]
[127.19396973 104.02916718]
[142.13630676 105.34311676]
[157.07864380 106.65707397]
[172.04003906 107.73258209]
[187.01667786 108.56937408]
[201.99331665 109.40616608]
[216.22334290 95.23733521]
[235.98205566 96.07003021]
[248.57507324 110.92102051]
[263.57458496 111.04062653]
[278.57412720 111.16022491]
[293.57363892 111.27983093]
[308.57315063 111.39942932]
[323.57269287 111.51903534]
[338.57220459 111.63863373]
[352.43362427 104.01161957]
[365.09881592 111.85015106]
[380.09832764 111.96975708]
[395.09786987 112.08935547]
[410.09738159 112.20896149]
[419.82751465 103.73059845]
[432.32537842 104.14556885]
[440.90261841 112.68563843]
[455.89831543 113.04441833]
[470.89401245 113.40319824]
[485.88973999 113.76197052]
[500.88543701 114.12075043]
[507.00482178 100.20594788]
[517.98681641 89.69573975]
[532.15673828 84.19285583]
[547.35375977 84.53645325]
[561.26049805 90.67412567]
[571.75628662 101.66992188]
[577.24047852 115.84707642]
[576.87689209 131.04365540]
[570.72094727 144.94232178]
[559.71136475 155.42359924]
[545.52703857 160.88917542]
[530.33093262 160.50559998]
[516.44036865 154.33135986]
[505.97357178 143.30798340]
[500.52667236 129.11645508]
[485.53094482 128.75767517]
[470.53524780 128.39891052]
[455.53955078 128.04013062]
[440.54382324 127.68135071]
[425.62295532 136.90968323]
[409.97778320 127.20848083]
[394.97824097 127.08888245]
[379.97872925 126.96927643]
[364.97921753 126.84967804]
[352.19064331 134.48524475]
[338.45260620 126.63816071]
[323.45309448 126.51855469]
[308.45355225 126.39895630]
[293.45404053 126.27935028]
[278.45449829 126.15975189]
[263.45498657 126.04014587]
[248.45545959 125.92054749]
[243.33813477 134.84194946]
[234.91004944 140.87641907]
[224.65698242 142.87750244]
[214.42115784 140.41723633]
[206.07023621 133.87542725]
[201.15652466 124.38281250]
[186.17988586 123.54602051]
[171.20324707 122.70922852]
[167.10162354 125.17623901]
[161.40475464 125.08486176]
[155.76469421 121.59941864]
[140.82235718 120.28546143]
[125.88001251 118.97150421]
[110.93767548 117.65754700]
[125.76888275 119.90146637]
[138.51603699 127.80780792]
[147.11654663 140.09727478]
[150.17883301 154.78137207]
[147.20736694 169.48410034]
[138.68298340 181.82649231]
[125.98493958 189.81147766]
[111.16788483 192.14703369]
[96.62928772 188.45524597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[19 28]
[20 27]
[45 71]
[46 70]
[47 69]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
[77 88]
[78 87]
[79 86]
[80 85]
[98 112]
[99 111]
[100 110]
[101 109]
[114 187]
[115 186]
[116 185]
[117 184]
[118 181]
[119 180]
[120 179]
[123 173]
[124 172]
[125 171]
[126 170]
[127 169]
[128 168]
[129 167]
[131 165]
[132 164]
[133 163]
[134 162]
[137 160]
[138 159]
[139 158]
[140 157]
[141 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
