%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUUUCCAAAAUGGACAAGUCCCUCUUGCUGGAACUCCCCAUCCUGCUCUGCUGCUUUAGGGCAUUAUCUGGAUCACUUUCAAUGAGAAAUGAUGCAGUCAAUGAAAUAG\
) } def
/len { sequence length } bind def

/coor [
[106.10625458 181.18359375]
[92.31871033 175.27568054]
[82.05773926 164.33436584]
[77.04590607 150.19641113]
[78.12456512 135.23524475]
[85.11140442 121.96397400]
[71.31380463 127.84838867]
[57.51621246 133.73280334]
[43.71861649 139.61721802]
[56.00156403 148.22705078]
[57.21218491 163.17811584]
[46.47447968 173.65197754]
[31.55815315 172.06983948]
[23.25650978 159.57653809]
[27.57709694 145.21147156]
[13.09724331 149.12731934]
[5.50319672 154.45954895]
[-1.83966994 152.94476318]
[-16.42278099 156.45657349]
[-31.00589371 159.96839905]
[-45.58900452 163.48020935]
[-55.15477753 176.35948181]
[-71.19266510 176.76672363]
[-81.39976501 164.38954163]
[-77.94606781 148.72264099]
[-63.48095322 141.78434753]
[-49.10082245 148.89709473]
[-34.51771164 145.38528442]
[-19.93459892 141.87347412]
[-5.35148716 138.36164856]
[9.18139935 134.64746094]
[23.66125298 130.73161316]
[37.83419800 125.81962585]
[51.63179398 119.93521118]
[65.42938995 114.05079651]
[79.22698212 108.16637421]
[65.18599701 102.88899231]
[63.71883774 87.96091461]
[76.46374512 80.05096436]
[89.19016266 87.99250793]
[85.47597504 73.45961761]
[81.76178741 58.92673111]
[68.04360962 55.82512665]
[57.07160950 47.13266754]
[50.97214890 34.60731506]
[50.89543533 20.74243355]
[56.79907990 8.27047729]
[67.46775055 -0.37549573]
[64.15898895 -15.00601387]
[50.66175079 -23.22794724]
[47.01279068 -38.60522461]
[55.37696457 -52.01477814]
[70.79196167 -55.50095749]
[84.11233521 -46.99547577]
[87.43534088 -31.54448318]
[78.78950500 -18.31478119]
[82.09827423 -3.68426251]
[97.58615875 0.69025809]
[108.84854889 12.31716061]
[112.77271271 28.11778450]
[108.20655060 43.84225464]
[96.29467773 55.21254349]
[100.00886536 69.74542999]
[103.72305298 84.27832031]
[115.37586975 93.72352600]
[130.36282349 94.34887695]
[145.34977722 94.97423553]
[160.33674622 95.59959412]
[171.91438293 85.17865753]
[187.10438538 86.02635193]
[196.96780396 97.12808990]
[211.95475769 97.75344849]
[226.94172668 98.37880707]
[241.05247498 91.22356415]
[253.44610596 99.48474884]
[268.43307495 100.11009979]
[283.42001343 100.73545837]
[298.40698242 101.36081696]
[307.25405884 98.56236267]
[313.80017090 102.21761322]
[328.76394653 103.25933838]
[343.72772217 104.30106354]
[358.69152832 105.34278870]
[371.69107056 95.94111633]
[387.10739136 100.38135529]
[393.11447144 115.25733948]
[385.10412598 129.15748596]
[369.22122192 131.41879272]
[357.64978027 120.30657196]
[342.68600464 119.26484680]
[327.72222900 118.22312164]
[312.75845337 117.18139648]
[297.78161621 116.34777832]
[282.79467773 115.72241974]
[267.80770874 115.09706116]
[252.82073975 114.47170258]
[239.78196716 121.67166901]
[226.31636047 113.36576080]
[211.32940674 112.74040222]
[196.34245300 112.11505127]
[185.58843994 122.35648346]
[170.38063049 121.93577576]
[159.71138000 110.58655548]
[144.72442627 109.96119690]
[129.73747253 109.33583832]
[114.75051117 108.71047974]
[129.30166626 112.35241699]
[141.17089844 121.52419281]
[148.36564636 134.68609619]
[149.67810059 149.62857056]
[144.88793945 163.84313965]
[134.79928589 174.94355774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 36]
[7 35]
[8 34]
[9 33]
[15 32]
[16 31]
[18 30]
[19 29]
[20 28]
[21 27]
[40 64]
[41 63]
[42 62]
[48 57]
[49 56]
[65 106]
[66 105]
[67 104]
[68 103]
[71 100]
[72 99]
[73 98]
[75 96]
[76 95]
[77 94]
[78 93]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
