%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCACACUGAACUCGCAUCAUCCGUGUCAACCAGCCAUGGGGAAGAUCACCUUCUAUGAGGACAGGGCCUUCCAGGGCCGCAGCUACGAAACCACCACUGACUGCCCCAACCUGCAGCCGUAUUUCAGCCGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[89.78419495 165.04389954]
[75.00425720 167.60386658]
[60.64161682 163.27784729]
[49.73419952 152.98085022]
[44.58910751 138.89085388]
[46.29460526 123.98812103]
[54.48995590 111.42483521]
[67.44171143 103.85832214]
[82.41165161 102.88925171]
[67.57323456 100.69353485]
[52.73480606 98.49781036]
[40.12684631 107.64533234]
[25.10985565 105.20718384]
[16.46679115 93.13105011]
[1.62836671 90.93533325]
[-13.21005726 88.73961639]
[-28.04848099 86.54389954]
[-32.26124954 94.39257050]
[-39.04505920 100.64032745]
[-47.78952408 104.44750214]
[-57.61240387 105.20727539]
[-67.44815826 102.63234711]
[-76.16355133 96.80819702]
[-82.68769836 88.20464325]
[-97.64078522 89.38998413]
[-112.59387970 90.57531738]
[-127.54697418 91.76065063]
[-142.50006104 92.94599152]
[-149.69827271 106.59111023]
[-163.14213562 114.15856171]
[-178.54174805 113.23359680]
[-190.98315430 104.11137390]
[-196.49635315 89.70275879]
[-193.32209778 74.60548401]
[-182.47328186 63.63704300]
[-167.41172791 60.29741669]
[-152.94351196 65.65227509]
[-143.68540955 77.99289703]
[-128.73231506 76.80755615]
[-113.77922058 75.62222290]
[-98.82612610 74.43688965]
[-83.87303162 73.25155640]
[-79.36693573 58.94438171]
[-90.94190216 49.40393829]
[-102.51686859 39.86349106]
[-114.09184265 30.32304382]
[-125.66680908 20.78259659]
[-141.70953369 20.88382339]
[-151.67868042 8.31417942]
[-147.92674255 -7.28397894]
[-133.33190918 -13.94508076]
[-119.09007263 -6.55929756]
[-116.12635803 9.20762920]
[-104.55139160 18.74807549]
[-92.97642517 28.28852272]
[-81.40145874 37.82896805]
[-69.82649231 47.36941528]
[-39.54477692 48.32934952]
[-25.85276413 71.70547485]
[-11.01434040 73.90119171]
[3.82408381 76.09690857]
[18.66250801 78.29262543]
[30.43252754 69.23712158]
[45.51208115 71.25251007]
[54.93052292 83.65939331]
[69.76895142 85.85511017]
[84.60736847 88.05082703]
[96.99640656 79.59435272]
[100.35782623 64.97584534]
[103.71923828 50.35733414]
[107.08065796 35.73882294]
[110.44207764 21.12031174]
[105.11896515 5.60913754]
[116.09304047 -6.57699203]
[132.07511902 -2.90203238]
[136.62420654 12.85353279]
[125.06058502 24.48172951]
[121.69917297 39.10023880]
[118.33775330 53.71875000]
[114.97633362 68.33726501]
[111.61491394 82.95577240]
[123.29695892 92.36480713]
[136.86358643 85.96585083]
[150.43020630 79.56689453]
[163.99684143 73.16793823]
[162.06913757 58.16329956]
[164.87445068 43.29772568]
[172.13796997 30.02758980]
[183.14807129 19.65296555]
[196.82611084 13.19025421]
[211.83203125 11.27260590]
[226.69572449 14.08789158]
[239.96099854 21.36030006]
[250.32823181 32.37735367]
[256.78176880 46.05971146]
[258.68936157 61.06691742]
[255.86413574 75.92871857]
[248.58283997 89.18910980]
[237.55883789 99.54897308]
[223.87216187 105.99334717]
[208.86367798 107.89088440]
[194.00376892 105.05567932]
[180.74826050 97.76550293]
[170.39579773 86.73456573]
[156.82916260 93.13352203]
[143.26254272 99.53247833]
[129.69590759 105.93143463]
[127.60511017 113.13410950]
[141.47479248 107.42167664]
[154.58863831 114.70362854]
[157.07189941 129.49664307]
[147.05467224 140.66156006]
[132.07995605 139.79115295]
[123.42350006 127.53945923]
[121.33268738 134.74214172]
[129.36436462 147.41069031]
[137.39604187 160.07923889]
[145.42771912 172.74778748]
[153.45939636 185.41633606]
[161.49107361 198.08488464]
[175.41499329 205.59719849]
[175.69506836 220.48918152]
[183.72673035 233.15773010]
[199.20169067 236.36729431]
[207.80467224 249.62490845]
[204.43167114 265.06506348]
[191.08384705 273.52737427]
[175.68020630 269.99133301]
[167.35948181 256.55477905]
[171.05818176 241.18940735]
[163.02650452 228.52084351]
[149.67706299 221.91467285]
[148.82252502 206.11656189]
[140.79084778 193.44801331]
[132.75917053 180.77946472]
[124.72749329 168.11091614]
[116.69581604 155.44236755]
[108.66413879 142.77381897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 67]
[10 66]
[11 65]
[14 62]
[15 61]
[16 60]
[17 59]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[82 107]
[83 106]
[84 105]
[85 104]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
