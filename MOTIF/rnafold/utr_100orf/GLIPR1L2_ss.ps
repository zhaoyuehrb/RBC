%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGACGGCCAGCGCGUGCGCACUGGCCUGUCAGCGGCCGGUGGACCAUGGAGGCCGCAAGGCCCUUCGCCCGGGAGUGGAGGGCCCAGUCCCUACCCCUGGCAGUAGGGGGCGUUUUGAAGCUGCGGCUCUGUGAGCUGUGGCUAC\
) } def
/len { sequence length } bind def

/coor [
[144.80242920 188.89576721]
[146.24162292 174.15100098]
[132.70741272 167.68376160]
[119.17320251 161.21650696]
[105.63899994 154.74926758]
[92.10478973 148.28202820]
[77.37769318 151.13026428]
[67.23080444 162.17745972]
[57.08391571 173.22467041]
[46.93702698 184.27186584]
[36.79013824 195.31907654]
[26.64325142 206.36627197]
[23.00636673 221.76379395]
[8.69851780 225.90321350]
[-1.44836974 236.95040894]
[-4.48660946 253.06565857]
[-20.04936790 258.23602295]
[-32.12701416 247.14265442]
[-28.29510117 231.19747925]
[-12.49557114 226.80352783]
[-2.34868360 215.75631714]
[0.56242865 201.14897156]
[15.59605026 196.21939087]
[25.74293709 185.17218018]
[35.88982391 174.12498474]
[46.03671265 163.07777405]
[56.18360138 152.03057861]
[66.33049011 140.98338318]
[64.67266846 133.66889954]
[51.78419113 141.34269714]
[40.50334549 131.45620728]
[46.42014313 117.67247009]
[61.35703278 119.03993225]
[59.69921494 111.72544861]
[45.78087997 106.13260651]
[31.86254311 100.53975677]
[17.94420815 94.94690704]
[4.02587318 89.35406494]
[-9.89246178 83.76121521]
[-20.79783440 94.39102173]
[-35.08616638 99.66012573]
[-50.28191757 98.65562439]
[-63.75233459 91.55155945]
[-73.16358185 79.57874298]
[-76.88510895 64.81154633]
[-74.27213287 49.80847168]
[-65.77737427 37.16889191]
[-52.87260056 29.08269310]
[-37.79363632 26.95085526]
[-23.15300560 31.14273453]
[-11.48728848 40.93206024]
[-4.81763935 54.62277603]
[-4.29961491 69.84288025]
[9.61872005 75.43572998]
[23.53705597 81.02857208]
[37.45539093 86.62142181]
[51.37372589 92.21427155]
[65.29206085 97.80711365]
[71.87988281 86.27452850]
[81.54643250 79.20141602]
[92.01067352 77.03094482]
[91.69229126 62.03432846]
[91.37390900 47.03770828]
[91.05553436 32.04108429]
[90.73715210 17.04446411]
[90.41876984 2.04784417]
[90.10038757 -12.94877625]
[89.78200531 -27.94539642]
[89.46363068 -42.94201660]
[89.14524841 -57.93864059]
[77.56325531 -68.69191742]
[77.06076813 -84.48822021]
[87.93589783 -95.95587158]
[103.73662567 -96.29132080]
[115.08866119 -85.29555511]
[115.25704193 -69.49216461]
[104.14186859 -58.25701904]
[104.46025085 -43.26039886]
[104.77862549 -28.26377869]
[105.09700775 -13.26715755]
[105.41539001 1.72946346]
[105.73377228 16.72608376]
[106.05215454 31.72270584]
[106.37052917 46.71932602]
[106.68891144 61.71594620]
[107.00729370 76.71257019]
[126.43640900 91.38423157]
[124.94039154 118.89725494]
[98.57203674 134.74781799]
[112.10624695 141.21505737]
[125.64044952 147.68229675]
[139.17465210 154.14955139]
[152.70886230 160.61679077]
[169.79171753 146.80273438]
[193.83897400 147.00798035]
[213.90502930 163.74473572]
[228.15106201 159.04896545]
[242.39710999 154.35317993]
[256.64315796 149.65740967]
[270.88919067 144.96163940]
[285.13522339 140.26585388]
[295.64697266 127.67875671]
[311.75503540 130.75483704]
[316.88882446 146.32969666]
[305.76712036 158.38125610]
[289.83099365 154.51190186]
[275.58496094 159.20767212]
[261.33892822 163.90345764]
[247.09288025 168.59922791]
[232.84683228 173.29499817]
[218.60079956 177.99078369]
[216.32864380 185.13832092]
[231.08200073 187.84730530]
[245.49777222 183.70178223]
[258.01638794 191.96519470]
[259.87033081 206.85018921]
[249.76113892 217.93190002]
[234.76890564 217.44914246]
[225.39376831 205.74076843]
[211.78433228 199.43339539]
[209.51216125 206.58093262]
[218.43167114 218.64088440]
[227.35116577 230.70085144]
[236.27066040 242.76080322]
[245.19015503 254.82075500]
[254.10964966 266.88070679]
[263.02914429 278.94067383]
[271.94863892 291.00064087]
[280.86816406 303.06057739]
[289.78765869 315.12054443]
[298.70715332 327.18051147]
[312.98684692 336.31976318]
[308.15777588 352.57141113]
[291.20440674 352.42996216]
[286.64718628 336.10000610]
[277.72769165 324.04003906]
[268.80819702 311.98010254]
[259.88870239 299.92013550]
[250.96919250 287.86016846]
[242.04969788 275.80023193]
[233.13020325 263.74026489]
[224.21070862 251.68029785]
[215.29121399 239.62034607]
[206.37170410 227.56039429]
[197.45220947 215.50042725]
[179.55987549 219.13470459]
[162.77485657 214.56419373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 93]
[3 92]
[4 91]
[5 90]
[6 89]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[14 21]
[15 20]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
[121 145]
[122 144]
[123 143]
[124 142]
[125 141]
[126 140]
[127 139]
[128 138]
[129 137]
[130 136]
[131 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
