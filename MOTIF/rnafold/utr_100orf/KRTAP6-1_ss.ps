%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGUGGCAGCUACUACGGAAACUACUAUGGCACCCCUGGCUAUGGGUUCUGUGGCUAUGGAGGCCUGGGCUAUGGCUAUGGAGGCCUGGGCUGUGGCU\
) } def
/len { sequence length } bind def

/coor [
[62.09873962 312.95388794]
[46.36320877 311.48126221]
[36.34228134 299.26010132]
[37.98119736 283.54101562]
[50.30761719 273.64987183]
[51.70530319 258.71511841]
[45.18758392 245.32228088]
[54.17711258 232.30310059]
[55.57480240 217.36836243]
[56.97249222 202.43362427]
[58.37017822 187.49887085]
[59.76786804 172.56413269]
[61.16555786 157.62939453]
[51.15650558 168.80163574]
[38.12568283 176.23114014]
[23.41318130 179.15386963]
[8.53204727 177.26922607]
[-4.98733521 170.77105713]
[-15.75462341 160.32760620]
[-22.66250420 147.01290894]
[-25.00056458 132.19625854]
[-22.52835846 117.40138245]
[-15.50012970 104.14981842]
[-4.63866377 93.80435181]
[8.93903732 87.42893219]
[23.83663559 85.67919922]
[38.52205276 88.73509979]
[51.48503113 96.28236389]
[61.39244843 107.54483032]
[67.22541809 121.36425018]
[68.38414001 136.31878662]
[76.35050201 123.60906219]
[84.31687164 110.89934540]
[81.17934418 96.75360107]
[88.87459564 84.47641754]
[102.97341156 81.13428497]
[110.93977356 68.42456818]
[111.71299744 52.62226486]
[125.02826691 45.94747162]
[132.99462891 33.23775101]
[140.96099854 20.52803230]
[148.92736816 7.81831169]
[156.89373779 -4.89140892]
[164.86010742 -17.60112953]
[172.82646179 -30.31085014]
[180.79283142 -43.02056885]
[188.75920105 -55.73028946]
[190.72169495 -64.83750153]
[197.17616272 -68.70600128]
[205.53395081 -81.16181946]
[213.89173889 -93.61763763]
[211.13981628 -104.37091064]
[214.78309631 -114.62065887]
[223.34823608 -120.96042633]
[233.77201843 -121.43054962]
[242.88801575 -133.34268188]
[252.00399780 -145.25480652]
[261.11999512 -157.16693115]
[260.43917847 -173.19552612]
[272.64041138 -183.61231995]
[288.36395264 -180.42642212]
[295.54803467 -166.08180237]
[288.68167114 -151.58239746]
[273.03210449 -148.05093384]
[263.91613770 -136.13880920]
[254.80014038 -124.22668457]
[245.68414307 -112.31455994]
[244.78770447 -93.10494995]
[226.34754944 -85.25985718]
[217.98976135 -72.80403900]
[209.63198853 -60.34821701]
[201.46891785 -47.76392365]
[193.50254822 -35.05420303]
[185.53619385 -22.34448242]
[177.56982422 -9.63476276]
[169.60345459 3.07495809]
[161.63708496 15.78467846]
[153.67071533 28.49440002]
[145.70434570 41.20412064]
[137.73799133 53.91384125]
[137.53457642 68.80706024]
[123.64949799 76.39093781]
[115.68312836 89.10065460]
[118.82065582 103.24639893]
[111.12540436 115.52358246]
[97.02658844 118.86571503]
[89.06022644 131.57543945]
[81.09385681 144.28515625]
[81.57037354 150.28549194]
[79.66522980 155.47236633]
[76.10029602 159.02708435]
[74.70260620 173.96182251]
[73.30491638 188.89656067]
[71.90723419 203.83129883]
[70.50954437 218.76605225]
[69.11185455 233.70079041]
[75.52960205 248.16188049]
[66.64004517 260.11282349]
[65.24235535 275.04754639]
[75.51944733 287.05410767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[31 88]
[32 87]
[33 86]
[36 83]
[37 82]
[39 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[49 71]
[50 70]
[51 69]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
