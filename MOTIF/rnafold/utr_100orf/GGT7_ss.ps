%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUUCCGGCAGGCGCUGCGCUGCUGGGGGGCGCGGGCGAGGAUGGCGGCGGAGAACGAGGCCAGCCAGGAGAGCGCCCUGGGCGCCUACUCGCCAGUGGACUACAUGAGCAUCACCAGCUUCCCGCGGCUGCCCGAGGACG\
) } def
/len { sequence length } bind def

/coor [
[82.67113495 482.92407227]
[74.91959381 469.34292603]
[77.76221466 453.96588135]
[89.85679626 444.05349731]
[89.85679626 429.05349731]
[89.85679626 414.05349731]
[89.85679626 399.05349731]
[82.11949921 386.32623291]
[89.85679626 372.52606201]
[89.85679626 357.52606201]
[89.85679626 342.52606201]
[89.85679626 327.52606201]
[89.85679626 312.52606201]
[82.11949921 299.79879761]
[89.85679626 285.99862671]
[89.85679626 270.99862671]
[89.85679626 255.99861145]
[77.04277039 250.58003235]
[67.24087524 240.64559937]
[61.96214294 227.67955017]
[62.03833389 213.63693237]
[67.49105072 200.64884949]
[77.52345276 190.69908142]
[90.63650513 185.32101440]
[90.96372986 170.32456970]
[91.29094696 155.32814026]
[91.61817169 140.33171082]
[91.94539642 125.33528900]
[74.32102203 106.88066101]
[80.35686493 82.08630371]
[72.57526398 69.26262665]
[64.79367065 56.43894577]
[57.01206970 43.61526489]
[49.23047256 30.79158783]
[41.44887161 17.96791077]
[33.25186157 5.40570545]
[24.64821434 -6.88157558]
[16.04456711 -19.16885567]
[7.44092083 -31.45613670]
[-1.16272557 -43.74341583]
[-18.56142426 -41.78173065]
[-34.49498367 -48.82392883]
[-44.65274811 -62.86723328]
[-46.33594894 -80.02825165]
[-39.17423248 -95.61666870]
[-48.30565262 -107.51696777]
[-57.43707657 -119.41726685]
[-66.56849670 -131.31756592]
[-75.82918549 -143.11755371]
[-85.21804047 -154.81582642]
[-94.60688782 -166.51408386]
[-109.77461243 -164.09837341]
[-124.11236572 -169.60514832]
[-133.76335144 -181.55311584]
[-136.13151550 -196.72833252]
[-130.57983398 -211.04875183]
[-118.60166931 -220.66224670]
[-103.41909790 -222.98283386]
[-89.11614990 -217.38627625]
[-79.54025269 -205.37805176]
[-77.26726532 -190.18827820]
[-82.90862274 -175.90293884]
[-73.51976776 -164.20468140]
[-64.13092041 -152.50640869]
[-57.44055939 -149.23390198]
[-54.66819763 -140.44898987]
[-45.53677368 -128.54869080]
[-36.40535355 -116.64839172]
[-27.27393341 -104.74809265]
[-14.91583443 -107.74507141]
[-2.29978108 -105.81251526]
[8.67490196 -99.20528412]
[16.34230042 -88.88472748]
[19.52276421 -76.37888336]
[17.70428658 -63.55635834]
[11.12455463 -52.34706497]
[19.72820091 -40.05978394]
[28.33184814 -27.77250290]
[36.93549347 -15.48522186]
[45.53914261 -3.19794130]
[49.00725174 -2.24122906]
[52.16549683 0.48767203]
[54.16529465 4.81523991]
[54.27254868 10.18631172]
[62.05414963 23.00999069]
[69.83574677 35.83366776]
[77.61734772 48.65734482]
[85.39894867 61.48102570]
[93.18054199 74.30470276]
[100.15400696 73.41561127]
[107.11669159 74.38543701]
[113.58174896 77.14634705]
[119.09710693 81.50530243]
[123.27709961 87.15749359]
[137.92153931 83.91090393]
[146.43275452 70.86494446]
[161.33055115 67.78105164]
[173.71542358 75.97558594]
[188.35986328 72.72899628]
[203.00430298 69.48239899]
[212.80223083 56.77884674]
[228.84486389 56.66271591]
[238.82566833 69.22309113]
[235.08822632 84.82472992]
[220.49958801 91.49938965]
[206.25090027 84.12683868]
[191.60646057 87.37343597]
[176.96202087 90.62002563]
[169.20066833 103.28087616]
[154.39537048 106.78199768]
[141.16813660 98.55534363]
[126.52369690 101.80193329]
[125.27190399 108.25130463]
[122.47676849 114.19676208]
[118.30897522 119.27523041]
[113.02306366 123.17656708]
[106.94182587 125.66250610]
[106.61460114 140.65893555]
[106.28738403 155.65536499]
[105.96015930 170.65179443]
[105.63293457 185.64822388]
[120.16609955 192.88435364]
[130.06787109 205.67687988]
[133.40559387 221.44644165]
[129.56376648 237.04107666]
[119.35673523 249.36616516]
[104.85679626 255.99861145]
[104.85679626 270.99862671]
[104.85679626 285.99862671]
[112.59410095 299.79879761]
[104.85679626 312.52606201]
[104.85679626 327.52606201]
[104.85679626 342.52606201]
[104.85679626 357.52606201]
[104.85679626 372.52606201]
[112.59410095 386.32623291]
[104.85679626 399.05349731]
[104.85679626 414.05349731]
[104.85679626 429.05349731]
[104.85679626 444.05349731]
[116.95137787 453.96588135]
[119.79399872 469.34292603]
[112.04245758 482.92407227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 140]
[5 139]
[6 138]
[7 137]
[9 135]
[10 134]
[11 133]
[12 132]
[13 131]
[15 129]
[16 128]
[17 127]
[24 121]
[25 120]
[26 119]
[27 118]
[28 117]
[30 89]
[31 88]
[32 87]
[33 86]
[34 85]
[35 84]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[45 69]
[46 68]
[47 67]
[48 66]
[49 64]
[50 63]
[51 62]
[94 112]
[95 111]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
