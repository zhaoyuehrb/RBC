%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGGGGCUUUUGAUCUGGACACUGCUAGCUCUGCAUCAGAUCCGCGCGGCCAGAGCCCAAGAUGAUGUGUCCCCGUAUUUCAAGACAGAGCCUGUGC\
) } def
/len { sequence length } bind def

/coor [
[81.29313660 339.90313721]
[68.40680695 328.88592529]
[75.42616272 313.45333862]
[76.35870361 298.48233032]
[77.29125214 283.51135254]
[70.36016846 270.32766724]
[78.94045258 257.03521729]
[79.87299347 242.06423950]
[80.80554199 227.09326172]
[81.73808289 212.12226868]
[82.67063141 197.15129089]
[83.60317230 182.18031311]
[80.82842255 175.18557739]
[84.80467224 166.76049805]
[86.20236206 151.82574463]
[83.64649200 144.74810791]
[87.88283539 136.45075989]
[89.74432373 121.56671143]
[91.60580444 106.68266296]
[91.13930511 91.68991852]
[88.35608673 76.95039368]
[85.57286835 62.21086502]
[82.78965759 47.47133636]
[80.00643921 32.73180771]
[77.22322083 17.99227715]
[60.09700394 7.81682396]
[55.76036072 -11.32122517]
[66.49673462 -27.38992882]
[62.35221100 -41.80599213]
[47.19799805 -54.91836548]
[52.22381210 -73.48052979]
[47.19105911 -87.61104584]
[42.15830994 -101.74156189]
[37.12556076 -115.87207031]
[32.09281158 -130.00259399]
[26.84091377 -144.05313110]
[21.37114143 -158.02027893]
[6.17243767 -158.28079224]
[-7.76764822 -164.34234619]
[-18.32335472 -175.28060913]
[-23.88501358 -189.42756653]
[-23.60451317 -204.62591553]
[-17.52462578 -218.55801392]
[-6.57249069 -229.09931946]
[7.58177042 -234.64236450]
[22.77973557 -234.34187317]
[36.70382690 -228.24366760]
[47.23071671 -217.27766418]
[52.75513840 -203.11613464]
[52.43465042 -187.91857910]
[46.31813049 -174.00251770]
[35.33830261 -163.49005127]
[40.80807495 -149.52290344]
[46.27448654 -144.35145569]
[46.22332382 -135.03533936]
[51.25607300 -120.90482330]
[56.28882599 -106.77430725]
[61.32157516 -92.64379883]
[66.35432434 -78.51328278]
[76.13401794 -74.87543488]
[82.34781647 -66.21847534]
[82.67925262 -55.34553146]
[76.76827240 -45.95051956]
[80.91280365 -31.53445435]
[91.19086456 -29.07317924]
[99.52511597 -22.44209480]
[104.30581665 -12.83357048]
[104.57237244 -2.02297187]
[100.20552826 7.95928049]
[91.96275330 15.20906162]
[94.74596405 29.94858932]
[97.52918243 44.68811798]
[100.31240082 59.42764664]
[103.09561920 74.16717529]
[105.87882996 88.90670776]
[113.85406494 76.20254517]
[127.01612854 69.00809479]
[142.01541138 69.15425873]
[155.03477478 76.60384369]
[162.76092529 89.46101379]
[163.22763062 104.45375061]
[156.31613159 117.76657104]
[143.78533936 126.01151276]
[128.82418823 127.09031677]
[115.24011993 120.72845459]
[106.48985291 108.54414368]
[104.62836456 123.42819214]
[102.76688385 138.31224060]
[101.13710785 153.22343445]
[99.73941803 168.15818787]
[98.57415771 183.11285400]
[97.64161682 198.08383179]
[96.70906830 213.05482483]
[95.77652740 228.02580261]
[94.84397888 242.99678040]
[93.91143799 257.96777344]
[100.77581787 272.22225952]
[92.26222992 284.44390869]
[91.32968903 299.41488647]
[90.39714813 314.38586426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[14 90]
[15 89]
[17 88]
[18 87]
[19 86]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[28 64]
[29 63]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 53]
[37 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
