%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACUCCCAUCUCUCAUCAGCAUGUCCUACAACUGCUGCUCUAGAAACUUCUCCUCCCGCUCCUUUGGGGGCUACCUGUACUACCCAGGCUCCUACCCCAGCAGCCUGGUCUACAGCACUG\
) } def
/len { sequence length } bind def

/coor [
[120.82156372 178.48995972]
[109.70706177 180.62248230]
[98.40401459 181.18907166]
[87.13197327 180.17871094]
[76.10987091 177.61103821]
[65.55178070 173.53591919]
[55.66278458 168.03251648]
[46.63495255 161.20770264]
[38.64363098 153.19406128]
[31.84403992 144.14721680]
[26.36824417 134.24290466]
[22.32260513 123.67348480]
[19.78569794 112.64425659]
[4.81626701 113.60140228]
[-10.15316391 114.55855560]
[-18.95704460 128.93580627]
[-34.42605209 135.21054077]
[-50.43734360 131.11120605]
[-60.77856445 118.43115997]
[-75.71866608 119.77030182]
[-90.65877533 121.10944366]
[-105.59887695 122.44857788]
[-120.53897858 123.78771973]
[-128.92022705 127.71028900]
[-135.87695312 124.96527863]
[-150.84638977 125.92243195]
[-161.09634399 137.95213318]
[-176.85688782 139.12730408]
[-188.77755737 128.75073242]
[-189.78602600 112.97865295]
[-179.28399658 101.16836548]
[-163.50213623 100.32669830]
[-151.80354309 110.95300293]
[-136.83410645 109.99584961]
[-121.87812042 108.84761047]
[-106.93801880 107.50847626]
[-91.99790955 106.16933441]
[-77.05780792 104.83020020]
[-62.11770248 103.49105835]
[-56.31900787 91.39417267]
[-45.19421768 83.70489502]
[-31.61217117 82.53708649]
[-19.14089775 88.30567932]
[-11.11031532 99.58912659]
[3.85911512 98.63197327]
[18.82854652 97.67481995]
[19.71230507 87.83046722]
[21.78551483 78.16640472]
[25.01746178 68.82580566]
[29.36026573 59.94704437]
[34.74958801 51.66166306]
[41.10558319 44.09240723]
[48.33409119 37.35141373]
[56.32802200 31.53855133]
[64.96894836 26.73993683]
[74.12886047 23.02665901]
[83.67204285 20.45372963]
[93.45712280 19.05926704]
[103.33913422 18.86393166]
[113.17167664 19.87061501]
[116.96136475 5.35723352]
[120.75106049 -9.15614796]
[124.54074860 -23.66952896]
[128.33044434 -38.18291092]
[123.46559143 -53.84386063]
[134.79315186 -65.70213318]
[150.66027832 -61.55894852]
[154.74426270 -45.67646790]
[142.84382629 -34.39321899]
[139.05412292 -19.87983894]
[135.26443481 -5.36645746]
[131.47474670 9.14692402]
[127.68505859 23.66030502]
[151.76283264 37.43146896]
[169.80113220 58.50285721]
[179.69534302 84.41594696]
[180.29106140 112.14732361]
[194.85165405 115.75136566]
[209.41224670 119.35540009]
[223.97283936 122.95944214]
[238.53343201 126.56348419]
[247.43540955 118.47625732]
[259.03063965 115.77208710]
[270.35986328 119.02057648]
[278.59008789 127.28730011]
[281.72293091 138.39862061]
[296.08050537 142.74143982]
[310.43807983 147.08424377]
[324.79565430 151.42706299]
[339.15322876 155.76986694]
[353.51080322 160.11268616]
[367.86837769 164.45549011]
[383.31762695 161.04499817]
[393.25970459 172.13574219]
[407.61727905 176.47854614]
[422.38186646 170.20265198]
[436.42501831 177.95953369]
[438.97406006 193.79878235]
[428.07357788 205.56988525]
[412.08547974 204.24305725]
[403.27447510 190.83612061]
[388.91690063 186.49331665]
[374.49459839 190.21443176]
[363.52557373 178.81306458]
[349.16799927 174.47026062]
[334.81042480 170.12744141]
[320.45285034 165.78463745]
[306.09527588 161.44181824]
[291.73770142 157.09901428]
[277.38012695 152.75619507]
[261.90576172 162.37635803]
[243.97750854 157.66430664]
[234.92939758 141.12408447]
[220.36880493 137.52003479]
[205.80821228 133.91600037]
[191.24760437 130.31195068]
[176.68701172 126.70791626]
[172.22912598 137.11016846]
[166.36831665 146.79164124]
[159.21844482 155.56427002]
[150.91836548 163.25765991]
[141.62928772 169.72241211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 46]
[14 45]
[15 44]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[25 34]
[26 33]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[77 117]
[78 116]
[79 115]
[80 114]
[81 113]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[92 104]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
