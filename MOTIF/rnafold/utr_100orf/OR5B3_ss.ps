%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAUAAGACAGAAGUAACACAAUUCAUUCUUCUAGGACUAACCAAUGACUCAGAACUGCAGGUUCCCCUCUUUAUAACGUUCCCCUUCAUCUAUA\
) } def
/len { sequence length } bind def

/coor [
[140.93338013 292.04116821]
[148.50419617 278.88641357]
[160.31825256 269.35794067]
[155.72740173 255.07772827]
[151.13653564 240.79753113]
[146.54568481 226.51733398]
[127.74575043 221.92501831]
[115.22596741 206.98504639]
[113.97499084 187.39314270]
[124.64356232 170.74719238]
[118.31603241 157.14709473]
[111.98851013 143.54701233]
[105.66098785 129.94691467]
[82.62696838 125.04081726]
[69.96659088 105.18254852]
[55.01191711 104.01729584]
[40.05724716 102.85203552]
[25.10257530 101.68677521]
[10.14790535 100.52152252]
[3.28856945 114.08683777]
[-8.24311256 123.99081421]
[-22.68864250 128.72315979]
[-37.84518051 127.56223297]
[-51.40146637 120.68505859]
[-61.29026794 109.14035797]
[-66.00360870 94.68862152]
[-64.82273865 79.53362274]
[-57.92773819 65.98638916]
[-46.37004089 56.11278915]
[-31.91210938 51.41846085]
[-16.75867844 52.61926270]
[-3.22053146 59.53207779]
[6.63785982 71.10275269]
[11.31316280 85.56684875]
[26.26783371 86.73210907]
[41.22250366 87.89736176]
[56.17717361 89.06262207]
[71.13184357 90.22788239]
[72.57091522 77.21201324]
[80.03573608 64.36881256]
[74.13423157 50.57851410]
[59.83643341 43.30166626]
[56.75244522 27.55782509]
[67.24803925 15.42431545]
[83.27189636 16.20892906]
[92.53188324 29.30977631]
[87.92453003 44.67700958]
[93.82603455 58.46730423]
[101.14894867 60.08744049]
[102.58131409 45.15598297]
[97.11791992 31.18632698]
[104.20019531 17.96356964]
[118.85633087 14.77018833]
[130.79760742 23.84796333]
[131.64114380 38.82422638]
[120.79471588 49.18554306]
[115.79479218 63.32770538]
[123.11771393 64.94783783]
[134.28567505 54.93401718]
[145.45364380 44.92019653]
[156.62159729 34.90637207]
[167.78956604 24.89255142]
[175.54582214 9.81684875]
[192.17950439 13.09661770]
[193.63256836 29.98818207]
[177.80337524 36.06051254]
[166.63542175 46.07433701]
[155.46745300 56.08815765]
[144.29949951 66.10198212]
[133.13153076 76.11579895]
[137.09268188 90.65562439]
[135.35443115 104.65954590]
[128.87886047 116.11061859]
[119.26107025 123.61939240]
[125.58860016 137.21948242]
[131.91612244 150.81956482]
[138.24365234 164.41966248]
[149.24630737 164.26892090]
[159.60435486 167.86624146]
[168.08489990 174.75544739]
[173.68814087 184.09028625]
[175.76510620 194.73825073]
[174.09278870 205.41796875]
[168.89776611 214.85345459]
[160.82588196 221.92648315]
[165.41673279 236.20668030]
[170.00759888 250.48687744]
[174.59844971 264.76705933]
[189.75189209 265.62594604]
[203.57019043 271.90441895]
[214.18450928 282.75341797]
[220.15936279 296.70568848]
[220.68670654 311.87426758]
[215.69520569 326.20779419]
[205.85993958 337.76770020]
[192.51104736 344.99066162]
[177.45382690 346.89984131]
[162.72468567 343.23696899]
[150.31558228 334.49749756]
[141.90476990 321.86331177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[10 77]
[11 76]
[12 75]
[13 74]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[40 48]
[41 47]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
