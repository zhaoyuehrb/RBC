%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGAGCUUUGCCCCUAAUGCUUCACACUCUCCGGUUUUUUUGCUCCUUGGGUUCUCGAGAGCUAACAUCUCCUACACUCUCCUCUUCUUCCUGUUCC\
) } def
/len { sequence length } bind def

/coor [
[191.30931091 229.15060425]
[196.91172791 215.18601990]
[205.05593872 202.53421021]
[194.20480347 192.17790222]
[183.35366821 181.82160950]
[172.50254822 171.46530151]
[161.33457947 161.45149231]
[149.86059570 151.78982544]
[138.38659668 142.12817383]
[126.91261292 132.46652222]
[115.43862915 122.80486298]
[103.96463776 113.14320374]
[91.77477264 104.40209198]
[78.94269562 96.63434601]
[66.11061859 88.86660004]
[53.27854538 81.09885406]
[40.48064804 89.34355927]
[25.43350601 91.20650482]
[11.12821579 86.37133789]
[0.38499540 75.84782410]
[-4.70277739 61.76152039]
[-3.17634654 46.92455673]
[-16.00842094 39.15681458]
[-29.48458481 48.12379837]
[-45.45911407 50.35086060]
[-60.76386642 45.44694519]
[-72.38545227 34.43025589]
[-78.05855560 19.51729774]
[-76.70738983 3.67706037]
[-89.77483368 -3.68785095]
[-102.84227753 -11.05276203]
[-119.22600555 -10.34177017]
[-127.80416107 -24.31843758]
[-119.75228119 -38.60476685]
[-103.35343933 -38.50420761]
[-95.47736359 -24.12020493]
[-82.40991974 -16.75529480]
[-69.34247589 -9.39038372]
[-58.28351212 -17.91813660]
[-44.75832367 -21.56651306]
[-30.82460594 -19.74588585]
[-18.61547852 -12.70130825]
[-10.01293755 -1.48013961]
[-6.35777426 12.22355843]
[-8.24067688 26.32473755]
[4.59139776 34.09248352]
[17.02936554 25.86068916]
[31.86900711 23.83720589]
[46.17419434 28.47645569]
[57.09104919 38.90921402]
[62.41727066 53.10493088]
[61.04629135 68.26678467]
[73.87836456 76.03452301]
[86.71044159 83.80226898]
[99.54251862 91.57001495]
[102.18841553 90.93712616]
[105.14175415 91.18579102]
[108.09917450 92.43120575]
[110.72019958 94.68322754]
[112.66360474 97.83587646]
[113.62629700 101.66921997]
[125.10028076 111.33087158]
[136.57426453 120.99253082]
[148.04826355 130.65419006]
[159.52224731 140.31584167]
[170.99623108 149.97749329]
[177.70903015 151.57673645]
[181.86492920 155.77651978]
[182.85884094 160.61418152]
[193.70997620 170.97047424]
[204.56109619 181.32678223]
[215.41223145 191.68307495]
[227.67042542 182.95764160]
[241.35850525 176.71002197]
[255.98167419 173.16603088]
[271.01129150 172.45382690]
[285.90402222 174.59912109]
[300.12158203 179.52436829]
[313.14993286 187.05152893]
[324.51815796 196.90850830]
[333.81527710 208.73898315]
[340.70523071 222.11526489]
[344.93893433 236.55383301]
[346.36334229 251.53274536]
[344.92694092 266.51049805]
[340.68170166 280.94567871]
[333.78106689 294.31646729]
[324.47448730 306.13949585]
[313.09838867 315.98736572]
[300.06402588 323.50411987]
[285.84252930 328.41799927]
[270.94808960 330.55139160]
[255.91903687 329.82714844]
[241.29872131 326.27148438]
[227.61563110 320.01290894]
[215.36442566 311.27767944]
[204.98796082 300.38156128]
[196.86132812 287.71844482]
[191.27832031 273.74609375]
[188.44076538 258.96960449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[6 69]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 55]
[14 54]
[15 53]
[16 52]
[22 46]
[23 45]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
