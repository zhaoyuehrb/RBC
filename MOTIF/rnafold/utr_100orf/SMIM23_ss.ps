%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAACCCAGCAAGUGGACAGCAGAAGGCAGGUGGCAGCAGAGCAGGUGGCAGCCCAGCUGCUUGAACGGAGAAGGGGCAGCCACUGUGAUGACGAGA\
) } def
/len { sequence length } bind def

/coor [
[38.13251877 159.29025269]
[30.97507858 156.22245789]
[24.87562180 151.41717529]
[20.24437904 145.21232605]
[5.76560402 149.13215637]
[-5.53310966 160.20687866]
[-19.84005737 156.06436157]
[-34.31883240 159.98419189]
[-48.79760742 163.90400696]
[-55.96647644 174.76515198]
[-68.23931885 177.66374207]
[-78.81105804 171.55995178]
[-93.40473938 175.02760315]
[-99.63584900 190.66087341]
[-113.78240967 199.46838379]
[-130.23170471 198.18624878]
[-142.59283447 187.50886536]
[-157.07160950 191.42869568]
[-166.27204895 204.57144165]
[-182.29219055 205.42875671]
[-192.84272766 193.34300232]
[-189.83021545 177.58532715]
[-175.56558228 170.24366760]
[-160.99143982 176.94992065]
[-146.51266479 173.03009033]
[-142.89292908 160.07810974]
[-133.23698425 150.56188965]
[-120.02316284 147.07575989]
[-106.71922302 150.64645386]
[-96.87238312 160.43392944]
[-82.27870178 156.96627808]
[-70.30162811 144.24420166]
[-52.71743774 149.42523193]
[-38.23866272 145.50540161]
[-23.75988579 141.58558655]
[-13.49679089 130.79122925]
[1.84577537 134.65338135]
[16.32455063 130.73355103]
[24.81639862 109.32420349]
[46.27883148 100.32195282]
[67.94869232 109.45517731]
[81.01613617 102.09027100]
[85.01219940 88.16268158]
[97.63493347 81.04840851]
[111.61894989 84.84228516]
[124.68639374 77.47737885]
[137.75384521 70.11246490]
[150.82128906 62.74755478]
[156.89337158 55.68197632]
[164.41163635 55.36402893]
[177.70181274 48.40907669]
[190.99198914 41.45412445]
[204.28215027 34.49917221]
[212.92175293 21.24519730]
[227.78576660 22.19936180]
[241.07594299 15.24440956]
[254.36610413 8.28945637]
[267.65628052 1.33450317]
[271.68087769 -4.27099848]
[277.14266968 -6.52460766]
[281.99603271 -5.61044121]
[295.69287109 -11.72569561]
[305.13977051 -24.41690826]
[319.91567993 -22.54050064]
[333.61254883 -28.65575409]
[347.30938721 -34.77100754]
[354.36300659 -49.18024826]
[370.05697632 -52.50870895]
[382.35223389 -42.20307922]
[381.81692505 -26.16896057]
[368.86166382 -16.70635223]
[353.42465210 -21.07415962]
[339.72778320 -14.95890522]
[326.03094482 -8.84365082]
[317.56375122 3.41015768]
[301.80813599 1.97115314]
[288.11126709 8.08640766]
[274.61123657 14.62467384]
[261.32107544 21.57962608]
[248.03089905 28.53458023]
[234.74072266 35.48953247]
[227.05171204 48.24604034]
[211.23710632 47.78934097]
[197.94692993 54.74429321]
[184.65676880 61.69924545]
[171.36659241 68.65419769]
[158.18618774 75.81499481]
[145.11874390 83.17990875]
[132.05130005 90.54482269]
[118.98386383 97.90972900]
[114.98780060 111.83731842]
[102.36506653 118.95159149]
[88.38105011 115.15771484]
[75.31360626 122.52262115]
[76.29073334 130.42782593]
[75.18739319 138.29391479]
[72.09053040 145.58422852]
[67.22267151 151.80444336]
[60.92602158 156.53604126]
[53.63837814 159.46446228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 38]
[5 37]
[7 35]
[8 34]
[9 33]
[12 31]
[13 30]
[17 25]
[18 24]
[41 94]
[42 93]
[45 90]
[46 89]
[47 88]
[48 87]
[50 86]
[51 85]
[52 84]
[53 83]
[55 81]
[56 80]
[57 79]
[58 78]
[61 77]
[62 76]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
