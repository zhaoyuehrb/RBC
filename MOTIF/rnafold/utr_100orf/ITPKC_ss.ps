%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCGGCCGAAGCCCGAACCGAAGGAGCGGGCAUGAGGCGCUGCCCGUGCCGUGGGAGCCUGAACGAGGCGGAGGCCGGGGCGCUGCCCGCGGCGGCCCGCAUGGGACUGGAGGCGCCGCGAGGAGGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[29.03103638 172.58149719]
[29.14563179 187.58105469]
[19.74455452 199.26950073]
[5.06921577 202.37344360]
[-8.25942230 195.49249268]
[-14.22798061 181.73109436]
[-10.14406776 167.29841614]
[-23.52509499 174.07691956]
[-36.90612030 180.85542297]
[-39.33840942 197.54881287]
[-51.10010529 209.41000366]
[-67.44509125 211.93226624]
[-81.94194031 204.32228088]
[-95.16038513 211.41261292]
[-108.37882996 218.50294495]
[-121.59727478 225.59326172]
[-134.81571960 232.68359375]
[-139.47682190 247.54669189]
[-152.98321533 254.54899597]
[-167.12417603 250.01374817]
[-180.34262085 257.10406494]
[-191.44250488 269.91925049]
[-206.82962036 262.80078125]
[-204.24890137 246.04438782]
[-187.43295288 243.88563538]
[-174.21450806 236.79530334]
[-170.17098999 222.50595093]
[-156.86660767 215.12704468]
[-141.90603638 219.46514893]
[-128.68760681 212.37481689]
[-115.46915436 205.28450012]
[-102.25070953 198.19416809]
[-89.03227234 191.10383606]
[-88.44470215 177.71443176]
[-81.24004364 166.28482056]
[-69.22177124 159.87785339]
[-55.49951172 160.27317810]
[-43.68462753 167.47439575]
[-30.30359840 160.69589233]
[-16.92257309 153.91738892]
[-4.14216614 146.06492615]
[7.95161438 137.19134521]
[20.04539490 128.31774902]
[32.13917542 119.44416809]
[44.23295593 110.57058716]
[56.32673645 101.69700623]
[68.42051697 92.82342529]
[75.04170227 79.36385345]
[74.69006348 64.36798096]
[74.33842468 49.37210083]
[73.98678589 34.37622452]
[73.63514709 19.38034630]
[65.57646179 5.76534796]
[73.01327515 -7.13980865]
[72.66163635 -22.13568687]
[72.30999756 -37.13156509]
[57.05993271 -50.07662201]
[56.10916519 -69.75581360]
[69.62068176 -83.67812347]
[68.21605682 -98.61221313]
[66.81143951 -113.54630280]
[65.40681458 -128.48039246]
[54.01700974 -139.77870178]
[55.89213181 -155.71179199]
[69.59375000 -164.05715942]
[84.61115265 -158.41296387]
[89.42427826 -143.10893250]
[80.34090424 -129.88500977]
[81.74552917 -114.95092773]
[83.15014648 -100.01683807]
[84.55477142 -85.08274841]
[94.07361603 -80.83077240]
[100.98493958 -72.91732788]
[103.96292114 -62.75685883]
[102.39299774 -52.20382309]
[96.49725342 -43.21425247]
[87.30587769 -37.48320389]
[87.65751648 -22.48732567]
[88.00915527 -7.49144745]
[96.04268646 5.05094481]
[88.63102722 19.02870750]
[88.98266602 34.02458572]
[89.33430481 49.02046204]
[89.68594360 64.01634216]
[90.03758240 79.01221466]
[103.86699677 78.79367065]
[114.31513214 86.20566559]
[118.01696014 97.40000916]
[132.42723083 101.56461334]
[146.88534546 105.56000519]
[161.38928223 109.38565063]
[175.89323425 113.21128845]
[190.39718628 117.03692627]
[204.90112305 120.86257172]
[219.40507507 124.68820953]
[233.90902710 128.51385498]
[243.10130310 127.67771149]
[248.70608521 132.60292053]
[263.11636353 136.76751709]
[276.83654785 129.39228821]
[291.39129639 133.82106018]
[298.33789062 146.94660950]
[312.74816895 151.11122131]
[326.46408081 143.25946045]
[341.69256592 147.48660278]
[349.39886475 161.28472900]
[345.01095581 176.46768188]
[331.13211060 184.02766418]
[315.99639893 179.47949219]
[308.58358765 165.52149963]
[294.17330933 161.35688782]
[281.29583740 168.75325012]
[266.62243652 164.73503113]
[258.95175171 151.17779541]
[244.54148865 147.01319885]
[230.08337402 143.01780701]
[215.57943726 139.19215393]
[201.07548523 135.36651611]
[186.57153320 131.54087830]
[172.06759644 127.71523285]
[157.56364441 123.88959503]
[143.05969238 120.06394958]
[135.72123718 121.41238403]
[128.26263428 115.97488403]
[113.85235596 111.81028748]
[94.94736481 120.09235382]
[77.29409790 104.91720581]
[65.20031738 113.79078674]
[53.10653687 122.66436768]
[41.01275635 131.53794861]
[28.91897774 140.41152954]
[16.82519722 149.28512573]
[4.73141718 158.15870667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 40]
[8 39]
[9 38]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[20 26]
[21 25]
[41 133]
[42 132]
[43 131]
[44 130]
[45 129]
[46 128]
[47 127]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[54 79]
[55 78]
[56 77]
[59 71]
[60 70]
[61 69]
[62 68]
[88 125]
[89 124]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[98 115]
[99 114]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
