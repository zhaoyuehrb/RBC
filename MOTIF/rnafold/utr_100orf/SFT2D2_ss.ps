%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:28:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAACUUAGCGAGCGCAACAGGCUGCCGCUGAGGAGCUGGAGCUGGUGGGGACUGGGCCGCAAUGGACAAGCUGAAGAAGGUGCUGAGCGGGCAGGACACGGAGGACCGGAGCGGCCUGUCCGAGGUUGUUGAGGCAUCUUCAUUAAGCUGGAGUACCAGGA\
) } def
/len { sequence length } bind def

/coor [
[32.08816528 237.41593933]
[25.52249146 244.82995605]
[17.04526901 249.89222717]
[7.46189880 252.14270020]
[-2.32343125 251.38746643]
[-11.39304447 247.71534729]
[-21.79453278 258.52316284]
[-32.19601822 269.33099365]
[-42.59750748 280.13882446]
[-52.99899292 290.94662476]
[-63.40048218 301.75445557]
[-73.80197144 312.56228638]
[-77.52177429 320.95724487]
[-84.50772095 323.47509766]
[-95.11431885 334.08169556]
[-105.61884308 344.78939819]
[-116.02033234 355.59722900]
[-117.15187836 371.60034180]
[-130.45024109 380.57434082]
[-145.71406555 375.63519287]
[-151.23423767 360.57174683]
[-142.77616882 346.93942261]
[-126.82815552 345.19573975]
[-116.42667389 334.38790894]
[-114.04309082 327.35504150]
[-105.72092438 323.47509766]
[-95.11431885 312.86849976]
[-84.60979462 302.16079712]
[-74.20830536 291.35296631]
[-63.80681992 280.54516602]
[-53.40533066 269.73733521]
[-43.00384521 258.92950439]
[-32.60235596 248.12167358]
[-22.20086861 237.31385803]
[-27.31291771 217.71145630]
[-19.57215881 198.84167480]
[-1.93003178 188.33537292]
[18.62248230 190.54849243]
[27.94270134 178.79547119]
[37.26292038 167.04244995]
[46.58313751 155.28942871]
[48.42876053 140.50961304]
[63.06591034 134.50424194]
[72.38613129 122.75122833]
[81.70635223 110.99820709]
[75.65009308 95.69749451]
[82.33154297 78.13814545]
[69.29354095 70.72124481]
[56.25553513 63.30434418]
[43.21752930 55.88744736]
[29.13865280 62.41162491]
[13.92032719 59.38141632]
[3.41430569 47.96199799]
[1.66036904 32.54436493]
[9.33294201 19.05691910]
[23.48176193 12.68585205]
[38.66632080 15.88097191]
[49.04784775 27.41369057]
[50.63442612 42.84944153]
[63.67243195 50.26633835]
[76.71044159 57.68323898]
[89.74844360 65.10013580]
[79.12339783 54.51201630]
[76.28354645 39.78329468]
[82.21025848 26.00381470]
[94.85543823 17.93538666]
[109.84924316 18.36623383]
[122.01024628 27.14747047]
[127.13592529 41.24454117]
[123.45499420 55.78588867]
[112.23915863 65.74656677]
[125.68164062 59.09076691]
[139.12413025 52.43497086]
[152.56660461 45.77917480]
[155.16444397 29.08801460]
[167.06875610 17.33840561]
[183.46398926 15.00590897]
[197.88101196 22.81142235]
[211.19354248 15.89935589]
[224.50605774 8.98729038]
[237.81858826 2.07522488]
[251.13111877 -4.83684063]
[264.44363403 -11.74890614]
[277.75616455 -18.66097260]
[291.06869507 -25.57303810]
[304.38122559 -32.48510361]
[305.87210083 -54.32875824]
[320.06182861 -70.83293152]
[341.18307495 -75.52655029]
[360.79211426 -66.69145966]
[373.06103516 -75.32123566]
[385.32998657 -83.95101929]
[397.59890747 -92.58079529]
[409.86785889 -101.21057892]
[422.13681030 -109.84035492]
[434.40573120 -118.47013855]
[446.67468262 -127.09992218]
[446.11932373 -146.18202209]
[457.04507446 -161.65419006]
[474.92947388 -167.42277527]
[492.55438232 -161.34777832]
[504.30740356 -170.66799927]
[516.06042480 -179.98822021]
[521.58703613 -195.42805481]
[537.76782227 -198.09518433]
[547.95739746 -185.24588013]
[541.67358398 -170.09841919]
[525.38067627 -168.23519897]
[513.62762451 -158.91497803]
[501.87460327 -149.59475708]
[504.45306396 -138.66072083]
[502.73541260 -127.50679016]
[496.93411255 -117.76664734]
[487.86273193 -110.88153839]
[476.82174683 -107.88703156]
[465.41244507 -109.25740051]
[455.30447388 -114.83097839]
[443.03552246 -106.20119476]
[430.76657104 -97.57141876]
[418.49765015 -88.94163513]
[406.22869873 -80.31185913]
[393.95974731 -71.68207550]
[381.69082642 -63.05229950]
[369.42187500 -54.42251968]
[371.75479126 -45.99259567]
[371.86132812 -37.22735596]
[369.72470093 -28.70614433]
[365.47671509 -20.99466133]
[359.38964844 -14.60740471]
[351.85885620 -9.97335720]
[343.37713623 -7.40717077]
[334.50228882 -7.08782101]
[325.82077026 -9.04616070]
[317.90856934 -13.16223335]
[311.29327393 -19.17257690]
[297.98077393 -12.26051140]
[284.66824341 -5.34844589]
[271.35571289 1.56361961]
[258.04318237 8.47568512]
[244.73065186 15.38775063]
[231.41813660 22.29981613]
[218.10560608 29.21188164]
[204.79307556 36.12394714]
[204.03248596 49.47878265]
[196.70359802 60.79820633]
[184.63713074 67.05737305]
[170.94596863 66.52070618]
[159.22241211 59.22165680]
[145.77992249 65.87745667]
[132.33743286 72.53324890]
[118.89495850 79.18904877]
[125.78803253 101.85128784]
[113.20540619 119.55934143]
[93.45937347 120.31842041]
[84.13915253 132.07144165]
[74.81893158 143.82446289]
[72.30667114 159.44493103]
[58.33615875 164.60964966]
[49.01594162 176.36267090]
[39.69572449 188.11569214]
[30.37550354 199.86871338]
[35.23226166 208.63508606]
[37.20024109 218.43159485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[14 27]
[15 26]
[16 24]
[17 23]
[38 161]
[39 160]
[40 159]
[41 158]
[43 156]
[44 155]
[45 154]
[47 62]
[48 61]
[49 60]
[50 59]
[71 151]
[72 150]
[73 149]
[74 148]
[78 143]
[79 142]
[80 141]
[81 140]
[82 139]
[83 138]
[84 137]
[85 136]
[86 135]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
