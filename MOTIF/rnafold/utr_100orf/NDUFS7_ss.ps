%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAGAACGGACCUCAGAGGUUGUCUGAAGGCCGAGGCCAAGAUGGCGGUGCUGUCAGCUCCUGGCCUGCGCGGCUUCCGGAUCCUUGGUCUGCGCUCCAGCGUGGGCCCGGCUGUGCAGGCACGAGGUGUCCAUCAGAGCG\
) } def
/len { sequence length } bind def

/coor [
[225.66040039 225.11064148]
[221.48585510 216.66007996]
[221.71710205 207.09909058]
[210.01882935 197.71023560]
[198.32055664 188.32138062]
[186.62229919 178.93252563]
[171.89028931 180.80430603]
[159.89283752 171.44931030]
[158.02943420 155.98434448]
[146.33117676 146.59548950]
[134.63290405 137.20663452]
[122.93463898 127.81777954]
[111.23636627 118.42893219]
[99.53810120 109.04007721]
[95.59826660 108.92930603]
[91.73592377 107.04389954]
[88.75944519 103.46372986]
[87.40829468 98.63439178]
[76.34912872 88.50053406]
[65.28997040 78.36668396]
[54.23081207 68.23282623]
[47.75126648 66.39842987]
[43.81241989 62.17011261]
[42.92260361 57.40757370]
[32.31600189 46.80097198]
[21.70940018 36.19437027]
[11.10279846 25.58777046]
[0.49619710 14.98116779]
[-14.73309612 10.69406986]
[-18.26153946 -3.77656770]
[-28.86814117 -14.38316917]
[-39.47474289 -24.98977089]
[-50.08134460 -35.59637451]
[-60.68794632 -46.20297623]
[-71.29454803 -56.80957794]
[-82.24250793 -67.06346130]
[-93.52010345 -76.95365143]
[-104.79769897 -86.84383392]
[-116.07530212 -96.73402405]
[-127.35289764 -106.62420654]
[-138.63049316 -116.51439667]
[-154.10757446 -119.79627228]
[-158.57487488 -134.00515747]
[-169.85247803 -143.89533997]
[-181.34313965 -153.53715515]
[-193.04141235 -162.92601013]
[-204.73968506 -172.31486511]
[-216.43794250 -181.70372009]
[-228.13621521 -191.09255981]
[-244.41798401 -193.05111694]
[-250.61303711 -208.23509216]
[-240.34841919 -221.02453613]
[-224.18350220 -218.26275635]
[-218.74736023 -202.79083252]
[-207.04910278 -193.40197754]
[-195.35083008 -184.01312256]
[-183.65255737 -174.62428284]
[-171.95429993 -165.23542786]
[-167.12318420 -164.86938477]
[-162.49119568 -161.41427612]
[-159.96229553 -155.17294312]
[-148.68469238 -145.28276062]
[-134.01426697 -142.70829773]
[-128.74031067 -127.79199219]
[-117.46270752 -117.90180969]
[-106.18511200 -108.01161957]
[-94.90751648 -98.12142944]
[-83.62992096 -88.23124695]
[-72.35231781 -78.34105682]
[-68.75620270 -78.23608398]
[-65.03984070 -76.33605957]
[-62.06875610 -72.60783386]
[-60.68794632 -67.41617584]
[-50.08134460 -56.80957794]
[-39.47474289 -46.20297623]
[-28.86814117 -35.59637451]
[-18.26153946 -24.98977089]
[-7.65493679 -14.38316917]
[6.81570101 -10.85472679]
[11.10279846 4.37456608]
[21.70940018 14.98116779]
[32.31600189 25.58777046]
[42.92260361 36.19437027]
[53.52920532 46.80097198]
[64.36466217 57.17366791]
[75.42382812 67.30752563]
[86.48298645 77.44137573]
[97.54214478 87.57522583]
[108.92695618 97.34181213]
[120.62522125 106.73065948]
[132.32348633 116.11951447]
[144.02175903 125.50836945]
[155.72001648 134.89721680]
[167.41828918 144.28607178]
[182.91999817 142.75805664]
[194.64996338 152.44633484]
[196.01115417 167.23426819]
[207.70941162 176.62312317]
[219.40768433 186.01196289]
[231.10595703 195.40081787]
[252.40644836 197.23637390]
[259.32879639 216.63609314]
[271.61608887 225.23974609]
[284.26693726 233.29924011]
[297.25732422 240.79924011]
[310.24771118 248.29924011]
[323.23809814 255.79924011]
[336.22848511 263.29922485]
[349.21884155 270.79922485]
[362.29028320 278.15707397]
[375.44116211 285.37191772]
[389.42965698 278.91986084]
[404.36050415 281.90692139]
[414.54901123 292.98205566]
[416.24209595 307.75607300]
[429.39300537 314.97091675]
[442.54388428 322.18572998]
[458.91842651 321.28723145]
[467.65600586 335.16476440]
[459.76821899 349.54235840]
[443.36929321 349.62951660]
[435.32907104 335.33663940]
[422.17816162 328.12179565]
[409.02725220 320.90698242]
[395.65728760 327.41711426]
[380.84234619 324.77487183]
[370.30075073 313.78726196]
[368.22634888 298.52282715]
[355.07543945 291.30798340]
[347.64202881 290.84487915]
[341.71884155 283.78961182]
[328.72848511 276.28961182]
[315.73809814 268.78961182]
[302.74771118 261.28961182]
[289.75732422 253.78961182]
[276.76693726 246.28961182]
[273.96664429 246.94265747]
[270.73013306 246.48274231]
[267.49642944 244.73451233]
[264.76071167 241.69071960]
[263.01242065 237.52702332]
[250.72514343 228.92337036]
[242.22203064 231.90411377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[9 94]
[10 93]
[11 92]
[12 91]
[13 90]
[14 89]
[18 88]
[19 87]
[20 86]
[21 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[30 78]
[31 77]
[32 76]
[33 75]
[34 74]
[35 73]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 62]
[44 61]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[102 142]
[103 141]
[104 136]
[105 135]
[106 134]
[107 133]
[108 132]
[109 131]
[110 129]
[111 128]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
