%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGCGCCUCCACGUGGAUUUGGUAGAGAAACCCCGGACUGGGAUCAUGGCAGCCGAGACUCGGAACGUGGCCGGAGCAGAGGCCCCACCGCCCCAGAAGCGCUACUACCGGCAACGUGCUCACUCCAACCCCAUGGCGGACCACA\
) } def
/len { sequence length } bind def

/coor [
[80.00852966 417.12942505]
[76.56069183 431.72778320]
[73.11285400 446.32614136]
[78.34410858 461.86853027]
[67.29814148 473.98953247]
[51.33808517 470.22009277]
[46.88228226 454.43789673]
[58.51448059 442.87832642]
[61.96231842 428.27993774]
[65.41015625 413.68157959]
[67.92832184 398.89443970]
[69.50672913 383.97772217]
[71.08514404 369.06100464]
[63.08957672 353.47174072]
[73.96008301 338.64746094]
[75.22365570 323.70077515]
[76.48722839 308.75408936]
[77.75080109 293.80740356]
[79.01437378 278.86071777]
[69.24060059 267.67996216]
[70.30912018 252.50390625]
[82.10278320 242.32807922]
[83.36635590 227.38139343]
[84.62992859 212.43470764]
[85.89350128 197.48802185]
[74.51219940 185.14794922]
[75.56523895 168.05624390]
[88.88921356 156.77095032]
[89.83737946 141.80094910]
[90.78555298 126.83094788]
[84.38230896 126.48332977]
[77.79287720 124.57416534]
[71.39916992 121.02614594]
[65.60390472 115.85462189]
[60.80844116 109.17222595]
[45.90918732 107.43664551]
[31.00993347 105.70107269]
[17.58777046 114.48884583]
[2.39427900 109.33740234]
[-2.91539216 94.19847870]
[5.73188162 80.68537140]
[21.70265198 79.16416931]
[32.74551010 90.80181885]
[47.64476395 92.53739166]
[62.54401779 94.27297211]
[66.51990509 87.91353607]
[53.80104446 79.96176910]
[41.08218384 72.01000214]
[28.36332703 64.05823517]
[15.64459991 56.10625458]
[23.59679031 43.38765717]
[36.31509399 51.33937454]
[49.03395462 59.29114151]
[61.75281525 67.24291229]
[74.47167206 75.19467926]
[78.44755554 68.83525085]
[70.36214447 56.20092773]
[62.27673721 43.56660080]
[54.19132614 30.93227768]
[40.56084061 20.85030556]
[46.47551346 4.96153593]
[63.38068771 6.24661064]
[66.82565308 22.84686852]
[74.91106415 35.48119354]
[82.99646759 48.11551666]
[91.08187866 60.74983978]
[105.65787506 66.15988922]
[114.94271851 75.88525391]
[125.93337250 65.67713928]
[136.92402649 55.46903229]
[147.91467285 45.26092148]
[152.76066589 30.20014381]
[167.35160828 27.20791817]
[178.34226990 16.99980927]
[189.33291626 6.79169846]
[200.32357788 -3.41641116]
[211.31422424 -13.62452126]
[222.19665527 -23.94792747]
[232.96965027 -34.38548279]
[237.49703979 -49.54508209]
[252.02165222 -52.84426498]
[262.79464722 -63.28181839]
[266.36065674 -74.36846161]
[275.91744995 -78.33863068]
[284.78530884 -90.43659973]
[293.65319824 -102.53456879]
[290.99929810 -118.11443329]
[300.20736694 -130.95915222]
[315.81442261 -133.44818115]
[328.56106567 -124.10482788]
[330.88494873 -108.47232056]
[321.40734863 -95.82516479]
[305.75115967 -93.66669464]
[296.88327026 -81.56872559]
[288.01541138 -69.47075653]
[302.81015015 -71.94366455]
[316.74252319 -66.38587189]
[325.77301025 -54.40879822]
[327.28332520 -39.48502731]
[320.83560181 -25.94151306]
[308.29925537 -17.70501709]
[293.30902100 -17.16360283]
[280.21115112 -24.47424507]
[272.80316162 -37.51731873]
[273.23220825 -52.50882339]
[262.45922852 -42.07126999]
[258.70239258 -27.65823364]
[243.40721130 -23.61248970]
[232.63421631 -13.17493248]
[230.00100708 -6.21460056]
[221.52233887 -2.63386607]
[210.53169250 7.57424355]
[199.54103088 17.78235435]
[188.55036926 27.99046326]
[177.55972290 38.19857407]
[173.49986267 52.52919769]
[158.12278748 56.25157547]
[147.13214111 66.45968628]
[136.14147949 76.66779327]
[125.15082550 86.87590790]
[125.63336182 112.15469360]
[105.75555420 127.77912140]
[104.80738068 142.74911499]
[103.85921478 157.71911621]
[113.89128113 166.76702881]
[116.81642914 179.75624084]
[111.78083038 191.87084961]
[100.84018707 198.75160217]
[99.57661438 213.69828796]
[98.31304169 228.64497375]
[97.04946899 243.59165955]
[106.96746826 255.60295105]
[105.47310638 270.74301147]
[93.96105194 280.12426758]
[92.69748688 295.07095337]
[91.43391418 310.01763916]
[90.17034149 324.96432495]
[88.90676880 339.91101074]
[96.63392639 350.29351807]
[95.23218536 362.75558472]
[86.00186157 370.63943481]
[84.42345428 385.55615234]
[82.84503937 400.47286987]
[95.41059113 392.28097534]
[110.12724304 395.18270874]
[118.64277649 407.53121948]
[116.12430573 422.31829834]
[104.00115967 431.15170288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 143]
[12 142]
[13 141]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[22 131]
[23 130]
[24 129]
[25 128]
[28 124]
[29 123]
[30 122]
[35 45]
[36 44]
[37 43]
[56 66]
[57 65]
[58 64]
[59 63]
[68 120]
[69 119]
[70 118]
[71 117]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[78 109]
[79 108]
[81 106]
[82 105]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
