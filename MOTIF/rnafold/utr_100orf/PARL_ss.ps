%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAGUAGUUGCGCAGCUGGGGUUGGUAAGGUCGGGCCAUGGUGGGGCAGAGGUUGGGAAGAUGGCGUGGCGAGGCUGGGCGCAGAGAGGCUGGGGCUGCGGCCAGGCGUGGGGUGCGUCGGUGGGCGGCCGCAGCUGCGAGGAGCUCACUGCGGUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[91.15242767 268.44192505]
[100.95195770 255.73959351]
[100.37389374 240.75074768]
[99.79582977 225.76188660]
[89.64903259 211.46876526]
[98.30643463 195.24177551]
[97.43960571 180.26684570]
[96.57277679 165.29190063]
[95.70594788 150.31697083]
[94.83912659 135.34204102]
[80.78258514 130.10623169]
[70.33040619 140.86505127]
[59.87822723 151.62385559]
[56.11833954 160.00238037]
[49.11941528 162.48684692]
[38.46183014 173.04222107]
[27.80424690 183.59759521]
[17.14666176 194.15295410]
[13.35029411 210.10662842]
[-2.43940330 214.53579712]
[-13.97934341 202.88410950]
[-9.39822578 187.13783264]
[6.59128952 183.49537659]
[17.24887466 172.94000244]
[27.90645981 162.38462830]
[38.56404495 151.82925415]
[49.11941528 141.17167664]
[59.57159424 130.41287231]
[70.02377319 119.65406036]
[68.28419495 110.86015320]
[68.89606476 102.47715759]
[71.53984833 95.08649445]
[57.92831039 88.78363800]
[44.31677246 82.48077393]
[30.70523643 76.17791748]
[14.93132305 77.40031433]
[6.63328171 65.03133392]
[-6.97825575 58.72846985]
[-20.58979416 52.42560959]
[-34.20133209 46.12274933]
[-47.81287003 39.81988907]
[-60.27390289 50.24692917]
[-75.97561646 54.19313049]
[-91.77198792 50.91998291]
[-104.52069092 41.13027191]
[-111.70819092 26.81790924]
[-111.94524384 10.86202049]
[-125.67572021 4.82265759]
[-139.40620422 -1.21670496]
[-155.63978577 1.10768867]
[-165.55538940 -11.95419216]
[-158.95269775 -26.96540260]
[-142.62399292 -28.48369980]
[-133.36683655 -14.94718552]
[-119.63636017 -8.90782261]
[-105.90587616 -2.86846042]
[-95.79878235 -12.40816879]
[-82.77485657 -17.38253784]
[-68.79496002 -17.00718880]
[-55.97745132 -11.30586815]
[-46.27720642 -1.11187291]
[-41.18745422 12.05358982]
[-41.51000977 26.20835304]
[-27.89846992 32.51121140]
[-14.28693295 38.81407166]
[-0.67539567 45.11693192]
[12.93614197 51.41979218]
[27.73646545 49.74657059]
[37.00809479 62.56637955]
[50.61963272 68.86923981]
[64.23117065 75.17209625]
[77.84270477 81.47496033]
[91.87825012 72.28430176]
[108.65438843 72.44597626]
[122.51020050 81.90542603]
[136.24067688 75.86605835]
[149.97116089 69.82669830]
[163.70164490 63.78733444]
[167.10054016 48.76223373]
[178.56100464 38.73671341]
[193.55004883 37.39775467]
[206.30072021 45.05009460]
[220.03120422 39.01073456]
[233.76168823 32.97137070]
[247.49215698 26.93200874]
[234.81805420 18.90909576]
[232.99195862 4.02066660]
[243.35148621 -6.82737780]
[258.30819702 -5.68874931]
[266.90618896 6.60249662]
[262.84674072 21.04359436]
[277.09463501 16.35338211]
[291.34249878 11.66317177]
[305.59036255 6.97296047]
[316.27926636 -4.69142675]
[330.78768921 -1.32166064]
[345.03555298 -6.01187181]
[359.28341675 -10.70208263]
[373.53131104 -15.39229393]
[387.77917480 -20.08250427]
[402.02703857 -24.77271652]
[413.94372559 -38.78194427]
[430.96359253 -34.58966064]
[445.11843872 -39.55358887]
[459.27325439 -44.51752090]
[466.37689209 -50.33771515]
[473.74899292 -49.43785095]
[487.99685669 -54.12806320]
[502.24475098 -58.81827545]
[516.49261475 -63.50848770]
[530.74047852 -68.19869995]
[539.22332764 -81.81565094]
[555.17443848 -83.53037262]
[566.35760498 -72.02745819]
[564.19396973 -56.13097382]
[550.34332275 -48.03533173]
[535.43072510 -53.95082474]
[521.18280029 -49.26061249]
[506.93496704 -44.57040024]
[492.68707275 -39.88018799]
[478.43920898 -35.18997955]
[464.23718262 -30.36268425]
[450.08236694 -25.39875412]
[435.92752075 -20.43482208]
[430.38449097 -9.64927483]
[418.59393311 -5.41446114]
[406.71725464 -10.52484226]
[392.46939087 -5.83463097]
[378.22152710 -1.14441979]
[363.97363281 3.54579139]
[349.72576904 8.23600197]
[335.47790527 12.92621326]
[325.80810547 24.25512505]
[310.28057861 21.22083473]
[296.03271484 25.91104507]
[281.78482056 30.60125732]
[267.53695679 35.29146957]
[253.53152466 40.66248703]
[239.80104065 46.70185089]
[226.07055664 52.74121475]
[212.34008789 58.78057480]
[209.36384583 73.35041046]
[198.24749756 83.49391937]
[183.11288452 85.16627502]
[169.74099731 77.51781464]
[156.01052856 83.55717468]
[142.28004456 89.59654236]
[128.54956055 95.63590240]
[127.23094940 117.48831940]
[109.81405640 134.47521973]
[110.68088531 149.45014954]
[111.54771423 164.42507935]
[112.41453552 179.40000916]
[113.28136444 194.37493896]
[122.39437103 203.54687500]
[122.78285217 216.06886292]
[114.78468323 225.18382263]
[115.36274719 240.17268372]
[115.94081116 255.16152954]
[126.68954468 267.07138062]
[123.93771362 282.87664795]
[109.79629517 290.45291138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 159]
[3 158]
[4 157]
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[11 29]
[12 28]
[13 27]
[15 26]
[16 25]
[17 24]
[18 23]
[32 72]
[33 71]
[34 70]
[35 69]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[47 56]
[48 55]
[49 54]
[75 148]
[76 147]
[77 146]
[78 145]
[82 141]
[83 140]
[84 139]
[85 138]
[91 137]
[92 136]
[93 135]
[94 134]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[103 124]
[104 123]
[105 122]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
