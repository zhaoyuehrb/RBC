%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCUGAGGCAUAAAACUGCCAGAGGGUCUCAAGGCAGGCAAAGAAGAACCAUGAGGCUCAUCCUGCCUGUGGGUUUGAUUGCUACCACUCUUGCAAUUGCUCCUGUCCGCUUUGACAGGGAGAAGGUGUUCCGCGUGAAGCCCCAGGAUG\
) } def
/len { sequence length } bind def

/coor [
[123.02242279 294.22854614]
[134.94294739 284.43545532]
[133.09962463 269.54916382]
[131.25630188 254.66285706]
[129.41297913 239.77655029]
[127.56964874 224.89024353]
[112.97599030 217.43534851]
[105.60772705 202.61238098]
[108.53337860 186.15124512]
[120.79891205 174.54707336]
[118.65032959 159.70175171]
[106.91625214 160.15904236]
[95.67848206 158.40388489]
[85.33724976 154.63854980]
[76.23477173 149.13446045]
[68.64400482 142.21765137]
[62.76070023 134.25265503]
[58.69906616 125.62534332]
[44.88548279 131.47213745]
[31.07189941 137.31892395]
[17.25831604 143.16571045]
[3.44473314 149.01249695]
[-7.27017164 163.95309448]
[-24.57394791 161.19195557]
[-38.26457214 167.32113647]
[-51.95520020 173.45030212]
[-63.94110489 185.44090271]
[-78.78113556 177.24273682]
[-75.01148224 160.71319580]
[-58.08437347 159.75968933]
[-44.39374542 153.63050842]
[-30.70312119 147.50132751]
[-26.07504654 136.28335571]
[-14.66809368 131.08212280]
[-2.40205479 135.19891357]
[11.41152763 129.35212708]
[25.22511101 123.50534058]
[39.03869247 117.65854645]
[52.85227585 111.81175995]
[51.13510513 104.35221100]
[50.60192108 96.64514160]
[51.28792572 88.87903595]
[53.19822311 81.24729156]
[56.30717468 73.94338989]
[60.55849838 67.15598297]
[65.86617279 61.06408691]
[72.11607361 55.83231735]
[79.16841888 51.60652542]
[71.27193451 38.85326767]
[63.37545395 26.10001183]
[55.47896957 13.34675503]
[47.58248901 0.59349847]
[32.23007965 -0.67524016]
[20.70325279 -10.62439442]
[17.28552818 -25.27987671]
[23.08349991 -38.97372437]
[15.18701839 -51.72698212]
[7.29053545 -64.48023987]
[-0.60594684 -77.23349762]
[-16.10715866 -79.29418945]
[-26.61897469 -90.87156677]
[-27.17803574 -106.49915314]
[-17.52037048 -118.79808044]
[-2.20603347 -121.96116638]
[11.53401375 -114.49489594]
[17.21214104 -99.92462158]
[12.14731026 -85.12998199]
[20.04379272 -72.37672424]
[27.94027519 -59.62346649]
[35.83675766 -46.87020874]
[50.67936707 -45.95646667]
[62.27500534 -36.36453629]
[66.04317474 -21.61142349]
[60.33574677 -7.30298376]
[68.23223114 5.45027304]
[76.12870789 18.20352936]
[84.02519226 30.95678711]
[91.92167664 43.71004486]
[106.92088318 43.55604553]
[114.55385590 30.64334869]
[122.18682861 17.73065186]
[129.81979370 4.81795311]
[137.45275879 -8.09474468]
[145.08573914 -21.00744247]
[137.47344971 -34.34718704]
[137.56695557 -49.70579529]
[145.34106445 -62.95187759]
[158.70460510 -70.52230835]
[174.06285095 -70.38066864]
[187.28450012 -62.56507111]
[194.81300354 -49.17786789]
[194.62321472 -33.82014847]
[186.76622009 -20.62306213]
[173.35548401 -13.13656044]
[157.99842834 -13.37447262]
[150.36546326 -0.46177471]
[142.73249817 12.45092297]
[135.09951782 25.36362076]
[127.46655273 38.27631760]
[119.83358002 51.18901825]
[138.14257812 59.03451538]
[153.17131042 73.83534241]
[162.27374268 94.15915680]
[177.20974731 92.77513123]
[192.14576721 91.39110565]
[207.08177185 90.00708008]
[222.01779175 88.62305450]
[236.95379639 87.23902893]
[251.88981628 85.85500336]
[261.79223633 73.53764343]
[277.51281738 71.91310883]
[289.72479248 81.94521332]
[291.18304443 97.68208313]
[281.02236938 109.78731537]
[265.27096558 111.07908630]
[253.27383423 100.79102325]
[238.33782959 102.17504120]
[223.40180969 103.55906677]
[208.46580505 104.94309235]
[193.52978516 106.32711792]
[178.59378052 107.71114349]
[163.65776062 109.09516907]
[161.60528564 116.30886078]
[176.03260803 120.41404724]
[171.92718506 134.84129333]
[157.50035095 130.73625183]
[155.44787598 137.94993591]
[167.41813660 146.98945618]
[183.75061035 148.46664429]
[190.39108276 163.46118164]
[180.50837708 176.54798889]
[164.26899719 174.26446533]
[158.37861633 158.95971680]
[146.40835571 149.92019653]
[133.49565125 157.55317688]
[135.64424133 172.39849854]
[148.31445312 177.91378784]
[156.52693176 188.89205933]
[158.21305847 202.38880920]
[153.03703308 214.84977722]
[142.45596313 223.04690552]
[144.29928589 237.93321228]
[146.14260864 252.81953430]
[147.98593140 267.70584106]
[149.82925415 282.59213257]
[163.77841187 289.18188477]
[171.93112183 302.27908325]
[171.68588257 317.70449829]
[163.12095642 330.53591919]
[148.96936035 336.67889404]
[133.74684143 334.17321777]
[122.31083679 323.81845093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[10 136]
[11 135]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[24 32]
[25 31]
[26 30]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[56 70]
[57 69]
[58 68]
[59 67]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
