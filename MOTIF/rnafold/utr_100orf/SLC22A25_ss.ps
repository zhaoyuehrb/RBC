%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCUUUCAGGACCUCCUAGAUCAAGUUGGAGGCCUGGGGAGAUUCCAGAUCCUUCAGAUGGUUUUCCUUAUAAUGUUCAACGUCAUAGUAUACCAUC\
) } def
/len { sequence length } bind def

/coor [
[84.92448425 124.34275818]
[72.04711151 106.20301819]
[57.06343842 105.50341034]
[42.07976151 104.80380249]
[24.79866982 114.95015717]
[8.83014202 104.23479462]
[-6.16804409 104.46807098]
[-21.16622925 104.70134735]
[-36.16441727 104.93462372]
[-51.16260147 105.16790009]
[-66.15534973 105.63439941]
[-81.13902283 106.33400726]
[-96.12269592 107.03360748]
[-104.72406769 110.61258698]
[-111.58177185 107.51461792]
[-126.57995605 107.74789429]
[-141.57814026 107.98117065]
[-156.57632446 108.21444702]
[-171.57450867 108.44772339]
[-178.41873169 122.13770294]
[-190.84779358 131.06948853]
[-206.00559998 133.19064331]
[-220.40901184 128.01371765]
[-230.74821472 116.72835541]
[-234.64733887 101.92783356]
[-231.21038818 87.01321411]
[-221.22717285 75.41175842]
[-206.99172974 69.78939819]
[-191.77528381 71.43811798]
[-179.07444763 79.97904205]
[-171.80778503 93.44953918]
[-156.80960083 93.21626282]
[-141.81141663 92.98298645]
[-126.81323242 92.74971008]
[-111.81504822 92.51643372]
[-96.82230377 92.04993439]
[-81.83863068 91.35032654]
[-66.85494995 90.65071869]
[-60.20311356 87.13240814]
[-51.39587784 90.16971588]
[-36.39769363 89.93643951]
[-21.39950752 89.70316315]
[-6.40132141 89.46988678]
[8.59686470 89.23660278]
[15.17998123 81.14099884]
[25.37286568 78.03305054]
[35.77738190 81.20745850]
[42.77936554 89.82012939]
[57.76304245 90.51973724]
[72.74671936 91.21933746]
[76.28151703 83.96021271]
[81.70229340 77.97648621]
[88.57801819 73.74395752]
[96.36196136 71.59918976]
[104.43518066 71.71271515]
[112.15573883 74.07550812]
[118.90972900 78.49968719]
[124.16011047 84.63346863]
[127.48940277 91.98912048]
[128.63285828 99.98175812]
[143.11164856 103.90158844]
[157.59042358 107.82141876]
[172.06919861 111.74124908]
[186.54797363 115.66107941]
[201.02674866 119.58090973]
[209.79800415 110.39334106]
[221.60119629 105.90047455]
[234.11637878 106.91828156]
[244.91246033 113.18615723]
[251.91934204 123.42976379]
[253.82481384 135.61967468]
[268.03189087 140.43206787]
[282.23895264 145.24444580]
[296.44601440 150.05683899]
[311.99902344 147.15599060]
[321.57119751 158.56752014]
[335.77825928 163.37991333]
[349.98532104 168.19229126]
[364.19241333 173.00468445]
[381.13406372 172.35957336]
[386.44390869 188.46057129]
[372.44204712 198.02008057]
[359.38000488 187.21176147]
[345.17294312 182.39936829]
[330.96588135 177.58699036]
[316.75878906 172.77459717]
[302.22198486 176.01965332]
[291.63363647 164.26391602]
[277.42657471 159.45152283]
[263.21948242 154.63914490]
[249.01242065 149.82675171]
[235.25181580 160.66754150]
[217.58752441 161.21658325]
[202.92535400 151.07507324]
[197.10691833 134.05967712]
[182.62814331 130.13984680]
[168.14936829 126.22002411]
[153.67059326 122.30019379]
[139.19181824 118.38036346]
[124.71303558 114.46054077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 38]
[12 37]
[13 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[71 91]
[72 90]
[73 89]
[74 88]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
