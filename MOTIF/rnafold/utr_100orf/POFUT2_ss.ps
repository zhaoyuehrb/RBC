%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCGCGGCCGCCGGAAGUGCGUGGCCGCCCGGGGCCAUGGCGACACUCAGCUUCGUCUUCCUGCUGCUGGGGGCAGUGUCCUGGCCUCCGGCUUCUGCCUCCGGCCAGGAGUUCUGGCCCGGACAAUCGGCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[80.19989777 230.37219238]
[78.11750031 232.89489746]
[75.60681152 234.29983521]
[71.06568146 248.59593201]
[66.52455139 262.89202881]
[67.49197388 279.81832886]
[51.49495316 285.43362427]
[41.67068863 271.61624146]
[52.22846222 258.35089111]
[56.76959610 244.05479431]
[61.31072617 229.75871277]
[65.21953583 215.27694702]
[68.48846436 200.63748169]
[71.75740051 185.99801636]
[75.02632904 171.35853577]
[78.29526520 156.71907043]
[81.56419373 142.07960510]
[84.83312988 127.44013214]
[88.10205841 112.80065918]
[84.21733093 112.59529114]
[80.17850494 111.48537445]
[76.17263794 109.42814636]
[61.21696091 108.27590179]
[46.26128387 107.12365723]
[31.30560493 105.97141266]
[16.31374741 105.47719574]
[1.31465292 105.64196014]
[-13.68444252 105.80672455]
[-28.68353653 105.97148895]
[-43.68263245 106.13625336]
[-58.68172836 106.30101776]
[-73.68082428 106.46578979]
[-84.55216217 117.93703461]
[-100.35278320 118.27770233]
[-111.70845032 107.28569031]
[-111.88204956 91.48235321]
[-100.77058411 80.24353790]
[-84.96630096 80.23703003]
[-73.84558868 91.46669006]
[-58.84649277 91.30192566]
[-43.84739685 91.13716125]
[-28.84830284 90.97239685]
[-13.84920788 90.80763245]
[1.14988744 90.64286804]
[16.14898300 90.47809601]
[18.22634506 88.48762512]
[21.24750710 87.23342896]
[24.92349434 87.09083557]
[28.83087540 88.31887817]
[32.45785141 91.01573181]
[47.41352844 92.16797638]
[62.36920929 93.32022095]
[77.32489014 94.47246552]
[86.64038086 82.71570587]
[82.09925079 68.41961670]
[77.55811310 54.12352753]
[73.01698303 39.82744217]
[59.26321793 32.51500702]
[54.86151886 17.95204926]
[61.91756821 4.88500071]
[57.37643433 -9.41108704]
[43.22881699 -16.45526123]
[38.28520584 -31.46646690]
[45.47856522 -45.53882217]
[60.54119873 -50.32344437]
[74.53671265 -42.98170853]
[79.16181946 -27.86932945]
[71.67252350 -13.95221901]
[76.21365356 0.34386864]
[89.51689911 6.94381714]
[94.32590485 21.37739182]
[87.31307220 35.28630829]
[91.85420227 49.58239365]
[96.39533997 63.87848282]
[100.93647003 78.17456818]
[114.14093781 85.29089355]
[128.57888794 81.22325134]
[143.01683044 77.15560913]
[154.20173645 65.96595001]
[168.55027771 69.96199799]
[182.98823547 65.89435577]
[197.42617798 61.82671356]
[205.66050720 46.43451309]
[222.14459229 41.81327820]
[236.60005188 50.33993149]
[250.94515991 45.95610809]
[265.29028320 41.57228470]
[279.63537598 37.18845749]
[293.98046875 32.80463409]
[308.32559204 28.42080879]
[322.67068481 24.03698349]
[337.01580811 19.65316010]
[342.15698242 5.13164330]
[354.71627808 -3.47749805]
[369.75881958 -3.04558229]
[381.52175903 6.05225897]
[395.86688232 1.66843414]
[410.21197510 -2.71539068]
[420.99588013 -15.07014084]
[437.03298950 -11.64332485]
[441.82571411 4.03984356]
[430.44372559 15.84586430]
[414.59579468 11.62971592]
[400.25070190 16.01354027]
[385.90560913 20.39736557]
[381.23767090 34.51644516]
[369.00622559 43.28320312]
[353.77993774 43.16525650]
[341.39962769 33.99826431]
[327.05453491 38.38209152]
[312.70941162 42.76591492]
[298.36431885 47.14973831]
[284.01919556 51.53356552]
[269.67410278 55.91738892]
[255.32899475 60.30121613]
[240.98388672 64.68503571]
[236.55906677 76.83444977]
[225.76992798 84.30866241]
[212.45034790 84.17777252]
[201.49382019 76.26465607]
[187.05587769 80.33229828]
[172.61791992 84.39994049]
[162.46571350 95.29866028]
[147.08447266 91.59355164]
[132.64653015 95.66119385]
[118.20858002 99.72883606]
[133.20458984 100.07502747]
[144.85089111 109.52826691]
[148.27369690 124.13252258]
[142.04061890 137.77615356]
[128.76010132 144.74952698]
[113.98982239 142.13439941]
[103.91091156 131.02514648]
[102.74153137 116.06959534]
[99.47259521 130.70906067]
[96.20366669 145.34854126]
[92.93473053 159.98800659]
[89.66580200 174.62747192]
[86.39686584 189.26693726]
[83.12793732 203.90641785]
[79.85900116 218.54588318]
[81.37811279 222.80267334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[22 53]
[23 52]
[24 51]
[25 50]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[54 75]
[55 74]
[56 73]
[57 72]
[60 69]
[61 68]
[76 126]
[77 125]
[78 124]
[80 122]
[81 121]
[82 120]
[85 116]
[86 115]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
