%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGUAGAAGAAAUAACACAAAUGUGCCUGACUUCAUCCUUACGGGACUGUCAGAUUCUGAAGAGGUCCAGAUGGCCCUCUUUAUACUAUUUCUCCUGA\
) } def
/len { sequence length } bind def

/coor [
[86.73017120 324.44149780]
[71.49129486 327.95013428]
[57.58589554 320.79656982]
[51.57967758 306.35842896]
[56.30859756 291.45303345]
[69.53980255 283.11819458]
[71.40128326 268.23416138]
[73.26276398 253.35009766]
[67.16471100 239.76101685]
[76.55478668 227.02770996]
[78.41626740 212.14366150]
[80.27774811 197.25961304]
[82.13922882 182.37556458]
[84.00070953 167.49153137]
[85.86219025 152.60748291]
[87.72367096 137.72343445]
[72.61054993 128.69813538]
[62.89019775 114.02239990]
[48.10916901 116.57605743]
[33.32813644 119.12970734]
[21.08253288 130.03738403]
[5.60052538 124.63002777]
[2.80867600 108.47026825]
[15.57900047 98.18188477]
[30.77448463 104.34867859]
[45.55551529 101.79502869]
[60.33654404 99.24137115]
[64.03165436 83.26550293]
[73.87205505 70.14877319]
[66.30481720 57.19744492]
[58.73757172 44.24612045]
[51.17032623 31.29479408]
[43.60308456 18.34346962]
[31.52763748 17.58757210]
[21.46458626 11.09070206]
[15.91854286 0.61065197]
[16.20071220 -11.12201595]
[22.12083054 -21.11509705]
[15.37340450 -34.51182175]
[8.62597942 -47.90854645]
[1.87855351 -61.30527115]
[-10.64641476 -72.73162079]
[-3.13386488 -87.93023682]
[13.55046463 -84.91867828]
[15.27527905 -68.05269623]
[22.02270508 -54.65597153]
[28.77013016 -41.25924683]
[35.51755524 -27.86252213]
[53.11869431 -23.32992554]
[62.12763214 -7.18327045]
[56.55440903 10.77622604]
[64.12165070 23.72755241]
[71.68889618 36.67887878]
[79.25614166 49.63020325]
[86.82337952 62.58152771]
[98.60456085 60.35383987]
[110.51321411 61.74771118]
[121.46150970 66.63581848]
[130.44935608 74.57164001]
[136.65576172 84.83026886]
[151.35021973 81.81816101]
[166.04467773 78.80606079]
[180.73913574 75.79395294]
[195.43360901 72.78184509]
[210.12806702 69.76973724]
[224.82252502 66.75762939]
[239.51699829 63.74552536]
[251.48236084 53.39465714]
[265.50408936 58.41862869]
[280.19854736 55.40652084]
[292.09899902 44.12329483]
[307.74169922 49.04654312]
[311.03475952 65.11165619]
[298.59057617 75.79221344]
[283.21066284 70.10098267]
[268.51620483 73.11309052]
[257.60186768 83.24851227]
[242.52909851 78.43998718]
[227.83464050 81.45209503]
[213.14016724 84.46420288]
[198.44570923 87.47631073]
[183.75125122 90.48841095]
[169.05679321 93.50051880]
[154.36231995 96.51262665]
[139.66786194 99.52473450]
[137.02513123 114.24445343]
[129.12062073 126.93983459]
[117.07765961 135.80668640]
[102.60771942 139.58491516]
[100.74623871 154.46896362]
[98.88475800 169.35301208]
[97.02327728 184.23706055]
[95.16179657 199.12110901]
[93.30031586 214.00514221]
[91.43883514 228.88919067]
[97.40373993 243.54287720]
[88.14681244 255.21157837]
[86.28533173 270.09564209]
[84.42384338 284.97967529]
[95.19482422 296.31634521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 99]
[7 98]
[8 97]
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[18 27]
[19 26]
[20 25]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[38 48]
[39 47]
[40 46]
[41 45]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
