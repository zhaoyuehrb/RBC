%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGUCCGGAGGACUCCUUGGACUGCGCGGAACAUGGCGUUCUGGGGUUGGCGCGCCGCGGCAGCCCUCCGGCUGUGGGGCCGGGUAGUUGAACGGGUCGAGGCCGGGGGAGGCGUGGGGCCGUUUCAGGCCU\
) } def
/len { sequence length } bind def

/coor [
[295.48236084 442.77841187]
[289.06408691 429.22091675]
[272.88146973 426.72659302]
[261.23422241 414.98388672]
[258.82427979 398.45367432]
[266.79037476 383.58230591]
[260.05838013 370.17782593]
[253.32640076 356.77334595]
[246.59440613 343.36883545]
[239.86241150 329.96435547]
[222.21913147 325.33966064]
[213.32556152 309.05352783]
[219.16857910 291.10772705]
[211.82023621 278.03094482]
[204.47187805 264.95419312]
[197.12353516 251.87741089]
[189.77519226 238.80064392]
[176.79496765 231.49563599]
[176.77966309 215.67443848]
[169.43132019 202.59767151]
[156.45111084 195.29266357]
[156.43580627 179.47145081]
[149.08746338 166.39469910]
[141.73910522 153.31793213]
[134.39076233 140.24116516]
[127.04241943 127.16439056]
[119.69407654 114.08762360]
[94.58493805 125.79109192]
[72.11557770 105.85685730]
[57.28685379 103.59656525]
[42.45812988 101.33628082]
[27.62940407 99.07599640]
[12.80067825 96.81571198]
[-2.02804780 94.55542755]
[-15.75197029 102.86406708]
[-30.75420380 97.17965698]
[-35.52632141 81.86278534]
[-26.40755844 68.66325378]
[-10.39305305 67.70660400]
[0.23223788 79.72669983]
[15.06096363 81.98698425]
[29.88969040 84.24726868]
[44.71841431 86.50755310]
[59.54714203 88.76784515]
[74.37586975 91.02812958]
[83.05084991 78.79110718]
[76.00878143 65.54689789]
[68.96670532 52.30268097]
[61.92463303 39.05846786]
[54.88255692 25.81425285]
[47.84048462 12.57003880]
[34.53006363 4.01765299]
[35.38660431 -10.85230350]
[28.34453011 -24.09651756]
[21.30245781 -37.34073257]
[8.52783394 -48.48727036]
[15.70239449 -63.84832764]
[32.44924927 -61.20651245]
[34.54667282 -44.38280487]
[41.58874512 -31.13859177]
[48.63081741 -17.89437675]
[61.43754196 -10.28930569]
[61.08469772 5.52796555]
[68.12677002 18.77218056]
[75.16884613 32.01639175]
[82.21092224 45.26060867]
[89.25299072 58.50482178]
[96.29506683 71.74903870]
[109.93290710 75.59014893]
[119.01731873 85.01135254]
[125.74930573 71.60686493]
[132.48129272 58.20237732]
[139.21327209 44.79788589]
[145.94526672 31.39339638]
[152.67726135 17.98890686]
[151.18408203 1.65787959]
[164.73481750 -7.57843828]
[179.38963318 -0.21851429]
[180.07290649 16.16639328]
[166.08174133 24.72089577]
[159.34976196 38.12538528]
[152.61776733 51.52987289]
[145.88578796 64.93436432]
[139.15379333 78.33885193]
[132.42179871 91.74333954]
[132.77084351 106.73928070]
[140.11918640 119.81604767]
[147.46752930 132.89280701]
[154.81587219 145.96957397]
[162.16421509 159.04634094]
[169.51257324 172.12310791]
[183.01838684 180.36346436]
[182.50808716 195.24932861]
[189.85643005 208.32609558]
[203.36225891 216.56643677]
[202.85195923 231.45230103]
[210.20030212 244.52906799]
[217.54864502 257.60583496]
[224.89700317 270.68261719]
[232.24534607 283.75936890]
[244.20594788 284.69973755]
[254.10253906 291.26647949]
[259.50631714 301.70761108]
[259.15966797 313.33859253]
[253.26690674 323.23236084]
[259.99890137 336.63687134]
[266.73089600 350.04135132]
[273.46286011 363.44583130]
[280.19485474 376.85034180]
[293.97543335 378.08126831]
[305.24526978 385.91827393]
[311.10275269 398.21255493]
[310.10501099 411.68545532]
[302.62158203 422.80267334]
[309.03985596 436.36016846]
[319.58471680 439.46426392]
[326.49850464 447.72409058]
[327.64947510 458.21188354]
[322.89447021 467.38250732]
[328.67501831 481.22393799]
[334.45556641 495.06536865]
[340.23608398 508.90679932]
[346.01663208 522.74822998]
[360.72882080 528.52117920]
[366.97314453 543.03961182]
[361.04498291 557.68994141]
[346.46136475 563.78039551]
[331.87454224 557.69769287]
[325.93856812 543.05047607]
[332.17520142 528.52880859]
[326.39465332 514.68731689]
[320.61410522 500.84591675]
[314.83358765 487.00445557]
[309.05303955 473.16302490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[13 100]
[14 99]
[15 98]
[16 97]
[17 96]
[19 94]
[20 93]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[53 61]
[54 60]
[55 59]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
