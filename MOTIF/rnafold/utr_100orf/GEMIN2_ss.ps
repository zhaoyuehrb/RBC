%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGUGACCUAGAAUGGGCGCAUGCGCCGAGCGGAACUGGCUGGUUUGAAAACCAUGGCGUGGGUACCAGCGGAGUCCGCAGUGGAAGAGUUGAUGCCUCGGCUAUUGCCGGUAGAGCCUU\
) } def
/len { sequence length } bind def

/coor [
[97.57440948 113.95360565]
[87.73834229 125.27843475]
[77.90227509 136.60327148]
[68.21163940 148.05278015]
[58.66799927 159.62512207]
[49.12436295 171.19746399]
[39.58072662 182.76980591]
[36.48358154 191.48986816]
[29.64258003 194.51174927]
[19.80651283 205.83657837]
[9.97044849 217.16140747]
[0.13438280 228.48623657]
[-5.68701458 244.40942383]
[-22.59943390 243.22349548]
[-26.14168358 226.64373779]
[-11.19044876 218.65017700]
[-1.35438359 207.32534790]
[8.48168182 196.00051880]
[18.31774712 184.67567444]
[28.00838852 173.22616577]
[37.55202484 161.65382385]
[47.09566116 150.08148193]
[56.63929749 138.50915527]
[58.48909760 131.26281738]
[66.57744598 126.76720428]
[76.41351318 115.44236755]
[86.24957275 104.11753845]
[89.85361481 89.55694580]
[86.43581390 74.95151520]
[83.01801300 60.34608078]
[70.11373901 47.28572083]
[75.70504761 30.70384407]
[71.91535187 16.19046402]
[68.12566376 1.67708170]
[64.33597565 -12.83629990]
[60.54628372 -27.34968185]
[45.82524490 -31.50157928]
[35.22887421 -42.39257431]
[31.53118896 -57.02792358]
[35.62816238 -71.45258331]
[46.32316971 -81.81996155]
[42.53347778 -96.33333588]
[38.74378586 -110.84671783]
[34.95409775 -125.36009979]
[31.16440582 -139.87348938]
[27.37471581 -154.38687134]
[18.33143616 -156.25628662]
[10.45857716 -160.99818420]
[4.63341665 -168.05018616]
[1.49373090 -176.59448242]
[1.36804998 -185.65264893]
[4.24151611 -194.19761658]
[9.76086426 -201.27018738]
[17.27758217 -206.08666992]
[15.36717987 -220.96450806]
[13.45677662 -235.84236145]
[11.54637432 -250.72021484]
[3.53199840 -265.66027832]
[15.66961861 -277.49728394]
[30.40404892 -269.11080933]
[26.42422295 -252.63061523]
[28.33462524 -237.75276184]
[30.24502754 -222.87490845]
[32.15542984 -207.99707031]
[50.15427399 -196.88696289]
[54.42915726 -175.89009094]
[41.88809586 -158.17655945]
[45.67778778 -143.66317749]
[49.46747971 -129.14979553]
[53.25716782 -114.63641357]
[57.04685974 -100.12303162]
[60.83655167 -85.60964966]
[75.23484039 -81.79455566]
[85.86100769 -71.21436310]
[89.79058838 -56.63956451]
[85.87155151 -41.95835114]
[75.05966187 -31.13937187]
[78.84935760 -16.62598991]
[82.63904572 -2.11260891]
[86.42873383 12.40077305]
[90.21842957 26.91415405]
[100.54447174 33.35358047]
[103.77246857 45.50383759]
[97.62344360 56.92827988]
[101.04124451 71.53371429]
[104.45904541 86.13914490]
[112.77268219 98.62447357]
[124.93041992 107.41023254]
[137.08815002 116.19598389]
[145.98808289 118.73038483]
[149.44032288 125.36462402]
[161.36972046 134.45800781]
[173.29910278 143.55139160]
[186.23933411 142.61375427]
[196.00601196 150.52960205]
[197.65794373 162.58631897]
[209.35121155 171.98139954]
[221.04447937 181.37648010]
[232.73776245 190.77154541]
[239.38772583 192.19540405]
[243.61145020 196.21473694]
[244.77207947 200.95716858]
[255.97038269 210.93705750]
[267.16867065 220.91693115]
[283.32772827 223.71289062]
[288.73114014 239.19625854]
[277.82037354 251.43910217]
[261.81945801 247.84701538]
[257.18878174 232.11523438]
[245.99049377 222.13534546]
[234.79220581 212.15545654]
[223.34268188 202.46482849]
[211.64941406 193.06974792]
[199.95614624 183.67466736]
[188.26287842 174.27960205]
[170.84461975 172.59855652]
[164.20573425 155.48077393]
[152.27633667 146.38739014]
[140.34693909 137.29402161]
[128.30239868 128.35371399]
[116.14466095 119.56796265]
[103.98692322 110.78221130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 23]
[5 22]
[6 21]
[7 20]
[9 19]
[10 18]
[11 17]
[12 16]
[28 86]
[29 85]
[30 84]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[54 64]
[55 63]
[56 62]
[57 61]
[87 122]
[88 121]
[89 120]
[91 119]
[92 118]
[93 117]
[96 115]
[97 114]
[98 113]
[99 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
