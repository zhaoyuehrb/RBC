%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGCUGCCAAUGAGUCUUCAGAGGGAAUCUCAUUCGUUUUAUUGGGACUGACAACAAGUCCUGGACAGCAGCGGCCUCUCUUUGUGCUGUUCUUGC\
) } def
/len { sequence length } bind def

/coor [
[139.96192932 256.50946045]
[147.64834595 243.50579834]
[158.68791199 233.19537354]
[151.94049072 219.79866028]
[145.19306946 206.40193176]
[138.44564819 193.00520325]
[131.69821167 179.60847473]
[124.95079041 166.21174622]
[118.20336151 152.81503296]
[111.45594025 139.41830444]
[104.70851135 126.02157593]
[85.95574951 122.40650940]
[74.52814484 107.10472870]
[59.52995682 106.87145233]
[44.53177261 106.63816833]
[29.53358650 106.40489197]
[14.53539944 106.17161560]
[-0.46278626 105.93833923]
[-11.76399517 116.65843201]
[-26.97096443 116.20820618]
[-37.12129211 105.36816406]
[-52.11947632 105.13488770]
[-67.11766052 104.90161133]
[-81.17452240 113.34772491]
[-95.38436127 105.16161346]
[-95.12932587 88.76445007]
[-80.67176819 81.02423096]
[-66.88438416 89.90342712]
[-51.88619995 90.13670349]
[-36.88801575 90.36997986]
[-26.40547371 79.85085297]
[-11.19185734 79.87377930]
[-0.22950909 90.94015503]
[14.76867676 91.17343140]
[29.76686287 91.40670776]
[44.76504898 91.63998413]
[59.76323318 91.87326050]
[74.76142120 92.10653687]
[84.25756836 78.75221252]
[99.79850769 73.55662537]
[103.94303131 59.14056396]
[108.08755493 44.72449875]
[112.23208618 30.30843353]
[110.88585663 25.74573898]
[111.15389252 21.45735550]
[112.72354889 17.94864273]
[115.14233398 15.55731583]
[117.89060211 14.42094231]
[123.79210663 0.63064677]
[129.69360352 -13.15964890]
[135.59510803 -26.94994354]
[141.49661255 -40.74023819]
[147.39811707 -54.53053665]
[140.17878723 -68.40191650]
[143.61526489 -83.65723419]
[156.08494568 -93.09339142]
[171.70004272 -92.25492096]
[183.08757019 -81.53772736]
[184.87068176 -66.00213623]
[176.20747375 -52.98358536]
[161.18841553 -48.62903214]
[155.28691101 -34.83873749]
[149.38540649 -21.04844093]
[143.48390198 -7.25814486]
[137.58239746 6.53215075]
[131.68089294 20.32244682]
[126.64814758 34.45296097]
[122.50362396 48.86902237]
[118.35909271 63.28508759]
[114.21456909 77.70114899]
[121.22179413 84.22254944]
[125.44828796 92.81130219]
[126.34022522 102.34200287]
[123.78075409 111.56582642]
[118.10523987 119.27415466]
[124.85266113 132.67088318]
[131.60008240 146.06759644]
[138.34751892 159.46432495]
[145.09494019 172.86105347]
[151.84236145 186.25778198]
[158.58979797 199.65451050]
[165.33721924 213.05122375]
[172.08464050 226.44795227]
[186.94097900 223.71557617]
[201.96519470 225.28077698]
[215.93933105 231.01664734]
[227.73056030 240.45822144]
[236.38304138 252.84011841]
[241.19534302 267.15856934]
[241.77735901 282.25286865]
[238.08190918 296.89938354]
[230.40855408 309.91079712]
[219.37934875 320.23229980]
[205.88838196 327.02719116]
[191.02931213 329.74462891]
[176.00668335 328.16433716]
[162.03831482 322.41442871]
[150.25657654 312.96102905]
[141.61653137 300.57043457]
[136.81861877 286.24713135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 83]
[4 82]
[5 81]
[6 80]
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[21 30]
[22 29]
[23 28]
[40 70]
[41 69]
[42 68]
[43 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
