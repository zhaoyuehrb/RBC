%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCAGCCCCGGGAUGCUGCUCCGGCCCCGCAGGCCGCCCCCGCUCGCGCCCCCCGCGCCGCCCUCGCCCGCCAGCCCCGACCCCGAGCCGCGGACACCCGGAGACGCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[2.71518660 525.71520996]
[0.46815419 540.85491943]
[-8.56661034 553.20928955]
[-22.31298447 559.93951416]
[-37.61215210 559.49896240]
[-50.94847488 551.98895264]
[-59.25736618 539.13507080]
[-60.62950134 523.89123535]
[-54.74957275 509.76022339]
[-42.96875000 499.98931885]
[-27.99417496 496.82376099]
[-23.98125076 482.37051392]
[-19.96832466 467.91726685]
[-15.95540047 453.46401978]
[-11.94247532 439.01077271]
[-13.54313183 434.38174438]
[-12.15615273 428.69647217]
[-7.30118418 423.89486694]
[-2.51166153 409.68008423]
[-9.33897209 396.49209595]
[-4.68421030 382.00802612]
[9.19487095 374.93634033]
[13.98439407 360.72152710]
[18.77391624 346.50674438]
[23.56344032 332.29193115]
[28.35296249 318.07714844]
[33.14248657 303.86233521]
[24.00725937 288.11135864]
[29.24601555 270.34344482]
[46.02761841 261.78091431]
[50.04054260 247.32766724]
[54.05346680 232.87442017]
[58.06639099 218.42115784]
[56.80704880 211.03627014]
[62.38862610 203.63366699]
[66.79146576 189.29438782]
[71.19430542 174.95509338]
[75.40257263 160.55751038]
[79.41549683 146.10426331]
[63.18432617 134.55331421]
[52.68457031 117.62313843]
[49.55081558 97.94942474]
[54.27092743 78.59494019]
[66.11007690 62.57276535]
[83.22516632 52.37721252]
[80.39848328 37.64595795]
[70.12251282 29.70759964]
[68.12981415 17.28390884]
[74.95716858 7.19744825]
[72.53043365 -7.60494947]
[70.10370636 -22.40734673]
[67.67697906 -37.20974350]
[55.53827286 -47.69932938]
[56.31495285 -63.72357178]
[69.41121674 -72.99004364]
[84.78073120 -68.39029694]
[90.63331604 -53.45287323]
[82.47937775 -39.63647461]
[84.90610504 -24.83407784]
[87.33283234 -10.03167915]
[89.75956726 4.77071810]
[101.60035706 17.64560127]
[95.12973785 34.81927872]
[97.95642090 49.55053329]
[105.32723999 49.79098129]
[112.58440399 51.10258102]
[119.57309723 53.45734406]
[126.14422607 56.80504227]
[132.15759277 61.07424927]
[143.32287598 51.05743408]
[143.92813110 35.26473999]
[155.57983398 24.58704376]
[171.36524963 25.35923386]
[181.91915894 37.12318420]
[180.98011780 52.89955139]
[169.10523987 63.32849503]
[153.33969116 62.22270966]
[142.17440796 72.23952484]
[147.77630615 83.66754150]
[150.34255981 96.13330078]
[149.71011353 108.84474182]
[145.91914368 120.99420166]
[139.21054077 131.80972290]
[130.01054382 140.60409546]
[118.90372467 146.81852722]
[106.59577942 150.05816650]
[93.86874390 150.11718750]
[89.85581970 164.57043457]
[90.57196045 173.81379700]
[85.53358459 179.35794067]
[81.13074493 193.69721985]
[76.72791290 208.03649902]
[72.51964569 222.43408203]
[68.50671387 236.88734436]
[64.49378967 251.34059143]
[60.48086548 265.79382324]
[68.32546997 274.93670654]
[70.69595337 286.62500000]
[67.10653687 297.87161255]
[58.57942963 305.86056519]
[47.35728455 308.65185547]
[42.56776047 322.86666870]
[37.77823639 337.08145142]
[32.98871613 351.29626465]
[28.19919205 365.51104736]
[23.40966797 379.72586060]
[30.17910194 393.75485229]
[25.11935043 408.10244751]
[11.70313644 414.46960449]
[6.91361332 428.68441772]
[2.51077461 443.02368164]
[-1.50215054 457.47692871]
[-5.51507568 471.93017578]
[-9.52800083 486.38342285]
[-13.54092598 500.83670044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[18 110]
[19 109]
[22 106]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[30 96]
[31 95]
[32 94]
[33 93]
[35 92]
[36 91]
[37 90]
[38 88]
[39 87]
[45 64]
[46 63]
[49 61]
[50 60]
[51 59]
[52 58]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
