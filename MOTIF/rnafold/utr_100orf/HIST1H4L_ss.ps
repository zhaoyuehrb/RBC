%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUCUGGGCGCGGCAAAGGCGGGAAGGGUCUGGGCAAAGGAGGCGCUAAGCGCCACCGCAAAGUUCUGCGCGACAACAUUCAGGGCAUCACCAAGCCCG\
) } def
/len { sequence length } bind def

/coor [
[248.06260681 364.91265869]
[245.99391174 346.85519409]
[253.26084900 330.10479736]
[243.85699463 318.41860962]
[234.45314026 306.73239136]
[225.04928589 295.04617310]
[221.42376709 294.34848022]
[217.99311829 291.75094604]
[215.69888306 287.38452148]
[215.37733459 281.81976318]
[207.09185791 269.31573486]
[198.80639648 256.81167603]
[190.52091980 244.30764771]
[182.23544312 231.80361938]
[173.94996643 219.29957581]
[158.24629211 221.78605652]
[142.96287537 217.19831848]
[131.13926697 206.39640808]
[125.14961243 191.48138428]
[126.22602081 175.38673401]
[134.20547485 161.30151367]
[125.53887177 149.05856323]
[116.87226868 136.81559753]
[108.20565796 124.57264709]
[99.92250824 125.90640259]
[91.64749146 124.52311707]
[84.24847412 120.56787109]
[78.50146484 114.45547485]
[75.00920105 106.82700348]
[74.13796234 98.48252106]
[75.97910309 90.29718781]
[64.29290009 80.89333344]
[52.60668945 71.48947906]
[36.92308044 73.43884277]
[24.50620079 63.66148758]
[22.72276115 47.95814896]
[32.63084793 35.64533234]
[48.35216522 34.02801895]
[60.55953598 44.06572723]
[62.01054382 59.80326843]
[73.69675446 69.20712280]
[85.38296509 78.61098480]
[88.09671783 76.99000549]
[90.98769379 75.71160126]
[90.06427765 60.74005508]
[89.14086151 45.76850510]
[88.21745300 30.79695511]
[87.29403687 15.82540417]
[80.28409576 0.38853174]
[93.17713928 -10.62081146]
[107.32538605 -1.27931809]
[102.26558685 14.90199089]
[103.18900299 29.87354088]
[104.11241150 44.84508896]
[105.03582764 59.81663895]
[105.95924377 74.78819275]
[124.43385315 91.38984680]
[120.44861603 115.90604401]
[129.11521912 128.14900208]
[137.78182983 140.39195251]
[146.44844055 152.63490295]
[160.37684631 149.74725342]
[174.30554199 152.41062927]
[186.11325073 160.18540955]
[194.01473999 171.85615540]
[196.83071899 185.62150574]
[194.16377258 199.37216187]
[186.45399475 211.01409912]
[194.73947144 223.51814270]
[203.02494812 236.02217102]
[211.31042480 248.52621460]
[219.59590149 261.03024292]
[227.88137817 273.53427124]
[236.73548889 285.64233398]
[246.13934326 297.32852173]
[255.54319763 309.01473999]
[264.94705200 320.70095825]
[276.77081299 317.29104614]
[289.01181030 318.14245605]
[300.18563843 323.12792969]
[308.94549561 331.62014771]
[314.24459839 342.57092285]
[315.46124268 354.64022827]
[312.47161865 366.36038208]
[305.66201782 376.31442261]
[313.94747925 388.81845093]
[322.23297119 401.32247925]
[330.51843262 413.82650757]
[346.02630615 414.36083984]
[358.23764038 423.93493652]
[362.45690918 438.86737061]
[357.06173706 453.41629028]
[344.12664795 461.98739624]
[328.62548828 461.28485107]
[316.51873779 451.57885742]
[312.46170044 436.60156250]
[318.01440430 422.11199951]
[309.72891235 409.60794067]
[301.44345093 397.10391235]
[293.15798950 384.59988403]
[275.34735107 386.62939453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[4 76]
[5 75]
[6 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[21 61]
[22 60]
[23 59]
[24 58]
[31 42]
[32 41]
[33 40]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
