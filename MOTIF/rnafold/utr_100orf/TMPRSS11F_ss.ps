%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUACAGAUCAGAUGGUGACUGAAUAGAAGCUGCCCCAGUCCUGGGUUCAUGAUGUACGCACCUGUUGAAUUUUCAGAAGCUGAAUUCUCACGAGCUGAAUAUCAAAGAAAGCAGCAAUUUUGGGACUCAGUACGGCUAGCUCUUUUCA\
) } def
/len { sequence length } bind def

/coor [
[50.65498352 315.24191284]
[48.42828369 330.07571411]
[37.30498123 340.13912964]
[22.32300568 340.87423706]
[10.26794338 331.94812012]
[6.59970236 317.40390015]
[-1.43769956 330.06881714]
[-3.41507435 339.05606079]
[-9.77838516 342.91235352]
[-18.07925797 355.40615845]
[-26.38013268 367.89999390]
[-24.63136864 383.84744263]
[-36.11038208 395.05511475]
[-52.01145172 392.92541504]
[-60.13663864 379.09210205]
[-54.25299454 364.16687012]
[-38.87395096 359.59912109]
[-30.57307625 347.10528564]
[-22.27220345 334.61148071]
[-14.10261822 322.03140259]
[-6.06521654 309.36648560]
[1.02304494 296.14694214]
[7.12409449 282.44375610]
[13.22514439 268.74057007]
[11.33341694 253.96659851]
[24.01482773 244.50654602]
[30.11587715 230.80337524]
[36.21692657 217.10018921]
[36.06327057 209.66116333]
[42.59191513 203.17601013]
[48.97860336 189.60360718]
[55.36529541 176.03118896]
[61.60950470 162.39265442]
[67.71055603 148.68946838]
[73.81160736 134.98629761]
[72.85196686 131.52841187]
[73.56142426 127.42783356]
[76.22593689 123.49379730]
[80.75019836 120.63311768]
[87.69963837 107.34006500]
[87.30606842 93.36376953]
[99.00730896 85.71049500]
[105.95674896 72.41744232]
[112.90618896 59.12438583]
[119.85562897 45.83133316]
[126.80506897 32.53828049]
[133.75450134 19.24522591]
[140.70394897 5.95217276]
[147.65339661 -7.34088087]
[143.15652466 -22.25449944]
[150.39361572 -35.63654709]
[164.63919067 -39.83171082]
[171.58862305 -53.12476349]
[178.25814819 -66.56044006]
[184.64483643 -80.13284302]
[191.03152466 -93.70525360]
[187.40115356 -106.12699890]
[193.05142212 -117.32154083]
[204.44717407 -121.50090790]
[211.11669922 -134.93658447]
[201.83250427 -147.00161743]
[198.72006226 -161.84074402]
[202.34428406 -176.49971008]
[211.93431091 -188.08384705]
[225.54678345 -194.32966614]
[240.45938110 -194.04702759]
[247.12890625 -207.48271179]
[253.79843140 -220.91838074]
[260.46795654 -234.35406494]
[254.72105408 -246.57923889]
[257.05163574 -259.68725586]
[266.38302612 -268.90802002]
[279.13317871 -271.01828003]
[286.08264160 -284.31134033]
[293.03207397 -297.60440063]
[299.98150635 -310.89743042]
[306.93093872 -324.19049072]
[298.82217407 -337.15948486]
[298.29708862 -352.34570312]
[305.39663696 -365.66723633]
[318.12576294 -373.59347534]
[333.01293945 -374.08074951]
[339.96237183 -387.37380981]
[346.91183472 -400.66687012]
[345.68487549 -417.02005005]
[359.38424683 -426.03439331]
[373.91723633 -418.43673706]
[374.33352661 -402.04287720]
[360.20486450 -393.71740723]
[353.25543213 -380.42434692]
[346.30599976 -367.13131714]
[354.40219116 -354.62863159]
[355.15823364 -339.65249634]
[348.27108765 -326.21994019]
[335.50128174 -317.98413086]
[320.22399902 -317.24105835]
[313.27456665 -303.94799805]
[306.32513428 -290.65493774]
[299.37567139 -277.36187744]
[292.42623901 -264.06884766]
[298.14495850 -248.28494263]
[290.55810547 -232.93243408]
[273.90362549 -227.68452454]
[267.23410034 -214.24885559]
[260.56457520 -200.81317139]
[253.89505005 -187.37750244]
[263.13632202 -175.67005920]
[266.39144897 -161.05110168]
[262.96246338 -146.40859985]
[253.47734070 -134.65901184]
[239.77575684 -128.16644287]
[224.55236816 -128.26705933]
[217.88284302 -114.83137512]
[219.95455933 -97.43352509]
[204.60394287 -87.31855774]
[198.21725464 -73.74615479]
[191.83055115 -60.17374802]
[192.60279846 -55.39958954]
[190.33728027 -50.09667206]
[184.88168335 -46.17532349]
[177.93223572 -32.88226700]
[182.61752319 -18.79029655]
[175.75917053 -5.21025229]
[160.94644165 -0.39144039]
[153.99700928 12.90161324]
[147.04756165 26.19466782]
[140.09812927 39.48772049]
[133.14868164 52.78077316]
[126.19924164 66.07382965]
[119.24980164 79.36688232]
[112.30036163 92.65993500]
[112.69393158 106.63623047]
[100.99269104 114.28950500]
[94.04325104 127.58255768]
[87.51478577 141.08734131]
[81.41373444 154.79052734]
[75.31269073 168.49369812]
[74.66941071 177.67338562]
[68.93769836 182.41789246]
[62.55101013 195.99029541]
[56.16432190 209.56269836]
[49.92010880 223.20123291]
[43.81906128 236.90441895]
[37.71800995 250.60760498]
[39.17335129 266.36172485]
[26.92832565 274.84161377]
[20.82727623 288.54479980]
[14.72622681 302.24798584]
[28.87072945 297.25469971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[9 19]
[10 18]
[11 17]
[22 148]
[23 147]
[24 146]
[26 144]
[27 143]
[28 142]
[30 141]
[31 140]
[32 139]
[33 137]
[34 136]
[35 135]
[39 134]
[40 133]
[42 131]
[43 130]
[44 129]
[45 128]
[46 127]
[47 126]
[48 125]
[49 124]
[52 121]
[53 120]
[54 117]
[55 116]
[56 115]
[59 113]
[60 112]
[66 106]
[67 105]
[68 104]
[69 103]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
