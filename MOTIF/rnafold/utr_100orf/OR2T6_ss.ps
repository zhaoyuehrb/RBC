%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUGAAAACAAUGAAACCUUGACCAGAGGCUUUACCCUCAUGGGGCUCUUCACUCACAAUAAAUGCUCAGGAUUCUUUUUCGGUGUCAUUUGUGCCG\
) } def
/len { sequence length } bind def

/coor [
[97.70682526 352.77252197]
[83.54608917 358.23495483]
[68.36834717 358.20913696]
[54.22627258 352.69857788]
[43.03245926 342.44854736]
[36.30078125 328.84527588]
[34.94164276 313.72851562]
[39.13885498 299.14260864]
[48.32478333 287.06027222]
[61.25709915 279.11547852]
[76.18681335 276.38272095]
[78.97003174 261.64318848]
[81.75325012 246.90367126]
[84.53646851 232.16413879]
[87.09011841 217.38311768]
[89.41358948 202.56416321]
[91.73706055 187.74520874]
[86.06458282 173.97305298]
[95.84611511 161.53793335]
[98.16958618 146.71897888]
[100.49306488 131.90002441]
[86.07761383 128.80668640]
[74.55345917 119.54356384]
[68.39838409 106.05403137]
[68.95741272 91.19521332]
[76.14911652 78.13288116]
[64.38020325 68.83273315]
[52.61128998 59.53259277]
[40.69916534 50.41660309]
[28.64670944 41.48696899]
[16.59425545 32.55733490]
[4.54180050 23.62770271]
[-11.05144024 26.20188141]
[-23.84889984 16.92823219]
[-26.25807381 1.30864751]
[-16.84963989 -11.39005089]
[-1.20545673 -13.63394928]
[11.39305973 -4.09178352]
[13.47143364 11.57524872]
[25.52388763 20.50488281]
[37.57634354 29.43451500]
[49.62879562 38.36414719]
[57.00707626 39.84282303]
[61.91143036 47.76367950]
[73.68034363 57.06382370]
[85.44925690 66.36396790]
[100.14372253 63.35186005]
[107.30451965 50.17145920]
[114.46531677 36.99105835]
[104.04153442 26.02748871]
[97.51767731 12.37851238]
[95.53289795 -2.61868238]
[98.28164673 -17.49482346]
[105.49462128 -30.79249954]
[116.46517181 -41.20893860]
[130.11851501 -47.72364044]
[145.11703491 -49.69836807]
[159.99133301 -46.93965530]
[173.28417969 -39.71776962]
[183.69326782 -28.74024200]
[190.19882202 -15.08253574]
[192.16349792 -0.08269492]
[189.39480591 14.78974915]
[182.16401672 28.07774544]
[171.17951965 38.47947311]
[157.51745605 44.97587585]
[142.51631165 46.93050003]
[127.64572144 44.15185547]
[120.48492432 57.33225632]
[113.32411957 70.51265717]
[125.63432312 80.50271606]
[131.67536926 95.07998657]
[130.05554199 110.70134735]
[144.83657837 113.25499725]
[159.61759949 115.80865479]
[172.38621521 106.49533081]
[187.98738098 109.02111053]
[197.16517639 121.88748169]
[194.47459412 137.46105957]
[181.51191711 146.50231934]
[165.96765137 143.64723206]
[157.06394958 130.58969116]
[142.28291321 128.03602600]
[127.50188446 125.48237610]
[115.31201935 134.22349548]
[112.98854828 149.04244995]
[110.66507721 163.86140442]
[116.17136383 178.69351196]
[106.55602264 190.06867981]
[104.23255157 204.88763428]
[101.90907288 219.70658875]
[103.68793488 228.85144043]
[99.27599335 234.94735718]
[96.49277496 249.68688965]
[93.70956421 264.42642212]
[90.92634583 279.16595459]
[103.83155823 287.15469360]
[112.97633362 299.26821899]
[117.12390137 313.86828613]
[115.71334839 328.98034668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 96]
[12 95]
[13 94]
[14 93]
[15 91]
[16 90]
[17 89]
[19 87]
[20 86]
[21 85]
[26 46]
[27 45]
[28 44]
[29 42]
[30 41]
[31 40]
[32 39]
[47 70]
[48 69]
[49 68]
[73 84]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
