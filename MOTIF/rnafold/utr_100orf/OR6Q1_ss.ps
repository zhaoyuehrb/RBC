%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAACCAUAUACCAAAAACUGGACCCAGGUAACUGAAUUUGUCAUGAUGGGCUUUGCUGGCAUCCAUGAAGCACACCUCCUCUUCUUCAUACUCUUCC\
) } def
/len { sequence length } bind def

/coor [
[134.02336121 200.40374756]
[136.82885742 185.66844177]
[142.15124512 171.64445496]
[149.82868958 158.75816345]
[159.62779236 147.40132141]
[171.25061035 137.91923523]
[184.33804321 130.60276794]
[169.85926819 126.68294525]
[155.38049316 122.76311493]
[140.90171814 118.84328461]
[125.45186615 137.15135193]
[102.79972076 144.94642639]
[79.35531616 140.02270508]
[61.75288773 123.77347565]
[47.87247849 129.45980835]
[33.99207306 135.14613342]
[26.49374962 149.32902527]
[10.70384884 152.16780090]
[-1.26496744 141.48478699]
[-0.23124906 125.47506714]
[13.01202393 116.41993713]
[28.30574608 121.26572418]
[42.18615341 115.57939911]
[56.06655884 109.89307404]
[55.17033768 104.28035736]
[54.98823929 98.59946442]
[55.52316666 92.94087982]
[56.76659393 87.39473724]
[43.26655579 80.85647583]
[29.76651382 74.31820679]
[13.45868111 76.04639435]
[4.02819204 62.63006210]
[11.17632484 47.87078857]
[27.54969406 46.95164108]
[36.30477905 60.81816864]
[49.80482101 67.35643005]
[63.30485916 73.89469910]
[69.83138275 66.56536865]
[77.79066467 60.82391739]
[86.80471802 56.94300842]
[96.44543457 55.10696030]
[106.25496674 55.40296555]
[115.76743317 57.81697083]
[124.53108215 62.23432541]
[132.12969971 68.44524384]
[138.20242310 76.15476227]
[142.46083069 84.99673462]
[144.70269775 94.55123901]
[144.82154846 104.36450958]
[159.30032349 108.28433990]
[173.77909851 112.20417023]
[188.25787354 116.12400055]
[202.79585266 112.42981720]
[213.64698792 102.07351685]
[224.49812317 91.71721649]
[235.34925842 81.36091614]
[246.20037842 71.00461578]
[257.05151367 60.64831543]
[261.19647217 52.30493546]
[268.40487671 50.14519119]
[279.57284546 40.13136673]
[290.74078369 30.11754608]
[298.49703979 15.04184246]
[315.13073730 18.32161140]
[316.58380127 35.21317673]
[300.75460815 41.28550720]
[289.58663940 51.29932785]
[278.41870117 61.31315231]
[267.40780640 71.49944305]
[256.55667114 81.85574341]
[245.70555115 92.21204376]
[234.85441589 102.56834412]
[224.00329590 112.92464447]
[213.15216064 123.28094482]
[228.15106201 123.46273804]
[242.89036560 126.24708557]
[256.92199707 131.54933167]
[269.81930542 139.20826721]
[281.19018555 148.99105835]
[290.68893433 160.60026550]
[298.02679443 173.68292236]
[302.98062134 187.84130859]
[305.39981079 202.64492798]
[305.21084595 217.64373779]
[302.41943359 232.38172913]
[297.11047363 246.41079712]
[289.44537354 259.30444336]
[279.65713501 270.67065430]
[268.04339600 280.16384888]
[254.95722961 287.49542236]
[240.79647827 292.44247437]
[225.99169922 294.85461426]
[210.99298096 294.65844727]
[196.25633240 291.86001587]
[182.22979736 286.54434204]
[169.33982849 278.87304688]
[157.97830200 269.07937622]
[148.49066162 257.46109009]
[141.16534424 244.37141418]
[136.22506714 230.20831299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 52]
[8 51]
[9 50]
[10 49]
[14 24]
[15 23]
[16 22]
[28 37]
[29 36]
[30 35]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
