%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCUCACGGACAAAGCGAAGGCAGAAAGUUAAAAUCAGCAUAUCGAAAAUAAAUCACUCUAGUUACCGAAAAGAACAUAGGCCGUUUUGGGAGCACC\
) } def
/len { sequence length } bind def

/coor [
[62.34448242 176.10725403]
[40.13181686 160.21670532]
[28.65782928 169.87837219]
[24.00218391 177.94790649]
[16.67346001 179.65533447]
[4.90454531 188.95547485]
[-6.86436892 198.25563049]
[-9.18195438 211.06130981]
[-19.32462120 218.55470276]
[-31.44522095 217.10243225]
[-43.49767303 226.03207397]
[-44.26222229 241.65095520]
[-54.92539597 253.08908081]
[-70.45236969 254.94572449]
[-83.51177979 246.34422302]
[-87.93737793 231.34594727]
[-81.63952637 217.03263855]
[-67.59188080 210.16258240]
[-52.42730713 213.97961426]
[-40.37485504 205.04998779]
[-34.36898804 188.64172363]
[-16.16451263 186.48670959]
[-4.39559793 177.18656921]
[7.37331581 167.88642883]
[18.99617195 158.40437317]
[30.47016144 148.74272156]
[25.85441780 141.38458252]
[22.01452637 133.59341431]
[18.99066544 125.45072174]
[16.81447601 117.04171753]
[15.50872898 108.45438385]
[15.08708858 99.77859497]
[15.55396748 91.10511017]
[16.90447807 82.52471161]
[19.12449074 74.12716675]
[22.19077492 66.00035858]
[26.07124329 58.22930908]
[30.72529602 50.89534760]
[36.10422897 44.07521057]
[42.15176010 37.84026718]
[48.80460739 32.25575256]
[55.99315643 27.38010406]
[63.64218903 23.26434326]
[71.67166901 19.95153427]
[79.99756622 17.47634125]
[88.53276825 15.86466789]
[97.18796539 15.13337517]
[105.87258148 15.29011726]
[114.49575043 16.33325195]
[122.96723938 18.25186729]
[131.19841003 21.02588272]
[139.10310364 24.62627602]
[146.59864807 29.01536942]
[153.60658264 34.14723587]
[160.05357361 39.96817780]
[165.87217712 46.41728973]
[171.00151062 53.42707825]
[175.38789368 60.92420578]
[178.98541260 68.83021545]
[181.75645447 77.06237793]
[183.67199707 85.53456116]
[184.71200562 94.15811157]
[184.86560059 102.84278870]
[184.13116455 111.49771881]
[182.51640320 120.03233337]
[196.72348022 124.84471893]
[210.76333618 118.09786224]
[225.10278320 123.18069458]
[231.44834900 136.60713196]
[245.65542603 141.41952515]
[259.86248779 146.23190308]
[274.06958008 151.04429626]
[288.27664185 155.85668945]
[302.48370361 160.66906738]
[312.78280640 149.45085144]
[326.75695801 143.39749146]
[341.98504639 143.55773926]
[355.82867432 149.90386963]
[365.88940430 161.33634949]
[370.42413330 175.87443542]
[368.64718628 190.99932861]
[360.86645508 204.09054565]
[348.42996216 212.87994385]
[333.49243164 215.84472656]
[318.64184570 212.47120667]
[306.45123291 203.34387207]
[299.03259277 190.04409790]
[297.67132568 174.87614441]
[283.46426392 170.06375122]
[269.25717163 165.25137329]
[255.05010986 160.43898010]
[240.84303284 155.62660217]
[226.63595581 150.81420898]
[213.43699646 157.62030029]
[198.96044922 152.94223022]
[191.91108704 139.05178833]
[177.70402527 134.23941040]
[162.81533813 157.13566589]
[141.42829895 174.12117004]
[115.75545502 183.43870544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[5 24]
[6 23]
[7 22]
[10 20]
[11 19]
[65 97]
[66 96]
[69 93]
[70 92]
[71 91]
[72 90]
[73 89]
[74 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
