%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGCUGCUCUGCGGGGAGGCGGGCGCUCCCGCAGGGGUUCCUCCAAGAUGGCGGCGCAGAGGAGGAGCUUGCUGCAGAGUGAGCAGCAGCCAAGCUGGACAGAUGACCUGCCUCUCUGCCACCUCUCUGGGGUUGGCUCAGCCUCCA\
) } def
/len { sequence length } bind def

/coor [
[52.12281799 273.36437988]
[49.83237076 275.67965698]
[47.21768188 276.85400391]
[41.40494919 290.68194580]
[35.59221649 304.50988770]
[29.77947998 318.33782959]
[35.98228836 332.87402344]
[30.01225853 347.50735474]
[15.41130447 353.55612183]
[0.84191322 347.43173218]
[-5.05215406 332.76763916]
[1.22594821 318.26379395]
[15.95153332 312.52511597]
[21.76426697 298.69714355]
[27.57700157 284.86920166]
[33.38973618 271.04125977]
[38.61831665 256.98202515]
[43.25357056 242.71618652]
[47.88882446 228.45033264]
[52.52408218 214.18449402]
[57.15933609 199.91864014]
[61.79459000 185.65278625]
[66.28020477 171.33918762]
[70.61567688 156.97940063]
[74.95115662 142.61959839]
[79.28663635 128.25981140]
[69.36695862 117.00814056]
[54.57701492 119.50967407]
[39.78707504 122.01120758]
[24.99713326 124.51273346]
[10.20719242 127.01426697]
[-2.07678699 137.87869263]
[-17.53963661 132.41680908]
[-20.27450180 116.24730682]
[-7.46798801 106.00400543]
[7.70566177 112.22432709]
[22.49560165 109.72279358]
[37.28554153 107.22126770]
[52.07548141 104.71973419]
[66.86542511 102.21820068]
[73.99462891 83.28669739]
[89.87825012 73.23251343]
[107.18666840 74.67856598]
[115.22406769 62.01364517]
[123.26146698 49.34872818]
[131.29887390 36.68380737]
[139.33627319 24.01889038]
[147.24061584 11.27049923]
[155.01101685 -1.55996478]
[162.78141785 -14.39042854]
[164.57014465 -23.41710663]
[170.85130310 -27.40581512]
[178.88870239 -40.07073593]
[179.75038147 -55.86845779]
[193.10281372 -62.46859741]
[201.14022827 -75.13351440]
[209.17762756 -87.79843140]
[217.21502686 -100.46335602]
[218.07670593 -116.26107788]
[231.42913818 -122.86121368]
[239.46653748 -135.52613831]
[247.50395203 -148.19105530]
[255.54135132 -160.85597229]
[263.57873535 -173.52088928]
[271.48309326 -186.26928711]
[279.25347900 -199.09974670]
[287.02389526 -211.93020630]
[293.41058350 -225.50260925]
[298.34359741 -239.66825867]
[303.27658081 -253.83390808]
[308.20959473 -267.99954224]
[313.14257812 -282.16519165]
[318.07559204 -296.33084106]
[322.85998535 -310.54736328]
[327.49523926 -324.81320190]
[332.13049316 -339.07907104]
[336.76574707 -353.34490967]
[326.42913818 -364.70495605]
[323.17309570 -379.71472168]
[327.87344360 -394.33670044]
[339.26580811 -404.63763428]
[354.28573608 -407.84664917]
[368.89291382 -403.10046387]
[379.15808105 -391.67587280]
[382.31997681 -376.64596558]
[377.52807617 -362.05374146]
[366.07131958 -351.82443237]
[351.03158569 -348.70965576]
[346.39633179 -334.44381714]
[341.76107788 -320.17794800]
[337.12582397 -305.91210938]
[338.05621338 -298.52990723]
[332.24124146 -291.39785767]
[327.30822754 -277.23220825]
[322.37524414 -263.06655884]
[317.44223022 -248.90090942]
[312.50924683 -234.73526001]
[307.57623291 -220.56961060]
[320.27551270 -228.55259705]
[335.25906372 -229.25485229]
[348.64935303 -222.49462891]
[356.98110962 -210.02140808]
[358.09823608 -195.06306458]
[351.71160889 -181.49063110]
[339.47399902 -172.81646729]
[324.55236816 -171.28532410]
[310.80819702 -177.29345703]
[301.79830933 -189.28604126]
[299.85437012 -204.15980530]
[292.08395386 -191.32934570]
[284.31353760 -178.49887085]
[283.53363037 -171.09925842]
[276.24368286 -165.48348999]
[268.20626831 -152.81857300]
[260.16885376 -140.15365601]
[252.13146973 -127.48873138]
[244.09405518 -114.82381439]
[243.80726624 -99.93196869]
[229.87994385 -92.42594910]
[221.84254456 -79.76103210]
[213.80514526 -67.09611511]
[205.76774597 -54.43119431]
[205.48094177 -39.53935242]
[191.55361938 -32.03333282]
[183.51622009 -19.36841393]
[175.61189270 -6.62002373]
[167.84147644 6.21044016]
[160.07107544 19.04090500]
[159.29116821 26.44052887]
[152.00119019 32.05628967]
[143.96379089 44.72121048]
[135.92639160 57.38612747]
[127.88898468 70.05104828]
[119.85158539 82.71596527]
[127.91300201 97.29942322]
[125.77930450 114.87921906]
[113.05179596 128.65446472]
[93.64642334 132.59529114]
[89.31095123 146.95507812]
[84.97547150 161.31486511]
[80.63999176 175.67466736]
[81.15230560 184.86259460]
[76.06044006 190.28804016]
[71.42518616 204.55389404]
[66.78992462 218.81974792]
[62.15467453 233.08558655]
[57.51941681 247.35144043]
[52.88416290 261.61727905]
[53.98647308 265.97366333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[17 148]
[18 147]
[19 146]
[20 145]
[21 144]
[22 143]
[23 141]
[24 140]
[25 139]
[26 138]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[43 134]
[44 133]
[45 132]
[46 131]
[47 130]
[48 128]
[49 127]
[50 126]
[52 125]
[53 124]
[55 122]
[56 121]
[57 120]
[58 119]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[65 111]
[66 110]
[67 109]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[74 91]
[75 90]
[76 89]
[77 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
