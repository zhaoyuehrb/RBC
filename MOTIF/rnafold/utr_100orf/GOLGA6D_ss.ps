%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCAGCCUUGUAGGUGACUGGAGGUGUUCGCUGAUGUGGCCCCAACCCUACCUCCCUCCCCACCCCAUGAUGUUAGAAGAAUCUCGACAGAAUAAAUUGGCAGCAGCCAAGAAAAAGCUAAAAGAAUAUCAGC\
) } def
/len { sequence length } bind def

/coor [
[93.80080414 201.68145752]
[102.76369476 189.47714233]
[115.20510864 180.84638977]
[111.10016632 166.41900635]
[106.99522400 151.99162292]
[97.25255585 152.38810730]
[87.60481262 150.97471619]
[78.38528442 147.80027771]
[69.91249084 142.97445679]
[62.47914505 136.66398621]
[56.34204865 129.08686829]
[51.71322250 120.50486755]
[48.75258255 111.21447754]
[47.56240845 101.53665161]
[48.18381882 91.80574799]
[33.85509872 87.36865234]
[19.52638054 82.93156433]
[5.19766045 78.49446869]
[-8.90691566 89.76895905]
[-26.79720116 90.38422394]
[-41.38634491 80.28302765]
[-47.00646591 63.61639786]
[-61.52481461 59.84579086]
[-76.04316711 56.07518387]
[-90.56151581 52.30457306]
[-105.07987213 48.53396606]
[-119.59822083 44.76335907]
[-134.23847961 41.49797440]
[-148.98307800 38.74173355]
[-163.72767639 35.98548889]
[-182.32958984 43.59752274]
[-196.56523132 30.58975983]
[-211.42138672 28.51741409]
[-226.27754211 26.44506836]
[-239.89517212 34.92681503]
[-254.96817017 29.43281555]
[-259.93383789 14.17759800]
[-250.98294067 0.86365980]
[-234.98184204 -0.29568535]
[-224.20520020 11.58891296]
[-209.34904480 13.66125774]
[-194.49288940 15.73360348]
[-186.83407593 8.80502129]
[-176.40066528 7.25130129]
[-166.65579224 11.83527470]
[-160.97143555 21.24089241]
[-146.22683716 23.99713516]
[-131.48223877 26.75337791]
[-128.32669067 24.99779510]
[-124.14261627 24.73719215]
[-119.66765594 26.44746208]
[-115.82761383 30.24500847]
[-101.30926514 34.01561737]
[-86.79090881 37.78622437]
[-72.27256012 41.55683136]
[-57.75420761 45.32743835]
[-43.23585892 49.09804535]
[-35.03038406 40.01527023]
[-23.66115570 35.28792572]
[-11.29000854 35.88209534]
[-0.29818258 41.74552155]
[7.17203474 51.80574036]
[9.63475227 64.16574860]
[23.96347237 68.60284424]
[38.29219055 73.03993225]
[52.62091064 77.47702789]
[71.09372711 56.22227097]
[97.89591217 47.58211136]
[125.30438995 54.04621887]
[134.34391785 42.07595825]
[132.35906982 26.62610054]
[141.69696045 14.61532688]
[156.43826294 12.81830311]
[165.47778320 0.84804440]
[174.51730347 -11.12221432]
[183.55682373 -23.09247208]
[192.45748901 -35.16633606]
[201.21810913 -47.34219360]
[209.97872925 -59.51805496]
[211.07827759 -75.88029480]
[225.91543579 -82.86533356]
[239.22702026 -73.28755188]
[237.31919861 -56.99975586]
[222.15458679 -50.75743484]
[213.39396667 -38.58157349]
[204.63334656 -26.40571594]
[203.26802063 -19.07328987]
[195.52708435 -14.05295277]
[186.48756409 -2.08269453]
[177.44804382 9.88756371]
[168.40852356 21.85782242]
[170.71424866 36.52817535]
[161.71742249 48.79648972]
[146.31416321 51.11547852]
[137.27464294 63.08573914]
[143.85661316 71.21354675]
[148.69544983 80.48550415]
[151.59883118 90.53308868]
[152.45137024 100.95693970]
[167.25570679 103.37187958]
[182.06002808 105.78681183]
[196.86434937 108.20175171]
[211.66867065 110.61669159]
[226.80566406 104.30767822]
[239.67190552 114.47586823]
[237.03170776 130.66108704]
[221.60108948 136.21337891]
[209.25373840 125.42102051]
[194.44941711 123.00608063]
[179.64508057 120.59114075]
[164.84075928 118.17620087]
[150.03643799 115.76126099]
[147.77436829 121.67190552]
[144.81701660 127.26713562]
[141.20741272 132.46553040]
[136.99809265 137.19143677]
[132.25032043 141.37606812]
[127.03318024 144.95852661]
[121.42260742 147.88668823]
[125.52754974 162.31407166]
[129.63249207 176.74145508]
[144.75390625 177.52990723]
[158.79905701 183.18786621]
[170.24443054 193.10159302]
[177.84852600 206.19573975]
[180.78649902 221.04992676]
[178.73965454 236.05290222]
[171.93003845 249.57725525]
[161.09629822 260.15594482]
[147.41358948 266.64147949]
[132.36611938 268.33038330]
[117.58612061 265.03942871]
[104.67681885 257.12561035]
[95.03852081 245.44734192]
[89.71670532 231.27140808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 121]
[4 120]
[5 119]
[15 66]
[16 65]
[17 64]
[18 63]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 48]
[29 47]
[30 46]
[32 42]
[33 41]
[34 40]
[69 95]
[70 94]
[73 91]
[74 90]
[75 89]
[76 88]
[77 86]
[78 85]
[79 84]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
