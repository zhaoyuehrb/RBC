%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCGGACGGAAGUUCCCGAAGCUUCCGGUGGCCGGCUUAGUUAGGAGCUAUGGCUAAACAUCAUCCUGAUUUGAUCUUUUGCCGCAAGCAGGCUGGUGUUGCCAUCGGAAGACUGUGUGAAAAAUGUGAUGGCAAGUGUGUGAUUUGUG\
) } def
/len { sequence length } bind def

/coor [
[91.52948761 249.12742615]
[90.60000610 234.15625000]
[89.67052460 219.18507385]
[88.74104309 204.21389771]
[87.81156158 189.24272156]
[86.88208008 174.27154541]
[78.37100220 162.04817200]
[85.23829651 147.79508972]
[84.30881500 132.82391357]
[70.27935028 127.51598358]
[59.67274857 138.12258911]
[49.06614685 148.72918701]
[38.45954514 159.33578491]
[27.85294342 169.94239807]
[17.24634171 180.54899597]
[6.63973999 191.15559387]
[5.20186901 207.13407898]
[-8.26595306 215.85173035]
[-23.43236542 210.62109375]
[-28.66299438 195.45468140]
[-19.94535065 181.98686218]
[-3.96686196 180.54899597]
[6.63973999 169.94239807]
[17.24634171 159.33578491]
[27.85294342 148.72918701]
[38.45954514 138.12258911]
[49.06614685 127.51598358]
[59.67274857 116.90938568]
[67.99282074 112.36329651]
[76.53161621 108.30654907]
[85.26798248 104.74769592]
[70.80619049 100.76567841]
[56.34439087 96.78366852]
[41.88259125 92.80165100]
[27.42079544 88.81964111]
[12.87979221 85.13735962]
[-1.73420751 81.75637817]
[-16.34820747 78.37539673]
[-30.96220589 74.99442291]
[-45.57620621 71.61344147]
[-58.84844589 80.19384003]
[-74.28283691 76.79457092]
[-82.72243500 63.43235397]
[-79.16017151 48.03476334]
[-65.70947266 39.73691177]
[-50.35040665 43.46176910]
[-42.19522858 56.99944305]
[-27.58122826 60.38042068]
[-12.96722889 63.76139832]
[1.64677083 67.14237976]
[16.26077080 70.52335358]
[20.76243782 68.76345062]
[26.42032433 69.85787964]
[31.40280914 74.35784149]
[45.86460495 78.33985901]
[60.32640457 82.32186890]
[74.78820038 86.30387878]
[89.25000000 90.28589630]
[101.97436523 82.34294891]
[104.74853516 67.60171509]
[107.52270508 52.86048126]
[110.29686737 38.11924744]
[113.07103729 23.37801170]
[115.84519958 8.63677692]
[118.61936951 -6.10445786]
[113.56781006 -21.09753418]
[123.52547455 -32.17427826]
[126.29964447 -46.91551208]
[129.07380676 -61.65674591]
[131.84797668 -76.39797974]
[130.35572815 -85.47525024]
[134.83480835 -91.41382599]
[137.91304016 -106.09457397]
[140.99127197 -120.77532959]
[144.06950378 -135.45608521]
[132.22474670 -145.14939880]
[126.25212097 -159.24147034]
[127.52409363 -174.49403381]
[135.74836731 -187.40216064]
[149.03507996 -194.99966431]
[164.33100891 -195.54069519]
[178.12130737 -188.90092468]
[187.23703003 -176.60612488]
[189.58346558 -161.48155212]
[184.62141418 -147.00271606]
[173.49111938 -136.49674988]
[158.75025940 -132.37785339]
[155.67202759 -117.69709778]
[152.59379578 -103.01634216]
[149.51556396 -88.33559418]
[146.58920288 -73.62380981]
[143.81504822 -58.88257980]
[141.04087830 -44.14134216]
[138.26670837 -29.40011024]
[143.51669312 -15.46142483]
[133.36061096 -3.33029079]
[130.58644104 11.41094398]
[127.81227112 26.15217781]
[125.03810120 40.89341354]
[122.26393890 55.63464737]
[119.48976898 70.37588501]
[116.71559906 85.11711884]
[125.04915619 97.58915710]
[139.72990417 100.66738892]
[154.41065979 103.74562073]
[169.09141541 106.82385254]
[183.77217102 109.90208435]
[198.45292664 112.98030853]
[213.13366699 116.05854034]
[220.44471741 102.82826996]
[231.33178711 92.34194946]
[244.82684326 85.53201294]
[259.72988892 83.00400543]
[274.71572876 84.98269653]
[288.45190430 91.29216003]
[299.71694946 101.37136078]
[307.50918579 114.32405090]
[311.13577271 128.99850464]
[310.27416992 144.08985901]
[305.00106812 158.25621033]
[295.78527832 170.23789978]
[283.44631958 178.96952820]
[269.08132935 183.67466736]
[253.96763611 183.93495178]
[239.44914246 179.72724915]
[226.81683350 171.42567444]
[217.19395447 159.76841736]
[211.43615723 145.79203796]
[210.05543518 130.73928833]
[195.37469482 127.66106415]
[180.69393921 124.58283234]
[166.01318359 121.50460052]
[151.33242798 118.42637634]
[136.65167236 115.34814453]
[121.97092438 112.26991272]
[116.29819489 117.17604065]
[126.11027527 128.52166748]
[114.76450348 138.33357239]
[104.95272827 126.98829651]
[99.27999115 131.89442444]
[100.20947266 146.86560059]
[108.78704071 160.15980530]
[101.85325623 173.34207153]
[102.78273773 188.31324768]
[103.71221924 203.28442383]
[104.64170074 218.25558472]
[105.57118225 233.22676086]
[106.50066376 248.19793701]
[116.01050568 261.55813599]
[108.94998169 276.35952759]
[92.58235168 277.37570190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[8 141]
[9 140]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[59 102]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
[67 94]
[68 93]
[69 92]
[70 91]
[72 90]
[73 89]
[74 88]
[75 87]
[103 135]
[104 134]
[105 133]
[106 132]
[107 131]
[108 130]
[109 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
