%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGAGAUGCGGCUUUCAGGCAUUUGUUUAGGACAUGCCCAUGGCGGGGCUUCUAAAGGGGCUUGUACGGCAACUGGAGCGGUUCAGCGUUCAACAACAAGCUUCCAAGAUGCCGCCCAAAGGAAAAAGUGGUU\
) } def
/len { sequence length } bind def

/coor [
[94.59823608 399.48858643]
[86.65839386 412.57357788]
[73.54112244 420.46002197]
[58.26068115 421.33563232]
[44.32839966 414.99920654]
[34.94581985 402.90682983]
[32.26898575 387.83721924]
[36.91301346 373.25326538]
[47.81074142 362.50625610]
[62.45795059 358.06579590]
[65.21419525 343.32119751]
[59.94726562 329.38888550]
[70.08860016 317.24542236]
[72.84484100 302.50082397]
[75.60108185 287.75622559]
[78.35732269 273.01162720]
[81.11357117 258.26702881]
[72.34867096 236.46157837]
[79.38547516 217.14318848]
[95.01573944 208.97395325]
[94.66927338 193.97795105]
[94.32279968 178.98194885]
[93.97633362 163.98594666]
[93.62986755 148.98995972]
[93.28339386 133.99395752]
[92.93692780 118.99795532]
[77.69692230 106.59609222]
[78.94295502 84.33033752]
[65.22104645 78.27152252]
[51.49913788 72.21270752]
[37.77722931 66.15389252]
[24.05532265 60.09508133]
[10.33341503 54.03626633]
[-3.38849330 47.97745132]
[-8.75656700 48.56998062]
[-13.32633686 47.13210297]
[-16.44435692 44.32990265]
[-17.82789230 40.99443054]
[-31.09732437 33.99999237]
[-44.36675644 27.00555420]
[-57.63618851 20.01111794]
[-72.65716553 24.92495155]
[-86.71523285 17.70370483]
[-91.46997833 2.63161397]
[-84.10050201 -11.34931564]
[-68.97898865 -15.94444752]
[-55.07675171 -8.42757034]
[-50.64175415 6.74168491]
[-37.37231827 13.73612213]
[-24.10288620 20.73056030]
[-10.83345413 27.72499657]
[2.67032194 34.25554276]
[16.39222908 40.31435776]
[30.11413765 46.37317276]
[43.83604431 52.43198776]
[57.55795288 58.49080276]
[71.27986145 64.54962158]
[85.00177002 70.60843658]
[99.56270599 67.00576019]
[108.87629700 55.24748993]
[118.18989563 43.48921967]
[127.50348663 31.73094749]
[136.81707764 19.97267532]
[146.13067627 8.21440506]
[155.44427490 -3.54386592]
[164.75787354 -15.30213642]
[174.07147217 -27.06040764]
[168.19754028 -50.40359879]
[186.47840881 -70.98647308]
[189.91267395 -85.58805084]
[193.34692383 -100.18962097]
[191.08757019 -116.99234772]
[206.60818481 -123.81486511]
[217.46061707 -110.78945923]
[207.94850159 -96.75536346]
[204.51423645 -82.15378571]
[201.07998657 -67.55221558]
[214.09913635 -60.10228729]
[224.94790649 -70.46106720]
[235.79666138 -80.81984711]
[246.64543152 -91.17863464]
[257.49420166 -101.53741455]
[257.60861206 -117.34128571]
[268.92306519 -128.37574768]
[284.72485352 -128.09422302]
[295.63906860 -116.66375732]
[295.19049072 -100.86583710]
[283.64526367 -90.07308960]
[267.85296631 -90.68865204]
[257.00421143 -80.32987213]
[246.15545654 -69.97108459]
[235.30668640 -59.61230469]
[224.45793152 -49.25352478]
[223.87196350 -35.65215302]
[217.76809692 -24.22802544]
[207.84950256 -16.96833038]
[196.41242981 -14.85312462]
[185.82974243 -17.74681282]
[176.51614380 -5.98854113]
[167.20254517 5.76972961]
[157.88894653 17.52799988]
[148.57536316 29.28627205]
[139.26176453 41.04454422]
[129.94816589 52.80281448]
[120.63456726 64.56108093]
[111.32097626 76.31935883]
[122.69678497 91.44785309]
[120.46802521 108.75408936]
[107.93292999 118.65148926]
[108.27939606 133.64749146]
[108.62586212 148.64347839]
[108.97232819 163.63948059]
[109.31880188 178.63548279]
[109.66526794 193.63148499]
[110.01173401 208.62747192]
[129.37606812 217.77125549]
[136.12142944 243.30050659]
[145.96812439 254.61610413]
[161.64401245 259.43258667]
[165.04652405 275.47485352]
[152.67546082 286.24002075]
[137.25709534 280.65377808]
[134.65252686 264.46279907]
[124.80583191 253.14720154]
[117.56891632 255.11622620]
[103.09508514 259.05426025]
[95.85816193 261.02328491]
[93.10192108 275.76788330]
[90.34568024 290.51248169]
[87.58943939 305.25708008]
[84.83319092 320.00167847]
[89.90297699 334.98858643]
[79.95878601 346.07742310]
[77.20254517 360.82202148]
[89.25657654 370.25384521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 134]
[11 133]
[13 131]
[14 130]
[15 129]
[16 128]
[17 127]
[20 115]
[21 114]
[22 113]
[23 112]
[24 111]
[25 110]
[26 109]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[38 51]
[39 50]
[40 49]
[41 48]
[59 106]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[69 77]
[70 76]
[71 75]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
