%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAACUUUCCGAAGCCUCUAGGUCAUUGUGGUGCCUUGUAGCUGUCCCGGGAGCCCUCAGCAGCAGUUGGAGCUGGUGCACAGGAAGGAUGAGGAAGACCAGGCUCUGGGGGCUGCUGUGGAUGCUCUUUGUCUCAGAACUCCGAGCUGCAACUAAAUUAACUGAGGAAAAGUAUGAACUGAAAGAGG\
) } def
/len { sequence length } bind def

/coor [
[97.20455933 205.89007568]
[101.91902924 220.27938843]
[101.70336151 235.41979980]
[96.58094788 249.66900635]
[87.10742950 261.48132324]
[74.31041718 269.57546997]
[59.57804489 273.07345581]
[44.50836182 271.59582520]
[30.73601723 265.30285645]
[19.75493431 254.87719727]
[12.75625610 241.44972229]
[10.49914837 226.47694397]
[13.22844410 211.58299255]
[20.64809036 198.38346863]
[31.95326042 188.31013489]
[45.91765213 182.45570374]
[61.02651215 181.45518494]
[64.92865753 166.97163391]
[68.83079529 152.48808289]
[72.73294067 138.00453186]
[76.63507843 123.52098083]
[64.47088623 114.74417114]
[51.95617294 123.01350403]
[39.44145966 131.28283691]
[33.99506378 138.63766479]
[26.65220833 139.58329773]
[14.00317764 147.64567566]
[1.35414791 155.70806885]
[-5.73068619 170.49783325]
[-22.09996605 171.48710632]
[-30.91438103 157.65821838]
[-23.10641670 143.23713684]
[-6.70823622 143.05903625]
[5.94079399 134.99664307]
[18.58982468 126.93426514]
[31.17212105 118.76812744]
[43.68683624 110.49879456]
[56.20154953 102.22945404]
[66.00189972 92.12612152]
[77.31020355 87.42628479]
[87.97966003 88.00187683]
[96.09653473 92.98667145]
[91.01779175 78.87261963]
[85.93904114 64.75857544]
[80.07907867 57.72882080]
[80.89492035 50.37041092]
[76.04899597 36.17474365]
[71.20307159 21.97907257]
[66.35715485 7.78340197]
[61.39465332 -6.37193537]
[56.31590652 -20.48598289]
[51.23715591 -34.60002899]
[39.28434372 -44.96539688]
[42.25541306 -59.56066895]
[37.17666245 -73.67471313]
[32.09791565 -87.78876495]
[27.01916885 -101.90280914]
[21.94042206 -116.01686096]
[16.86167526 -130.13090515]
[11.78292751 -144.24494934]
[6.70417976 -158.35899353]
[1.62543237 -172.47305298]
[-4.23453093 -179.50280762]
[-3.41869259 -186.86120605]
[-8.26461411 -201.05688477]
[-13.11053467 -215.25254822]
[-18.93890953 -201.43118286]
[-31.71184540 -193.56657410]
[-46.67725372 -194.58470154]
[-58.26734543 -204.10676575]
[-62.17010498 -218.59014893]
[-56.93353271 -232.64640808]
[-44.50585938 -241.04598999]
[-29.51072693 -240.66387939]
[-17.52577019 -231.64054871]
[-20.46724701 -246.34930420]
[-23.40872383 -261.05807495]
[-26.35020065 -275.76684570]
[-29.29167747 -290.47558594]
[-44.33966064 -291.79275513]
[-58.40650177 -297.29736328]
[-70.35186768 -306.54318237]
[-79.20739746 -318.78067017]
[-84.25521851 -333.01779175]
[-85.08612823 -348.10046387]
[-81.63275909 -362.80593872]
[-74.17506409 -375.94210815]
[-63.31761169 -386.44412231]
[-49.94055939 -393.46063232]
[-35.12832642 -396.42279053]
[-20.08167458 -395.09051514]
[-6.02036953 -389.57177734]
[5.91570234 -380.31396484]
[14.75893688 -368.06759644]
[19.79245186 -353.82537842]
[20.60820580 -338.74191284]
[17.14006615 -324.03991699]
[9.66917992 -310.91122437]
[-1.19882011 -300.42013550]
[-14.58291531 -293.41708374]
[-11.64143753 -278.70831299]
[-8.69996071 -263.99954224]
[-5.75848389 -249.29078674]
[-2.81700659 -234.58201599]
[1.08513510 -220.09846497]
[5.93105602 -205.90280151]
[10.77697754 -191.70713806]
[15.73947906 -177.55178833]
[20.81822777 -163.43774414]
[25.89697456 -149.32369995]
[30.97572136 -135.20965576]
[36.05447006 -121.09560394]
[41.13321686 -106.98155975]
[46.21196365 -92.86750793]
[51.29071045 -78.75346375]
[56.36945724 -64.63941956]
[67.95900726 -55.28358078]
[65.35120392 -39.67877579]
[70.42995453 -25.56472969]
[75.50869751 -11.45068264]
[80.74060059 -6.21245766]
[80.55282593 2.93748093]
[85.39874268 17.13315010]
[90.24466705 31.32882118]
[95.09059143 45.52449036]
[100.05309296 59.67982864]
[105.13183594 73.79387665]
[110.21058655 87.90792084]
[121.20236969 98.11482239]
[135.65333557 102.13594055]
[150.10430908 106.15706635]
[164.55528259 110.17818451]
[179.92451477 106.42356110]
[190.11177063 117.28952789]
[204.56274414 121.31064606]
[219.01371765 125.33177185]
[233.46469116 129.35289001]
[247.91564941 133.37400818]
[262.36663818 137.39514160]
[271.21350098 125.10861969]
[283.70672607 116.60619354]
[298.32760620 112.89807892]
[313.30673218 114.41311646]
[326.83819580 120.94924927]
[337.29721069 131.70022583]
[343.43527222 145.35501099]
[344.52917480 160.25765991]
[358.98013306 164.27877808]
[372.61727905 156.29104614]
[387.88705444 160.36656189]
[395.73016357 174.08740234]
[391.49343872 189.31321716]
[377.69042969 197.01081848]
[362.51025391 192.61334229]
[354.95901489 178.72975159]
[340.50805664 174.70863342]
[331.87377930 186.90431213]
[319.56488037 195.42605591]
[305.05596924 199.22946167]
[290.09329224 197.83682251]
[276.48452759 191.39700317]
[265.88040161 180.66978455]
[259.57452393 166.93632507]
[258.34552002 151.84609985]
[243.89453125 147.82498169]
[229.44355774 143.80386353]
[214.99258423 139.78274536]
[200.54162598 135.76161194]
[186.09065247 131.74049377]
[171.75505066 135.78273010]
[160.53416443 124.62915802]
[146.08319092 120.60803223]
[131.63221741 116.58691406]
[117.18124390 112.56578827]
[110.66558838 116.28012085]
[121.41968536 126.73715210]
[135.59741211 131.63534546]
[143.86322021 144.15238953]
[142.80065918 159.11470032]
[132.84892273 170.33801270]
[118.12127686 173.18347168]
[104.70501709 166.47497559]
[98.14538574 152.98530579]
[101.15361786 138.29008484]
[97.63428497 123.70878601]
[91.11862946 127.42311859]
[87.21649170 141.90667725]
[83.31434631 156.39022827]
[79.41220856 170.87377930]
[75.51006317 185.35733032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 190]
[18 189]
[19 188]
[20 187]
[21 186]
[22 38]
[23 37]
[24 36]
[26 35]
[27 34]
[28 33]
[42 128]
[43 127]
[44 126]
[46 125]
[47 124]
[48 123]
[49 122]
[50 120]
[51 119]
[52 118]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
[59 111]
[60 110]
[61 109]
[62 108]
[64 107]
[65 106]
[66 105]
[75 104]
[76 103]
[77 102]
[78 101]
[79 100]
[129 174]
[130 173]
[131 172]
[132 171]
[134 169]
[135 168]
[136 167]
[137 166]
[138 165]
[139 164]
[147 156]
[148 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
