%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCACCCCUCAGCGCGCUGUGGUACGUCCCGCGCUCCGCUUGGCCCAAGAUGGCGGCCUCCGUGUGCAGCGGGUUGCUGGGGCCACGGGUGCUGUCCUGGAGCCGAGAGCUGCCUUGCGCUUGGCGCGCCCUGCACACCUCCCCGGUCU\
) } def
/len { sequence length } bind def

/coor [
[307.97396851 149.19396973]
[301.62823486 148.93983459]
[295.57827759 146.87884521]
[290.33087158 143.15930176]
[286.33251953 138.06939697]
[283.93142700 132.01501465]
[269.04660034 130.15963745]
[254.16180420 128.30424500]
[239.27699280 126.44885254]
[224.37380981 124.74738312]
[209.45382690 123.20001221]
[205.20442200 125.50321960]
[199.45460510 125.11704254]
[193.95378113 121.26792908]
[179.11048889 119.10531616]
[164.26721191 116.94269562]
[149.42391968 114.78008270]
[134.58064270 112.61746979]
[119.73735046 110.45484924]
[104.03456116 129.03636169]
[73.77331543 125.09005737]
[59.39690399 129.37010193]
[45.02049255 133.65014648]
[30.64407921 137.93019104]
[23.08239746 151.54850769]
[8.44169998 155.68428040]
[-4.49468899 148.39144897]
[-18.87110138 152.67149353]
[-33.24751282 156.95153809]
[-46.70293427 167.26599121]
[-60.33912659 157.19174194]
[-54.43345642 141.29962158]
[-37.52755737 142.57511902]
[-23.15114403 138.29507446]
[-8.77473259 134.01504517]
[-1.93362260 120.83419037]
[12.58513260 116.28881836]
[26.36403656 123.55377197]
[40.74044800 119.27372742]
[55.11685944 114.99369049]
[69.49327087 110.71364594]
[70.57457733 103.29199982]
[72.73719788 88.44871521]
[73.81850433 81.02707672]
[61.26100922 72.82285309]
[48.70351028 64.61862946]
[36.14601517 56.41440964]
[22.10734558 62.81122971]
[6.84217072 60.58008957]
[-4.77844810 50.43293381]
[-9.04641438 35.60768509]
[-4.59983540 20.83502388]
[7.14240217 10.82885647]
[22.43339157 8.78211117]
[36.39383698 15.34789753]
[44.56900787 28.43109894]
[44.35023499 43.85691071]
[56.90773392 52.06113434]
[69.46523285 60.26535416]
[82.02272797 68.46958160]
[98.51172638 67.22845459]
[112.15196228 73.32196045]
[120.23329926 83.95129395]
[121.89997101 95.61156464]
[136.74325562 97.77418518]
[151.58653259 99.93679810]
[166.42982483 102.09941101]
[181.27310181 104.26203156]
[196.11639404 106.42464447]
[211.00120544 108.28003693]
[225.92117310 109.82740784]
[234.84420776 107.59066010]
[241.13238525 111.56404114]
[256.01718140 113.41943359]
[270.90200806 115.27481842]
[285.78680420 117.13021088]
[307.08074951 105.13765717]
[326.13049316 119.31453705]
[341.12728882 119.00453186]
[356.12408447 118.69452667]
[371.12088013 118.38452148]
[386.11767578 118.07451630]
[401.11447144 117.76451874]
[416.11126709 117.45451355]
[419.85797119 114.98620605]
[423.79962158 113.98093414]
[427.44003296 114.31483459]
[430.37759399 115.71203613]
[432.34753418 117.79013824]
[447.31872559 118.71961975]
[462.28988647 119.64910126]
[477.26104736 120.57858276]
[492.23223877 121.50806427]
[501.05520630 118.90448761]
[507.50222778 122.61460876]
[522.45098877 123.85330200]
[537.39971924 125.09199524]
[546.63848877 115.23913574]
[559.67901611 112.56536865]
[571.69250488 117.83110809]
[578.36224365 128.89859009]
[593.28216553 130.44596863]
[611.23089600 121.36127472]
[626.44995117 133.22904968]
[641.42114258 134.15852356]
[656.39233398 135.08799744]
[671.36352539 136.01748657]
[686.33465576 136.94696045]
[701.30584717 137.87644958]
[715.55895996 131.00915527]
[727.78228760 139.52023315]
[742.75347900 140.44970703]
[754.43243408 129.80180359]
[770.21582031 130.61428833]
[780.73962402 142.40515137]
[779.76031494 158.17907715]
[767.85888672 168.57766724]
[752.09619141 167.43162537]
[741.82403564 155.42088318]
[726.85284424 154.49140930]
[713.67059326 161.42518616]
[700.37634277 152.84762573]
[685.40521240 151.91813660]
[670.43402100 150.98866272]
[655.46282959 150.05917358]
[640.49163818 149.12969971]
[625.52050781 148.20021057]
[618.43988037 155.67414856]
[608.19219971 158.03314209]
[598.14385986 154.25236511]
[591.73480225 145.36593628]
[576.81488037 143.81857300]
[564.25830078 154.96368408]
[547.18786621 153.58226013]
[536.16107178 140.04075623]
[521.21228027 138.80206299]
[506.26351929 137.56338501]
[491.30276489 136.47923279]
[476.33157349 135.54975891]
[461.36041260 134.62026978]
[446.38922119 133.69079590]
[431.41806030 132.76130676]
[416.42126465 132.45130920]
[401.42446899 132.76130676]
[386.42767334 133.07131958]
[371.43087769 133.38131714]
[356.43408203 133.69132996]
[341.43728638 134.00132751]
[326.44049072 134.31132507]
[323.70648193 139.86314392]
[319.47921753 144.43826294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 76]
[7 75]
[8 74]
[9 73]
[10 71]
[11 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[21 41]
[22 40]
[23 39]
[24 38]
[27 35]
[28 34]
[29 33]
[44 60]
[45 59]
[46 58]
[47 57]
[78 149]
[79 148]
[80 147]
[81 146]
[82 145]
[83 144]
[84 143]
[89 142]
[90 141]
[91 140]
[92 139]
[93 138]
[95 137]
[96 136]
[97 135]
[101 132]
[102 131]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
