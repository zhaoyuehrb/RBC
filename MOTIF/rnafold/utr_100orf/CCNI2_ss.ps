%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAAAAUGCCGGGUUAAGCGGCAACUCAGACUCAGGAUCCCGCUCACGACAUGGCCUCGGGCGCUCAGCUCCCGCCGCAGCCGUCGAGCUCAGAGGUCAGCGCCGUCCAGAGCCCAGGCGGGCGUCCCGGCGCCGGUCUGGAGGAAACAG\
) } def
/len { sequence length } bind def

/coor [
[93.87815094 236.12596130]
[83.95208740 224.87992859]
[79.20430756 210.65112305]
[80.38836670 195.69793701]
[87.31710815 182.39271545]
[89.72743225 167.58764648]
[92.13775635 152.78256226]
[94.54808044 137.97749329]
[85.33488464 149.81459045]
[76.12169647 161.65170288]
[66.90850830 173.48881531]
[57.69531631 185.32591248]
[61.15133667 200.57681274]
[53.94978333 214.45744324]
[39.49101639 220.41377258]
[24.60201454 215.63343811]
[16.31291580 202.37353516]
[18.53757477 186.89500427]
[30.22557831 176.50633240]
[45.85820770 176.11273193]
[55.07139587 164.27561951]
[64.28459167 152.43850708]
[73.49777985 140.60140991]
[82.71096802 128.76429749]
[76.37242126 122.43785858]
[72.10482025 114.86304474]
[70.10369873 106.67077637]
[70.38257599 98.50343323]
[72.78153229 90.96472168]
[76.98890686 84.57512665]
[82.57388306 79.73600006]
[89.02680969 76.70500183]
[86.86419678 61.86172104]
[84.70158386 47.01843643]
[75.05548859 34.47796631]
[80.87700653 20.76814270]
[78.71438599 5.92485905]
[76.55177307 -8.91842556]
[74.38915253 -23.76170921]
[62.00331116 -33.20780182]
[60.02156067 -48.29181290]
[69.10329437 -60.04160690]
[66.94068146 -74.88488770]
[64.77806854 -89.72817230]
[62.61544800 -104.57145691]
[52.96935272 -117.11193085]
[58.79087067 -130.82174683]
[56.62825394 -145.66503906]
[43.95212173 -151.16880798]
[35.72919464 -162.14030457]
[34.03109360 -175.63638306]
[39.19683456 -188.10250854]
[49.77180099 -196.30883789]
[47.91640854 -211.19364929]
[46.06101990 -226.07846069]
[36.67615891 -238.81561279]
[42.77976990 -252.40219116]
[40.92438126 -267.28698730]
[39.06899261 -282.17181396]
[37.21360397 -297.05661011]
[35.05098724 -311.89990234]
[32.58206940 -326.69531250]
[30.11314964 -341.49075317]
[27.49146652 -356.25985718]
[24.71729851 -371.00109863]
[15.33197021 -376.65438843]
[10.73432446 -386.35620117]
[12.23901939 -396.76370239]
[19.10270500 -404.43731689]
[16.94009018 -419.28060913]
[6.35944653 -431.80984497]
[12.17356586 -447.14373779]
[28.40138054 -449.50805664]
[38.34910583 -436.47061157]
[31.78337479 -421.44320679]
[33.94599152 -406.59991455]
[47.03000641 -392.41287231]
[39.45853424 -373.77526855]
[42.23270035 -359.03402710]
[46.58809280 -353.00415039]
[44.90856934 -343.95965576]
[47.37748718 -329.16424561]
[49.84640503 -314.36880493]
[53.19506073 -310.88330078]
[54.34912109 -305.23727417]
[52.09841156 -298.91201782]
[53.95380020 -284.02719116]
[55.80919266 -269.14239502]
[57.66458130 -254.25758362]
[66.91673279 -242.58509827]
[60.94583130 -227.93385315]
[62.80121994 -213.04904175]
[64.65660858 -198.16423035]
[79.25584412 -190.72177124]
[86.63658142 -175.90577698]
[83.72578430 -159.44271851]
[71.47154236 -147.82765198]
[73.63415527 -132.98437500]
[83.12556458 -121.50558472]
[77.45873260 -106.73407745]
[79.62135315 -91.89079285]
[81.78396606 -77.04750824]
[83.94657898 -62.20422363]
[96.00341034 -53.53424454]
[98.40805817 -38.51185226]
[89.23243713 -25.92432594]
[91.39505768 -11.08104134]
[93.55767059 3.76224279]
[95.72028351 18.60552788]
[105.21170044 30.08430862]
[99.54486847 44.85581970]
[101.70748138 59.69910431]
[103.87009430 74.54238892]
[127.85548401 89.82631683]
[125.24028778 122.11839294]
[137.62554932 130.58038330]
[150.01080322 139.04237366]
[162.39605713 147.50437927]
[174.78132629 155.96636963]
[187.16658020 164.42835999]
[202.92602539 165.82493591]
[209.06987000 179.39337158]
[221.45512390 187.85536194]
[233.84039307 196.31735229]
[246.22564697 204.77935791]
[258.61090088 213.24134827]
[274.99505615 213.94274902]
[282.33874512 228.60569763]
[273.08746338 242.14620972]
[256.75808716 240.63496399]
[250.14891052 225.62660217]
[237.76365662 217.16461182]
[225.37838745 208.70262146]
[212.99313354 200.24063110]
[200.60787964 191.77862549]
[185.73429871 190.98731995]
[178.70458984 176.81362915]
[166.31933594 168.35162354]
[153.93406677 159.88963318]
[141.54881287 151.42764282]
[129.16355896 142.96565247]
[116.77828979 134.50364685]
[123.59048462 147.86755371]
[130.40267944 161.23146057]
[137.21485901 174.59538269]
[147.87179565 185.15141296]
[153.56182861 199.03030396]
[153.38183594 214.02922058]
[147.36041260 227.76757812]
[136.45326233 238.06484985]
[122.39152527 243.28669739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[32 113]
[33 112]
[34 111]
[36 109]
[37 108]
[38 107]
[39 106]
[42 103]
[43 102]
[44 101]
[45 100]
[47 98]
[48 97]
[53 93]
[54 92]
[55 91]
[57 89]
[58 88]
[59 87]
[60 86]
[61 83]
[62 82]
[63 81]
[64 79]
[65 78]
[69 76]
[70 75]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
