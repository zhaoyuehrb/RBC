%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGUUCGGGGCAAGGCCGGAAAAGGCCUUGGGAAAGGCGGUGCCAAGUGCCAUCGCAAGGUACUGAGCGAUAAUAUUCAGGGCAUUACCAAGUGCA\
) } def
/len { sequence length } bind def

/coor [
[199.31645203 259.08425903]
[205.81088257 238.97045898]
[195.97195435 227.64811707]
[186.13302612 216.32577515]
[176.29409790 205.00343323]
[169.40943909 201.96582031]
[166.33192444 193.17256165]
[156.84988403 181.54969788]
[147.36784363 169.92684937]
[137.88578796 158.30398560]
[128.40374756 146.68113708]
[118.92169952 135.05827332]
[95.42978668 139.57557678]
[73.58578491 129.82286072]
[61.26613235 109.31670380]
[46.28245544 110.01630402]
[31.29878044 110.71591187]
[16.31510353 111.41551971]
[1.33142817 112.11512756]
[-13.65224838 112.81472778]
[-28.63592339 113.51433563]
[-39.09122467 125.36601257]
[-54.86964035 126.26999664]
[-66.61011505 115.68997955]
[-67.34722900 99.90289307]
[-56.64367676 88.27493286]
[-40.84967422 87.70476532]
[-29.33552933 98.53066254]
[-14.35185432 97.83105469]
[0.63182229 97.13144684]
[15.61549854 96.43184662]
[30.59917450 95.73223877]
[45.58285141 95.03263092]
[60.56652832 94.33302307]
[62.17986298 87.47998810]
[64.97435760 81.01795959]
[68.86273193 75.14876556]
[73.72355652 70.05568695]
[79.40501404 65.89780426]
[85.72966766 62.80495834]
[92.50000000 60.87374878]
[92.50000000 45.87374878]
[92.50000000 30.87375069]
[92.50000000 15.87375069]
[92.50000000 0.87375057]
[92.50000000 -14.12624931]
[79.86774445 -23.13766670]
[74.97674561 -37.86375809]
[79.70770264 -52.64204407]
[92.24146271 -61.78996658]
[107.75853729 -61.78996658]
[120.29229736 -52.64204407]
[125.02325439 -37.86375809]
[120.13225555 -23.13766670]
[107.50000000 -14.12624931]
[107.50000000 0.87375057]
[107.50000000 15.87375069]
[107.50000000 30.87375069]
[107.50000000 45.87374878]
[107.50000000 60.87374878]
[118.61956024 64.78032684]
[128.10951233 71.76937103]
[135.13929749 81.22919464]
[139.09364319 92.33186340]
[139.62646484 104.10565186]
[136.69113159 115.52011108]
[130.54455566 125.57623291]
[140.02659607 137.19908142]
[149.50865173 148.82194519]
[158.99069214 160.44479370]
[168.47274780 172.06765747]
[177.95478821 183.69050598]
[187.61643982 195.16450500]
[197.45536804 206.48684692]
[207.29429626 217.80918884]
[217.13322449 229.13153076]
[226.41632080 225.81764221]
[236.23472595 225.28094482]
[245.77742004 227.55220032]
[254.25999451 232.43083191]
[260.98916626 239.50245667]
[265.41940308 248.17417908]
[267.19714355 257.72418213]
[266.18896484 267.36181641]
[262.49154663 276.29318237]
[256.42254639 283.78634644]
[263.98977661 296.73767090]
[271.55703735 309.68899536]
[279.12426758 322.64031982]
[286.69149780 335.59164429]
[301.19625854 343.24307251]
[301.55184937 359.63836670]
[287.39245605 367.91143799]
[273.28408813 359.55169678]
[273.74017334 343.15887451]
[266.17294312 330.20755005]
[258.60571289 317.25622559]
[251.03845215 304.30490112]
[243.47122192 291.35357666]
[222.71842957 291.33288574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
