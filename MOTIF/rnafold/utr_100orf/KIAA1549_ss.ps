%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCCGAGAGCCGCUGAGCCGCGAGGCCGGGCCGGGGCGCCGGCCGGGAAUGCCGGGGGCGCGGCGCCGACGCCGAGGCGCGGCCAUGGAGGGGAAGCCCCGCGCCGGGGUCGCGCUGGCCCCGGGGCCGAGCGGCCGACGGCCUUCCG\
) } def
/len { sequence length } bind def

/coor [
[43.60121155 568.15234375]
[28.99743652 563.17913818]
[19.41860580 551.08575439]
[17.92129135 535.73120117]
[24.98328018 522.01507568]
[38.35111618 514.31414795]
[38.97925186 499.32733154]
[39.60738754 484.34048462]
[36.72603226 477.48040771]
[40.40886688 469.04730225]
[41.35072327 454.07690430]
[42.29258347 439.10650635]
[43.23443985 424.13610840]
[36.31156158 410.94812012]
[44.90011215 397.66101074]
[45.84196854 382.69061279]
[43.10491180 375.77169800]
[46.96355057 367.41757202]
[48.21871948 352.47018433]
[49.47388840 337.52279663]
[50.72905350 322.57540894]
[51.98422241 307.62802124]
[42.20417023 296.45275879]
[43.26415634 281.27609253]
[55.05209732 271.09365845]
[56.30726624 256.14627075]
[57.56243134 241.19886780]
[58.81760025 226.25148010]
[56.77415848 223.30152893]
[56.09561539 219.19572449]
[57.31814194 214.60424805]
[60.64996719 210.41481018]
[62.84120941 195.57571411]
[65.03245544 180.73663330]
[67.22370148 165.89755249]
[69.41494751 151.05845642]
[71.60619354 136.21937561]
[73.79743958 121.38029480]
[67.12790680 107.94461823]
[53.98331070 100.71831512]
[40.83871078 93.49200439]
[28.21352196 96.33525848]
[17.39585304 89.99322510]
[13.94027805 78.35753632]
[0.94989699 70.85753632]
[-12.04048443 63.35753632]
[-25.03086472 55.85753632]
[-40.83704758 58.60419846]
[-52.74337387 47.85157394]
[-51.61632919 31.84815598]
[-38.32048798 22.87039948]
[-23.05527878 27.80526924]
[-17.53086472 42.86715698]
[-4.54048395 50.36715698]
[8.44989681 57.86715698]
[21.44027901 65.36715698]
[38.93388367 64.39196014]
[48.06501389 80.34740448]
[61.20961380 87.57371521]
[74.35421753 94.80001831]
[80.20684814 87.49327087]
[87.59966278 83.47633362]
[83.56586456 69.02890015]
[79.53206635 54.58145905]
[75.49826813 40.13401794]
[71.46446991 25.68658066]
[59.37553406 14.60553646]
[63.19120026 -1.34352970]
[78.98624420 -5.75358534]
[90.51207733 5.91205645]
[85.91191101 21.65278435]
[89.94570923 36.10022354]
[93.97950745 50.54766083]
[98.01330566 64.99510193]
[102.04710388 79.44253540]
[106.58942413 80.41992188]
[110.79844666 82.38768768]
[122.74639893 73.31870270]
[134.69435120 64.24971771]
[146.64228821 55.18072891]
[158.59024048 46.11174393]
[170.53819275 37.04275894]
[182.48614502 27.97377014]
[194.43408203 18.90478325]
[206.38203430 9.83579731]
[212.69631958 -4.67076588]
[227.51193237 -6.20267200]
[239.45988464 -15.27165890]
[251.40783691 -24.34064484]
[258.29553223 -43.23952103]
[277.51376343 -44.98721313]
[289.07144165 -54.54857254]
[300.62915039 -64.10993195]
[312.18685913 -73.67128754]
[320.53701782 -88.42631531]
[337.02697754 -84.48706818]
[337.80654907 -67.55104828]
[321.74819946 -62.11359406]
[310.19052124 -52.55223465]
[298.63281250 -42.99087143]
[287.07510376 -33.42951202]
[287.02078247 -23.13063049]
[281.15429688 -14.39893436]
[271.23287964 -10.28680897]
[260.47683716 -12.39269638]
[248.52886963 -3.32371020]
[236.58093262 5.74527645]
[231.12123108 19.60316467]
[215.45101929 21.78374672]
[203.50306702 30.85273170]
[191.55513000 39.92171860]
[179.60717773 48.99070740]
[167.65922546 58.05969238]
[155.71127319 67.12867737]
[143.76333618 76.19766998]
[131.81538391 85.26665497]
[119.86743164 94.33563995]
[115.07725525 117.91265869]
[88.63652039 123.57154083]
[86.44527435 138.41062927]
[84.25403595 153.24971008]
[82.06278992 168.08879089]
[79.87154388 182.92788696]
[77.68029785 197.76696777]
[75.48905182 212.60604858]
[73.76499176 227.50663757]
[72.50982666 242.45404053]
[71.25466156 257.40142822]
[69.99948883 272.34881592]
[79.92424011 284.35452271]
[78.43839264 299.49542236]
[66.93161774 308.88317871]
[65.67644501 323.83056641]
[64.42127991 338.77795410]
[63.16611099 353.72534180]
[61.91094589 368.67276001]
[60.81237030 383.63247681]
[59.87051392 398.60287476]
[66.72602844 412.86163330]
[58.20484161 425.07797241]
[57.26298523 440.04837036]
[56.32112503 455.01876831]
[55.37926865 469.98916626]
[54.59422684 484.96859741]
[53.96609497 499.95544434]
[53.33795929 514.94232178]
[66.01451111 523.73480225]
[71.90399933 537.99377441]
[69.12710571 553.16912842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 146]
[7 145]
[8 144]
[10 143]
[11 142]
[12 141]
[13 140]
[15 138]
[16 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[25 129]
[26 128]
[27 127]
[28 126]
[32 125]
[33 124]
[34 123]
[35 122]
[36 121]
[37 120]
[38 119]
[39 60]
[40 59]
[41 58]
[44 56]
[45 55]
[46 54]
[47 53]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
[77 117]
[78 116]
[79 115]
[80 114]
[81 113]
[82 112]
[83 111]
[84 110]
[85 109]
[87 107]
[88 106]
[89 105]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
