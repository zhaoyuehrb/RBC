%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCAUGGAGUGGGGUUACCUGUUGGAAGUGACCUCGCUGCUGGCCGCCUUGGCGCUGCUGCAGCGCUCUAGCGGCGCUGCGGCCGCCUCGGCCAAGGAGCUGG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 191.98808289]
[92.50000000 176.14895630]
[92.50000000 161.14895630]
[92.50000000 146.14895630]
[92.50000000 131.14895630]
[86.40705109 129.01274109]
[80.86611938 125.69828796]
[76.10223389 121.34020233]
[72.30886841 116.11547089]
[69.64006042 110.23627472]
[54.69931030 111.56821442]
[39.75856400 112.90014648]
[24.81781578 114.23208618]
[9.87706852 115.56402588]
[-5.06367874 116.89596558]
[-20.00442696 118.22790527]
[-34.94517517 119.55984497]
[-49.88592148 120.89177704]
[-64.82666779 122.22371674]
[-79.76741791 123.55565643]
[-86.83145142 137.27072144]
[-100.20043945 144.96966553]
[-115.60838318 144.19578552]
[-128.13865662 135.19602966]
[-133.79290771 120.84217834]
[-130.76687622 105.71450043]
[-120.02616882 94.64018250]
[-104.99809265 91.15299225]
[-90.47805786 96.36568451]
[-81.09935760 108.61490631]
[-66.15860748 107.28297424]
[-51.21786118 105.95103455]
[-36.27711105 104.61909485]
[-21.33636475 103.28715515]
[-6.39561749 101.95521545]
[8.54513073 100.62327576]
[23.48587799 99.29134369]
[38.42662430 97.95940399]
[53.36737442 96.62746429]
[68.30812073 95.29552460]
[79.31822968 75.53018951]
[100.64176178 67.96727753]
[121.64527130 76.37819672]
[134.08634949 67.99849701]
[146.52743530 59.61879349]
[158.96852112 51.23908997]
[171.40960693 42.85939026]
[183.85069275 34.47968674]
[184.43022156 24.78085709]
[189.42132568 16.60733986]
[197.54486084 11.80332851]
[206.83375549 11.38042641]
[215.10865784 15.30716038]
[228.24467468 8.06527710]
[241.38070679 0.82339448]
[254.51672363 -6.41848850]
[258.40383911 -12.08817959]
[263.79211426 -14.46157646]
[268.65249634 -13.67387009]
[282.19445801 -20.12484932]
[295.73641968 -26.57582664]
[309.27838135 -33.02680588]
[322.82037354 -39.47778320]
[336.36233521 -45.92876053]
[349.90429688 -52.37973785]
[363.44625854 -58.83071518]
[376.98822021 -65.28169250]
[390.53018188 -71.73267365]
[404.07217407 -78.18364716]
[410.76849365 -92.76235962]
[426.37567139 -96.47661591]
[438.92120361 -86.47715759]
[438.78121948 -70.43470764]
[426.06314087 -60.65567398]
[410.52313232 -64.64168549]
[396.98117065 -58.19070435]
[383.43920898 -51.73972702]
[369.89724731 -45.28874969]
[356.35528564 -38.83777237]
[342.81329346 -32.38679504]
[329.27133179 -25.93581581]
[315.72937012 -19.48483658]
[302.18740845 -13.03385925]
[288.64544678 -6.58288097]
[275.10345459 -0.13190302]
[261.75860596 6.71753550]
[248.62258911 13.95941830]
[235.48655701 21.20130157]
[222.35054016 28.44318390]
[213.55003357 47.01108932]
[192.23039246 46.92077255]
[179.78930664 55.30047607]
[167.34822083 63.68017578]
[154.90713501 72.05987549]
[142.46604919 80.43958282]
[130.02496338 88.81928253]
[132.03379822 99.41452026]
[130.41348267 110.07609558]
[125.34756470 119.59613037]
[117.40998077 126.89609528]
[107.50000000 131.14895630]
[107.50000000 146.14895630]
[107.50000000 161.14895630]
[107.50000000 176.14895630]
[113.54634094 191.98808289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[43 96]
[44 95]
[45 94]
[46 93]
[47 92]
[48 91]
[53 89]
[54 88]
[55 87]
[56 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
