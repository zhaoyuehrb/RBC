%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGCCCAGGGAGAGCCCGGCUACCUGGCGGCGCAGUCGGACCCCGGCUCCAACAGCGAGCGCAGCACCGACUCCCCAGUGCCCGGCUCCGAGGACG\
) } def
/len { sequence length } bind def

/coor [
[83.56895447 307.53103638]
[70.84687042 316.90780640]
[55.23333359 314.45974731]
[45.99157715 301.63925171]
[48.60457230 286.05245972]
[61.52207184 276.94677734]
[63.84554672 262.12780762]
[58.17306137 248.35566711]
[67.95459747 235.92054749]
[70.27806854 221.10159302]
[61.32430267 209.25398254]
[63.46953201 194.19235229]
[75.95709229 184.88114929]
[78.28056335 170.06219482]
[80.60404205 155.24324036]
[78.45335388 150.79742432]
[79.20137024 144.93652344]
[83.56037140 139.58691406]
[86.80063629 124.94107819]
[90.04090881 110.29523468]
[86.01425171 96.90576935]
[95.31325531 86.46450043]
[98.55352020 71.81865692]
[101.79378510 57.17281723]
[95.31016541 48.16345978]
[94.96498871 37.29093933]
[100.62857056 28.26441574]
[110.16317749 24.02560997]
[114.30770111 9.60954666]
[118.45223236 -4.80651760]
[122.59675598 -19.22258186]
[121.96651459 -28.51749611]
[127.10084534 -34.01877975]
[131.69169617 -48.29897690]
[130.49281311 -53.74966812]
[131.52227783 -58.57932663]
[134.12715149 -62.00996780]
[137.43350220 -63.66016006]
[143.33500671 -77.45045471]
[149.23651123 -91.24075317]
[155.13801575 -105.03104401]
[161.03952026 -118.82134247]
[166.94102478 -132.61163330]
[156.38401794 -143.51234436]
[150.81973267 -157.58650208]
[151.06710815 -172.67796326]
[157.05732727 -186.48756409]
[167.84898376 -196.92330933]
[181.77597046 -202.41735840]
[196.70458984 -202.16145325]
[202.60609436 -215.95175171]
[208.50759888 -229.74205017]
[214.40910339 -243.53233337]
[207.18977356 -257.40371704]
[210.62625122 -272.65902710]
[223.09593201 -282.09518433]
[238.71102905 -281.25671387]
[250.09854126 -270.53952026]
[251.88166809 -255.00393677]
[243.21846008 -241.98538208]
[228.19940186 -237.63082886]
[222.29789734 -223.84054565]
[216.39639282 -210.05024719]
[210.49488831 -196.25994873]
[220.98703003 -185.63713074]
[226.62806702 -171.76902771]
[226.52952576 -156.75720215]
[220.67530823 -142.88940430]
[209.92880249 -132.29100037]
[195.90574646 -126.59917450]
[180.73130798 -126.71013641]
[174.82981873 -112.91983795]
[168.92831421 -99.12953949]
[163.02680969 -85.33924866]
[157.12530518 -71.54895020]
[151.22380066 -57.75865555]
[145.97189331 -43.70811844]
[141.38104248 -29.42792130]
[137.01281738 -15.07805538]
[132.86830139 -0.66199172]
[128.72377014 13.75407219]
[124.57923889 28.17013741]
[130.74934387 46.38394165]
[116.43962860 60.41308212]
[113.19936371 75.05892181]
[109.95909119 89.70476532]
[113.98574829 103.09423065]
[104.68674469 113.53549957]
[101.44647980 128.18133545]
[98.20621490 142.82717896]
[95.42299652 157.56671143]
[93.09952545 172.38566589]
[90.77605438 187.20462036]
[99.81461334 199.89093018]
[97.24717712 214.88635254]
[85.09703064 223.42506409]
[82.77355194 238.24401855]
[88.27984619 253.07612610]
[78.66450500 264.45129395]
[76.34102631 279.27023315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 100]
[7 99]
[9 97]
[10 96]
[13 93]
[14 92]
[15 91]
[18 90]
[19 89]
[20 88]
[22 86]
[23 85]
[24 84]
[28 82]
[29 81]
[30 80]
[31 79]
[33 78]
[34 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[43 71]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
