%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAUGGAAAACUGCACCAGGGUAAAAGAAUUUAUUUUCCUUGGCCUGACCCAGAAUCGGGAAGUGAGCUUAGUCUUAUUUCUUUUCCUACUCUUGG\
) } def
/len { sequence length } bind def

/coor [
[120.64226532 305.86495972]
[120.31778717 290.06399536]
[131.32144165 278.71960449]
[130.85494995 263.72686768]
[130.38844299 248.73411560]
[129.92195129 233.74136353]
[118.92536163 223.76084900]
[118.23869324 208.56272888]
[128.78173828 197.09616089]
[128.31524658 182.10342407]
[127.84873962 167.11067200]
[127.38224030 152.11793518]
[126.91574860 137.12518311]
[126.44924927 122.13243866]
[113.79035950 130.19824219]
[99.44918823 131.90348816]
[86.32731628 127.39614105]
[76.87103271 118.03395081]
[72.61627197 106.02599335]
[73.94940186 93.92686462]
[60.88195419 86.56195068]
[47.81451035 79.19704437]
[34.74706650 71.83213043]
[21.67962456 64.46721649]
[8.61218071 57.10230637]
[-0.57664877 55.56671524]
[-4.74197817 49.29969788]
[-17.57405281 41.53195190]
[-30.40612793 33.76420593]
[-43.23820114 25.99646378]
[-57.98112869 31.20991898]
[-72.60780334 25.67870140]
[-80.21195984 12.01448441]
[-77.20314789 -3.33090734]
[-65.00203705 -13.11184978]
[-49.36961365 -12.71008015]
[-37.68703461 -2.31530190]
[-35.47045898 13.16438770]
[-22.63838387 20.93213272]
[-9.80630875 28.69987679]
[3.02576637 36.46762085]
[15.97709179 44.03486252]
[29.04453468 51.39977646]
[42.11198044 58.76468658]
[55.17942429 66.12960052]
[68.24686432 73.49450684]
[81.31430817 80.85942078]
[101.95783997 69.44419098]
[127.04405212 78.59843445]
[132.07679749 64.46792603]
[137.10955811 50.33740997]
[142.14230347 36.20689392]
[134.07455444 22.81116676]
[136.55596924 7.37171745]
[148.41488647 -2.82141948]
[164.05189514 -2.95535588]
[176.08367920 7.03314924]
[178.82919312 22.42782974]
[170.99209595 35.95978546]
[156.27281189 41.23964310]
[151.24006653 55.37015915]
[146.20732117 69.50067139]
[141.17456055 83.63118744]
[150.29055786 95.54331207]
[165.24522400 94.37805176]
[180.19989014 93.21279907]
[195.15457153 92.04753876]
[210.10923767 90.88227844]
[225.06390381 89.71702576]
[240.01858521 88.55176544]
[254.97325134 87.38650513]
[265.05490112 75.21540833]
[280.79757690 73.82115173]
[292.86141968 84.03092194]
[294.08914185 99.78745270]
[283.75241089 111.74266815]
[267.98376465 112.80374908]
[256.13851929 102.34117889]
[241.18383789 103.50643921]
[226.22917175 104.67169189]
[211.27449036 105.83695221]
[196.31982422 107.00221252]
[181.36515808 108.16746521]
[166.41049194 109.33272552]
[151.45581055 110.49797821]
[141.44198608 121.66594696]
[141.90849304 136.65869141]
[142.37498474 151.65142822]
[142.84149170 166.64418030]
[143.30798340 181.63691711]
[143.77447510 196.62966919]
[155.01000977 207.41857910]
[155.26951599 222.63000488]
[144.91468811 233.27487183]
[145.38119507 248.26760864]
[145.84768677 263.26034546]
[146.31419373 278.25311279]
[158.00183105 288.89144897]
[158.66032410 304.68200684]
[147.89900208 316.25653076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[27 41]
[28 40]
[29 39]
[30 38]
[49 63]
[50 62]
[51 61]
[52 60]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
