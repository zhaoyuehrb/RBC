%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:21:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAGACUGGAAUAACAGUGAUGCUGUGGAGCCCAUAUUUAUCCUGAGGGGUUUUCCUGGACUGGAGUAUGUUCAUUCUUGGCUCUCCAUCCUCUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 283.27615356]
[82.21823120 267.58865356]
[92.50000000 255.27343750]
[92.50000000 240.27343750]
[92.50000000 225.27343750]
[92.50000000 210.27343750]
[92.50000000 195.27343750]
[81.81912994 184.95574951]
[81.60544586 169.74362183]
[92.50000000 158.61048889]
[92.50000000 143.61048889]
[92.50000000 128.61048889]
[92.50000000 113.61049652]
[86.83882904 108.69103241]
[72.65690613 113.57703400]
[75.51648712 98.85210419]
[69.85530853 93.93264008]
[55.00201416 96.02536774]
[40.14871597 98.11809540]
[25.29541588 100.21083069]
[10.44211769 102.30355835]
[-4.39855003 110.50056458]
[-16.38352013 98.50903320]
[-8.17839432 83.67285919]
[8.34938717 87.45025635]
[23.20268631 85.35752869]
[38.05598450 83.26480103]
[52.90928268 81.17206573]
[67.76258087 79.07933807]
[86.97563171 80.43690491]
[98.46850586 91.56447601]
[106.03574371 78.61315155]
[113.60298920 65.66182709]
[121.17023468 52.71050262]
[128.73747253 39.75917435]
[134.42379761 25.87876892]
[138.11798096 11.34078312]
[141.81216431 -3.19720149]
[145.50634766 -17.73518562]
[149.20053101 -32.27317047]
[152.89471436 -46.81115723]
[156.58889771 -61.34914017]
[150.11940002 -80.31568909]
[163.82308960 -93.80722809]
[166.60630798 -108.54676056]
[169.38951111 -123.28628540]
[167.48677063 -129.91943359]
[169.10494995 -135.60197449]
[172.83132935 -138.84309387]
[176.52551270 -153.38108826]
[180.21969604 -167.91906738]
[183.91387939 -182.45704651]
[178.94616699 -198.08567810]
[190.19551086 -210.01817322]
[206.08953857 -205.97940063]
[210.27784729 -190.12411499]
[198.45185852 -178.76286316]
[194.75767517 -164.22488403]
[191.06349182 -149.68690491]
[187.36930847 -135.14891052]
[184.12904358 -120.50307465]
[181.34582520 -105.76354218]
[178.56260681 -91.02401733]
[185.17138672 -82.94933319]
[186.16921997 -72.33997345]
[180.97016907 -62.78483200]
[171.12689209 -57.65495682]
[167.43270874 -43.11697388]
[163.73852539 -28.57898712]
[160.04434204 -14.04100323]
[156.35015869 0.49698207]
[152.65597534 15.03496742]
[148.96179199 29.57295227]
[161.79072571 21.80002975]
[176.78968811 21.97670555]
[189.43197632 30.04966164]
[195.90213013 43.58247375]
[194.24748230 58.49092865]
[184.96737671 70.27565765]
[170.86256409 75.38001251]
[156.18989563 72.26349640]
[145.37757874 61.86668396]
[141.68879700 47.32641983]
[134.12155151 60.27774429]
[126.55431366 73.22907257]
[118.98706818 86.18039703]
[111.41983032 99.13172150]
[107.50000000 113.61049652]
[107.50000000 128.61048889]
[107.50000000 143.61048889]
[107.50000000 158.61048889]
[118.39455414 169.74362183]
[118.18087006 184.95574951]
[107.50000000 195.27343750]
[107.50000000 210.27343750]
[107.50000000 225.27343750]
[107.50000000 240.27343750]
[107.50000000 255.27343750]
[117.78176880 267.58865356]
[114.42288971 283.27615356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[10 91]
[11 90]
[12 89]
[13 88]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[44 63]
[45 62]
[46 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
