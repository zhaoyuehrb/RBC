%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGUAGAGGCAAAGGUGGUAAAGGUUUAGGAAAGGGAGGCGCCAAGCGCCAUCGCAAAGUGCUGCGUGACAACAUACAGGGCAUCACGAAGCCCG\
) } def
/len { sequence length } bind def

/coor [
[181.24993896 230.38624573]
[186.90388489 211.44055176]
[177.06495667 200.11820984]
[167.22602844 188.79586792]
[157.38710022 177.47352600]
[142.55726624 176.69139099]
[132.41790771 165.34907532]
[133.33882141 149.79948425]
[123.49989319 138.47714233]
[113.66096497 127.15480042]
[103.82203674 115.83245850]
[92.16766357 114.28038025]
[84.59468079 105.28685760]
[85.04933929 93.53838348]
[75.56729126 81.91552734]
[61.79934311 83.70391083]
[49.06409836 78.45431519]
[40.68908691 67.65535736]
[38.80421829 54.22990417]
[43.80098343 41.74435425]
[34.68498993 29.83222961]
[25.56900024 17.92010498]
[16.45301056 6.00797987]
[7.33701944 -5.90414476]
[7.06568098 9.09340096]
[2.29493189 23.31451035]
[-6.53318977 35.44151688]
[-18.60070801 44.35078049]
[-32.78949738 49.21681213]
[-47.78488541 49.58873749]
[-62.19746399 45.43210602]
[-74.69182587 37.13204575]
[-84.11029053 25.45760727]
[-89.58018494 11.49049473]
[-90.59469604 -3.47515798]
[-87.05982208 -18.05269814]
[-79.30309296 -30.89143181]
[-68.04320526 -40.80177689]
[-54.32345581 -46.86548233]
[-39.41506195 -48.52070999]
[-24.69936943 -45.61409760]
[-11.53987217 -38.41495514]
[-1.15536869 -27.58960724]
[-2.55305767 -42.52434921]
[-3.95074677 -57.45908737]
[-5.34843588 -72.39382935]
[-6.74612474 -87.32856750]
[-14.24203777 -102.53540039]
[-1.70457315 -113.94803619]
[12.73277092 -105.05987549]
[8.18861580 -88.72625732]
[9.58630466 -73.79151917]
[10.98399353 -58.85677719]
[12.38168240 -43.92203522]
[13.77937126 -28.98729706]
[19.24914360 -15.02013588]
[28.36513519 -3.10801077]
[37.48112488 8.80411434]
[46.59711456 20.71623802]
[55.71310806 32.62836456]
[72.01858521 31.66127777]
[85.86085510 40.63985443]
[91.74261475 56.23159409]
[87.19014740 72.43347931]
[96.67219543 84.05633545]
[112.45865631 89.50920868]
[115.14438629 105.99353027]
[124.98331451 117.31587219]
[134.82223511 128.63821411]
[144.66116333 139.96055603]
[160.18716431 141.21804810]
[170.00395203 152.84068298]
[168.70944214 167.63458252]
[178.54837036 178.95693970]
[188.38729858 190.27928162]
[198.22622681 201.60162354]
[208.75891113 198.41670227]
[219.70767212 199.01203918]
[229.76158142 203.28985596]
[237.72592163 210.71311951]
[242.66407776 220.37269592]
[244.00770569 231.09872437]
[241.62194824 241.60229492]
[235.81858826 250.63024902]
[244.17637634 263.08605957]
[252.53414917 275.54190063]
[260.89193726 287.99771118]
[276.40264893 288.44216919]
[288.66925049 297.94534302]
[292.97494507 312.85308838]
[287.66415405 327.43304443]
[274.77896118 336.07891846]
[259.27398682 335.46621704]
[247.11122131 325.83053589]
[242.96746826 310.87698364]
[248.43611145 296.35549927]
[240.07833862 283.89965820]
[231.72055054 271.44384766]
[223.36276245 258.98803711]
[204.02583313 259.76895142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[8 70]
[9 69]
[10 68]
[11 67]
[14 65]
[15 64]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[84 99]
[85 98]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
