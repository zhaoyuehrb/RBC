%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACACAGCAGCCUUGUAGGUGACUGGAGGUGUUCGCUGAUGUGGCCCCAACCCUACCUCCCUCCCCACCCCAUGAUGUUAGAAGAAUCUCGACAGAAUAAAUUGGCAGCAGCCAAGAAAAAGCUAAAAGAAUAUCAGC\
) } def
/len { sequence length } bind def

/coor [
[-4.66495609 173.64878845]
[-10.85705471 163.95005798]
[-24.26705551 170.67106628]
[-37.67705917 177.39207458]
[-51.08705902 184.11306763]
[-64.49706268 190.83407593]
[-77.90705872 197.55506897]
[-91.24189758 204.42399597]
[-104.49993134 211.44001770]
[-117.75797272 218.45602417]
[-131.01600647 225.47204590]
[-144.19561768 232.63429260]
[-157.29521179 239.94187927]
[-170.39479065 247.24946594]
[-183.41273499 254.70152283]
[-196.34745789 262.29711914]
[-209.28218079 269.89270020]
[-217.26431274 283.55273438]
[-232.15718079 283.32550049]
[-245.09190369 290.92108154]
[-258.02661133 298.51669312]
[-265.64624023 313.03814697]
[-282.04071045 313.42965698]
[-290.34481812 299.28842163]
[-282.01596069 285.16177368]
[-265.62222290 285.58197021]
[-252.68748474 277.98635864]
[-239.75277710 270.39077759]
[-232.69581604 257.27404785]
[-216.87777710 256.95797729]
[-203.94305420 249.36239624]
[-191.00833130 241.76679993]
[-186.79998779 235.61880493]
[-177.70237732 234.14988708]
[-164.60279846 226.84230042]
[-151.50321960 219.53469849]
[-147.15988159 213.48130798]
[-138.03202820 212.21400452]
[-124.77398682 205.19799805]
[-111.51594543 198.18197632]
[-98.25791168 191.16596985]
[-93.78173065 185.21012878]
[-84.62806702 184.14506531]
[-71.21806335 177.42407227]
[-57.80805969 170.70306396]
[-44.39805984 163.98207092]
[-30.98805809 157.26106262]
[-17.57805634 150.54006958]
[-21.99381828 138.68339539]
[-25.21727371 126.44866943]
[-27.21691513 113.95543671]
[-27.97319984 101.32581329]
[-27.47873688 88.68322754]
[-25.73835754 76.15125275]
[-22.76907539 63.85235977]
[-18.59990692 51.90675735]
[-13.27159977 40.43119812]
[-6.83623123 29.53783035]
[0.64330238 19.33312798]
[9.09389973 9.91682434]
[18.43297005 1.38094974]
[28.56923485 -6.19107056]
[39.40363312 -12.72523022]
[50.83026505 -18.15766907]
[62.73746109 -22.43529320]
[75.00884247 -25.51629257]
[87.52447510 -27.37055779]
[100.16204071 -27.97996521]
[112.79801941 -27.33855820]
[125.30892181 -25.45260429]
[137.57246399 -22.34053993]
[149.46878052 -18.03277779]
[160.88162231 -12.57142162]
[171.69944763 -6.00984621]
[181.81649780 1.58781755]
[192.06533813 -9.36486816]
[191.71713257 -24.93781090]
[202.26693726 -35.89939117]
[217.11550903 -36.13537979]
[227.36434937 -47.08806610]
[237.61317444 -58.04075241]
[247.86201477 -68.99343872]
[257.98907471 -80.05882263]
[267.99310303 -91.23555756]
[277.99713135 -102.41228485]
[280.82797241 -118.56526184]
[296.32296753 -123.93524933]
[308.54223633 -112.99807739]
[304.91561890 -97.00495911]
[289.17385864 -92.40825653]
[279.16983032 -81.23152161]
[269.16580200 -70.05479431]
[267.03164673 -62.91661835]
[258.81469727 -58.74460220]
[248.56587219 -47.79191589]
[238.31703186 -36.83922958]
[228.06819153 -25.88654327]
[228.81752014 -11.05501842]
[218.57977295 0.19856092]
[203.01802063 0.88396877]
[192.76918030 11.83665466]
[210.46672058 35.37801361]
[222.31413269 62.34163666]
[227.68399048 91.29958344]
[226.29191589 120.71829224]
[240.92631531 124.00987244]
[255.56071472 127.30144501]
[270.19509888 130.59303284]
[284.82949829 133.88459778]
[300.31509399 128.48748779]
[312.55346680 139.40324402]
[308.95486450 155.40267944]
[293.22119141 160.02694702]
[281.53793335 148.51899719]
[266.90353394 145.22741699]
[252.26913452 141.93583679]
[237.63473511 138.64427185]
[223.00035095 135.35269165]
[219.32778931 146.25772095]
[214.69058228 156.78880310]
[209.12622070 166.86079407]
[202.67967224 176.39230347]
[195.40306091 185.30622864]
[187.35520935 193.53056335]
[178.60118103 200.99877930]
[169.21173096 207.65051270]
[159.26277161 213.43200684]
[148.83473206 218.29652405]
[138.01191711 222.20471191]
[126.88181305 225.12500000]
[115.53439331 227.03378296]
[104.06139374 227.91560364]
[92.55555725 227.76336670]
[81.10990906 226.57827759]
[69.81696320 224.36993408]
[58.76802063 221.15618896]
[48.05239868 216.96299744]
[37.75671768 211.82429504]
[27.96421814 205.78158569]
[18.75405502 198.88374329]
[10.20068550 191.18650818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[8 41]
[9 40]
[10 39]
[11 38]
[12 36]
[13 35]
[14 34]
[15 32]
[16 31]
[17 30]
[19 28]
[20 27]
[21 26]
[75 101]
[76 100]
[79 97]
[80 96]
[81 95]
[82 94]
[83 92]
[84 91]
[85 90]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
