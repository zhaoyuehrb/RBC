%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAUUUCCAACAUCACAGUCUACAUGCCCUCUGUGUUGACACUAGUAGGGAUCCCAGGCCUAGAAUCUGUGCAGUGCUGGAUUGGGAUUCCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[130.62628174 397.01416016]
[136.88029480 383.04467773]
[148.91705322 373.59085083]
[146.13383484 358.85131836]
[143.35061646 344.11178589]
[140.56739807 329.37225342]
[127.04582214 323.18316650]
[119.67419434 310.06359863]
[121.46225739 294.94223022]
[131.93241882 283.64257812]
[129.14920044 268.90304565]
[126.36598969 254.16352844]
[123.58277130 239.42399597]
[113.61831665 228.35337830]
[118.66066742 213.35719299]
[115.87744904 198.61767578]
[113.09423065 183.87814331]
[109.85396576 169.23229980]
[106.15978241 154.69432068]
[102.46559906 140.15632629]
[98.77141571 125.61834717]
[95.07723236 111.08036041]
[90.93270874 96.66429138]
[86.34185028 82.38410187]
[81.75099182 68.10390472]
[77.16013336 53.82370377]
[60.06811523 45.98359299]
[54.06069565 28.49684525]
[62.43634796 12.36634922]
[56.96657562 -1.60081196]
[50.63904953 -15.20090103]
[43.47825241 -28.38130188]
[36.31745148 -41.56170273]
[29.15665436 -54.74210358]
[21.79174423 -67.80954742]
[14.22450066 -80.76087189]
[6.45675659 -93.59294891]
[-1.50961053 -106.30266571]
[-9.47597790 -119.01239014]
[-24.21166801 -126.20901489]
[-25.07696724 -142.58532715]
[-11.18172836 -151.29475403]
[3.17981744 -143.37780762]
[3.23374319 -126.97875977]
[11.20011044 -114.26903534]
[19.16647720 -101.55931854]
[25.49751663 -97.49195099]
[27.17582703 -88.32811737]
[34.74306870 -75.37679291]
[40.94455338 -71.11450195]
[42.33705521 -61.90290070]
[49.49785233 -48.72249985]
[56.65865326 -35.54209900]
[63.81945038 -22.36169815]
[66.66165161 -21.48635101]
[69.29273224 -19.33080864]
[71.18250275 -15.98362064]
[71.84896088 -11.73886967]
[70.93373871 -7.07058477]
[76.40351105 6.89657593]
[87.79586792 9.16012859]
[96.71957397 16.78263474]
[100.81981659 27.90819168]
[98.93896484 39.73767471]
[91.44033051 49.23284531]
[96.03118896 63.51304245]
[100.62204742 77.79323578]
[105.21290588 92.07343292]
[109.37435913 95.57492828]
[111.18116760 101.20098114]
[109.61521912 107.38617706]
[113.30940247 121.92416382]
[117.00358582 136.46214294]
[120.69776917 151.00013733]
[124.39195251 165.53811646]
[128.91522217 170.74957275]
[129.84515381 176.58436584]
[127.83376312 181.09492493]
[130.61697388 195.83445740]
[133.40019226 210.57397461]
[143.56373596 222.69888306]
[138.32229614 236.64077759]
[141.10551453 251.38031006]
[143.88873291 266.11984253]
[146.67195129 280.85937500]
[160.54161072 287.56298828]
[167.72059631 300.99114990]
[165.64062500 315.89544678]
[155.30693054 326.58905029]
[158.09014893 341.32858276]
[160.87336731 356.06808472]
[163.65658569 370.80761719]
[178.31188965 375.22128296]
[189.22926331 385.94833374]
[193.89997864 400.52377319]
[191.25071716 415.59826660]
[181.89027405 427.70779419]
[167.96960449 434.06967163]
[152.68759155 433.22201538]
[139.55590820 425.35961914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[10 85]
[11 84]
[12 83]
[13 82]
[15 80]
[16 79]
[17 78]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[23 68]
[24 67]
[25 66]
[26 65]
[29 60]
[30 59]
[31 54]
[32 53]
[33 52]
[34 51]
[35 49]
[36 48]
[37 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
