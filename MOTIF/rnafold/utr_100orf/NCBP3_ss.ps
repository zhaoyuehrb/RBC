%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCAGUGGUGCGGCCGGCAGGCAGCGAUGGCGGCCGUACGGGGCCUGCGGGUGUCGGUGAAGGCGGAGGCCCCGGCGGGGCCGGCCCUGGGGCUCCCGUCCCCUGAGGCGGAGUCCGGUGUUGACC\
) } def
/len { sequence length } bind def

/coor [
[87.96749115 132.30249023]
[90.14643860 147.14338684]
[81.81626892 159.61769104]
[67.27320862 163.29185486]
[54.01775360 156.27096558]
[48.88631058 142.17599487]
[54.52538681 128.27632141]
[68.02564240 121.74070740]
[78.16236877 110.68418884]
[71.53455353 107.17390442]
[57.33795547 112.01711273]
[43.14136124 116.86031342]
[28.94476318 121.70352173]
[14.74816704 126.54673004]
[0.55157006 131.38993835]
[-13.64502621 136.23313904]
[-27.84162331 141.07633972]
[-42.03821945 145.91955566]
[-52.60102844 157.69824219]
[-67.14485168 154.48474121]
[-81.34144592 159.32795715]
[-85.79149628 174.19323730]
[-98.14965057 183.57702637]
[-113.66394043 183.87107849]
[-126.36880493 174.96232605]
[-131.37896729 160.27635193]
[-126.76791382 145.46020508]
[-114.30869293 136.21102905]
[-98.79212189 136.08529663]
[-86.18465424 145.13134766]
[-71.98805237 140.28814697]
[-62.44068146 128.85586548]
[-46.88142395 131.72296143]
[-32.68482971 126.87975311]
[-18.48823166 122.03654480]
[-4.29163599 117.19333649]
[9.90496063 112.35013580]
[24.10155678 107.50692749]
[38.29815292 102.66371918]
[52.49475098 97.82051086]
[66.69134521 92.97731018]
[75.85895538 81.10485840]
[76.95388031 66.14487457]
[78.04881287 51.18489075]
[79.14374542 36.22490692]
[80.23867035 21.26492310]
[81.33360291 6.30493927]
[74.62429047 -8.02320480]
[83.26998138 -20.15173721]
[84.36491394 -35.11172104]
[74.40917969 -44.27507019]
[71.62232971 -57.31623459]
[76.80918121 -69.38960266]
[87.85391235 -76.14171600]
[89.31280518 -91.07060242]
[90.77170563 -105.99948883]
[92.23059845 -120.92837524]
[93.68949890 -135.85725403]
[95.14839172 -150.78614807]
[93.08942413 -154.87811279]
[92.56169128 -158.99192810]
[93.37223053 -162.62387085]
[95.17880249 -165.39112854]
[97.54507446 -167.07135010]
[100.44903564 -181.78756714]
[103.35299683 -196.50378418]
[97.54881287 -211.84144592]
[108.13756561 -224.36383057]
[124.22646332 -221.18899536]
[129.26461792 -205.58294678]
[118.06921387 -193.59983826]
[115.16525269 -178.88362122]
[112.26129150 -164.16740417]
[110.07727814 -149.32725525]
[108.61837769 -134.39836121]
[107.15948486 -119.46947479]
[105.70059204 -104.54058838]
[104.24169159 -89.61170959]
[102.78279877 -74.68282318]
[113.99883270 -62.21414185]
[112.75205231 -45.15222168]
[99.32489777 -34.01679230]
[98.22996521 -19.05680656]
[105.01759338 -5.79870176]
[96.29358673 7.39986897]
[95.19865417 22.35985374]
[94.10372925 37.31983948]
[93.00879669 52.27982330]
[91.91386414 67.23980713]
[90.81893921 82.19979095]
[110.74329376 77.21143341]
[129.66999817 93.56639862]
[143.47518921 99.43296814]
[157.28039551 105.29953766]
[171.08558655 111.16610718]
[184.89077759 117.03268433]
[198.69596863 122.89925385]
[212.50115967 128.76582336]
[221.72843933 129.25848389]
[226.56832886 134.94700623]
[240.22656250 141.14801025]
[253.88481140 147.34901428]
[268.59039307 141.55926514]
[283.04925537 147.94024658]
[288.68319702 162.70623779]
[282.14971924 177.09681702]
[267.32498169 182.57434082]
[253.00427246 175.88905334]
[247.68380737 161.00724792]
[234.02557373 154.80624390]
[220.36732483 148.60525513]
[206.63458252 142.57101440]
[192.82939148 136.70443726]
[179.02420044 130.83787537]
[165.21900940 124.97130585]
[151.41381836 119.10472870]
[137.60862732 113.23815918]
[123.80342865 107.37158966]
[112.51079559 117.24459839]
[116.48122406 131.70957947]
[120.45164490 146.17456055]
[132.49189758 157.30850220]
[128.60635376 173.24067688]
[112.79212952 177.58145142]
[101.31754303 165.86540222]
[105.98666382 150.14498901]
[102.01623535 135.68000793]
[98.04581451 121.21502686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[20 31]
[21 30]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[49 83]
[50 82]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[64 73]
[65 72]
[66 71]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[100 111]
[101 110]
[102 109]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
