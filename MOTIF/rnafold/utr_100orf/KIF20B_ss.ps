%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGGUGCCCUGGCCGCCAUUGUUUGAAUUUGAAAACGGUAACAUCGCAGUGCUGCUCGCGGGUCUGGCUAGUCAGGCGAAGUUUGCAGAAUGGAAUCUAAUUUUAAUCAAGAGGGAGUACCUCGACCAUCUUAUGUUUUUAGUGCUGACCCAAUUGCAAGGCCUUCAGAAAUAAAUUUCGAUGGCAUUA\
) } def
/len { sequence length } bind def

/coor [
[99.63607788 179.83129883]
[98.29496002 164.89137268]
[96.95384216 149.95144653]
[89.48387909 150.62200928]
[83.99835205 164.58299255]
[78.51282501 178.54397583]
[73.02730560 192.50495911]
[67.54177856 206.46594238]
[74.08513641 220.85203552]
[68.46131897 235.62188721]
[54.00683975 242.01277161]
[39.29728317 236.23312378]
[33.05956268 221.71188354]
[38.99441528 207.06425476]
[53.58079529 200.98040771]
[59.06632233 187.01942444]
[64.55184937 173.05844116]
[70.03737640 159.09745789]
[75.52290344 145.13648987]
[70.66570282 136.79449463]
[67.89196014 128.25090027]
[55.06740189 136.03105164]
[42.24284363 143.81120300]
[29.41828728 151.59135437]
[16.59372902 159.37150574]
[3.76917124 167.15165710]
[-9.05538654 174.93179321]
[-10.20782566 190.40602112]
[-20.26135635 202.22575378]
[-35.35018921 205.84608459]
[-49.67236328 199.87489319]
[-57.72070694 186.60826111]
[-56.40046692 171.14744568]
[-46.21930695 159.43746948]
[-31.09208870 155.98104858]
[-16.83553505 162.10723877]
[-4.01097822 154.32708740]
[8.81357956 146.54693604]
[21.63813782 138.76679993]
[34.46269608 130.98664856]
[47.28725052 123.20649719]
[60.11180878 115.42634583]
[57.36910629 103.41272736]
[58.16567612 91.11578369]
[62.43539047 79.55641937]
[69.82376862 69.69430542]
[79.71742249 62.34821701]
[91.29496002 58.12802505]
[103.59519958 57.38410568]
[107.45783234 42.88996506]
[111.32045746 28.39582634]
[115.18309021 13.90168571]
[119.04571533 -0.59245479]
[107.62686920 -16.70455742]
[110.53076935 -35.83094788]
[100.14215851 -46.65114975]
[89.75355530 -57.47135544]
[79.36494446 -68.29156494]
[63.79568100 -68.77712250]
[53.41429520 -79.89833832]
[53.97315216 -94.73826599]
[43.58454514 -105.55846405]
[26.09841537 -105.58977509]
[14.27232647 -118.00818634]
[15.06350040 -134.80053711]
[4.50014877 -145.45021057]
[-6.06320238 -156.09989929]
[-16.62655449 -166.74957275]
[-27.18990517 -177.39924622]
[-42.99309540 -177.21292114]
[-54.24085617 -188.31532288]
[-54.26008987 -204.11959839]
[-43.03938675 -215.24935913]
[-27.23578835 -215.10150146]
[-16.22529221 -203.76374817]
[-16.54022789 -187.96260071]
[-5.97687721 -177.31292725]
[4.58647394 -166.66323853]
[15.14982510 -156.01356506]
[25.71317673 -145.36389160]
[38.48791504 -147.11389160]
[50.10935974 -141.09251404]
[56.22660828 -129.30148315]
[54.40475082 -115.94707489]
[64.79335785 -105.12686920]
[79.64373016 -105.08153534]
[90.33339691 -94.25629425]
[90.18515015 -78.68016815]
[100.57376099 -67.85996246]
[110.96236420 -57.03976059]
[121.35097504 -46.21955490]
[122.61267090 -51.18555069]
[124.87088013 -56.11114120]
[128.12702942 -60.83255005]
[130.31666565 -75.67186737]
[132.50630188 -90.51119232]
[134.69593811 -105.35051727]
[136.88557434 -120.18984222]
[139.07519531 -135.02915955]
[135.40576172 -151.58125305]
[150.29518127 -159.68936157]
[162.20822144 -147.62637329]
[153.91452026 -132.83952332]
[151.72488403 -118.00020599]
[149.53524780 -103.16088104]
[147.34562683 -88.32155609]
[145.15599060 -73.48223877]
[142.96635437 -58.64291382]
[148.70295715 -53.81162262]
[157.73889160 -65.78458405]
[164.02133179 -79.40555573]
[178.96450806 -78.10109711]
[182.79183960 -63.59759521]
[170.43780518 -55.08973694]
[160.17616272 -44.14904404]
[165.91276550 -39.31775284]
[180.16345215 -43.99942398]
[194.41413879 -48.68109894]
[208.58671570 -53.59410858]
[222.67745972 -58.73715591]
[236.76820374 -63.88020325]
[250.85894775 -69.02324677]
[264.94970703 -74.16629791]
[269.37063599 -90.48519897]
[282.51333618 -100.85496521]
[299.08090210 -101.34837341]
[312.54479980 -91.96894836]
[326.54995728 -97.34066772]
[340.55511475 -102.71238708]
[344.44509888 -117.73397064]
[356.44296265 -127.57421112]
[371.93533325 -128.44934082]
[384.96508789 -120.02285767]
[390.52197266 -105.53491211]
[386.46929932 -90.55641174]
[374.36535645 -80.84690857]
[358.86441040 -80.13988495]
[345.92684937 -88.70722198]
[331.92169189 -83.33550262]
[317.91650391 -77.96378326]
[315.66592407 -64.79560852]
[307.13110352 -54.37793350]
[294.46099854 -49.50268555]
[280.93017578 -51.54458237]
[270.09274292 -60.07555008]
[256.00201416 -54.93250656]
[241.91125488 -49.78945923]
[227.82051086 -44.64641190]
[213.72976685 -39.50336456]
[210.93386841 -35.61442184]
[205.65882874 -33.44915771]
[199.09580994 -34.43041611]
[184.84512329 -29.74874306]
[170.59443665 -25.06707001]
[156.42976379 -1.41241431]
[133.53985596 3.27017355]
[129.67723083 17.76431465]
[125.81459808 32.25845337]
[121.95197296 46.75259399]
[118.08934021 61.24673462]
[136.37339783 73.65490723]
[146.72047424 94.38454437]
[145.55146790 118.59696198]
[132.12454224 140.05551147]
[140.00881958 152.81632996]
[147.89308167 165.57713318]
[161.72898865 173.25036621]
[161.83638000 188.14459229]
[169.72064209 200.90539551]
[176.90476990 206.57197571]
[177.62744141 213.93870544]
[185.30294800 226.82615662]
[192.97846985 239.71360779]
[200.65399170 252.60107422]
[215.22235107 260.13067627]
[215.71531677 276.52239990]
[201.62576294 284.91384888]
[187.44781494 276.67263794]
[187.76652527 260.27658081]
[180.09101868 247.38912964]
[172.41549683 234.50167847]
[164.73999023 221.61422729]
[156.95983887 208.78965759]
[149.07556152 196.02885437]
[135.80360413 189.26835632]
[135.13226318 173.46141052]
[127.24800110 160.70059204]
[119.36373138 147.93977356]
[111.89376831 148.61033630]
[113.23488617 163.55026245]
[114.57600403 178.49018860]
[115.91687012 193.43014526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[49 160]
[50 159]
[51 158]
[52 157]
[53 156]
[55 91]
[56 90]
[57 89]
[58 88]
[61 85]
[62 84]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[99 103]
[116 154]
[117 153]
[118 152]
[119 149]
[120 148]
[121 147]
[122 146]
[123 145]
[127 140]
[128 139]
[129 138]
[164 188]
[165 187]
[166 186]
[168 184]
[169 183]
[171 182]
[172 181]
[173 180]
[174 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
