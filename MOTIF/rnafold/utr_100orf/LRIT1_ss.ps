%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGAGAGGAGCCAGGAGCCAUGAGGGUGGCAUUAGGCAUGCUCUGGCUCUUGGCCCUUGCGUGGCCCCCCCAGGCCCGGGGCUUCUGCCCCUCUCAAUGCAGCUGCAGCCUCCAUAUCA\
) } def
/len { sequence length } bind def

/coor [
[-33.48532486 90.12529755]
[-48.13321304 86.89429474]
[-62.78110123 83.66328430]
[-77.42898560 80.43227386]
[-92.07687378 77.20127106]
[-106.58120728 86.88074493]
[-123.28282166 83.20491791]
[-132.03190613 68.90376282]
[-146.75753784 66.04789734]
[-161.48315430 63.19203186]
[-176.20878601 60.33616638]
[-185.34904480 61.78103638]
[-191.27188110 57.21474457]
[-205.91976929 53.98373795]
[-220.56765747 50.75272751]
[-235.21553040 47.52172089]
[-249.86341858 44.29071426]
[-264.51132202 41.05970764]
[-279.15921021 37.82870102]
[-293.80709839 34.59769058]
[-308.45498657 31.36668396]
[-323.10284424 28.13567734]
[-337.75073242 24.90466881]
[-346.92492676 26.11564064]
[-352.72921753 21.39957428]
[-367.28979492 17.79553413]
[-381.85040283 14.19149303]
[-397.10534668 18.38637924]
[-407.60073853 7.81776094]
[-422.16134644 4.21372032]
[-436.72195435 0.60967988]
[-448.50451660 10.70672512]
[-463.97439575 11.91621590]
[-477.18307495 3.77307701]
[-483.05151367 -10.59148693]
[-479.32324219 -25.65400887]
[-467.43182373 -35.62264252]
[-451.94973755 -36.66424179]
[-438.83020020 -28.37829399]
[-433.11788940 -13.95091438]
[-418.55731201 -10.34687328]
[-403.99670410 -6.74283314]
[-389.78323364 -11.19550514]
[-378.24636841 -0.36910081]
[-363.68576050 3.23493958]
[-349.12518311 6.83898020]
[-334.51974487 10.25678253]
[-319.87185669 13.48779011]
[-305.22396851 16.71879768]
[-290.57608032 19.94980431]
[-275.92819214 23.18081284]
[-261.28030396 26.41181946]
[-246.63241577 29.64282799]
[-231.98452759 32.87383270]
[-217.33663940 36.10484314]
[-202.68875122 39.33584976]
[-188.04086304 42.56685638]
[-173.35292053 45.61054230]
[-158.62728882 48.46640778]
[-143.90167236 51.32227707]
[-129.17604065 54.17814255]
[-119.54970551 45.51182175]
[-106.49061584 43.98558807]
[-94.78250885 50.38582993]
[-88.84586334 62.55338287]
[-74.19798279 65.78439331]
[-59.55009079 69.01539612]
[-44.90220642 72.24640656]
[-30.25431824 75.47740936]
[-19.69913483 60.60618591]
[-3.71773052 51.71887589]
[14.58388138 50.59205627]
[31.62742043 57.48920822]
[44.06195068 71.10076904]
[49.42269135 88.79254150]
[64.32372284 90.51279449]
[79.22475433 92.23303986]
[94.12578583 93.95329285]
[92.50955963 80.82469940]
[100.85528564 67.26866913]
[118.49838257 59.08915710]
[133.05897522 55.48511505]
[147.61956787 51.88107300]
[162.18016052 48.27703476]
[176.74075317 44.67299271]
[188.17504883 32.91762161]
[204.00408936 37.20408249]
[207.94430542 53.12283707]
[195.94233704 64.29803467]
[180.34480286 59.23358536]
[165.78419495 62.83762741]
[151.22360229 66.44166565]
[136.66300964 70.04570770]
[122.10241699 73.64974976]
[120.48691559 80.97369385]
[135.13481140 84.20469666]
[149.78263855 87.43595123]
[146.55114746 102.08373260]
[131.90379333 98.85258484]
[117.25591278 95.62158203]
[115.64040375 102.94552612]
[127.33367920 112.34059906]
[139.02694702 121.73567200]
[155.30767822 123.70288849]
[161.49464417 138.89016724]
[151.22322083 151.67414856]
[135.05978394 148.90376282]
[129.63186646 133.42893982]
[117.93859863 124.03386688]
[106.24533081 114.63879395]
[92.40553284 108.85432434]
[77.50450134 107.13407135]
[62.60347366 105.41382599]
[47.70244217 103.69357300]
[42.53857803 114.52899170]
[34.52234650 123.43659210]
[24.32248116 129.68977356]
[12.78522205 132.78271484]
[0.86409181 132.47122192]
[-10.45890713 128.79200745]
[-20.25418282 122.05875397]
[-27.72087288 112.83537292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[8 61]
[9 60]
[10 59]
[11 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[25 46]
[26 45]
[27 44]
[29 42]
[30 41]
[31 40]
[75 114]
[76 113]
[77 112]
[78 111]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
