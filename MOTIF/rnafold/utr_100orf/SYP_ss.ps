%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCUGCAUUGCUGAUGCUGCUGCUGGCGGACAUGGACGUGGUGAAUCAGCUGGUGGCUGGGGGUCAGUUCCGGGUGGUCAAGGAGCCCCUCGGCUUUGUGAAGGUGCUGCAAU\
) } def
/len { sequence length } bind def

/coor [
[90.82418060 105.35805511]
[76.30956268 101.57311249]
[61.79493713 97.78817749]
[47.28031540 94.00323486]
[32.76569366 90.21829987]
[18.25107193 86.43336487]
[2.94510674 90.43811035]
[-7.41798258 79.73971558]
[-21.93260384 75.95477295]
[-35.47446823 87.84687805]
[-53.28058624 89.31790924]
[-68.32615662 79.97344971]
[-74.78605652 63.64947891]
[-89.48291779 60.64909363]
[-104.17977905 57.64870834]
[-118.87664032 54.64832306]
[-133.57350159 51.64793777]
[-148.27035522 48.64755249]
[-159.52406311 55.12246704]
[-171.76841736 52.23211670]
[-178.49313354 42.07882690]
[-193.10414124 38.68494034]
[-207.71514893 35.29105759]
[-222.32615662 31.89717102]
[-236.93716431 28.50328636]
[-251.54817200 25.10940170]
[-263.27352905 35.10050964]
[-278.45617676 36.25806427]
[-291.25778198 28.34712219]
[-296.87908936 14.57980728]
[-311.49011230 11.18592262]
[-327.01306152 16.47456551]
[-339.17477417 5.47344732]
[-335.46432495 -10.50042343]
[-319.69869995 -15.01449871]
[-308.09622192 -3.42508483]
[-293.48519897 -0.03119990]
[-282.37106323 -9.91115475]
[-267.39315796 -11.36939621]
[-254.27520752 -3.63809824]
[-248.15428162 10.49839306]
[-233.54327393 13.89227867]
[-218.93226624 17.28616333]
[-204.32125854 20.68004799]
[-189.71025085 24.07393456]
[-175.09924316 27.46781921]
[-158.68354797 21.42378426]
[-145.26997375 33.95069504]
[-130.57312012 36.95108032]
[-115.87625122 39.95146561]
[-101.17939758 42.95185089]
[-86.48253632 45.95223618]
[-71.78567505 48.95262146]
[-64.03657532 39.41842270]
[-52.88110733 34.09902191]
[-40.44961929 34.07932663]
[-29.14594650 39.42549896]
[-21.18257713 49.16008377]
[-18.14766693 61.44015503]
[-3.63304448 65.22509003]
[10.63473797 60.94962311]
[22.03601074 71.91873932]
[36.55063248 75.70368195]
[51.06525421 79.48861694]
[65.57987213 83.27355194]
[80.09449768 87.05849457]
[94.60911560 90.84342957]
[109.34493256 93.64624023]
[124.23556519 95.45428467]
[139.12620544 97.26233673]
[154.01683044 99.07038879]
[168.64901733 93.05292511]
[180.35086060 102.26791382]
[195.24150085 104.07596588]
[200.16987610 97.95948792]
[206.89469910 94.03525543]
[214.50846863 92.77604675]
[222.00366211 94.29875946]
[228.40609741 98.35540771]
[232.90153503 104.37200165]
[234.93907166 111.52929688]
[249.45368958 115.31423187]
[263.96832275 119.09916687]
[279.27429199 115.09442139]
[289.63735962 125.79281616]
[304.15197754 129.57775879]
[318.66659546 133.36268616]
[333.18124390 137.14762878]
[347.69586182 140.93257141]
[362.21047974 144.71751404]
[377.86984253 139.84753418]
[389.73181152 151.17120361]
[385.59381104 167.03970337]
[369.71267700 171.12887573]
[358.42553711 159.23213196]
[343.91091919 155.44718933]
[329.39630127 151.66224670]
[314.88168335 147.87731934]
[300.36706543 144.09237671]
[285.85241699 140.30743408]
[271.58465576 144.58291626]
[260.18338013 133.61378479]
[245.66874695 129.82885742]
[231.15412903 126.04391479]
[210.44369507 134.68086243]
[193.43344116 118.96659851]
[178.54281616 117.15855408]
[164.97570801 123.30533600]
[152.20878601 113.96102142]
[137.31814575 112.15296936]
[122.42752075 110.34491730]
[107.53688812 108.53687286]
[113.91850281 122.11166382]
[107.53171539 135.68402100]
[93.00431061 139.41958618]
[80.86266327 130.61161804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[8 60]
[9 59]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[30 37]
[31 36]
[68 112]
[69 111]
[70 110]
[71 109]
[73 107]
[74 106]
[81 104]
[82 103]
[83 102]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
