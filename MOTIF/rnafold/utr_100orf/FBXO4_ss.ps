%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCUGACGCGCUAGCGUGGCUCUAAGACGCGUCACCCACGCUGCGGGCAAGCCAUGGCGGGAAGCGAGCCGCGCAGCGGAACAAACUCGCCGCCGCCGCCCUUCAGCGACUGGGGCCGCCUGGAGGCGGCCAUCCUCAGCGGCUGGAAGACCU\
) } def
/len { sequence length } bind def

/coor [
[79.84985352 139.31298828]
[72.94630432 134.92330933]
[66.97056580 129.33592224]
[62.12757874 122.74246216]
[48.14368820 128.16932678]
[34.15979767 133.59617615]
[20.17590332 139.02302551]
[17.73720360 154.12269592]
[8.13137817 165.89660645]
[-5.98421717 171.24603271]
[-20.78316498 168.82795715]
[-32.30714035 159.39060974]
[-46.29103470 164.81745911]
[-60.27492523 170.24430847]
[-67.19004059 176.29981995]
[-74.59329987 175.63677979]
[-88.68297577 180.78274536]
[-102.77265167 185.92871094]
[-116.86233521 191.07467651]
[-130.95201111 196.22065735]
[-145.04168701 201.36662292]
[-159.13136292 206.51258850]
[-159.08967590 221.67088318]
[-164.23788452 235.92823792]
[-173.95428467 247.56298828]
[-187.06558228 255.17018127]
[-201.98854065 257.83120728]
[-216.92112732 255.22476196]
[-230.06016541 247.66555786]
[-239.81906128 236.06642151]
[-245.01934814 221.82800293]
[-245.03309631 206.66964722]
[-239.85864258 192.42181396]
[-230.12080383 180.80499268]
[-216.99549866 173.22196960]
[-202.06767273 170.58843994]
[-187.13990784 173.22241211]
[-174.01481628 180.80580139]
[-164.27732849 192.42291260]
[-150.18765259 187.27694702]
[-136.09797668 182.13098145]
[-122.00830078 176.98500061]
[-107.91862488 171.83903503]
[-93.82894897 166.69306946]
[-79.73926544 161.54710388]
[-65.70178223 156.26042175]
[-51.71788788 150.83357239]
[-37.73399734 145.40670776]
[-35.59292603 130.66624451]
[-26.29926682 118.89832306]
[-12.27038288 113.32546997]
[2.76305270 115.53739166]
[14.74904823 125.03913879]
[28.73294067 119.61228180]
[42.71683121 114.18542480]
[56.70072556 108.75857544]
[58.45700073 84.97604370]
[72.31922150 65.57160950]
[94.24781799 56.19985962]
[94.84796143 41.21186829]
[95.44811249 26.22388077]
[96.04825592 11.23589039]
[96.64839935 -3.75209856]
[86.41327667 -12.55889702]
[83.18388367 -25.46866798]
[87.92605591 -37.69375610]
[98.69146729 -44.83327866]
[99.59137726 -59.80625916]
[100.49129486 -74.77924347]
[101.39121246 -89.75222015]
[102.29113007 -104.72520447]
[102.29113007 -119.72520447]
[101.39121246 -134.69818115]
[100.49129486 -149.67115784]
[99.59137726 -164.64414978]
[92.60567474 -180.09199524]
[105.51598358 -191.08110046]
[119.64955139 -181.71740723]
[114.56436157 -165.54405212]
[115.46427917 -150.57107544]
[116.36419678 -135.59809875]
[117.26410675 -120.62511444]
[128.25598145 -130.83190918]
[143.25141907 -130.46170044]
[153.72622681 -119.72492981]
[153.72601318 -104.72492981]
[143.25088501 -93.98846436]
[128.25543213 -93.61869812]
[117.26410675 -103.82528687]
[116.36419678 -88.85230255]
[115.46427917 -73.87932587]
[114.56436157 -58.90634155]
[113.66444397 -43.93336105]
[125.34350586 -31.86730957]
[124.69662476 -14.74993801]
[111.63638306 -3.15195465]
[111.03623962 11.83603477]
[110.43609619 26.82402420]
[109.83595276 41.81201553]
[109.23580933 56.80000305]
[122.20190430 61.80817795]
[132.97003174 70.59732056]
[140.47412109 82.29731750]
[143.97131348 95.74987030]
[143.11535645 109.62318420]
[156.98786926 115.32875824]
[170.86036682 121.03432465]
[184.73287964 126.73989868]
[198.60539246 132.44546509]
[212.47789001 138.15103149]
[226.91816711 132.31010437]
[240.90557861 138.29399109]
[246.38502502 152.09657288]
[260.25753784 157.80213928]
[274.13003540 163.50770569]
[288.00253296 169.21328735]
[302.09222412 174.35925293]
[316.37649536 178.93737793]
[330.66079712 183.51550293]
[344.94506836 188.09362793]
[359.22937012 192.67175293]
[373.51364136 197.24987793]
[387.79791260 201.82800293]
[403.70159912 197.82734680]
[414.92230225 209.78677368]
[409.91714478 225.40344238]
[393.83499146 228.61227417]
[383.21978760 216.11228943]
[368.93551636 211.53416443]
[354.65124512 206.95603943]
[340.36694336 202.37791443]
[326.08267212 197.79978943]
[311.79837036 193.22166443]
[297.51409912 188.64353943]
[294.92779541 189.85627747]
[291.69235229 190.08811951]
[288.19003296 189.08157349]
[284.89074707 186.72634888]
[282.29696655 183.08578491]
[268.42446899 177.38021851]
[254.55195618 171.67465210]
[240.67945862 165.96908569]
[227.07461548 171.92256165]
[212.92463684 166.33392334]
[206.77232361 152.02354431]
[192.89982605 146.31797791]
[179.02731323 140.61241150]
[165.15480042 134.90682983]
[151.28230286 129.20126343]
[137.40979004 123.49569702]
[132.43583679 129.99093628]
[126.34950256 135.45762634]
[119.35951233 139.70829773]
[111.70557404 142.59718323]
[103.65019989 144.02517700]
[95.46964264 143.94332886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 56]
[5 55]
[6 54]
[7 53]
[12 48]
[13 47]
[14 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[72 82]
[73 81]
[74 80]
[75 79]
[105 150]
[106 149]
[107 148]
[108 147]
[109 146]
[110 145]
[113 142]
[114 141]
[115 140]
[116 139]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
