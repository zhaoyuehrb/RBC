%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGUGGUGCCGGUGGCGGCGGCGGGGGAGCGCGGGACAGGAGGCUUCGGGGAAGAUGGACCCGGCGCCCUCGCUGGGCUGCAGCCUCAAGGAUGUGAAGUGGAGCUCGGUGGCCGUGCCGCUCGACCUCCUGGUCAGCACUUACCGGCUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[23.59282112 356.18841553]
[18.87201118 370.42617798]
[21.87293816 385.96017456]
[10.52327824 395.60562134]
[5.80246878 409.84338379]
[1.08165944 424.08114624]
[1.83584869 441.01831055]
[-14.23062420 446.43170166]
[-23.88009834 432.49169922]
[-13.15610600 419.36035156]
[-8.43529606 405.12258911]
[-3.71448708 390.88482666]
[-7.05307627 376.36920166]
[4.63424683 365.70538330]
[9.35505581 351.46762085]
[13.93318176 337.18331909]
[18.36816597 322.85394287]
[17.33575058 315.49310303]
[23.03789902 308.28384399]
[27.75870705 294.04608154]
[32.47951889 279.80831909]
[37.20032501 265.57055664]
[41.92113495 251.33277893]
[46.64194489 237.09501648]
[43.30335617 222.57940674]
[54.99068069 211.91558838]
[59.71148682 197.67782593]
[52.82056046 184.52294922]
[57.40530777 170.01657104]
[71.25006866 162.87792969]
[75.97087860 148.64016724]
[72.63229370 134.12455750]
[84.31961823 123.46073151]
[89.04042816 109.22296906]
[86.40393829 95.49195862]
[96.72180939 86.05622101]
[101.44261932 71.81845856]
[98.44169617 56.28446579]
[109.79135132 46.63902283]
[114.51216125 32.40126038]
[119.23297119 18.16349411]
[123.95378113 3.92572880]
[128.67459106 -10.31203651]
[133.39540100 -24.54980087]
[138.11621094 -38.78756714]
[137.14317322 -45.41864014]
[139.36756897 -50.72491837]
[143.32122803 -53.49389267]
[148.60791016 -67.53137970]
[153.89459229 -81.56886292]
[159.18125916 -95.60635376]
[164.46794128 -109.64383698]
[151.85494995 -101.52519226]
[136.92521667 -100.07501221]
[122.98556519 -105.61450958]
[113.12351990 -116.91673279]
[109.52346802 -131.47831726]
[112.98278046 -146.07397461]
[122.73525238 -157.47087097]
[136.62078857 -163.14468384]
[151.56382751 -161.83869934]
[164.25459290 -153.84217834]
[171.88220215 -140.92631531]
[172.75738525 -125.95311737]
[180.98144531 -138.49763489]
[189.20549011 -151.04216003]
[197.42953491 -163.58668518]
[205.65359497 -176.13119507]
[213.87763977 -188.67572021]
[210.87046814 -203.95953369]
[219.38952637 -216.56430054]
[233.97882080 -219.33699036]
[242.20288086 -231.88151550]
[250.42692566 -244.42602539]
[258.65097046 -256.97055054]
[266.87503052 -269.51507568]
[275.09909058 -282.05960083]
[283.32312012 -294.60412598]
[291.54718018 -307.14865112]
[299.77124023 -319.69314575]
[307.99526978 -332.23767090]
[309.09078979 -348.02090454]
[322.53948975 -354.42260742]
[330.76351929 -366.96713257]
[326.51617432 -379.78421021]
[330.38717651 -392.51632690]
[340.74212646 -400.56091309]
[353.64654541 -401.14614868]
[362.11996460 -413.52359009]
[370.59335327 -425.90106201]
[367.43878174 -441.38729858]
[376.22814941 -454.52209473]
[391.74688721 -457.51278687]
[404.78802490 -448.58502197]
[407.61444092 -433.03555298]
[398.54934692 -420.08953857]
[382.97082520 -417.42764282]
[374.49740601 -405.05020142]
[366.02401733 -392.67272949]
[369.83316040 -376.31790161]
[360.47375488 -361.97134399]
[343.30804443 -358.74307251]
[335.08398438 -346.19857788]
[334.57672119 -331.31259155]
[320.53979492 -324.01364136]
[312.31573486 -311.46911621]
[304.09170532 -298.92459106]
[295.86764526 -286.38006592]
[287.64358521 -273.83554077]
[279.41955566 -261.29101562]
[271.19549561 -248.74650574]
[262.97143555 -236.20198059]
[254.74739075 -223.65745544]
[246.52334595 -211.11294556]
[249.79890442 -196.62825012]
[241.63725281 -183.78916931]
[226.42216492 -180.45167542]
[218.19810486 -167.90715027]
[209.97406006 -155.36262512]
[201.75001526 -142.81811523]
[193.52595520 -130.27359009]
[185.30191040 -117.72906494]
[178.50543213 -104.35716248]
[173.21875000 -90.31967926]
[167.93206787 -76.28218842]
[162.64540100 -62.24470139]
[157.35871887 -48.20721436]
[152.35397339 -34.06675720]
[147.63316345 -19.82899284]
[142.91235352 -5.59122705]
[138.19154358 8.64653873]
[133.47073364 22.88430405]
[128.74992371 37.12207031]
[124.02912140 51.35983276]
[127.36770630 65.87545013]
[115.68038177 76.53926849]
[110.95957184 90.77703094]
[113.59606171 104.50804138]
[103.27819061 113.94377899]
[98.55738068 128.18153381]
[101.55830383 143.71553040]
[90.20864868 153.36097717]
[85.48783875 167.59873962]
[92.32495117 181.59486389]
[87.33455658 195.96673584]
[73.94925690 202.39863586]
[69.22844696 216.63639832]
[72.22937012 232.17039490]
[60.87971115 241.81582642]
[56.15890121 256.05358887]
[51.43809128 270.29135132]
[46.71728134 284.52911377]
[41.99647141 298.76687622]
[37.27566528 313.00466919]
[32.69753647 327.28894043]
[28.26255417 341.61831665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[4 12]
[5 11]
[6 10]
[16 156]
[17 155]
[19 154]
[20 153]
[21 152]
[22 151]
[23 150]
[24 149]
[26 147]
[27 146]
[30 143]
[31 142]
[33 140]
[34 139]
[36 137]
[37 136]
[39 134]
[40 133]
[41 132]
[42 131]
[43 130]
[44 129]
[45 128]
[48 127]
[49 126]
[50 125]
[51 124]
[52 123]
[64 122]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[72 114]
[73 113]
[74 112]
[75 111]
[76 110]
[77 109]
[78 108]
[79 107]
[80 106]
[81 105]
[83 103]
[84 102]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
