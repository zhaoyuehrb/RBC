%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAGUACAAGUAAUGUGACUGAGUUGAUUUUCACUGGCCUUUUCCAGGAUCCAGCUGUGCAGAGUGUAUGCUUUGUGGUGUUUCUCCCCGUGUACC\
) } def
/len { sequence length } bind def

/coor [
[60.95278549 136.03292847]
[53.71837234 126.09726715]
[48.96035767 114.76522064]
[34.10705948 116.85794830]
[19.25376129 118.95067596]
[4.40046358 121.04341125]
[-10.45283508 123.13613892]
[-25.30613327 125.22886658]
[-40.15943146 127.32160187]
[-49.66371536 139.66284180]
[-64.75688934 141.57357788]
[-76.46380615 132.43664551]
[-91.31710052 134.52937317]
[-106.17040253 136.62210083]
[-121.02370453 138.71482849]
[-135.84265137 141.03829956]
[-150.62368774 143.59196472]
[-165.40472412 146.14561462]
[-172.13403320 160.12759399]
[-185.81248474 167.45422363]
[-201.18045044 165.30822754]
[-212.32862854 154.51481628]
[-214.97030640 139.22425842]
[-208.08972168 125.31609344]
[-194.33258057 118.13829041]
[-178.98880005 120.45085907]
[-167.95837402 131.36457825]
[-153.17733765 128.81092834]
[-138.39631653 126.25727081]
[-132.23251343 121.94066620]
[-123.11643219 123.86153412]
[-108.26313019 121.76879883]
[-93.40983582 119.67607117]
[-78.55653381 117.58334351]
[-69.82991028 105.56745148]
[-54.79636002 103.23353577]
[-42.25216293 112.46829987]
[-27.39886475 110.37557220]
[-12.54556561 108.28283691]
[2.30773354 106.19010925]
[17.16103172 104.09738159]
[32.01433182 102.00464630]
[46.86763000 99.91191864]
[49.90044403 82.30561829]
[58.59760284 66.69987488]
[71.97579193 54.85910797]
[88.52244568 48.12204361]
[106.36677551 47.25039673]
[123.49125671 52.34270859]
[137.95977783 62.82324219]
[148.13650513 77.50704193]
[162.48637390 73.13882446]
[176.83624268 68.77059937]
[180.36318970 52.70300293]
[191.41026306 40.64028168]
[206.92849731 35.77318192]
[222.70382690 39.32533646]
[234.50138855 50.24727631]
[248.70846558 45.43488693]
[262.91552734 40.62250137]
[267.75985718 35.70806122]
[273.50479126 34.32767105]
[278.15795898 35.98257828]
[292.63674927 32.06275177]
[307.11550903 28.14292145]
[321.59429932 24.22309303]
[336.07305908 20.30326462]
[350.55184937 16.38343430]
[365.03060913 12.46360588]
[376.20657349 0.46235758]
[392.12506104 4.40358305]
[396.41052246 20.23288918]
[384.65441895 31.66644096]
[368.95043945 26.94238281]
[354.47167969 30.86221123]
[339.99288940 34.78203964]
[325.51412964 38.70186996]
[311.03533936 42.62169647]
[296.55654907 46.54152679]
[282.07778931 50.46135330]
[267.72793579 54.82957458]
[253.52084351 59.64196396]
[239.31378174 64.45434570]
[237.49978638 78.08551025]
[229.92149353 89.63984680]
[218.02774048 96.80325317]
[204.13832092 98.11128235]
[190.99154663 93.24815369]
[181.20446777 83.12046814]
[166.85459900 87.48869324]
[152.50473022 91.85691071]
[152.97102356 104.13846588]
[150.60299683 116.19857788]
[145.52732849 127.39196014]
[138.01562500 137.11965942]
[128.46980286 144.86119080]
[117.40064240 150.20233154]
[105.40042114 152.85728455]
[93.11123657 152.68397522]
[81.19065857 149.69169617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[12 34]
[13 33]
[14 32]
[15 31]
[16 29]
[17 28]
[18 27]
[51 91]
[52 90]
[53 89]
[58 83]
[59 82]
[60 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
