%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGAAGACUGGCUUCUCCAUGAUGGUUUAUGGACUAAGGCAAAGAUGAGCAGAGCCAUGGCCCUCUUCUUUGUUCUCUGCUGGAUCCAAGAUGAAAUUGUGCUCCAAGUGUUUUCCAAGGUUCCGUAUGACCCAUCAUUUGAUG\
) } def
/len { sequence length } bind def

/coor [
[13.92434978 499.87658691]
[7.18834352 502.85556030]
[-0.05844853 504.04177856]
[-7.34870243 503.36999512]
[-14.14427471 516.74237061]
[-20.93984604 530.11474609]
[-27.73541832 543.48712158]
[-34.53099060 556.85949707]
[-30.94415092 572.49639893]
[-41.04559708 584.95996094]
[-57.08636475 584.68914795]
[-66.76135254 571.89172363]
[-62.64873123 556.38476562]
[-47.90335846 550.06390381]
[-41.10778427 536.69152832]
[-34.31221390 523.31915283]
[-27.51664162 509.94680786]
[-20.72106934 496.57443237]
[-30.57477188 475.72164917]
[-22.00301361 454.03643799]
[-0.08198255 445.36975098]
[4.33934498 431.03616333]
[8.76067257 416.70257568]
[13.18200016 402.36898804]
[17.60332870 388.03540039]
[22.02465630 373.70178223]
[26.44598389 359.36819458]
[16.91926956 343.79663086]
[21.81419373 325.88122559]
[38.49590683 317.01922607]
[42.30072403 302.50979614]
[46.10554504 288.00039673]
[49.91036224 273.49096680]
[53.71518326 258.98153687]
[57.52000046 244.47212219]
[61.16956329 229.92286682]
[64.66345215 215.33544922]
[56.67961502 202.81370544]
[60.01511002 187.97021484]
[73.20319366 179.68093872]
[76.69708252 165.09352112]
[72.13710785 150.91410828]
[82.87600708 139.29573059]
[86.36989594 124.70831299]
[89.86378479 110.12089539]
[86.07004547 96.66358185]
[95.54879761 86.38522339]
[99.04268646 71.79780579]
[89.68302917 63.39003754]
[84.84074402 51.85625839]
[85.38710785 39.43168259]
[91.15555573 28.49564743]
[100.98538971 21.11595154]
[112.95484924 18.65795326]
[117.06886292 4.23315191]
[121.18286896 -10.19164944]
[125.29688263 -24.61645126]
[129.25653076 -39.08438873]
[133.06134033 -53.59381104]
[124.28082275 -61.14947128]
[119.00837708 -71.40592957]
[117.98303223 -82.84078217]
[121.31659698 -93.77298737]
[128.48295593 -102.61002350]
[138.40063477 -108.07985687]
[149.59591675 -109.41394806]
[154.32254028 -123.64978027]
[151.32795715 -139.18499756]
[162.68154907 -148.82580566]
[167.40817261 -163.06164551]
[172.13479614 -177.29747009]
[176.86141968 -191.53330994]
[172.70875549 -209.43943787]
[186.19563293 -220.62026978]
[190.61695862 -234.95387268]
[195.03829956 -249.28746033]
[199.45962524 -263.62106323]
[191.85411072 -277.47500610]
[196.35258484 -292.62554932]
[210.28616333 -300.08416748]
[225.38830566 -295.42578125]
[232.69918823 -281.41412354]
[227.88137817 -266.36206055]
[213.79321289 -259.19973755]
[209.37188721 -244.86613464]
[204.95056152 -230.53254700]
[200.52923584 -216.19894409]
[205.91094971 -205.31600952]
[202.29116821 -193.30703735]
[191.09725952 -186.80668640]
[186.37063599 -172.57084656]
[181.64401245 -158.33502197]
[176.91738892 -144.09918213]
[180.25004578 -129.58219910]
[168.55836487 -118.92315674]
[163.83174133 -104.68732452]
[175.57980347 -90.24415588]
[176.33876038 -71.49298096]
[165.62797546 -55.90239334]
[147.57077026 -49.78899384]
[143.76594543 -35.27957153]
[145.12129211 -27.95984459]
[139.72167969 -20.50243759]
[135.60768127 -6.07763672]
[131.49366760 8.34716415]
[127.37964630 22.77196693]
[138.89593506 36.08621216]
[140.17939758 53.79991150]
[130.53442383 68.89872742]
[113.63010406 75.29168701]
[110.13621521 89.87910461]
[113.92995453 103.33641815]
[104.45120239 113.61477661]
[100.95731354 128.20219421]
[97.46342468 142.78961182]
[101.77349091 158.01242065]
[91.28450012 168.58740234]
[87.79061127 183.17481995]
[95.79231262 196.53935242]
[92.04121399 211.28329468]
[79.25086975 218.82933044]
[75.75698090 233.41674805]
[76.80227661 242.56420898]
[72.02942657 248.27693176]
[68.22460175 262.78634644]
[64.41978455 277.29577637]
[60.61496735 291.80520630]
[56.81014633 306.31463623]
[53.00532913 320.82403564]
[60.93711472 329.79266357]
[63.49567032 341.36572266]
[60.15236282 352.61148071]
[51.85876083 360.73870850]
[40.77957535 363.78952026]
[36.35824585 378.12310791]
[31.93692017 392.45672607]
[27.51559258 406.79031372]
[23.09426498 421.12390137]
[18.67293739 435.45748901]
[14.25160980 449.79107666]
[20.05829048 454.60415649]
[24.45549202 460.70455933]
[27.16975784 467.69393921]
[28.03708076 475.11926270]
[27.01278114 482.50225830]
[24.17365837 489.37017822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[27 134]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[36 122]
[37 121]
[40 118]
[41 117]
[43 115]
[44 114]
[45 113]
[47 111]
[48 110]
[54 106]
[55 105]
[56 104]
[57 103]
[58 101]
[59 100]
[66 96]
[67 95]
[69 93]
[70 92]
[71 91]
[72 90]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
