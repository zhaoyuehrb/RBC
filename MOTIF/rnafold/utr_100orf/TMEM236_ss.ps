%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCAGGUUCUUGGCAGCUUGCUUUUCCUCAGGAUGGCUUCUGGAAGGCUCAUUAAGUUCGUGGUUUUUGAGCUCCUAGAGUUUGCCGCUUUCUCCAUCCCCACACUCGUGAUCACAGAACAGUUUGCCACCG\
) } def
/len { sequence length } bind def

/coor [
[69.17983246 377.59179688]
[57.58573151 387.76922607]
[42.32642746 390.04019165]
[28.27111816 383.68002319]
[19.90479851 370.71823120]
[19.89713097 355.29086304]
[28.25056267 342.32077026]
[42.29954147 335.94662476]
[44.37188721 321.09045410]
[46.44423294 306.23431396]
[44.77263260 303.87811279]
[43.97728729 300.68872070]
[44.39165115 297.01312256]
[46.21115494 293.31634521]
[49.45506287 290.12780762]
[52.88932037 275.52621460]
[56.32357788 260.92465210]
[59.75783539 246.32307434]
[63.19209671 231.72151184]
[61.58412170 228.48825073]
[61.51702881 224.29660034]
[63.43214417 219.90541077]
[67.40298462 216.24484253]
[71.84008026 201.91612244]
[76.27716827 187.58740234]
[72.65093231 173.14096069]
[84.12414551 162.24711609]
[88.56124115 147.91839600]
[92.99832916 133.58967590]
[78.04011536 124.28211212]
[70.27967072 109.38468170]
[71.14405060 93.43022156]
[79.56507874 80.82594299]
[92.50000000 74.63607788]
[92.50000000 59.63607788]
[92.50000000 44.63607788]
[92.50000000 29.63607788]
[92.50000000 14.63607788]
[92.50000000 -0.36392182]
[77.13082886 -8.72622585]
[68.11258698 -23.61664581]
[67.82482147 -40.93425751]
[76.25682831 -55.96185684]
[91.03480530 -64.65087891]
[90.34205627 -79.63488007]
[89.64930725 -94.61887360]
[81.28292084 -108.04698181]
[88.42417145 -121.11801147]
[87.73142242 -136.10200500]
[87.03867340 -151.08599854]
[86.34591675 -166.06999207]
[85.65316772 -181.05398560]
[84.96041870 -196.03797913]
[71.42269135 -203.15678406]
[63.31934357 -216.01106262]
[62.74192429 -231.09526062]
[69.74543762 -244.35447693]
[82.36044312 -252.27452087]
[81.66769409 -267.25851440]
[80.97493744 -282.24252319]
[80.28218842 -297.22650146]
[79.58943176 -312.21051025]
[78.89668274 -327.19448853]
[66.35721588 -336.53771973]
[62.80746841 -351.76705933]
[69.92351532 -365.69171143]
[84.34537506 -371.73687744]
[99.26349640 -367.04818726]
[107.63398743 -353.83953857]
[105.50457001 -338.34759521]
[93.88067627 -327.88723755]
[94.57343292 -312.90325928]
[95.26618195 -297.91925049]
[95.95893097 -282.93527222]
[96.65168762 -267.95126343]
[97.34443665 -252.96726990]
[110.63639832 -246.24497986]
[118.83344269 -233.68852234]
[119.65028381 -218.61540222]
[112.76754761 -205.06826782]
[99.94441223 -196.73072815]
[100.63716125 -181.74673462]
[101.32991028 -166.76274109]
[102.02266693 -151.77874756]
[102.71541595 -136.79475403]
[103.40817261 -121.81076050]
[111.72500610 -109.45440674]
[104.63330078 -95.31162262]
[105.32604980 -80.32762909]
[106.01879883 -65.34363556]
[117.88629150 -60.73342896]
[127.14125824 -51.92238235]
[132.36701965 -40.20990372]
[132.74494934 -27.34312248]
[128.18249512 -15.25628376]
[119.33251190 -5.77998114]
[107.50000000 -0.36392182]
[107.50000000 14.63607788]
[107.50000000 29.63607788]
[107.50000000 44.63607788]
[107.50000000 59.63607788]
[107.50000000 74.63607788]
[127.43361664 86.94712830]
[131.66828918 113.20639038]
[145.99700928 117.64347839]
[160.32572937 122.08057404]
[176.18919373 117.92333221]
[187.52725220 129.77156067]
[182.67628479 145.43681335]
[166.62655640 148.80403137]
[155.88864136 136.40928650]
[141.55992126 131.97219849]
[127.23120117 127.53511047]
[140.72793579 134.08020020]
[146.35156250 147.98612976]
[141.19857788 162.07324219]
[127.92948914 169.06832886]
[113.39514923 165.35981750]
[105.09967804 152.86241150]
[107.32704926 138.02676392]
[102.88996124 152.35548401]
[98.45286560 166.68420410]
[101.76173401 182.15553284]
[90.60588837 192.02449036]
[86.16880035 206.35321045]
[81.73170471 220.68193054]
[77.79366302 235.15576172]
[74.35940552 249.75733948]
[70.92514801 264.35891724]
[67.49089050 278.96047974]
[64.05663300 293.56204224]
[61.30038834 308.30664062]
[59.22804642 323.16281128]
[57.15570068 338.01895142]
[68.92400360 347.99444580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 134]
[9 133]
[10 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[23 126]
[24 125]
[25 124]
[27 122]
[28 121]
[29 120]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[44 90]
[45 89]
[46 88]
[48 86]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
