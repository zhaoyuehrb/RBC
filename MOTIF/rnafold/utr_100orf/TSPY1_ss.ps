%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUUCGCGCGCAGUCCCUUAGGGGGCGCCUGGAAGCCCGGCGCAUGCGCCCUGAGGGCUCGCUGACCUACCGGGUGCCAGAGAGGCUGCGGCAGGGUUUCUGUGGCGUGGGUCGGGCAGCACAGGCCUUGGUGUGUGCGAGUG\
) } def
/len { sequence length } bind def

/coor [
[138.70532227 163.87466431]
[142.14808655 157.71458435]
[134.50970459 144.80508423]
[126.87132263 131.89558411]
[119.23294067 118.98609161]
[111.32017517 123.49034882]
[102.66539001 124.98415375]
[94.33534241 123.50313568]
[87.28512573 119.43695068]
[82.24868011 113.45866394]
[79.66346741 106.42313385]
[64.68487549 105.62208557]
[49.70627975 104.82104492]
[40.89817810 107.50170898]
[34.41719055 103.83944702]
[19.45913506 102.71849823]
[10.59576035 105.21032715]
[4.19451571 101.41040802]
[-10.73617077 99.97006226]
[-25.66685677 98.52971649]
[-40.59754562 97.08937073]
[-55.52823257 95.64902496]
[-70.45891571 94.20867920]
[-85.38960266 92.76833344]
[-100.32028961 91.32798767]
[-115.25097656 89.88764191]
[-129.73034668 96.26405334]
[-141.65583801 87.34040070]
[-156.58653259 85.90005493]
[-171.54458618 84.77909851]
[-186.52317810 83.97805786]
[-201.50947571 83.33711243]
[-216.50177002 82.85633850]
[-231.49406433 82.37556458]
[-246.48635864 81.89479065]
[-260.68069458 90.10775757]
[-274.75350952 81.68824768]
[-274.22787476 65.29753113]
[-259.64456177 57.79696655]
[-246.00558472 66.90249634]
[-231.01329041 67.38327026]
[-216.02099609 67.86404419]
[-201.02870178 68.34481812]
[-194.19409180 65.39466858]
[-185.72213745 68.99945831]
[-170.74354553 69.80050659]
[-166.60934448 67.28281403]
[-160.83773804 67.38481140]
[-155.14617920 70.96936798]
[-140.21549988 72.40971375]
[-126.80407715 65.93027496]
[-113.81063080 74.95695496]
[-98.87994385 76.39730072]
[-83.94925690 77.83764648]
[-69.01856995 79.27799225]
[-54.08788681 80.71833801]
[-39.15719986 82.15868378]
[-24.22651291 83.59902954]
[-9.29582596 85.03937531]
[5.63486099 86.47972107]
[20.58008575 87.76044464]
[35.53814316 88.88139343]
[50.50732422 89.84244537]
[65.48591614 90.64349365]
[80.46451569 91.44453430]
[98.41674042 75.87576294]
[123.12628174 86.01597595]
[133.56152344 75.24073792]
[143.99674988 64.46549988]
[154.43199158 53.69025803]
[164.86723328 42.91501617]
[175.30247498 32.13977432]
[185.73771667 21.36453629]
[170.99674988 18.58889008]
[163.78320312 5.43728352]
[169.36529541 -8.48537350]
[183.66627502 -13.01105309]
[196.24183655 -4.83454990]
[197.90789795 10.07224560]
[209.43284607 0.47142151]
[220.95777893 -9.12940311]
[232.48271179 -18.73022842]
[238.13348389 -33.50788879]
[252.86451721 -35.70925140]
[264.38946533 -45.31007385]
[275.91439819 -54.91090012]
[287.43933105 -64.51172638]
[298.96426392 -74.11254883]
[310.48919678 -83.71337128]
[322.01412964 -93.31419373]
[321.88891602 -108.95127869]
[331.88409424 -120.97750092]
[347.28030396 -123.71444702]
[360.80789185 -115.86981964]
[366.07955933 -101.14760590]
[360.60620117 -86.49919128]
[346.97213745 -78.84110260]
[331.61495972 -81.78926086]
[320.09002686 -72.18843842]
[308.56509399 -62.58761215]
[297.04016113 -52.98678589]
[285.51522827 -43.38596344]
[273.99029541 -33.78513718]
[262.46533203 -24.18431282]
[257.63891602 -10.09336662]
[242.08354187 -7.20529079]
[230.55860901 2.39553380]
[219.03366089 11.99635792]
[207.50872803 21.59718323]
[196.51295471 31.79977417]
[186.07771301 42.57501602]
[175.64247131 53.35025406]
[165.20722961 64.12549591]
[154.77200317 74.90073395]
[144.33676147 85.67597198]
[133.90151978 96.45121765]
[132.14244080 111.34770966]
[139.78082275 124.25720978]
[147.41920471 137.16670227]
[155.05758667 150.07620239]
[176.95082092 159.55102539]
[177.18954468 182.69595337]
[186.41604614 194.52268982]
[195.64254761 206.34942627]
[204.86904907 218.17616272]
[214.09555054 230.00289917]
[228.68449402 236.12442017]
[230.41258240 250.91844177]
[239.63908386 262.74517822]
[255.03450012 268.39434814]
[257.57290649 284.59585571]
[244.64302063 294.68295288]
[229.54597473 288.27893066]
[227.81233215 271.97167969]
[218.58584595 260.14495850]
[204.65682983 254.86935425]
[202.26881409 239.22940063]
[193.04231262 227.40266418]
[183.81581116 215.57592773]
[174.58930969 203.74919128]
[165.36280823 191.92245483]
[158.75468445 192.98921204]
[152.09532166 191.91435242]
[146.06634521 188.77482605]
[141.29522705 183.86059570]
[138.28999329 177.64810181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[11 65]
[12 64]
[13 63]
[15 62]
[16 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[28 50]
[29 49]
[30 46]
[31 45]
[32 43]
[33 42]
[34 41]
[35 40]
[67 116]
[68 115]
[69 114]
[70 113]
[71 112]
[72 111]
[73 110]
[79 109]
[80 108]
[81 107]
[82 106]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[122 141]
[123 140]
[124 139]
[125 138]
[126 137]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
