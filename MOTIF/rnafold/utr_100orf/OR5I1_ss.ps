%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAUUUACAGAUAGAAACUACACGUUGGUCACUGAGUUUAUUCUAUUAGGUUUUCCAACUCGCCCUGAACUGCAGAUUGUCCUGUUCCUCAUGUUUC\
) } def
/len { sequence length } bind def

/coor [
[211.04656982 167.97586060]
[211.65907288 152.87347412]
[197.60853577 147.62158203]
[183.55799866 142.36967468]
[169.50746155 137.11778259]
[155.45692444 131.86589050]
[146.37501526 137.00350952]
[135.75065613 136.18061829]
[127.22010040 129.43077087]
[123.84087372 118.85784149]
[110.14402008 112.74258423]
[93.59204865 114.97373962]
[83.77826691 101.45946503]
[69.89785767 95.77313232]
[56.01745224 90.08680725]
[42.13704300 84.40048218]
[28.25663757 78.71415710]
[14.37623024 73.02783203]
[0.49582297 67.34150696]
[-13.63469124 62.30875397]
[-27.98455620 57.94053268]
[-42.33442307 53.57231522]
[-51.63801193 54.05792618]
[-57.05878448 48.83866119]
[-71.26586151 44.02627563]
[-80.58005524 44.22231674]
[-85.83588409 38.83699036]
[-99.88642120 33.58509064]
[-115.02204132 38.90416336]
[-128.54052734 30.26528358]
[-130.07164001 14.29546165]
[-118.44084930 3.24537778]
[-102.57030487 5.59171104]
[-94.63452148 19.53455544]
[-80.58398438 24.78645134]
[-66.45346832 29.81920242]
[-52.24639893 34.63158798]
[-37.96620178 39.22244644]
[-23.61633682 43.59066772]
[-9.26646996 47.95888901]
[-5.87453413 46.49266434]
[-1.57250023 46.70982361]
[2.78495240 49.03318787]
[6.18214893 53.46109772]
[20.06255531 59.14742279]
[33.94296265 64.83374786]
[47.82336807 70.52007294]
[61.70377731 76.20640564]
[75.58418274 81.89273071]
[89.46459198 87.57905579]
[100.57145691 83.72277069]
[111.38053894 88.34848022]
[116.25927734 99.04573822]
[129.95613098 105.16099548]
[149.74719238 102.01485443]
[160.70881653 117.81535339]
[174.75935364 123.06724548]
[188.80989075 128.31913757]
[202.86042786 133.57104492]
[216.91096497 138.82293701]
[226.35472107 127.02154541]
[238.96672058 118.72815704]
[253.50488281 114.74446869]
[268.54214478 115.44846344]
[282.60647583 120.75864410]
[294.32489014 130.14317322]
[302.55767822 142.67320251]
[306.50906372 157.11468506]
[305.80426025 172.05001831]
[319.85479736 177.30191040]
[333.90533447 182.55381775]
[346.82247925 174.16018677]
[362.02752686 174.97253418]
[373.70062256 184.47007751]
[377.49737549 198.84793091]
[391.54791260 204.09982300]
[405.59844971 209.35171509]
[419.64898682 214.60360718]
[433.92395020 207.82121277]
[448.78555298 213.19787598]
[455.41665649 227.54374695]
[449.88314819 242.34767151]
[435.46798706 248.82672119]
[420.72338867 243.13702393]
[414.39709473 228.65414429]
[400.34655762 223.40225220]
[386.29602051 218.15036011]
[372.24548340 212.89846802]
[359.94876099 221.26078796]
[344.90792847 220.77302551]
[332.89797974 211.41279602]
[328.65344238 196.60435486]
[314.60290527 191.35244751]
[300.55236816 186.10055542]
[291.28784180 197.83639526]
[278.83267212 206.14532471]
[264.39956665 210.20315552]
[249.39865112 209.60037231]
[235.29949951 204.38343811]
[223.48724365 195.05145264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 58]
[5 57]
[6 56]
[10 54]
[11 53]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 40]
[21 39]
[22 38]
[24 37]
[25 36]
[27 35]
[28 34]
[69 94]
[70 93]
[71 92]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
