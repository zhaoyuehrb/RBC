%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCUUGCCUUGAGCAGCCAAACAACUCACCACUCCUGACGCCAUGAGCUACUAUGGCAGCUAUUACAGAGGCCUGGGCUAUGGCUGUGGAGGCUUUGGUGGCCUAGGCUAUGGCUAUGGCUGUGGAUGUGGCAGCUUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[117.44129181 396.11596680]
[116.46700287 381.14764404]
[115.49270630 366.17932129]
[104.16423035 356.57717896]
[102.96292877 341.41104126]
[113.11135101 329.59381104]
[112.13706207 314.62548828]
[111.16277313 299.65716553]
[110.18848419 284.68884277]
[109.21418762 269.72048950]
[93.55373383 262.71438599]
[83.51101685 248.69561768]
[81.89890289 231.43746948]
[89.24617004 215.64071655]
[103.62896729 205.65335083]
[102.00718689 190.74127197]
[100.38539886 175.82920837]
[98.76361847 160.91714478]
[97.14183044 146.00506592]
[95.52004242 131.09300232]
[93.89826202 116.18093109]
[88.17227936 130.04502869]
[87.97110748 145.04368591]
[83.50952911 159.36479187]
[75.15657043 171.82385254]
[63.60312271 181.39035034]
[49.80478287 187.27301025]
[34.90283585 188.98530579]
[20.12983894 186.38557434]
[6.70769119 179.68885803]
[-4.25344086 169.44905090]
[-11.84694672 156.51310730]
[-15.44475651 141.95097351]
[-14.74929047 126.96710968]
[-9.81807041 112.80084229]
[-1.05896592 100.62389374]
[10.80354500 91.44343567]
[24.78829575 86.01879120]
[39.73859024 84.79865265]
[54.41786194 87.88392639]
[67.61122894 95.01888275]
[82.50782776 96.77711487]
[70.27777100 88.09231567]
[58.04772186 79.40750885]
[45.81766510 70.72270966]
[33.58761215 62.03790665]
[21.35755920 53.35310745]
[5.81939173 56.24116898]
[-7.16245270 47.22744370]
[-9.88607693 31.65961075]
[-0.73560220 18.77379036]
[14.86015606 16.21491241]
[27.64851189 25.50111198]
[30.04236031 41.12305069]
[42.27241516 49.80785370]
[54.50246811 58.49265671]
[66.73252106 67.17745972]
[78.96257782 75.86225891]
[91.19262695 84.54705811]
[106.06606293 82.60259247]
[115.65244293 71.06563568]
[125.23882294 59.52868271]
[134.82519531 47.99172974]
[144.41157532 36.45477295]
[153.99795532 24.91781616]
[138.99922180 24.72340775]
[128.38842773 14.12099743]
[128.18215942 -0.87758404]
[138.49739075 -11.76776981]
[153.48510742 -12.37455368]
[164.64691162 -2.35387516]
[165.65348816 12.61322308]
[176.65452576 2.41630530]
[187.65556335 -7.78061199]
[198.65660095 -17.97752953]
[209.65763855 -28.17444611]
[220.65869141 -38.37136459]
[231.65972900 -48.56828308]
[242.66076660 -58.76519775]
[253.66180420 -68.96212006]
[264.66284180 -79.15903473]
[275.66387939 -89.35594940]
[286.66491699 -99.55287170]
[297.32882690 -110.10186768]
[307.64431763 -120.99179840]
[317.95980835 -131.88172913]
[328.27529907 -142.77166748]
[329.27993774 -158.78323364]
[342.50677490 -167.86238098]
[357.80926514 -163.04435730]
[363.44866943 -148.02514648]
[355.09890747 -134.32620239]
[339.16522217 -132.45617676]
[328.84973145 -121.56623840]
[318.53424072 -110.67630768]
[308.21875000 -99.78636932]
[307.97528076 -96.19853973]
[305.93530273 -92.55958557]
[302.09881592 -89.73429108]
[296.86184692 -88.55182648]
[285.86080933 -78.35491180]
[274.85977173 -68.15799713]
[263.85873413 -57.96107864]
[252.85768127 -47.76416016]
[241.85664368 -37.56724167]
[230.85560608 -27.37032509]
[219.85456848 -17.17340660]
[208.85351562 -6.97648954]
[197.85247803 3.22042775]
[186.85144043 13.41734505]
[175.85040283 23.61426163]
[165.53491211 34.50419617]
[155.94853210 46.04114914]
[146.36215210 57.57810593]
[136.77577209 69.11505890]
[127.18939972 80.65201569]
[117.60301971 92.18897247]
[117.30345154 105.43779755]
[108.81032562 114.55914307]
[110.43211365 129.47122192]
[112.05390167 144.38328552]
[113.67568207 159.29534912]
[115.29747009 174.20742798]
[116.91925812 189.11949158]
[118.54103851 204.03155518]
[130.87400818 208.12936401]
[140.68847656 216.57646179]
[146.53468323 228.07806396]
[147.56697083 240.89178467]
[143.66595459 253.09158325]
[135.45104980 262.85729980]
[124.18251801 268.74621582]
[125.15680695 283.71453857]
[126.13109589 298.68286133]
[127.10538483 313.65118408]
[128.07968140 328.61950684]
[139.67434692 339.02148438]
[140.44918823 354.21539307]
[130.46102905 365.20504761]
[131.43531799 380.17337036]
[132.40962219 395.14169312]
[141.95941162 408.47335815]
[134.94322205 423.29580688]
[118.57871246 424.36099243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[20 120]
[21 119]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[65 112]
[72 111]
[73 110]
[74 109]
[75 108]
[76 107]
[77 106]
[78 105]
[79 104]
[80 103]
[81 102]
[82 101]
[83 100]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
