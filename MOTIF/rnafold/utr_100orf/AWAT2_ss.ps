%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACAAUGCUCUUGCCCUCUAAGAAGGACCUCAAGACUGCCCUGGAUGUCUUUGCUGUUUUCCAGUGGUCCUUCAGUGCCUUGCUUAUCACAACCACUGUGAUUG\
) } def
/len { sequence length } bind def

/coor [
[164.04737854 162.55606079]
[153.99951172 151.41871643]
[143.95164490 140.28137207]
[133.90377808 129.14402771]
[123.85591888 118.00668335]
[116.35591888 118.00668335]
[108.85594940 130.99708557]
[101.35591888 118.00668335]
[93.85591888 118.00668335]
[83.80805969 129.14402771]
[80.91380310 145.28575134]
[65.39781952 150.59483337]
[53.22162247 139.60974121]
[56.91103745 123.63099670]
[72.67071533 119.09616852]
[82.71857452 107.95882416]
[69.45047760 114.95578766]
[54.67557526 112.36691284]
[44.57692719 101.27559662]
[43.38065338 86.32337189]
[51.58737564 73.76750946]
[65.76271057 68.86242676]
[79.97451782 73.66082764]
[88.27569580 86.15587616]
[84.78472900 71.56776428]
[81.29375458 56.97964478]
[77.80278015 42.39152908]
[74.31180573 27.80341530]
[70.82083130 13.21530056]
[67.32985687 -1.37281477]
[63.83888626 -15.96092987]
[45.77569962 -10.88953972]
[32.42550659 -22.16069603]
[34.13768005 -38.25249863]
[25.82702827 -50.73981476]
[17.51637650 -63.22713089]
[9.20572376 -75.71444702]
[0.89507073 -88.20175934]
[-14.42744446 -87.14530182]
[-28.21830368 -93.90605927]
[-36.76783371 -106.66541290]
[-37.77625656 -121.99116516]
[-30.97230911 -135.76075745]
[-18.18622017 -144.27026367]
[-2.85738349 -145.23063660]
[10.89082146 -138.38356018]
[19.36019707 -125.57086182]
[20.27252197 -110.23908997]
[13.38238621 -96.51241302]
[21.69303894 -84.02510071]
[30.00369263 -71.53778076]
[38.31434631 -59.05046463]
[46.62499619 -46.56315231]
[56.81525803 -46.85445404]
[66.39707184 -40.76742935]
[72.79173279 -54.33608246]
[79.18638611 -67.90473938]
[85.58104706 -81.47338867]
[81.53050232 -96.99668121]
[91.25661469 -109.75530243]
[107.29833984 -109.96192169]
[117.34983826 -97.45804596]
[113.70046234 -81.83557129]
[99.14969635 -75.07873535]
[92.75504303 -61.51007843]
[86.36038208 -47.94142532]
[79.96572113 -34.37277222]
[78.42700195 -19.45190430]
[81.91797638 -4.86378813]
[85.40895081 9.72432709]
[88.89991760 24.31244278]
[92.39089203 38.90055847]
[95.88186646 53.48867416]
[99.37284088 68.07678986]
[102.86381531 82.66490173]
[122.18420410 85.09115601]
[134.99327087 107.95882416]
[145.04112244 119.09616852]
[155.08898926 130.23350525]
[165.13685608 141.37084961]
[175.18472290 152.50819397]
[186.46231079 149.27627563]
[198.07144165 150.55819702]
[208.28108215 156.12322998]
[215.58389282 165.10498047]
[218.91877747 176.13597107]
[217.82487488 187.55592346]
[212.50489807 197.66146851]
[221.53408813 209.63952637]
[230.56326294 221.61758423]
[239.59243774 233.59564209]
[248.62162781 245.57369995]
[257.65078735 257.55175781]
[273.27426147 261.19686890]
[280.03509521 275.74578857]
[272.74694824 290.03781128]
[257.00067139 293.10937500]
[244.87545776 282.60418701]
[245.67274475 266.58093262]
[236.64355469 254.60289001]
[227.61437988 242.62483215]
[218.58520508 230.64675903]
[209.55603027 218.66870117]
[200.52684021 206.69064331]
[182.06298828 208.21356201]
[166.18798828 198.38069153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[9 16]
[10 15]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[31 68]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[55 67]
[56 66]
[57 65]
[58 64]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
