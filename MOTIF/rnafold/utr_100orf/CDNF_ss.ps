%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGGUGGCGGAGGCGAUUGAAGCUGCUGGCCCAGCAUGUGGUGCGCGAGCCCAGUUGCUGUGGUGGCCUUUUGCGCCGGGCUUUUGGUCUCUCACCCGGUGCUGACGCAGGGCCAGGAGGCCGGGGGGCGGCCAG\
) } def
/len { sequence length } bind def

/coor [
[112.93486786 116.31463623]
[102.58665466 119.80225372]
[92.36807251 117.53166199]
[81.46608734 127.83441162]
[76.75050354 142.93652344]
[62.18596649 146.05479431]
[51.28398514 156.35755920]
[40.38199997 166.66030884]
[29.48001480 176.96305847]
[18.57803154 187.26580811]
[7.67604733 197.56857300]
[12.76960087 211.92042542]
[11.57889748 227.10270691]
[4.31023407 240.48503113]
[-7.77704954 249.74880981]
[-22.58875847 253.28901672]
[-37.55867386 250.49232483]
[-50.09317017 241.84326172]
[-58.02056503 228.84033203]
[-59.96739578 213.73637390]
[-55.59635544 199.14822388]
[-45.66476059 187.60339355]
[-31.89331245 181.10206604]
[-16.66800308 180.77066040]
[-2.62670660 186.66658020]
[8.27527714 176.36383057]
[19.17726135 166.06108093]
[30.07924652 155.75831604]
[40.98123169 145.45556641]
[51.88321304 135.15281677]
[55.81901550 120.78762054]
[71.16333008 116.93243408]
[82.06531525 106.62967682]
[80.60805511 91.32236481]
[91.43630219 78.25650787]
[79.44204712 69.24884796]
[67.44779968 60.24119186]
[55.45354462 51.23353195]
[43.45929337 42.22587585]
[28.01476479 44.25178146]
[15.97920513 34.94587326]
[14.14299011 20.20939064]
[2.14873862 11.20173168]
[-9.84551334 2.19407320]
[-18.66681671 -0.49056965]
[-22.00597191 -7.15518236]
[-33.79359436 -16.43160439]
[-50.09336853 -18.23418045]
[-56.43350601 -33.35815811]
[-46.29181290 -46.24528503]
[-30.10119438 -43.63839340]
[-24.51716995 -28.21922493]
[-12.72955036 -18.94280243]
[-0.83785462 -9.80017853]
[11.15639782 -0.79251993]
[23.15065002 8.21513939]
[37.81481934 5.87041092]
[50.10701370 14.83459568]
[52.46695328 30.23162270]
[64.46120453 39.23928070]
[76.45545959 48.24694061]
[88.44970703 57.25460052]
[100.44396210 66.26226044]
[115.02355194 69.78865814]
[129.80856323 67.25816345]
[144.59358215 64.72766113]
[159.37858582 62.19716644]
[171.67568970 52.24267578]
[185.52583313 57.72199249]
[200.31083679 55.19149780]
[215.09585571 52.66099930]
[229.88085938 50.13050461]
[244.66587830 47.60000610]
[234.46771240 36.60012054]
[236.48023987 21.73574066]
[249.23622131 13.84366703]
[263.43597412 18.67757225]
[268.72726440 32.71332550]
[261.25360107 45.71745682]
[276.22964478 44.87035751]
[291.20571899 44.02325821]
[306.18179321 43.17615509]
[319.52297974 34.67185974]
[332.66690063 41.67805862]
[347.64294434 40.83095932]
[362.61901855 39.98386002]
[377.59506226 39.13675690]
[392.57113647 38.28965759]
[407.54721069 37.44255447]
[422.52325439 36.59545517]
[437.49932861 35.74835205]
[452.47537231 34.90125275]
[467.45144653 34.05414963]
[455.64450073 24.80234909]
[450.56210327 10.68961525]
[453.75942993 -3.96565747]
[464.25814819 -14.67906284]
[478.84570312 -18.17237854]
[493.05841064 -13.37667274]
[502.54730225 -1.75939906]
[504.40881348 13.12464333]
[498.07339478 26.72104645]
[485.47894287 34.86959839]
[500.31735229 37.06531525]
[515.15576172 39.26103210]
[530.19781494 32.72883606]
[543.21301270 42.70561600]
[540.81250000 58.92811584]
[525.46569824 64.70801544]
[512.96008301 54.09945679]
[498.12164307 51.90373993]
[483.28323364 49.70802307]
[468.29855347 49.03021240]
[453.32247925 49.87731171]
[438.34643555 50.72441483]
[423.37036133 51.57151413]
[408.39428711 52.41861725]
[393.41824341 53.26571655]
[378.44216919 54.11281967]
[363.46612549 54.95991898]
[348.49005127 55.80702209]
[333.51397705 56.65412140]
[321.24398804 65.09782410]
[307.02886963 58.15221786]
[292.05282593 58.99931717]
[277.07675171 59.84642029]
[262.10070801 60.69351959]
[247.19638062 62.38501740]
[232.41136169 64.91551208]
[217.62634277 67.44601440]
[202.84133911 69.97650909]
[188.05632019 72.50700378]
[176.81674194 82.28050232]
[161.90908813 76.98217773]
[147.12406921 79.51267242]
[132.33906555 82.04317474]
[117.55404663 84.57366943]
[122.15361023 95.95721436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[42 56]
[43 55]
[44 54]
[46 53]
[47 52]
[64 137]
[65 136]
[66 135]
[67 134]
[69 132]
[70 131]
[71 130]
[72 129]
[73 128]
[79 127]
[80 126]
[81 125]
[82 124]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
