%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAGGCGAGGAGGCGGUGGUGGUGACCGCAGUGGUGGCGCCCAAGGCGGGUCGCGAAGAGGAGCAGCCUCCUCCGCCAGCAGGGCUGGGGUGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[149.72389221 313.07150269]
[145.13829041 301.97549438]
[143.42456055 290.08007812]
[144.69410706 278.11700439]
[148.87461853 266.82363892]
[155.71420288 256.89758301]
[164.79650879 248.95350647]
[158.46899414 235.35340881]
[152.14146423 221.75332642]
[145.81393433 208.15322876]
[139.27566528 194.65319824]
[132.52824402 181.25646973]
[125.78082275 167.85974121]
[119.03339386 154.46301270]
[112.28597260 141.06629944]
[105.53854370 127.66956329]
[98.79111481 114.27284241]
[87.20706940 106.44331360]
[87.81215668 92.47458649]
[81.06472778 79.07785797]
[62.07989120 78.96263123]
[45.73801041 69.45585632]
[36.33290863 53.14664078]
[36.29028320 34.39915466]
[45.54261780 18.18494987]
[37.18483353 5.72913074]
[28.82704735 -6.72668886]
[20.46926308 -19.18250847]
[12.11147976 -31.63832855]
[3.75369573 -44.09414673]
[-4.79678822 -56.41848373]
[-13.53790379 -68.60835266]
[-28.87917709 -71.30706787]
[-37.57026291 -83.79385376]
[-34.90290451 -98.40277863]
[-43.64402008 -110.59265137]
[-52.38513565 -122.78251648]
[-68.01795197 -125.10429382]
[-77.36302948 -137.84968567]
[-74.87610626 -153.45707703]
[-62.03262711 -162.66688538]
[-46.45240021 -160.01509094]
[-37.37889481 -147.07495117]
[-40.19526672 -131.52363586]
[-31.45414925 -119.33376312]
[-22.71303368 -107.14389801]
[-8.02060223 -104.98332977]
[1.01778114 -92.74559021]
[-1.34803498 -77.34946442]
[7.39308071 -65.15959930]
[13.96473980 -61.49370193]
[16.20951462 -52.45193100]
[24.56729889 -39.99611282]
[32.92508316 -27.54029274]
[41.28286743 -15.08447361]
[49.64065170 -2.62865353]
[57.99843597 9.82716656]
[69.12753296 7.20893526]
[80.54515839 8.19250488]
[91.11216736 12.69662476]
[99.76900482 20.28795242]
[105.64199066 30.22270203]
[108.13143158 41.51948547]
[106.97283936 53.05625916]
[102.26493835 63.68177032]
[94.46145630 72.33043671]
[101.20888519 85.72715759]
[112.79293060 93.55668640]
[112.18784332 107.52541351]
[118.93527222 120.92214203]
[125.68269348 134.31886292]
[132.43011475 147.71559143]
[139.17755127 161.11231995]
[145.92497253 174.50904846]
[152.67239380 187.90576172]
[159.44708252 194.30078125]
[159.41403198 201.82571411]
[165.74154663 215.42579651]
[172.06907654 229.02587891]
[178.39660645 242.62597656]
[196.78831482 241.05491638]
[214.40934753 246.44551086]
[228.72515869 257.99780273]
[237.68576050 274.02731323]
[240.01936340 292.21063232]
[235.41270447 309.92230225]
[224.55299377 324.61364746]
[232.91078186 337.06948853]
[248.46382141 339.87631226]
[257.40798950 352.90615845]
[254.43688965 368.42868042]
[241.31320190 377.23458862]
[225.82298279 374.09954834]
[217.15629578 360.88348389]
[220.45495605 345.42727661]
[212.09716797 332.97143555]
[200.74642944 336.65679932]
[188.82569885 337.43432617]
[177.06874084 335.25027466]
[166.20074463 330.23327637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 80]
[8 79]
[9 78]
[10 77]
[11 75]
[12 74]
[13 73]
[14 72]
[15 71]
[16 70]
[17 69]
[19 67]
[20 66]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 50]
[32 49]
[35 46]
[36 45]
[37 44]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
