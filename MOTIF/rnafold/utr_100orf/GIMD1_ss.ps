%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAGACCCCAACAAGAUGAUCAUCAACUUGGCCCUCUUUGGCAUGACUCAGAGUGGAAAAAGUUCUGCUGGAAACAUUCUGCUGGGAAGCACAGACU\
) } def
/len { sequence length } bind def

/coor [
[82.24293518 278.20562744]
[69.96448517 269.42254639]
[60.51189041 257.65179443]
[54.58659744 243.76676941]
[52.62830734 228.79788208]
[54.78233719 213.85591125]
[60.88883972 200.04963684]
[70.49467468 188.40357971]
[82.88702393 179.78196716]
[97.14629364 174.82456970]
[96.21375275 159.85359192]
[95.28120422 144.88259888]
[94.34866333 129.91162109]
[76.30121613 123.89172363]
[63.83460617 107.13706970]
[48.87993240 108.30233002]
[33.92526245 109.46759033]
[18.97059250 110.63284302]
[5.81318760 119.41881561]
[-7.47668648 112.69359589]
[-22.43135643 113.85885620]
[-37.38602829 115.02411652]
[-52.70759201 122.28263092]
[-63.92387009 109.56919098]
[-54.81225586 95.27182007]
[-38.55128479 100.06944275]
[-23.59661484 98.90419006]
[-8.64194393 97.73892975]
[3.44580317 89.03630829]
[17.80533600 95.67817688]
[32.76000595 94.51291656]
[47.71467590 93.34765625]
[62.66934586 92.18240356]
[68.57085419 78.39210510]
[59.08880615 66.76924896]
[49.60675812 55.14639282]
[33.85984039 53.80099869]
[23.74045753 41.66124344]
[25.25226402 25.92942810]
[37.49832916 15.93896008]
[53.21327972 17.61700821]
[63.07371521 29.96801376]
[61.22961426 45.66434479]
[70.71166229 57.28720474]
[80.19371033 68.91005707]
[87.12786102 66.43835449]
[94.23825836 65.44910431]
[101.21929932 65.91122437]
[107.78516388 67.73274994]
[113.68146515 70.76752472]
[118.69514465 74.82399750]
[122.66199493 79.67572021]
[135.95216370 72.72077179]
[149.24234009 65.76581573]
[162.53250122 58.81086349]
[175.82267761 51.85591125]
[189.11285400 44.90095520]
[202.40301514 37.94600296]
[201.97729492 22.72824669]
[208.17576599 8.89112091]
[219.72009277 -0.84276003]
[234.28602600 -4.58368587]
[248.97117615 -1.64154339]
[260.87332153 7.34759092]
[274.16348267 0.39263797]
[287.45364380 -6.56231499]
[298.68383789 -19.26346779]
[313.99743652 -11.98819351]
[311.24572754 4.74095297]
[294.40859985 6.72785521]
[281.11843872 13.68280792]
[267.82827759 20.63776207]
[268.42932129 35.54092026]
[262.47564697 49.28367233]
[251.09898376 59.11892319]
[236.52076721 63.05538177]
[221.61854553 60.26057053]
[209.35797119 51.23617554]
[196.06779480 58.19112778]
[182.77763367 65.14608002]
[169.48745728 72.10103607]
[156.19729614 79.05598450]
[142.90711975 86.01094055]
[129.61694336 92.96588898]
[126.51889801 114.94625092]
[109.31964874 128.97906494]
[110.25218964 143.95005798]
[111.18473816 158.92103577]
[112.11727905 173.89202881]
[126.88153076 177.04153442]
[140.24801636 184.05863953]
[151.22485352 194.42259216]
[158.99749756 207.36433411]
[162.98915100 221.92349243]
[162.90362549 237.01969910]
[158.74725342 251.53268433]
[150.82846069 264.38552856]
[139.73489380 274.62442017]
[126.28975677 281.48962402]
[111.49076080 284.47164917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 89]
[11 88]
[12 87]
[13 86]
[15 33]
[16 32]
[17 31]
[18 30]
[20 28]
[21 27]
[22 26]
[34 45]
[35 44]
[36 43]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
