%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCCAAAUUCUUAUAUUCACAUACCUGAAUAUGUUUUACUUCUUUCCCCCUUUGCAGAUCUUGGCAGAAAACCUCACCAUGGUCACCGAAUUCCUGU\
) } def
/len { sequence length } bind def

/coor [
[-22.81526566 217.03462219]
[-36.03826523 221.64375305]
[-49.76515961 224.40388489]
[-63.73873520 225.26373291]
[-77.69721222 224.20765686]
[-91.37915039 221.25585938]
[-104.52836609 216.46409607]
[-116.89868927 209.92253113]
[-128.25862122 201.75410461]
[-138.39561462 192.11218262]
[-147.12010193 181.17770386]
[-154.26901245 169.15576172]
[-159.70880127 156.27178955]
[-163.33799744 142.76730347]
[-165.08905029 128.89537048]
[-180.08723450 128.66209412]
[-195.08541870 128.42881775]
[-210.08360291 128.19554138]
[-225.08178711 127.96226501]
[-240.07997131 127.72898865]
[-255.07815552 127.49571228]
[-270.07635498 127.26243591]
[-281.24822998 138.44117737]
[-297.05233765 138.36248779]
[-308.11233521 127.07302856]
[-307.86654663 111.27065277]
[-296.46078491 100.33061981]
[-280.66189575 100.74346924]
[-269.84307861 112.26425171]
[-254.84487915 112.49752808]
[-239.84669495 112.73080444]
[-224.84851074 112.96408081]
[-209.85032654 113.19735718]
[-194.85214233 113.43063354]
[-179.85395813 113.66390991]
[-164.85577393 113.89719391]
[-162.18049622 98.02297211]
[-157.04405212 82.76380157]
[-149.57327271 68.49880219]
[-139.95297241 55.58252335]
[-128.42143250 44.33612823]
[-115.26444244 35.03940582]
[-100.80825806 27.92381096]
[-85.41148376 23.16670227]
[-69.45621490 20.88692093]
[-53.33849716 21.14182281]
[-37.45855331 23.92583656]
[-22.21080971 29.17057610]
[-7.97411537 36.74653244]
[4.89767838 46.46626282]
[16.08451080 58.08903122]
[25.30806541 71.32675934]
[32.33870316 85.85120392]
[37.00117493 101.30204010]
[51.85447311 99.20930481]
[66.70777130 97.11657715]
[81.56107330 95.02384949]
[90.36069489 83.51242828]
[104.70851135 81.49091339]
[116.34619904 90.12285614]
[131.19949341 88.03012848]
[146.05279541 85.93739319]
[160.90609741 83.84466553]
[173.49183655 74.25769806]
[187.17410278 80.14367676]
[202.02740479 78.05094910]
[216.88069153 75.95822144]
[231.00839233 64.27680969]
[247.02484131 71.26070404]
[261.80587769 68.70704651]
[272.19091797 56.47878647]
[288.22122192 57.11793900]
[297.59973145 70.13420868]
[293.13201904 85.54262543]
[278.24536133 91.52317047]
[264.35952759 83.48808289]
[249.57849121 86.04173279]
[242.26075745 95.81255341]
[229.83728027 97.97625732]
[218.97343445 90.81151581]
[204.12013245 92.90425110]
[189.26683044 94.99697876]
[177.74349976 104.43425751]
[162.99882507 98.69795990]
[148.14552307 100.79069519]
[133.29223633 102.88342285]
[118.43892670 104.97615051]
[109.63930511 116.48757172]
[95.29148865 118.50908661]
[83.65380096 109.87714386]
[68.80049896 111.96987152]
[53.94720078 114.06260681]
[39.09390259 116.15533447]
[39.05672836 130.17329407]
[37.10606384 144.05325317]
[33.27889633 157.53529358]
[27.64734077 170.36698914]
[20.31729889 182.30816650]
[11.42645836 193.13534546]
[1.14170480 202.64604187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[54 93]
[55 92]
[56 91]
[57 90]
[60 87]
[61 86]
[62 85]
[63 84]
[65 82]
[66 81]
[67 80]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
