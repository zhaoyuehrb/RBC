%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGGACGGGGUCAGGUCCCAUCAUGGCGGCUGAAGAGGCGGAUGUGGAUAUCGAAGGGGACGUGGUAGCGGCGGCGGGGGCACAGCCAGGAAGUGGUGAAAAUACAGCAUCAGUUUUACAAA\
) } def
/len { sequence length } bind def

/coor [
[84.84593201 162.51203918]
[79.63635254 176.57832336]
[74.42677307 190.64460754]
[82.32587433 204.14047241]
[79.65101624 219.54757690]
[67.66519165 229.59118652]
[52.02772903 229.52899170]
[40.12216949 219.39036560]
[37.56995010 203.96246338]
[45.57615280 190.52986145]
[60.36049271 185.43502808]
[65.57006836 171.36874390]
[70.77964783 157.30245972]
[52.41301346 143.27677917]
[40.18887711 123.66497040]
[35.68511581 100.99849701]
[20.76207542 99.48097229]
[5.83903599 97.96344757]
[-9.08400345 96.44592285]
[-24.02507019 95.11755371]
[-38.98176193 93.97855377]
[-53.93845749 92.83956146]
[-68.89514923 91.70056152]
[-72.96348572 93.86042023]
[-77.08693695 94.47480774]
[-80.75068665 93.72889709]
[-83.56010437 91.96233368]
[-85.28225708 89.61351776]
[-100.04698181 86.96721649]
[-114.99571228 92.14853668]
[-126.15834808 82.28725433]
[-140.92306519 79.64095306]
[-156.15692139 85.71233368]
[-168.86248779 75.34407043]
[-165.96934509 59.20214081]
[-150.45373535 53.89198303]
[-138.27677917 64.87622833]
[-123.51204681 67.52252960]
[-109.61939240 62.15192795]
[-97.40068817 72.20249176]
[-82.63596344 74.84879303]
[-67.75615692 76.74386597]
[-52.79946136 77.88286591]
[-37.84276581 79.02185822]
[-22.88607216 80.16085815]
[-15.89808655 77.50125122]
[-7.56647921 81.52288055]
[7.35656071 83.04040527]
[22.27960014 84.55792999]
[37.20264053 86.07545471]
[39.64025497 77.77158356]
[43.17051697 69.87009430]
[47.72951508 62.51403046]
[53.23472977 55.83654404]
[59.58650208 49.95851135]
[66.66984558 44.98634720]
[74.35653687 41.01004791]
[82.50743866 38.10160065]
[90.97499084 36.31365585]
[99.60591888 35.67857361]
[108.24398041 36.20785141]
[116.73280334 37.89191055]
[122.29705048 23.96211815]
[127.86129761 10.03232193]
[125.79519653 -5.65339756]
[137.70164490 -14.60246849]
[143.26588440 -28.53226280]
[140.38534546 -44.67644119]
[153.09896851 -55.03479767]
[168.32809448 -48.95153809]
[170.40628052 -32.68460464]
[157.19567871 -22.96801949]
[151.63143921 -9.03822422]
[154.09552002 5.65114355]
[141.79109192 15.59656620]
[136.22685242 29.52636147]
[130.66259766 43.45615768]
[139.63494873 49.33963776]
[147.50450134 56.63268280]
[154.05229187 65.13237762]
[167.51936340 58.52646255]
[180.98641968 51.92055130]
[192.54409790 39.51665878]
[207.66271973 47.18891144]
[204.47555542 63.84058762]
[187.59233093 65.38761902]
[174.12527466 71.99353027]
[160.65820312 78.59944153]
[164.24008179 103.25788879]
[158.18193054 127.42744446]
[170.91159058 135.36190796]
[183.64125061 143.29637146]
[196.37091064 151.23081970]
[212.17510986 151.96440125]
[218.88328552 165.26289368]
[231.61294556 173.19735718]
[244.34260559 181.13180542]
[257.07226562 189.06626892]
[269.80194092 197.00073242]
[283.70095825 190.30587769]
[299.01025391 192.21084595]
[310.84469604 202.10778809]
[315.42794800 216.83860779]
[311.29754639 231.70275879]
[299.77145386 241.95715332]
[284.52758789 244.32965088]
[270.43026733 238.06318665]
[261.97784424 225.15736389]
[261.86746216 209.73039246]
[249.13781738 201.79592896]
[236.40814209 193.86148071]
[223.67848206 185.92701721]
[210.94882202 177.99255371]
[196.05514526 177.82650757]
[188.43646240 163.96049500]
[175.70678711 156.02603149]
[162.97712708 148.09156799]
[150.24746704 140.15710449]
[143.10992432 147.73820496]
[134.84271240 154.06835938]
[125.66247559 158.98167419]
[115.80977631 162.34944153]
[105.54279327 164.08337402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[16 50]
[17 49]
[18 48]
[19 47]
[20 45]
[21 44]
[22 43]
[23 42]
[28 41]
[29 40]
[31 38]
[32 37]
[62 77]
[63 76]
[64 75]
[66 73]
[67 72]
[80 88]
[81 87]
[82 86]
[90 118]
[91 117]
[92 116]
[93 115]
[95 113]
[96 112]
[97 111]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
