%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAACUGCCAAGAUGGAGCGAAGGGAACAUUUAACCUUGACUUUCCACAGUCCUGAGGUUCCCAAAAUAAAGGGGAACCGGAAAUACCAAAGGCCUACCGUCCCUGCCAAGA\
) } def
/len { sequence length } bind def

/coor [
[88.16812134 383.16152954]
[73.01820374 381.91714478]
[59.50000381 374.96539307]
[49.67494202 363.36639404]
[45.04127121 348.88891602]
[46.30559158 333.74066162]
[53.27510452 320.23159790]
[64.88700867 310.42181396]
[79.37057495 305.80718994]
[80.59851837 290.85754395]
[69.20408630 281.30218506]
[65.57824707 266.69680786]
[71.31490326 252.59204102]
[84.40823364 244.47595215]
[85.63617706 229.52629089]
[86.86412048 214.57664490]
[88.09206390 199.62698364]
[89.32000732 184.67733765]
[79.71308899 167.98919678]
[91.09109497 151.45851135]
[91.50081635 136.46411133]
[67.59987640 123.80842590]
[57.14613342 96.80729675]
[42.31512833 94.56201935]
[27.48412323 92.31673431]
[12.65311813 90.07145691]
[3.13202739 102.12319183]
[-11.14527130 107.78484344]
[-26.33825684 105.53345490]
[-38.36009216 95.97463226]
[-43.97696304 81.67965698]
[-41.67796326 66.49380493]
[-32.08150864 54.50199127]
[-17.76899529 48.92995453]
[-2.59042239 51.27654648]
[9.37125301 60.91054535]
[14.89839935 75.24044800]
[29.72940445 77.48573303]
[44.56040955 79.73101044]
[59.39141464 81.97629547]
[67.70365906 69.49003601]
[59.90990067 56.67374802]
[52.11614227 43.85745621]
[44.32238388 31.04116631]
[28.91004562 27.54324913]
[20.55608368 14.12733269]
[24.21675301 -1.24716127]
[37.72024536 -9.45881653]
[53.05517578 -5.63580322]
[61.12360382 7.95375156]
[57.13867569 23.24740601]
[64.93243408 36.06369781]
[72.72619629 48.87998962]
[80.51995087 61.69628143]
[89.16164398 58.41662216]
[98.30477142 57.06081772]
[107.52632904 57.69158936]
[116.39967346 60.27975464]
[124.51429749 64.70557404]
[133.98062134 53.06990814]
[143.44692993 41.43423843]
[152.91325378 29.79856682]
[162.37957764 18.16289902]
[171.84590149 6.52722883]
[181.31221008 -5.10844040]
[176.41085815 -19.73650551]
[180.21826172 -34.68666458]
[191.51948547 -45.18837738]
[206.70834351 -47.89058304]
[220.93814087 -41.93101501]
[229.66819763 -29.21135712]
[230.11277771 -13.79040146]
[222.13002014 -0.58891869]
[208.26719666 6.18054533]
[192.94787598 4.35787868]
[183.48156738 15.99354839]
[174.01524353 27.62921715]
[164.54891968 39.26488876]
[155.08261108 50.90055466]
[145.61628723 62.53622437]
[136.14996338 74.17189789]
[142.68458557 87.67370605]
[157.68318176 87.46882629]
[169.85682678 77.01980591]
[185.58872986 80.16410065]
[192.81072998 94.48968506]
[185.98272705 109.00718689]
[170.34257507 112.58002472]
[157.88806152 102.46742249]
[142.88946533 102.67230225]
[139.62001038 113.52962494]
[133.73466492 122.87718201]
[125.78889465 130.12257385]
[116.46087646 134.85639954]
[106.49522400 136.87384033]
[106.08550262 151.86824036]
[114.12238312 159.44868469]
[116.53485870 170.00302124]
[112.74723816 179.90882874]
[104.26966095 185.90527344]
[103.04171753 200.85493469]
[101.81377411 215.80458069]
[100.58583069 230.75424194]
[99.35788727 245.70388794]
[110.95137787 255.84771729]
[114.30958557 270.69952393]
[108.34909058 284.51748657]
[95.54817200 292.08547974]
[94.32022858 307.03512573]
[107.85667419 313.95129395]
[117.71221924 325.52438354]
[122.38396454 339.98962402]
[121.15950012 355.14117432]
[114.22555542 368.66848755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 109]
[10 108]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[20 96]
[21 95]
[23 40]
[24 39]
[25 38]
[26 37]
[41 54]
[42 53]
[43 52]
[44 51]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
