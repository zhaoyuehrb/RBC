%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAAAGAGGAAAAGAGUGCGAGGGAGUGAGGGAGGGAGGAAAAUAAACAACAAAAAAUGUCCUCUUCCUCCCCCACCGGGCAGAUCGCAAGUGCGGCGGACAUCAAGCAAGAGAAUGGGAUGGAAAGCGCCUCGGAAGGGCAGGAGGCGCACCGAG\
) } def
/len { sequence length } bind def

/coor [
[132.47636414 175.46737671]
[128.55632019 189.94609070]
[121.28941345 203.06829834]
[111.09685516 214.07336426]
[98.56942749 222.32344055]
[84.43326569 227.34030151]
[69.50773621 228.83316040]
[54.65797424 226.71549988]
[40.74470901 221.11004639]
[28.57439423 212.34173584]
[18.85245895 200.91877747]
[12.14241409 187.50328064]
[8.83319473 172.87286377]
[9.11661148 157.87554932]
[12.97623730 143.38059998]
[20.18835640 130.22822571]
[30.33493423 119.18073273]
[42.82784271 110.87849426]
[56.94296265 105.80271912]
[71.86298370 104.24764252]
[58.54470444 97.34666443]
[42.73207474 97.86752319]
[34.99137878 85.14231110]
[21.67309952 78.24134064]
[6.77595949 82.79248810]
[-6.63236141 75.60419464]
[-10.87938213 61.37400055]
[-24.19766045 54.47302628]
[-22.50635910 69.37737274]
[-32.96192169 80.13288879]
[-47.90813065 78.86371613]
[-56.40043640 66.49921417]
[-52.22023010 52.09345627]
[-38.42810059 46.19525528]
[-51.01081467 38.02976227]
[-63.59352875 29.86426735]
[-76.17624664 21.69877434]
[-88.75895691 13.53327942]
[-101.34167480 5.36778593]
[-114.08131409 -2.55064249]
[-126.97303772 -10.21899033]
[-139.86476135 -17.88733864]
[-152.75646973 -25.55568695]
[-165.64819336 -33.22403717]
[-176.85115051 -23.07587624]
[-190.54832458 -16.68220901]
[-205.52175903 -14.61155510]
[-220.44003296 -17.04803467]
[-233.97662354 -23.77499962]
[-244.92787170 -34.19429016]
[-252.31999207 -47.37943268]
[-255.49568176 -62.15801239]
[-254.17257690 -77.21592712]
[-248.46830750 -91.21423340]
[-238.89009094 -102.90821838]
[-226.28962708 -111.25806427]
[-211.78735352 -115.52129364]
[-196.67277527 -115.31884003]
[-182.28988647 -110.66868591]
[-169.91758728 -101.98434448]
[-160.65603638 -90.03799438]
[-155.32876587 -75.89192200]
[-154.40945435 -60.80397034]
[-157.97984314 -46.11575317]
[-145.08813477 -38.44740677]
[-132.19641113 -30.77905846]
[-119.30468750 -23.11071014]
[-106.41297150 -15.44236183]
[-101.60055542 -15.74476242]
[-96.55583954 -12.99226570]
[-93.17617798 -7.21492910]
[-80.59346771 0.95056498]
[-68.01074982 9.11605835]
[-55.42803574 17.28155327]
[-42.84532166 25.44704628]
[-30.26260567 33.61254120]
[-17.29668617 41.15474701]
[-3.97840691 48.05572128]
[10.09640598 43.31913757]
[23.70134163 50.12798691]
[28.57407570 64.92305756]
[41.89235306 71.82403564]
[56.75237274 70.80957031]
[65.44567871 84.02838135]
[78.76395416 90.92935944]
[73.30632019 76.95745087]
[83.43081665 65.88971710]
[97.83233643 70.08448792]
[100.42959595 84.85893250]
[108.22335815 72.04264069]
[116.01711273 59.22635269]
[123.81087494 46.41006088]
[123.64302063 30.01177216]
[137.89619446 21.90133095]
[151.90794373 30.42206573]
[151.26419067 46.80857086]
[136.62716675 54.20381927]
[128.83340454 67.02011108]
[121.03964996 79.83640289]
[113.24588776 92.65269470]
[118.26908112 106.78660583]
[132.40299988 111.80979919]
[146.53691101 116.83299255]
[162.94531250 103.10832977]
[189.03556824 109.82665253]
[203.72183228 106.77481079]
[218.40809631 103.72296906]
[233.09434509 100.67112732]
[238.56047058 91.19390106]
[248.15599060 86.41351318]
[258.57647705 87.70459747]
[266.38061523 94.39582825]
[281.17477417 91.91931152]
[290.14645386 78.90837860]
[305.70541382 76.13442230]
[318.62075806 85.24317169]
[321.23007202 100.83057404]
[311.98526001 113.64889526]
[296.37115479 116.09326172]
[283.65127563 106.71346283]
[268.85714722 109.18997955]
[254.93572998 122.56701660]
[236.14619446 115.35739136]
[221.45993042 118.40923309]
[206.77366638 121.46107483]
[192.08740234 124.51290894]
[189.71417236 131.62753296]
[203.94334412 136.37420654]
[199.19644165 150.60330200]
[184.96771240 145.85676575]
[182.59448242 152.97137451]
[192.50756836 164.22885132]
[202.42066956 175.48632812]
[212.33375549 186.74378967]
[222.24684143 198.00126648]
[232.15992737 209.25872803]
[242.07302856 220.51620483]
[257.11465454 217.41059875]
[271.68884277 222.25711060]
[281.87518311 233.75205994]
[284.93365479 248.80335999]
[280.04147339 263.36227417]
[268.51464844 273.51254272]
[253.45384216 276.52380371]
[238.91032410 271.58602905]
[228.79623413 260.02743530]
[225.83219910 244.95726013]
[230.81555176 230.42929077]
[220.90246582 219.17182922]
[210.98937988 207.91435242]
[201.07627869 196.65687561]
[191.16319275 185.39941406]
[181.25010681 174.14193726]
[171.33702087 162.88447571]
[146.00627136 152.28555298]
[141.51371765 130.96690369]
[127.37979889 125.94371796]
[113.24588776 120.92051697]
[122.92009735 132.38392639]
[129.57414246 145.82727051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 85]
[21 84]
[23 82]
[24 81]
[27 78]
[28 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[89 100]
[90 99]
[91 98]
[92 97]
[101 158]
[102 157]
[103 156]
[105 126]
[106 125]
[107 124]
[108 123]
[112 121]
[113 120]
[131 154]
[132 153]
[133 152]
[134 151]
[135 150]
[136 149]
[137 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
