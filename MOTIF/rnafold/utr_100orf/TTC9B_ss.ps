%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCAGGAGUUUCCCACAAUGCAGCGCGGCGCGCUGUCCCCGGUGCUGAUGCUCAGCGCUGCCCCGGAGCCUCCGCCGCGCCCGCCUCCCGCCCUCUCCCCACCGGGCUCGGGCCCAG\
) } def
/len { sequence length } bind def

/coor [
[197.63186646 165.81013489]
[184.57598877 158.42474365]
[171.52011108 151.03933716]
[158.46423340 143.65394592]
[150.99949646 143.09236145]
[145.16491699 135.89735413]
[132.30854797 128.16990662]
[119.45216370 120.44244385]
[106.59578705 112.71498871]
[92.62081909 112.27693176]
[85.67675018 100.14138794]
[72.82037354 92.41393280]
[59.96400070 84.68647003]
[47.10762405 76.95901489]
[37.30837631 83.30916595]
[25.88649368 85.47348785]
[14.54484844 83.16912079]
[4.95932913 76.77649689]
[-1.46878982 67.27717590]
[-3.81764984 56.10327530]
[-1.77684999 44.92163086]
[-13.98155212 36.20123672]
[-26.18625450 27.48084450]
[-38.39095688 18.76045227]
[-50.59565735 10.04006004]
[-62.80036163 1.31966770]
[-75.00506592 -7.40072441]
[-87.43570709 -15.79591179]
[-100.08361816 -23.86004448]
[-112.73153687 -31.92417717]
[-125.78741455 -39.30957413]
[-139.21485901 -45.99564743]
[-152.64231873 -52.68172455]
[-166.06976318 -59.36779785]
[-179.49720764 -66.05387115]
[-192.92465210 -72.73995209]
[-209.25048828 -71.19089508]
[-218.53311157 -84.70994568]
[-211.22338867 -99.38985443]
[-194.84091187 -100.12920380]
[-186.23858643 -86.16739655]
[-172.81114197 -79.48132324]
[-159.38368225 -72.79524994]
[-145.95623779 -66.10916901]
[-132.52879333 -59.42309570]
[-119.10134125 -52.73702240]
[-116.30922699 -53.60457993]
[-112.98544312 -53.34636688]
[-109.58504486 -51.74618149]
[-106.63531494 -48.76715088]
[-104.66740417 -44.57209396]
[-92.01948547 -36.50796127]
[-79.37157440 -28.44382858]
[-74.48365784 -28.61864090]
[-69.45919037 -25.63711739]
[-66.28466797 -19.60542679]
[-54.07996750 -10.88503456]
[-41.87526703 -2.16464233]
[-29.67056465 6.55574989]
[-17.46586227 15.27614212]
[-5.26115990 23.99653435]
[6.94354248 32.71692657]
[24.14297104 25.73975945]
[42.25329590 30.43230057]
[54.08567810 45.11374283]
[54.83507919 64.10263824]
[67.69145966 71.83010101]
[80.54783630 79.55755615]
[93.40421295 87.28501129]
[107.37918091 87.72306824]
[114.32324982 99.85861206]
[127.17962646 107.58606720]
[140.03599548 115.31352997]
[152.89237976 123.04098511]
[165.84962463 130.59806824]
[178.90550232 137.98345947]
[191.96138000 145.36886597]
[205.01725769 152.75425720]
[227.25717163 150.62503052]
[238.08752441 169.30895996]
[251.84912109 175.27708435]
[265.61071777 181.24519348]
[279.37231445 187.21331787]
[293.13391113 193.18144226]
[305.08126831 186.80137634]
[318.32369995 188.48338318]
[328.00888062 197.38340759]
[330.71990967 210.05471802]
[344.31915283 216.38403320]
[357.91842651 222.71333313]
[371.51766968 229.04263306]
[383.29150391 219.32975769]
[398.11566162 215.69555664]
[413.04678345 218.86161804]
[425.12033081 228.19931030]
[431.93905640 241.85462952]
[432.14910889 257.11630249]
[425.70877075 270.95410156]
[413.89678955 280.62054443]
[399.05844116 284.19635010]
[384.13989258 280.97149658]
[372.10324097 271.58633423]
[365.33831787 257.90426636]
[365.18838501 242.64189148]
[351.58911133 236.31259155]
[337.98986816 229.98329163]
[324.39059448 223.65399170]
[308.91891479 230.10014343]
[293.23956299 223.28376770]
[287.16580200 206.94303894]
[273.40420532 200.97491455]
[259.64260864 195.00679016]
[245.88101196 189.03868103]
[232.11941528 183.07055664]
[225.34495544 187.60816956]
[217.22178650 189.04151917]
[209.11906433 187.05123901]
[202.43397522 181.90168762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[6 74]
[7 73]
[8 72]
[9 71]
[11 69]
[12 68]
[13 67]
[14 66]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 53]
[29 52]
[30 51]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[80 114]
[81 113]
[82 112]
[83 111]
[84 110]
[88 107]
[89 106]
[90 105]
[91 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
