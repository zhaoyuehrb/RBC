%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCACUGUUGCUCCCCUUGCUGUCAGCCUACCUGCUGCAGGACCACCUGCUGGAAGCCCACCACUGUGACCACCUGCAGCAGCACACCCUGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-61.13533783 345.38928223]
[-62.94659805 352.97125244]
[-66.13444519 360.07675171]
[-70.58491516 366.45858765]
[-76.14019012 371.89529419]
[-82.60416412 376.19882202]
[-89.74935150 379.22106934]
[-97.32494354 380.85891724]
[-105.06555939 381.05783081]
[-112.70057678 379.81365967]
[-119.96358490 377.17263794]
[-126.60166168 373.22961426]
[-132.38420105 368.12487793]
[-137.11094666 362.03884888]
[-150.99134827 367.72518921]
[-155.57894897 382.67468262]
[-168.73065186 391.13439941]
[-184.23663330 389.10989380]
[-194.77543640 377.55706787]
[-195.37095642 361.93081665]
[-185.74201965 349.60940552]
[-170.43510437 346.41058350]
[-156.67767334 353.84478760]
[-142.79727173 348.15844727]
[-140.76396179 324.09924316]
[-125.55986786 305.21520996]
[-102.29971313 298.03567505]
[-78.90764618 305.12240601]
[-68.38384247 294.43365479]
[-57.86003876 283.74487305]
[-47.33623505 273.05612183]
[-53.41939163 255.40672302]
[-49.89895630 236.99269104]
[-37.63103104 222.71177673]
[-19.80896378 216.40228271]
[-1.13241029 219.81164551]
[7.98358011 207.89952087]
[17.09957123 195.98739624]
[26.21556091 184.07527161]
[35.33155060 172.16314697]
[44.44754410 160.25102234]
[53.56353378 148.33889771]
[62.67952347 136.42677307]
[71.79551697 124.51465607]
[80.91150665 112.60253143]
[77.67898560 95.00334167]
[88.10631561 80.46196747]
[105.81225586 77.87734222]
[114.17004395 65.42152405]
[122.52782440 52.96570206]
[123.26213074 34.64882660]
[139.15425110 27.38645554]
[147.12062073 14.67673492]
[147.89382935 -1.12556565]
[161.20910645 -7.80035877]
[169.17547607 -20.51007843]
[177.14184570 -33.21979904]
[177.19577026 -49.61885834]
[191.55731201 -57.53580475]
[205.45254517 -48.82636261]
[204.58724976 -32.45006180]
[189.85156250 -25.25343323]
[181.88519287 -12.54371262]
[173.91882324 0.16600826]
[173.71540833 15.05922413]
[159.83033752 22.64310265]
[151.86396790 35.35282135]
[154.25341797 47.32397461]
[147.57060242 58.01810837]
[134.98364258 61.32348633]
[126.62586212 73.77930450]
[118.26807404 86.23512268]
[122.65409088 96.83985901]
[121.33766174 108.24005890]
[114.65014648 117.56609344]
[104.27492523 122.47041321]
[92.82363129 121.71852112]
[83.70764160 133.63064575]
[74.59165192 145.54277039]
[65.47565460 157.45489502]
[56.35966873 169.36701965]
[47.24367523 181.27914429]
[38.12768555 193.19126892]
[29.01169586 205.10339355]
[19.89570427 217.01551819]
[10.77971458 228.92764282]
[16.84294891 238.87403870]
[19.49756241 250.18858337]
[18.49541092 261.73999023]
[13.95310688 272.37869263]
[6.33873510 281.05120850]
[-3.57633734 286.90447998]
[-14.79557705 289.36968994]
[-26.19743729 288.21768188]
[-36.64747620 283.57992554]
[-47.17127991 294.26867676]
[-57.69507980 304.95745850]
[-68.21888733 315.64620972]
[-64.36869812 322.45855713]
[-61.85623169 329.86145020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 24]
[15 23]
[28 98]
[29 97]
[30 96]
[31 95]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[48 72]
[49 71]
[50 70]
[52 67]
[53 66]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
