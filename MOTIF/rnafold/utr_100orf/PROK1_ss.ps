%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGAGAGGCAUCUAAGCAGGCAGUGUUUUGCCUUCACCCCAAGUGACCAUGAGAGGUGCCACGCGAGUCUCAAUCAUGCUCCUCCUAGUAACUGUGUCUGACUGUGCUGUGAUCACAGGGGCCUGUGAGCGGGAUGUCCAGUGUGGGG\
) } def
/len { sequence length } bind def

/coor [
[91.23884583 127.38651276]
[79.21024323 121.13440704]
[71.07103729 109.78172302]
[68.88405609 95.56753540]
[53.96408081 97.11490631]
[39.04410553 98.66227722]
[32.63508606 107.54870605]
[22.58673286 111.32947540]
[12.33902740 108.97047424]
[5.25843811 101.49655151]
[-9.71273613 102.42603302]
[-24.68391037 103.35551453]
[-39.65508652 104.28499603]
[-54.62625885 105.21447754]
[-69.59743500 106.14395905]
[-84.56861115 107.07343292]
[-90.65984344 125.54966736]
[-104.99465942 139.39071655]
[-124.57902527 145.09588623]
[-145.02980042 140.93136597]
[-161.55517578 127.42520905]
[-175.41337585 133.16545105]
[-189.27156067 138.90571594]
[-203.12976074 144.64596558]
[-216.98794556 150.38621521]
[-230.84614563 156.12646484]
[-240.39460754 169.45909119]
[-256.68655396 167.58712769]
[-262.96224976 152.43629456]
[-252.76576233 139.59246826]
[-236.58639526 142.26826477]
[-222.72819519 136.52801514]
[-208.87001038 130.78776550]
[-195.01181030 125.04751587]
[-181.15362549 119.30726624]
[-167.29542542 113.56701660]
[-168.68853760 98.63184357]
[-183.36929321 95.55361176]
[-198.05003357 92.47538757]
[-212.73078918 89.39715576]
[-226.89389038 96.93282318]
[-241.55821228 90.42611694]
[-245.47454834 74.86841583]
[-235.63861084 62.19426727]
[-219.59570312 62.12619019]
[-209.65255737 74.71640015]
[-194.97181702 77.79463196]
[-180.29106140 80.87286377]
[-165.61030579 83.95109558]
[-157.67185974 72.64228821]
[-146.81004333 64.41378784]
[-134.13325500 59.95975494]
[-120.89197540 59.59660339]
[-108.35549927 63.24311066]
[-97.69031525 70.43918610]
[-89.85161591 80.40043640]
[-85.49809265 92.10226440]
[-70.52691650 91.17278290]
[-55.55574036 90.24330139]
[-40.58456421 89.31381989]
[-25.61339188 88.38433838]
[-10.64221668 87.45485687]
[4.32895756 86.52537537]
[19.54801369 74.65760803]
[37.49673843 83.74230194]
[52.41670990 82.19493103]
[67.33668518 80.64756012]
[77.38132477 69.50730133]
[77.38132477 54.50730515]
[77.38132477 39.50730515]
[77.38132477 24.50730515]
[64.34769440 16.25333214]
[57.86627197 2.25352144]
[60.00525284 -13.02483940]
[70.08209991 -24.70648003]
[84.88132477 -29.06383133]
[99.68054962 -24.70648003]
[109.75739288 -13.02483940]
[111.89637756 2.25352144]
[105.41495514 16.25333214]
[92.38132477 24.50730515]
[92.38132477 39.50730515]
[92.38132477 54.50730515]
[92.38132477 69.50730133]
[109.46999359 71.90736389]
[121.73986816 82.57442474]
[125.93190765 97.24849701]
[140.67314148 100.02265930]
[155.41436768 102.79682922]
[170.15560913 105.57099915]
[178.83381653 98.88272858]
[189.54321289 98.12628937]
[198.69178772 103.31126404]
[203.34544373 112.49482727]
[217.95944214 115.87580109]
[232.57344055 119.25678253]
[247.18743896 122.63775635]
[241.91929626 108.59330750]
[249.43232727 95.61045837]
[264.23416138 93.18026733]
[275.50396729 103.07931519]
[275.00302124 118.07095337]
[263.09683228 127.19574738]
[277.28408813 132.06623840]
[291.47134399 136.93673706]
[300.66891479 136.76878357]
[305.89968872 142.05726624]
[319.98324585 147.21992493]
[335.60330200 144.70504761]
[344.88998413 156.35006714]
[358.97357178 161.51272583]
[373.05712891 166.67538452]
[387.14071655 171.83804321]
[393.81051636 171.07095337]
[399.05111694 173.46792603]
[401.69216919 177.51603699]
[415.55035400 183.25628662]
[429.40853882 188.99653625]
[443.26675415 194.73678589]
[457.12493896 200.47705078]
[470.98312378 206.21730042]
[487.16250610 203.54148865]
[497.35897827 216.38531494]
[491.08328247 231.53614807]
[474.79135132 233.40811157]
[465.24288940 220.07548523]
[451.38467407 214.33523560]
[437.52648926 208.59498596]
[423.66830444 202.85473633]
[409.81011963 197.11448669]
[395.95190430 191.37423706]
[381.97805786 185.92161560]
[367.89447021 180.75895691]
[353.81091309 175.59629822]
[339.72732544 170.43363953]
[325.11462402 173.31777954]
[314.82058716 161.30349731]
[300.73703003 156.14083862]
[286.60086060 151.12399292]
[272.41360474 146.25349426]
[258.22634888 141.38301086]
[243.80645752 137.25175476]
[229.19245911 133.87077332]
[214.57846069 130.48980713]
[199.96446228 127.10882568]
[181.99179077 134.14067078]
[167.38143921 120.31223297]
[152.64021301 117.53806305]
[137.89897156 114.76390076]
[123.15773773 111.98973083]
[115.79070282 121.86346436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[37 49]
[38 48]
[39 47]
[40 46]
[68 84]
[69 83]
[70 82]
[71 81]
[87 150]
[88 149]
[89 148]
[90 147]
[94 145]
[95 144]
[96 143]
[97 142]
[103 141]
[104 140]
[105 139]
[107 138]
[108 137]
[110 135]
[111 134]
[112 133]
[113 132]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
