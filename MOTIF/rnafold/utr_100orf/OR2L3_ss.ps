%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAUUACAAUCAAACAUCAACUGAUUUCAUCUUAUUAGGAUUCUUCCCACCAUCAAGAAUUGGCCUUUUCCUCUUCAUCCUCAUUGUUUUCAUUU\
) } def
/len { sequence length } bind def

/coor [
[146.53498840 213.80184937]
[153.13369751 200.26409912]
[162.48872375 188.46165466]
[153.00668335 176.83879089]
[143.52462769 165.21594238]
[134.04258728 153.59307861]
[124.56053925 141.97023010]
[115.07849121 130.34736633]
[101.78469849 135.12008667]
[87.17579651 134.11299133]
[73.74149323 127.08258057]
[63.93496704 114.84513092]
[59.72865677 99.19940186]
[45.03419495 102.21150208]
[30.33973312 105.22360992]
[15.64527130 108.23571777]
[0.95080900 111.24782562]
[-4.51779175 125.67342377]
[-16.93092346 134.83409119]
[-32.32759857 135.80667114]
[-45.79479599 128.28083801]
[-53.03517914 114.65805817]
[-51.73837280 99.28529358]
[-42.31818008 87.06794739]
[-27.78055000 81.90453339]
[-12.76438808 85.44267273]
[-2.06129718 96.55335999]
[12.63316536 93.54125214]
[27.32762718 90.52915192]
[42.02209091 87.51704407]
[56.71655273 84.50493622]
[42.37686539 80.10340881]
[27.57380104 82.52606201]
[13.50508118 77.32307434]
[3.84043598 65.85160065]
[1.10082233 51.10390472]
[6.00084972 36.92681885]
[17.26237869 27.01834297]
[31.94791794 23.96302986]
[46.22684479 28.55783844]
[56.37459564 39.60424423]
[59.74422073 54.22039795]
[69.25322723 65.82120514]
[66.47000885 51.08167648]
[63.68679428 36.34214783]
[52.59000397 24.26766014]
[57.75593185 8.70343113]
[73.87030792 5.66060591]
[84.35605621 18.26938248]
[78.42632294 33.55893326]
[81.20954132 48.29846191]
[83.99275970 63.03799057]
[95.48060608 62.12014008]
[106.13594055 64.50878906]
[115.07849121 69.65263367]
[124.56053925 58.02977753]
[134.04258728 46.40692139]
[129.95083618 31.43904877]
[135.46990967 16.93665504]
[148.47761536 8.47620678]
[163.97222900 9.31091976]
[175.99574280 19.11982727]
[179.92488098 34.13120651]
[174.24880981 48.57287598]
[161.15008545 56.89171600]
[145.66543579 55.88896561]
[136.18339539 67.51182556]
[126.70134735 79.13468170]
[133.06196594 92.56831360]
[133.06196594 107.43168640]
[126.70134735 120.86531830]
[136.18339539 132.48817444]
[145.66543579 144.11103821]
[155.14749146 155.73388672]
[164.62953186 167.35675049]
[174.11157227 178.97959900]
[187.55216980 172.18515015]
[202.13925171 168.43931580]
[217.19055176 167.91731262]
[232.00209045 170.64353943]
[245.88111877 176.49047852]
[258.17846680 185.18467712]
[268.31900024 196.31947327]
[275.82839966 209.37409973]
[280.35543823 223.73793030]
[281.68838501 238.73918152]
[279.76489258 253.67619324]
[274.67495728 267.85034180]
[266.65658569 280.59866333]
[256.08483887 291.32492065]
[243.45419312 299.52740479]
[229.35539246 304.82247925]
[214.44786072 306.96249390]
[199.42886353 305.84735107]
[185.00085449 301.52920532]
[171.83865356 294.20999146]
[160.55787659 284.23211670]
[151.68617249 272.06219482]
[145.63847351 258.26947021]
[142.69763184 243.49903870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[43 52]
[44 51]
[45 50]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
