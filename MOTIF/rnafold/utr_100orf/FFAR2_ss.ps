%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCCGGACUGGAAGAGCUCCUUGAUCCUCAUGGCUUACAUCAUCAUCUUCCUCACUGGCCUCCCUGCCAACCUCCUGGCCCUGCGGGCCUUUGUGG\
) } def
/len { sequence length } bind def

/coor [
[205.77253723 219.21644592]
[188.09259033 214.36880493]
[173.47000122 203.25947571]
[164.02796936 187.47195435]
[161.14849854 169.27119446]
[165.27012634 151.27853394]
[152.68583679 143.11547852]
[140.10153198 134.95240784]
[127.51724243 126.78935242]
[114.93295288 118.62628937]
[101.19727325 123.84320068]
[87.00807953 120.02852631]
[77.74011230 108.62722015]
[76.90398407 93.95800781]
[64.31969452 85.79494476]
[51.73540115 77.63188171]
[39.15110779 69.46881866]
[26.56681633 61.30575562]
[13.98252392 53.14269257]
[3.89421916 59.19343948]
[-7.68540382 60.94800568]
[-19.01244926 58.18207932]
[-28.39620590 51.34914780]
[-34.45149612 41.50667953]
[-36.30310440 30.15262032]
[-33.71207809 18.99747086]
[-45.48099136 9.69732666]
[-57.24990463 0.39718392]
[-69.01882172 -8.90295887]
[-81.47463989 -17.26074409]
[-94.54208374 -24.62565422]
[-110.92581177 -23.91466331]
[-119.50396729 -37.89133072]
[-111.45208740 -52.17765808]
[-95.05324554 -52.07709885]
[-87.17716980 -37.69309998]
[-74.10972595 -30.32818794]
[-71.73147583 -31.11568069]
[-68.90733337 -31.05600166]
[-65.93792725 -29.98394966]
[-63.17494583 -27.83821297]
[-60.98642349 -24.67523766]
[-59.71867752 -20.67187309]
[-47.94976044 -11.37172985]
[-36.18084717 -2.07158685]
[-24.41193390 7.22855616]
[-6.96028090 1.07072246]
[10.87902451 6.51927519]
[22.08686829 21.61242485]
[22.14558601 40.55839920]
[34.72987747 48.72146225]
[47.31417084 56.88452530]
[59.89846420 65.04758453]
[72.48275757 73.21064758]
[85.06704712 81.37371063]
[98.80272675 76.15679932]
[112.99192047 79.97147369]
[122.25988770 91.37277985]
[123.09601593 106.04199219]
[135.68031311 114.20505524]
[148.26460266 122.36811829]
[160.84889221 130.53118896]
[173.43318176 138.69424438]
[182.56669617 130.80908203]
[193.34989929 125.42122650]
[205.11605835 122.85719299]
[217.13925171 123.26910400]
[228.67924500 126.62567139]
[239.02696228 132.71447754]
[247.54812622 141.15545654]
[253.72213745 151.42451477]
[257.17379761 162.88618469]
[257.69622803 174.83285522]
[255.26316833 186.52851868]
[250.03025818 197.25408936]
[261.19821167 207.26791382]
[276.77001953 201.96452332]
[292.81005859 205.16830444]
[305.00985718 215.92327881]
[310.14031982 231.25811768]
[306.90628052 247.00651550]
[318.38027954 256.66818237]
[329.85424805 266.32983398]
[341.32824707 275.99148560]
[352.80221558 285.65313721]
[368.81262207 291.23025513]
[367.88555908 308.15884399]
[351.36193848 311.95431519]
[343.14056396 297.12713623]
[331.66659546 287.46548462]
[320.19259644 277.80380249]
[308.71859741 268.14215088]
[297.24462891 258.48049927]
[284.64416504 263.98757935]
[270.83535767 263.48797607]
[258.54809570 257.02276611]
[250.23646545 245.81813049]
[247.58868408 232.05305481]
[251.18440247 218.43586731]
[240.01643372 208.42205811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[26 46]
[27 45]
[28 44]
[29 43]
[30 37]
[31 36]
[75 100]
[76 99]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
