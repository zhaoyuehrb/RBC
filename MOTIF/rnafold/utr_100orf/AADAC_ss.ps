%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACACUGCUUAUUAAAGUACACUAUUCAGGCAUAUCAUGUAGGUUUACUUUCUGUGUUUCUAGAGACCAAGAAGCGGGACGUUCACCAUGGGAAGAAAAUCGCUGUACCUUCUGAUUGUGGGGAUCCUCAUAGCAUAUUAUAUUUAUACGCCUCUCCCAGAUAACGUUGAGGAGCCAUGGAGAAUGA\
) } def
/len { sequence length } bind def

/coor [
[-77.45946503 170.22764587]
[-80.88312531 184.83171082]
[-84.30678558 199.43576050]
[-87.73045349 214.03982544]
[-91.15411377 228.64387512]
[-88.88256073 245.44496155]
[-104.39822388 252.27874756]
[-115.26010132 239.26121521]
[-105.75817108 225.22021484]
[-102.33451080 210.61616516]
[-98.91085052 196.01210022]
[-95.48718262 181.40805054]
[-92.06352234 166.80398560]
[-97.80445099 161.97782898]
[-107.45694733 173.45951843]
[-118.93848419 163.80682373]
[-109.28630066 152.32551575]
[-115.02722931 147.49935913]
[-128.82568359 153.38177490]
[-142.62413025 159.26417542]
[-156.42257690 165.14659119]
[-170.22103882 171.02900696]
[-176.44331360 187.36967468]
[-192.24417114 194.03125000]
[-207.66769409 187.34576416]
[-221.36752319 193.45433044]
[-235.06736755 199.56289673]
[-248.76719666 205.67144775]
[-248.71664429 220.90028381]
[-254.87052917 234.83045959]
[-266.16265869 245.04847717]
[-280.63659668 249.78401184]
[-295.78460693 248.21659851]
[-308.98229980 240.61781311]
[-317.94299316 228.30418396]
[-321.11425781 213.40911865]
[-317.94662476 198.51327515]
[-308.98892212 186.19746399]
[-295.79312134 178.59544373]
[-280.64544678 177.02435303]
[-266.17037964 181.75634766]
[-254.87576294 191.97161865]
[-241.17591858 185.86305237]
[-227.47608948 179.75450134]
[-213.77626038 173.64593506]
[-210.88948059 161.07807922]
[-201.14213562 152.34120178]
[-187.94776917 150.79617310]
[-176.10343933 157.23054504]
[-162.30499268 151.34814453]
[-148.50654602 145.46572876]
[-134.70808411 139.58332825]
[-120.90963745 133.70091248]
[-118.94155121 118.83058929]
[-130.73466492 109.56114197]
[-142.52777100 100.29169464]
[-151.22457886 97.44178772]
[-154.43695068 90.77152252]
[-166.07600403 81.30936432]
[-177.71505737 71.84720612]
[-189.35411072 62.38504791]
[-200.99316406 52.92288971]
[-212.63221741 43.46073151]
[-224.27127075 33.99857330]
[-239.23213196 38.11591339]
[-253.74394226 32.62163925]
[-262.22662354 19.62841988]
[-261.41839600 4.13240671]
[-251.63006592 -7.90786457]
[-236.62542725 -11.86266422]
[-222.17407227 -6.21129131]
[-213.83283997 6.87318611]
[-214.80911255 22.35951996]
[-203.17005920 31.82167816]
[-191.53100586 41.28383636]
[-179.89195251 50.74599457]
[-168.25289917 60.20815277]
[-156.61384583 69.67031097]
[-144.97479248 79.13246918]
[-133.25831604 88.49858856]
[-121.46520996 97.76803589]
[-109.67210388 107.03747559]
[-95.01371002 110.22048187]
[-80.43830109 106.67682648]
[-65.86289215 103.13317871]
[-51.28748322 99.58953094]
[-36.71207428 96.04588318]
[-26.17294693 85.52085876]
[-10.93551826 89.77895355]
[3.63989091 86.23529816]
[18.21529961 82.69165039]
[32.79071045 79.14800262]
[47.36611938 75.60435486]
[61.94152832 72.06070709]
[72.93331146 61.85380936]
[77.54508972 47.58035660]
[82.15687561 33.30690384]
[86.76866150 19.03345108]
[75.40648651 8.89339161]
[69.15686798 -4.99409342]
[69.10260773 -20.22291374]
[75.25308990 -34.15458298]
[86.54271698 -44.37535477]
[101.01549530 -49.11442184]
[116.16391754 -47.55070877]
[129.36343384 -39.95513916]
[138.32714844 -27.64369392]
[141.50204468 -12.74940205]
[138.33804321 2.14720964]
[129.38334656 14.46521187]
[116.18938446 22.07043839]
[101.04211426 23.64523506]
[96.43032837 37.91868591]
[91.81854248 52.19213867]
[87.20676422 66.46559143]
[93.02629089 71.19667053]
[102.48862457 59.55776215]
[114.12738800 69.02027893]
[104.66534424 80.65882874]
[110.48487091 85.38990784]
[123.51617432 77.96124268]
[136.54748535 70.53257751]
[149.57878113 63.10391235]
[162.61009216 55.67524719]
[175.64140320 48.24658203]
[183.44709778 33.82427216]
[199.84526062 33.64359665]
[207.96684265 47.89041901]
[199.45706177 61.90882874]
[183.07006836 61.27788925]
[170.03875732 68.70655060]
[157.00744629 76.13521576]
[143.97615051 83.56388092]
[130.94483948 90.99254608]
[117.91353607 98.42121124]
[121.33719635 113.02527618]
[136.31234741 113.88832092]
[150.53483582 106.95785522]
[162.79583740 115.41462708]
[177.77099609 116.27767181]
[192.74613953 117.14072418]
[203.33798218 105.63650513]
[218.85310364 103.68333435]
[231.96575928 112.20344543]
[236.48454285 127.17390442]
[230.27583313 141.52610779]
[216.27117920 148.48339844]
[201.08316040 144.76074219]
[191.88310242 132.11587524]
[176.90794373 131.25282288]
[161.93280029 130.38977051]
[148.78143311 137.38197327]
[135.44929504 128.86347961]
[120.47414398 128.00042725]
[117.41986084 134.85034180]
[111.31130219 148.55017090]
[108.25701904 155.40010071]
[118.90715027 165.96299744]
[129.55728149 176.52589417]
[140.20739746 187.08879089]
[150.94403076 197.56373596]
[161.76644897 207.95004272]
[172.58886719 218.33634949]
[188.38267517 217.76089478]
[199.90045166 228.58293152]
[200.30889893 244.38194275]
[189.36567688 255.78465271]
[173.56323242 256.02603149]
[162.27687073 244.96287537]
[162.20257568 229.15876770]
[151.38015747 218.77246094]
[140.55773926 208.38615417]
[133.54287720 206.01896667]
[129.64450073 197.73890686]
[118.99437714 187.17601013]
[108.34425354 176.61311340]
[97.69412231 166.05021667]
[65.48517609 86.63611603]
[50.90976715 90.17976379]
[36.33435822 93.72341156]
[21.75894928 97.26705933]
[7.18353987 100.81070709]
[-7.39186907 104.35436249]
[-18.97352791 115.13284302]
[-33.16842651 110.62129211]
[-47.74383545 114.16493988]
[-62.31924438 117.70858765]
[-76.89465332 121.25223541]
[-91.47006226 124.79589081]
[-81.20166016 135.28182983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[25 45]
[26 44]
[27 43]
[28 42]
[54 82]
[55 81]
[56 80]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[83 189]
[84 188]
[85 187]
[86 186]
[87 185]
[89 183]
[90 182]
[91 181]
[92 180]
[93 179]
[94 178]
[95 115]
[96 114]
[97 113]
[98 112]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
[136 154]
[137 153]
[139 151]
[140 150]
[141 149]
[157 177]
[158 176]
[159 175]
[160 174]
[161 172]
[162 171]
[163 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
