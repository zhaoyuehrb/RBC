%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGAUCUGCUUAGUGAAAGAAGUGGCAAGCAAUGGAUCCCAAAUAUCAGCGUGUAGAGCUAAAUGAUGGUCACUUCAUGCCCGUAUUGGGAUUUGGCACCUAUGCACCUCCAGAGGUUCCGAGGAACAGAG\
) } def
/len { sequence length } bind def

/coor [
[150.67683411 330.30767822]
[152.67588806 319.07165527]
[158.05390930 308.97543335]
[166.30166626 301.01019287]
[160.48030090 287.18588257]
[154.65892029 273.36157227]
[140.81098938 267.99774170]
[134.71035767 254.06083679]
[140.43032837 239.57223511]
[134.60894775 225.74792480]
[128.78756714 211.92361450]
[116.71736908 203.19668579]
[118.49248505 187.47537231]
[112.67111206 173.65106201]
[106.84973145 159.82675171]
[101.40159607 173.80236816]
[88.87785339 182.05802917]
[73.88624573 181.55628967]
[61.94250107 172.48178101]
[57.44096756 158.17317200]
[62.03784943 143.89491272]
[74.04186249 134.90026855]
[89.03648376 134.49855042]
[101.50544739 142.83828735]
[98.36384583 128.17095947]
[95.22224426 113.50364685]
[85.99373627 103.00000763]
[90.11043549 89.63796234]
[86.96883392 74.97063446]
[78.31248474 87.22084808]
[63.85846329 91.23100281]
[50.12788391 85.19186401]
[43.31546021 71.82807922]
[46.49470901 57.16886902]
[58.23126602 47.82792664]
[73.23004150 48.01953125]
[84.72380829 57.65664673]
[84.02072144 42.67313385]
[83.31763458 27.68962097]
[82.61455536 12.70610714]
[81.91146851 -2.27740622]
[81.20838928 -17.26091957]
[80.50530243 -32.24443436]
[79.80221558 -47.22794724]
[76.24614716 -55.74566650]
[79.26245880 -62.57011795]
[78.91082001 -77.56599426]
[78.55918121 -92.56187439]
[67.40663147 -103.43653870]
[67.26364136 -118.64950562]
[77.69970703 -129.21473694]
[77.34806824 -144.21061707]
[76.99642944 -159.20649719]
[76.64479065 -174.20237732]
[76.29315186 -189.19824219]
[68.23446655 -202.81324768]
[75.67127991 -215.71839905]
[75.31964111 -230.71427917]
[65.36866760 -246.15657043]
[74.26732635 -261.23571777]
[73.56423950 -276.21923828]
[72.86116028 -291.20272827]
[72.15807343 -306.18624878]
[61.31036377 -318.00601196]
[63.93024826 -333.83370972]
[78.00797272 -341.52767944]
[92.74431610 -335.18576050]
[96.83481598 -319.67294312]
[87.14158630 -306.88934326]
[87.84467316 -291.90582275]
[88.54776001 -276.92230225]
[89.25083923 -261.93878174]
[98.01261902 -253.51403809]
[98.66836548 -240.97404480]
[90.31552124 -231.06591797]
[90.66716003 -216.07003784]
[98.70069122 -203.52764893]
[91.28903198 -189.54988098]
[91.64067078 -174.55401611]
[91.99230194 -159.55813599]
[92.34394073 -144.56225586]
[92.69557953 -129.56637573]
[103.61539459 -119.50191498]
[104.18562317 -104.29897308]
[93.55505371 -92.91351318]
[93.90669250 -77.91763306]
[94.25833130 -62.92175674]
[94.78572845 -47.93103027]
[95.48881531 -32.94751740]
[96.19190216 -17.96400452]
[96.89498138 -2.98049021]
[97.59806824 12.00302315]
[98.30114746 26.98653603]
[99.00423431 41.97005081]
[99.70732117 56.95356369]
[101.63615417 71.82903290]
[104.77775574 86.49635315]
[114.00626373 96.99999237]
[109.88956451 110.36203766]
[113.03116608 125.02936554]
[116.17277527 139.69668579]
[120.67404175 154.00537109]
[126.49542236 167.82968140]
[132.31680298 181.65399170]
[144.80339050 191.36973572]
[142.61187744 206.10223389]
[148.43325806 219.92654419]
[154.25463867 233.75085449]
[168.61596680 239.78329468]
[174.32273865 253.88603210]
[168.48323059 267.54019165]
[174.30461121 281.36450195]
[180.12597656 295.18881226]
[199.17298889 296.67471313]
[214.82687378 307.48605347]
[222.89259338 324.62722778]
[221.25807190 343.41983032]
[210.44668579 358.77954102]
[217.53701782 371.99798584]
[224.62734985 385.21643066]
[231.71768188 398.43484497]
[245.93400574 406.60968018]
[245.69197083 423.00704956]
[231.24057007 430.75875854]
[217.44613647 421.89047241]
[218.49923706 405.52517700]
[211.40890503 392.30673218]
[204.31857300 379.08828735]
[197.22825623 365.86984253]
[186.07649231 367.36624146]
[174.98017883 365.34719849]
[165.02310181 359.99310303]
[157.18292236 351.81091309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 113]
[5 112]
[6 111]
[9 108]
[10 107]
[11 106]
[13 104]
[14 103]
[15 102]
[24 101]
[25 100]
[26 99]
[28 97]
[29 96]
[37 95]
[38 94]
[39 93]
[40 92]
[41 91]
[42 90]
[43 89]
[44 88]
[46 87]
[47 86]
[48 85]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[57 76]
[58 75]
[60 72]
[61 71]
[62 70]
[63 69]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
