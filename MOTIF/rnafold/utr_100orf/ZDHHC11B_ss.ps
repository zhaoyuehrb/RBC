%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACACCCGCUCCGGGAGCCAGUGUUCCGUCACCCCAGAAGCCAUACGCAACAAUGAAGAGCUGGUCUUGCCGCCCCGCAUCUCCAGAGUGAACGGCU\
) } def
/len { sequence length } bind def

/coor [
[72.89636230 125.17395782]
[60.06428528 132.94171143]
[47.23220825 140.70944214]
[34.40013504 148.47718811]
[21.56805992 156.24493408]
[8.85833931 164.21130371]
[-3.72595286 172.37437439]
[-16.31024551 180.53742981]
[-19.72154999 195.73614502]
[-32.60009766 203.83537292]
[-47.06872177 200.48956299]
[-59.65301132 208.65261841]
[-72.23730469 216.81567383]
[-84.82159424 224.97874451]
[-94.81943512 238.67106628]
[-110.74433136 232.85435486]
[-109.56338501 215.94157410]
[-92.98465729 212.39445496]
[-80.40036774 204.23138428]
[-67.81607819 196.06832886]
[-55.23178482 187.90525818]
[-52.38830948 173.32958984]
[-39.74233627 164.87181091]
[-24.47330856 167.95314026]
[-11.88901520 159.79006958]
[0.69527644 151.62701416]
[4.66368771 145.23348999]
[13.80031586 143.41285706]
[26.63239098 135.64512634]
[39.46446609 127.87737274]
[52.29653931 120.10962677]
[65.12861633 112.34188843]
[63.01626968 99.26561737]
[65.64605713 86.28350830]
[72.68077087 75.06016541]
[83.21842194 67.03465271]
[95.90783691 63.23602676]
[97.30552673 48.30128479]
[98.70321655 33.36654663]
[100.10090637 18.43180466]
[86.56961060 9.07706070]
[79.59506226 -5.71829891]
[80.97402191 -21.92332268]
[90.24128723 -35.17461014]
[104.82033539 -41.95122147]
[105.75288391 -56.92220688]
[106.68542480 -71.89318848]
[94.63784027 -81.67251587]
[90.67182159 -96.67419434]
[96.31238556 -111.12976837]
[109.39062500 -119.48078156]
[124.87768555 -118.51609039]
[136.81848145 -108.60664368]
[140.62152100 -93.56282043]
[134.82446289 -79.16928864]
[121.65641022 -70.96064758]
[120.72386932 -55.98966217]
[119.79132080 -41.01867676]
[131.71739197 -34.17266464]
[139.53648376 -22.77990532]
[141.65643311 -9.05833340]
[137.60151672 4.29025745]
[128.11756897 14.61220551]
[115.03564453 19.82949448]
[113.63795471 34.76423264]
[112.24026489 49.69897461]
[110.84257507 64.63371277]
[121.87131500 70.16744995]
[130.46641541 79.02066040]
[135.67152405 90.20825195]
[136.90742493 102.48537445]
[134.03663635 114.48595428]
[146.36097717 123.03643799]
[158.68530273 131.58691406]
[171.00964355 140.13740540]
[184.00709534 136.22059631]
[196.68424988 140.49731445]
[204.42301941 151.17039490]
[204.54344177 164.15759277]
[216.59590149 173.08721924]
[228.64834595 182.01686096]
[237.57559204 184.68090820]
[240.93098450 191.41639709]
[252.69990540 200.71653748]
[268.99600220 202.55192566]
[275.30569458 217.68864441]
[265.13806152 230.55532837]
[248.95271301 227.91583252]
[243.39976501 212.48544312]
[231.63084412 203.18530273]
[219.71871948 194.06932068]
[207.66625977 185.13967896]
[195.61381531 176.21005249]
[179.18922424 179.43066406]
[165.19306946 169.65385437]
[162.45915222 152.46174622]
[150.13482666 143.91125488]
[137.81048584 135.36077881]
[125.48615265 126.81028748]
[108.52762604 135.99465942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 26]
[7 25]
[8 24]
[11 21]
[12 20]
[13 19]
[14 18]
[37 67]
[38 66]
[39 65]
[40 64]
[45 58]
[46 57]
[47 56]
[72 99]
[73 98]
[74 97]
[75 96]
[79 93]
[80 92]
[81 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
