%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUCAGAACAAGUGUUACUAAGCCUGCAUUUUUUUAUCUGUUCAAACAUGAUGUGUUUUCUGCUCAUCAUUUCAUCAAUUCUGGUAGUGUUUGCAUUUGUUCUUGGAAAUGUUGCCAAUGGCUUCAUAGCCCUAGUAAAUGUCAUUG\
) } def
/len { sequence length } bind def

/coor [
[82.88534546 175.56584167]
[93.52359772 163.87811279]
[92.58173370 148.90771484]
[91.63987732 133.93731689]
[77.56777954 120.71202850]
[74.22939301 104.20730591]
[80.21019745 91.11764526]
[69.49311066 80.62269592]
[58.77602005 70.12774658]
[48.05892944 59.63279724]
[37.34183884 49.13784790]
[26.62474823 38.64289856]
[15.90765858 28.14794731]
[5.19056845 17.65299797]
[-5.52652216 7.15804720]
[-16.24361229 -3.33690310]
[-26.96070290 -13.83185291]
[-31.35288239 -14.78149700]
[-34.83395004 -16.89750481]
[-37.14419937 -19.73697472]
[-38.19960022 -22.81800461]
[-38.08888626 -25.68216324]
[-47.89019394 -37.03709030]
[-57.69150162 -48.39201355]
[-67.49281311 -59.74694061]
[-77.41249084 -70.99860382]
[-87.44944763 -82.14578247]
[-97.48640442 -93.29295349]
[-107.52336884 -104.44012451]
[-98.09113312 -92.77680969]
[-91.92153168 -79.10435486]
[-89.41713715 -64.31489563]
[-90.74136353 -49.37346268]
[-95.80780029 -35.25498962]
[-104.28586578 -22.88072395]
[-115.62235260 -13.05809116]
[-129.07754517 -6.42802620]
[-143.77348328 -3.42314601]
[-158.75125122 -4.23952150]
[-173.03353882 -8.82388306]
[-185.68840027 -16.87709808]
[-195.89012146 -27.87368774]
[-202.97300720 -41.09611893]
[-206.47491455 -55.68161392]
[-206.16732788 -70.67845917]
[-202.07032776 -85.10810089]
[-194.45123291 -98.02899170]
[-183.80720520 -108.59803772]
[-170.83277893 -116.12559509]
[-156.37336731 -120.12065887]
[-164.67424011 -132.61447144]
[-172.97511292 -145.10829163]
[-181.27598572 -157.60211182]
[-189.57685852 -170.09593201]
[-197.87773132 -182.58975220]
[-211.95919800 -189.80244446]
[-212.55780029 -204.68502808]
[-220.85867310 -217.17883301]
[-236.23771667 -221.74661255]
[-242.12135315 -236.67182922]
[-233.99617004 -250.50515747]
[-218.09509277 -252.63484192]
[-206.61608887 -241.42716980]
[-208.36485291 -225.47972107]
[-200.06398010 -212.98590088]
[-186.57624817 -206.66683960]
[-185.38391113 -190.89062500]
[-177.08303833 -178.39680481]
[-168.78216553 -165.90298462]
[-160.48129272 -153.40916443]
[-152.18041992 -140.91534424]
[-143.87954712 -128.42152405]
[-136.47187805 -129.59478760]
[-143.28157043 -142.95997620]
[-132.67471313 -153.56631470]
[-119.30986786 -146.75595093]
[-121.65655518 -131.94129944]
[-114.24889374 -133.11456299]
[-110.21509552 -147.56199646]
[-114.81526947 -163.30273438]
[-103.28943634 -174.96836853]
[-87.49438477 -170.55831909]
[-83.67871857 -154.60925293]
[-95.76766205 -143.52819824]
[-99.80146027 -129.08076477]
[-96.37619781 -114.47708130]
[-86.33923340 -103.32991028]
[-76.30227661 -92.18273926]
[-66.26531982 -81.03556824]
[-59.40693283 -78.15021515]
[-56.13788605 -69.54824829]
[-46.33657837 -58.19332504]
[-36.53526688 -46.83839798]
[-26.73395920 -35.48347092]
[-16.46575165 -24.54894257]
[-5.74866199 -14.05399323]
[4.96842813 -3.55904317]
[15.68551826 6.93590689]
[26.40260887 17.43085670]
[37.11969757 27.92580795]
[47.83678818 38.42075729]
[58.55387878 48.91570663]
[69.27096558 59.41065598]
[79.98806000 69.90560913]
[90.70514679 80.40055847]
[115.25669098 76.13877106]
[134.95018005 100.34239197]
[149.21603394 104.97764587]
[163.17086792 98.05664062]
[177.57243347 102.96067047]
[184.08456421 116.30712128]
[198.35040283 120.94237518]
[212.61625671 125.57762909]
[226.57109070 118.65661621]
[240.97265625 123.56064606]
[247.48478699 136.90710449]
[261.75064087 141.54235840]
[276.01647949 146.17761230]
[292.94882202 145.32176208]
[298.45855713 161.35545349]
[284.57672119 171.08842468]
[271.38122559 160.44345093]
[257.11538696 155.80819702]
[242.84953308 151.17294312]
[229.73625183 158.14271545]
[215.20263672 153.64514160]
[207.98100281 139.84347534]
[193.71514893 135.20822144]
[179.44931030 130.57296753]
[166.33602905 137.54273987]
[151.80241394 133.04515076]
[144.58078003 119.24349213]
[130.31492615 114.60823822]
[124.38876343 119.20503998]
[134.68597412 130.11227417]
[144.98316956 141.01950073]
[155.81828308 151.39254761]
[150.83985901 165.54229736]
[135.89657593 166.84548950]
[128.54394531 153.77107239]
[120.54019165 141.08485413]
[112.53644562 128.39865112]
[106.61028290 132.99545288]
[107.55213928 147.96585083]
[108.49399567 162.93624878]
[120.51322174 173.19850159]
[121.67228699 188.96023560]
[111.28353882 200.87028503]
[95.51043701 201.86264038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[7 105]
[8 104]
[9 103]
[10 102]
[11 101]
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[17 95]
[22 94]
[23 93]
[24 92]
[25 91]
[26 89]
[27 88]
[28 87]
[29 86]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[57 65]
[58 64]
[78 85]
[79 84]
[107 133]
[108 132]
[111 129]
[112 128]
[113 127]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
