%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:37:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGCCCUCUCGGGGACGCGAAUGCCCCGCGCCGGGCGGGCGCCCGCGGAGGGAGGUCCCGCUCCAGGGACGCGGAGCUCCAGAUGCCUGCGCCCAAGGCCCCUCGCCUGGCGCCGGCUGG\
) } def
/len { sequence length } bind def

/coor [
[-75.05735779 414.92288208]
[-82.77924347 427.78262329]
[-90.50113678 440.64233398]
[-98.22303009 453.50204468]
[-105.77871704 466.46011353]
[-113.16693115 479.51440430]
[-120.55515289 492.56866455]
[-127.94337463 505.62295532]
[-130.48286438 522.38562012]
[-147.29345703 524.58575439]
[-154.06123352 509.04119873]
[-140.99765015 498.23474121]
[-133.60943604 485.18045044]
[-126.22121429 472.12619019]
[-118.83299255 459.07189941]
[-118.27005005 451.61267090]
[-111.08274841 445.78015137]
[-103.36085510 432.92044067]
[-95.63896942 420.06072998]
[-87.91707611 407.20098877]
[-94.81636810 392.36557007]
[-91.52256012 376.17047119]
[-79.13093567 364.98684692]
[-62.35470963 363.33306885]
[-54.96649170 350.27880859]
[-47.57826996 337.22451782]
[-50.50361633 325.41052246]
[-44.35618591 314.44262695]
[-31.98495102 310.52862549]
[-24.26305962 297.66888428]
[-16.54116631 284.80917358]
[-8.81927490 271.94946289]
[-1.09738266 259.08972168]
[6.62450933 246.23001099]
[14.34640121 233.37030029]
[22.06829262 220.51057434]
[29.79018593 207.65086365]
[37.51207733 194.79113770]
[45.06776047 181.83306885]
[52.45598221 168.77877808]
[51.99111557 153.89143372]
[65.52202606 145.69233704]
[72.91024017 132.63806152]
[80.29846191 119.58378601]
[73.63452148 108.74852753]
[72.49909973 96.07881927]
[77.13027954 84.23133087]
[86.55696106 75.69033813]
[83.11164093 61.09136963]
[79.66632843 46.49240494]
[76.22100830 31.89343834]
[72.58802032 17.34004211]
[68.76795197 2.83462548]
[55.68886566 -6.45606899]
[54.94184494 -22.48172188]
[67.09994507 -32.94882202]
[82.83650970 -29.82790565]
[90.07978821 -15.51307487]
[83.27336884 -0.98544121]
[87.09343719 13.51997471]
[91.89640808 19.25482368]
[90.81997681 28.44812202]
[94.26529694 43.04708862]
[97.71060944 57.64605331]
[101.15592194 72.24501801]
[110.79557800 74.40447998]
[119.07002258 79.80075836]
[131.92973328 72.07886505]
[144.78945923 64.35697174]
[150.62196350 57.16967392]
[158.08120728 56.60672760]
[171.13548279 49.21850586]
[184.18975830 41.83028793]
[197.24403381 34.44206619]
[210.29830933 27.05384445]
[216.31394958 20.01910400]
[223.78520203 19.64840698]
[237.02539062 12.59875584]
[240.09065247 -2.73545933]
[252.32768250 -12.47143364]
[267.95852661 -12.01213646]
[279.60275269 -1.57443583]
[281.76235962 13.91330624]
[273.41760254 27.13825226]
[258.50863647 31.85598564]
[244.07504272 25.83893776]
[230.83485413 32.88858795]
[217.68653870 40.10812378]
[204.63226318 47.49634552]
[191.57797241 54.88456345]
[178.52369690 62.27278519]
[165.46942139 69.66101074]
[152.51135254 77.21669006]
[139.65162659 84.93858337]
[126.79190826 92.66047668]
[125.29761505 111.47631073]
[112.12386322 124.99373627]
[93.35274506 126.97200775]
[85.96452332 140.02629089]
[78.57630157 153.08056641]
[78.51271057 168.90164185]
[65.51026154 176.16700745]
[58.12203979 189.22128296]
[56.58617783 198.34907532]
[50.37179565 202.51303101]
[42.64990616 215.37274170]
[34.92801285 228.23246765]
[27.20612144 241.09219360]
[19.48422813 253.95190430]
[11.76233673 266.81161499]
[4.04044485 279.67135620]
[-3.68144727 292.53106689]
[-11.40333939 305.39077759]
[-19.12523079 318.25051880]
[-18.96365166 336.60882568]
[-34.52399063 344.61273193]
[-41.91221237 357.66702271]
[-49.30043411 370.72128296]
[-42.64699936 382.86929321]
[-42.89406967 396.60916138]
[-49.86881256 408.32339478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 15]
[6 14]
[7 13]
[8 12]
[24 118]
[25 117]
[26 116]
[29 114]
[30 113]
[31 112]
[32 111]
[33 110]
[34 109]
[35 108]
[36 107]
[37 106]
[38 105]
[39 103]
[40 102]
[42 100]
[43 99]
[44 98]
[48 65]
[49 64]
[50 63]
[51 62]
[52 60]
[53 59]
[67 95]
[68 94]
[69 93]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
