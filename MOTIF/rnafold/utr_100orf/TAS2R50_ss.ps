%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAACCAGUGAUAUUAGGCUUGCAUUUUCUUUCUUUUUUUCUGCUCAGAUAUGAUAACUUUUCUAUACAUUUUUUUUUCAAUUCUAAUAAUGGUUUUAUUUGUUCUCGGAAACUUUGCCAAUGGCUUCAUAGCACUGGUAAAUUUCAUUG\
) } def
/len { sequence length } bind def

/coor [
[93.46221924 409.93518066]
[90.37786102 395.11071777]
[92.27659607 380.08825684]
[98.95246887 366.49740601]
[109.68133545 355.81237793]
[123.29939270 349.19216919]
[121.45606995 334.30584717]
[119.61274719 319.41955566]
[117.76942444 304.53323364]
[115.92610168 289.64694214]
[114.08277130 274.76062012]
[112.23944855 259.87432861]
[102.99676514 248.19433594]
[108.97953796 233.54794312]
[107.13621521 218.66162109]
[105.29289246 203.77531433]
[96.05020142 192.09533691]
[102.03297424 177.44894409]
[100.18965149 162.56263733]
[98.34632874 147.67633057]
[96.50300598 132.79002380]
[94.65968323 117.90370941]
[81.53791046 102.86584473]
[89.48342896 84.55773163]
[86.72718048 69.81314087]
[83.97093964 55.06854248]
[76.16031647 54.06361771]
[68.74165344 51.45575714]
[62.03958130 47.36407852]
[56.34633255 41.97253036]
[51.90898895 35.52159882]
[48.91877365 28.29761505]
[47.50280762 20.62001991]
[47.71870041 12.82725525]
[49.55224228 5.26183987]
[52.91822815 -1.74468672]
[57.66439056 -7.88629103]
[63.57830811 -12.89581299]
[70.39689636 -16.55658722]
[77.81809998 -18.71180725]
[78.12607574 -33.70864487]
[78.43405914 -48.70548248]
[78.74203491 -63.70232010]
[79.05001068 -78.69915771]
[79.35798645 -93.69599915]
[65.73448181 -106.79133606]
[65.94075012 -125.36924744]
[79.38403320 -137.72866821]
[79.07604980 -152.72550964]
[78.76807404 -167.72233582]
[78.46009827 -182.71917725]
[78.15212250 -197.71601868]
[77.84413910 -212.71286011]
[69.82512665 -226.35125732]
[77.29948425 -239.23471069]
[76.99150848 -254.23155212]
[76.68353271 -269.22839355]
[61.79829788 -271.33218384]
[47.44333649 -275.79663086]
[33.99048233 -282.50610352]
[21.78818893 -291.28677368]
[11.15252876 -301.91122437]
[2.35899091 -314.10424805]
[-4.36465168 -327.55001831]
[-8.84423923 -341.90026855]
[-10.96374130 -356.78326416]
[-10.66825676 -371.81353760]
[-7.96544027 -386.60174561]
[-2.92529988 -400.76483154]
[4.32161188 -413.93594360]
[13.58758259 -425.77392578]
[24.63260078 -435.97216797]
[37.17057419 -444.26644897]
[50.87674332 -450.44198608]
[65.39608002 -454.33877563]
[80.35249329 -455.85592651]
[95.35858917 -454.95410156]
[110.02566528 -451.65667725]
[123.97381592 -446.04907227]
[136.84173584 -438.27648926]
[148.29614258 -428.54034424]
[158.04029846 -417.09274292]
[165.82183838 -404.23025513]
[171.43920898 -390.28601074]
[174.74687195 -375.62124634]
[175.65917969 -360.61578369]
[174.15248108 -345.65832520]
[170.26582336 -331.13626099]
[164.09986877 -317.42578125]
[155.81433105 -304.88201904]
[145.62382507 -293.82989502]
[133.79229736 -284.55563354]
[120.62624359 -277.29953003]
[106.46668243 -272.24951172]
[91.68036652 -269.53634644]
[91.98834229 -254.53952026]
[92.29632568 -239.54267883]
[100.29330444 -226.97695923]
[92.84098053 -213.02082825]
[93.14895630 -198.02400208]
[93.45693207 -183.02716064]
[93.76491547 -168.03031921]
[94.07289124 -153.03347778]
[94.38086700 -138.03663635]
[104.18511200 -132.06271362]
[109.92285919 -121.97979736]
[110.05370331 -110.25910187]
[104.42826843 -99.83892059]
[94.35482788 -93.38801575]
[94.04685211 -78.39118195]
[93.73886871 -63.39434433]
[93.43089294 -48.39750671]
[93.12291718 -33.40066910]
[92.81494141 -18.40382957]
[112.58496094 -6.71150398]
[121.66242218 14.51532364]
[116.40634155 37.11607361]
[98.71553802 52.31229782]
[101.47177887 67.05689240]
[104.22801971 81.80149078]
[112.08863068 85.75476074]
[117.26813507 92.86743927]
[118.61778259 101.56203461]
[115.83824921 109.91018677]
[109.54598999 116.06038666]
[111.38931274 130.94670105]
[113.23263550 145.83300781]
[115.07595825 160.71931458]
[116.91928101 175.60562134]
[126.29382324 188.35037231]
[120.17919922 201.93199158]
[122.02252197 216.81829834]
[123.86584473 231.70460510]
[133.24038696 244.44935608]
[127.12575531 258.03100586]
[128.96908569 272.91729736]
[130.81240845 287.80361938]
[132.65573120 302.68991089]
[134.49905396 317.57623291]
[136.34237671 332.46252441]
[138.18569946 347.34884644]
[153.00721741 350.44744873]
[166.01826477 358.19287109]
[175.80751038 369.74490356]
[181.31306458 383.85049438]
[181.93775940 398.97955322]
[177.61381531 413.49099731]
[168.81027222 425.81076050]
[156.48205566 434.60244751]
[141.96644592 438.91241455]
[126.83799744 438.27316284]
[112.73772430 432.75402832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 141]
[7 140]
[8 139]
[9 138]
[10 137]
[11 136]
[12 135]
[14 133]
[15 132]
[16 131]
[18 129]
[19 128]
[20 127]
[21 126]
[22 125]
[24 120]
[25 119]
[26 118]
[40 114]
[41 113]
[42 112]
[43 111]
[44 110]
[45 109]
[48 104]
[49 103]
[50 102]
[51 101]
[52 100]
[53 99]
[55 97]
[56 96]
[57 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
