%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGUCACUGUUAAGGGGGCCGCCAUGGCCCGGCUGUGGGGCGCGCUGAGUCUUUGGCCACUGUGGGCGGCCGUGCCGUGGGGCGGGGCGGCAGCCGUCGGUGUCCGGGCUUGCAGCUCCACGG\
) } def
/len { sequence length } bind def

/coor [
[-36.72035217 229.15818787]
[-48.21102142 238.80000305]
[-59.70168686 248.44181824]
[-71.19235229 258.08361816]
[-82.68302155 267.72543335]
[-94.17369080 277.36724854]
[-105.66435242 287.00906372]
[-117.15502167 296.65087891]
[-121.78367615 304.65594482]
[-129.05445862 306.38549805]
[-140.78193665 315.73785400]
[-139.79039001 327.71597290]
[-144.70187378 338.55352783]
[-154.16860962 345.56072998]
[-165.72898865 347.06143188]
[-176.44702148 342.79272461]
[-188.62609863 351.54888916]
[-197.95697021 365.70413208]
[-214.14207458 360.65646362]
[-213.77215576 343.70654297]
[-197.38224792 339.36981201]
[-185.20318604 330.61364746]
[-183.42402649 312.47482300]
[-168.76925659 301.11465454]
[-150.13427734 304.01037598]
[-138.40679932 294.65802002]
[-126.79683685 285.16021729]
[-115.30616760 275.51840210]
[-103.81549835 265.87658691]
[-92.32483673 256.23477173]
[-80.83416748 246.59295654]
[-69.34349823 236.95114136]
[-57.85283279 227.30932617]
[-46.36216736 217.66751099]
[-34.99259186 207.88320923]
[-23.74587440 197.95791626]
[-12.49915600 188.03262329]
[-1.25243795 178.10734558]
[9.99427986 168.18205261]
[21.24099731 158.25677490]
[32.48771667 148.33148193]
[43.73443604 138.40618896]
[54.98115158 128.48091125]
[56.07274628 116.36476135]
[65.45745850 108.00597382]
[78.42302704 108.33765411]
[89.91369629 98.69583893]
[93.62537384 91.43296051]
[101.81313324 88.96121216]
[113.54060364 79.60886383]
[125.26807404 70.25652313]
[136.99554443 60.90417480]
[148.72302246 51.55182648]
[160.45050049 42.19947815]
[163.29138184 36.03255081]
[168.12847900 32.79241180]
[173.00367737 32.69081497]
[185.18273926 23.93465996]
[191.87103271 9.59668922]
[206.72138977 8.44943237]
[218.90045166 -0.30672237]
[231.07952881 -9.06287766]
[243.25859070 -17.81903267]
[255.43766785 -26.57518768]
[258.11743164 -41.91978073]
[270.59347534 -50.62627029]
[285.20568848 -47.97694778]
[297.38476562 -56.73310089]
[309.56384277 -65.48925781]
[316.25213623 -79.82722473]
[331.10247803 -80.97448730]
[343.28155518 -89.73063660]
[355.46063232 -98.48679352]
[367.63967896 -107.24295044]
[379.81875610 -115.99910736]
[386.50704956 -130.33708191]
[401.35739136 -131.48432922]
[413.53646851 -140.24049377]
[425.71554565 -148.99664307]
[437.89462280 -157.75279236]
[447.22549438 -171.90805054]
[463.41058350 -166.86038208]
[463.04067993 -149.91046143]
[446.65075684 -145.57373047]
[434.47167969 -136.81756592]
[422.29263306 -128.06141663]
[410.11355591 -119.30525970]
[404.29638672 -105.59358978]
[388.57492065 -103.82003784]
[376.39584351 -95.06388092]
[364.21676636 -86.30772400]
[352.03768921 -77.55156708]
[339.85864258 -68.79541779]
[334.04147339 -55.08374023]
[318.32000732 -53.31018829]
[306.14093018 -44.55403137]
[293.96185303 -35.79787827]
[291.81942749 -21.10278893]
[279.59286499 -12.04930687]
[264.19381714 -14.39611721]
[252.01475525 -5.63996267]
[239.83567810 3.11619258]
[227.65661621 11.87234783]
[215.47753906 20.62850189]
[209.66038513 34.34017563]
[193.93890381 36.11373138]
[181.75982666 44.86988449]
[169.80284119 53.92695236]
[158.07536316 63.27930069]
[146.34790039 72.63164520]
[134.62042236 81.98399353]
[122.89295197 91.33634186]
[111.16548157 100.68869019]
[99.55551147 110.18650818]
[88.06484222 119.82832336]
[82.23081207 137.24014282]
[64.90644073 139.72763062]
[53.65972137 149.65290833]
[42.41300201 159.57820129]
[31.16628647 169.50347900]
[19.91956711 179.42877197]
[8.67284966 189.35406494]
[-2.57386851 199.27934265]
[-13.82058620 209.20463562]
[-25.06730461 219.12992859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[10 26]
[11 25]
[16 22]
[17 21]
[35 125]
[36 124]
[37 123]
[38 122]
[39 121]
[40 120]
[41 119]
[42 118]
[43 117]
[46 115]
[47 114]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
[54 108]
[57 107]
[58 106]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[67 97]
[68 96]
[69 95]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
