%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUCCUCGGCCCAGGCCAAGCAAGCUUCUAUCUGCACCUGCUCUCAAUCCUGCUCUCACCAUGAGCCUCCGCCUGCAGAGCUCCUCUGCCAGCUAUGGAGGUGGUUUCGGGGGUGGCUCUUGCCAGCUGGGAGGAGGCCGUGGUGUCUCUACCUGUUCAA\
) } def
/len { sequence length } bind def

/coor [
[88.73290253 232.36590576]
[99.43368530 220.73539734]
[98.57214355 205.76016235]
[97.71059418 190.78492737]
[96.84904480 175.80969238]
[91.13619232 175.35562134]
[85.47390747 174.47167969]
[79.89449310 173.16287231]
[74.42977142 171.43669128]
[69.11092377 169.30297852]
[63.96829987 166.77389526]
[55.57511139 179.20588684]
[47.18192673 191.63787842]
[46.57139206 208.02566528]
[31.94939613 215.45057678]
[18.35779190 206.27449036]
[19.77845764 189.93699646]
[34.74993515 183.24470520]
[43.14311981 170.81271362]
[51.53630829 158.38072205]
[38.78703308 144.83314514]
[29.71754265 128.59043884]
[15.33252907 132.84149170]
[0.94751561 137.09252930]
[-13.43749809 141.34358215]
[-26.59383965 156.57644653]
[-45.18399048 151.35671997]
[-59.39561844 156.15562439]
[-63.89200974 171.00695801]
[-76.27936554 180.35217285]
[-91.79449463 180.59783936]
[-104.47151947 171.64950562]
[-109.43585205 156.94798279]
[-104.77861786 142.14630127]
[-92.29061890 132.93600464]
[-76.77373505 132.85865784]
[-64.19453430 141.94400024]
[-49.98289871 137.14508057]
[-46.26294708 127.56690979]
[-37.69094849 121.51107788]
[-26.98019600 121.19192505]
[-17.68854332 126.95857239]
[-3.30352998 122.70751953]
[11.08148289 118.45647430]
[25.46649742 114.20542908]
[24.14233780 101.62866211]
[24.92547798 89.00665283]
[27.79416275 76.69003296]
[32.66869736 65.02095795]
[39.41367340 54.32358932]
[47.84171677 44.89509201]
[57.71869659 36.99739075]
[68.77024078 30.84987831]
[80.68933105 26.62333107]
[93.14486694 24.43516350]
[105.79083252 24.34615898]
[118.27593994 26.35879135]
[130.25334167 30.41715050]
[141.39031982 36.40849686]
[151.37748718 44.16639328]
[162.57577515 34.18650818]
[173.77407837 24.20662117]
[184.97238159 14.22673607]
[196.17066956 4.24685049]
[207.36897278 -5.73303509]
[218.56727600 -15.71292019]
[222.91879272 -23.79850006]
[230.07698059 -25.77420044]
[241.46438599 -35.53775406]
[252.85179138 -45.30130768]
[264.23919678 -55.06485748]
[275.62661743 -64.82840729]
[287.01400757 -74.59196472]
[292.45431519 -89.44839478]
[307.15258789 -91.85877228]
[318.54000854 -101.62232208]
[329.92742920 -111.38587189]
[340.83438110 -121.68336487]
[351.23583984 -132.49119568]
[361.63732910 -143.29901123]
[371.93484497 -154.20596313]
[382.12738037 -165.21104431]
[392.31994629 -176.21612549]
[402.51251221 -187.22120667]
[412.70504761 -198.22628784]
[422.79174805 -209.32849121]
[432.77163696 -220.52677917]
[442.75152588 -231.72508240]
[452.73141479 -242.92338562]
[462.71127319 -254.12168884]
[472.36532593 -265.60208130]
[481.68554688 -277.35510254]
[491.00576782 -289.10812378]
[500.32598877 -300.86114502]
[502.83825684 -316.48162842]
[516.80877686 -321.64633179]
[526.12896729 -333.39935303]
[527.99218750 -349.69229126]
[543.13964844 -355.97610474]
[555.98895264 -345.78652954]
[553.32183838 -329.60574341]
[537.88201904 -324.07913208]
[528.56176758 -312.32611084]
[526.71618652 -297.54629517]
[512.07897949 -291.54092407]
[502.75878906 -279.78790283]
[493.43856812 -268.03488159]
[484.11834717 -256.28186035]
[484.17807007 -252.71235657]
[482.48233032 -248.93977356]
[478.95648193 -245.80311584]
[473.90957642 -244.14179993]
[463.92968750 -232.94349670]
[453.94982910 -221.74519348]
[443.96994019 -210.54690552]
[433.99005127 -199.34860229]
[431.87759399 -192.22956848]
[423.71014404 -188.03373718]
[413.51757812 -177.02865601]
[403.32504272 -166.02357483]
[393.13247681 -155.01849365]
[382.93991089 -144.01341248]
[380.69149780 -136.93615723]
[372.44515991 -132.89752197]
[362.04367065 -122.08970642]
[351.64218140 -111.28188324]
[366.41650391 -108.68965912]
[373.77331543 -95.61765289]
[368.32269287 -81.64301300]
[354.05798340 -77.00420380]
[341.43020630 -85.09983826]
[339.69097900 -99.99846649]
[328.30355835 -90.23491669]
[316.91613770 -80.47135925]
[312.29034424 -66.31328583]
[296.77755737 -63.20455551]
[285.39016724 -53.44100189]
[274.00274658 -43.67745209]
[262.61535645 -33.91389847]
[251.22793579 -24.15034676]
[239.84053040 -14.38679409]
[228.54716492 -4.51462221]
[217.34886169 5.46526337]
[206.15055847 15.44514942]
[194.95225525 25.42503357]
[183.75396729 35.40491867]
[172.55566406 45.38480377]
[161.35736084 55.36469269]
[170.64355469 72.31378937]
[175.34651184 91.05910492]
[175.16116333 110.38449860]
[170.09948730 129.03616333]
[160.48991394 145.80401611]
[146.95587158 159.60020447]
[130.37542725 169.52964783]
[111.82427979 174.94813538]
[112.68582916 189.92338562]
[113.54737854 204.89862061]
[114.40892792 219.87385559]
[126.37294006 230.20042419]
[127.44744873 245.96813965]
[116.99496460 257.82229614]
[101.21676636 258.73004150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 159]
[3 158]
[4 157]
[5 156]
[11 20]
[12 19]
[13 18]
[22 45]
[23 44]
[24 43]
[25 42]
[27 38]
[28 37]
[60 148]
[61 147]
[62 146]
[63 145]
[64 144]
[65 143]
[66 142]
[68 141]
[69 140]
[70 139]
[71 138]
[72 137]
[73 136]
[75 134]
[76 133]
[77 132]
[78 126]
[79 125]
[80 124]
[81 122]
[82 121]
[83 120]
[84 119]
[85 118]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 108]
[92 107]
[93 106]
[94 105]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
