%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAACACAGAACCUCACAGUGGUGACAGAAUUCAUUCUUCUUGGUCUGACCCAGUCUCAAGAUGCUCAACUUCUGGUCUUUGUGCUAGUCUUAAUUU\
) } def
/len { sequence length } bind def

/coor [
[104.41108704 293.42352295]
[109.10504913 278.72760010]
[121.01361847 268.91995239]
[119.15213776 254.03591919]
[117.29065704 239.15187073]
[102.23054504 228.97653198]
[99.16128540 210.74317932]
[110.43716431 195.69462585]
[107.65394592 180.95509338]
[104.87072754 166.21556091]
[102.08750916 151.47604370]
[99.30429840 136.73651123]
[96.52108002 121.99697876]
[87.63210297 120.05931854]
[79.80422974 114.49822998]
[74.51458740 105.88590240]
[72.93807220 95.39128876]
[58.15704346 97.94494629]
[43.37601471 100.49859619]
[28.59498405 103.05224609]
[16.34937859 113.95991516]
[0.86737132 108.55256653]
[-1.92447782 92.39281464]
[10.84584713 82.10442352]
[26.04133034 88.27121735]
[40.82236099 85.71756744]
[55.60338974 83.16390991]
[70.38442230 80.61026001]
[81.07318115 70.08645630]
[83.85639954 55.34692764]
[86.63961029 40.60739899]
[89.42282867 25.86787033]
[92.20604706 11.12834167]
[78.96919250 3.83155513]
[68.64976501 -7.18442917]
[62.24919128 -20.83218002]
[60.38291931 -35.76978683]
[63.22121811 -50.53280258]
[70.47377777 -63.67781448]
[81.41930389 -73.92356873]
[94.97727203 -80.27586365]
[109.81456757 -82.12397766]
[112.59778595 -96.86350250]
[115.38100433 -111.60303497]
[118.16422272 -126.34255981]
[120.94743347 -141.08209229]
[123.73065186 -155.82162476]
[117.19926453 -172.95019531]
[128.95246887 -185.87936401]
[131.27593994 -200.69833374]
[133.59941101 -215.51728821]
[130.07951355 -232.10180664]
[145.04150391 -240.07521057]
[156.84518433 -227.90521240]
[148.41838074 -213.19381714]
[146.09489441 -198.37486267]
[143.77142334 -183.55589294]
[150.67802429 -173.49026489]
[148.74159241 -161.02934265]
[138.47018433 -153.03840637]
[135.68696594 -138.29887390]
[132.90374756 -123.55934906]
[130.12052917 -108.81981659]
[127.33731842 -94.08029175]
[124.55410004 -79.34075928]
[137.69584656 -72.20945740]
[148.00389099 -61.35062408]
[154.45962524 -47.81904221]
[156.41944885 -32.93448639]
[153.67897034 -18.15300179]
[146.49417114 -4.92447948]
[135.55764771 5.44956493]
[121.93177795 11.94403839]
[106.94557190 13.91155815]
[104.16236115 28.65108681]
[101.37914276 43.39061737]
[98.59592438 58.13014603]
[95.81270599 72.86967468]
[113.40345001 77.53897858]
[123.42430878 91.67116547]
[122.14074707 108.07021332]
[111.26060486 119.21376038]
[114.04382324 133.95329285]
[116.82704163 148.69282532]
[119.61026001 163.43234253]
[122.39347076 178.17187500]
[125.17668915 192.91140747]
[136.29855347 197.67500305]
[143.59849548 207.17160034]
[145.30682373 218.90495300]
[141.10450745 229.86285400]
[132.17469788 237.29039001]
[134.03617859 252.17443848]
[135.89765930 267.05847168]
[149.85484314 273.63119507]
[158.02352905 286.71844482]
[157.79710388 302.14413452]
[149.24783325 314.98602295]
[135.10375977 321.14624023]
[119.87818909 318.65914917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[17 28]
[18 27]
[19 26]
[20 25]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
