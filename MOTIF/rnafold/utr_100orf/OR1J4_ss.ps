%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAGGGAGAAUCAGAGCAGUGUGUCUGAGUUCCUCCUCCUGGACCUCCCCAUCUGGCCAGAGCAGCAGGCUGUGUUCUUCACCCUGUUCUUGGGCA\
) } def
/len { sequence length } bind def

/coor [
[108.96508789 138.56481934]
[96.92424774 139.47351074]
[85.16949463 136.71067810]
[74.79415894 130.53330994]
[66.76326752 121.51597595]
[61.82379913 110.49739838]
[46.86912537 111.66265106]
[31.91445541 112.82791138]
[16.95978546 113.99317169]
[2.00511479 115.15842438]
[-11.15229034 123.94439697]
[-24.44216537 117.21918488]
[-39.39683533 118.38443756]
[-54.35150528 119.54969788]
[-69.28624725 120.94738770]
[-84.19744110 122.57717133]
[-99.10864258 124.20694733]
[-114.01983643 125.83673096]
[-128.93103027 127.46651459]
[-136.51658630 141.00309753]
[-150.62408447 147.46516418]
[-165.82890320 144.36790466]
[-176.28448486 132.90228271]
[-177.97044373 117.47707367]
[-170.23851013 104.02357483]
[-156.06173706 97.71493530]
[-140.89140320 100.97695160]
[-130.56082153 112.55532074]
[-115.64962006 110.92553711]
[-100.73842621 109.29575348]
[-85.82722473 107.66596985]
[-70.91603088 106.03618622]
[-64.49578857 102.11113739]
[-55.51676559 104.59502411]
[-40.56209183 103.42977142]
[-25.60742188 102.26451111]
[-13.51967525 93.56188965]
[0.83985710 100.20375824]
[15.79452801 99.03849792]
[30.74919891 97.87324524]
[45.70386887 96.70798492]
[60.65853882 95.54272461]
[70.11418152 74.02971649]
[90.09757996 61.66516113]
[89.16503906 46.69417572]
[88.23249054 31.72319221]
[76.21965027 21.45347023]
[75.07038879 5.69102335]
[85.46654510 -6.21256876]
[101.24026489 -7.19511557]
[113.03327179 3.32631040]
[113.84899902 19.10953331]
[103.20347595 30.79064751]
[104.13602448 45.76163101]
[105.06856537 60.73261642]
[116.33935547 63.93556595]
[126.17916107 70.29698181]
[133.72624207 79.25974274]
[138.31964111 90.03890991]
[139.55705261 101.69044495]
[154.15072632 105.15808868]
[168.74440002 108.62573242]
[183.95944214 104.28829193]
[194.55326843 114.75824738]
[209.14694214 118.22589874]
[223.74063110 121.69354248]
[232.99603271 120.63046265]
[238.73078918 125.50262451]
[253.20957947 129.42245483]
[267.68835449 133.34228516]
[282.16711426 137.26211548]
[296.64590454 141.18194580]
[311.12466431 145.10177612]
[317.88558960 143.72006226]
[323.42526245 145.77479553]
[326.36709595 149.74169922]
[340.57415771 154.55407715]
[354.78125000 159.36647034]
[369.74411011 153.57925415]
[383.52471924 161.79353333]
[385.55175781 177.70800781]
[374.27026367 189.11447144]
[358.33441162 187.26283264]
[349.96887207 173.57354736]
[335.76177979 168.76115417]
[321.55471802 163.94876099]
[307.20483398 159.58055115]
[292.72607422 155.66072083]
[278.24728394 151.74089050]
[263.76852417 147.82106018]
[249.28974915 143.90122986]
[234.81097412 139.98139954]
[220.27297974 136.28721619]
[205.67930603 132.81958008]
[191.08563232 129.35192871]
[176.91442871 133.93739319]
[165.27676392 123.21941376]
[150.68309021 119.75177002]
[136.08940125 116.28411865]
[129.50279236 126.40460205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[12 36]
[13 35]
[14 34]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[44 55]
[45 54]
[46 53]
[60 99]
[61 98]
[62 97]
[64 95]
[65 94]
[66 93]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
