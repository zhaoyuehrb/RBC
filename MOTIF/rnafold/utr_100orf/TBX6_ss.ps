%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUCGGACUCACCGGGGGCCCUAAGCAGCGAGACCUGAGGCCAGACGGAACUACAACAUGUACCAUCCACGAGAAUUGUACCCGUCCCUGGGGGCCGGCUACCGCCUGGGGCCCGCCCAACCUGGGGCCGACUCCAGCUUCCCACCCGCCCUAGCGG\
) } def
/len { sequence length } bind def

/coor [
[255.28137207 452.74911499]
[250.12051392 438.66488647]
[244.95967102 424.58065796]
[239.79881287 410.49642944]
[234.22799683 396.56924438]
[228.25198364 382.81109619]
[222.27597046 369.05291748]
[216.29994202 355.29473877]
[210.32392883 341.53659058]
[198.15663147 332.94552612]
[199.75537109 317.20532227]
[193.77935791 303.44714355]
[187.80334473 289.68896484]
[181.82731628 275.93078613]
[163.25311279 270.19985962]
[154.67839050 252.41795349]
[161.98046875 233.75077820]
[155.20976257 220.36579895]
[148.30879211 207.04751587]
[141.27819824 193.79721069]
[134.24761963 180.54689026]
[127.21703339 167.29656982]
[120.18644714 154.04624939]
[113.15586090 140.79594421]
[106.12527466 127.54562378]
[99.09468842 114.29531097]
[87.34687805 106.71371460]
[87.65499115 92.73527527]
[80.62440491 79.48496246]
[73.20906067 66.44607544]
[65.41529846 53.62978363]
[57.62154007 40.81349182]
[42.32817841 41.05900192]
[29.05293846 33.66543579]
[21.31232834 20.70590782]
[21.09922409 5.71222401]
[28.37072754 -7.28742313]
[20.57696915 -20.10371399]
[12.78320885 -32.92000580]
[-0.99803847 -40.69096375]
[-1.00002515 -55.58556747]
[-8.79378414 -68.40186310]
[-16.58754349 -81.21814728]
[-21.25861359 -83.76688385]
[-24.16242409 -87.49499512]
[-25.14634895 -91.51762390]
[-24.43691635 -95.02021027]
[-31.46750259 -108.27053070]
[-38.49808502 -121.52084351]
[-45.52867126 -134.77116394]
[-52.55925751 -148.02148438]
[-63.18568802 -150.62442017]
[-70.45486450 -158.50382996]
[-72.12428284 -168.87043762]
[-67.87786102 -178.23233032]
[-74.38611603 -191.74685669]
[-80.89437103 -205.26139832]
[-87.40262604 -218.77592468]
[-93.91088104 -232.29046631]
[-111.99045563 -237.81756592]
[-120.19607544 -254.49580383]
[-113.76575470 -271.59628296]
[-120.79634094 -284.84658813]
[-127.82692719 -298.09692383]
[-143.15670776 -301.18423462]
[-152.87506104 -313.43527222]
[-152.39326477 -329.06542969]
[-141.93881226 -340.69464111]
[-126.44797516 -342.83193970]
[-113.23506165 -334.46817017]
[-108.53878784 -319.55242920]
[-114.57660675 -305.12750244]
[-107.54602814 -291.87716675]
[-100.51544189 -278.62686157]
[-89.08400726 -277.71270752]
[-79.42638397 -271.30844116]
[-74.02496338 -260.92053223]
[-74.33540344 -249.09609985]
[-80.39634705 -238.79872131]
[-73.88809204 -225.28417969]
[-67.37983704 -211.76965332]
[-60.87158203 -198.25512695]
[-54.36332703 -184.74058533]
[-37.63160706 -175.10728455]
[-39.30894089 -155.05206299]
[-32.27835464 -141.80174255]
[-25.24777031 -128.55143738]
[-18.21718597 -115.30111694]
[-11.18660069 -102.05079651]
[-3.77125263 -89.01190948]
[4.02250671 -76.19561768]
[11.81626606 -63.37932587]
[25.04005241 -56.52507782]
[25.59950066 -40.71376419]
[33.39326096 -27.89747238]
[41.18701935 -15.08118248]
[56.07457733 -15.55675983]
[69.28920746 -8.46947765]
[77.23459625 4.36552095]
[77.69175720 19.55393028]
[70.43783569 33.01973343]
[78.23159027 45.83602142]
[86.02535248 58.65231323]
[89.39832306 59.83319855]
[92.35256195 62.73529434]
[94.07217407 67.13686371]
[93.87472534 72.45437622]
[100.90531158 85.70468903]
[112.65312195 93.28628540]
[112.34500885 107.26472473]
[119.37559509 120.51503754]
[126.40617371 133.76535034]
[133.43676758 147.01567078]
[140.46734619 160.26599121]
[147.49792480 173.51629639]
[154.52851868 186.76661682]
[161.55909729 200.01693726]
[168.38061523 206.16938782]
[168.59472656 213.59509277]
[175.36544800 226.98005676]
[186.09930420 227.68360901]
[195.48835754 232.76490784]
[201.85057068 241.23675537]
[204.07844543 251.51177979]
[201.83129883 261.69964600]
[195.58549500 269.95477295]
[201.56150818 283.71295166]
[207.53752136 297.47113037]
[213.51353455 311.22927856]
[226.10827637 320.80441284]
[224.08210754 335.56057739]
[230.05812073 349.31872559]
[236.03413391 363.07690430]
[242.01014709 376.83508301]
[247.98616028 390.59323120]
[252.26667786 393.75427246]
[254.63580322 397.84307861]
[255.06280518 401.96221924]
[253.88305664 405.33557129]
[259.04391479 419.41979980]
[264.20474243 433.50402832]
[269.36560059 447.58828735]
[276.84539795 449.16296387]
[283.24163818 453.22183228]
[287.76907349 459.20989990]
[289.89196777 466.33914185]
[289.38705444 473.69201660]
[286.36611938 480.33959961]
[281.25582886 485.45889282]
[285.02017212 499.97888184]
[288.78454590 514.49884033]
[292.54888916 529.01879883]
[304.42962646 540.32281494]
[300.31793213 556.19818115]
[284.44360352 560.31365967]
[273.13674927 548.43560791]
[278.02893066 532.78320312]
[274.26455688 518.26318359]
[270.50021362 503.74322510]
[266.73583984 489.22326660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 139]
[5 135]
[6 134]
[7 133]
[8 132]
[9 131]
[11 129]
[12 128]
[13 127]
[14 126]
[17 120]
[18 119]
[19 117]
[20 116]
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[26 110]
[28 108]
[29 107]
[30 103]
[31 102]
[32 101]
[37 96]
[38 95]
[39 94]
[41 92]
[42 91]
[43 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[62 74]
[63 73]
[64 72]
[149 160]
[150 159]
[151 158]
[152 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
