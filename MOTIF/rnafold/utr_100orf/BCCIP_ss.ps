%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCGCAGUGUGAGCGGCAACAUGGCGUCCAGGUCUAAGCGGCGUGCCGUGGAAAGUGGGGUUCCGCAGCCGCCGGAUCCCCCAGUCCAGCGCGACGAGGAAGAGGAAAAAGAAGUCGAAA\
) } def
/len { sequence length } bind def

/coor [
[16.30342865 292.63958740]
[9.19519329 289.88156128]
[2.57861567 286.10028076]
[-3.40009570 281.38055420]
[-15.02533054 290.85968018]
[-26.65056610 300.33880615]
[-38.27579880 309.81793213]
[-49.90103531 319.29708862]
[-55.70685959 334.01452637]
[-70.46022034 336.06088257]
[-82.08545685 345.54000854]
[-93.71068573 355.01913452]
[-105.33592224 364.49826050]
[-104.33705902 379.98315430]
[-112.65918732 393.07980347]
[-127.10227966 398.75225830]
[-142.11267090 394.81933594]
[-151.91856384 382.79336548]
[-152.74938965 367.29855347]
[-144.28567505 354.29296875]
[-129.78190613 348.77752686]
[-114.81505585 352.87304688]
[-103.18981934 343.39392090]
[-91.56458282 333.91476440]
[-79.93934631 324.43563843]
[-74.96504211 310.39620972]
[-59.38016510 307.67184448]
[-47.75493240 298.19271851]
[-36.12969589 288.71359253]
[-24.50446129 279.23443604]
[-12.87922668 269.75531006]
[-20.10935020 246.33084106]
[-15.60864830 222.17930603]
[-0.36151123 202.84913635]
[22.17317581 192.80416870]
[46.84660339 194.39285278]
[53.45251465 180.92578125]
[60.05842972 167.45872498]
[51.92821121 153.25808716]
[53.84252930 136.84053040]
[65.24790192 124.64972687]
[81.82724762 121.58776093]
[88.08988190 107.95767212]
[86.98422241 94.01962280]
[98.28002167 85.77969360]
[104.54265594 72.14960480]
[110.80529785 58.51951218]
[117.06793213 44.88941956]
[123.33056641 31.25932693]
[123.09127045 24.46652794]
[125.95754242 19.39249611]
[130.27116394 17.10994530]
[137.21611023 3.81454396]
[144.16107178 -9.48085690]
[151.10601807 -22.77625656]
[144.04864502 -34.69115829]
[143.83183289 -48.42897797]
[150.40495300 -60.37032700]
[161.94265747 -67.42252350]
[175.35041809 -67.82034302]
[182.62995911 -80.93554688]
[189.90948486 -94.05074310]
[197.18901062 -107.16593933]
[197.12118530 -122.98700714]
[210.06283569 -130.36012268]
[217.34236145 -143.47532654]
[224.62188721 -156.59051514]
[231.73469543 -169.79687500]
[238.67965698 -183.09228516]
[237.44715881 -199.44505310]
[251.14350891 -208.46403503]
[265.67904663 -200.87129211]
[266.10089111 -184.47756958]
[251.97505188 -176.14733887]
[245.03010559 -162.85192871]
[244.71841431 -155.38143921]
[237.73709106 -149.31098938]
[230.45756531 -136.19580078]
[223.17803955 -123.08059692]
[223.76654053 -108.19762421]
[210.30421448 -99.88641357]
[203.02468872 -86.77121735]
[195.74514771 -73.65601349]
[188.46562195 -60.54081726]
[195.86614990 -45.94662476]
[193.12275696 -29.64709473]
[181.11456299 -18.04961586]
[164.40141296 -15.83130741]
[157.45646667 -2.53590703]
[150.51152039 10.75949383]
[143.56657410 24.05489349]
[136.96066284 37.52196121]
[130.69802856 51.15205383]
[124.43538666 64.78214264]
[118.17275238 78.41223907]
[111.91011810 92.04232788]
[113.01577759 105.98037720]
[101.71997833 114.22030640]
[95.45734406 127.85039520]
[103.10913086 139.39256287]
[104.02147675 153.10176086]
[98.06161499 165.36070251]
[86.89590454 172.98822021]
[73.52549744 174.06463623]
[66.91958618 187.53169250]
[60.31367111 200.99876404]
[66.29978180 205.83386230]
[71.49891663 211.50163269]
[75.79656982 217.87564087]
[79.09832001 224.81388855]
[81.33193970 232.16200256]
[82.44893646 239.75668335]
[82.42562103 247.42935181]
[81.26361084 255.00978088]
[78.98976898 262.33004761]
[75.65557861 269.22808838]
[71.33598328 275.55139160]
[66.12770081 281.16030884]
[60.14705276 285.93121338]
[53.52738190 289.75915527]
[46.41606140 292.56011963]
[38.97122192 294.27307129]
[31.35824013 294.86105347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[10 25]
[11 24]
[12 23]
[13 22]
[36 106]
[37 105]
[38 104]
[42 99]
[43 98]
[45 96]
[46 95]
[47 94]
[48 93]
[49 92]
[52 91]
[53 90]
[54 89]
[55 88]
[60 84]
[61 83]
[62 82]
[63 81]
[65 79]
[66 78]
[67 77]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
