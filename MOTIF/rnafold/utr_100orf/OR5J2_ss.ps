%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGAUGAUAAUUUUACAGUUGUCACUGAGUUUAUUCUUUUGGGAUUGACAGAUCAUGCUGAACUAAAAGCUGUGCUUUUUGUGGUGUUCCUGGUGA\
) } def
/len { sequence length } bind def

/coor [
[-46.18008041 197.15370178]
[-58.42153931 188.52943420]
[-67.72737122 176.81709290]
[-81.60778046 182.50341797]
[-95.48818970 188.18974304]
[-109.36859131 193.87606812]
[-115.75175476 210.07170105]
[-131.52941895 216.59425354]
[-146.87049866 209.90167236]
[-160.56735229 216.01692200]
[-174.26420593 222.13218689]
[-187.96104431 228.24743652]
[-201.65789795 234.36268616]
[-215.35475159 240.47795105]
[-229.05158997 246.59320068]
[-242.74844360 252.70845032]
[-251.93054199 266.29598999]
[-268.26739502 264.86807251]
[-274.95306396 249.89363098]
[-265.10989380 236.77708435]
[-248.86369324 239.01161194]
[-235.16685486 232.89634705]
[-221.47000122 226.78109741]
[-207.77314758 220.66584778]
[-194.07630920 214.55058289]
[-180.37945557 208.43533325]
[-166.68260193 202.32008362]
[-152.98576355 196.20481873]
[-150.06269836 183.55027771]
[-140.20108032 174.80090332]
[-126.89939117 173.36366272]
[-115.05491638 179.99566650]
[-101.17451477 174.30934143]
[-87.29410553 168.62301636]
[-73.41369629 162.93669128]
[-74.99973297 148.06181335]
[-72.32733917 133.32785034]
[-65.60467529 119.93040466]
[-55.36893463 108.95906830]
[-42.44338989 101.30880737]
[-27.87120628 97.60699463]
[-12.83124828 98.16189575]
[1.45729625 102.93709564]
[13.83373833 111.55371094]
[23.29017639 123.32043457]
[37.17058182 117.63410187]
[51.05099106 111.94777679]
[64.93139648 106.26145172]
[78.81180573 100.57512665]
[84.76217651 85.26639557]
[99.86208344 78.80445099]
[115.04480743 85.06935120]
[128.74165344 78.95410156]
[142.43850708 72.83884430]
[156.13534546 66.72358704]
[169.83219910 60.60833740]
[180.70208740 43.77295303]
[199.78388977 46.15990829]
[213.07406616 39.20495605]
[226.36422729 32.25000381]
[239.54463196 25.08920479]
[252.61207581 17.72429276]
[265.67953491 10.35938168]
[267.32757568 -5.06992674]
[277.75494385 -16.56120491]
[292.95211792 -19.69581985]
[307.07543945 -13.26844978]
[314.69424438 0.24945059]
[312.87890625 15.65997314]
[302.32748413 27.03745651]
[287.09719849 30.00702858]
[273.04443359 23.42682457]
[259.97698975 30.79173660]
[246.90954590 38.15664673]
[242.55133057 44.29109573]
[233.31918335 45.54017258]
[220.02902222 52.49512482]
[206.73884583 59.45007706]
[204.50099182 69.64165497]
[196.79562378 77.00246429]
[186.07525635 78.84760284]
[175.94744873 74.30518341]
[162.25061035 80.42044067]
[148.55375671 86.53569031]
[134.85690308 92.65094757]
[121.16005707 98.76620483]
[118.02458191 111.15279388]
[108.33921814 119.48661041]
[95.62348938 120.73925018]
[84.49813080 114.45553589]
[70.61772156 120.14186096]
[56.73731613 125.82818604]
[42.85691071 131.51451111]
[28.97650146 137.20083618]
[30.49337387 152.22012329]
[27.71941948 167.04333496]
[20.88785172 180.47071838]
[10.55993176 191.41796875]
[-2.42111945 199.00376892]
[-16.99897385 202.62071228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[58 78]
[59 77]
[60 76]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
