%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCAUUUGGCAGACGAGUCACCCGGGCAGUGGGAUGAGGAUGGCACCAACAGAGUCAACAGAAGGAAGACGGCUCUGGCCGGGCCCCAGGGAGGGAGGCAGCGGUAAGGAAACAACUUCAGAGAAGUUAAGCA\
) } def
/len { sequence length } bind def

/coor [
[66.05138397 198.46101379]
[52.99032593 187.65151978]
[59.76172256 172.10853577]
[60.45447159 157.12454224]
[61.14722443 142.14054871]
[66.09052277 126.28520966]
[74.90047455 113.47976685]
[86.66645813 104.51184845]
[71.98945618 107.60792542]
[57.31245804 110.70400238]
[42.63545609 113.80007935]
[40.98711777 128.82473755]
[34.78392029 142.58564758]
[24.64482498 153.74034119]
[11.57210636 161.20486450]
[-3.14774895 164.25910950]
[-18.07062149 162.61630249]
[-31.73644447 156.44982910]
[-42.81205750 146.37506104]
[-50.22125626 133.38796997]
[-64.89825439 136.48403931]
[-79.57525635 139.58012390]
[-94.21551514 142.84550476]
[-108.81709290 146.27976990]
[-123.41866302 149.71401978]
[-138.02023315 153.14828491]
[-147.65432739 165.97653198]
[-163.69413757 166.29852295]
[-173.83531189 153.86726379]
[-170.29840088 138.21894836]
[-155.79661560 131.35762024]
[-141.45448303 138.54670715]
[-126.85292053 135.11245728]
[-112.25135040 131.67819214]
[-97.64978027 128.24394226]
[-91.80646515 123.60881805]
[-82.67133331 124.90312195]
[-67.99433136 121.80704498]
[-53.31733322 118.71096802]
[-51.78520584 103.83772278]
[-45.72271347 90.14771271]
[-35.71207047 78.98674774]
[-22.72428131 71.45625305]
[-8.02497196 68.30460358]
[6.94894791 69.85276031]
[20.72974205 75.96160889]
[31.96271515 86.04441071]
[39.53938293 99.12307739]
[54.21638107 96.02700043]
[68.89337921 92.93092346]
[83.57038116 89.83484650]
[92.33100128 77.65898895]
[90.60235596 62.75892639]
[88.87370300 47.85886765]
[87.14505768 32.95880890]
[85.41641235 18.05874825]
[83.68776703 3.15868902]
[81.95912170 -11.74137020]
[67.32893372 -15.86763573]
[55.39455032 -25.28246307]
[47.97587967 -38.55015945]
[46.20421600 -53.64749908]
[50.34972382 -68.27224731]
[59.78024292 -80.19422913]
[73.05768585 -87.59544373]
[88.15734100 -89.34724426]
[102.77662659 -85.18250275]
[114.68619537 -75.73631287]
[122.06993103 -62.44914246]
[123.80187225 -47.34719467]
[119.61790466 -32.73340607]
[110.15605164 -20.83626938]
[96.85917664 -13.47001743]
[98.58782959 1.43004251]
[100.31647491 16.33010292]
[102.04512024 31.23016167]
[103.77376556 46.13022232]
[105.50241089 61.03028107]
[107.23105621 75.93034363]
[120.16330719 83.53014374]
[134.02149963 77.78989410]
[147.87968445 72.04964447]
[161.73788452 66.30938721]
[172.55014038 51.45523453]
[189.82550049 54.31620789]
[203.54740906 48.25739288]
[217.26931763 42.19857788]
[230.92033386 35.98168182]
[244.49864197 29.60753441]
[249.62947083 14.65928936]
[263.86401367 7.79248667]
[278.75720215 13.08107853]
[285.47311401 27.38743782]
[280.02734375 42.22385788]
[265.65078735 48.78814697]
[250.87278748 43.18583679]
[237.29447937 49.55998230]
[232.53370667 55.30137634]
[223.32814026 55.92048264]
[209.60623169 61.97929764]
[195.88432312 68.03811646]
[191.18737793 79.24645233]
[179.73065186 84.38105774]
[167.47813416 80.16757965]
[153.61994934 85.90783691]
[139.76174927 91.64808655]
[125.90355682 97.38833618]
[123.76790619 104.57784271]
[138.68164062 106.18427277]
[153.60923767 104.71224213]
[163.15910339 116.27942657]
[158.88743591 130.65832520]
[144.57115173 135.13537598]
[132.86878967 125.75279236]
[119.49660492 118.95685577]
[117.36095428 126.14636230]
[125.83799744 138.52131653]
[134.31504822 150.89628601]
[142.79208374 163.27124023]
[151.26913452 175.64620972]
[159.74618530 188.02116394]
[173.68566895 197.67140198]
[168.27139282 213.73757935]
[151.33427429 212.98246765]
[147.37121582 196.49821472]
[138.89418030 184.12326050]
[130.41712952 171.74829102]
[121.94007874 159.37333679]
[113.46303558 146.99836731]
[104.98599243 134.62341309]
[97.77229309 136.67587280]
[83.34490967 140.78082275]
[76.13121796 142.83329773]
[75.43846893 157.81729126]
[74.74571228 172.80128479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 135]
[4 134]
[5 133]
[8 51]
[9 50]
[10 49]
[11 48]
[20 39]
[21 38]
[22 37]
[23 35]
[24 34]
[25 33]
[26 32]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[80 107]
[81 106]
[82 105]
[83 104]
[85 101]
[86 100]
[87 99]
[88 97]
[89 96]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
