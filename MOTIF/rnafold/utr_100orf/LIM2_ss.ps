%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCAGAAGGAGGGCUCGGGCAGGCUCUGCCACUCAGAUCACCAUGUACAGCUUCAUGGGUGGUGGCCUGUUCUGUGCCUGGGUGGGGACCAUCCUCCUGGUGGUGGCCAUGGCAACAGACCACUGGAUGCAGUACCGGCUGU\
) } def
/len { sequence length } bind def

/coor [
[213.07319641 244.41380310]
[203.48681641 232.87684631]
[193.90043640 221.33988953]
[184.31405640 209.80293274]
[174.72767639 198.26597595]
[155.43258667 200.91960144]
[138.26902771 191.41598511]
[130.16148376 173.39436340]
[134.49731445 153.96870422]
[123.94832611 143.30480957]
[113.39933014 132.64091492]
[102.85033417 121.97702026]
[80.24716949 102.91008759]
[66.84538269 96.17272186]
[53.44359207 89.43535614]
[40.04180527 82.69799805]
[24.23674011 83.41245270]
[16.34079361 70.78298950]
[2.93900704 64.04562378]
[-10.46278000 57.30825806]
[-23.86456871 50.57089233]
[-37.33855438 43.97910309]
[-50.88315582 37.53366089]
[-64.42775726 31.08821869]
[-77.97236633 24.64277840]
[-91.51696777 18.19733620]
[-105.06156921 11.75189400]
[-111.79151154 11.89809704]
[-116.79583740 9.01265335]
[-119.04404449 4.72260618]
[-132.29672241 -2.30352044]
[-145.54940796 -9.32964706]
[-158.80207825 -16.35577393]
[-172.05476379 -23.38190079]
[-185.30744934 -30.40802765]
[-198.56013489 -37.43415451]
[-211.81280518 -44.46028137]
[-225.14082336 -51.34243011]
[-238.54261780 -58.07979584]
[-249.77842712 -47.87582779]
[-263.94302368 -42.42340851]
[-279.12072754 -42.45992661]
[-293.25891113 -47.98044586]
[-304.44549561 -58.23836517]
[-311.16757202 -71.84637451]
[-312.51605225 -86.96411896]
[-308.30856323 -101.54703522]
[-299.11410522 -113.62290192]
[-286.17620850 -121.55856323]
[-271.24456787 -124.28079224]
[-256.33856201 -121.42141724]
[-243.47415161 -113.36714935]
[-234.39111328 -101.20726776]
[-230.31785583 -86.58628845]
[-231.80525208 -71.48158264]
[-218.40345764 -64.74421692]
[-210.95944214 -64.54863739]
[-204.78668213 -57.71295929]
[-191.53399658 -50.68683243]
[-178.28132629 -43.66070557]
[-165.02864075 -36.63458252]
[-151.77595520 -29.60845375]
[-138.52328491 -22.58232689]
[-125.27059937 -15.55620098]
[-112.01791382 -8.53007412]
[-98.61612701 -1.79270899]
[-85.07152557 4.65273237]
[-71.52692413 11.09817410]
[-57.98231888 17.54361534]
[-44.43771744 23.98905754]
[-30.89311218 30.43449974]
[-23.44660378 30.46875954]
[-17.12720299 37.16910553]
[-3.72541499 43.90647125]
[9.67637253 50.64383698]
[23.07815933 57.38120270]
[37.92464066 56.18484497]
[46.77917099 69.29620361]
[60.18095779 76.03356934]
[73.58274841 82.77093506]
[86.98453522 89.50830078]
[101.70026398 86.60187531]
[111.53433228 75.27530670]
[121.36840057 63.94874573]
[131.20246887 52.62218094]
[141.03654480 41.29561615]
[150.87062073 29.96905136]
[156.68920898 14.04484558]
[173.60183716 15.22778702]
[177.14700317 31.80693436]
[162.19717407 39.80312347]
[152.36311340 51.12968445]
[142.52903748 62.45624924]
[132.69496155 73.78281403]
[122.86089325 85.10938263]
[113.02682495 96.43594360]
[113.51422882 111.42802429]
[124.06322479 122.09191895]
[134.61221313 132.75581360]
[145.16120911 143.41970825]
[155.24894714 139.63481140]
[165.98350525 139.46194458]
[176.11503601 142.89538574]
[184.47257996 149.51101685]
[190.09942627 158.51855469]
[192.36256409 168.85586548]
[191.02380371 179.31422424]
[186.26463318 188.67961121]
[195.85101318 200.21655273]
[205.43739319 211.75350952]
[215.02377319 223.29046631]
[224.61015320 234.82742310]
[234.16290283 234.43373108]
[242.68103027 238.46182251]
[248.27125549 245.87437439]
[249.75741577 254.89871216]
[246.92625427 263.44976807]
[255.74302673 275.58502197]
[264.55981445 287.72027588]
[273.37658691 299.85552979]
[281.01101685 305.00769043]
[282.24954224 312.35055542]
[290.80136108 324.67398071]
[299.74908447 336.71301270]
[309.08325195 348.45495605]
[318.41744995 360.19686890]
[327.75164795 371.93881226]
[343.19802856 377.44705200]
[345.88439941 393.62469482]
[333.04721069 403.82952881]
[317.89230347 397.56372070]
[316.00970459 381.27301025]
[306.67550659 369.53106689]
[297.34133911 357.78912354]
[288.00714111 346.04721069]
[284.48901367 345.30255127]
[281.17242432 342.77197266]
[278.91360474 338.57687378]
[278.47793579 333.22579956]
[269.92611694 320.90237427]
[261.24133301 308.67233276]
[252.42454529 296.53704834]
[243.60777283 284.40179443]
[234.79100037 272.26654053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[4 109]
[5 108]
[9 100]
[10 99]
[11 98]
[12 97]
[13 81]
[14 80]
[15 79]
[16 78]
[18 76]
[19 75]
[20 74]
[21 73]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 56]
[39 55]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[117 144]
[118 143]
[119 142]
[120 141]
[122 140]
[123 139]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
