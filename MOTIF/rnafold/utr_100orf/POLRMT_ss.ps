%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGGCGCAUGCGCAGGCGCGGGCCGGUGGGGUGGCCUGGAGCGGCGUGCGUAAUGUCGGCACUUUGCUGGGGCCGCGGAGCGGCGGGGCUCAAACGAGCCCUACGGCCUUGCGGCCGCCCGGGACUCCCCGGCAAAGAAGGGACCGCCGGUG\
) } def
/len { sequence length } bind def

/coor [
[111.41861725 249.56199646]
[98.29101562 238.83343506]
[104.96623230 223.24888611]
[105.56637573 208.26089478]
[106.16651917 193.27291870]
[98.94462585 180.24626160]
[107.22786713 166.76670837]
[107.82801819 151.77871704]
[108.42816162 136.79072571]
[109.02830505 121.80274200]
[98.66754913 121.91561890]
[90.01152802 117.68877411]
[84.62556458 110.59593201]
[69.89577484 113.43022919]
[55.16598511 116.26453400]
[40.43619537 119.09883881]
[25.70640373 121.93314362]
[10.97661400 124.76744080]
[-1.11297250 134.97296143]
[-15.07296562 129.77989197]
[-29.80275726 132.61419678]
[-44.50345230 135.59573364]
[-59.17358398 138.72419739]
[-73.74321747 142.29150391]
[-88.19923401 146.29446411]
[-102.65525055 150.29740906]
[-117.11126709 154.30035400]
[-131.56727600 158.30331421]
[-146.02330017 162.30625916]
[-153.59197998 176.18035889]
[-168.77767944 180.55874634]
[-182.57096863 172.84379578]
[-186.78855896 157.61265564]
[-178.92820740 143.90170288]
[-163.65333557 139.84538269]
[-150.02624512 147.85025024]
[-135.57023621 143.84729004]
[-121.11421967 139.84434509]
[-106.65820312 135.84140015]
[-92.20218658 131.83843994]
[-77.74617004 127.83548737]
[-75.68913269 124.90685272]
[-72.08496857 122.85308075]
[-67.37192535 122.40235901]
[-62.30204391 124.05406189]
[-47.63191223 120.92559814]
[-41.71294403 116.42964172]
[-32.63705826 117.88440704]
[-17.90726852 115.05010986]
[-6.87125587 105.04732513]
[8.14231110 110.03765106]
[22.87210083 107.20334625]
[37.60189056 104.36904907]
[52.33168030 101.53474426]
[67.06147003 98.70043945]
[81.79125977 95.86613464]
[91.70443726 81.45691681]
[110.64613342 80.79766846]
[123.37479401 96.76139069]
[136.00097656 88.66325378]
[148.62715149 80.56512451]
[148.01583862 65.28201294]
[155.08970642 51.83369827]
[167.86035156 43.78527451]
[182.84465027 43.21353531]
[196.01452637 50.17197037]
[208.64070129 42.07383728]
[221.26687622 33.97570801]
[233.89305115 25.87757492]
[246.51922607 17.77944374]
[259.14538574 9.68131256]
[271.77157593 1.58318150]
[284.39773560 -6.51494980]
[297.02392578 -14.61308098]
[309.65008545 -22.71121216]
[322.27627563 -30.80934525]
[334.65371704 -39.28274918]
[346.77130127 -48.12379074]
[351.89624023 -55.75419617]
[359.22097778 -57.01763153]
[371.51303101 -65.61444855]
[383.80508423 -74.21126556]
[389.08169556 -81.73759460]
[396.43023682 -82.85421753]
[408.89184570 -91.20336151]
[421.35345459 -99.55250549]
[433.81506348 -107.90164948]
[446.27667236 -116.25080109]
[439.79144287 -160.81994629]
[450.12945557 -171.68850708]
[460.46746826 -182.55706787]
[470.80548096 -193.42561340]
[481.14349365 -204.29417419]
[491.48150635 -215.16273499]
[501.81951904 -226.03128052]
[505.13833618 -242.09109497]
[520.78894043 -246.98924255]
[532.67126465 -235.68693542]
[528.56182861 -219.81101990]
[512.68804932 -215.69326782]
[502.35006714 -204.82472229]
[492.01205444 -193.95616150]
[481.67404175 -183.08760071]
[471.33602905 -172.21905518]
[460.99801636 -161.35049438]
[450.66000366 -150.48193359]
[454.32302856 -143.93730164]
[465.31207275 -124.30339050]
[479.98220825 -127.43185425]
[488.36962891 -140.82688904]
[503.79064941 -144.28631592]
[517.09625244 -135.75775146]
[520.39245605 -120.30101776]
[511.72369385 -107.08633423]
[496.23297119 -103.95372772]
[483.11068726 -112.76172638]
[468.44055176 -109.63326263]
[454.62582397 -103.78918457]
[442.16421509 -95.44004059]
[429.70260620 -87.09089661]
[417.24096680 -78.74175262]
[404.77935791 -70.39260864]
[392.40191650 -61.91920090]
[380.10986328 -53.32238770]
[367.81777954 -44.72557068]
[355.61236572 -36.00620270]
[343.49478149 -27.16516113]
[342.60189819 -23.69945717]
[339.95285034 -20.50719452]
[335.70108032 -18.42431068]
[330.37438965 -18.18317032]
[317.74822998 -10.08503914]
[305.12203979 -1.98690760]
[292.49588013 6.11122370]
[279.86968994 14.20935535]
[267.24353027 22.30748749]
[254.61735535 30.40561867]
[241.99118042 38.50374985]
[229.36500549 46.60188293]
[216.73883057 54.70001221]
[204.11265564 62.79814529]
[204.94425964 77.67006683]
[198.17512512 91.05046082]
[185.53388977 99.30062103]
[170.36076355 100.12100983]
[156.72528076 93.19129944]
[144.09910583 101.28942871]
[131.47293091 109.38756561]
[124.01628876 122.40288544]
[123.41614532 137.39086914]
[122.81600189 152.37886047]
[122.21585846 167.36685181]
[129.39482117 181.46554565]
[121.15451050 193.87306213]
[120.55436707 208.86103821]
[119.95421600 223.84902954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 156]
[4 155]
[5 154]
[7 152]
[8 151]
[9 150]
[10 149]
[13 56]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[20 49]
[21 48]
[22 46]
[23 45]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[59 148]
[60 147]
[61 146]
[66 141]
[67 140]
[68 139]
[69 138]
[70 137]
[71 136]
[72 135]
[73 134]
[74 133]
[75 132]
[76 131]
[77 127]
[78 126]
[80 125]
[81 124]
[82 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
