%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCCAAAUCACUCAUUGUUUGUGAAAGCUGAGCUCACAGCAAAACAAGCCACCAUGAAGCUGUCGGUGUGUCUCCUGCUGGUCACGCUGGCCCUCUGCUGCUACCAGGCCAAUGCCGAGUUCUGCCCAGCUCUUGUUUCUGAGCUGUUAGACU\
) } def
/len { sequence length } bind def

/coor [
[95.61260223 216.80206299]
[82.48500061 206.07348633]
[89.16021729 190.48895264]
[89.76036072 175.50096130]
[90.36050415 160.51296997]
[90.96064758 145.52497864]
[84.05328369 142.60295105]
[78.20897675 156.41757202]
[64.39443970 150.57304382]
[70.23855591 136.75886536]
[63.33118820 133.83682251]
[52.99317551 144.70538330]
[42.65516281 155.57394409]
[32.31715393 166.44248962]
[36.07228851 181.40586853]
[31.11985588 196.01672363]
[19.04015350 205.61277771]
[3.68777347 207.13197327]
[-10.03839684 200.08955383]
[-17.75838470 186.73269653]
[-17.00877380 171.32356262]
[-8.02875805 158.77912903]
[6.31617022 153.10227966]
[21.44859695 156.10447693]
[31.78660774 145.23593140]
[42.12462234 134.36737061]
[52.46263123 123.49881744]
[56.60240936 94.62689209]
[73.78834534 77.67624664]
[92.98141479 75.86965179]
[93.28154755 60.87265396]
[85.82192230 46.92043304]
[93.81233215 34.35052109]
[94.11246490 19.35352516]
[94.41259003 4.35652781]
[94.71272278 -10.64046860]
[95.01285553 -25.63746643]
[95.31298828 -40.63446426]
[81.83339691 -53.71081543]
[85.13965607 -74.57023621]
[80.99227142 -88.98548126]
[76.84488678 -103.40071869]
[72.69750977 -117.81596375]
[68.55012512 -132.23120117]
[54.95545197 -133.02911377]
[42.33299637 -138.92308044]
[32.56412506 -149.28858948]
[27.19659424 -162.81890869]
[27.20252800 -177.68774414]
[32.81126785 -191.79527283]
[21.43936157 -201.57687378]
[10.06745625 -211.35847473]
[-4.68942261 -206.85980225]
[-19.52963829 -211.07542419]
[-29.71773338 -222.66017151]
[-32.00271988 -237.91737366]
[-25.65547180 -251.97853088]
[-12.70137119 -260.35675049]
[2.72597694 -260.37860107]
[15.70376110 -252.03710938]
[22.09081650 -237.99400330]
[19.84905815 -222.73037720]
[31.22096443 -212.94877625]
[42.59287262 -203.16717529]
[56.34843826 -209.14916992]
[56.94858551 -224.13716125]
[57.54872894 -239.12515259]
[58.14887238 -254.11314392]
[58.74901581 -269.10113525]
[59.34915924 -284.08911133]
[59.94930267 -299.07711792]
[60.54944992 -314.06509399]
[61.14959335 -329.05310059]
[53.27598572 -336.65914917]
[50.96688843 -347.13482666]
[54.75454712 -356.93521118]
[63.14913559 -362.88034058]
[64.34846497 -377.83230591]
[56.82577515 -392.40423584]
[65.91059875 -406.05700684]
[82.25724792 -404.74581909]
[89.04968262 -389.81948853]
[79.30043793 -376.63296509]
[78.10111237 -361.68099976]
[87.69028473 -344.92764282]
[76.13758087 -328.45294189]
[75.53743744 -313.46496582]
[74.93729401 -298.47695923]
[74.33715057 -283.48898315]
[73.73700714 -268.50097656]
[73.13686371 -253.51300049]
[72.53672028 -238.52500916]
[71.93657684 -223.53701782]
[71.33642578 -208.54902649]
[89.67311096 -200.14535522]
[101.35025787 -184.31562805]
[103.83548737 -165.30662537]
[96.98592377 -147.93754578]
[82.96537018 -136.37858582]
[87.11274719 -121.96334839]
[91.26013184 -107.54810333]
[95.40751648 -93.13285828]
[99.55489349 -78.71762085]
[98.74712372 -93.69585419]
[108.19178772 -105.34910583]
[123.01259613 -107.66077423]
[135.55752563 -99.43733978]
[139.34959412 -84.92457581]
[132.43095398 -71.61546326]
[118.37167358 -66.38154602]
[133.24497986 -68.32703400]
[148.11827087 -70.27252960]
[160.80079651 -80.66896057]
[176.04808044 -74.63140106]
[178.17504883 -58.37077332]
[164.99363708 -48.61461639]
[150.06376648 -55.39922714]
[135.19047546 -53.45373535]
[120.31716919 -51.50824356]
[110.30998993 -40.33433151]
[110.00985718 -25.33733368]
[109.70972443 -10.34033680]
[109.40959167 4.65666008]
[109.10945892 19.65365791]
[108.80932617 34.65065384]
[116.29042053 47.53019333]
[108.27854156 61.17278671]
[107.97840881 76.16978455]
[136.57846069 86.24470520]
[145.79748535 126.73175049]
[155.46481323 138.20094299]
[165.13215637 149.67015076]
[174.79949951 161.13935852]
[184.46682739 172.60855103]
[194.13417053 184.07775879]
[209.60072327 182.82664490]
[222.83125305 190.93421936]
[228.73834229 205.28294373]
[225.05059814 220.35545349]
[213.18603516 230.35603333]
[197.70681763 231.43928528]
[184.56501770 223.18865967]
[178.81393433 208.77670288]
[182.66496277 193.74508667]
[172.99763489 182.27589417]
[163.33029175 170.80668640]
[153.66294861 159.33749390]
[143.99562073 147.86828613]
[134.32827759 136.39909363]
[127.23336792 138.83059692]
[124.35026550 153.55091858]
[113.04354858 143.69361877]
[105.94863892 146.12512207]
[105.34849548 161.11311340]
[104.74835205 176.10110474]
[104.14820099 191.08909607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 156]
[4 155]
[5 154]
[6 153]
[11 27]
[12 26]
[13 25]
[14 24]
[30 128]
[31 127]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[50 64]
[51 63]
[52 62]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[77 84]
[78 83]
[110 119]
[111 118]
[112 117]
[130 149]
[131 148]
[132 147]
[133 146]
[134 145]
[135 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
