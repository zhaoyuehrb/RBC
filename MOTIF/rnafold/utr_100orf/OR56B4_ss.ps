%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCAUGAACCACGAUGCUCAGCCCCUUAGCUGAACUUUUAAACAGAGAUUUCUUCUAUUUCAGACAGACACUGAGACUGAGGCACCCAUUCCAUGGAUACCUCCACCAGUGUUACCUAUGACUCCAGCCUCCAGAUUUCCCAGUUCAUCCUGAUGGGAUUACCAGGCAUUCAUGAGUGGCAGCACUGGCUCU\
) } def
/len { sequence length } bind def

/coor [
[73.81369781 190.12763977]
[67.40193176 209.54850769]
[53.54861832 224.98580933]
[34.40474701 233.69493103]
[13.08523655 234.00367737]
[7.23410702 247.81541443]
[1.38297796 261.62716675]
[-4.46815109 275.43890381]
[3.64828658 288.66400146]
[2.40754652 304.13137817]
[-7.71328115 315.89355469]
[-22.82253265 319.42770386]
[-37.11038971 313.37487793]
[-45.08288574 300.06250000]
[-43.67442703 284.60949707]
[-33.42659760 272.95779419]
[-18.27989578 269.58776855]
[-12.42876625 255.77603149]
[-6.57763720 241.96429443]
[-0.72650814 228.15254211]
[-12.60237217 218.98936462]
[-24.47823524 228.15254211]
[-36.35409927 237.31571960]
[-48.22996140 246.47889709]
[-60.10582733 255.64208984]
[-61.87800598 271.34671021]
[-74.28787231 281.13296509]
[-89.97286987 279.19482422]
[-99.62737274 266.68218994]
[-97.52353668 251.01856995]
[-84.90952301 241.49688721]
[-69.26900482 243.76622009]
[-57.39314270 234.60304260]
[-45.51728058 225.43986511]
[-33.64141464 216.27668762]
[-21.76555061 207.11349487]
[-25.81102943 195.30717468]
[-26.93156815 182.97006226]
[-25.10675430 170.81063843]
[-20.48406601 159.51676941]
[-13.36798859 149.71687317]
[-4.20032358 141.94490051]
[6.46705389 136.61135864]
[18.00532722 133.98173523]
[29.74575996 134.16355896]
[41.01844788 137.10269165]
[51.19054413 142.58891296]
[61.27505875 131.48474121]
[71.35957336 120.38057709]
[81.44408417 109.27640533]
[80.84365845 101.80047607]
[66.67004395 106.71053314]
[55.33297348 116.53249359]
[40.33626556 116.21827698]
[29.42054558 105.93007660]
[28.22002411 90.97819519]
[37.35435486 79.08013153]
[52.10880280 76.37712097]
[64.86722565 84.26361847]
[79.64280701 86.84862518]
[79.04237366 79.37269592]
[67.31490326 70.02034760]
[55.58743286 60.66800308]
[43.85995865 51.31565475]
[32.13248825 41.96331024]
[20.40501595 32.61096191]
[5.11436367 35.88662720]
[-8.68023872 28.52164459]
[-14.46540260 13.99353695]
[-9.50955009 -0.83796793]
[3.84731746 -8.96988773]
[19.29849434 -6.56257820]
[29.54840851 5.24730253]
[29.75736237 20.88348961]
[41.48483658 30.23583603]
[53.21230698 39.58818436]
[64.93978119 48.94053268]
[76.66725159 58.29287720]
[88.39472198 67.64522552]
[94.92961121 63.96484375]
[107.99939728 56.60408020]
[114.53428650 52.92369843]
[112.61612701 38.04684830]
[110.69796753 23.16999817]
[108.77981567 8.29314804]
[95.32507324 0.79140729]
[88.94210815 -13.03288746]
[91.88845825 -27.79035950]
[102.82868958 -37.86256409]
[100.91053772 -52.73941422]
[98.99237823 -67.61626434]
[97.07421875 -82.49311829]
[89.05205536 -97.42902374]
[101.18350983 -109.27234650]
[115.92230988 -100.89355469]
[111.95107269 -84.41127014]
[113.86922455 -69.53442383]
[115.78738403 -54.65757370]
[117.70554352 -39.78072357]
[130.84283447 -32.81296921]
[137.43612671 -19.28549957]
[134.76850891 -4.29426146]
[123.65666199 6.37499046]
[125.57482147 21.25184059]
[127.49298096 36.12869263]
[129.41113281 51.00554276]
[130.45863342 72.88958740]
[122.24237823 89.94828796]
[107.98078918 99.02479553]
[122.91147614 100.46514130]
[137.84216309 101.90548706]
[152.77284241 103.34583282]
[167.70353699 104.78617859]
[182.63421631 106.22652435]
[197.56491089 107.66687012]
[212.49559021 109.10721588]
[226.97496033 102.73080444]
[238.90045166 111.65446472]
[253.83114624 113.09480286]
[268.79214478 114.17579651]
[283.77481079 114.89679718]
[298.75747681 115.61780548]
[313.74011230 116.33881378]
[328.72277832 117.05982208]
[334.59542847 108.12675476]
[343.58139038 102.48598480]
[354.01882935 101.10138702]
[364.01010132 104.15692902]
[371.76675415 111.03543091]
[375.92962646 120.44183350]
[390.86032104 121.88217926]
[405.79098511 123.32252502]
[420.72167969 124.76287079]
[426.75189209 112.99036407]
[436.40316772 103.99234772]
[448.50994873 98.82571411]
[461.62033081 98.08647156]
[474.16998291 101.84104156]
[484.66885376 109.62096405]
[491.87823486 120.48121643]
[494.95660400 133.11495972]
[509.83346558 135.03311157]
[524.71032715 136.95126343]
[539.58715820 138.86943054]
[554.46398926 140.78758240]
[560.72125244 138.59106445]
[566.30639648 139.72323608]
[569.78405762 143.01306152]
[584.59179688 145.40705872]
[599.39953613 147.80105591]
[616.00061035 144.36013794]
[623.90270996 159.35992432]
[611.67663574 171.10554504]
[597.00549316 162.60877991]
[582.19775391 160.21478271]
[567.39007568 157.82078552]
[552.54583740 155.66442871]
[537.66900635 153.74627686]
[522.79217529 151.82812500]
[507.91531372 149.90995789]
[493.03845215 147.99180603]
[484.24389648 162.40574646]
[469.99029541 171.56062317]
[453.11462402 173.57684326]
[437.00088501 168.00148010]
[424.90164185 155.90876770]
[419.28134155 139.69355774]
[404.35064697 138.25320435]
[389.41995239 136.81286621]
[374.48928833 135.37251282]
[360.42184448 148.83410645]
[340.68429565 147.61073303]
[328.00177002 132.04248047]
[313.01913452 131.32147217]
[298.03646851 130.60046387]
[283.05380249 129.87945557]
[268.07113647 129.15846252]
[265.22293091 131.25675964]
[261.21301270 132.07295227]
[256.65829468 131.07437134]
[252.39079285 128.02549744]
[237.46011353 126.58515167]
[224.04869080 133.06459045]
[211.05525208 124.03790283]
[196.12455750 122.59755707]
[181.19387817 121.15721130]
[166.26318359 119.71686554]
[151.33250427 118.27651978]
[136.40180969 116.83617401]
[121.47113037 115.39582825]
[106.54044342 113.95548248]
[92.54825592 119.36091614]
[82.46373749 130.46508789]
[72.37922668 141.56925964]
[62.29471588 152.67343140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[47 195]
[48 194]
[49 193]
[50 192]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[82 106]
[83 105]
[84 104]
[85 103]
[89 99]
[90 98]
[91 97]
[92 96]
[109 191]
[110 190]
[111 189]
[112 188]
[113 187]
[114 186]
[115 185]
[116 184]
[118 182]
[119 181]
[120 177]
[121 176]
[122 175]
[123 174]
[124 173]
[130 170]
[131 169]
[132 168]
[133 167]
[141 161]
[142 160]
[143 159]
[144 158]
[145 157]
[148 156]
[149 155]
[150 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
