%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGACCGAGGCGUGCAGCGGACAGCAGAUGGAUCCCGCGGCCAGCAGCUGCAUGAGGAGCCUCCAGCCCCCAGCCCCUGUCUGGGGCUGCCUUCGAAACCCCCACUCGGAAGGCAAUGGGGCCUCAG\
) } def
/len { sequence length } bind def

/coor [
[9.76594353 189.89376831]
[-5.19467831 188.80758667]
[-18.68173790 182.24258423]
[-28.76576042 171.13796997]
[-34.00411606 157.08238220]
[-33.64739227 142.08662415]
[-27.74663162 128.29600525]
[-17.14599609 117.68344116]
[-3.36029673 111.76678467]
[-18.00691223 108.53002167]
[-32.65353012 105.29326630]
[-47.30014420 102.05650330]
[-61.94676208 98.81974030]
[-76.76208496 96.47322083]
[-91.69206238 95.02551270]
[-106.62203217 93.57780457]
[-121.55200958 92.13009644]
[-136.48197937 90.68238068]
[-151.41195679 89.23467255]
[-166.34193420 87.78696442]
[-174.30982971 100.75901031]
[-187.06779480 108.95178223]
[-202.05639648 110.78537750]
[-216.29623413 105.94926453]
[-226.98014832 95.45339203]
[-232.02656555 81.41775513]
[-246.95654297 79.97003937]
[-256.35128784 89.70601654]
[-269.45324707 92.18494415]
[-281.40039062 86.71646881]
[-287.89120483 75.51754761]
[-302.78182983 73.70949554]
[-317.67245483 71.90145111]
[-334.12490845 75.99450684]
[-342.61248779 61.31809235]
[-330.85925293 49.09936523]
[-315.86441040 57.01081467]
[-300.97378540 58.81886673]
[-286.08312988 60.62691498]
[-273.35415649 49.70575714]
[-256.32531738 51.35341644]
[-245.50883484 65.04006958]
[-230.57885742 66.48777771]
[-222.92982483 53.68317413]
[-210.42842102 45.43549728]
[-195.52471924 43.42533875]
[-181.16763306 48.10448074]
[-170.22140503 58.59577179]
[-164.89422607 72.85699463]
[-149.96424866 74.30470276]
[-135.03427124 75.75241089]
[-120.10430145 77.20011902]
[-105.17432404 78.64782715]
[-90.24435425 80.09553528]
[-75.31437683 81.54324341]
[-82.17262268 68.20291138]
[-76.24522400 54.42372513]
[-61.84378433 50.22867966]
[-49.44391632 58.66925430]
[-48.06529999 73.60576630]
[-58.70999908 84.17311859]
[-44.06338120 87.40988159]
[-29.41676521 90.64664459]
[-14.77015018 93.88340759]
[-0.12353368 97.12017059]
[5.12676668 94.36811066]
[11.74782848 94.60689545]
[17.99407768 98.43597412]
[32.95467377 97.34944916]
[47.91527176 96.26293182]
[62.87586975 95.17640686]
[77.83646393 94.08988953]
[90.80558777 74.76518250]
[117.66638947 74.79800415]
[128.65042114 64.58276367]
[139.63444519 54.36752701]
[150.61846924 44.15228653]
[161.60250854 33.93704987]
[172.58653259 23.72181320]
[174.60253906 7.80593109]
[188.37745667 -0.41789663]
[203.34434509 5.35894585]
[208.02188110 20.70495987]
[198.82186890 33.84799576]
[182.80177307 34.70584106]
[171.81774902 44.92108154]
[160.83370972 55.13631821]
[149.84968567 65.35155487]
[138.86564636 75.56679535]
[127.88162231 85.78202820]
[131.29512024 100.38847351]
[145.66880798 104.67765808]
[160.04249573 108.96684265]
[174.41618347 113.25602722]
[188.78987122 117.54521179]
[203.16355896 121.83439636]
[212.72640991 110.01829529]
[226.08555603 102.76557922]
[241.20379639 101.18223572]
[255.77574158 105.50971222]
[267.57925415 115.08809662]
[274.81439209 128.45677185]
[276.37783813 143.57708740]
[272.03118896 158.14331055]
[262.43728638 169.93421936]
[249.05912781 177.15176392]
[233.93675232 178.69532776]
[219.37625122 174.32952881]
[207.59797668 164.72012329]
[200.39804077 151.33245850]
[198.87437439 136.20808411]
[184.50068665 131.91889954]
[170.12699890 127.62971497]
[155.75331116 123.34053040]
[141.37962341 119.05134583]
[127.00593567 114.76215363]
[114.10848236 125.12761688]
[98.72933960 126.82756805]
[85.81314087 120.46056366]
[78.92298889 109.05048370]
[63.96239090 110.13700867]
[49.00179291 111.22352600]
[34.04119492 112.31005096]
[19.08059883 113.39656830]
[31.86543655 121.24182129]
[40.82197189 133.27429199]
[44.66886902 147.77261353]
[42.85578918 162.66264343]
[35.64211655 175.81417847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[26 43]
[27 42]
[31 39]
[32 38]
[33 37]
[68 124]
[69 123]
[70 122]
[71 121]
[72 120]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[91 116]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
