%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGGUCAGACGGUCUAGCGCUGCGUGGGCCAUGGUGCAGCUCCGACCGCGAGCGUCUCGCGCCCCGGCGUCGGCGGAGGCGAUGGUGGACGAGGGCCAGCUGGCCUCGGAGGAGGAGGAGGCGGAGCACG\
) } def
/len { sequence length } bind def

/coor [
[180.47271729 323.84375000]
[189.30383301 311.63885498]
[200.62971497 301.70547485]
[193.49050903 288.51336670]
[186.35130310 275.32125854]
[179.21208191 262.12915039]
[172.07287598 248.93705750]
[164.93367004 235.74494934]
[157.79444885 222.55284119]
[150.65524292 209.36073303]
[136.35102844 205.37014771]
[128.92292786 192.09317017]
[133.20561218 177.11665344]
[126.06640625 163.92454529]
[118.92719269 150.73243713]
[111.78797913 137.54032898]
[104.64877319 124.34822083]
[96.20526886 124.49585724]
[88.20219421 121.80043030]
[81.56841278 116.57478333]
[77.07384491 109.42542267]
[62.12508011 110.66410828]
[47.17631531 111.90280151]
[32.22754669 113.14148712]
[17.27877998 114.38018036]
[2.33001161 115.61887360]
[-12.61875534 116.85755920]
[-20.55623055 130.19082642]
[-34.82813263 136.28118896]
[-49.94662094 132.78677368]
[-60.09832764 121.05125427]
[-61.37971878 105.58717346]
[-53.29806900 92.34079742]
[-38.96093750 86.40561676]
[-23.88124847 90.06383514]
[-13.85744572 101.90879059]
[1.09132147 100.67010498]
[16.04008865 99.43141174]
[30.98885536 98.19271851]
[45.93762207 96.95403290]
[60.88639069 95.71533966]
[75.83515930 94.47665405]
[79.68696594 85.79338837]
[86.52188110 79.19646454]
[95.33613586 75.65466309]
[97.10359192 60.75915909]
[91.04627991 46.14343262]
[100.22933960 34.41651535]
[101.99679565 19.52100754]
[103.76425934 4.62550211]
[105.53171539 -10.27000332]
[94.31243134 -20.82622147]
[91.49319458 -35.78968811]
[97.94921112 -49.38320923]
[111.01528931 -56.48359680]
[112.78275299 -71.37910461]
[114.55020905 -86.27460480]
[116.31767273 -101.17011261]
[118.08512878 -116.06562042]
[119.85258484 -130.96112061]
[117.74356842 -139.94920349]
[121.84174347 -146.18603516]
[123.96052551 -161.03564453]
[126.07930756 -175.88525391]
[128.19808960 -190.73484802]
[116.96536255 -201.44024658]
[114.20349884 -216.70956421]
[120.97447968 -230.67141724]
[134.67472839 -237.95719910]
[150.03622437 -235.76538086]
[161.15216064 -224.93875122]
[163.74821472 -209.64038086]
[156.82617188 -195.75280762]
[143.04768372 -188.61607361]
[140.92890930 -173.76646423]
[138.81013489 -158.91685486]
[136.69134521 -144.06726074]
[134.74809265 -129.19366455]
[132.98063660 -114.29815674]
[131.21318054 -99.40265656]
[129.44570923 -84.50714874]
[127.67826080 -69.61164093]
[125.91079712 -54.71613693]
[136.95243835 -44.75519562]
[140.04803467 -30.02830696]
[133.80532837 -16.14010429]
[120.42722321 -8.50254440]
[118.65976715 6.39296150]
[116.89230347 21.28846741]
[115.12484741 36.18397141]
[121.30858612 49.73427200]
[111.99909973 62.52661896]
[110.23164368 77.42212677]
[124.34677887 95.34368134]
[117.84088135 117.20900726]
[124.98008728 130.40112305]
[132.11929321 143.59321594]
[139.25851440 156.78532410]
[146.39772034 169.97743225]
[161.27796936 174.58349609]
[168.33023071 188.06385803]
[163.84735107 202.22152710]
[170.98655701 215.41363525]
[178.12577820 228.60574341]
[185.26498413 241.79785156]
[192.40419006 254.98995972]
[199.54341125 268.18206787]
[206.68261719 281.37417603]
[213.82182312 294.56628418]
[228.33239746 290.51766968]
[243.38006592 289.79998779]
[258.21008301 292.44924927]
[272.07855225 298.33255005]
[284.28985596 307.15478516]
[294.23147583 318.47344971]
[301.40472412 331.72079468]
[305.44979858 346.23233032]
[306.16384888 361.28018188]
[303.51098633 376.10955811]
[297.62432861 389.97659302]
[288.79913330 402.18576050]
[277.47805786 412.12463379]
[264.22897339 419.29467773]
[249.71646118 423.33624268]
[234.66842651 424.04663086]
[219.83970642 421.39019775]
[205.97409058 415.50018311]
[193.76705933 406.67202759]
[183.83093262 395.34854126]
[176.66410828 382.09771729]
[172.62603760 367.58422852]
[171.91931152 352.53601074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[13 99]
[14 98]
[15 97]
[16 96]
[17 95]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[45 93]
[46 92]
[48 90]
[49 89]
[50 88]
[51 87]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[62 77]
[63 76]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
