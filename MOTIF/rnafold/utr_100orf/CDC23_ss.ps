%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUUGGCUGGAGUGGCCCGAGUCGGGAAAAUGGCUGCGAGUACCUCCAUGGUCCCGGUGGCUGUGACGGCGGCAGUGGCGCCUGUCCUGUCCAUAAACAGCGAUUUCUCAGAUUUGCGGGAAAUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[117.41532898 266.58056641]
[108.42573547 254.57276917]
[105.40165710 239.88076782]
[108.91823578 225.29879761]
[118.30664825 213.60018921]
[131.78134155 207.00985718]
[146.77960205 206.78120422]
[160.45086670 212.95916748]
[153.26214600 199.79397583]
[146.07341003 186.62879944]
[138.88467407 173.46360779]
[122.59618378 169.45800781]
[114.03531647 154.64341736]
[118.88488770 137.88424683]
[111.38488770 124.89386749]
[103.88488770 111.90348816]
[98.39653778 125.62479401]
[83.44554138 135.12258911]
[70.11301422 141.99598694]
[56.78048325 148.86938477]
[43.44794846 155.74278259]
[32.14015961 168.37489319]
[16.87140846 161.00593567]
[19.72557640 144.29396057]
[36.57455063 142.41024780]
[49.90708542 135.53684998]
[63.23961639 128.66345215]
[76.57214355 121.79006195]
[77.63951111 114.36640167]
[65.84869385 105.09403992]
[79.77423096 99.51908112]
[80.84159088 92.09542084]
[69.98558044 81.74423218]
[59.12957001 71.39305115]
[48.27355957 61.04186249]
[37.41754913 50.69067764]
[26.56153870 40.33949280]
[15.70552921 29.98830605]
[4.84951830 19.63712120]
[-9.85484505 23.84769821]
[-24.59516335 20.15719795]
[-35.43706512 9.65388584]
[-39.53848648 -4.76950836]
[-35.89425278 -19.21198463]
[-46.75026321 -29.56317139]
[-57.60627365 -39.91435623]
[-73.61445618 -40.97156906]
[-82.65013123 -54.22811508]
[-77.78191376 -69.51470947]
[-62.74427032 -75.10478210]
[-49.07280350 -66.71011353]
[-47.25508881 -50.77036667]
[-36.39907837 -40.41918182]
[-25.54306793 -30.06799507]
[-11.29034901 -34.39530182]
[3.31186247 -30.98481941]
[14.31915569 -20.65496635]
[18.70685005 -6.10694408]
[15.20070362 8.78111076]
[26.05671310 19.13229561]
[36.91272354 29.48348236]
[47.76873398 39.83466721]
[58.62474442 50.18585205]
[69.48075867 60.53703690]
[80.33676910 70.88822174]
[91.19277954 81.23941040]
[106.15455627 80.16931915]
[115.42694092 68.37852478]
[124.69932556 56.58772659]
[133.97171021 44.79693222]
[143.24409485 33.00613403]
[146.12992859 24.23443413]
[152.88012695 21.04854393]
[162.43048096 9.48174763]
[171.98083496 -2.08504844]
[181.53118896 -13.65184402]
[191.08154297 -25.21863937]
[189.32994080 -40.92556381]
[199.26296997 -53.21826553]
[214.98753357 -54.80370712]
[227.17453003 -44.74127197]
[228.59362793 -29.00082588]
[218.40290833 -16.92089462]
[202.64834595 -15.66828728]
[193.09799194 -4.10149145]
[183.54763794 7.46530390]
[173.99728394 19.03210068]
[164.44692993 30.59889603]
[155.03489685 42.27851868]
[145.76251221 54.06931686]
[136.49012756 65.86011505]
[127.21774292 77.65090942]
[117.94535828 89.44170380]
[116.87526703 104.40348816]
[124.37526703 117.39386749]
[131.87527466 130.38424683]
[145.25607300 132.36915588]
[154.88824463 141.58677673]
[157.38516235 154.48416138]
[152.04985046 166.27487183]
[159.23858643 179.44006348]
[166.42732239 192.60525513]
[173.61605835 205.77043152]
[182.60522461 217.77854919]
[193.21182251 228.38514709]
[203.81842041 238.99176025]
[214.42503357 249.59835815]
[225.03163147 260.20495605]
[235.63822937 270.81155396]
[246.24482727 281.41815186]
[256.85144043 292.02474976]
[272.15582275 289.46444702]
[286.02719116 296.41891479]
[293.13174438 310.21401978]
[290.73757935 325.54528809]
[279.76535034 336.51751709]
[264.43408203 338.91165161]
[250.63897705 331.80712891]
[243.68450928 317.93576050]
[246.24482727 302.63137817]
[235.63822937 292.02474976]
[225.03163147 281.41815186]
[214.42503357 270.81155396]
[203.81842041 260.20495605]
[193.21182251 249.59835815]
[182.60522461 238.99176025]
[171.99862671 228.38514709]
[174.07489014 243.24075317]
[169.63101196 257.56738281]
[159.51214600 268.64025879]
[145.64279175 274.35345459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 103]
[9 102]
[10 101]
[11 100]
[14 96]
[15 95]
[16 94]
[18 28]
[19 27]
[20 26]
[21 25]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[44 54]
[45 53]
[46 52]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
