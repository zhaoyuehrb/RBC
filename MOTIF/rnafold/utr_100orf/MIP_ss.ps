%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCAGGGACCCAGGCACUGUGACCAUCCCCCCUGCCAUGUGGGAACUGCGAUCAGCCUCCUUUUGGAGGGCCAUAUUCGCUGAGUUCUUUGCCACCCUCUUCUAUGUCUUCUUUGGGCUGGGGUCCUCACUGCGCU\
) } def
/len { sequence length } bind def

/coor [
[107.05949402 314.65386963]
[106.04321289 299.68832397]
[105.02693176 284.72280884]
[104.01064301 269.75726318]
[92.65527344 260.18695068]
[91.41142273 245.02424622]
[101.52664948 233.17857361]
[100.51036835 218.21302795]
[99.49408722 203.24749756]
[98.47779846 188.28196716]
[97.46151733 173.31643677]
[96.44523621 158.35090637]
[95.42895508 143.38537598]
[76.64093781 136.84480286]
[62.71045303 122.64231873]
[48.74145889 128.10740662]
[34.77246094 133.57249451]
[20.80346489 139.03758240]
[21.18988800 154.19100952]
[16.36728477 168.56175232]
[6.91800880 180.41447449]
[-6.01689386 188.31790161]
[-20.87547112 191.31764221]
[-35.86347580 189.05148315]
[-49.17103577 181.79306030]
[-59.19120026 170.41886902]
[-64.71398163 156.30241394]
[-65.07247162 141.14828491]
[-60.22339630 126.78645325]
[-50.75229263 114.95117188]
[-37.80284882 107.07159424]
[-22.93876839 104.09923553]
[-7.95496368 106.39301300]
[5.33919764 113.67594147]
[15.33838177 125.06858063]
[29.30737686 119.60349274]
[43.27637482 114.13841248]
[57.24536896 108.67332458]
[58.65883636 86.06826782]
[71.21544647 67.21838379]
[91.53067780 57.20449066]
[91.19168854 42.20832062]
[90.85269928 27.21215248]
[90.51370239 12.21598339]
[89.49742126 -2.74954891]
[87.80592346 -17.65387154]
[86.11442566 -32.55819321]
[84.42292786 -47.46251678]
[82.73143005 -62.36684036]
[80.70352936 -77.22912598]
[78.34027863 -92.04179382]
[75.97702026 -106.85445404]
[73.61376190 -121.66712189]
[56.23148727 -127.59339905]
[44.25804901 -141.40699768]
[40.89120102 -159.28913879]
[46.96478271 -176.35260010]
[60.74425507 -187.97726440]
[57.38283539 -202.59577942]
[54.02141953 -217.21429443]
[50.65999985 -231.83280945]
[47.29858398 -246.45130920]
[35.73497009 -258.07949829]
[40.28405762 -273.83508301]
[56.26613235 -277.51004028]
[67.24020386 -265.32391357]
[61.91709518 -249.81272888]
[65.27851105 -235.19422913]
[68.63993073 -220.57571411]
[72.00135040 -205.95719910]
[75.36277008 -191.33868408]
[87.12783051 -189.45782471]
[97.58255768 -183.67131042]
[105.46930695 -174.64814758]
[109.83017731 -163.44830322]
[110.12332153 -151.39816284]
[106.29011536 -139.93348694]
[98.76501465 -130.42832947]
[88.42642212 -124.03038025]
[90.78968048 -109.21771240]
[93.15293884 -94.40505219]
[95.51619720 -79.59238434]
[98.85713959 -76.07273102]
[99.96793365 -70.39070892]
[97.63574982 -64.05833435]
[99.32724762 -49.15401459]
[101.01874542 -34.24969101]
[102.71024323 -19.34536934]
[104.40174866 -4.44104719]
[106.60118866 -2.57607198]
[108.16156006 0.30904320]
[108.67641449 3.96294093]
[107.84256744 7.98693562]
[105.50987244 11.87699223]
[105.84886932 26.87316132]
[106.18785858 41.86933136]
[106.52684784 56.86549759]
[113.04555511 58.37070084]
[119.25746155 60.85494614]
[125.01646423 64.25980377]
[130.18713379 68.50520325]
[134.64784241 73.49129486]
[138.29371643 79.10082245]
[141.03900146 85.20185089]
[142.81912231 91.65090942]
[143.59222412 98.29632568]
[143.34013367 104.98180389]
[142.06875610 111.55011749]
[155.63537598 117.94907379]
[169.20199585 124.34803009]
[182.76863098 130.74699402]
[198.29321289 126.70137024]
[211.04873657 136.43151855]
[211.25027466 152.47331238]
[198.74320984 162.52084351]
[183.12190247 158.86651611]
[176.36967468 144.31361389]
[162.80303955 137.91465759]
[149.23641968 131.51570129]
[135.66979980 125.11674500]
[128.71311951 132.84420776]
[120.12540436 138.70597839]
[110.39448547 142.36909485]
[111.41076660 157.33462524]
[112.42704773 172.30015564]
[113.44333649 187.26568604]
[114.45961761 202.23121643]
[115.47589874 217.19674683]
[116.49218750 232.16227722]
[128.11599731 242.53169250]
[128.93345642 257.72335815]
[118.97618103 268.74096680]
[119.99246216 283.70651245]
[121.00874329 298.67205811]
[122.02503204 313.63757324]
[131.61219788 326.94241333]
[124.63761902 341.78448486]
[108.27615356 342.89556885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[4 132]
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[15 38]
[16 37]
[17 36]
[18 35]
[41 97]
[42 96]
[43 95]
[44 94]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 82]
[51 81]
[52 80]
[53 79]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
