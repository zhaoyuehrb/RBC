%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGGAGCCUUUGGGGUGCAUCCCCAAGUCUGGGCUGUGGUUCACACCAUGGGCAACAAGCAGACAGUCUUCACACACGAGCAGCUGGAAGCGUAUCAGGACUGCACAUUUUUCACAAGGAAGGAGAUCAUGAGGCUCUUCUAUCGCU\
) } def
/len { sequence length } bind def

/coor [
[79.82765961 304.64178467]
[77.00467682 289.67681885]
[80.51886749 274.85891724]
[89.76139069 262.75537109]
[103.13092041 255.46321106]
[101.88404083 240.51512146]
[100.63716888 225.56703186]
[99.39029694 210.61894226]
[98.14341736 195.67085266]
[96.89654541 180.72277832]
[95.64967346 165.77468872]
[94.40279388 150.82659912]
[93.15592194 135.87850952]
[79.31270599 130.10223389]
[67.81089783 139.73075867]
[56.30909729 149.35928345]
[44.80729294 158.98782349]
[33.30549240 168.61634827]
[30.46222305 184.40544128]
[16.27718544 191.89971924]
[1.63192630 185.35021973]
[-2.23896623 169.78115845]
[7.63392591 157.13577271]
[23.67696571 157.11453247]
[35.17876816 147.48600769]
[46.68057251 137.85748291]
[58.18237686 128.22895813]
[69.68418121 118.60043335]
[68.33432770 105.86190033]
[71.64791870 94.71665192]
[58.12372589 88.22848511]
[44.59953690 81.74031830]
[31.07534599 75.25215912]
[17.55115509 68.76399231]
[-2.84946012 78.10144043]
[-23.31882858 69.59785461]
[-30.91031265 49.06118774]
[-45.13709259 44.30737305]
[-59.36387253 39.55355835]
[-73.59065247 34.79974365]
[-87.81742859 30.04592896]
[-102.04421234 25.29211426]
[-116.27098846 20.53829956]
[-132.22274780 24.34265900]
[-143.29522705 12.24586582]
[-138.09799194 -3.30793762]
[-121.97752380 -6.31833124]
[-111.51717377 6.31152010]
[-97.29039764 11.06533527]
[-83.06361389 15.81914997]
[-68.83683777 20.57296371]
[-54.61005783 25.32677841]
[-40.38327789 30.08059502]
[-26.15649796 34.83440781]
[-20.63055420 28.77287483]
[-13.52225494 24.61258125]
[-5.46508121 22.74766922]
[2.81592560 23.36667252]
[10.56940079 26.43366623]
[17.08583260 31.68969536]
[21.76247978 38.67453003]
[24.15909767 46.76691055]
[24.03931999 55.23979950]
[37.56351089 61.72796631]
[51.08769989 68.21613312]
[64.61189270 74.70429993]
[78.13607788 81.19245911]
[98.20108795 71.21600342]
[119.35211182 78.61658478]
[131.96324158 70.49504089]
[144.57437134 62.37350082]
[157.18548584 54.25196075]
[169.79661560 46.13041687]
[182.40774536 38.00887680]
[168.01947021 42.24885178]
[153.38479614 38.95852280]
[142.19596863 28.96802139]
[137.27584839 14.79789257]
[139.86578369 0.02317534]
[149.31231689 -11.62855721]
[163.23217773 -17.21764183]
[178.11343384 -15.33398724]
[190.20349121 -6.45056391]
[201.08230591 -16.77776909]
[211.96113586 -27.10497284]
[222.83996582 -37.43217850]
[233.61077881 -47.87199020]
[244.27239990 -58.42328262]
[248.63865662 -73.63006592]
[263.12744141 -77.08319855]
[273.78906250 -87.63449097]
[273.62063599 -103.43788147]
[284.73577881 -114.67306519]
[300.54003906 -114.67440796]
[311.65710449 -103.44111633]
[311.49133301 -87.63769531]
[300.14114380 -76.64003754]
[284.34036255 -76.97286224]
[273.67874146 -66.42156982]
[270.07507324 -51.96948242]
[254.82368469 -47.76165390]
[244.16206360 -37.21036530]
[241.60359192 -30.22467422]
[233.16717529 -26.55335236]
[222.28834534 -16.22614861]
[211.40951538 -5.89894342]
[200.53068542 4.42826128]
[202.53456116 11.65560532]
[215.04333496 3.37729406]
[226.78189087 12.71573067]
[221.52790833 26.76548386]
[206.54229736 26.11029434]
[208.54617310 33.33763885]
[223.18966675 36.58846283]
[237.83317566 39.83929062]
[252.47666931 43.09011459]
[267.94717407 37.64990997]
[280.21591187 48.53155899]
[276.66186523 64.54095459]
[260.94113159 69.20900726]
[249.22584534 57.73361588]
[234.58235168 54.48279190]
[219.93884277 51.23196411]
[205.29534912 47.98114014]
[190.52929688 50.62000275]
[177.91816711 58.74154663]
[165.30703735 66.86309052]
[152.69590759 74.98462677]
[140.08477783 83.10617065]
[127.47364807 91.22771454]
[130.35879517 103.15132141]
[128.01185608 115.88749695]
[120.30052948 127.13137054]
[108.10401154 134.63163757]
[109.35088348 149.57972717]
[110.59775543 164.52781677]
[111.84463501 179.47589111]
[113.09150696 194.42398071]
[114.33837891 209.37207031]
[115.58525848 224.32015991]
[116.83213043 239.26824951]
[118.07900238 254.21633911]
[132.47189331 259.19271851]
[143.59194946 269.59774780]
[149.51252747 283.62866211]
[149.20787048 298.85452271]
[142.73074341 312.63739014]
[131.20338440 322.58923340]
[116.62293243 326.98590088]
[101.51557159 325.06561279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[10 137]
[11 136]
[12 135]
[13 134]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[69 130]
[70 129]
[71 128]
[72 127]
[73 126]
[74 125]
[83 107]
[84 106]
[85 105]
[86 104]
[87 102]
[88 101]
[90 99]
[91 98]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
