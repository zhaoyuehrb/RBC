%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAGACAGUCCCAGCACCAUGAGCCCUGAAAGGUCCCAAGAGGAGAGCCCAGAAGGAGACACAGAGAGAACAGAGCGGAAGCCCAUGGUCAAAGAUGCCUUCAAAGACAUUUCCAUAU\
) } def
/len { sequence length } bind def

/coor [
[92.22771454 333.99649048]
[77.23875427 333.42098999]
[62.80416870 329.34146118]
[49.73135376 321.98608398]
[38.75155640 311.76629639]
[30.47893715 299.25375366]
[25.37623215 285.14834595]
[23.72886658 270.23907471]
[25.62898445 255.35990906]
[30.97030449 241.34312439]
[39.45405197 228.97274780]
[50.60568619 218.94075012]
[63.80142593 211.80825806]
[78.30316162 207.97424316]
[93.29972839 207.65316772]
[107.95227051 210.86297607]
[121.44120026 217.42413330]
[133.01115417 226.96876526]
[128.41294861 212.69093323]
[123.81475067 198.41310120]
[119.21655273 184.13526917]
[114.61835480 169.85742188]
[110.02015686 155.57958984]
[98.75386047 145.83691406]
[101.88825226 130.32929993]
[97.29005432 116.05146027]
[84.57119751 105.19087982]
[88.13867950 88.85090637]
[83.17136383 74.69725800]
[78.20404816 60.54360580]
[55.63596725 58.60258865]
[36.86857605 46.03052139]
[26.54343414 26.00909615]
[27.17914963 3.55328560]
[38.55726242 -15.74478245]
[29.80361748 -27.92565727]
[21.04997253 -40.10652924]
[12.13893890 -52.17274475]
[3.07202053 -64.12226105]
[-12.11554623 -62.30978775]
[-26.07897568 -68.30307007]
[-35.10771179 -80.40052032]
[-36.85721970 -95.29331207]
[-30.95709610 -108.97008514]
[-40.02401352 -120.91960144]
[-55.65890503 -124.51540375]
[-62.46558380 -139.04292297]
[-55.22255325 -153.35787964]
[-39.48604202 -156.47906494]
[-27.32776070 -146.01219177]
[-28.07449722 -129.98652649]
[-19.00757790 -118.03700256]
[-4.24726868 -120.03672028]
[9.62446117 -114.34188843]
[18.84412766 -102.38931274]
[20.85637665 -87.32785034]
[15.02153873 -73.18917847]
[24.08845711 -61.23966217]
[30.71817589 -57.77119064]
[33.23084641 -48.86017609]
[41.98448944 -36.67930222]
[50.73813629 -24.49842834]
[58.83082962 -27.57068634]
[67.37043762 -29.03210258]
[76.03923798 -28.82537460]
[84.51416016 -26.95531845]
[92.47877502 -23.48879242]
[99.63516235 -18.55232239]
[105.71501160 -12.32746983]
[110.48970795 -5.04416847]
[113.77892303 3.02777433]
[115.45742798 11.58867168]
[115.45982361 20.32008171]
[113.78314972 28.89665794]
[110.48704529 36.99826050]
[105.69164276 44.32192230]
[99.57322693 50.59316635]
[92.35770416 55.57629395]
[97.32501221 69.72994232]
[102.29232788 83.88359833]
[112.52507019 89.60211945]
[116.26301575 100.71239471]
[111.56788635 111.45326233]
[116.16609192 125.73109436]
[127.76127625 136.49502563]
[124.29798889 150.98139954]
[128.89619446 165.25923157]
[133.49438477 179.53706360]
[138.09259033 193.81489563]
[142.69079590 208.09272766]
[147.28898621 222.37055969]
[150.81694031 224.62289429]
[153.37693787 227.61103821]
[154.85328674 230.98728943]
[155.24317932 234.40121460]
[166.57942200 244.22413635]
[177.91566467 254.04704285]
[189.25190735 263.86996460]
[200.58815002 273.69287109]
[216.08447266 276.88259888]
[220.63624573 291.06463623]
[231.97250366 300.88754272]
[248.16893005 303.45812988]
[253.78752136 318.86471558]
[243.04837036 331.25836182]
[226.99897766 327.88955688]
[222.14958191 312.22381592]
[210.81333923 302.40087891]
[196.12785339 299.91375732]
[190.76524353 285.02911377]
[179.42900085 275.20620728]
[168.09274292 265.38330078]
[156.75650024 255.56037903]
[145.42025757 245.73745728]
[149.67108154 260.12255859]
[150.42471313 275.10360718]
[147.63897705 289.84265137]
[141.46972656 303.51525879]
[132.26203918 315.35665894]
[120.53093719 324.70443726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[25 84]
[26 83]
[28 80]
[29 79]
[30 78]
[35 62]
[36 61]
[37 60]
[38 58]
[39 57]
[44 52]
[45 51]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
