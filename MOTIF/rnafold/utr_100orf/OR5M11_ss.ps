%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAACACAAAUGGCAGUGCAAUCACAGAAUUCAUUUUACUUGGGCUCACAGAUUGCCCGGAACUCCAGUCUCUGCUUUUUGUGCUGUUUCUGGUUG\
) } def
/len { sequence length } bind def

/coor [
[98.61196899 223.11030579]
[85.88988495 232.48709106]
[70.27634430 230.03904724]
[61.03458786 217.21853638]
[63.64757919 201.63174438]
[76.56508636 192.52606201]
[78.88855743 177.70709229]
[81.21202850 162.88813782]
[83.53549957 148.06918335]
[81.42458344 140.84634399]
[86.16857910 132.82841492]
[88.95179749 118.08888245]
[80.56201935 108.45195007]
[79.23574829 95.74369049]
[85.45491791 84.58212280]
[96.95957947 79.02320099]
[100.19984436 64.37735748]
[103.44010925 49.73151398]
[106.68038177 35.08567429]
[109.92064667 20.43983269]
[113.16091156 5.79399061]
[116.40118408 -8.85185051]
[119.64144897 -23.49769211]
[122.88171387 -38.14353180]
[126.12198639 -52.78937531]
[114.76804352 -65.21169281]
[113.00752258 -81.78269196]
[121.33144379 -96.02823639]
[136.32913208 -102.49919128]
[139.11235046 -117.23871613]
[141.89556885 -131.97824097]
[144.67878723 -146.71777344]
[131.45561218 -152.88096619]
[120.11546326 -162.04396057]
[111.32427216 -173.66279602]
[105.59686279 -187.04943848]
[103.26682281 -201.41256714]
[104.46704102 -215.90434265]
[109.12216949 -229.67044067]
[116.95330811 -241.90042114]
[127.49472809 -251.87547302]
[140.12156677 -259.01058960]
[154.08686829 -262.88897705]
[168.56576538 -263.28631592]
[171.80603027 -277.93212891]
[175.04629517 -292.57797241]
[178.28656006 -307.22381592]
[181.52682495 -321.86965942]
[184.76708984 -336.51550293]
[173.82420349 -347.39010620]
[170.52001953 -362.45947266]
[175.90890503 -376.91503906]
[188.27127075 -386.14410400]
[203.66233826 -387.20166016]
[217.17088318 -379.75030518]
[224.48635864 -366.16769409]
[223.27444458 -350.78799438]
[213.92184448 -338.51882935]
[199.41293335 -333.27523804]
[196.17266846 -318.62939453]
[192.93240356 -303.98355103]
[189.69213867 -289.33770752]
[186.45187378 -274.69186401]
[183.21160889 -260.04602051]
[196.98741150 -253.02958679]
[208.50537109 -242.70086670]
[216.98783875 -229.74955750]
[221.86016846 -215.04269409]
[222.78961182 -199.56655884]
[219.70803833 -184.36058044]
[212.81690979 -170.44747925]
[202.57409668 -158.76455688]
[189.66349792 -150.10049438]
[174.94932556 -145.04206848]
[159.41830444 -143.93455505]
[156.63510132 -129.19502258]
[153.85188293 -114.45549774]
[151.06866455 -99.71597290]
[161.14770508 -90.81262970]
[165.50344849 -77.97428131]
[162.88127136 -64.56225586]
[153.86865234 -54.14508438]
[140.76782227 -49.54910660]
[137.52755737 -34.90326691]
[134.28729248 -20.25742531]
[131.04702759 -5.61158323]
[127.80675507 9.03425789]
[124.56649017 23.68009949]
[121.32621765 38.32593918]
[118.08595276 52.97178268]
[114.84568787 67.61762238]
[111.60541534 82.26346588]
[120.79151154 95.87889099]
[117.49335480 111.96883392]
[103.69132996 120.87210083]
[100.90811157 135.61163330]
[98.35446167 150.39265442]
[96.03098297 165.21160889]
[93.70751190 180.03057861]
[91.38404083 194.84953308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 100]
[7 99]
[8 98]
[9 97]
[11 96]
[12 95]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[29 78]
[30 77]
[31 76]
[32 75]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
