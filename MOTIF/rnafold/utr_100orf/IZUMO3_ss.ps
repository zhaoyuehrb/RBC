%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCGGGGAGCGGGGGUGAAGAAAGAAAUGGGUGACCUGUGGUUAUUCCUGCUCCUGCCCCUCUCAGCCUUCCAUGGAGUCAAAGGCUGUUUAGAAUGUGACCCCAAAUUUAUAGAGGAUGUUGGCU\
) } def
/len { sequence length } bind def

/coor [
[4.19635201 175.05964661]
[-9.12814045 181.94862366]
[-23.80722237 178.86244202]
[-33.22952271 167.19110107]
[-33.15129471 152.19129944]
[-23.60852242 140.61932373]
[-38.59045410 141.35533142]
[-53.57238770 142.09133911]
[-68.55432129 142.82736206]
[-83.53624725 143.56336975]
[-98.51818085 144.29939270]
[-113.50011444 145.03540039]
[-128.48204041 145.77142334]
[-143.46397400 146.50743103]
[-158.44590759 147.24345398]
[-173.42784119 147.97946167]
[-188.40977478 148.71548462]
[-203.39170837 149.45149231]
[-218.37364197 150.18751526]
[-221.59385681 158.16473389]
[-227.03881836 164.78088379]
[-234.19038391 169.43856812]
[-242.37759399 171.72518921]
[-250.83959961 171.44944763]
[-258.79632568 168.65721130]
[-265.52047729 163.62539673]
[-270.40386963 156.83460999]
[-273.01260376 148.92329407]
[-287.94036865 147.45303345]
[-302.86813354 145.98277283]
[-317.79589844 144.51251221]
[-332.72366333 143.04226685]
[-349.07919312 147.50697327]
[-357.89706421 133.02661133]
[-346.42364502 120.54476166]
[-331.25341797 128.11448669]
[-316.32565308 129.58474731]
[-301.39788818 131.05500793]
[-286.47009277 132.52526855]
[-271.54232788 133.99551392]
[-256.32214355 118.29413605]
[-234.19038391 118.64064026]
[-219.10964966 135.20558167]
[-204.12771606 134.46955872]
[-189.14578247 133.73355103]
[-174.16386414 132.99754333]
[-159.18193054 132.26152039]
[-144.19999695 131.52551270]
[-129.21806335 130.78948975]
[-114.23612976 130.05348206]
[-99.25419617 129.31745911]
[-84.27226257 128.58145142]
[-69.29033661 127.84542847]
[-54.30840302 127.10941315]
[-39.32646942 126.37339783]
[-24.34453773 125.63738251]
[-9.48099899 123.61867523]
[5.15453339 120.33215332]
[19.79006577 117.04563904]
[34.19652176 112.86784363]
[48.31968307 107.81449127]
[62.44284439 102.76114655]
[76.56600952 97.70779419]
[90.68916321 92.65444946]
[102.73728180 83.71896362]
[111.67276764 71.67084503]
[120.60826111 59.62273407]
[129.54374695 47.57462311]
[138.47923279 35.52650833]
[147.41473389 23.47839546]
[156.35021973 11.43028259]
[156.95785522 6.03147030]
[159.38870239 1.87278759]
[162.83595276 -0.54884320]
[166.41308594 -1.14287877]
[176.21067810 -12.50101185]
[178.74510193 -28.70313454]
[194.13912964 -34.35609818]
[206.55670166 -23.64462090]
[203.22369385 -7.58775043]
[187.56881714 -2.70341873]
[177.77122498 8.65471363]
[168.39833069 20.36577225]
[159.46284485 32.41388702]
[150.52734375 44.46199799]
[141.59185791 56.51011276]
[132.65637207 68.55822754]
[123.72088623 80.60633850]
[114.78539276 92.65444946]
[117.05043793 99.80424500]
[131.35009766 95.27437592]
[135.87974548 109.57410431]
[121.58052826 114.10383606]
[123.84557343 121.25363159]
[138.08850098 125.95885468]
[152.33142090 130.66407776]
[166.57434082 135.36930847]
[182.10504150 132.35139465]
[191.76289368 143.69049072]
[206.00581360 148.39570618]
[221.94450378 144.53692627]
[233.05819702 156.59585571]
[227.91409302 172.16731262]
[211.80398560 175.23271179]
[201.30059814 162.63862610]
[187.05766296 157.93341064]
[172.54571533 161.28787231]
[161.86911011 149.61222839]
[147.62619019 144.90701294]
[133.38327026 140.20178223]
[119.14034271 135.49655151]
[104.20373535 129.25288391]
[96.10240936 118.36969757]
[95.74251556 106.77761078]
[81.61935425 111.83095551]
[67.49619293 116.88430786]
[53.37303162 121.93765259]
[39.24987030 126.99100494]
[51.12520218 136.15487671]
[51.61608505 151.14683533]
[40.36565399 161.06791687]
[25.55283928 158.70559692]
[17.94638252 145.77726746]
[23.07658386 131.68116760]
[8.44105148 134.96768188]
[-6.19447994 138.25421143]
[6.08951759 146.86253357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[57 126]
[58 125]
[59 124]
[60 118]
[61 117]
[62 116]
[63 115]
[64 114]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[75 82]
[76 81]
[94 111]
[95 110]
[96 109]
[97 108]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
