%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCUGGUUCUGCAACAGUGCCGACUGCCAAUUUUCAGUCUUCGCCCUUACCACCAUAGGAUGGAUCCUCUCCUCUACGUCCACGGGCCUCGUGGAGU\
) } def
/len { sequence length } bind def

/coor [
[74.85783386 100.18630981]
[60.50796890 95.81808472]
[46.15810394 91.44986725]
[31.80823898 87.08164215]
[17.45837402 82.71342468]
[-0.38887352 100.25897217]
[-26.38575554 102.36547852]
[-48.55068970 86.70892334]
[-61.13498306 94.87198639]
[-73.71927643 103.03504944]
[-81.08629608 117.03638458]
[-95.97454834 117.47138977]
[-108.55883789 125.63445282]
[-121.14313507 133.79751587]
[-131.14097595 147.48983765]
[-147.06587219 141.67312622]
[-145.88491821 124.76035309]
[-129.30619812 121.21322632]
[-116.72190094 113.05016327]
[-104.13761139 104.88710022]
[-97.67070007 91.46963501]
[-81.88233948 90.45075226]
[-69.29804230 82.28768921]
[-56.71375275 74.12462616]
[-57.18025208 59.13188553]
[-70.24769592 51.76697159]
[-83.31513977 44.40206146]
[-96.38258362 37.03715134]
[-109.45002747 29.67223930]
[-123.50279999 36.25244141]
[-138.73307800 33.28287125]
[-149.28450012 21.90538788]
[-151.09982300 6.49486494]
[-143.48103333 -7.02303553]
[-129.35769653 -13.45040512]
[-114.16053772 -10.31579018]
[-103.73316193 1.17548740]
[-102.08511353 16.60479546]
[-89.01766968 23.96970749]
[-75.95022583 31.33461761]
[-62.88278198 38.69952774]
[-49.81533813 46.06444168]
[-44.73863220 39.24614716]
[-38.40475464 33.68998337]
[-31.11456680 29.61808395]
[-23.20584869 27.18314552]
[-15.03769016 26.46286583]
[-6.97419691 27.45782471]
[0.63173044 30.09283638]
[7.45384741 34.22164154]
[13.20654583 39.63468170]
[17.65677643 46.06954956]
[20.63342285 53.22361374]
[22.03373146 60.76817322]
[21.82659340 68.36355591]
[36.17646027 72.73178101]
[50.52632523 77.09999847]
[64.87619019 81.46822357]
[79.22605896 85.83644104]
[98.82732391 74.88450623]
[119.36381531 83.96236420]
[133.24421692 78.27603149]
[147.12463379 72.58970642]
[154.02661133 66.33229065]
[161.52621460 66.94980621]
[175.57675171 61.69791031]
[189.62728882 56.44601440]
[197.56307983 42.50317001]
[213.43362427 40.15683365]
[225.06440735 51.20692062]
[223.53329468 67.17674255]
[210.01480103 75.81562042]
[194.87918091 70.49655151]
[180.82864380 75.74844360]
[166.77810669 81.00034332]
[152.81095886 86.47011566]
[138.93054199 92.15644073]
[125.05014038 97.84276581]
[125.05946350 102.04605103]
[124.36843109 106.19215393]
[122.99634552 110.16519928]
[120.98155975 113.85414124]
[130.46360779 125.47700500]
[139.94564819 137.09985352]
[149.42770386 148.72271729]
[158.90974426 160.34556580]
[168.39178467 171.96842957]
[184.14360046 175.01148987]
[191.45758057 189.29032898]
[184.72308350 203.85144043]
[169.10623169 207.52479553]
[156.58692932 197.49249268]
[156.76893616 181.45046997]
[147.28688049 169.82762146]
[137.80484009 158.20475769]
[128.32279968 146.58190918]
[118.84075165 134.95904541]
[109.35870361 123.33618927]
[97.36995697 125.00492096]
[85.99076080 120.87832642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 55]
[8 24]
[9 23]
[10 22]
[12 20]
[13 19]
[14 18]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[61 78]
[62 77]
[63 76]
[65 75]
[66 74]
[67 73]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
