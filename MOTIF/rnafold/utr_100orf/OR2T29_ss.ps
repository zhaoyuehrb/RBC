%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAACAUCACCAGGAUGGCCAACCACACUGGAAGGUUGGAUUUCAUCCUCAUGGGACUCUUCAGACAAUCCAAACAUCCAGCUCUACUUAGUGUGG\
) } def
/len { sequence length } bind def

/coor [
[23.54146385 194.67616272]
[11.33827782 194.35961914]
[0.17031609 204.37342834]
[-10.99764538 214.38725281]
[-22.16560745 224.40107727]
[-33.33356857 234.41490173]
[-44.50152969 244.42872620]
[-46.21616745 249.73977661]
[-49.54151154 253.39047241]
[-53.52131271 255.03843689]
[-57.20857620 254.79525757]
[-69.26103210 263.72488403]
[-73.03544617 279.31762695]
[-87.63987732 285.95767212]
[-101.87104034 278.55136108]
[-104.81201935 262.78018188]
[-94.20674133 250.74243164]
[-78.19066620 251.67243958]
[-66.13820648 242.74281311]
[-54.51535416 233.26075745]
[-43.34738922 223.24693298]
[-32.17942810 213.23312378]
[-21.01146698 203.21929932]
[-9.84350586 193.20547485]
[1.32445562 183.19165039]
[5.77528191 166.29515076]
[23.69975281 162.45323181]
[34.55088425 152.09693909]
[45.40201569 141.74063110]
[56.25314713 131.38433838]
[67.10427856 121.02803802]
[77.95540619 110.67173767]
[88.80654144 100.31543732]
[99.49530029 89.79163361]
[110.01910400 79.10287476]
[114.18764496 63.84070587]
[128.63040161 60.19984055]
[139.15420532 49.51108170]
[149.51051331 38.65995026]
[159.69680786 27.64907455]
[169.88310242 16.63819695]
[180.06939697 5.62731838]
[190.25567627 -5.38355970]
[200.44197083 -16.39443779]
[210.62826538 -27.40531540]
[200.53346252 -49.16838074]
[201.52198792 -73.08602142]
[213.32659912 -93.85094452]
[233.28526306 -106.87738037]
[256.94137573 -109.31379700]
[261.08590698 -123.72985840]
[265.23040771 -138.14591980]
[269.37493896 -152.56198120]
[267.94036865 -169.45513916]
[283.77618408 -175.51013184]
[293.97836304 -161.96937561]
[283.79101562 -148.41746521]
[279.64648438 -134.00140381]
[275.50195312 -119.58533478]
[271.35742188 -105.16927338]
[278.64163208 -101.10707092]
[285.16033936 -95.89707947]
[290.73434448 -89.68058777]
[295.21008301 -82.62659454]
[298.46383667 -74.92720795]
[300.40527344 -66.79240417]
[300.97979736 -58.44429779]
[300.17022705 -50.11109161]
[297.99713135 -42.02082825]
[294.51855469 -34.39515305]
[289.82821655 -27.44324112]
[284.05313110 -21.35606003]
[277.35015869 -16.30112267]
[269.90167236 -12.41787910]
[261.91070557 -9.81386757]
[253.59530640 -8.56174183]
[245.18267822 -8.69723892]
[236.90289307 -10.21816635]
[228.98268127 -13.08441544]
[221.63914490 -17.21902275]
[211.45285034 -6.20814466]
[201.26655579 4.80273342]
[191.08026123 15.81361103]
[180.89398193 26.82448959]
[170.70768738 37.83536530]
[160.52139282 48.84624481]
[158.24980164 56.02018356]
[149.84297180 60.03488541]
[139.31916809 70.72364807]
[135.90335083 85.22128296]
[120.70786285 89.62667847]
[110.18405914 100.31543732]
[107.15103149 107.95060730]
[99.16284180 111.16656494]
[88.31170654 121.52286530]
[77.46057892 131.87916565]
[66.60944366 142.23547363]
[55.75831604 152.59176636]
[44.90718460 162.94807434]
[34.05605316 173.30436707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[11 19]
[12 18]
[27 100]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[33 94]
[34 92]
[35 91]
[37 89]
[38 88]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
