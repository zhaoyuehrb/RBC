%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUCUUUUCGCCAUCUUUUGUCUUUCCGUGGAGCUGUCGCCAUGAAGGUCGAGCUGUGCAGUUUUAGCGGGUACAAGAUCUACCCCGGACACGGGAGGCGCUACGCCAGGACCGACGGGAAGGUUUUCCAGUUUCUUAAUG\
) } def
/len { sequence length } bind def

/coor [
[160.99562073 310.34915161]
[172.96978760 301.14068604]
[167.53321838 287.16055298]
[162.09664917 273.18045044]
[156.66007996 259.20031738]
[151.22351074 245.22021484]
[145.78692627 231.24009705]
[140.35035706 217.25997925]
[128.52629089 208.20234680]
[130.73580933 192.53617859]
[125.29924011 178.55606079]
[119.86266327 164.57594299]
[114.12241364 150.71775818]
[108.08121490 136.98808289]
[87.97080994 135.89878845]
[71.26428986 124.65123749]
[62.68909836 106.42814636]
[64.67174530 86.38608551]
[52.02087021 78.32659149]
[39.36999893 70.26709747]
[26.71912766 62.20760345]
[14.06825638 54.14810944]
[1.41738462 46.08861542]
[-9.14175034 49.07106018]
[-19.37611580 45.77603912]
[-25.93672943 37.53806686]
[-26.81945419 27.26526260]
[-39.10673523 18.66161728]
[-51.39401627 10.05797005]
[-63.68129730 1.45432377]
[-75.96857452 -7.14932299]
[-94.31201172 -8.29354095]
[-101.16888428 -24.41239166]
[-113.64093018 -32.74594498]
[-126.11296844 -41.07949829]
[-138.58502197 -49.41305161]
[-151.05705261 -57.74660492]
[-163.52909851 -66.08016205]
[-176.00114441 -74.41371155]
[-188.99153137 -81.91371155]
[-202.44462585 -88.54804230]
[-215.96928406 -95.03523254]
[-229.56388855 -101.37450409]
[-245.07054138 -97.26069641]
[-257.86871338 -106.93470001]
[-258.14074707 -122.97544861]
[-245.67796326 -133.07785034]
[-230.04074097 -129.49220276]
[-223.22462463 -114.96912384]
[-209.63000488 -108.62984467]
[-202.18220520 -108.65389252]
[-195.81028748 -102.00113678]
[-182.35719299 -95.36680603]
[-185.65203857 -110.00046539]
[-177.80528259 -122.78437042]
[-163.26539612 -126.47108459]
[-150.27534485 -118.97052002]
[-146.19943237 -104.53490448]
[-153.34837341 -91.34807587]
[-167.66758728 -86.88575745]
[-155.19555664 -78.55220032]
[-142.72351074 -70.21865082]
[-130.25146484 -61.88509750]
[-117.77941895 -53.55154419]
[-105.30737305 -45.21799088]
[-92.83532715 -36.88443756]
[-80.86507416 -38.93090820]
[-70.39060211 -32.02571869]
[-67.36492920 -19.43660355]
[-55.07765198 -10.83295727]
[-42.79037094 -2.22931027]
[-30.50308990 6.37433624]
[-18.21580887 14.97798252]
[1.07514310 15.16856861]
[9.47687912 33.43774414]
[22.12775040 41.49723816]
[34.77862167 49.55673218]
[47.42949295 57.61622620]
[60.08036423 65.67572021]
[72.73123932 73.73521423]
[79.83918762 67.95368958]
[88.12786865 64.04896545]
[97.11184692 62.24972916]
[106.26496124 62.66135406]
[115.05117798 65.25972748]
[122.95590973 69.89267731]
[134.23350525 60.00249481]
[145.51110840 50.11230469]
[156.78869629 40.22211838]
[161.54478455 24.52780151]
[177.57385254 21.06354141]
[188.38656616 33.39307404]
[182.85972595 48.83283234]
[166.67887878 51.49971390]
[155.40129089 61.38990402]
[144.12368774 71.28009033]
[132.84609985 81.17028046]
[134.13676453 83.62608337]
[135.24415588 86.16980743]
[150.01626587 83.56508636]
[164.78837585 80.96035767]
[179.56050110 78.35563660]
[194.10906982 69.65071869]
[206.50123596 81.22096252]
[198.81365967 96.33180237]
[182.16522217 93.12775421]
[167.39311218 95.73247528]
[152.62098694 98.33719635]
[137.84887695 100.94192505]
[133.39006042 117.84735870]
[121.81089020 130.94688416]
[127.85208893 144.67655945]
[133.04409790 148.96520996]
[134.94642639 154.42179871]
[133.84278870 159.13937378]
[139.27935791 173.11949158]
[144.71592712 187.09960938]
[156.92886353 197.15719604]
[154.33047485 211.82339478]
[159.76704407 225.80351257]
[165.20362854 239.78363037]
[170.64019775 253.76374817]
[176.07676697 267.74386597]
[181.51333618 281.72399902]
[186.94990540 295.70410156]
[201.99934387 294.40368652]
[216.80526733 297.39718628]
[230.16743469 304.44198608]
[241.00263977 314.96694946]
[248.43251038 328.11889648]
[251.85475159 342.83166504]
[250.99191284 357.91250610]
[245.91397095 372.13894653]
[237.03256226 384.35766602]
[225.06764221 393.57815552]
[210.98918152 399.05297852]
[195.93844604 400.33828735]
[181.13552856 397.32989502]
[167.78044128 390.27169800]
[156.95582581 379.73583984]
[149.53916931 366.57641602]
[146.13171387 351.86022949]
[147.00970459 336.78027344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[10 117]
[11 116]
[12 115]
[13 112]
[14 111]
[18 80]
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 53]
[41 52]
[42 50]
[43 49]
[86 97]
[87 96]
[88 95]
[89 94]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
