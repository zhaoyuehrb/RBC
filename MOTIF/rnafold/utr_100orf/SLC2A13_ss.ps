%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:48:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCGGCCCGCGGAGCCGCGUCCCCCCGGGCAGCCCCGGGCCCCUGCCCUAUGUCCCGCAAGGCAAGCGAGAAUGUGGAGUACACGCUGCGGAGCCUGAGCAGCCUGAUGGGCGAGCGGCGCAGGAAGCAGCCGGAGCCGGACGCGGCGA\
) } def
/len { sequence length } bind def

/coor [
[67.49497986 288.41110229]
[62.91873169 302.69601440]
[58.34248734 316.98089600]
[53.76624298 331.26577759]
[61.22132111 345.20123291]
[56.55909729 360.30221558]
[42.54558563 367.60952759]
[27.49475479 362.78793335]
[20.33599472 348.69793701]
[25.31647110 333.69891357]
[39.48135757 326.68951416]
[44.05760193 312.40463257]
[48.63384628 298.11975098]
[53.21009064 283.83486938]
[47.68642807 265.34289551]
[62.67415619 251.92439270]
[66.65616608 237.46260071]
[70.63818359 223.00079346]
[74.62019348 208.53900146]
[78.60221100 194.07720947]
[82.58422089 179.61540222]
[86.56623840 165.15361023]
[90.54824829 150.69181824]
[94.53025818 136.23001099]
[79.58940125 127.08093262]
[71.64279938 112.96822357]
[56.90156174 115.74239349]
[42.16032791 118.51655579]
[27.41909409 121.29072571]
[12.67785931 124.06488800]
[-2.06337523 126.83905792]
[-14.14467430 137.92843628]
[-29.70573044 132.75296021]
[-32.73866272 116.63671112]
[-20.12344933 106.15870667]
[-4.83754253 112.09782410]
[9.90369225 109.32365417]
[24.64492607 106.54949188]
[39.38616180 103.77532196]
[54.12739563 101.00115204]
[68.86862946 98.22698975]
[68.99410248 90.97150421]
[70.84249878 83.69770050]
[74.42347717 76.82059479]
[79.64582062 70.75720978]
[86.31733704 65.90189362]
[79.45229340 52.56505966]
[72.58724213 39.22822571]
[59.39191818 30.49931335]
[60.44643402 15.64208508]
[53.58139038 2.30525088]
[46.71634293 -11.03158283]
[39.85129547 -24.36841774]
[32.98625183 -37.70524979]
[25.98374748 -50.97042847]
[18.84453773 -64.16253662]
[5.47162867 -72.61687469]
[6.21886921 -87.49272919]
[-0.92034155 -100.68482971]
[-8.05955219 -113.87693787]
[-23.41418648 -116.83822632]
[-33.23286057 -129.00898743]
[-32.87949753 -144.64257812]
[-22.52094269 -156.35728455]
[-7.04819012 -158.62179565]
[6.23299932 -150.36685181]
[11.05165482 -135.49020386]
[5.13255358 -121.01615143]
[12.27176476 -107.82404327]
[19.41097641 -94.63193512]
[32.27323914 -87.12118530]
[32.03664398 -71.30175018]
[39.17585373 -58.10964203]
[45.16321945 -53.69599533]
[46.32308578 -44.57029724]
[53.18812943 -31.23346329]
[60.05317688 -17.89662933]
[66.91822052 -4.55979538]
[73.78327179 8.77703857]
[86.48756409 16.55201149]
[85.92407990 32.36318207]
[92.78912354 45.70001602]
[99.65416718 59.03684998]
[114.42328644 61.65853119]
[125.45914459 51.49930954]
[130.37193298 36.46018982]
[144.97601318 33.53275681]
[156.01187134 23.37353516]
[167.04772949 13.21431160]
[178.08358765 3.05508780]
[189.11946106 -7.10413599]
[186.36466980 -22.28355217]
[192.27490234 -36.53390503]
[204.96426392 -45.30795670]
[220.38357544 -45.80593872]
[233.61262512 -37.86894989]
[240.43006897 -24.02965355]
[238.66046143 -8.70411682]
[228.86849976 3.21733522]
[214.17875671 7.93061161]
[199.27867126 3.93172288]
[188.24281311 14.09094620]
[177.20695496 24.25016975]
[166.17109680 34.40939331]
[155.13523865 44.56861877]
[151.01181030 58.88108063]
[135.61836243 62.53516769]
[124.58251190 72.69438934]
[132.65699768 83.21984100]
[136.46304321 95.91851807]
[135.51026917 109.13193512]
[129.92939758 121.13676453]
[143.12150574 128.27597046]
[156.31361389 135.41519165]
[168.73207092 130.10337830]
[181.74829102 132.89312744]
[190.63467407 142.54110718]
[192.29685974 155.35560608]
[205.33860779 162.76594543]
[218.38034058 170.17626953]
[231.42208862 177.58659363]
[244.53971863 184.86175537]
[257.73181152 192.00096130]
[273.45632935 188.81980896]
[285.65441895 199.24028015]
[284.96875000 215.26867676]
[271.92532349 224.60939026]
[256.52993774 220.09701538]
[250.59260559 205.19306946]
[237.40049744 198.05384827]
[229.97404480 197.63368225]
[224.01176453 190.62834167]
[210.97001648 183.21800232]
[197.92828369 175.80767822]
[184.88653564 168.39735413]
[168.91062927 173.55984497]
[153.83290100 165.43765259]
[149.17440796 148.60729980]
[135.98229980 141.46807861]
[122.79019165 134.32887268]
[108.99205780 140.21203613]
[105.01004791 154.67382812]
[101.02803040 169.13562012]
[97.04602051 183.59741211]
[93.06400299 198.05921936]
[89.08199310 212.52101135]
[85.09997559 226.98280334]
[81.11796570 241.44461060]
[77.13594818 255.90640259]
[83.08473969 265.10726929]
[82.95421600 275.84259033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[16 149]
[17 148]
[18 147]
[19 146]
[20 145]
[21 144]
[22 143]
[23 142]
[24 141]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[46 83]
[47 82]
[48 81]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 73]
[56 72]
[58 70]
[59 69]
[60 68]
[84 108]
[85 107]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[112 140]
[113 139]
[114 138]
[118 135]
[119 134]
[120 133]
[121 132]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
