%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUGACUCCACCUCUUCUGCCACAAACGUCAGCAUGGUGGUAUCAGCCGGCCCUUGGUCCAGCGAGAAGGCAGAGAUGAACAUUCUAGAAAUCAACGAGAAAUUGCGCCCCCAGUUGGCAGAGAACAAACAGC\
) } def
/len { sequence length } bind def

/coor [
[85.08670044 165.64782715]
[81.30133057 151.13331604]
[81.87008667 136.14410400]
[86.74446106 121.95818329]
[95.51206970 109.78176880]
[81.52498627 115.20039368]
[67.53790283 120.61901855]
[61.09214020 134.79963684]
[46.83005905 140.09564209]
[33.35073090 133.86320496]
[19.36364746 139.28182983]
[5.37656307 144.70045471]
[-8.61052036 150.11907959]
[-22.59760284 155.53770447]
[-25.14098930 169.13627625]
[-34.01909256 179.60423279]
[-46.81601334 184.25932312]
[-60.13090134 181.97889709]
[-70.48165131 173.46842957]
[-84.59016418 178.56254578]
[-98.69867706 183.65664673]
[-103.34595490 188.56182861]
[-108.93887329 190.08457947]
[-113.57810211 188.64372253]
[-127.90682220 193.08082581]
[-138.64472961 205.47555542]
[-154.69445801 202.10833740]
[-159.54542542 186.44308472]
[-148.20736694 174.59486389]
[-132.34391785 178.75210571]
[-118.01519012 174.31500244]
[-103.79278564 169.54814148]
[-89.68427277 164.45402527]
[-75.57575989 159.35992432]
[-71.54673004 143.48875427]
[-58.74394226 133.01652527]
[-42.05816650 132.19805908]
[-28.01622772 141.55061340]
[-14.02914524 136.13198853]
[-0.04206172 130.71336365]
[13.94502163 125.29473877]
[27.93210602 119.87611389]
[33.69467926 106.18932343]
[47.80238342 100.49481201]
[62.11927795 106.63193512]
[76.10636139 101.21331024]
[90.09344482 95.79468536]
[102.56549072 87.46112823]
[112.92427063 76.61236572]
[123.28305054 65.76361084]
[133.64183044 54.91484451]
[144.00061035 44.06608200]
[154.35940552 33.21731949]
[155.62512207 27.96705818]
[158.52946472 24.15719604]
[162.22402954 22.17613411]
[165.83111572 22.00757790]
[176.91625977 11.90214348]
[188.00138855 1.79670858]
[184.82958984 -13.16614246]
[189.54202271 -27.61223984]
[200.77792358 -37.69295883]
[215.45286560 -40.77552414]
[229.60508728 -36.13006973]
[240.69021606 -46.23550415]
[251.77536011 -56.34093857]
[262.86047363 -66.44637299]
[256.28024292 -80.03240967]
[253.79740906 -94.90714264]
[255.60478210 -109.86369324]
[261.54739380 -123.69097137]
[271.13580322 -135.27174377]
[283.58636475 -143.67294312]
[297.88522339 -148.22077942]
[312.87103271 -148.55485535]
[327.32907104 -144.65663147]
[340.08987427 -136.85026550]
[351.17501831 -146.95570374]
[362.26013184 -157.06114197]
[357.42498779 -171.50209045]
[358.88796997 -186.66056824]
[366.39566040 -199.91027832]
[378.64724731 -208.95562744]
[393.52011108 -212.22944641]
[408.43740845 -209.16453552]
[420.81466675 -200.29190063]
[428.50741577 -187.14878845]
[430.18286133 -172.01232910]
[425.55072021 -157.50497437]
[415.41351318 -146.14024353]
[401.52761841 -139.88713074]
[386.29879761 -139.82902527]
[372.36557007 -145.97599792]
[361.28045654 -135.87057495]
[350.19531250 -125.76513672]
[356.79095459 -112.33848572]
[359.33853149 -97.58243561]
[357.62316895 -82.69138336]
[351.77539062 -68.87313080]
[342.26126099 -57.25085831]
[329.84515381 -48.77189255]
[315.52856445 -44.13043976]
[300.46905518 -43.71079254]
[285.88684082 -47.55550003]
[272.96591187 -55.36124039]
[261.88079834 -45.25580597]
[250.79565430 -35.15037155]
[239.71052551 -25.04493713]
[243.03034973 -10.52445889]
[238.60690308 3.80345297]
[227.53247070 14.06129169]
[212.71319580 17.42071342]
[198.10682678 12.88184261]
[187.02169800 22.98727798]
[175.93655396 33.09271240]
[165.20816040 43.57610321]
[154.84938049 54.42486572]
[144.49060059 65.27362823]
[134.13182068 76.12239075]
[123.77303314 86.97115326]
[113.41425323 97.81991577]
[128.01445007 94.37980652]
[142.98596191 95.30384827]
[157.05230713 100.51325226]
[169.01417542 109.56387329]
[177.85168457 121.68403625]
[182.81135559 135.84036255]
[183.47030640 150.82588196]
[179.77235413 165.36291504]
[172.03279114 178.21200562]
[160.91151428 188.27764893]
[147.35671997 194.70162964]
[132.52410889 196.93623352]
[117.67830658 194.79093933]
[104.08509827 188.44865417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[19 34]
[20 33]
[21 32]
[24 31]
[25 30]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
[57 115]
[58 114]
[59 113]
[64 108]
[65 107]
[66 106]
[67 105]
[77 95]
[78 94]
[79 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
