%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:07 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SKOR1)
} def

/sequence { (\
AUGAUCCCAAAGAGCCUGGUCCAGGCAGCGGAAACCCAGAGGGGUCUCUGCGAGCCAGGAGGGAAAGGAAGAGAGGGGAGAAGUGGAGGAAAAGGGGAGA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 84 0.494205576 ubox
2 83 0.512225679 ubox
2 85 0.020953262 ubox
3 84 0.014872604 ubox
4 84 0.032115159 ubox
5 64 0.007212630 ubox
5 69 0.006243141 ubox
5 77 0.011173259 ubox
5 78 0.221549967 ubox
5 79 0.890688710 ubox
5 81 0.023353719 ubox
5 83 0.019769074 ubox
5 87 0.012999002 ubox
5 89 0.015707522 ubox
5 90 0.011870938 ubox
5 97 0.012233206 ubox
5 98 0.098061052 ubox
5 100 0.004605278 ubox
6 63 0.007709980 ubox
6 68 0.006653869 ubox
6 76 0.014971595 ubox
6 77 0.339267011 ubox
6 78 0.932778773 ubox
6 80 0.022830068 ubox
6 86 0.013253415 ubox
6 88 0.024270720 ubox
6 89 0.012308569 ubox
6 96 0.018934265 ubox
6 97 0.104802660 ubox
6 99 0.005191110 ubox
7 62 0.007711342 ubox
7 67 0.006623835 ubox
7 68 0.004229989 ubox
7 75 0.014924161 ubox
7 76 0.342004234 ubox
7 77 0.932165162 ubox
7 78 0.024452406 ubox
7 85 0.012625544 ubox
7 86 0.037857708 ubox
7 88 0.009164892 ubox
7 95 0.019031990 ubox
7 96 0.104803602 ubox
7 97 0.006299854 ubox
8 61 0.007701733 ubox
8 67 0.004281729 ubox
8 75 0.343676093 ubox
8 76 0.930838473 ubox
8 77 0.024452045 ubox
8 85 0.038972580 ubox
8 94 0.019071236 ubox
8 95 0.104723567 ubox
8 96 0.006317797 ubox
9 84 0.038867312 ubox
14 26 0.015503408 ubox
15 25 0.015521285 ubox
15 59 0.005206346 ubox
15 62 0.019143729 ubox
15 63 0.075495878 ubox
15 68 0.989062125 ubox
15 76 0.020831668 ubox
15 77 0.027370311 ubox
15 78 0.031672347 ubox
15 86 0.012478523 ubox
15 89 0.102401914 ubox
16 24 0.015521497 ubox
16 58 0.005210920 ubox
16 61 0.019161432 ubox
16 62 0.075528293 ubox
16 63 0.009235782 ubox
16 67 0.989537944 ubox
16 68 0.033186430 ubox
16 71 0.003834490 ubox
16 75 0.020924410 ubox
16 76 0.027389133 ubox
16 77 0.031643350 ubox
16 85 0.012440458 ubox
16 88 0.102437364 ubox
17 23 0.015505613 ubox
17 57 0.005211043 ubox
17 60 0.011854207 ubox
17 61 0.071620634 ubox
17 62 0.014560175 ubox
17 66 0.983228894 ubox
17 67 0.033132546 ubox
17 70 0.003847951 ubox
17 74 0.020816930 ubox
17 75 0.027161762 ubox
17 76 0.031322537 ubox
17 87 0.101299514 ubox
18 22 0.015265904 ubox
18 56 0.005181361 ubox
19 55 0.005169795 ubox
19 84 0.006574188 ubox
20 54 0.004828029 ubox
20 59 0.005206883 ubox
20 60 0.972479256 ubox
20 62 0.027544914 ubox
20 63 0.178463280 ubox
20 64 0.103081603 ubox
20 69 0.005568129 ubox
20 79 0.004057046 ubox
20 87 0.007132058 ubox
21 58 0.005424993 ubox
21 59 0.977167598 ubox
21 61 0.015052130 ubox
21 62 0.182922852 ubox
21 63 0.104322501 ubox
21 68 0.005582663 ubox
21 78 0.004061021 ubox
21 86 0.009042189 ubox
22 58 0.975637471 ubox
22 61 0.182479776 ubox
22 62 0.103689444 ubox
22 67 0.005563429 ubox
22 77 0.004043052 ubox
22 85 0.009044269 ubox
23 84 0.008925850 ubox
24 56 0.998105400 ubox
25 51 0.003666435 ubox
25 55 0.999846894 ubox
26 50 0.003667436 ubox
26 54 0.998804480 ubox
27 49 0.003656341 ubox
28 48 0.003636601 ubox
28 51 0.999808651 ubox
29 50 0.999954401 ubox
30 47 0.004022789 ubox
30 49 0.999216339 ubox
31 46 0.004585545 ubox
31 48 0.999932257 ubox
32 45 0.004195288 ubox
32 47 0.978385841 ubox
34 45 0.980243064 ubox
35 42 0.004321678 ubox
35 43 0.055702376 ubox
35 44 0.998400392 ubox
36 41 0.004334759 ubox
36 42 0.058360617 ubox
36 43 0.998259639 ubox
36 44 0.004408191 ubox
37 41 0.060450389 ubox
37 42 0.996414612 ubox
37 43 0.005271147 ubox
55 62 0.010199266 ubox
55 63 0.008011100 ubox
55 68 0.004522813 ubox
55 86 0.005301032 ubox
56 61 0.010280560 ubox
56 62 0.008025017 ubox
56 67 0.004536438 ubox
56 85 0.005318337 ubox
57 84 0.005182805 ubox
5 79 0.9500000 lbox
6 78 0.9500000 lbox
7 77 0.9500000 lbox
8 76 0.9500000 lbox
15 68 0.9500000 lbox
16 67 0.9500000 lbox
17 66 0.9500000 lbox
20 60 0.9500000 lbox
21 59 0.9500000 lbox
22 58 0.9500000 lbox
24 56 0.9500000 lbox
25 55 0.9500000 lbox
26 54 0.9500000 lbox
28 51 0.9500000 lbox
29 50 0.9500000 lbox
30 49 0.9500000 lbox
31 48 0.9500000 lbox
32 47 0.9500000 lbox
34 45 0.9500000 lbox
35 44 0.9500000 lbox
36 43 0.9500000 lbox
37 42 0.9500000 lbox
showpage
end
%%EOF
