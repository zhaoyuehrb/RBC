%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGGCCUGGGGUUUUGGGGCCACCCUGCUGGACCUCUCCUGCUGCUGCUGCUGCUGGUGCUGCCACCCCGGGCCCUGCCAGAAGGACCCCUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[200.74784851 335.57339478]
[209.93620300 321.92855835]
[203.18878174 308.53186035]
[196.44134521 295.13513184]
[189.69392395 281.73840332]
[174.54765320 273.02679443]
[175.52328491 254.72120667]
[168.36248779 241.54080200]
[161.20169067 228.36039734]
[154.04089355 215.17999268]
[146.88009644 201.99960327]
[139.71929932 188.81919861]
[132.55850220 175.63879395]
[125.39770508 162.45838928]
[118.23690796 149.27799988]
[111.07611084 136.09759521]
[92.74681854 137.05546570]
[76.13137817 129.25756836]
[65.15581512 114.54644012]
[62.41352463 96.39815521]
[48.06365967 92.02993011]
[33.71379471 87.66171265]
[19.36392975 83.29349518]
[4.94786501 79.14896393]
[-9.53091049 75.22913361]
[-24.00968552 71.30931091]
[-37.59056091 79.39233398]
[-52.88849258 75.42385101]
[-60.82748413 61.75827408]
[-56.69747543 46.50315475]
[-42.94873047 38.70908737]
[-27.73813057 43.00014877]
[-20.08985710 56.83053207]
[-5.61108208 60.75036240]
[8.86769390 64.67018890]
[16.27713585 63.35655212]
[23.73214912 68.94362640]
[38.08201599 73.31184387]
[52.43188095 77.68006897]
[66.78174591 82.04828644]
[78.47634888 68.97664642]
[94.81517792 62.59901047]
[95.74771881 47.62802887]
[88.88333893 33.37352753]
[97.39691925 21.15189934]
[98.32946777 6.18091440]
[91.46508789 -8.07358742]
[99.97866821 -20.29521561]
[100.91121674 -35.26619720]
[93.12990570 -49.70168686]
[101.96985626 -63.51426315]
[118.33728790 -62.49473572]
[125.39477539 -47.69190216]
[115.88219452 -34.33365250]
[114.94965363 -19.36267090]
[121.88073730 -6.17899275]
[113.30045319 7.11345911]
[112.36790466 22.08444405]
[119.29898834 35.26811981]
[110.71870422 48.56057358]
[109.78616333 63.53155518]
[119.24742889 67.51534271]
[127.28596497 73.90033722]
[133.30757141 82.21456146]
[136.86715698 91.84346008]
[137.70158386 102.07526398]
[135.74919128 112.15367126]
[131.15428162 121.33370972]
[124.25650787 128.93679810]
[131.41731262 142.11718750]
[138.57810974 155.29759216]
[145.73890686 168.47799683]
[152.89970398 181.65840149]
[160.06050110 194.83879089]
[167.22129822 208.01919556]
[174.38209534 221.19960022]
[181.54289246 234.38000488]
[188.70368958 247.56040955]
[200.92788696 252.02424622]
[206.58515930 263.29455566]
[203.09065247 274.99096680]
[209.83807373 288.38769531]
[216.58549500 301.78442383]
[223.33293152 315.18115234]
[237.41658020 315.26885986]
[250.01141357 321.42172241]
[258.65469360 332.37255859]
[261.68432617 345.92236328]
[258.55801392 359.38189697]
[249.94952393 370.10540771]
[256.27703857 383.70547485]
[262.60458374 397.30557251]
[274.76812744 409.11593628]
[266.78652954 424.07354736]
[250.20393372 420.54455566]
[249.00448608 403.63308716]
[242.67695618 390.03302002]
[236.34944153 376.43292236]
[220.30314636 375.43917847]
[206.84187317 366.47964478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 84]
[3 83]
[4 82]
[5 81]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[20 40]
[21 39]
[22 38]
[23 37]
[24 35]
[25 34]
[26 33]
[42 61]
[43 60]
[45 58]
[46 57]
[48 55]
[49 54]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
