%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGGUUUUUAUCUGCGCAGAUCACACGAACUACAAGGGAUGGGAAAACCAGGCAGAGUGAACCAAACCACUGUUUCAGACUUCCUCCUUCUAGGAC\
) } def
/len { sequence length } bind def

/coor [
[92.32064819 220.25415039]
[102.59773254 208.24760437]
[101.20004272 193.31286621]
[99.80236053 178.37812805]
[98.40467072 163.44338989]
[97.00698090 148.50865173]
[95.60929108 133.57391357]
[94.21160126 118.63916779]
[84.37267303 107.31682587]
[69.77899170 103.84918213]
[55.18531418 100.38153839]
[40.59163666 96.91389465]
[25.99795914 93.44625092]
[11.40428162 89.97859955]
[-3.18939638 86.51095581]
[-17.78307533 83.04331207]
[-32.37675095 79.57566833]
[-43.52782822 91.66949463]
[-59.15154648 96.51165009]
[-75.00569916 92.88533020]
[-86.83445740 81.85993958]
[-91.51079559 66.47803497]
[-106.20525360 63.46592712]
[-121.27803802 68.27445221]
[-132.19235229 58.13902664]
[-146.88682556 55.12692261]
[-162.26673889 60.81815338]
[-174.71092224 50.13759232]
[-171.41786194 34.07247925]
[-155.77516174 29.14923096]
[-143.87471008 40.43246078]
[-129.18025208 43.44456482]
[-115.15851593 38.42059326]
[-103.19315338 48.77146530]
[-88.49868774 51.78356934]
[-80.05576324 40.92925262]
[-67.68354034 34.77610779]
[-53.80039978 34.59125900]
[-41.14808273 40.46885681]
[-32.25024033 51.30011368]
[-28.90910721 64.98198700]
[-14.31542969 68.44963837]
[0.27824840 71.91728210]
[14.87192631 75.38492584]
[29.46560478 78.85256958]
[44.05928421 82.32021332]
[58.65296173 85.78785706]
[73.24663544 89.25550079]
[87.84031677 92.72315216]
[91.31663513 88.15041351]
[96.48382568 85.20156860]
[102.59682465 84.48557281]
[108.70009613 86.27507019]
[113.77699280 90.43836975]
[128.25576782 86.51853943]
[142.73454285 82.59871674]
[154.03326416 71.52398682]
[168.34020996 75.66651154]
[182.81898499 71.74668121]
[190.71826172 58.32136536]
[205.45764160 54.55235672]
[218.20794678 62.16585159]
[232.68672180 58.24602509]
[247.16549683 54.32619476]
[261.64428711 50.40636444]
[272.94299316 39.33163452]
[287.24993896 43.47416306]
[301.72869873 39.55433273]
[309.37698364 25.72395134]
[324.58758545 21.43288994]
[338.33633423 29.22695732]
[342.46633911 44.48207474]
[334.52734375 58.14764786]
[319.22940063 62.11613846]
[305.64852905 54.03311157]
[291.16976929 57.95293808]
[280.90667725 68.74729919]
[265.56411743 64.88513947]
[251.08532715 68.80496979]
[236.60655212 72.72480011]
[222.12777710 76.64463043]
[214.95976257 89.65059662]
[200.33206177 93.83211517]
[186.73881531 86.22545624]
[172.26004028 90.14528656]
[161.99694824 100.93964386]
[146.65437317 97.07749176]
[132.17559814 100.99731445]
[117.69682312 104.91714478]
[109.14633942 117.24147797]
[110.54402924 132.17622375]
[111.94171906 147.11096191]
[113.33940887 162.04570007]
[114.73709869 176.98043823]
[116.13478851 191.91517639]
[117.53247833 206.84992981]
[129.85888672 216.74107361]
[131.49780273 232.46015930]
[121.47688293 244.68132019]
[105.74134827 246.15394592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[22 35]
[23 34]
[25 32]
[26 31]
[54 89]
[55 88]
[56 87]
[58 85]
[59 84]
[62 81]
[63 80]
[64 79]
[65 78]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
