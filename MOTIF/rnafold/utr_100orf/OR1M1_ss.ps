%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACCAAGAAACCAAACCAGUGCAUCUCAAUUCAUCCUCCUGGGACUCUCAGAAAAGCCAGAGCAGGAGACGCUUCUCUUUUCCCUGUUCUUCUGCA\
) } def
/len { sequence length } bind def

/coor [
[83.53535461 121.48674774]
[73.49122620 110.06418610]
[65.13344574 122.52000427]
[56.77565765 134.97583008]
[63.61386871 148.72843933]
[62.64361191 164.05665588]
[54.12587738 176.83724976]
[40.35189438 183.63232422]
[25.02679634 182.61402893]
[12.27295589 174.05627441]
[5.52109385 160.26106262]
[6.58742619 144.93922424]
[15.18511486 132.21228027]
[29.00142479 125.50368500]
[44.31983948 126.61804199]
[52.67762375 114.16222382]
[61.03540802 101.70639801]
[47.72912216 108.63047791]
[38.04011917 120.08138275]
[25.96221542 128.97656250]
[12.15237522 134.83218384]
[-2.63823843 137.32972717]
[-17.60511017 136.33335876]
[-31.93413734 131.89726257]
[-44.84591675 124.26274109]
[-55.63812637 113.84505463]
[-63.72374344 101.21086121]
[-68.66295624 87.04737854]
[-70.18711090 72.12501526]
[-68.21330261 57.25544739]
[-62.84888840 43.24748230]
[-54.38566208 30.86306572]
[-43.28396606 20.77582932]
[-30.14766121 13.53445244]
[-15.69128036 9.53282166]
[-0.70115662 8.98859787]
[14.00734425 11.93138409]
[27.63417435 18.20111084]
[39.43812180 27.45674896]
[48.77713013 39.19484711]
[55.14321518 52.77692795]
[58.18999863 67.46304321]
[66.57668304 79.89942169]
[65.17899323 64.96468353]
[63.78130341 50.02994537]
[62.38361359 35.09520340]
[60.98592758 20.16046333]
[53.49001312 4.95363474]
[66.02748108 -6.45900393]
[80.46482086 2.42915869]
[75.92066956 18.76277351]
[77.31835175 33.69751358]
[78.71604156 48.63225555]
[80.11373138 63.56699371]
[81.51142120 78.50173187]
[92.62689209 73.68678284]
[104.29037476 74.05389404]
[114.28838348 79.15715027]
[120.88202667 87.68690491]
[123.10746002 97.78180695]
[137.70114136 101.24945831]
[156.56477356 94.48576355]
[170.26780701 107.97798157]
[185.04882812 110.53163147]
[199.82986450 113.08528900]
[214.61090088 115.63893890]
[229.39192200 118.19259644]
[244.17295837 120.74624634]
[258.95397949 123.29989624]
[273.73501587 125.85355377]
[282.90643311 124.21712494]
[288.93298340 128.72334290]
[303.62747192 131.73544312]
[313.26736450 119.84716797]
[327.33239746 113.81116486]
[342.59051514 115.01445770]
[355.53555298 123.18053436]
[363.19281006 136.43289185]
[363.80267334 151.72625732]
[357.22506714 165.54629517]
[344.97143555 174.71726990]
[329.85757446 177.13177490]
[315.35653687 172.23495483]
[304.80056763 161.15208435]
[300.61535645 146.42990112]
[285.92089844 143.41780090]
[271.18136597 140.63458252]
[256.40032959 138.08093262]
[241.61930847 135.52728271]
[226.83827209 132.97361755]
[212.05723572 130.41996765]
[197.27621460 127.86631775]
[182.49517822 125.31266022]
[167.71415710 122.75901031]
[159.74322510 129.49255371]
[149.15066528 130.65527344]
[139.51582336 125.60545349]
[134.23348999 115.84313202]
[119.63981628 112.37548828]
[110.75325775 122.01290894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[60 99]
[61 98]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[72 86]
[73 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
