%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCUGCCAGGAUGAGGCUGCUGUGUGGCCUGUGGCUGUGGCUCUCCUUGCUGAAAGUCCUGCAGGCCCAGACCCCAACCCCCCUGCCACUCCCGCCCCCGAUGCAGAGCU\
) } def
/len { sequence length } bind def

/coor [
[72.58735657 142.41363525]
[62.66455078 153.66255188]
[52.74174500 164.91145325]
[42.81893921 176.16035461]
[32.89613342 187.40927124]
[29.56945038 202.87677002]
[15.34768867 207.30291748]
[5.42488337 218.55183411]
[-4.49792242 229.80073547]
[-1.98510146 245.23510742]
[-10.02557278 258.64721680]
[-24.82287216 263.70428467]
[-39.39016724 258.01852417]
[-46.84922409 244.27456665]
[-43.67810822 228.96188354]
[-31.37412071 219.31066895]
[-15.74682999 219.87792969]
[-5.82402420 208.62902832]
[4.09878111 197.38011169]
[6.71571922 182.71720886]
[21.64722633 177.48646545]
[31.57003212 166.23754883]
[41.49283981 154.98864746]
[51.41564178 143.73974609]
[61.33844757 132.49082947]
[49.99496841 107.06163025]
[53.85314560 79.48567200]
[71.74008179 58.14612579]
[65.28555298 44.60585022]
[58.83102417 31.06557655]
[52.37649155 17.52530098]
[45.92196274 3.98502684]
[39.46743393 -9.55524826]
[33.01290512 -23.09552383]
[26.18447495 -36.45114136]
[18.98742294 -49.61178207]
[11.79037094 -62.77242279]
[4.59331894 -75.93305969]
[-11.32736015 -85.05451202]
[-10.39976215 -102.51841736]
[-17.95987320 -115.47390747]
[-25.51998520 -128.42939758]
[-33.08009720 -141.38488770]
[-48.52208710 -143.85043335]
[-58.72740173 -155.69886780]
[-58.87740326 -171.33573914]
[-48.90126419 -183.37777710]
[-33.50941086 -186.13909912]
[-19.96940994 -178.31590271]
[-14.67443371 -163.60206604]
[-20.12460709 -148.94499207]
[-12.56449604 -135.98950195]
[-5.00438404 -123.03401947]
[2.55572748 -110.07852936]
[14.24851608 -106.65105438]
[20.62616730 -95.79883575]
[17.75395966 -83.13011169]
[24.95101166 -69.96947479]
[32.14806366 -56.80883408]
[39.34511566 -43.64819336]
[43.72684479 -41.44332123]
[46.69762421 -36.38974762]
[46.55318069 -29.55005264]
[53.00770950 -16.00977707]
[59.46223831 -2.46950293]
[65.91677094 11.07077217]
[72.37129974 24.61104774]
[78.82582855 38.15132141]
[85.28035736 51.69159698]
[92.57370758 50.04782486]
[100.02980804 49.49882507]
[107.48526001 50.05662537]
[114.77666473 51.70900726]
[121.74420929 54.41975403]
[128.23521423 58.12945175]
[134.10739136 62.75680542]
[139.23205566 68.20039368]
[143.49690247 74.34091187]
[146.80845642 81.04378510]
[149.09413147 88.16211700]
[150.30384827 95.53988647]
[150.41108704 103.01540375]
[149.41348267 110.42484283]
[147.33291626 117.60579681]
[144.21499634 124.40090179]
[156.12586975 133.51852417]
[168.03672791 142.63615417]
[179.94760132 151.75378418]
[190.80618286 149.68188477]
[200.77723694 153.91677856]
[206.58349609 162.79914856]
[206.46638489 173.18888855]
[217.85212708 182.95437622]
[232.91625977 179.23257446]
[247.27828979 185.10722351]
[255.41574097 198.31939697]
[254.19960022 213.78874207]
[244.09748840 225.56698608]
[228.99386597 229.12513733]
[214.69641113 223.09503174]
[206.70275879 209.79536438]
[208.08665466 194.34011841]
[196.70089722 184.57464600]
[177.55302429 182.56912231]
[170.82997131 163.66465759]
[158.91909790 154.54702759]
[147.00823975 145.42939758]
[135.09736633 136.31176758]
[126.16767120 143.19285583]
[115.93399811 147.92156982]
[104.90631866 150.26228333]
[93.63414001 150.09835815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 60]
[36 59]
[37 58]
[38 57]
[40 54]
[41 53]
[42 52]
[43 51]
[85 108]
[86 107]
[87 106]
[88 105]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
