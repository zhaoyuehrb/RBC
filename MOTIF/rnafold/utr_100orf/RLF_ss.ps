%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGCCUACGCGCUGGUGGGCCGUGGGAAGAUGGCGGACGGAAAGGGAGACGCCGCCGCUGUCGCCGGGGCUGGGGCUGAGGCUCCGGCGGUAGCGGGAGCCGGAGAUGGAGUCGAGACUGAGUCCAUGG\
) } def
/len { sequence length } bind def

/coor [
[138.50717163 161.09864807]
[129.23478699 149.30784607]
[119.96240234 137.51705933]
[110.69001770 125.72625732]
[86.02180481 130.20094299]
[63.14583969 111.80599976]
[52.28982925 122.15718842]
[41.43381882 132.50837708]
[30.57780838 142.85955811]
[19.72179794 153.21073914]
[8.86578655 163.56192017]
[4.76098728 171.83364868]
[-2.37391043 174.02645874]
[-13.47318077 184.11636353]
[-24.57245064 194.20626831]
[-29.04765892 209.98297119]
[-45.01233673 213.73278809]
[-56.04339218 201.59822083]
[-50.79302216 186.06227112]
[-34.66235733 183.10699463]
[-23.56308556 173.01708984]
[-12.46381569 162.92718506]
[-1.48539817 152.70591736]
[9.37061214 142.35473633]
[20.22662354 132.00354004]
[31.08263397 121.65235901]
[41.93864441 111.30117798]
[52.79465485 100.94998932]
[52.25960922 93.46910095]
[38.36071396 99.11008453]
[28.70096779 87.63449097]
[36.63003922 74.90146637]
[51.18952179 78.50731659]
[50.65447998 71.02642822]
[38.43584061 62.32557297]
[26.21720123 53.62471771]
[13.99856091 44.92386627]
[1.77992213 36.22301102]
[-7.11915541 33.75782394]
[-10.62262630 27.16685486]
[-22.63074493 18.17769051]
[-36.71778488 24.29739761]
[-51.97554779 22.53775787]
[-64.29976654 13.37210083]
[-70.37528229 -0.73405367]
[-68.56782532 -15.98622322]
[-59.36358643 -28.28165054]
[-45.23845673 -34.31292725]
[-29.99202728 -32.45766830]
[-17.72551155 -23.21493149]
[-11.73854065 -9.07096672]
[-13.64157963 6.16957140]
[-1.63346100 15.15873623]
[10.48077583 24.00437164]
[22.69941521 32.70522690]
[34.91805267 41.40607834]
[47.13669205 50.10693359]
[59.35533142 58.80778503]
[74.04943848 55.79394913]
[81.85646057 42.98572922]
[89.66347504 30.17751122]
[97.47048950 17.36929131]
[105.27751160 4.56107187]
[113.08452606 -8.24714756]
[120.89154053 -21.05536652]
[128.69856262 -33.86358643]
[136.50556946 -46.67180634]
[144.31259155 -59.48002625]
[152.11961365 -72.28824615]
[159.92663574 -85.09646606]
[167.73364258 -97.90468597]
[175.54066467 -110.71290588]
[183.34768677 -123.52111816]
[177.25138855 -137.79048157]
[180.73951721 -152.91043091]
[192.47080994 -163.06701660]
[207.93435669 -164.35484314]
[221.18409729 -156.27870178]
[227.12522888 -141.94404602]
[223.47328186 -126.86283112]
[211.63250732 -116.83409882]
[196.15589905 -115.71410370]
[188.34887695 -102.90588379]
[180.54187012 -90.09766388]
[172.73484802 -77.28944397]
[164.92782593 -64.48122406]
[157.12081909 -51.67300797]
[149.31379700 -38.86478806]
[141.50677490 -26.05657005]
[133.69976807 -13.24835014]
[125.89274597 -0.44013038]
[118.08573151 12.36808872]
[110.27870941 25.17630768]
[102.47169495 37.98452759]
[94.66467285 50.79274750]
[86.85765839 63.60096741]
[110.31809235 65.52186584]
[126.63841248 80.05302429]
[130.56845093 99.83317566]
[122.48081207 116.45387268]
[131.75318909 128.24467468]
[141.02557373 140.03546143]
[150.29795837 151.82626343]
[164.05020142 150.28167725]
[176.65982056 155.71435547]
[184.85278320 166.59657288]
[186.56010437 180.00128174]
[181.43946838 192.38908386]
[190.42863464 204.39720154]
[199.41780090 216.40531921]
[208.40696716 228.41345215]
[217.39613342 240.42156982]
[231.86029053 246.83238220]
[233.29344177 261.65786743]
[242.28259277 273.66598511]
[251.27175903 285.67410278]
[266.55163574 291.62872314]
[268.76693726 307.87756348]
[255.63873291 317.70520020]
[240.67222595 311.00183105]
[239.26364136 294.66326904]
[230.27447510 282.65515137]
[221.28530884 270.64703369]
[207.46411133 265.09512329]
[205.38801575 249.41073608]
[196.39884949 237.40260315]
[187.40968323 225.39448547]
[178.42051697 213.38636780]
[169.43135071 201.37825012]
[153.07882690 202.15710449]
[139.32708740 192.97285461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[13 22]
[14 21]
[15 20]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[40 53]
[41 52]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
