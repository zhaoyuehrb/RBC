%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGCGCACCGGGGCCUCAGCCAUGGCGACCGUGCUGUCCAGGGCGCUCAAGCUGCCGGGGAAGAAGAGCCCAGACCUAGGGGAGUAUGAUCCACUUACCCAGGCUGACAGUGAUGAGAGCG\
) } def
/len { sequence length } bind def

/coor [
[-103.87202454 221.75668335]
[-115.96244812 230.63484192]
[-128.05287170 239.51300049]
[-140.14329529 248.39115906]
[-152.23371887 257.26931763]
[-150.65995789 272.48345947]
[-156.87178040 286.35107422]
[-169.10951233 295.18872070]
[-184.02793884 296.70413208]
[-197.61038208 290.58996582]
[-209.70080566 299.46813965]
[-221.79122925 308.34628296]
[-228.33502197 322.75079346]
[-243.17309570 324.04727173]
[-255.26351929 332.92544556]
[-267.35394287 341.80358887]
[-273.44906616 357.02795410]
[-289.71762085 359.09344482]
[-299.42391968 345.87527466]
[-292.58291626 330.97116089]
[-276.23208618 329.71316528]
[-264.14166260 320.83502197]
[-252.05125427 311.95684814]
[-246.37223816 298.18737793]
[-230.66938782 296.25585938]
[-218.57896423 287.37771606]
[-206.48854065 278.49954224]
[-208.25622559 263.70965576]
[-202.34426880 249.92907715]
[-190.24838257 240.89823914]
[-175.15718079 239.12274170]
[-161.11187744 245.17889404]
[-149.02145386 236.30073547]
[-136.93103027 227.42257690]
[-124.84060669 218.54441833]
[-112.75018311 209.66625977]
[-114.54710388 201.50422668]
[-113.80264282 193.14573669]
[-110.56533051 185.36685181]
[-105.11611938 178.89593506]
[-97.94406891 174.34558105]
[-89.70249939 172.15457153]
[-81.14953613 172.54562378]
[-73.07831573 175.50300598]
[-66.24348450 180.77201843]
[-52.94808197 173.82707214]
[-45.24948120 161.07635498]
[-29.43521500 161.54495239]
[-16.13981438 154.60000610]
[-2.84441471 147.65505981]
[10.45098591 140.71011353]
[18.97656631 125.42711639]
[37.32094574 126.21188354]
[50.43614578 118.93235016]
[63.55134201 111.65282440]
[76.66654205 104.37329102]
[76.41766357 88.79276276]
[86.39006042 74.98226929]
[104.02021790 69.41275787]
[107.03969574 54.71981049]
[110.05917358 40.02685928]
[98.95385742 29.31819725]
[95.42324829 14.30026245]
[100.59395599 -0.23477489]
[112.81602478 -9.64883804]
[128.18943787 -10.93793297]
[141.80859375 -3.69071412]
[149.32766724 9.78025723]
[148.34735107 25.17644310]
[139.18046570 37.58497620]
[124.75212097 43.04633713]
[121.73264313 57.73928833]
[118.71316528 72.43223572]
[128.90911865 83.43416595]
[143.78892517 81.53908539]
[152.01599121 77.30768585]
[159.06910706 79.78942108]
[173.99214172 78.27189636]
[188.91517639 76.75437164]
[197.24679565 72.73274231]
[204.23477173 75.39234924]
[219.19146729 74.25334930]
[234.14816284 73.11435699]
[249.08923340 71.78598785]
[264.01226807 70.26846313]
[278.93530273 68.75093842]
[293.85833740 67.23341370]
[302.49627686 54.19806290]
[317.50683594 49.81435776]
[331.80252075 56.15214920]
[338.63333130 70.21891785]
[334.77395630 85.37277222]
[322.04672241 94.45852661]
[306.46096802 93.18616486]
[295.37588501 82.15644836]
[280.45281982 83.67397308]
[265.52978516 85.19149780]
[250.60675049 86.70902252]
[244.19758606 90.55973816]
[235.28715515 88.07104492]
[220.33045959 89.21004486]
[205.37377930 90.34903717]
[190.43270874 91.67740631]
[175.50967407 93.19493103]
[160.58662415 94.71245575]
[145.68400574 96.41889954]
[130.80419922 98.31397247]
[121.13320160 119.09201813]
[101.21945190 126.08144379]
[83.94607544 117.48848724]
[70.83087158 124.76802063]
[57.71567535 132.04754639]
[44.60047531 139.32707214]
[40.26903915 151.55528259]
[29.10190582 157.32656860]
[17.39593506 154.00550842]
[4.10053492 160.95045471]
[-9.19486523 167.89540100]
[-22.49026680 174.84036255]
[-31.13984299 188.08782959]
[-46.00313187 187.12246704]
[-59.29853439 194.06742859]
[-63.90227127 215.98286438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[16 21]
[45 122]
[46 121]
[48 119]
[49 118]
[50 117]
[51 116]
[53 113]
[54 112]
[55 111]
[56 110]
[59 73]
[60 72]
[61 71]
[74 107]
[75 106]
[77 105]
[78 104]
[79 103]
[81 102]
[82 101]
[83 100]
[84 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
