%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCACUUUUUUUAAGGGUAGUAUUUAGUUUCACAAUGUUUGGGGACCUGUUUGAAGAGGAGUAUUCCACUGUGUCUAAUAAUCAGUAUGGAAAAGGGA\
) } def
/len { sequence length } bind def

/coor [
[119.72411346 144.06217957]
[116.03735352 135.43838501]
[114.74703217 126.12924957]
[115.95415497 116.78947449]
[102.66398621 109.83451843]
[94.47647858 109.15641785]
[89.07362366 102.45099640]
[76.00617981 95.08608246]
[62.93873596 87.72116852]
[49.87129211 80.35626221]
[36.80384827 72.99134827]
[23.73640633 65.62643433]
[10.51830006 73.32247162]
[-4.67691851 73.36870575]
[-17.76808167 65.85286713]
[-25.28923988 52.88027954]
[-25.30710983 37.98513412]
[-38.37455368 30.62022400]
[-51.44199753 23.25531387]
[-64.50943756 15.89040184]
[-75.66722870 26.08653831]
[-89.41162872 32.32624817]
[-104.39140320 34.00992203]
[-119.13813019 30.98517609]
[-132.21014404 23.56055641]
[-142.33348083 12.47412491]
[-148.52603149 -1.17990637]
[-150.19277954 -16.05915642]
[-147.18301392 -30.70505333]
[-160.25045776 -38.06996536]
[-173.31790161 -45.43487549]
[-189.70162964 -44.72388458]
[-198.27978516 -58.70055008]
[-190.22789001 -72.98687744]
[-173.82905579 -72.88632202]
[-165.95298767 -58.50231934]
[-152.88554382 -51.13740921]
[-139.81809998 -43.77249527]
[-128.84754944 -53.93163681]
[-115.25565338 -60.21099472]
[-100.36820984 -61.98418808]
[-85.64171600 -59.06506348]
[-72.52082825 -51.72715759]
[-62.29664993 -40.67811584]
[-55.97971725 -26.99145508]
[-54.20008087 -12.00227928]
[-57.14453125 2.82295871]
[-44.07708740 10.18787003]
[-31.00964165 17.55278015]
[-17.94219971 24.91769218]
[-5.19057322 17.21953583]
[9.80194092 16.93582153]
[23.01078224 24.24286652]
[30.84006500 37.26589203]
[31.10131836 52.55899429]
[44.16876221 59.92390442]
[57.23620605 67.28881836]
[70.30364990 74.65372467]
[83.37109375 82.01863861]
[96.43853760 89.38355255]
[109.61893463 96.54434967]
[122.90910339 103.49929810]
[141.36181641 92.04747772]
[162.90663147 93.51334381]
[179.44891357 107.20244598]
[184.85746765 127.85498810]
[199.33624268 131.77482605]
[213.81501770 135.69464111]
[228.29379272 139.61447144]
[242.88746643 143.08212280]
[257.58193970 146.09422302]
[272.27639771 149.10633850]
[286.97085571 152.11843872]
[296.61074829 140.23016357]
[310.67578125 134.19415283]
[325.93392944 135.39744568]
[338.87893677 143.56353760]
[346.53619385 156.81588745]
[347.14608765 172.10925293]
[340.56845093 185.92929077]
[328.31481934 195.10026550]
[313.20095825 197.51477051]
[298.69995117 192.61796570]
[288.14398193 181.53507996]
[283.95874023 166.81289673]
[269.26428223 163.80079651]
[254.56982422 160.78869629]
[239.87536621 157.77658081]
[235.33407593 159.71757507]
[229.51443481 158.69702148]
[224.37396240 154.09324646]
[209.89518738 150.17341614]
[195.41641235 146.25360107]
[180.93763733 142.33377075]
[175.67245483 149.90759277]
[168.58509827 155.84152222]
[160.16854858 159.70950317]
[151.01173401 161.22972107]
[141.75836182 160.28497314]
[133.06161499 156.93173218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 62]
[5 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[17 50]
[18 49]
[19 48]
[20 47]
[29 38]
[30 37]
[31 36]
[66 94]
[67 93]
[68 92]
[69 91]
[70 88]
[71 87]
[72 86]
[73 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
