%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGGGCGGCAGUCCGGCAGUGGCGGGGCCCGGGGGGCGCCCAAGAUGGCGGCGGGCGGCGCGGAGGGCGGCUCGGGCCCCGGCGCCGCCAUGGGGGACUGCGCGGAGAUUAAGUCGCAAUUCCGCACGCGCGAGGGUUUCUACA\
) } def
/len { sequence length } bind def

/coor [
[94.03234863 244.38533020]
[91.16497040 229.66194153]
[81.13742065 218.64842224]
[86.09401703 203.62368774]
[83.22663879 188.90029907]
[73.19909668 177.88677979]
[78.15568542 162.86204529]
[75.28830719 148.13865662]
[72.42092896 133.41526794]
[87.91181946 97.38039398]
[77.94653320 86.16909790]
[67.98125458 74.95780182]
[58.01596832 63.74650955]
[48.05068207 52.53521729]
[38.08539963 41.32392120]
[28.12011528 30.11262894]
[17.57033348 19.44950867]
[6.46616364 9.36499596]
[-4.63800621 -0.71951723]
[-20.05576324 -4.26963234]
[-24.27569008 -18.55394173]
[-35.37985992 -28.63845444]
[-46.48402786 -38.72296906]
[-61.90178680 -42.27308273]
[-66.12171173 -56.55739212]
[-77.22588348 -66.64190674]
[-88.33005524 -76.72641754]
[-99.43421936 -86.81093597]
[-110.53839111 -96.89544678]
[-121.64256287 -106.97995758]
[-132.74673462 -117.06447601]
[-143.85090637 -127.14898682]
[-154.95507812 -137.23350525]
[-166.05924988 -147.31800842]
[-177.16340637 -157.40252686]
[-188.06886292 -156.25050354]
[-197.59396362 -161.22459412]
[-202.66778564 -170.44610596]
[-201.80778503 -180.71487427]
[-212.47090149 -191.26466370]
[-223.13403320 -201.81443787]
[-233.79714966 -212.36421204]
[-244.46026611 -222.91400146]
[-259.23983765 -218.97552490]
[-273.90954590 -222.93743896]
[-284.55572510 -233.63906860]
[-288.39025879 -248.13569641]
[-284.48010254 -262.50845337]
[-295.14321899 -273.05822754]
[-310.39520264 -277.26391602]
[-314.00091553 -291.71548462]
[-324.66403198 -302.26525879]
[-340.64996338 -303.61773682]
[-349.43945312 -317.03881836]
[-344.28991699 -332.23294067]
[-329.15167236 -337.54452515]
[-315.63745117 -328.89895630]
[-314.11422729 -312.92837524]
[-303.45111084 -302.37860107]
[-288.96185303 -298.92752075]
[-284.59344482 -283.72137451]
[-273.93032837 -273.17156982]
[-259.60015869 -277.23510742]
[-245.06338501 -273.55569458]
[-234.24861145 -263.02444458]
[-230.13015747 -248.39793396]
[-233.91049194 -233.57711792]
[-223.24736023 -223.02734375]
[-212.58424377 -212.47755432]
[-201.92112732 -201.92778015]
[-191.25801086 -191.37799072]
[-172.27267456 -187.93623352]
[-167.07890320 -168.50669861]
[-155.97473145 -158.42218018]
[-144.87055969 -148.33767700]
[-133.76638794 -138.25315857]
[-122.66221619 -128.16864014]
[-111.55805206 -118.08412933]
[-100.45388031 -107.99961853]
[-89.34970856 -97.91510010]
[-78.24553680 -87.83058929]
[-67.14137268 -77.74607849]
[-56.03720093 -67.66156006]
[-41.41368484 -64.83275604]
[-36.39951706 -49.82713699]
[-25.29534531 -39.74262619]
[-14.19117641 -29.65811157]
[0.43233711 -26.82930756]
[5.44650698 -11.82368755]
[16.55067635 -1.73917389]
[27.65484619 8.34533978]
[29.95659447 -6.47700691]
[42.87023926 -14.10837555]
[56.96465683 -8.97540665]
[61.94638062 5.17317772]
[54.17714691 18.00435066]
[39.33140945 20.14734459]
[49.29669189 31.35863876]
[59.26197815 42.56993103]
[69.22726440 53.78122711]
[79.19254303 64.99252319]
[89.15782928 76.20381165]
[99.12311554 87.41510773]
[112.03261566 95.05348969]
[126.65653229 98.39130402]
[141.28045654 101.72911835]
[155.90437317 105.06693268]
[170.52828979 108.40474701]
[185.15220642 111.74256134]
[194.62826538 99.77732086]
[208.36117554 93.11624908]
[223.62426758 93.08190155]
[237.38700867 99.68109894]
[246.91682434 111.60356903]
[250.32156372 126.48209381]
[246.92520142 141.36253357]
[237.40208435 153.29035950]
[223.64305115 159.89730835]
[208.37995911 159.87155151]
[194.64329529 153.21820068]
[185.16050720 141.25830078]
[181.81439209 126.36647797]
[167.19047546 123.02866364]
[152.56655884 119.69084930]
[137.94264221 116.35303497]
[123.31871796 113.01522064]
[108.69480133 109.67740631]
[103.30717468 114.89502716]
[87.14431763 130.54788208]
[90.01169586 145.27127075]
[92.87907410 159.99465942]
[103.11171722 172.06129456]
[97.95002747 186.03291321]
[100.81740570 200.75630188]
[111.05004883 212.82293701]
[105.88835907 226.79455566]
[108.75573730 241.51794434]
[123.30553436 246.43719482]
[133.43434143 257.98287964]
[136.41757202 273.04925537]
[131.45272827 287.58355713]
[119.87535858 297.67614746]
[104.79969788 300.61212158]
[90.28102875 295.60174561]
[80.22479248 283.99279785]
[77.33608246 268.90802002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[4 134]
[5 133]
[7 131]
[8 130]
[9 129]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[15 98]
[16 97]
[17 91]
[18 90]
[19 89]
[21 87]
[22 86]
[23 85]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[32 76]
[33 75]
[34 74]
[35 73]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[48 62]
[49 61]
[51 59]
[52 58]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
