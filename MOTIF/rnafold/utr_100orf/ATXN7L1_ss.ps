%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACUCAAUGUCGGAACGUUCCGAAGAUGACGUCGGAGCGUUCUCGAAUCCCGUGUCUCUCGGCUGCUGCUGCCGAAGGAACAGGGAAAAAGCAACAAGAAGGAAGAGCAAUGGCGACACUGGAUC\
) } def
/len { sequence length } bind def

/coor [
[72.36930084 310.10449219]
[57.80170822 305.02624512]
[48.31019211 292.86422729]
[46.92346191 277.49929810]
[54.08401489 263.83438110]
[67.50695038 256.22988892]
[68.24296570 241.24795532]
[68.97898102 226.26602173]
[61.87549591 213.17443848]
[70.28061676 199.77053833]
[71.01663208 184.78860474]
[71.75264740 169.80667114]
[72.48866272 154.82473755]
[73.22467804 139.84280396]
[62.23486328 129.63378906]
[47.34767151 131.46995544]
[32.46047592 133.30610657]
[17.57328415 135.14227295]
[2.68609166 136.97843933]
[-12.20110130 138.81459045]
[-27.08829498 140.65075684]
[-41.97548676 142.48690796]
[-56.86267853 144.32307434]
[-71.74987030 146.15922546]
[-86.63706970 147.99539185]
[-94.03439331 161.63574219]
[-108.05102539 168.29258728]
[-123.29728699 165.40623474]
[-133.91069031 154.08653259]
[-135.81013489 138.68615723]
[-128.26527405 125.12685394]
[-114.17725372 118.62245178]
[-98.96319580 121.67403412]
[-88.47322845 133.10820007]
[-73.58603668 131.27203369]
[-58.69884109 129.43588257]
[-43.81164932 127.59971619]
[-28.92445374 125.76355743]
[-14.03726101 123.92739868]
[0.84993166 122.09123993]
[15.73712444 120.25508118]
[30.62431717 118.41892242]
[45.51150894 116.58275604]
[60.39870453 114.74659729]
[58.50822830 101.14878845]
[61.07624435 87.91217041]
[67.67055511 76.43320465]
[77.44299316 67.87046051]
[89.23551178 63.02817917]
[101.71611023 62.28218079]
[105.36081696 47.73171234]
[109.00551605 33.18124390]
[112.65022278 18.63077354]
[102.86227417 6.73529863]
[101.96604919 -8.46503544]
[110.09601593 -21.12866974]
[123.95797729 -26.51233482]
[127.60268402 -41.06280518]
[131.24739075 -55.61327362]
[127.09513092 -70.87988281]
[137.69302368 -81.34572601]
[141.33773804 -95.89619446]
[144.98243713 -110.44666290]
[148.62713623 -124.99713135]
[152.27183533 -139.54759216]
[142.94822693 -152.10165405]
[143.92710876 -167.70857239]
[154.74630737 -178.99923706]
[170.29730225 -180.64254761]
[183.23739624 -171.86257935]
[187.45669556 -156.80497742]
[180.96293640 -142.57946777]
[166.82231140 -135.90289307]
[163.17761230 -121.35242462]
[159.53289795 -106.80195618]
[155.88819885 -92.25148773]
[152.24349976 -77.70101929]
[156.65644836 -63.47515869]
[145.79785156 -51.96857071]
[142.15315247 -37.41810226]
[138.50845337 -22.86763191]
[148.19577026 -11.58517742]
[149.39616394 3.41559124]
[141.44036865 16.39860916]
[127.20069122 22.27547646]
[123.55598450 36.82594681]
[119.91128540 51.37641525]
[116.26657867 65.92687988]
[123.87271881 70.74812317]
[130.12080383 77.23343658]
[134.65538025 85.01388550]
[137.21849060 93.64685059]
[137.66433716 102.64123535]
[152.12098694 106.64192963]
[161.44546509 94.63682556]
[174.65679932 87.11823273]
[189.74032593 85.23267365]
[204.39595032 89.26767731]
[216.38877869 98.60794830]
[223.88998413 111.82915497]
[225.75570679 126.91515350]
[221.70141602 141.56546021]
[212.34538269 153.54597473]
[199.11431885 161.02980042]
[184.02587891 162.87567139]
[169.38092041 158.80210876]
[157.41271973 149.43032837]
[149.94631958 136.18943787]
[148.12030029 121.09857178]
[133.66365051 117.09787750]
[129.43778992 124.82350922]
[123.43218231 131.49696350]
[115.91075134 136.70742798]
[107.23223877 140.11070251]
[97.83329773 141.45108032]
[88.20661163 140.57882690]
[87.47059631 155.56076050]
[86.73458099 170.54267883]
[85.99856567 185.52461243]
[85.26255035 200.50654602]
[92.31338501 214.66975403]
[83.96090698 227.00204468]
[83.22489166 241.98397827]
[82.48887634 256.96591187]
[95.10180664 265.84945679]
[100.88848114 280.15045166]
[98.00240326 295.30545044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 124]
[7 123]
[8 122]
[10 120]
[11 119]
[12 118]
[13 117]
[14 116]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[50 88]
[51 87]
[52 86]
[53 85]
[57 81]
[58 80]
[59 79]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[93 110]
[94 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
