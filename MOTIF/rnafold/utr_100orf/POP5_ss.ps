%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCACGCCGGACCGGAGAGCGCGGAGGCAGCCAUGGUGCGGUUCAAGCACAGGUACCUGCUCUGCGAACUGGUGUCUGACGACCCCCGCUGCCGCCUAAGCCUCGAUGACCGAGUUCUGAGCAGCCUCGUAC\
) } def
/len { sequence length } bind def

/coor [
[217.82350159 166.71888733]
[208.57369995 159.84851074]
[202.56860352 149.95442200]
[200.72715759 138.47569275]
[186.37626648 134.11083984]
[172.02537537 129.74597168]
[157.67449951 125.38110352]
[143.32360840 121.01623535]
[128.97271729 116.65137482]
[114.62183380 112.28650665]
[101.78910065 119.01461029]
[87.92660522 114.79828644]
[81.01330566 102.06437683]
[66.66241455 97.69951630]
[51.20795059 101.08626556]
[41.28292847 89.98026276]
[26.93203926 85.61540222]
[12.58115292 81.25053406]
[-1.76973379 76.88567352]
[-16.12062073 72.52080536]
[-20.51974869 73.72877502]
[-24.64137650 73.44203186]
[-28.03415871 71.94550323]
[-30.39244461 69.64515686]
[-31.58381271 67.00729370]
[-45.45889282 61.30798721]
[-59.33397675 55.60867691]
[-71.57775116 59.85879898]
[-83.05165100 54.75371170]
[-87.77813721 43.55393982]
[-101.51473236 37.52850723]
[-115.25133514 31.50307655]
[-125.25205231 36.07699203]
[-135.89266968 34.37257004]
[-143.64007568 27.20347023]
[-146.05950928 17.15595627]
[-159.49624634 10.48854446]
[-172.93296814 3.82113314]
[-186.36968994 -2.84627891]
[-200.62498474 3.58183718]
[-215.66299438 -0.70680231]
[-224.38322449 -13.68723297]
[-222.66825867 -29.23049164]
[-211.32785034 -39.99752808]
[-195.71658325 -40.90447617]
[-183.20562744 -31.52310181]
[-179.70228577 -16.28300476]
[-166.26556396 -9.61559391]
[-152.82882690 -2.94818163]
[-139.39210510 3.71923018]
[-120.30454254 1.00090349]
[-109.22590637 17.76647568]
[-95.48930359 23.79190826]
[-81.75270081 29.81733894]
[-64.48720551 26.91213608]
[-53.63466644 41.73359680]
[-39.75958633 47.43290710]
[-25.88450432 53.13221359]
[-11.75575638 58.16992188]
[2.59513068 62.53478622]
[16.94601822 66.89965057]
[31.29690552 71.26451111]
[45.64779282 75.62937927]
[60.07578659 71.93042755]
[71.02728271 83.34862518]
[85.37816620 87.71349335]
[98.21089935 80.98538971]
[112.07339478 85.20171356]
[118.98669434 97.93562317]
[133.33758545 102.30048370]
[147.68847656 106.66535187]
[162.03935242 111.03022003]
[176.39024353 115.39508057]
[190.74113464 119.75994873]
[205.09201050 124.12480927]
[219.73011780 111.95352173]
[238.59271240 110.95656586]
[254.18554688 121.35256195]
[260.41946411 138.86874390]
[275.04339600 142.20655823]
[289.66729736 145.54437256]
[304.29122925 148.88218689]
[310.56640625 143.05961609]
[318.56228638 140.27854919]
[326.90747070 140.93550110]
[334.20272827 144.84405518]
[339.25546265 151.27905273]
[341.27456665 159.10987854]
[355.51834106 163.81248474]
[369.76214600 168.51507568]
[384.00592041 173.21766663]
[398.24972534 177.92027283]
[405.43893433 171.08973694]
[414.58889771 167.42018127]
[424.38891602 167.39083862]
[433.45214844 170.96278381]
[440.51199341 177.59048462]
[444.59896851 186.30473328]
[445.17379761 195.85417175]
[458.91040039 201.87960815]
[477.11154175 199.39518738]
[487.01153564 213.83567810]
[500.88662720 219.53497314]
[514.76171875 225.23428345]
[528.63677979 230.93359375]
[543.93505859 226.10212708]
[557.16986084 235.16963196]
[558.18859863 251.18031311]
[546.20977783 261.85214233]
[530.42254639 258.99859619]
[522.93750000 244.80868530]
[509.06240845 239.10937500]
[495.18731689 233.41006470]
[481.31222534 227.71075439]
[469.97134399 232.08784485]
[458.32986450 227.37745667]
[452.88497925 215.61619568]
[439.14837646 209.59077454]
[420.93991089 218.69390869]
[401.59158325 211.49078369]
[393.54711914 192.16406250]
[379.30334473 187.46147156]
[365.05953979 182.75886536]
[350.81576538 178.05627441]
[336.57196045 173.35366821]
[316.01953125 180.02680969]
[300.95339966 163.50610352]
[286.32949829 160.16828918]
[271.70556641 156.83047485]
[257.08163452 153.49266052]
[250.10916138 162.40487671]
[240.24708557 168.05766296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[13 66]
[14 65]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[25 58]
[26 57]
[27 56]
[30 54]
[31 53]
[32 52]
[36 50]
[37 49]
[38 48]
[39 47]
[79 130]
[80 129]
[81 128]
[82 127]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[99 118]
[100 117]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
