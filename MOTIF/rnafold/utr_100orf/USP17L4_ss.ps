%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGGACGACUCACUCUACUUGGGAGGUGAGUGGCAGUUCAACCACUUUUCAAAACUCACAUCUUCUCGGCCAGAUGCAGCUUUUGCUGAAAUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[44.86831665 122.09894562]
[41.79441071 110.22586060]
[26.81073570 110.92546844]
[11.82705879 111.62506866]
[-3.32763124 121.93925476]
[-18.62364388 113.49333954]
[-33.57831573 114.65859985]
[-48.53298569 115.82386017]
[-63.48765564 116.98911285]
[-71.08286285 128.24023438]
[-83.60932159 132.94009399]
[-96.35259247 129.56193542]
[-104.65559387 119.57483673]
[-119.63927460 120.27444458]
[-134.62295532 120.97405243]
[-149.60662842 121.67365265]
[-164.59030151 122.37326050]
[-179.57397461 123.07286835]
[-188.17535400 126.65184021]
[-195.03305054 123.55387115]
[-210.03123474 123.78715515]
[-225.02941895 124.02043152]
[-240.02760315 124.25370789]
[-255.77079773 130.54563904]
[-266.17498779 117.15948486]
[-256.19213867 103.45623779]
[-240.26087952 109.25552368]
[-225.26269531 109.02223969]
[-210.26451111 108.78896332]
[-195.26632690 108.55568695]
[-180.27359009 108.08918762]
[-165.28990173 107.38958740]
[-150.30622864 106.68997955]
[-135.32255554 105.99037170]
[-120.33888245 105.29076385]
[-105.35520172 104.59116364]
[-94.66436768 91.71305847]
[-77.63906097 90.44121552]
[-64.65291595 102.03444672]
[-49.69824219 100.86918640]
[-34.74357224 99.70392609]
[-19.78890228 98.53867340]
[-11.59257698 89.49222565]
[0.97846884 88.49553680]
[11.12745285 96.64139557]
[26.11112976 95.94178772]
[41.09480667 95.24217987]
[42.83479691 84.09686279]
[46.67253876 73.44104767]
[52.48494720 63.66742706]
[60.07584381 55.13963318]
[69.18255615 48.17872620]
[79.48496246 43.05111694]
[90.61675262 39.95839691]
[102.17844391 39.02947235]
[113.75170135 40.31526566]
[124.91448975 43.78625488]
[135.25646973 49.33292007]
[144.39404297 56.76911545]
[151.98461914 65.83829498]
[157.73942566 76.22231293]
[161.43446350 87.55258942]
[175.64154053 82.74020386]
[189.84861755 77.92781830]
[204.05569458 73.11543274]
[218.26275635 68.30303955]
[222.74507141 53.44745255]
[235.12355042 44.09049225]
[250.63844299 43.83010864]
[263.32394409 52.76642227]
[268.30221558 67.46324158]
[263.65902710 82.26933289]
[251.17976379 91.49145508]
[235.66296387 91.58351898]
[223.07514954 82.51011658]
[208.86807251 87.32250214]
[194.66099548 92.13488770]
[180.45393372 96.94727325]
[166.24685669 101.75965881]
[164.15412903 116.61296082]
[176.47845459 125.16344452]
[188.80279541 133.71392822]
[201.12712097 142.26441956]
[217.50582886 143.08314514]
[224.74432373 157.79830933]
[215.39628601 171.27221680]
[199.07815552 169.64405823]
[192.57664490 154.58874512]
[180.25230408 146.03826904]
[167.92797852 137.48777771]
[155.60363770 128.93730164]
[148.22558594 139.57339478]
[138.86018372 148.41955566]
[127.92642212 155.11503601]
[115.90637207 159.39448547]
[103.32392120 161.09837341]
[90.72194672 160.17889404]
[78.63890839 156.70083618]
[67.58583069 150.83778381]
[58.02469254 142.86361694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[6 42]
[7 41]
[8 40]
[9 39]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[20 30]
[21 29]
[22 28]
[23 27]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
