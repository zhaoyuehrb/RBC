%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGAGAAAGAGAGCGAUAGAGUGCGAGAGCGAGUGCCCGGAGCAUCCUGGCCCUGAGACAGCUGGGCCAGCCCCGCAGGGCUCUGCAGCAUGUGGGAGCUCCGCUCCAUAGCCUUCUCCAGGGCUGUGUUCGCAGAGUUCCUGGCCACACUCCUCUUCGUCUUCUUUGGCCUCGGCUCUGCCCUCAACU\
) } def
/len { sequence length } bind def

/coor [
[127.54293823 657.42248535]
[135.97645569 643.35809326]
[135.72975159 628.36010742]
[135.48303223 613.36212158]
[135.23632812 598.36419678]
[134.98960876 583.36621094]
[138.70605469 573.09173584]
[145.02998352 565.78808594]
[152.54925537 561.94592285]
[159.83444214 561.49652100]
[158.11120605 546.59582520]
[156.38795471 531.69512939]
[152.48976135 525.40100098]
[154.76098633 516.53546143]
[153.28306580 501.60845947]
[140.35729980 494.25573730]
[134.16641235 480.53942871]
[137.27563477 465.63351440]
[148.69775391 455.29711914]
[147.21983337 440.37008667]
[145.74189758 425.44308472]
[144.26396179 410.51605225]
[135.31031799 398.61306763]
[141.65025330 384.11770630]
[140.17231750 369.19067383]
[138.69439697 354.26367188]
[137.21646118 339.33666992]
[135.61582947 324.42230225]
[133.89257812 309.52160645]
[132.16934204 294.62094116]
[128.27114868 288.32681274]
[130.54237366 279.46127319]
[129.06445312 264.53424072]
[127.58651733 249.60723877]
[126.10858917 234.68022156]
[124.26286316 219.79421997]
[122.05046844 204.95826721]
[119.83807373 190.12232971]
[110.30820465 178.67544556]
[115.92545319 163.88500977]
[113.71305847 149.04905701]
[111.50066376 134.21311951]
[109.28826904 119.37716675]
[107.07587433 104.54122162]
[107.54867554 111.46175385]
[103.11951447 118.78340149]
[93.89744568 123.58026123]
[81.54843140 123.23921204]
[68.99501801 116.21707916]
[55.10168457 110.56241608]
[41.20834732 104.90775299]
[27.31501389 99.25308228]
[13.42167759 93.59841919]
[-0.47165725 87.94375610]
[-12.54938126 97.43186188]
[-27.75531769 99.59405518]
[-41.99914551 93.84871674]
[-51.44934845 81.74131012]
[-53.56386566 66.52867126]
[-47.77390671 52.30292130]
[-35.63694000 42.89071655]
[-20.41774750 40.82389069]
[-6.21021652 46.65841293]
[3.16389823 58.82482529]
[5.18300772 74.05042267]
[19.07634354 79.70508575]
[32.96967697 85.35974884]
[46.86301422 91.01441193]
[60.75634766 96.66908264]
[74.64968109 102.32374573]
[83.91912842 90.53063965]
[75.14231873 78.36644745]
[66.36550903 66.20224762]
[57.58869934 54.03805923]
[42.41579437 47.81591415]
[40.48631668 31.53067207]
[53.78514099 21.93519020]
[68.63158417 28.90048027]
[69.75289154 45.26124573]
[78.52970123 57.42544174]
[87.30651093 69.58963013]
[96.08332062 81.75382996]
[111.04225159 80.64459229]
[117.92893982 67.31891632]
[124.81562042 53.99324417]
[131.70231628 40.66757202]
[138.58898926 27.34189796]
[145.36585999 13.96003914]
[152.03244019 0.52290046]
[158.69902039 -12.91423798]
[154.44281006 -14.37786007]
[150.34072876 -17.10720634]
[146.72349548 -21.07889938]
[143.91508484 -26.18943405]
[142.21434021 -32.25752640]
[141.87725830 -39.03055191]
[145.06025696 -53.68894577]
[148.24325562 -68.34733582]
[151.42625427 -83.00572968]
[154.60926819 -97.66412354]
[152.06167603 -114.42557526]
[167.46284485 -121.51362610]
[178.53735352 -108.67650604]
[169.26765442 -94.48112488]
[166.08465576 -79.82273102]
[162.90165710 -65.16433716]
[159.71865845 -50.50594330]
[156.53565979 -35.84754944]
[169.80424500 -28.85150719]
[180.10119629 -39.75897598]
[190.39813232 -50.66644669]
[200.69508362 -61.57391357]
[210.99203491 -72.48138428]
[221.28898621 -83.38885498]
[231.58592224 -94.29631805]
[241.88287354 -105.20378876]
[245.14111328 -121.27600098]
[260.77310181 -126.23313904]
[272.69796753 -114.97572327]
[268.64846802 -99.08442688]
[252.79034424 -94.90684509]
[242.49339294 -83.99937439]
[232.19644165 -73.09190369]
[221.89950562 -62.18443680]
[211.60255432 -51.27696609]
[201.30560303 -40.36949921]
[191.00865173 -29.46202850]
[180.71171570 -18.55455971]
[172.13615417 -6.24765730]
[165.46957397 7.18948126]
[158.80299377 20.62661934]
[158.64631653 28.02845764]
[151.91467285 34.22858429]
[145.02798462 47.55425644]
[138.14129639 60.87992859]
[131.25460815 74.20560455]
[124.36792755 87.53127289]
[121.91181946 102.32882690]
[124.12421417 117.16477203]
[126.33660889 132.00071716]
[128.54901123 146.83666992]
[130.76139832 161.67260742]
[140.44950867 174.18064880]
[134.67401123 187.90992737]
[136.88641357 202.74588013]
[139.09881592 217.58181763]
[142.37088013 221.69239807]
[143.60389709 226.19712830]
[142.99118042 230.24906921]
[141.03559875 233.20230103]
[142.51353455 248.12931824]
[143.99145508 263.05633545]
[145.46939087 277.98333740]
[147.07003784 292.89770508]
[148.79327393 307.79837036]
[150.51651001 322.69906616]
[154.61729431 330.88076782]
[152.14347839 337.85873413]
[153.62141418 352.78573608]
[155.09933472 367.71276855]
[156.57727051 382.63977051]
[165.63662720 395.61044312]
[159.19097900 409.03814697]
[160.66891479 423.96514893]
[162.14683533 438.89215088]
[163.62477112 453.81918335]
[176.85208130 461.71502686]
[182.82395935 475.72180176]
[179.44302368 490.38583374]
[168.21008301 500.13052368]
[169.68800354 515.05755615]
[171.28865051 529.97186279]
[173.01188660 544.87255859]
[174.73512268 559.77325439]
[178.51802063 574.28839111]
[184.28675842 588.13476562]
[190.05548096 601.98114014]
[201.72825623 614.27679443]
[193.14447021 628.89715576]
[176.71925354 624.69616699]
[176.20912170 607.74987793]
[170.44039917 593.90350342]
[164.67166138 580.05712891]
[149.98757935 583.11950684]
[150.23429871 598.11743164]
[150.48100281 613.11541748]
[150.72772217 628.11340332]
[150.97442627 643.11138916]
[159.86596680 656.89080811]
[152.13870239 671.35528564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 188]
[3 187]
[4 186]
[5 185]
[6 184]
[10 174]
[11 173]
[12 172]
[14 171]
[15 170]
[19 166]
[20 165]
[21 164]
[22 163]
[24 161]
[25 160]
[26 159]
[27 158]
[28 156]
[29 155]
[30 154]
[32 153]
[33 152]
[34 151]
[35 150]
[36 146]
[37 145]
[38 144]
[40 142]
[41 141]
[42 140]
[43 139]
[44 138]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[71 82]
[72 81]
[73 80]
[74 79]
[83 137]
[84 136]
[85 135]
[86 134]
[87 133]
[88 131]
[89 130]
[90 129]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
[175 183]
[176 182]
[177 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
