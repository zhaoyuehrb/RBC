%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUGACCCCGGAAGGACUCCGCCUUCUCCAUGUCAGACUGCUGCUCAGCGCCAGGCAUCAGCUGGGAAGCUGGCGUGGGCAGGCCAGCUGUACCUGGCCUGGAGCUCCAGAUUAGAAGAGGAGCCAUGU\
) } def
/len { sequence length } bind def

/coor [
[83.72466278 210.79901123]
[95.20710754 200.36190796]
[93.43964386 185.46640015]
[91.67218781 170.57089233]
[89.90472412 155.67538452]
[88.13726807 140.77987671]
[74.70053864 134.11247253]
[61.76961517 141.71452332]
[48.83868790 149.31657410]
[47.45558548 166.12849426]
[36.46010590 178.70205688]
[20.30611038 182.24311829]
[5.36153221 175.55723572]
[-7.38623571 183.46258545]
[-20.13400269 191.36791992]
[-32.88177109 199.27325439]
[-45.62953949 207.17860413]
[-58.37730789 215.08393860]
[-61.74055099 230.52622986]
[-75.08303070 238.99697876]
[-90.48889160 235.47065735]
[-98.81811523 222.03936768]
[-95.12911224 206.67164612]
[-81.61050415 198.48489380]
[-66.28264618 202.33618164]
[-53.53488159 194.43083191]
[-40.78711319 186.52549744]
[-28.03934479 178.62014771]
[-15.29157639 170.71481323]
[-2.54380822 162.80946350]
[-2.79689074 149.40850830]
[3.67793894 137.54896545]
[15.27230453 130.40138245]
[28.99348640 129.93705750]
[41.23664093 136.38563538]
[54.16756821 128.78359985]
[67.09849548 121.18154907]
[62.27140808 98.81368256]
[70.72109222 78.43355560]
[88.58155823 66.93458557]
[108.99160004 67.62693787]
[116.13080597 54.43483353]
[123.27001953 41.24272919]
[118.98732758 26.26620293]
[126.41542816 12.98923111]
[140.71965027 8.99863434]
[147.85885620 -4.19347143]
[154.99807739 -17.38557816]
[162.13728333 -30.57768440]
[169.12019348 -43.85318756]
[175.94583130 -57.21023178]
[177.08621216 -66.37173462]
[183.09368896 -70.79930878]
[190.23289490 -83.99141693]
[197.37210083 -97.18351746]
[204.51130676 -110.37562561]
[211.65052795 -123.56773376]
[218.78973389 -136.75984192]
[213.47380066 -149.19749451]
[216.28129578 -162.22938538]
[225.95942688 -171.11087036]
[238.79673767 -172.74198914]
[246.24554443 -185.76179504]
[253.69435120 -198.78160095]
[261.14315796 -211.80140686]
[268.59194946 -224.82121277]
[276.04074097 -237.84101868]
[283.48956299 -250.86082458]
[277.28863525 -264.96240234]
[280.54214478 -279.83749390]
[291.79766846 -289.82635498]
[306.59960938 -291.25503540]
[314.04840088 -304.27484131]
[321.49719238 -317.29464722]
[317.10537720 -332.47644043]
[324.80810547 -346.27658081]
[340.03549194 -350.50765991]
[353.75341797 -342.65945435]
[357.82324219 -327.38818359]
[349.83044434 -313.75399780]
[334.51699829 -309.84582520]
[327.06820679 -296.82601929]
[319.61941528 -283.80621338]
[325.88946533 -270.32199097]
[322.98278809 -255.55665588]
[311.80844116 -245.21318054]
[296.50936890 -243.41201782]
[289.06054688 -230.39221191]
[281.61175537 -217.37240601]
[274.16296387 -204.35260010]
[266.71414185 -191.33279419]
[259.26535034 -178.31298828]
[251.81654358 -165.29318237]
[256.93652344 -149.31896973]
[248.79965210 -134.26628113]
[231.98184204 -129.62062073]
[224.84263611 -116.42852020]
[217.70341492 -103.23641205]
[210.56420898 -90.04431152]
[203.42500305 -76.85220337]
[196.28578186 -63.66009521]
[189.30287170 -50.38459396]
[182.47723389 -37.02754974]
[182.23249817 -29.56878662]
[175.32939148 -23.43847275]
[168.19017029 -10.24636650]
[161.05096436 2.94573927]
[153.91175842 16.13784599]
[158.39462280 30.29550934]
[151.34237671 43.77588272]
[136.46212769 48.38193893]
[129.32290649 61.57404327]
[122.18370056 74.76615143]
[128.44209290 80.98449707]
[132.95982361 88.74718475]
[135.35885620 97.56753540]
[135.39701843 106.86743927]
[132.98976135 116.01519012]
[128.22138977 124.36841583]
[121.34460449 131.31909180]
[112.76811218 136.33758545]
[103.03277588 139.01242065]
[104.80023193 153.90792847]
[106.56769562 168.80343628]
[108.33515167 183.69894409]
[110.10260773 198.59445190]
[123.70868683 206.05462646]
[130.30079651 220.10182190]
[127.34413147 235.33460999]
[115.97559357 245.89566040]
[100.56661224 247.72404480]
[87.04225922 240.11671448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[7 37]
[8 36]
[9 35]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[41 113]
[42 112]
[43 111]
[46 108]
[47 107]
[48 106]
[49 105]
[50 103]
[51 102]
[53 101]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
