%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCUAAGUCACAGUAGCCCUGACUACAGCAUUCCUGGAGCCCAGGCUCUUUUCCACAGAGGAGGAAAGAGCAGGCAGCAGAGACCAUGGGGCCCCCCUCAGCCUCUCCCCACAGAGAAUGCAUCCCCUGGCAGGGGCUUCUGCUCACAGCCUCACUUCUAAACUUCUGGAACCCGCCCACCACUG\
) } def
/len { sequence length } bind def

/coor [
[4.51202679 246.85928345]
[-7.05837584 256.40527344]
[-18.62877846 265.95126343]
[-30.19918251 275.49722290]
[-41.76958466 285.04321289]
[-53.33998871 294.58920288]
[-64.91039276 304.13519287]
[-66.56475830 319.62390137]
[-78.43477631 329.14007568]
[-93.19071960 327.46743774]
[-104.76112366 337.01339722]
[-106.41549683 352.50213623]
[-118.28551483 362.01831055]
[-133.04145813 360.34567261]
[-144.61186218 369.89163208]
[-156.18226624 379.43762207]
[-152.62771606 394.24053955]
[-155.83967590 409.05844116]
[-165.12873840 420.96365356]
[-178.61024475 427.62774658]
[-193.58645630 427.77697754]
[-207.08641052 421.43530273]
[-218.65681458 430.98129272]
[-230.22721863 440.52728271]
[-235.45391846 456.07119751]
[-251.58006287 459.05105591]
[-262.01644897 446.40139771]
[-256.02703857 431.13513184]
[-239.77319336 428.95687866]
[-228.20280457 419.41088867]
[-216.63240051 409.86489868]
[-220.29365540 395.40597534]
[-217.30175781 380.73089600]
[-208.19764709 368.76107788]
[-194.74444580 361.90313721]
[-179.58619690 361.56497192]
[-165.72824097 367.86721802]
[-154.15783691 358.32122803]
[-142.58743286 348.77526855]
[-141.42608643 333.97030640]
[-129.82803345 324.12448120]
[-114.30710602 325.44299316]
[-102.73670197 315.89703369]
[-101.57534790 301.09207153]
[-89.97730255 291.24624634]
[-74.45637512 292.56478882]
[-62.88597107 283.01879883]
[-51.31556702 273.47280884]
[-39.74516296 263.92681885]
[-28.17476082 254.38084412]
[-16.60435867 244.83486938]
[-5.03395557 235.28887939]
[-1.88865590 226.06414795]
[8.13095951 221.56520081]
[17.18802643 209.60821533]
[26.24509239 197.65122986]
[35.30215836 185.69424438]
[44.35922623 173.73724365]
[38.82999802 151.89874268]
[51.35280228 132.85202026]
[74.12151337 129.18708801]
[81.72921753 116.25949097]
[89.33692169 103.33189392]
[96.83692169 90.34151459]
[104.22869873 77.28924561]
[111.62047577 64.23698425]
[119.01225281 51.18471527]
[111.79592133 35.89696884]
[115.07428741 19.48187637]
[127.36296844 8.36168480]
[143.69236755 6.76666403]
[150.86616516 -6.40665960]
[158.03997803 -19.57998276]
[165.21379089 -32.75330734]
[172.38760376 -45.92663193]
[179.56140137 -59.09995270]
[186.73521423 -72.27327728]
[188.09596252 -81.32538605]
[194.13932800 -85.60449219]
[201.53109741 -98.65676117]
[208.92288208 -111.70902252]
[200.30995178 -124.26206970]
[198.01077271 -139.24874878]
[202.42842102 -153.68844604]
[212.63546753 -164.73277283]
[226.56806946 -170.22750854]
[241.44311523 -169.13264465]
[248.83488464 -182.18490601]
[256.22665405 -195.23716736]
[257.73767090 -204.26541138]
[263.85131836 -208.44348145]
[271.45904541 -221.37107849]
[279.06674194 -234.29867554]
[286.67443848 -247.22628784]
[280.50097656 -255.90649414]
[277.58715820 -266.11206055]
[278.24224854 -276.66683960]
[282.36569214 -286.36334229]
[289.46160889 -294.10070801]
[298.69833374 -299.00982666]
[309.00573730 -300.55093384]
[319.19924927 -298.57272339]
[327.64904785 -310.96630859]
[324.91903687 -326.30203247]
[333.66488647 -338.75051880]
[348.30200195 -341.25863647]
[356.75180054 -353.65222168]
[365.20159912 -366.04580688]
[373.65139771 -378.43939209]
[370.46731567 -393.91961670]
[379.23162842 -407.07110596]
[394.74465942 -410.09136963]
[407.80276489 -401.18850708]
[410.65884399 -385.64440918]
[401.61840820 -372.68115234]
[386.04498291 -369.98959351]
[377.59518433 -357.59600830]
[369.14538574 -345.20242310]
[360.69558716 -332.80883789]
[363.70837402 -318.26721191]
[355.31564331 -305.57800293]
[340.04263306 -302.51651001]
[331.59280396 -290.12292480]
[339.42654419 -272.22247314]
[334.85415649 -253.07760620]
[319.55499268 -240.46604919]
[299.60205078 -239.61857605]
[291.99432373 -226.69097900]
[284.38662720 -213.76338196]
[276.77893066 -200.83576965]
[269.27893066 -187.84539795]
[261.88714600 -174.79313660]
[254.49537659 -161.74085999]
[263.08493042 -149.54722595]
[265.53857422 -134.77261353]
[261.31674194 -120.33872223]
[251.20545959 -109.12346649]
[237.17042542 -103.38719940]
[221.97514343 -104.31724548]
[214.58335876 -91.26497650]
[207.19158936 -78.21271515]
[199.90853882 -65.09946442]
[192.73472595 -51.92614365]
[185.56092834 -38.75281906]
[178.38711548 -25.57949638]
[171.21330261 -12.40617371]
[164.03948975 0.76714998]
[156.86567688 13.94047356]
[163.69586182 25.42394829]
[163.95718384 38.89091873]
[157.47424316 50.82106781]
[145.84861755 58.04287338]
[132.06451416 58.57649612]
[124.67273712 71.62876129]
[117.28096008 84.68102264]
[109.88918304 97.73329163]
[108.96955872 105.75780487]
[102.26451874 110.93959808]
[94.65681458 123.86719513]
[87.04911041 136.79479980]
[91.61940002 143.10855103]
[94.31499481 150.39311218]
[94.95109558 158.10728455]
[93.49531555 165.68202209]
[90.06906128 172.56254578]
[84.93749237 178.24884033]
[78.48909760 182.33204651]
[71.20629883 184.52389526]
[63.62932587 184.67691040]
[56.31621170 182.79431152]
[47.25914764 194.75131226]
[38.20207977 206.70829773]
[29.14501381 218.66528320]
[20.08794785 230.62226868]
[34.14859390 225.39749146]
[49.14852524 225.44329834]
[63.17700195 230.75382996]
[74.44703674 240.65263367]
[81.52302551 253.87875366]
[83.50360107 268.74743652]
[80.13647461 283.36462402]
[71.85055542 295.86837769]
[59.70133972 304.66589355]
[45.23641968 308.63653564]
[30.29838181 307.27453613]
[16.79008102 300.75335693]
[6.43224239 289.90368652]
[0.54427826 276.10760498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[7 46]
[10 43]
[11 42]
[14 39]
[15 38]
[16 37]
[22 31]
[23 30]
[24 29]
[54 174]
[55 173]
[56 172]
[57 171]
[58 170]
[61 160]
[62 159]
[63 158]
[64 156]
[65 155]
[66 154]
[67 153]
[71 148]
[72 147]
[73 146]
[74 145]
[75 144]
[76 143]
[77 142]
[79 141]
[80 140]
[81 139]
[87 133]
[88 132]
[89 131]
[91 130]
[92 129]
[93 128]
[94 127]
[102 123]
[103 122]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
