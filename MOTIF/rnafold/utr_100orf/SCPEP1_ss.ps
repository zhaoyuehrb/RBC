%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUGGGGCGCCGGGUCCAGCCUGUUGCUGAUGCUGCCGUGCGGUACUUGUCAUGGAGCUGGCACUGCGGCGCUCUCCCGUCCCGCGGUGGUUGCUGCUGCUGCCGCUGCUGCUGGGCCUGAACGCAGGAGCUGUCAUUGACUGGCCCACAG\
) } def
/len { sequence length } bind def

/coor [
[85.98704529 125.77332306]
[76.57511902 115.54627991]
[73.23970032 102.65906525]
[58.49180984 99.92052460]
[43.74391556 97.18197632]
[28.99602318 94.44342804]
[14.24813080 91.70487976]
[-0.49976274 88.96633148]
[-15.32453823 86.68028259]
[-30.21231651 84.84886932]
[-45.10009384 83.01744843]
[-59.98786926 81.18603516]
[-74.87564850 79.35462189]
[-89.76342773 77.52320862]
[-104.66910553 75.84374237]
[-119.59114838 74.31639862]
[-134.51318359 72.78904724]
[-149.45002747 71.41398621]
[-164.40011597 70.19134521]
[-179.35020447 68.96871185]
[-194.30029297 67.74607086]
[-209.25038147 66.52342987]
[-224.21215820 65.45333862]
[-239.18408203 64.53591919]
[-254.15600586 63.61849213]
[-269.12792969 62.70106888]
[-283.37548828 69.57984161]
[-295.60571289 61.07860565]
[-310.57760620 60.16117859]
[-320.47866821 71.96268463]
[-335.25756836 75.62839508]
[-349.19625854 69.95595551]
[-357.02828979 57.31484985]
[-372.00018311 56.39742661]
[-386.97210693 55.48000336]
[-401.94403076 54.56257629]
[-416.91595459 53.64515305]
[-431.88787842 52.72772598]
[-448.06713867 57.79399872]
[-457.41430664 43.64949036]
[-446.41012573 30.75204086]
[-430.97045898 37.75580978]
[-415.99853516 38.67323303]
[-401.02661133 39.59066010]
[-386.05468750 40.50808334]
[-371.08276367 41.42551041]
[-356.11083984 42.34293365]
[-346.79403687 30.75264931]
[-332.26702881 26.82448006]
[-318.04626465 32.26718521]
[-309.66018677 45.18926239]
[-294.68826294 46.10668564]
[-281.51159668 39.16229248]
[-268.21047974 47.72914886]
[-253.23857117 48.64657593]
[-238.26666260 49.56399918]
[-223.29473877 50.48142242]
[-216.38444519 47.73486328]
[-208.02774048 51.57334137]
[-193.07765198 52.79598236]
[-178.12756348 54.01861954]
[-163.17747498 55.24126053]
[-148.22738647 56.46389771]
[-141.26249695 53.85887146]
[-132.98583984 57.86701202]
[-118.06380463 59.39435577]
[-103.14176178 60.92170334]
[-96.12519073 58.45928955]
[-87.93201447 62.63542938]
[-73.04423523 64.46684265]
[-58.15645599 66.29825592]
[-43.26867676 68.12967682]
[-28.38090134 69.96109009]
[-13.49312401 71.79250336]
[-10.46983242 69.86974335]
[-6.34861803 69.35062408]
[-1.81584609 70.74227142]
[2.23878455 74.21843719]
[16.98667717 76.95698547]
[31.73457146 79.69553375]
[46.48246384 82.43408203]
[61.23035812 85.17263031]
[75.97824860 87.91117859]
[88.14347839 73.61225891]
[107.96018982 70.07460022]
[126.69554901 80.59523010]
[138.22979736 71.00560760]
[149.76406860 61.41598129]
[161.29832458 51.82635880]
[172.83258057 42.23673248]
[184.36683655 32.64710999]
[195.90109253 23.05748558]
[207.43534851 13.46786118]
[213.10047913 -1.30430496]
[227.83364868 -3.49135423]
[239.36790466 -13.08097839]
[244.53584290 -28.64454079]
[260.65060425 -31.68528175]
[271.13473511 -19.07514763]
[265.20303345 -3.78636479]
[248.95751953 -1.54672074]
[237.42326355 8.04290390]
[232.58314514 22.12915611]
[217.02497864 25.00211906]
[205.49072266 34.59174347]
[193.95646667 44.18136597]
[182.42219543 53.77099228]
[170.88793945 63.36061478]
[159.35368347 72.95024109]
[147.81942749 82.53986359]
[136.28517151 92.12948608]
[136.43817139 107.12870789]
[148.16563416 116.48105621]
[156.88264465 119.41059113]
[160.03439331 126.14575195]
[171.56864929 135.73536682]
[183.10290527 145.32499695]
[194.63716125 154.91462708]
[206.17141724 164.50424194]
[217.70567322 174.09387207]
[229.80485535 182.96008301]
[242.42366028 191.06970215]
[255.04246521 199.17930603]
[270.29827881 196.03324890]
[282.98001099 204.43731689]
[285.88528442 219.00079346]
[298.50408936 227.11041260]
[314.90148926 227.34980774]
[322.65548706 241.79998779]
[313.78945923 255.59582520]
[297.42398071 254.54534912]
[290.39447021 239.72920227]
[277.77566528 231.61959839]
[263.32138062 235.02676392]
[250.40859985 226.98222351]
[246.93284607 211.79811096]
[234.31405640 203.68850708]
[221.69525146 195.57888794]
[223.42051697 210.47933960]
[214.25288391 222.35176086]
[199.40054321 224.45130920]
[187.30126953 215.58522034]
[184.82876587 200.79040527]
[193.38769531 188.47192383]
[208.11605835 185.62812805]
[196.58178711 176.03849792]
[185.04753113 166.44888306]
[173.51327515 156.85925293]
[161.97901917 147.26963806]
[150.44476318 137.68000793]
[138.81329346 128.20852661]
[127.08582306 118.85617828]
[114.55629730 128.25126648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 83]
[4 82]
[5 81]
[6 80]
[7 79]
[8 78]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 67]
[16 66]
[17 65]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 57]
[24 56]
[25 55]
[26 54]
[28 52]
[29 51]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[95 102]
[96 101]
[112 152]
[113 151]
[115 150]
[116 149]
[117 148]
[118 147]
[119 146]
[120 145]
[121 138]
[122 137]
[123 136]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
