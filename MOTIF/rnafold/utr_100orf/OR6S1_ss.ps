%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUCCUGAUGGGAACCACAGUAGUGAUCCAACAGAGUUCGUCCUGGCAGGGCUCCCAAAUCUCAACAGCGCAAGAGUGGAAUUAUUUUCUGUGUUUC\
) } def
/len { sequence length } bind def

/coor [
[226.74598694 180.09715271]
[216.81874084 162.78804016]
[215.06802368 142.86747742]
[200.71815491 138.49925232]
[186.36828613 134.13102722]
[172.01841736 129.76281738]
[157.66854858 125.39459229]
[143.31869507 121.02636719]
[128.96882629 116.65814972]
[114.61895752 112.28993225]
[101.78465271 119.01502991]
[87.92314148 114.79546356]
[81.01282501 102.05993652]
[66.66295624 97.69171906]
[52.31309128 93.32349396]
[37.96322632 88.95527649]
[25.59287834 98.13572693]
[10.36673927 98.27023315]
[-1.87421989 89.51677704]
[-6.55750895 75.40278625]
[-20.90737534 71.03456879]
[-31.34365082 80.19092560]
[-44.84384537 82.92761993]
[-57.81538010 78.62673187]
[-66.86102295 68.52861786]
[-69.66853333 55.37664032]
[-83.87561035 50.56425476]
[-97.93273163 57.78733063]
[-112.95435333 52.87545013]
[-120.02840424 38.74274445]
[-114.95797729 23.77389908]
[-100.75127411 16.84966278]
[-85.83686829 22.07806206]
[-79.06322479 36.35718155]
[-64.85614777 41.16956711]
[-51.85512543 31.28133392]
[-35.35793304 31.02431870]
[-21.78629875 40.69428253]
[-16.53915405 56.68470001]
[-2.18928838 61.05292130]
[9.56377220 51.94229126]
[24.60581589 51.49401474]
[37.17447281 60.08949280]
[42.33144379 74.60540771]
[56.68131256 78.97363281]
[71.03117371 83.34185028]
[85.38104248 87.71006775]
[98.21534729 80.98497009]
[112.07685852 85.20453644]
[118.98717499 97.94006348]
[133.33703613 102.30828094]
[147.68690491 106.67650604]
[162.03677368 111.04472351]
[176.38664246 115.41294861]
[190.73651123 119.78116608]
[205.08638000 124.14938354]
[219.43623352 128.51760864]
[225.36148071 119.43706512]
[233.21817017 111.98044586]
[242.57690430 106.54838562]
[252.92774963 103.43103027]
[263.70803833 102.79257202]
[274.33303833 104.66260529]
[284.22756958 108.93478394]
[292.85714722 115.37286377]
[299.75692749 123.62375641]
[304.55667114 133.23690796]
[307.00070190 143.68885803]
[306.96136475 154.41178894]
[304.44586182 164.82437134]
[317.51330566 172.18928528]
[330.58074951 179.55419922]
[343.64819336 186.91911316]
[356.71563721 194.28402710]
[369.78308105 201.64894104]
[382.96350098 208.80973816]
[396.25366211 215.76467896]
[409.54382324 222.71963501]
[422.83401489 229.67459106]
[436.12417603 236.62954712]
[449.41433716 243.58450317]
[465.76803589 242.36431885]
[474.77670288 256.06744385]
[467.17303467 270.59729004]
[450.77899170 271.00677490]
[442.45938110 256.87466431]
[429.16921997 249.91970825]
[415.87905884 242.96476746]
[402.58886719 236.00981140]
[389.29870605 229.05485535]
[376.00854492 222.09989929]
[368.49026489 221.78195190]
[362.41818237 214.71638489]
[349.35073853 207.35147095]
[336.28329468 199.98655701]
[323.21585083 192.62164307]
[310.14840698 185.25672913]
[297.08096313 177.89181519]
[281.72814941 190.36302185]
[262.51687622 195.25073242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[13 47]
[14 46]
[15 45]
[16 44]
[20 40]
[21 39]
[26 35]
[27 34]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[75 93]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
