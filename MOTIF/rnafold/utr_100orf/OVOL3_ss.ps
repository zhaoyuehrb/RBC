%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCCGCGCCUUCCUGGUCAGGAGUCGGCGUCCACAGCCCCCCAACUGGGGCCAUCUGCCUGACCAGCUCCGGGGAGAUGCCUAUAUCCCAGACUGCA\
) } def
/len { sequence length } bind def

/coor [
[220.39602661 390.24081421]
[224.83312988 375.84893799]
[232.26072693 362.74758911]
[242.33140564 351.54959106]
[233.59028625 339.35971069]
[224.84916687 327.16986084]
[216.10806274 314.97998047]
[207.36694336 302.79010010]
[196.87852478 305.06521606]
[186.20449829 303.62237549]
[176.62782288 298.60833740]
[169.30865479 290.60067749]
[165.14379883 280.54138184]
[164.65689087 269.62606812]
[167.93269348 259.16189575]
[174.60379028 250.41104126]
[167.44299316 237.23063660]
[160.28219604 224.05023193]
[153.12139893 210.86982727]
[145.96060181 197.68943787]
[138.79980469 184.50903320]
[131.63899231 171.32862854]
[124.47820282 158.14822388]
[117.31740570 144.96783447]
[109.95249176 131.90039062]
[102.38524628 118.94905853]
[88.39720154 115.17008209]
[81.08748627 102.65950775]
[84.66342926 88.61818695]
[77.09618378 75.66685486]
[69.52893829 62.71553421]
[63.74182892 58.95674515]
[61.23593140 53.60602188]
[61.92274094 48.71531296]
[55.17531586 35.31858826]
[48.40063095 28.92356682]
[48.43368530 21.39864922]
[42.10615921 7.79856014]
[35.77863693 -5.80152893]
[20.52397919 -8.64320564]
[9.87746716 -19.93175697]
[7.93289900 -35.32650375]
[15.43800068 -48.90785599]
[29.50690651 -55.45350266]
[44.72983932 -52.44651031]
[55.25326538 -41.04312897]
[57.03071594 -25.62818909]
[49.37872314 -12.12905407]
[55.70624924 1.47103453]
[62.03377533 15.07112312]
[68.57204437 28.57116318]
[75.31946564 41.96788788]
[82.48026276 55.14828873]
[90.04750824 68.09961700]
[97.61475372 81.05094147]
[111.60279846 84.82991791]
[118.91251373 97.34049225]
[115.33657074 111.38181305]
[122.90381622 124.33314514]
[130.06297302 130.29461670]
[130.49780273 137.80703735]
[137.65859985 150.98742676]
[144.81939697 164.16783142]
[151.98019409 177.34823608]
[159.14099121 190.52864075]
[166.30178833 203.70903015]
[173.46258545 216.88943481]
[180.62339783 230.06983948]
[187.78419495 243.25024414]
[207.51025391 244.58757019]
[222.50758362 257.25595093]
[227.05867004 276.20944214]
[219.55680847 294.04898071]
[228.29792786 306.23886108]
[237.03904724 318.42874146]
[245.78015137 330.61859131]
[254.52127075 342.80847168]
[268.35827637 336.86276245]
[283.15002441 334.03103638]
[298.20465088 334.44577026]
[312.81805420 338.08755493]
[326.30673218 344.78604126]
[338.03976440 354.22793579]
[347.46844482 365.97164917]
[354.15170288 379.46786499]
[357.77700806 394.08535767]
[358.17474365 409.14047241]
[355.32635498 423.92898560]
[349.36505127 437.75927734]
[340.56964111 449.98443604]
[329.35150146 460.03271484]
[316.23535156 467.43408203]
[301.83462524 471.84240723]
[286.82287598 473.05148315]
[271.90225220 471.00476074]
[257.77059937 465.79797363]
[245.08891296 457.67465210]
[234.45028687 447.01473999]
[226.35234070 434.31680298]
[221.17381287 420.17477417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 59]
[26 58]
[29 55]
[30 54]
[31 53]
[34 52]
[35 51]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
