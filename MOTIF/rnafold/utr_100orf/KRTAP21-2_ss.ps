%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCAACUGAAAUCUAACCUCCUGAAAUCAUGUGUUGCAACUACUACAGAAACUGCUGUGGGGGCUGUGGAUAUGGCUCUGGCUGGAGUUCCGGCUGUGGAUAUGGUUGUGGCUAUGGCUGUGGAUACG\
) } def
/len { sequence length } bind def

/coor [
[4.03969717 462.22283936]
[-1.88720298 476.07275391]
[-10.74781704 488.25622559]
[-22.09770012 498.16217041]
[-35.36754608 505.29373169]
[-49.89174652 509.29315186]
[-64.94177246 509.95983887]
[-79.76271820 507.26034546]
[-93.61117554 501.33007812]
[-105.79251099 492.46652222]
[-115.69571686 481.11425781]
[-122.82404327 467.84268188]
[-126.81994629 453.31750488]
[-127.48298645 438.26730347]
[-124.77990723 423.44702148]
[-118.84629822 409.60000610]
[-109.97978210 397.42080688]
[-98.62509918 387.52035522]
[-85.35179901 380.39523315]
[-70.82566071 376.40286255]
[-55.77531433 375.74346924]
[-40.95567703 378.45013428]
[-35.05092239 364.66122437]
[-29.14616966 350.87234497]
[-38.05998230 340.45693970]
[-41.61352921 327.14782715]
[-39.05324936 313.54498291]
[-30.82577896 302.33145142]
[-18.50127411 295.74426270]
[-4.47401953 295.12814331]
[1.75720572 281.48367310]
[7.98843098 267.83917236]
[14.21965599 254.19470215]
[20.45088196 240.55021667]
[20.36708832 233.08644104]
[26.99618340 226.65791321]
[33.55035019 213.16558838]
[40.10451889 199.67326355]
[46.65868759 186.18093872]
[53.21285248 172.68861389]
[59.76702118 159.19628906]
[66.32118988 145.70394897]
[72.87535858 132.21162415]
[79.42952728 118.71929932]
[85.98369598 105.22697449]
[85.26996613 90.24396515]
[77.46294403 77.43574524]
[69.65592957 64.62752533]
[61.84891129 51.81930542]
[54.04189682 39.01108551]
[46.23487854 26.20286751]
[30.81892967 22.72090149]
[22.45108986 9.31363583]
[26.09584618 -6.06463718]
[39.59083176 -14.29026127]
[54.92971420 -10.48311806]
[63.01219940 3.09808040]
[59.04309845 18.39585114]
[66.85011292 31.20406914]
[74.65713501 44.01229095]
[82.46414948 56.82050705]
[90.27116394 69.62873077]
[98.07818604 82.43695068]
[112.97209930 80.65615845]
[117.53939819 66.36840820]
[122.10669708 52.08066177]
[126.67399597 37.79291153]
[131.24128723 23.50516319]
[135.80859375 9.21741295]
[140.37588501 -5.07033730]
[136.36317444 -20.97097206]
[148.31408691 -32.20074081]
[163.93453979 -27.20742416]
[167.15556335 -11.12771416]
[154.66363525 -0.50303984]
[150.09634399 13.78470993]
[145.52903748 28.07246017]
[140.96174622 42.36021042]
[136.39443970 56.64796066]
[131.82714844 70.93570709]
[127.25984955 85.22345734]
[138.35961914 95.31380463]
[149.45838928 105.40326691]
[163.24729919 99.49851990]
[177.03619385 93.59376526]
[190.82510376 87.68901062]
[204.61401367 81.78425598]
[218.40290833 75.87950134]
[227.79205322 62.43419647]
[244.10511780 64.11215973]
[250.56065369 79.18724060]
[240.51773071 92.15149689]
[224.30766296 89.66841125]
[210.51876831 95.57315826]
[196.72985840 101.47791290]
[182.94094849 107.38266754]
[169.15205383 113.28742218]
[155.36314392 119.19217682]
[155.75987244 134.18692017]
[148.99894714 147.57684326]
[136.69718933 156.15977478]
[121.79652405 157.88317871]
[107.86036682 152.33488464]
[98.22148895 140.84175110]
[95.18498230 126.15231323]
[99.47602081 111.78114319]
[92.92185211 125.27346802]
[86.36768341 138.76579285]
[79.81351471 152.25811768]
[73.25934601 165.75045776]
[66.70517731 179.24278259]
[60.15101242 192.73510742]
[53.59684753 206.22743225]
[47.04267883 219.71975708]
[40.48851013 233.21208191]
[34.09535980 246.78144836]
[27.86413574 260.42593384]
[21.63291168 274.07040405]
[15.40168571 287.71487427]
[9.17046070 301.35937500]
[18.88512611 314.68188477]
[20.57447243 330.98937988]
[13.87394428 345.84982300]
[0.68637615 355.27191162]
[-15.35726547 356.77709961]
[-21.26201820 370.56597900]
[-27.16677284 384.35488892]
[-14.98114204 393.21255493]
[-5.07243967 404.56002808]
[2.06231976 417.82815552]
[6.06525898 432.35137939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 127]
[23 126]
[24 125]
[30 120]
[31 119]
[32 118]
[33 117]
[34 116]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
[41 110]
[42 109]
[43 108]
[44 107]
[45 106]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
