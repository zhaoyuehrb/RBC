%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCGCCGAGAACUCUCCAGCUCCCGCUUACAAAGUUUCCUCGCAUGGUGGUGAUAGUGGACUGGAUGGGUUAGGAGGACCAGGUGUACAACUAGGAA\
) } def
/len { sequence length } bind def

/coor [
[126.45113373 194.54801941]
[123.39006805 188.00938416]
[122.60012054 180.78034973]
[124.19966125 173.63269043]
[128.05012512 167.34053040]
[120.88932800 154.16012573]
[108.01478577 146.67044067]
[108.22548676 130.85063171]
[101.06468201 117.67023468]
[91.17304993 115.34456635]
[84.18982697 107.96298981]
[82.41592407 97.95767212]
[86.43583679 88.62528229]
[80.10831451 75.02519226]
[73.78078461 61.42510223]
[67.45326233 47.82501602]
[61.12573624 34.22492599]
[54.58747101 20.72488594]
[47.84004211 7.32816076]
[41.09261703 -6.06856441]
[34.34519196 -19.46529007]
[27.59776688 -32.86201477]
[16.87874222 -35.74444199]
[9.73836613 -43.95089722]
[8.42083645 -54.52531815]
[13.12929249 -63.83695984]
[7.22778845 -77.62725830]
[1.32628453 -91.41754913]
[-4.57521915 -105.20784760]
[-10.47672272 -118.99813843]
[-24.87280846 -124.94712830]
[-30.66132545 -139.01652527]
[-24.90115547 -152.70433044]
[-30.80265808 -166.49462891]
[-42.55125427 -167.09121704]
[-53.14445496 -172.08624268]
[-61.00916290 -180.69430542]
[-64.99411011 -191.59677124]
[-64.53826904 -203.14376831]
[-59.74950409 -213.60372925]
[-51.38245773 -221.42314148]
[-55.97331619 -235.70333862]
[-70.14536285 -242.69824219]
[-75.14118958 -257.69213867]
[-67.99684906 -271.78945923]
[-52.95095825 -276.62646484]
[-38.92997360 -269.33349609]
[-34.25230408 -254.23728943]
[-41.69311905 -240.29420471]
[-37.10226059 -226.01400757]
[-19.17955971 -221.40359497]
[-7.40187120 -206.93937683]
[-6.50469732 -188.16134644]
[-17.01236343 -172.39613342]
[-11.11085987 -158.60583496]
[2.76795554 -153.32244873]
[8.94936752 -139.42120361]
[3.31357241 -124.89964294]
[9.21507645 -111.10935211]
[15.11658001 -97.31905365]
[21.01808357 -83.52875519]
[26.91958809 -69.73846436]
[43.21414185 -59.52570724]
[40.99449158 -39.60943985]
[47.74191666 -26.21271515]
[54.48934174 -12.81599045]
[61.23677063 0.58073521]
[67.98419189 13.97746086]
[73.90869904 18.61704826]
[74.72582245 27.89739990]
[81.05335236 41.49748993]
[87.38087463 55.09757996]
[93.70840454 68.69766998]
[100.03592682 82.29776001]
[115.81017303 92.03701019]
[114.24508667 110.50943756]
[121.40588379 123.68983459]
[134.79261780 132.12226868]
[134.06973267 146.99932861]
[141.23052979 160.17973328]
[162.93406677 170.06817627]
[163.25517273 193.23141479]
[172.73721313 204.85426331]
[187.45610046 210.65640259]
[189.50617981 225.40924072]
[198.98822021 237.03210449]
[208.47027588 248.65495300]
[224.22207642 251.69801331]
[231.53605652 265.97686768]
[224.80155945 280.53796387]
[209.18470764 284.21130371]
[196.66542053 274.17901611]
[196.84741211 258.13699341]
[187.36537170 246.51414490]
[177.88331604 234.89129639]
[163.84265137 229.92050171]
[161.11434937 214.33630371]
[151.63230896 202.71345520]
[144.73927307 203.98974609]
[137.75178528 202.96275330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 80]
[6 79]
[8 77]
[9 76]
[13 74]
[14 73]
[15 72]
[16 71]
[17 70]
[18 68]
[19 67]
[20 66]
[21 65]
[22 64]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[33 55]
[34 54]
[41 50]
[42 49]
[82 98]
[83 97]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
