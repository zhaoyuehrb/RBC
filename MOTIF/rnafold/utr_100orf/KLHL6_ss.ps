%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCCGCUCAGCUCCUGCAAUGGGGCCUGCCUGACACUUGGGCGCUCCUUCAGUCUCGAUGUUGAUGGCAGGACAAAGGGGCGCCUGGACCAUGGGUGAUGUGGUCGAGAAGAGUUUGGAAGGGCCCCUGGCACCUUCUACAGAUGAGCCCUCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[76.13832092 263.23886108]
[67.80723572 250.57518005]
[64.31283569 235.82510376]
[66.07707977 220.76976013]
[72.88692474 207.22717285]
[83.92005920 196.83267212]
[97.84416962 190.84143066]
[96.96110535 175.86744690]
[96.07804108 160.89346313]
[95.19498444 145.91947937]
[94.31192017 130.94549561]
[80.23905182 125.75373077]
[69.84274292 136.56654358]
[59.44643021 147.37934875]
[49.05011749 158.19213867]
[38.65380859 169.00494385]
[39.21464920 184.79928589]
[28.38195992 196.30703735]
[12.58257771 196.70086670]
[1.18999958 185.74710083]
[0.96323866 169.94444275]
[12.03682899 158.66831970]
[27.84100533 158.60864258]
[38.23731613 147.79583740]
[48.63362503 136.98303223]
[59.02993774 126.17022705]
[69.42624664 115.35742188]
[66.02131653 108.67487335]
[51.04187393 107.88986206]
[59.21146011 95.30977631]
[55.80653000 88.62722778]
[40.94799042 90.68241119]
[33.75233078 104.43021393]
[19.83524323 111.29273987]
[4.54812908 108.63121033]
[-6.23080301 97.46903229]
[-8.35683346 82.09828949]
[-1.01246095 68.42935181]
[12.97825432 61.71820831]
[28.23559570 64.54541779]
[38.89280701 75.82387543]
[53.75134659 73.76868439]
[59.62737274 59.96751785]
[50.81059265 47.83226013]
[41.99381256 35.69700623]
[33.17703629 23.56175232]
[24.36025620 11.42649746]
[15.54347801 -0.70875776]
[6.72669888 -12.84401226]
[-2.09008002 -24.97926712]
[-10.90685844 -37.11452103]
[-23.53237152 -39.91350937]
[-30.62148285 -50.24591446]
[-28.80849838 -62.23867416]
[-37.38531876 -74.54469299]
[-45.96213531 -86.85071564]
[-54.53895569 -99.15673828]
[-59.36219025 -101.41062164]
[-62.49347305 -104.95276642]
[-63.72521210 -108.90837097]
[-63.23324585 -112.44933319]
[-71.07072449 -125.23893738]
[-78.90820312 -138.02853394]
[-86.74568176 -150.81814575]
[-100.17695618 -161.16401672]
[-93.95355225 -176.93441772]
[-77.07665253 -175.31990051]
[-73.95607758 -158.65562439]
[-66.11859894 -145.86601257]
[-58.28112411 -133.07641602]
[-50.44364548 -120.28681183]
[-42.23293304 -107.73355865]
[-33.65611649 -95.42753601]
[-25.07929611 -83.12151337]
[-16.50247574 -70.81549072]
[-0.24682680 -64.26220703]
[1.22839618 -45.93130112]
[10.04517460 -33.79604721]
[18.86195374 -21.66079140]
[27.67873192 -9.52553654]
[36.49551010 2.60971832]
[45.31229019 14.74497318]
[54.12907028 26.88022804]
[62.94584656 39.01548386]
[71.76262665 51.15073776]
[120.32798004 59.61798859]
[130.06970215 48.21189880]
[133.14869690 32.69319153]
[147.29789734 28.04027176]
[157.03961182 16.63418198]
[166.78134155 5.22809315]
[176.52305603 -6.17799664]
[186.26477051 -17.58408546]
[196.00650024 -28.99017525]
[205.74821472 -40.39626312]
[205.92799377 -56.43831253]
[218.67031860 -66.18575287]
[234.20037842 -62.16119385]
[240.60482788 -47.45192337]
[232.97073364 -33.34164047]
[217.15431213 -30.65454483]
[207.41258240 -19.24845505]
[197.67086792 -7.84236526]
[187.92915344 3.56372428]
[178.18742371 14.96981335]
[168.44570923 26.37590408]
[158.70397949 37.78199387]
[156.32177734 52.48485947]
[141.47578430 57.95362091]
[131.73406982 69.35971069]
[133.55641174 76.63494110]
[147.57395935 71.29558563]
[161.03225708 64.67184448]
[172.19857788 74.68750000]
[167.07168579 88.78413391]
[152.08044434 89.28648376]
[137.20112610 91.18540955]
[139.02346802 98.46064758]
[152.99169922 103.92770386]
[166.95991516 109.39476013]
[180.92814636 114.86181641]
[194.89636230 120.32888031]
[208.86459351 125.79593658]
[222.83280945 131.26298523]
[236.85403442 136.59265137]
[250.92691040 141.78440857]
[264.99978638 146.97616577]
[281.95266724 146.78573608]
[286.82867432 163.02337646]
[272.57540894 172.20385742]
[259.80801392 161.04904175]
[245.73515320 155.85728455]
[231.66227722 150.66552734]
[224.25999451 151.30413818]
[217.36575317 145.23121643]
[203.39753723 139.76416016]
[189.42930603 134.29710388]
[175.46109009 128.83004761]
[161.49285889 123.36298370]
[147.52464294 117.89592743]
[133.55641174 112.42887115]
[127.48878479 116.83725739]
[136.30535889 128.97265625]
[124.16981506 137.78903198]
[115.35353088 125.65403748]
[109.28590393 130.06242371]
[110.16896820 145.03640747]
[111.05203247 160.01039124]
[111.93508911 174.98437500]
[112.81815338 189.95835876]
[127.34994507 194.27146912]
[139.52833557 203.29711914]
[147.88275146 215.94543457]
[151.40432739 230.68904114]
[149.66783142 245.74761963]
[142.88294983 259.30273438]
[131.86900330 269.71755981]
[117.95594788 275.73443604]
[102.82388306 276.62683105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 150]
[8 149]
[9 148]
[10 147]
[11 146]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[31 42]
[32 41]
[43 85]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[54 75]
[55 74]
[56 73]
[57 72]
[61 71]
[62 70]
[63 69]
[64 68]
[86 110]
[87 109]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[118 141]
[119 140]
[120 139]
[121 138]
[122 137]
[123 136]
[124 135]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
