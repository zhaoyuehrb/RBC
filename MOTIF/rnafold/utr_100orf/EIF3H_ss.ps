%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUCUUCCUGUCUGCUUGGAAAGAUGGCGUCCCGCAAGGAAGGUACCGGCUCUACUGCCACCUCUUCCAGCUCCACCGCCGGCGCAGCAGGGAAAGGCAAAGGCAAAGGCGGCUCGGGAGAUU\
) } def
/len { sequence length } bind def

/coor [
[73.39696503 588.15899658]
[57.92259598 587.00854492]
[46.10158539 576.95648193]
[42.47935104 561.86810303]
[48.44871902 547.54516602]
[61.71434021 539.49517822]
[62.82648087 524.53643799]
[63.93862152 509.57772827]
[65.05076599 494.61901855]
[66.16290283 479.66030884]
[67.27504730 464.70156860]
[55.80696106 455.23474121]
[52.06813049 440.65786743]
[57.69539642 426.50912476]
[70.72548676 418.29187012]
[71.83763123 403.33316040]
[72.94976807 388.37445068]
[74.06191254 373.41574097]
[75.17404938 358.45703125]
[76.28619385 343.49832153]
[62.91684341 338.40283203]
[51.52159500 329.72479248]
[43.03628540 318.16546631]
[38.16099167 304.66333008]
[37.30224609 290.31765747]
[40.53918457 276.29922485]
[47.61632156 263.75457764]
[57.96371078 253.71237183]
[70.74282074 246.99897766]
[84.91449738 244.17053223]
[86.39629364 229.24389648]
[77.09226990 212.36557007]
[88.82204437 196.05903625]
[89.56385040 181.07739258]
[90.30565643 166.09574890]
[91.04746246 151.11410522]
[91.60391235 136.12442017]
[91.97492981 121.12901306]
[80.36386871 111.19194031]
[77.73073578 96.13774872]
[85.27943420 82.84943390]
[79.84046173 68.87024689]
[74.40148926 54.89106369]
[68.96251678 40.91188049]
[63.52354813 26.93269539]
[58.08457565 12.95351124]
[44.47272491 10.42630100]
[33.98836517 1.55205119]
[29.32157516 -11.25120926]
[31.59955788 -24.57656670]
[40.11656189 -34.93468094]
[35.02502060 -49.04411697]
[29.93348122 -63.15355301]
[15.52359676 -69.64437866]
[10.00217819 -84.45280457]
[16.64498711 -98.79325867]
[31.51096153 -104.15779877]
[45.78038406 -97.36374664]
[50.98745728 -82.44188690]
[44.04291916 -68.24509430]
[49.13446045 -54.13565826]
[54.22600174 -40.02622223]
[70.08938599 -36.00004578]
[80.56204224 -23.20842743]
[81.39415741 -6.53181458]
[72.06375885 7.51453924]
[77.50273132 21.49372292]
[82.94170380 35.47290802]
[88.38067627 49.45209122]
[93.81964874 63.43127441]
[99.25862122 77.41046143]
[105.26267242 78.01952362]
[110.89152527 80.19566345]
[122.07173920 70.19552612]
[127.19939423 55.22830582]
[141.84391785 52.51031876]
[153.02412415 42.51018143]
[153.65295410 26.71840668]
[165.32058716 16.05811501]
[181.10482788 16.85386848]
[191.64117432 28.63355827]
[190.67858887 44.40850830]
[178.78816223 54.81971359]
[163.02426147 53.69039536]
[151.84405518 63.69053650]
[147.51608276 77.94248199]
[132.07188416 81.37574005]
[120.89166260 91.37587738]
[120.51679993 109.48146057]
[106.97034454 121.50003052]
[106.59932709 136.49543762]
[109.53989410 145.26002502]
[106.02910614 151.85591125]
[105.28730011 166.83755493]
[104.54549408 181.81919861]
[103.80368805 196.80084229]
[111.64752197 204.53045654]
[113.83699036 215.09744263]
[109.87550354 224.89756775]
[101.32292175 230.72569275]
[99.84112549 245.65232849]
[114.31437683 251.91076660]
[126.14200592 262.30981445]
[134.18202209 275.82946777]
[137.66299438 291.14932251]
[136.25816345 306.77728271]
[130.11596680 321.19506836]
[119.84452057 333.00567627]
[106.45142365 341.06869507]
[91.24491119 344.61044312]
[90.13276672 359.56915283]
[89.02062225 374.52789307]
[87.90848541 389.48660278]
[86.79634094 404.44531250]
[85.68420410 419.40402222]
[97.35588837 429.45776367]
[100.82901001 444.28311157]
[94.97569275 458.14685059]
[82.23376465 465.81372070]
[81.12162018 480.77243042]
[80.00947571 495.73114014]
[78.89733887 510.68988037]
[77.78519440 525.64855957]
[76.67305756 540.60729980]
[88.60241699 550.53051758]
[92.38811493 565.57867432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 124]
[7 123]
[8 122]
[9 121]
[10 120]
[11 119]
[15 115]
[16 114]
[17 113]
[18 112]
[19 111]
[20 110]
[30 101]
[31 100]
[33 96]
[34 95]
[35 94]
[36 93]
[37 91]
[38 90]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[51 62]
[52 61]
[53 60]
[73 88]
[74 87]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
