%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCUUUCCAGACCCAGAUGGAGCCUGUGGAGGAGGGUCUUCCUCAUGGCCAGUCUGCUGGCCUGUGGGAUCUGCCAGGCCUCUGGCCAAAUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[64.07985687 122.39799500]
[77.84833527 116.44538116]
[89.88002014 107.48778534]
[75.02671814 109.58051300]
[60.17342377 111.67324066]
[45.32012177 113.76597595]
[30.46682549 115.85870361]
[15.61352634 117.95143127]
[0.76022756 120.04416656]
[-7.47023439 124.40904236]
[-14.58676815 121.96354675]
[-29.49796486 123.59333038]
[-35.95095825 132.62464905]
[-46.13799667 136.43975830]
[-56.50438309 133.97151184]
[-63.57806778 126.30083466]
[-78.56174469 127.00044250]
[-93.53273010 127.93298340]
[-108.48739624 129.09823608]
[-123.44207001 130.26350403]
[-132.38493347 143.09156799]
[-147.49467468 147.12014771]
[-161.63696289 140.44706726]
[-168.13421631 126.22315216]
[-163.91864014 111.16449738]
[-150.98069763 102.38134766]
[-135.42929077 104.02082825]
[-124.60733032 115.30883026]
[-109.65265656 114.14356995]
[-94.69798279 112.97831726]
[-88.15878296 109.25482941]
[-79.26135254 112.01676178]
[-64.27767181 111.31716156]
[-49.00620651 99.62976837]
[-31.12774849 108.68212891]
[-16.21655083 107.05234528]
[-1.33250248 105.19086456]
[13.52079582 103.09813690]
[28.37409401 101.00540924]
[43.22739410 98.91267395]
[58.08069229 96.81994629]
[72.93399048 94.72721863]
[87.78729248 92.63448334]
[100.11162567 84.08399963]
[107.27242279 70.90360260]
[114.43321991 57.72319794]
[115.82572174 48.51160049]
[122.02720642 44.24930954]
[129.59445190 31.29798508]
[137.16169739 18.34666061]
[144.52661133 5.27921629]
[151.68740845 -7.90118456]
[158.84820557 -21.08158493]
[166.00900269 -34.26198578]
[173.16979980 -47.44238663]
[180.33059692 -60.62278748]
[179.36489868 -76.99347687]
[193.20646667 -85.78796387]
[207.61628723 -77.95922852]
[207.77076721 -61.56081009]
[193.51100159 -53.46199036]
[186.35020447 -40.28158951]
[179.18939209 -27.10118866]
[172.02859497 -13.92078781]
[164.86779785 -0.74038643]
[157.70700073 12.44001484]
[157.27217102 19.95243263]
[150.11302185 25.91390228]
[142.54577637 38.86522675]
[134.97853088 51.81655502]
[127.61362457 64.88399506]
[120.45281982 78.06439972]
[113.29202271 91.24479675]
[115.47613525 98.41973114]
[130.08766174 101.81137085]
[119.84435272 112.76959991]
[122.02846527 119.94453430]
[135.31863403 126.89948273]
[148.60881042 133.85443115]
[161.89897156 140.80938721]
[175.18914795 147.76434326]
[191.54283142 146.54415894]
[200.55151367 160.24728394]
[192.94783020 174.77711487]
[176.55380249 175.18661499]
[168.23419189 161.05451965]
[154.94403076 154.09956360]
[141.65385437 147.14460754]
[128.36367798 140.18965149]
[115.07351685 133.23469543]
[123.40235138 145.70989990]
[123.71257782 160.70668030]
[118.25341034 174.67799377]
[107.85799408 185.49165344]
[94.11277008 191.49739075]
[79.11540222 191.77864075]
[65.15466309 186.29249573]
[54.36110306 175.87622070]
[48.38193512 162.11941528]
[48.12964630 147.12153625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[11 36]
[12 35]
[16 33]
[17 32]
[18 30]
[19 29]
[20 28]
[44 73]
[45 72]
[46 71]
[48 70]
[49 69]
[50 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
