%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCGUCCCGGCACCGCGGCCGCAGUGAGGAGACUCGGCCAUGCUACGCGCGCUGAGCCGCCUGGGCGCGGGGACCCCGUGCAGGCCCCGGGCCCCUCUGGUGCUGCCAGCGCGCGGCCGCAAGACCCGCCACGACCCGC\
) } def
/len { sequence length } bind def

/coor [
[134.45349121 280.83981323]
[131.79393005 266.07745361]
[129.13436890 251.31512451]
[126.47480774 236.55278015]
[123.48702240 221.85334778]
[120.17248535 207.22413635]
[116.85794830 192.59492493]
[102.70147705 179.49319458]
[108.74662781 160.31843567]
[104.78369904 145.85139465]
[100.82076263 131.38435364]
[96.85783386 116.91732025]
[90.52944946 130.51699829]
[75.53306580 130.84632874]
[68.61376953 117.53755188]
[77.49879456 105.45094299]
[62.90741730 108.92824554]
[48.39712906 112.72976685]
[33.97513962 116.85361481]
[19.55314636 120.97746277]
[5.13115406 125.10131836]
[-9.29083824 129.22515869]
[-16.75342751 134.63499451]
[-24.08020592 133.27639771]
[-38.59049225 137.07791138]
[-53.10078049 140.87942505]
[-60.86168671 154.64692688]
[-76.10680389 158.81369019]
[-89.79147339 150.90766907]
[-93.79682922 135.61935425]
[-85.74655914 122.01902771]
[-70.41674805 118.17553711]
[-56.90230179 126.36914825]
[-42.39201355 122.56762695]
[-27.88172531 118.76610565]
[-13.41468906 114.80317688]
[1.00730360 110.67932129]
[15.42929554 106.55547333]
[29.85128784 102.43162537]
[44.27328110 98.30776978]
[47.36519241 94.57163239]
[52.86818314 92.78703308]
[59.43011475 94.33686829]
[74.02149200 90.85956573]
[84.22541809 85.58987427]
[93.68551636 86.18290710]
[99.75873566 90.98563385]
[106.82047272 77.75189209]
[113.88221741 64.51815796]
[120.94395447 51.28441620]
[128.00569153 38.05067444]
[135.06742859 24.81693649]
[142.12916565 11.58319759]
[149.19090271 -1.65054107]
[156.25263977 -14.88428020]
[157.55187988 -24.00943375]
[163.62197876 -28.33160973]
[170.97680664 -41.40473557]
[178.03854370 -54.63847733]
[184.80369568 -68.02626038]
[191.56884766 -81.41403961]
[198.33399963 -94.80182648]
[195.71453857 -116.01671600]
[213.24925232 -126.81877136]
[219.10508728 -140.62852478]
[224.96092224 -154.43826294]
[230.81675720 -168.24801636]
[229.08085632 -183.97369385]
[241.17279053 -192.67050171]
[247.02864075 -206.48025513]
[252.88447571 -220.28999329]
[258.74032593 -234.09974670]
[264.59616089 -247.90950012]
[265.07803345 -257.11407471]
[270.73934937 -261.95938110]
[276.90139771 -275.63522339]
[269.94653320 -289.64105225]
[273.67178345 -304.82843018]
[286.31823730 -314.02633667]
[301.91461182 -312.89178467]
[313.09677124 -301.96051025]
[314.58486938 -286.39389038]
[305.67623901 -273.54202271]
[290.57727051 -269.47317505]
[284.41522217 -255.79731750]
[278.40588379 -242.05364990]
[272.55004883 -228.24391174]
[266.69421387 -214.43415833]
[260.83837891 -200.62440491]
[254.98254395 -186.81466675]
[257.13729858 -172.07673645]
[244.62651062 -162.39218140]
[238.77067566 -148.58242798]
[232.91484070 -134.77267456]
[227.05899048 -120.96292877]
[231.74943542 -113.25924683]
[232.33078003 -104.12007141]
[228.54153442 -95.63137817]
[221.13256836 -89.79052734]
[211.72178650 -88.03667450]
[204.95663452 -74.64888763]
[198.19148254 -61.26110458]
[191.42633057 -47.87332535]
[192.06971741 -43.06658936]
[189.64329529 -37.81490707]
[184.04992676 -34.04991531]
[176.69511414 -20.97679138]
[169.48638916 -7.82254171]
[162.42465210 5.41119719]
[155.36289978 18.64493561]
[148.30116272 31.87867546]
[141.23942566 45.11241531]
[134.17768860 58.34615326]
[127.11595154 71.57989502]
[120.05421448 84.81362915]
[112.99247742 98.04737091]
[111.32487488 112.95438385]
[115.28780365 127.42142487]
[119.25073242 141.88845825]
[123.21366119 156.35549927]
[133.04640198 161.23890686]
[138.41807556 170.55987549]
[137.74162292 181.07557678]
[131.48716736 189.28039551]
[134.80169678 203.90960693]
[138.11622620 218.53881836]
[142.40126038 223.74453735]
[143.22663879 229.47047424]
[141.23715210 233.89321899]
[143.89671326 248.65556335]
[146.55627441 263.41790771]
[149.21583557 278.18023682]
[163.50642395 283.99252319]
[172.36737061 296.62133789]
[172.97119141 312.03689575]
[165.12521362 325.32009888]
[151.33303833 332.23239136]
[135.99571228 330.56802368]
[124.00732422 320.85812378]
[119.19332123 306.20111084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[4 129]
[5 126]
[6 125]
[7 124]
[9 120]
[10 119]
[11 118]
[12 117]
[16 44]
[17 43]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[24 35]
[25 34]
[26 33]
[47 116]
[48 115]
[49 114]
[50 113]
[51 112]
[52 111]
[53 110]
[54 109]
[55 108]
[57 107]
[58 106]
[59 103]
[60 102]
[61 101]
[62 100]
[64 95]
[65 94]
[66 93]
[67 92]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
