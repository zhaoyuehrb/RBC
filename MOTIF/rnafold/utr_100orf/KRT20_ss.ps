%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACACACUCUGCCCCAACCAUCCUGAAGCUACAGGUGCUCCCUCCUGGAAUCUCCAAUGGAUUUCAGUCGCAGAAGCUUCCACAGAAGCCUGAGCUCCUCCUUGCAGGCCCCUGUAGUCAGUACAGUGGGCAUGCAGCGCCUCGGGACGACACCCA\
) } def
/len { sequence length } bind def

/coor [
[41.70726776 356.04620361]
[38.18397903 370.62655640]
[34.66068649 385.20690918]
[41.76212692 399.59262085]
[34.81244278 414.05227661]
[19.14283752 417.49365234]
[6.77369118 407.27679443]
[7.19355392 391.23925781]
[20.08034325 381.68359375]
[23.60363388 367.10327148]
[27.12692451 352.52291870]
[14.34452152 345.83877563]
[3.53413320 336.27444458]
[-4.66859150 324.38619995]
[-9.77987766 310.86721802]
[-11.49635506 296.50698853]
[-9.71305370 282.14535522]
[-4.52981949 268.62335205]
[3.75427008 256.73388672]
[14.65815735 247.17536926]
[27.54673767 240.51057434]
[41.66785049 237.13359070]
[56.19618225 237.24645996]
[60.00685120 222.73857117]
[63.81752014 208.23068237]
[67.62818909 193.72280884]
[71.43885803 179.21492004]
[75.24952698 164.70703125]
[70.99936676 150.43168640]
[81.98867798 139.04988098]
[85.79935455 124.54199219]
[76.16704559 115.36093140]
[71.78392792 102.79663086]
[73.61537933 89.61637878]
[81.25801849 78.72311401]
[74.67356873 65.24553680]
[68.08912659 51.76795578]
[55.07935715 42.76482010]
[56.44456100 27.93291092]
[49.86011505 14.45533466]
[43.27566910 0.97775763]
[36.69122314 -12.49981976]
[22.38129807 -10.79375839]
[7.95797205 -15.94982243]
[-3.29422235 -27.63782310]
[-8.45681190 -43.97318268]
[-5.69784355 -61.80099106]
[-16.96321869 -71.70510101]
[-28.22859383 -81.60920715]
[-39.49396896 -91.51331329]
[-50.75934219 -101.41741943]
[-62.02471924 -111.32152557]
[-73.29009247 -121.22563171]
[-84.55546570 -131.12973022]
[-95.82084656 -141.03384399]
[-111.85866547 -141.44338989]
[-121.42258453 -154.32403564]
[-117.17597961 -169.79484558]
[-102.37648010 -175.98794556]
[-88.37699890 -168.15249634]
[-85.91674042 -152.29922485]
[-74.65135956 -142.39511108]
[-63.38598633 -132.49099731]
[-52.12061310 -122.58689880]
[-40.85523605 -112.68279266]
[-29.58986282 -102.77868652]
[-18.32448769 -92.87458038]
[-7.05911207 -82.97047424]
[4.20626307 -73.06636810]
[11.31121063 -75.46839142]
[6.17319536 -89.56096649]
[-4.91076756 -99.66768646]
[-1.83275640 -114.34848785]
[12.37732029 -119.15200043]
[23.73146057 -109.34977722]
[21.05370140 -94.59173584]
[25.52110672 -80.27243805]
[32.62605286 -82.67446136]
[35.57057190 -97.38261414]
[38.51509476 -112.09076691]
[41.45961380 -126.79892731]
[44.40413284 -141.50708008]
[38.64225769 -156.86067200]
[49.26549911 -169.35382080]
[65.34558105 -166.13464355]
[70.34069061 -150.51475525]
[59.11228943 -138.56256104]
[56.16776657 -123.85440063]
[53.22324753 -109.14624786]
[50.27872849 -94.43809509]
[47.33420944 -79.72994232]
[63.74756241 -59.58592987]
[63.78252411 -35.81205368]
[50.16880035 -19.08426476]
[56.75324631 -5.60668755]
[63.33769226 7.87088966]
[69.92213440 21.34846687]
[82.46094513 29.38759613]
[81.56670380 45.18350983]
[88.15114594 58.66108704]
[94.73559570 72.13866425]
[109.44258118 73.26415253]
[121.59430695 81.62464142]
[127.90238953 94.95770264]
[142.84313965 96.28963470]
[157.78387451 97.62157440]
[172.72462463 98.95351410]
[187.66537476 100.28545380]
[202.09808350 93.80411530]
[214.08802795 102.64098358]
[229.02877808 103.97292328]
[243.96952820 105.30485535]
[258.91027832 106.63679504]
[273.86346436 107.82106781]
[288.82760620 108.85755920]
[303.79174805 109.89405060]
[318.75588989 110.93054199]
[333.72003174 111.96703339]
[346.71630859 102.56082153]
[362.13418579 106.99566650]
[368.14645386 121.86955261]
[360.14096069 135.77249146]
[344.25888062 138.03935242]
[332.68353271 126.93118286]
[317.71939087 125.89469147]
[302.75524902 124.85820007]
[287.79110718 123.82170868]
[272.82696533 122.78521729]
[265.89993286 125.47465515]
[257.57833862 121.57754517]
[242.63758850 120.24560547]
[227.69683838 118.91366577]
[212.75608826 117.58172607]
[199.39205933 124.15833282]
[186.33343506 115.22620392]
[171.39268494 113.89426422]
[156.45195007 112.56232452]
[141.51119995 111.23038483]
[126.57044983 109.89844513]
[116.30159760 123.19969940]
[100.30723572 128.35266113]
[96.49656677 142.86054993]
[100.47416687 158.17359924]
[89.75741577 168.51770020]
[85.94674683 183.02558899]
[82.13607788 197.53347778]
[78.32540894 212.04136658]
[74.51473999 226.54924011]
[70.70407104 241.05712891]
[84.30320740 248.75726318]
[95.44731903 259.69757080]
[103.38579559 273.13314819]
[107.58605957 288.15130615]
[107.76920319 303.73355103]
[103.92857361 318.82473755]
[96.32978058 332.40438843]
[85.49238586 343.55575562]
[72.15432739 351.52777100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[23 149]
[24 148]
[25 147]
[26 146]
[27 145]
[28 144]
[30 142]
[31 141]
[35 101]
[36 100]
[37 99]
[39 97]
[40 96]
[41 95]
[42 94]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[104 139]
[105 138]
[106 137]
[107 136]
[108 135]
[110 133]
[111 132]
[112 131]
[113 130]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
