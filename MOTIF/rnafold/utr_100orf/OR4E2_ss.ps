%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAGUCUAAACCAAACAAGAGUGACUGAAUUUGUCUUCUUGGGACUCACUGAUAACCGGGUGCUGGAAAUGCUGUUUUUCAUGGCAUUCUCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[98.49227142 142.07844543]
[87.73827362 140.28050232]
[77.80648804 135.78152466]
[69.36290741 128.88317871]
[62.97372437 120.04804993]
[59.06736755 109.86858368]
[57.90578079 99.02737427]
[43.21131897 96.01526642]
[28.51685715 93.00315857]
[13.82239437 89.99105072]
[-0.87206775 86.97895050]
[6.99681759 99.74925232]
[6.09478140 114.72210693]
[-3.25031519 126.45535278]
[-17.64182854 130.68434143]
[-31.84890556 125.87196350]
[-40.70772934 113.76737213]
[-40.99839783 98.77018738]
[-32.61526871 86.33141327]
[-18.60530090 80.97213745]
[-32.10534286 74.43386841]
[-45.60538101 67.89560699]
[-59.10541916 61.35733795]
[-72.60546112 54.81907272]
[-86.10549927 48.28080750]
[-95.37202454 47.31945038]
[-99.91891479 41.32351303]
[-113.20908356 34.36855698]
[-126.49925232 27.41360664]
[-140.88954163 33.53353882]
[-155.83180237 28.92235565]
[-164.27075195 15.75731945]
[-162.22177124 0.25455478]
[-150.65232849 -10.26600552]
[-135.02517700 -10.83687496]
[-122.71895599 -1.18850684]
[-119.54429626 14.12343502]
[-106.25412750 21.07838821]
[-92.96395874 28.03334045]
[-79.56723022 34.78076553]
[-66.06719208 41.31903458]
[-52.56715393 47.85729980]
[-39.06711578 54.39556503]
[-25.56707573 60.93383026]
[-12.06703472 67.47209930]
[2.14003825 72.28448486]
[16.83450127 75.29659271]
[31.52896309 78.30870056]
[46.22342300 81.32080078]
[60.91788864 84.33290863]
[72.96545410 67.71993256]
[91.43492126 58.77490234]
[111.93897247 59.62265396]
[118.68640137 46.22592545]
[125.43382263 32.82920074]
[121.79076385 17.20525742]
[131.84730530 4.70544195]
[147.88894653 4.91854334]
[157.60990906 17.68108940]
[153.55308533 33.20274734]
[138.83055115 39.57662582]
[132.08312988 52.97335434]
[125.33570099 66.37007904]
[135.96504211 78.10513306]
[141.50871277 92.93624878]
[141.18280029 108.76622772]
[155.06320190 114.45255280]
[168.94360352 120.13887787]
[182.82402039 125.82520294]
[196.70442200 131.51153564]
[212.40768433 129.58322144]
[221.25187683 141.56777954]
[235.13227844 147.25410461]
[249.01268005 152.94042969]
[262.89309692 158.62675476]
[276.77349854 164.31307983]
[290.65390015 169.99940491]
[304.53430176 175.68572998]
[318.41470337 181.37205505]
[333.70843506 176.52627563]
[346.95172119 185.58140564]
[347.98544312 201.59111023]
[336.01660156 212.27413940]
[320.22671509 209.43536377]
[312.72839355 195.25247192]
[298.84799194 189.56614685]
[284.96759033 183.87982178]
[271.08715820 178.19348145]
[257.20675659 172.50715637]
[243.32635498 166.82083130]
[229.44595337 161.13450623]
[215.56555176 155.44818115]
[200.85510254 157.78321838]
[191.01809692 145.39193726]
[177.13769531 139.70561218]
[163.25727844 134.01928711]
[149.37687683 128.33296204]
[135.49647522 122.64663696]
[128.49133301 131.00183105]
[119.57569122 137.27816772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[27 39]
[28 38]
[29 37]
[53 63]
[54 62]
[55 61]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[72 92]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
