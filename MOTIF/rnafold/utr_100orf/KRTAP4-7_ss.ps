%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCAGCUCCUGUUGUGGCUCCGUGUGCUCUGACCAGGGCUGCAGCCAAGACCUCUGUCAGGAGACCUGCUGCCGCCCCAGCUGCUGUCAGACCACCU\
) } def
/len { sequence length } bind def

/coor [
[127.85585785 396.31838989]
[137.35209656 383.38775635]
[136.41955566 368.41677856]
[135.48701477 353.44580078]
[134.55447388 338.47482300]
[133.62191772 323.50381470]
[131.76043701 308.61978149]
[128.97723389 293.88024902]
[126.19400787 279.14071655]
[113.78418732 270.98400879]
[110.75164032 256.07568359]
[119.39128113 243.11442566]
[116.60807037 228.37489319]
[113.82485199 213.63536072]
[101.41502380 205.47865295]
[98.38247681 190.57032776]
[107.02212524 177.60906982]
[104.23890686 162.86953735]
[101.45569611 148.13000488]
[98.67247772 133.39048767]
[95.88925934 118.65095520]
[83.97994995 110.39779663]
[81.29145050 96.15988922]
[89.37120819 84.13226318]
[86.58799744 69.39273071]
[76.42446136 57.26783752]
[81.66588593 43.32593155]
[78.88266754 28.58640289]
[66.11157227 19.66806221]
[63.49896622 4.68043613]
[72.07994080 -7.43989325]
[69.29673004 -22.17942238]
[66.51351166 -36.91894913]
[63.73029709 -51.65847778]
[60.94707870 -66.39801025]
[58.16386414 -81.13753510]
[45.39276505 -90.05587769]
[42.78015900 -105.04350281]
[51.36113739 -117.16383362]
[48.57791901 -131.90336609]
[45.79470444 -146.64289856]
[42.78259659 -161.33735657]
[39.54233170 -175.98320007]
[25.59206009 -183.04888916]
[19.49484062 -197.44880676]
[24.12959290 -212.38377380]
[37.30792999 -220.80194092]
[52.80744171 -218.72850037]
[63.30973434 -207.14248657]
[63.85594559 -191.51443481]
[54.18817139 -179.22346497]
[57.42844009 -164.57762146]
[62.02782822 -158.62185669]
[60.53423309 -149.42610168]
[63.31744766 -134.68658447]
[66.10066223 -119.94705200]
[78.51049042 -111.79034424]
[81.54303741 -96.88201141]
[72.90338898 -83.92075348]
[75.68660736 -69.18122101]
[78.46982574 -54.44169617]
[81.25304413 -39.70216751]
[84.03625488 -24.96263885]
[86.81947327 -10.22311020]
[99.22929382 -2.06640410]
[102.26184845 12.84192657]
[93.62220001 25.80318642]
[96.40541840 40.54271698]
[106.36987305 51.61334229]
[101.32752228 66.60951996]
[104.11074066 81.34904480]
[116.02005005 89.60220337]
[118.70854950 103.84011078]
[110.62879181 115.86773682]
[113.41200256 130.60726929]
[116.19522095 145.34680176]
[118.97843933 160.08631897]
[121.76165771 174.82585144]
[134.53274536 183.74418640]
[137.14535522 198.73182678]
[128.56437683 210.85214233]
[131.34759521 225.59167480]
[134.13081360 240.33120728]
[146.90191650 249.24954224]
[149.51451111 264.23718262]
[140.93353271 276.35751343]
[143.71675110 291.09704590]
[146.49996948 305.83654785]
[149.75473022 309.30599976]
[151.44438171 313.25659180]
[151.62081909 317.09634399]
[150.53625488 320.32012939]
[148.59291077 322.57128906]
[149.52545166 337.54226685]
[150.45799255 352.51324463]
[151.39054871 367.48422241]
[152.32308960 382.45523071]
[163.35060120 394.10739136]
[160.97349548 409.97338867]
[147.01528931 417.88211060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[7 88]
[8 87]
[9 86]
[12 83]
[13 82]
[14 81]
[17 78]
[18 77]
[19 76]
[20 75]
[21 74]
[24 71]
[25 70]
[27 68]
[28 67]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[39 56]
[40 55]
[41 54]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
