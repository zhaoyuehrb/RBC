%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACAGCUGCCUGGUAGGUGACUGGAGGCCUUGAUUGGUUCUCAUUGAGAUUUUGCUGCUGUGACCCCAACCCUGCCUCCCUCCCCACCCUGCGAUGGCAGAAGAAACUCAACACAACAAAUUGGCUGCAGCCAAGAAAAAGUUAAAAGAAUAUUGGCAGAAAAACAGCCCUAGAGUUCCAGCAGGAGCGAACA\
) } def
/len { sequence length } bind def

/coor [
[35.21144867 189.72369385]
[23.59615135 180.06466675]
[13.40446854 168.91380310]
[4.82629871 156.47888184]
[-1.97852254 142.99162292]
[-6.88320303 128.70329285]
[-9.79635525 113.88014984]
[-10.66369915 98.79837799]
[-9.46907330 83.73899841]
[-24.12280083 80.53458405]
[-38.77652740 77.33016968]
[-53.43025589 74.12575531]
[-68.08398438 70.92134094]
[-82.62889099 80.63071442]
[-99.36753082 76.89591217]
[-108.05632782 62.50256348]
[-122.75929260 59.53223419]
[-137.46224976 56.56190109]
[-152.16522217 53.59157181]
[-166.86817932 50.62123871]
[-181.59436035 47.76823807]
[-196.34281921 45.03274536]
[-209.10816956 57.89576340]
[-226.88238525 60.50709152]
[-242.53189087 52.00916290]
[-249.88983154 35.96512604]
[-264.71801758 33.70133591]
[-279.54620361 31.43754578]
[-294.37442017 29.17375755]
[-309.20260620 26.90996933]
[-324.03079224 24.64617920]
[-332.19894409 36.00928497]
[-344.40902710 42.71033096]
[-358.24890137 43.49057388]
[-371.01232910 38.25458527]
[-380.22814941 28.07777023]
[-384.13870239 14.98605061]
[-398.92892456 12.48609161]
[-413.71911621 9.98613262]
[-428.50933838 7.48617411]
[-438.52224731 16.50519562]
[-451.70938110 18.08385849]
[-463.22552490 11.86796570]
[-468.96917725 0.32616568]
[-483.71762085 -2.40932727]
[-498.46609497 -5.14482021]
[-513.21453857 -7.88031292]
[-527.44244385 2.28794026]
[-544.29168701 -0.91118026]
[-553.43505859 -15.02013397]
[-568.22521973 -17.52009201]
[-580.95996094 -8.16046524]
[-596.57019043 -10.62956715]
[-605.79461670 -23.46252441]
[-603.16064453 -39.04576874]
[-590.23089600 -48.13404083]
[-574.67633057 -45.33543015]
[-565.72528076 -32.31029892]
[-550.93505859 -29.81034088]
[-541.57458496 -38.67507553]
[-528.62359619 -40.55439758]
[-516.78234863 -34.53968430]
[-510.47906494 -22.62877274]
[-495.73059082 -19.89328003]
[-480.98214722 -17.15778732]
[-466.23367310 -14.42229462]
[-452.79824829 -24.52936935]
[-435.87588501 -21.74279404]
[-426.00936890 -7.30403233]
[-411.21917725 -4.80407333]
[-396.42895508 -2.30411458]
[-381.63876343 0.19584419]
[-371.65222168 -12.50101376]
[-356.53952026 -18.46654510]
[-340.38754272 -15.98576355]
[-327.61578369 -5.64172554]
[-321.76699829 9.81798840]
[-306.93881226 12.08177757]
[-292.11062622 14.34556580]
[-277.28244019 16.60935593]
[-262.45422363 18.87314415]
[-247.62605286 21.13693237]
[-240.45498657 11.32538414]
[-229.72721863 5.46310806]
[-217.45254517 4.71840334]
[-205.96054077 9.29417038]
[-197.45845032 18.37769318]
[-193.60733032 30.28428268]
[-178.85887146 33.01977539]
[-171.70059204 31.14634514]
[-163.89784241 35.91827393]
[-149.19488525 38.88860703]
[-134.49192810 41.85894012]
[-119.78895569 44.82926941]
[-105.08599854 47.79960251]
[-95.44757080 39.23786926]
[-82.44325256 37.77249908]
[-70.79981232 44.16175461]
[-64.87957001 56.26761627]
[-50.22584152 59.47203064]
[-35.57211304 62.67644501]
[-20.91838646 65.88085938]
[-6.26465940 69.08527374]
[-1.66599023 56.27444077]
[4.47050762 44.12501144]
[12.05201149 32.82076645]
[20.96384239 22.53269005]
[31.07119560 13.41640949]
[42.22118759 5.60981560]
[54.24515533 -0.76900542]
[66.96122742 -5.62356567]
[80.17704773 -8.88043404]
[93.69271851 -10.49034595]
[107.30380249 -10.42894840]
[120.80439758 -8.69717216]
[133.99029541 -5.32121181]
[146.66206360 -0.35213232]
[158.62799072 6.13490200]
[169.70710754 14.04176617]
[179.73181152 23.24885941]
[188.55046082 33.61691284]
[196.02967834 44.98909378]
[202.05632019 57.19338608]
[206.53923035 70.04518890]
[209.41059875 83.35009003]
[210.62698364 96.90684509]
[225.61506653 97.50469971]
[240.60314941 98.10256195]
[255.59123230 98.70042419]
[270.57931519 99.29828644]
[285.42898560 83.33484650]
[306.94689941 83.53176880]
[321.12319946 99.34208679]
[336.11126709 98.74422455]
[351.09933472 98.14636993]
[366.08743286 97.54850769]
[381.07550049 96.95064545]
[385.15557861 82.38327789]
[393.53921509 69.79081726]
[405.40502930 60.40695190]
[419.59060669 55.15101242]
[434.70614624 54.53792191]
[449.27078247 58.62774658]
[461.85760498 67.01980591]
[471.23352051 78.89193726]
[476.47994995 93.08102417]
[477.08291626 108.19696045]
[472.98333740 122.75885010]
[464.58285522 135.34005737]
[452.70443726 144.70802307]
[438.51184082 149.94494629]
[423.39550781 150.53778076]
[408.83636475 146.42843628]
[396.26077271 138.01951599]
[386.90078735 126.13482666]
[381.67337036 111.93872833]
[366.68530273 112.53659058]
[351.69720459 113.13444519]
[336.70913696 113.73230743]
[321.72103882 114.33016968]
[318.34030151 122.28701782]
[312.52526855 128.74299622]
[304.88784790 132.97645569]
[296.24572754 134.50180054]
[287.53463745 133.12516785]
[279.70718384 128.96844482]
[273.62869263 122.45909882]
[269.98144531 114.28636169]
[254.99337769 113.68850708]
[240.00529480 113.09064484]
[225.01721191 112.49278259]
[210.02912903 111.89492035]
[206.54809570 129.92326355]
[200.13418579 147.12792969]
[190.96397400 163.03533936]
[179.28985596 177.20762634]
[165.43318176 189.25466919]
[149.77539062 198.84487915]
[155.59841919 212.66848755]
[161.42143250 226.49211121]
[167.24446106 240.31571960]
[173.06748962 254.13934326]
[186.45697021 263.60791016]
[184.68246460 279.91076660]
[169.56942749 286.27694702]
[156.66485596 276.15744019]
[159.24386597 259.96237183]
[153.42083740 246.13874817]
[147.59782410 232.31512451]
[141.77479553 218.49151611]
[135.95176697 204.66789246]
[121.36278534 208.58880615]
[106.37575531 210.48641968]
[91.26992035 210.32534790]
[76.32675934 208.10862732]
[61.82468796 203.87754822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 103]
[10 102]
[11 101]
[12 100]
[13 99]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 89]
[22 88]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[37 72]
[38 71]
[39 70]
[40 69]
[44 66]
[45 65]
[46 64]
[47 63]
[50 59]
[51 58]
[126 172]
[127 171]
[128 170]
[129 169]
[130 168]
[133 160]
[134 159]
[135 158]
[136 157]
[137 156]
[178 191]
[179 190]
[180 189]
[181 188]
[182 187]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
