%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGCCCGGGAGGGUAUAAGUGCGGCCCGCGCCCCUCCGAGCGGCGCGCUGGGUUCCGGAGCGAUGGCCACAGCCGAGUCCCGUGCGCUCCAGUUUGCCGAGGGCGCCGCGUUUCCAGCGUACCGGGCCCCCCACGCCGGCGGGGCGCUCCUGCCGCCCCCGA\
) } def
/len { sequence length } bind def

/coor [
[43.37544632 438.51086426]
[33.82432938 445.13589478]
[22.96849060 449.25775146]
[11.45081043 450.63845825]
[-0.04811468 449.20223999]
[-5.88716650 463.01910400]
[-11.72621822 476.83593750]
[-17.56526947 490.65280151]
[-15.00504875 506.85086060]
[-27.92135239 516.95538330]
[-43.02699280 510.57168579]
[-44.78258514 494.26678467]
[-31.38212395 484.81375122]
[-25.54307175 470.99688721]
[-19.70402145 457.18005371]
[-13.86496925 443.36318970]
[-27.42407608 430.76818848]
[-35.18435669 413.93179321]
[-35.95586395 395.37655640]
[-29.59783173 377.89297485]
[-17.04354668 364.11981201]
[-0.16345526 356.14581299]
[18.51349258 355.19296265]
[23.01272774 340.88363647]
[27.51196480 326.57431030]
[32.01119995 312.26498413]
[36.51043701 297.95565796]
[27.07368851 282.30764771]
[32.11349487 264.41232300]
[48.89402771 255.69528198]
[52.84523773 241.22503662]
[56.79644394 226.75479126]
[60.74765396 212.28454590]
[64.69886017 197.81430054]
[68.65007019 183.34405518]
[72.60128021 168.87380981]
[68.48977661 154.55792236]
[79.58897400 143.28324890]
[83.54018402 128.81300354]
[87.49139404 114.34275055]
[79.78451538 99.67220306]
[86.46129608 83.42023468]
[83.06385040 68.81005096]
[79.66639709 54.19987488]
[76.26894379 39.58969498]
[72.87149048 24.97951698]
[69.47404480 10.36933899]
[66.07659149 -4.24083996]
[55.41467285 -15.92989826]
[60.06821060 -30.07888603]
[56.67075729 -44.68906403]
[46.00884247 -56.37812424]
[50.66237640 -70.52711487]
[47.26492691 -85.13729095]
[43.86747360 -99.74746704]
[26.99023628 -106.27084351]
[17.46084023 -121.46759796]
[18.91363144 -139.18888855]
[30.58337975 -152.39590454]
[26.63217163 -166.86614990]
[22.68096352 -181.33639526]
[18.72975349 -195.80664062]
[14.77854633 -210.27688599]
[10.82733727 -224.74713135]
[6.73855400 -239.17910767]
[2.51256561 -253.57148743]
[-1.71342278 -267.96389771]
[-5.93941116 -282.35629272]
[-16.88695526 -289.23229980]
[-20.09397507 -301.34115601]
[-14.36353874 -312.02651978]
[-18.31474686 -326.49676514]
[-32.16167831 -334.11502075]
[-36.48570633 -349.31628418]
[-28.72146034 -363.08190918]
[-13.47533417 -367.24496460]
[0.20742022 -359.33563232]
[4.20906544 -344.04632568]
[-3.84450316 -330.44796753]
[0.10670533 -315.97772217]
[13.22173882 -304.34652710]
[8.45298386 -286.58227539]
[12.67897224 -272.18988037]
[16.90496063 -257.79748535]
[21.13094902 -243.40509033]
[26.05502701 -237.84791565]
[25.29758072 -228.69833374]
[29.24878883 -214.22808838]
[33.19999695 -199.75784302]
[37.15120697 -185.28759766]
[41.10241318 -170.81736755]
[45.05362320 -156.34712219]
[56.96754074 -153.76411438]
[66.69933319 -146.30255127]
[72.35246277 -135.33877563]
[72.79223633 -122.93881226]
[67.87297821 -111.46910858]
[58.47765350 -103.14492035]
[61.87510300 -88.53474426]
[65.27255249 -73.92456055]
[75.69146729 -63.28052139]
[71.28093719 -48.08651733]
[74.67839050 -33.47633743]
[85.09729767 -22.83229637]
[80.68676758 -7.63829136]
[84.08422089 6.97188759]
[87.48167419 21.58206558]
[90.87911987 36.19224548]
[94.27657318 50.80242538]
[97.67402649 65.41260529]
[101.07147980 80.02278137]
[101.47257233 65.02814484]
[110.96839142 53.41653442]
[125.58508301 50.04722595]
[139.20581055 56.33021545]
[146.13050842 69.63617706]
[143.46130371 84.39677429]
[132.31521606 94.43495178]
[117.35549164 95.54956055]
[132.11077881 98.24798584]
[146.86607361 100.94640350]
[161.62135315 103.64482880]
[166.62104797 101.85395813]
[171.32812500 102.15998077]
[174.98379517 104.09142303]
[177.13153076 106.94161987]
[191.70870972 110.47800446]
[206.28587341 114.01438904]
[223.10400391 111.87270355]
[229.81771851 127.44069672]
[216.71667480 138.20167542]
[202.74949646 128.59155273]
[188.17231750 125.05517578]
[173.59515381 121.51879120]
[158.92292786 118.40011597]
[144.16764832 115.70169067]
[129.41235352 113.00327301]
[114.65707397 110.30484772]
[101.96163940 118.29396057]
[98.01042938 132.76420593]
[94.05921936 147.23445129]
[97.88810730 162.58535767]
[87.07152557 172.82502747]
[83.12031555 187.29527283]
[79.16910553 201.76550293]
[75.21789551 216.23574829]
[71.26668549 230.70599365]
[67.31548309 245.17623901]
[63.36427307 259.64648438]
[71.18751526 268.66986084]
[73.63748932 280.23559570]
[70.21511078 291.42617798]
[61.88780975 299.47604370]
[50.81976700 302.45489502]
[46.32052994 316.76422119]
[41.82129288 331.07354736]
[37.32205582 345.38287354]
[32.82281876 359.69219971]
[42.58255768 366.17907715]
[50.48180008 374.81942749]
[56.05846405 385.09933472]
[58.98838043 396.40924072]
[59.10413361 408.08004761]
[56.40461349 419.42272949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[23 158]
[24 157]
[25 156]
[26 155]
[27 154]
[30 149]
[31 148]
[32 147]
[33 146]
[34 145]
[35 144]
[36 143]
[38 141]
[39 140]
[40 139]
[42 111]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
[48 105]
[50 103]
[51 102]
[53 100]
[54 99]
[55 98]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 85]
[66 84]
[67 83]
[68 82]
[71 80]
[72 79]
[119 138]
[120 137]
[121 136]
[122 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
