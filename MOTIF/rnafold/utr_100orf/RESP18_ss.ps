%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGUGGAUGUGGAAUUCGGAGUCGCGGGCUGGUGGGAAGCUGCAGCCCCGCUCAGCCCCUCGGCCGUGGCCGCUACCUUCACUGAGACUUGGCCGG\
) } def
/len { sequence length } bind def

/coor [
[128.77914429 399.28500366]
[128.78047180 384.14303589]
[133.70066833 369.82275391]
[143.00602722 357.87750244]
[155.68717957 349.60302734]
[151.99299622 335.06503296]
[148.29881287 320.52703857]
[144.60462952 305.98907471]
[140.91044617 291.45108032]
[137.21626282 276.91308594]
[133.52207947 262.37512207]
[122.88863373 251.94538879]
[126.98892975 236.66473389]
[123.29474640 222.12675476]
[119.60056305 207.58877563]
[115.90637970 193.05078125]
[102.02617645 187.71430969]
[93.85317230 175.07841492]
[94.69768524 159.87510681]
[104.44510651 147.94641113]
[100.75091553 133.40841675]
[97.05673218 118.87043762]
[84.65736389 111.37364960]
[81.08890533 97.33042145]
[88.40528107 84.82374573]
[84.71109772 70.28575897]
[81.01691437 55.74777603]
[77.32273102 41.20978928]
[64.17546844 28.43494987]
[69.37779999 11.75450420]
[65.23326874 -2.66155934]
[61.08874512 -17.07762337]
[56.94421768 -31.49368858]
[52.79969406 -45.90975189]
[48.65516663 -60.32581711]
[44.28694534 -74.67568207]
[39.69608688 -88.95587921]
[35.10522842 -103.23607635]
[30.51436996 -117.51627350]
[25.92351151 -131.79646301]
[21.08500290 -136.71662903]
[19.79412270 -142.48233032]
[21.52119637 -147.10920715]
[17.82701302 -161.64718628]
[6.00102234 -173.00843811]
[10.18933296 -188.86372375]
[26.08337021 -192.90249634]
[37.33271027 -180.97000122]
[32.36499786 -165.34136963]
[36.05918121 -150.80339050]
[40.20370865 -136.38732910]
[44.79456711 -122.10713196]
[49.38542557 -107.82693481]
[53.97628403 -93.54673767]
[58.56714249 -79.26654053]
[63.70147324 -73.76525879]
[63.07123184 -64.47034454]
[67.21575928 -50.05427933]
[71.36028290 -35.63821411]
[75.50480652 -21.22214890]
[79.64933777 -6.80608559]
[83.79386139 7.60997868]
[94.30191803 13.82276058]
[97.80265808 25.93760300]
[91.86071014 37.51560593]
[95.55489349 52.05359268]
[99.24908447 66.59157562]
[102.94326782 81.12956238]
[115.34263611 88.62635040]
[118.91109467 102.66957855]
[111.59471893 115.17625427]
[115.28890228 129.71423340]
[118.98308563 144.25222778]
[133.24269104 150.08061218]
[141.24259949 163.03648376]
[140.09324646 178.04125977]
[130.44436646 189.35659790]
[134.13854980 203.89459229]
[137.83273315 218.43257141]
[141.52691650 232.97055054]
[152.42459106 244.44013977]
[148.06005859 258.68093872]
[151.75424194 273.21890259]
[155.44842529 287.75689697]
[159.14260864 302.29489136]
[162.83679199 316.83285522]
[166.53097534 331.37084961]
[170.22515869 345.90884399]
[185.31813049 347.12576294]
[199.19720459 353.17971802]
[210.35685730 363.41403198]
[217.58657837 376.71853638]
[220.10215759 391.65005493]
[217.63070679 406.58895874]
[210.44032288 419.91476440]
[199.31097412 430.18200684]
[185.44985962 436.27694702]
[170.36054993 437.53845215]
[155.67980957 433.82971191]
[143.00010681 425.55300903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[13 80]
[14 79]
[15 78]
[16 77]
[20 73]
[21 72]
[22 71]
[25 68]
[26 67]
[27 66]
[28 65]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
