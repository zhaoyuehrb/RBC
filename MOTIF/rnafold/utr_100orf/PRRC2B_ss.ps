%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAUCGGGAGCGGUGCCGAGAAAAAUUUCCUUACUAGAUGACAUUUCAUCGCAAUGUCCGAUCGUUUGGGGCAAAUUACCAAGGGCAAGGAUGGGAAAAGCAAGUACUCGACUCUCAGCCUGUUUGAUAAGUAUAAAGGAAAAUCAGUAGACG\
) } def
/len { sequence length } bind def

/coor [
[248.56036377 321.84796143]
[240.03938293 309.50320435]
[231.51841736 297.15844727]
[222.99743652 284.81369019]
[208.12776184 284.63925171]
[196.06942749 275.63586426]
[191.57220459 261.08843994]
[196.56095886 246.51383972]
[188.03999329 234.16908264]
[179.51902771 221.82432556]
[170.99804688 209.47956848]
[162.47708130 197.13481140]
[153.83224487 184.87648010]
[145.06440735 172.70581055]
[136.17448425 160.62403870]
[127.16334534 148.63240051]
[118.15221405 136.64076233]
[109.14107513 124.64911652]
[90.14341736 133.36314392]
[65.30868530 125.89109802]
[52.47196960 133.65116882]
[39.63525009 141.41123962]
[26.79853058 149.17129517]
[19.36486244 163.78884888]
[2.97672081 164.38955688]
[-5.50717831 150.35546875]
[2.64067316 136.12365723]
[19.03846359 136.33457947]
[31.87518311 128.57450867]
[44.71190262 120.81444550]
[57.54862213 113.05438232]
[56.49485397 105.62877655]
[41.64364624 107.73631287]
[28.17056656 114.32995605]
[17.73624992 103.55382538]
[24.76059914 90.30020142]
[39.53610992 92.88510895]
[54.38731384 90.77757263]
[53.33354568 83.35197449]
[38.84466171 79.46968842]
[24.35577202 75.58740234]
[9.86688519 71.70511627]
[-4.62200260 67.82283020]
[-20.31369400 72.58757782]
[-32.09939194 61.18453598]
[-27.85498047 45.34417725]
[-11.94674683 41.36170197]
[-0.73971671 53.33394241]
[13.74917030 57.21622849]
[28.23805809 61.09851456]
[42.72694397 64.98079681]
[57.21583176 68.86308289]
[69.11613464 59.73166275]
[69.11613464 44.73166275]
[57.36841583 37.46003342]
[50.81293106 25.42148590]
[51.07474518 11.82474422]
[57.97787094 0.23382796]
[69.61954498 -6.36615515]
[69.92160034 -21.36311340]
[70.22366333 -36.36007309]
[62.76582336 -50.31325150]
[70.75784302 -62.88213730]
[71.05989838 -77.87909698]
[71.36195374 -92.87605286]
[71.21092224 -107.87529755]
[70.60693359 -122.86312866]
[70.00294495 -137.85096741]
[69.39895630 -152.83880615]
[58.06494904 -163.52421570]
[57.66592789 -178.73262024]
[67.92268372 -189.47200012]
[67.31869507 -204.45983887]
[54.83479309 -213.87716675]
[51.37530518 -229.12728882]
[58.57370377 -243.00953674]
[73.03112030 -248.96916199]
[87.92120361 -244.19221497]
[96.21331787 -230.93418884]
[93.99217224 -215.45515442]
[82.30653381 -205.06382751]
[82.91052246 -190.07598877]
[93.99818420 -180.19676208]
[94.82421875 -165.00556946]
[84.38678741 -153.44279480]
[84.99077606 -138.45495605]
[85.59476471 -123.46711731]
[86.19875336 -108.47928619]
[88.58303070 -105.80850220]
[89.76199341 -101.82941437]
[89.12565613 -97.13549042]
[86.35891724 -92.57399750]
[86.05686188 -77.57704163]
[85.75480652 -62.58008194]
[93.23424530 -49.69958496]
[85.22061920 -36.05801773]
[84.91856384 -21.06105804]
[84.61650848 -6.06409931]
[97.99667358 3.40090322]
[103.17018890 19.12709618]
[97.91853333 35.00213242]
[84.11613464 44.73166275]
[84.11613464 59.73166275]
[117.55545807 66.72538757]
[131.15635681 92.89767456]
[121.13272095 115.63798523]
[130.14385986 127.62963104]
[139.15498352 139.62126160]
[148.16612244 151.61291504]
[155.86920166 156.63058472]
[157.23507690 163.93798828]
[166.00291443 176.10864258]
[173.60337830 181.28042603]
[174.82183838 188.61384583]
[183.34280396 200.95860291]
[191.86378479 213.30335999]
[200.38475037 225.64811707]
[208.90573120 237.99287415]
[224.30223083 238.49652100]
[236.30960083 247.86009216]
[240.45196533 262.32745361]
[235.34219360 276.29272461]
[243.86317444 288.63748169]
[252.38414001 300.98223877]
[260.90512085 313.32699585]
[274.68026733 307.27377319]
[289.35214233 303.93716431]
[304.39031982 303.43777466]
[319.25122070 305.79367065]
[333.39761353 310.91970825]
[346.31811523 318.63055420]
[357.54565430 328.64749146]
[366.67437744 340.60836792]
[373.37426758 354.08087158]
[377.40313721 368.57794189]
[378.61535645 383.57550049]
[376.96707153 398.53143311]
[372.51791382 412.90505981]
[365.42868042 426.17681885]
[355.95565796 437.86691284]
[344.44128418 447.55276489]
[331.30181885 454.88421631]
[317.01220703 459.59628296]
[302.08901978 461.51861572]
[287.07174683 460.58169556]
[272.50323486 456.81939697]
[258.91009521 450.36776733]
[246.78378296 441.45996094]
[236.56260681 430.41806030]
[228.61605835 417.64114380]
[223.23141479 403.59115601]
[220.60331726 388.77600098]
[220.82678223 373.73117065]
[223.89370728 359.00057983]
[229.69325256 345.11669922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 112]
[14 111]
[15 109]
[16 108]
[17 107]
[18 106]
[20 31]
[21 30]
[22 29]
[23 28]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[53 103]
[54 102]
[59 98]
[60 97]
[61 96]
[63 94]
[64 93]
[65 92]
[66 88]
[67 87]
[68 86]
[69 85]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
