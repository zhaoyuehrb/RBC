%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:59:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCUGCGCCUGCGCGCAAGAGAGGCGGGGCCAGCGCUCGGCAUGGCGGAGCCAGAUCUGGAGUGCGAGCAGAUCCGUCUGAAGUGUAUUCGUAAGGAGGGCUUCUUCACGGUGCCUCCGGAACACAGGCUGGGACGAUGCC\
) } def
/len { sequence length } bind def

/coor [
[8.95490456 186.59533691]
[-2.32269239 196.48553467]
[-13.60028934 206.37571716]
[-18.03323364 214.45095825]
[-25.23347092 216.35537720]
[-36.72414017 225.99717712]
[-48.21480560 235.63899231]
[-52.82285309 243.61561584]
[-60.06292343 245.36250305]
[-71.76119232 254.75134277]
[-83.45945740 264.14019775]
[-95.15772247 273.52905273]
[-99.93869019 281.40325928]
[-107.21514130 282.99176025]
[-119.11544037 292.12319946]
[-131.01574707 301.25460815]
[-129.62968445 316.61959839]
[-136.79084778 330.28417969]
[-150.21411133 337.88809204]
[-165.61618042 337.00494385]
[-178.08229065 327.91650391]
[-183.63456726 313.52291870]
[-180.50129700 298.41708374]
[-169.68228149 287.41921997]
[-154.62985229 284.03875732]
[-140.14717102 289.35430908]
[-128.24685669 280.22290039]
[-116.34656525 271.09146118]
[-104.54657745 261.83078003]
[-92.84831238 252.44194031]
[-81.15003967 243.05308533]
[-69.45177460 233.66423035]
[-57.85662079 224.14833069]
[-46.36595154 214.50651550]
[-34.87528610 204.86470032]
[-23.49047661 195.09811401]
[-12.21287918 185.20793152]
[-0.93528247 175.31774902]
[0.18610895 163.22569275]
[9.56700039 154.89533997]
[22.51025391 155.23106384]
[34.00091934 145.58924866]
[45.49158859 135.94743347]
[56.98225403 126.30561829]
[68.47292328 116.66380310]
[64.36422729 101.31560516]
[67.33002472 85.70622253]
[76.78154755 72.93447876]
[90.84244537 65.53584290]
[106.72132874 64.97911072]
[121.26586914 71.37480164]
[132.54347229 61.48461533]
[143.82106018 51.59442902]
[155.09866333 41.70424271]
[152.87409973 23.77298737]
[161.72998047 8.20284367]
[177.99267578 1.07493246]
[195.13911438 5.04439020]
[205.97457886 -5.32830524]
[216.81004333 -15.70100117]
[227.64549255 -26.07369804]
[238.48095703 -36.44639206]
[249.31642151 -46.81908798]
[260.15188599 -57.19178391]
[264.22836304 -65.45270538]
[271.33868408 -67.66937256]
[282.39782715 -77.80322266]
[293.45700073 -87.93707275]
[278.49978638 -89.06913757]
[267.64221191 -99.41868591]
[265.79522705 -114.30454254]
[273.79428101 -126.99372864]
[288.02130127 -131.74682617]
[302.04132080 -126.41399384]
[309.51296997 -113.40728760]
[307.05728149 -98.61064911]
[319.52932739 -106.94419861]
[332.00137329 -115.27775574]
[344.47341919 -123.61130524]
[347.54415894 -140.79626465]
[361.79217529 -150.28845215]
[378.17630005 -146.64842224]
[390.46359253 -155.25207520]
[402.75085449 -163.85572815]
[415.03814697 -172.45936584]
[427.32543945 -181.06301880]
[428.13327026 -194.55313110]
[436.46096802 -204.94793701]
[449.07501221 -208.57145691]
[461.28149414 -204.30960083]
[473.75354004 -212.64315796]
[486.22558594 -220.97671509]
[492.98953247 -235.91596985]
[509.33361816 -237.25837708]
[518.44451904 -223.62298584]
[510.94967651 -209.03671265]
[494.55914307 -208.50466919]
[482.08709717 -200.17111206]
[469.61505127 -191.83757019]
[467.06936646 -175.24813843]
[453.05853271 -165.40921021]
[435.92907715 -168.77572632]
[423.64178467 -160.17208862]
[411.35452271 -151.56843567]
[399.06723022 -142.96479797]
[386.77993774 -134.36114502]
[386.32791138 -121.43992615]
[378.37896729 -110.99684143]
[365.67266846 -107.00285339]
[352.80697632 -111.13926697]
[340.33493042 -102.80570984]
[327.86288452 -94.47216034]
[315.39083862 -86.13860321]
[303.59085083 -76.87791443]
[292.53167725 -66.74406433]
[281.47253418 -56.61021042]
[270.52456665 -46.35632706]
[259.68911743 -35.98363113]
[248.85365295 -25.61093330]
[238.01818848 -15.23823738]
[227.18273926 -4.86554193]
[216.34727478 5.50715399]
[205.51181030 15.87984943]
[208.92721558 27.61772919]
[206.98699951 39.76085281]
[200.00225830 49.96970749]
[189.26193237 56.25068665]
[176.79533386 57.34529877]
[164.98884583 52.98183823]
[153.71125793 62.87202454]
[142.43365479 72.76221466]
[131.15605164 82.65239716]
[135.41760254 95.84881592]
[134.32305908 109.67301178]
[128.03793335 122.03437805]
[117.51270294 131.06355286]
[104.33908844 135.39508057]
[90.50928497 134.37390137]
[78.11473846 128.15447998]
[66.62406921 137.79627991]
[55.13339996 147.43809509]
[43.64273453 157.07991028]
[32.15206909 166.72172546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[5 35]
[6 34]
[7 33]
[9 32]
[10 31]
[11 30]
[12 29]
[14 28]
[15 27]
[16 26]
[41 143]
[42 142]
[43 141]
[44 140]
[45 139]
[51 132]
[52 131]
[53 130]
[54 129]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
[63 118]
[64 117]
[66 116]
[67 115]
[68 114]
[76 113]
[77 112]
[78 111]
[79 110]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
