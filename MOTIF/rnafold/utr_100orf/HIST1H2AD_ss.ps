%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUACAUUUUUGUCUUCAUUGCUUAACAUCGUUUUUAAGAAUUCAAAAUGUCCGGACGCGGCAAGCAAGGCGGAAAGGCCCGAGCUAAGGCUAAGACCCGCUCUUCGCGGGCCGGACUCCAGUUCCCUGUGGGCCGCGUACACCGCU\
) } def
/len { sequence length } bind def

/coor [
[-224.11372375 346.32348633]
[-235.98706055 355.48995972]
[-250.89263916 357.17031860]
[-264.50878906 350.87744141]
[-272.88766479 338.43579102]
[-273.59997559 323.45272827]
[-266.44082642 310.27410889]
[-280.76342773 314.73089600]
[-295.08602905 319.18771362]
[-309.40863037 323.64453125]
[-323.73123169 328.10134888]
[-338.05383301 332.55816650]
[-352.37643433 337.01498413]
[-360.48101807 354.08291626]
[-378.16452026 359.77426147]
[-394.14682007 350.94454956]
[-408.27160645 355.99331665]
[-422.39642334 361.04208374]
[-436.52124023 366.09082031]
[-439.36520386 381.11944580]
[-449.28424072 392.63070679]
[-463.53860474 397.59851074]
[-478.26715088 394.78326416]
[-489.53311157 385.03936768]
[-503.65792847 390.08810425]
[-507.89175415 405.01641846]
[-520.11236572 414.57861328]
[-535.62078857 415.09780884]
[-548.45361328 406.37438965]
[-553.67639160 391.76269531]
[-549.28088379 376.88119507]
[-536.95721436 367.45214844]
[-521.44415283 367.10119629]
[-508.70669556 375.96331787]
[-494.58187866 370.91455078]
[-492.04510498 356.23699951]
[-482.43826294 344.72332764]
[-468.26455688 339.52981567]
[-453.29605103 342.14532471]
[-441.56997681 351.96603394]
[-427.44519043 346.91726685]
[-413.32037354 341.86853027]
[-399.19558716 336.81976318]
[-396.63858032 325.62368774]
[-388.89245605 316.98275757]
[-377.81408691 313.14303589]
[-366.14501953 315.17816162]
[-356.83322144 322.69238281]
[-342.51065063 318.23556519]
[-328.18804932 313.77874756]
[-313.86544800 309.32192993]
[-299.54284668 304.86514282]
[-285.22024536 300.40832520]
[-270.89764404 295.95150757]
[-264.02172852 288.18853760]
[-252.35511780 288.43988037]
[-238.96882629 281.67175293]
[-225.58255005 274.90365601]
[-212.41397095 267.72113037]
[-199.47590637 260.13122559]
[-186.53785706 252.54132080]
[-173.59979248 244.95141602]
[-160.66174316 237.36149597]
[-147.72367859 229.77159119]
[-134.78562927 222.18168640]
[-131.29069519 207.74835205]
[-118.27779388 199.86680603]
[-103.16248322 203.63046265]
[-90.22442627 196.04055786]
[-77.28636932 188.45065308]
[-73.08122253 182.31367493]
[-63.99925995 180.84063721]
[-50.90610504 173.52153015]
[-46.57419205 167.47337341]
[-37.46355057 166.18959045]
[-24.22096634 159.14445496]
[-10.97838116 152.09931946]
[-6.88607454 137.82386780]
[6.44342995 130.49044800]
[21.38909340 134.87963867]
[34.63167953 127.83449554]
[43.56888962 110.73023224]
[63.66749191 111.56350708]
[76.60555267 103.97360229]
[89.54360199 96.38368988]
[100.63491821 86.28504181]
[109.40113068 74.11320496]
[118.16733551 61.94136810]
[119.27438354 45.57963181]
[134.11474609 38.60140610]
[147.42193604 48.18529510]
[145.50665283 64.47221375]
[130.33917236 70.70757294]
[121.57296753 82.87940979]
[112.80675507 95.05124664]
[117.06230164 101.22703552]
[129.41401672 92.71614838]
[137.92469788 105.06800842]
[125.57339478 113.57860565]
[129.82893372 119.75439453]
[144.32453918 115.89723206]
[158.82012939 112.04007721]
[173.31573486 108.18291473]
[187.81132507 104.32575989]
[197.06852722 91.22294617]
[213.09222412 90.43493652]
[223.59039307 102.56622314]
[220.50973511 118.31071472]
[206.21348572 125.59059143]
[191.66848755 118.82135773]
[177.17288208 122.67851257]
[162.67729187 126.53567505]
[148.18170166 130.39283752]
[133.68609619 134.24998474]
[106.85142517 128.07212830]
[97.13351440 109.32174683]
[84.19545746 116.91165924]
[71.25740051 124.50156403]
[69.10561371 135.24656677]
[61.52470016 142.85139465]
[51.21839142 144.94880676]
[41.67681503 141.07708740]
[28.43422890 148.12222290]
[23.72237778 162.96931458]
[10.19215202 169.92543030]
[-3.93324590 165.34190369]
[-17.17583084 172.38703918]
[-30.41841698 179.43217468]
[-43.58699799 186.61468506]
[-56.68015289 193.93379211]
[-69.69646454 201.38870239]
[-82.63452148 208.97860718]
[-95.57257843 216.56851196]
[-99.66272736 231.59877014]
[-112.89188385 239.11170959]
[-127.19571686 235.11973572]
[-140.13377380 242.70965576]
[-153.07183838 250.29956055]
[-166.00988770 257.88946533]
[-178.94793701 265.47937012]
[-191.88600159 273.06927490]
[-204.82405090 280.65917969]
[-207.45915222 285.31491089]
[-211.25596619 288.16738892]
[-215.31477356 289.07723999]
[-218.81443787 288.28991699]
[-232.20071411 295.05804443]
[-245.58700562 301.82617188]
[-231.27215576 306.30780029]
[-221.35656738 317.56304932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[16 43]
[17 42]
[18 41]
[19 40]
[24 35]
[25 34]
[56 148]
[57 147]
[58 146]
[59 142]
[60 141]
[61 140]
[62 139]
[63 138]
[64 137]
[65 136]
[68 133]
[69 132]
[70 131]
[72 130]
[73 129]
[75 128]
[76 127]
[77 126]
[80 123]
[81 122]
[83 118]
[84 117]
[85 116]
[86 95]
[87 94]
[88 93]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
