%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUAAUAAAAUGUAUGCUAUAUAUAUAAAGAAUCUUAAUUAUUUUUCUUUCCUCAUAGUUCAGUGUCUUCAACCAACCAUGGCAAUAUUCAAUAACA\
) } def
/len { sequence length } bind def

/coor [
[75.37194824 401.02029419]
[60.33214569 399.61276245]
[46.29861832 394.02377319]
[34.40900040 384.70639038]
[25.62712669 372.41595459]
[20.66490746 358.14874268]
[19.92460442 343.06137085]
[23.46623230 328.37689209]
[31.00268745 315.28573608]
[41.92302322 304.84912109]
[55.34197617 297.91311646]
[70.17173004 295.03994751]
[71.56941986 280.10522461]
[72.96710968 265.17047119]
[74.36479950 250.23573303]
[75.76248932 235.30099487]
[73.20661926 228.22335815]
[77.44296265 219.92601013]
[79.30444336 205.04196167]
[81.16592407 190.15791321]
[83.02740479 175.27386475]
[84.88888550 160.38981628]
[86.75036621 145.50576782]
[72.13372040 138.33793640]
[60.80476379 126.64696503]
[54.10010147 111.81214905]
[52.81076431 95.58372498]
[57.08886337 79.87634277]
[66.42966461 66.54315948]
[79.73113251 57.15726089]
[95.42394257 52.82599258]
[96.35648346 37.85500717]
[97.28903198 22.88402367]
[98.22157288 7.91303873]
[88.04023743 -3.87586045]
[89.19923401 -19.04528236]
[100.50089264 -28.67897987]
[101.43344116 -43.64996338]
[94.56906128 -57.90446472]
[103.08264160 -70.12609100]
[104.01518250 -85.09707642]
[104.94773102 -100.06806183]
[105.88027191 -115.03904724]
[106.81282043 -130.01002502]
[107.74536133 -144.98101807]
[94.40696716 -152.40057373]
[85.61572266 -164.87762451]
[83.11715698 -179.93484497]
[87.40734100 -194.58261108]
[97.63447571 -205.91259766]
[111.76794434 -211.67523193]
[127.00153351 -210.72631836]
[140.31060791 -203.25430298]
[149.05264282 -190.74272156]
[151.49189758 -175.67578125]
[147.14405823 -161.04501343]
[136.87239075 -149.75540161]
[122.71634674 -144.04846191]
[121.78380585 -129.07748413]
[120.85125732 -114.10649872]
[119.91871643 -99.13551331]
[118.98616791 -84.16453552]
[118.05362701 -69.19355011]
[124.98471069 -56.00987244]
[116.40442657 -42.71741867]
[115.47187805 -27.74643517]
[125.49064636 -16.78468513]
[124.75817871 -1.58869493]
[113.19255829 8.84558392]
[112.26000977 23.81656837]
[111.32746887 38.78755188]
[110.39492035 53.75853348]
[123.12574005 58.62938690]
[133.94378662 66.92210388]
[141.95423889 77.95076752]
[146.49458313 90.80317688]
[147.18923950 104.41627502]
[143.98075867 117.66409302]
[137.13453674 129.45086670]
[127.21682739 138.80169678]
[115.04794312 144.94314575]
[101.63441467 147.36724854]
[99.77293396 162.25129700]
[97.91145325 177.13534546]
[96.04997253 192.01939392]
[94.18849182 206.90344238]
[92.32701111 221.78749084]
[90.69722748 236.69868469]
[89.29953766 251.63342285]
[87.90184784 266.56817627]
[86.50416565 281.50289917]
[85.10647583 296.43765259]
[99.14560699 302.01254272]
[111.04457855 311.31796265]
[119.83879852 323.59960938]
[124.81534576 337.86181641]
[125.57080841 352.94842529]
[122.04393005 367.63644409]
[114.52062988 380.73516846]
[103.61078644 391.18273926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[31 72]
[32 71]
[33 70]
[34 69]
[37 66]
[38 65]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
