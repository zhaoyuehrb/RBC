%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGGCCUGGCGCGCGCGCGGGCGGGAGCGGAGGGCAACGGGGCGGCGCGGGCGGCCGGGCGCAGGGUCGCGGGAGGUGACGCGCGGCGAGGAUGGCGGCGCGGGGCCGGGGGCUGCUGCUGCUGACGCUGUCGGUGCUGUUGGCGGCGGGCCCCUCCGCCGCUGCGGCCAAGCUCAACAUCCCCAAAGUGC\
) } def
/len { sequence length } bind def

/coor [
[77.16068268 134.86401367]
[84.23808289 121.63864899]
[94.82772827 111.00965881]
[81.34345245 117.58037567]
[67.85917664 124.15109253]
[54.42854691 130.83076477]
[41.05243683 137.61897278]
[27.67633057 144.40718079]
[14.30022240 151.19538879]
[0.92411393 157.98359680]
[-12.45199394 164.77178955]
[-25.82810211 171.55999756]
[-32.07555389 178.24385071]
[-39.47622299 178.34785461]
[-52.96050262 184.91856384]
[-66.44477844 191.48927307]
[-75.46115875 204.48986816]
[-90.29167175 203.10955811]
[-103.77594757 209.68028259]
[-117.26022339 216.25099182]
[-130.74449158 222.82171631]
[-135.68357849 234.74684143]
[-147.06146240 239.93870544]
[-158.54464722 236.10736084]
[-172.13356018 242.45886230]
[-173.73960876 256.15679932]
[-181.84304810 267.18276978]
[-194.23883057 272.71725464]
[-207.64222717 271.41088867]
[-218.55902100 263.71179199]
[-232.24899292 269.84243774]
[-235.31050110 285.05450439]
[-246.75149536 295.53701782]
[-262.17269897 297.25921631]
[-275.64434814 289.55892944]
[-281.98629761 275.39703369]
[-278.75994873 260.21908569]
[-267.20590210 249.86129761]
[-251.76693726 248.30647278]
[-238.37962341 256.15243530]
[-224.68965149 250.02182007]
[-221.83172607 233.86337280]
[-209.78858948 222.47454834]
[-193.16596985 220.48323059]
[-178.48506165 228.86994934]
[-164.89614868 222.51844788]
[-155.64202881 207.61491394]
[-137.31521606 209.33743286]
[-123.83094025 202.76672363]
[-110.34665680 196.19599915]
[-96.86238098 189.62528992]
[-88.81048584 177.09468079]
[-73.01549530 178.00500488]
[-59.53121567 171.43428040]
[-46.04693985 164.86357117]
[-32.61630630 158.18389893]
[-19.24020004 151.39569092]
[-5.86409140 144.60748291]
[7.51201677 137.81927490]
[20.88812447 131.03106689]
[34.26423264 124.24286652]
[47.64033890 117.45465851]
[52.18879318 111.61579895]
[61.28846359 110.66681671]
[74.77274323 104.09609985]
[88.25701904 97.52538300]
[85.37530518 95.13791656]
[82.92427063 92.08109283]
[74.46492004 79.69403076]
[66.00556183 67.30696869]
[57.54620743 54.91991043]
[49.08685303 42.53284836]
[40.62749481 30.14578629]
[25.31870651 31.38536072]
[11.44800282 24.78997231]
[2.74653387 12.13374805]
[1.55495107 -3.17885160]
[8.19378471 -17.02881432]
[20.87722206 -25.69056892]
[36.19348145 -26.83414841]
[50.02256393 -20.15193558]
[58.64452362 -7.44141006]
[59.74008560 7.87835836]
[53.01455688 21.68642998]
[61.47391510 34.07349396]
[69.93326569 46.46055222]
[78.39262390 58.84761429]
[86.85198212 71.23468018]
[95.31133270 83.62174225]
[109.67859650 87.93240356]
[123.55991364 82.24830627]
[137.44123840 76.56420898]
[143.61567688 62.26336670]
[157.77427673 56.69662476]
[171.36988831 62.67115021]
[185.25122070 56.98704910]
[199.13253784 51.30294800]
[213.01385498 45.61884689]
[222.85284424 33.22914886]
[237.56291199 35.56653976]
[251.44422913 29.88243675]
[265.27908325 24.08612823]
[279.06652832 18.17799377]
[292.85397339 12.26985645]
[306.64144897 6.36172009]
[320.38061523 0.34214321]
[334.07058716 -5.78847980]
[338.26254272 -10.93084431]
[343.61975098 -12.88064480]
[348.30456543 -11.88795757]
[362.18588257 -17.57205772]
[376.06719971 -23.25615883]
[389.94851685 -28.94025993]
[403.82983398 -34.62435913]
[417.71115112 -40.30846024]
[422.06744385 -45.31238556]
[427.48495483 -47.08768463]
[432.13516235 -45.94381714]
[446.19326782 -51.17543411]
[460.25137329 -56.40704727]
[474.30947876 -61.63866425]
[488.36758423 -66.87027740]
[502.42568970 -72.10189819]
[516.48376465 -77.33351135]
[530.54187012 -82.56513214]
[544.59997559 -87.79674530]
[558.65808105 -93.02835846]
[572.71618652 -98.25997925]
[586.73144531 -103.60524750]
[600.70300293 -109.06381989]
[605.53448486 -123.93631744]
[618.82275391 -132.17980957]
[634.29357910 -129.90199280]
[644.64202881 -118.17837524]
[644.98193359 -102.54448700]
[635.15277100 -90.38217926]
[619.79559326 -87.43411255]
[606.16156006 -95.09228516]
[592.19006348 -89.63370514]
[587.09661865 -84.26362610]
[577.94781494 -84.20188141]
[563.88970947 -78.97026062]
[549.83160400 -73.73864746]
[535.77349854 -68.50702667]
[521.71539307 -63.27541351]
[507.65728760 -58.04379654]
[493.59918213 -52.81217957]
[479.54107666 -47.58056259]
[465.48300171 -42.34894943]
[451.42489624 -37.11733246]
[437.36679077 -31.88571548]
[423.39526367 -26.42714119]
[409.51391602 -20.74304199]
[395.63259888 -15.05894089]
[381.75128174 -9.37484074]
[367.86996460 -3.69073987]
[353.98864746 1.99336064]
[340.20120239 7.90149689]
[326.51123047 14.03211975]
[321.68460083 19.64320946]
[312.54956055 20.14917564]
[298.76211548 26.05731201]
[284.97467041 31.96544838]
[271.18719482 37.87358475]
[266.27035522 43.40578079]
[257.12832642 43.76375580]
[243.24700928 49.44785690]
[234.40089417 61.43099213]
[218.69795227 59.50016785]
[204.81663513 65.18426514]
[190.93531799 70.86837006]
[177.05400085 76.55246735]
[171.55320740 90.34655762]
[157.55654907 96.30878448]
[143.12533569 90.44552612]
[129.24401855 96.12962341]
[115.36269379 101.81372833]
[130.34013367 100.99120331]
[144.91983032 104.51714325]
[157.86627197 112.09273529]
[168.08232117 123.07601166]
[174.70223999 136.53619385]
[177.16503906 151.33264160]
[175.26199341 166.21142578]
[169.15438843 179.91169739]
[159.35980225 191.27241516]
[146.70826721 199.33085632]
[132.27189636 203.40411377]
[117.27410126 203.14700317]
[102.98583984 198.58131409]
[90.61794281 190.09396362]
[81.21852112 178.40419006]
[75.58409882 164.50262451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[14 55]
[15 54]
[16 53]
[18 51]
[19 50]
[20 49]
[21 48]
[24 46]
[25 45]
[30 41]
[31 40]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[90 177]
[91 176]
[92 175]
[95 172]
[96 171]
[97 170]
[98 169]
[100 167]
[101 166]
[102 164]
[103 163]
[104 162]
[105 161]
[106 159]
[107 158]
[110 157]
[111 156]
[112 155]
[113 154]
[114 153]
[115 152]
[118 151]
[119 150]
[120 149]
[121 148]
[122 147]
[123 146]
[124 145]
[125 144]
[126 143]
[127 142]
[128 141]
[129 139]
[130 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
