%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACUCCACUUUCACAGGCUAUAACCUUUAUAACCUGCAAGUAAAAACUGAAAUGGACAAGUUGUCAUCAGGUUUGGAUAUAUACAGGAAUCCACUGA\
) } def
/len { sequence length } bind def

/coor [
[85.88331604 264.72247314]
[96.16040802 252.71592712]
[94.76271820 237.78118896]
[93.36502838 222.84645081]
[91.96733856 207.91171265]
[83.07778931 195.96076965]
[89.49553680 181.49967957]
[88.09784698 166.56494141]
[86.70015717 151.63020325]
[76.17635345 140.94143677]
[61.26515579 139.31166077]
[46.35395813 137.68186951]
[31.44276047 136.05209351]
[23.19120026 143.47621155]
[12.42055225 145.00067139]
[2.83210707 140.35136414]
[-2.41755986 131.33377075]
[-17.19858932 128.78010559]
[-31.97961998 126.22645569]
[-46.76065063 123.67280579]
[-61.67659378 128.94776917]
[-72.90084839 119.15667725]
[-87.68187714 116.60302734]
[-102.46290588 114.04936981]
[-117.24393463 111.49571991]
[-132.02496338 108.94206238]
[-148.66223145 112.20362854]
[-156.40199280 97.11944580]
[-144.04988098 85.50644684]
[-129.47131348 94.16103363]
[-114.69028473 96.71468353]
[-99.90925598 99.26834106]
[-85.12822723 101.82199097]
[-70.34719086 104.37564850]
[-56.48849106 98.91802979]
[-44.20699692 108.89177704]
[-29.42596626 111.44542694]
[-14.64493656 113.99907684]
[0.13609350 116.55273438]
[17.57167816 108.44020081]
[33.07254410 121.14089203]
[47.98374176 122.77067566]
[62.89493942 124.40045929]
[77.80613708 126.03024292]
[69.50524139 112.60032654]
[68.32098389 97.42446136]
[74.00226593 83.91448975]
[84.81034088 74.87491608]
[98.00841522 71.92267609]
[110.54242706 75.21282959]
[120.02447510 63.58996964]
[129.50651550 51.96711349]
[138.98857117 40.34425735]
[136.72912598 30.86508179]
[139.15730286 21.57169342]
[145.57594299 14.61423779]
[154.38081360 11.53847122]
[163.46003723 12.94340706]
[173.98384094 2.25464725]
[184.50764465 -8.43411255]
[195.03144836 -19.12287140]
[201.83544922 -34.65161514]
[218.64085388 -32.41230011]
[221.14125061 -15.64374828]
[205.72019958 -8.59906960]
[195.19639587 2.08969045]
[184.67260742 12.77845001]
[174.14880371 23.46720886]
[171.04051208 43.76876450]
[150.61141968 49.82630157]
[141.12937927 61.44915771]
[131.64733887 73.07201385]
[122.16528320 84.69487000]
[128.08489990 93.83397675]
[130.12013245 105.23486328]
[127.43730927 117.21257782]
[119.94001770 127.79454041]
[133.63687134 133.90980530]
[147.01536560 126.04879761]
[162.45608521 127.58630371]
[174.02174377 137.93110657]
[177.26512146 153.10543823]
[170.93905640 167.27444458]
[157.47607422 174.98985291]
[142.05294800 173.28492737]
[130.60018921 162.81526184]
[127.52161407 147.60664368]
[113.82476807 141.49139404]
[101.63489532 150.23251343]
[103.03258514 165.16725159]
[104.43027496 180.10198975]
[113.41979980 193.12117004]
[106.90208435 206.51402283]
[108.29977417 221.44876099]
[109.69745636 236.38349915]
[111.09514618 251.31823730]
[123.42156982 261.20941162]
[125.06047821 276.92846680]
[115.03955841 289.14962769]
[99.30402374 290.62225342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[7 91]
[8 90]
[9 89]
[10 44]
[11 43]
[12 42]
[13 41]
[17 39]
[18 38]
[19 37]
[20 36]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[50 73]
[51 72]
[52 71]
[53 70]
[58 68]
[59 67]
[60 66]
[61 65]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
