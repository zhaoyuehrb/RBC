%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUGUAUGUACUCUAAGUGUACCAGUUUCUUCACUCUCUCCUGGCAGAAGAUGCAACACUUUUAGUGAUUCUGGGAUUCUGGGAUGUGUUCCUAUUA\
) } def
/len { sequence length } bind def

/coor [
[90.81739807 154.16578674]
[83.18870544 152.30328369]
[75.90348053 149.37216187]
[67.54570007 161.82798767]
[59.18791580 174.28379822]
[50.83013153 186.73962402]
[42.47234726 199.19544983]
[41.90843964 215.58488464]
[27.30762291 223.05136108]
[13.68996811 213.91400146]
[15.06414890 197.57252502]
[30.01652527 190.83766174]
[38.37430954 178.38183594]
[46.73209381 165.92602539]
[55.08987808 153.47019958]
[63.44766235 141.01437378]
[54.24060822 130.40281677]
[48.02593994 117.80308533]
[45.21005630 104.03914642]
[45.97709656 90.01107788]
[50.27690506 76.63621521]
[57.82829666 64.78920746]
[68.13745880 55.24476242]
[80.53023529 48.62704086]
[94.19621277 45.36879349]
[94.66271210 30.37604904]
[95.12921143 15.38330460]
[95.59571075 0.39056021]
[86.32944489 -5.49492788]
[80.46907043 -14.68028259]
[79.05786896 -25.40169144]
[82.29252625 -35.63476562]
[89.49903870 -43.47677612]
[99.27180481 -47.50039673]
[101.13328552 -62.38444519]
[102.99476624 -77.26849365]
[104.85624695 -92.15254211]
[106.71772766 -107.03659058]
[92.43562317 -113.64271545]
[80.88907623 -124.30522919]
[73.18760681 -137.98341370]
[70.06627655 -153.34753418]
[71.81556702 -168.90818787]
[78.25435638 -183.16059875]
[88.74864197 -194.73019409]
[102.27390289 -202.50515747]
[117.51512909 -205.74324036]
[118.91281891 -220.67797852]
[120.31050873 -235.61271667]
[111.22099304 -248.83241272]
[116.02701569 -264.13867188]
[131.04179382 -269.78985596]
[144.74728394 -261.45083618]
[146.62980652 -245.51863098]
[135.24525452 -234.21502686]
[133.84756470 -219.28028870]
[132.44987488 -204.34555054]
[145.74952698 -198.97875977]
[156.99530029 -190.05268860]
[165.25932312 -178.29223633]
[169.85641479 -164.65666199]
[170.40101624 -150.26129150]
[166.83937073 -136.28634644]
[159.45478821 -123.88013458]
[148.84507751 -114.06470490]
[135.87417603 -107.65167999]
[121.60177612 -105.17510986]
[119.74029541 -90.29106140]
[117.87881470 -75.40701294]
[116.01733398 -60.52296448]
[114.15585327 -45.63891602]
[127.25165558 -31.42720222]
[125.93180847 -11.84840202]
[110.58845520 0.85705811]
[110.12195587 15.84980202]
[109.65545654 30.84254646]
[109.18895721 45.83528900]
[127.61977386 52.50893784]
[142.53450012 65.22834015]
[152.03446960 82.37427521]
[154.91029358 101.76401520]
[150.79588318 120.92919159]
[140.21499634 137.43002319]
[149.69705200 149.05287170]
[159.17909241 160.67573547]
[168.66113281 172.29858398]
[178.14318848 183.92144775]
[193.89498901 186.96450806]
[201.20896912 201.24334717]
[194.47447205 215.80445862]
[178.85762024 219.47781372]
[166.33833313 209.44551086]
[166.52032471 193.40348816]
[157.03828430 181.78063965]
[147.55624390 170.15777588]
[138.07418823 158.53492737]
[128.59214783 146.91206360]
[121.61174011 150.50926208]
[114.18978119 153.07450867]
[106.47791290 154.55537415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[25 77]
[26 76]
[27 75]
[28 74]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[47 57]
[48 56]
[49 55]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
