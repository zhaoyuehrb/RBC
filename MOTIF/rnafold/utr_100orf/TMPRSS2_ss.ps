%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGGGUCCCGGCUCGGGGUCCGGGCUGGGGAGGGGAACCUGGGCGCCUGGGACCCGCCGAUGCCCCCUGCCCCGCCCGGAGGUGAAAGCGGGUGUGAGGAGCGCGGCGCGGCAGGUCAUAUUGAACAUUCCAGAUACCUAUCAUUACUCGAUGCUGUUG\
) } def
/len { sequence length } bind def

/coor [
[81.96556854 124.81589508]
[91.73359680 113.43286133]
[78.74321747 120.93286133]
[65.75283813 128.43286133]
[52.76245880 135.93286133]
[39.77207565 143.43286133]
[26.85502625 151.05847168]
[14.01252365 158.80895996]
[2.24628830 168.11248779]
[-8.25697231 178.82144165]
[-18.76023293 189.53038025]
[-29.26349258 200.23933411]
[-39.76675415 210.94827271]
[-50.27001190 221.65721130]
[-60.77327347 232.36616516]
[-71.27653503 243.07510376]
[-81.77979279 253.78405762]
[-92.28305054 264.49301147]
[-99.05722809 280.03479004]
[-115.86690521 277.82772827]
[-118.39949799 261.06402588]
[-102.99199677 253.98974609]
[-92.48873901 243.28079224]
[-81.98548126 232.57185364]
[-71.48221588 221.86289978]
[-60.97895813 211.15396118]
[-50.47570038 200.44500732]
[-39.97243881 189.73606873]
[-29.46917725 179.02711487]
[-18.96591759 168.31817627]
[-8.46265793 157.60922241]
[-11.76350784 150.87466431]
[-21.66605759 130.67095947]
[-36.56463242 132.41235352]
[-51.46320724 134.15374756]
[-64.28707123 144.37532043]
[-79.45014954 138.12928772]
[-81.35397339 121.84102631]
[-68.04005432 112.26651001]
[-53.20460129 119.25517273]
[-38.30602646 117.51377869]
[-23.40745163 115.77238464]
[-6.60964966 122.06166077]
[3.61722493 133.31797791]
[6.26203251 145.96644592]
[19.10453606 138.21595764]
[23.22672081 132.03698730]
[32.27207565 130.44247437]
[45.26245880 122.94248199]
[58.25283813 115.44248199]
[71.24321747 107.94248199]
[84.23359680 100.44248199]
[92.95597839 88.23919678]
[95.84666443 73.52037048]
[98.73735046 58.80154037]
[101.62803650 44.08271027]
[96.69522858 29.05014610]
[106.74019623 18.05251503]
[109.63088226 3.33368564]
[112.52156830 -11.38514423]
[115.41224670 -26.10397339]
[113.99260712 -35.17841721]
[118.50433350 -41.07895660]
[121.67989349 -55.73896408]
[124.85545349 -70.39897156]
[128.03100586 -85.05898285]
[121.59129333 -93.90150452]
[121.11901855 -104.60981750]
[126.52862549 -113.60733795]
[135.81021118 -118.02282715]
[139.55181885 -132.54867554]
[143.29344177 -147.07452393]
[146.89404297 -161.63597107]
[150.35327148 -176.23164368]
[153.38653564 -190.92175293]
[155.99125671 -205.69386292]
[158.59597778 -220.46598816]
[161.20069885 -235.23809814]
[163.80543518 -250.01022339]
[166.41015625 -264.78234863]
[154.59313965 -274.59323120]
[149.27981567 -289.00378418]
[151.89944458 -304.13763428]
[161.74732971 -315.92382812]
[176.17448425 -321.19195557]
[191.30003357 -318.52493286]
[203.05531311 -308.64013672]
[208.27818298 -294.19653320]
[205.56373596 -279.07943726]
[195.64215088 -267.35519409]
[181.18226624 -262.17761230]
[178.57754517 -247.40550232]
[175.97282410 -232.63337708]
[173.36810303 -217.86126709]
[170.76338196 -203.08914185]
[168.15866089 -188.31703186]
[169.91191101 -185.20437622]
[170.21562195 -181.07601929]
[168.60382080 -176.63615417]
[164.94894409 -172.77239990]
[161.48971558 -158.17672729]
[163.01463318 -150.90716553]
[157.81929016 -143.33290100]
[154.07766724 -128.80705261]
[150.33605957 -114.28121185]
[156.90980530 -96.12724304]
[142.69100952 -81.88342285]
[139.51545715 -67.22341156]
[136.33990479 -52.56340790]
[133.16433716 -37.90340042]
[130.13107300 -23.21328926]
[127.24039459 -8.49446011]
[124.34970856 6.22436953]
[121.45903015 20.94319916]
[126.59859467 34.92297363]
[116.34686279 46.97339630]
[113.45617676 61.69222641]
[110.56549835 76.41105652]
[107.67481232 91.12988281]
[117.26821136 79.59876251]
[121.37419128 65.17167664]
[131.00332642 53.67038345]
[144.48377991 47.09180450]
[159.47497559 46.57814026]
[173.37409973 52.21857071]
[183.76789856 63.03378296]
[188.85176086 77.14598846]
[187.74301147 92.10495758]
[180.63414001 105.31343842]
[168.75942993 114.47811127]
[154.18063354 118.00776672]
[139.42982483 115.28992462]
[125.80061340 109.02537537]
[134.75799561 121.05722809]
[143.71536255 133.08908081]
[148.70755005 118.94417572]
[162.81263733 113.84061432]
[175.70002747 121.51625061]
[177.93092346 136.34942627]
[167.87142944 147.47625732]
[152.88978577 146.74777222]
[160.64027405 159.59027100]
[168.39076233 172.43276978]
[176.14126587 185.27528381]
[191.61795044 187.51266479]
[201.99702454 199.20919800]
[202.37777710 214.84214783]
[192.58044434 227.03010559]
[177.23103333 230.01829529]
[163.57704163 222.39576721]
[158.06549072 207.76167297]
[163.29875183 193.02577209]
[155.54826355 180.18327332]
[147.79777527 167.34075928]
[140.04728699 154.49826050]
[131.68351746 142.04644775]
[122.72614288 130.01460266]
[113.76876068 117.98275757]
[118.22928619 132.30419922]
[110.66427612 145.25682068]
[95.99895477 148.40777588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 46]
[8 45]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[33 42]
[34 41]
[35 40]
[53 119]
[54 118]
[55 117]
[56 116]
[58 114]
[59 113]
[60 112]
[61 111]
[63 110]
[64 109]
[65 108]
[66 107]
[70 105]
[71 104]
[72 103]
[73 101]
[74 100]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[133 158]
[134 157]
[135 156]
[141 155]
[142 154]
[143 153]
[144 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
