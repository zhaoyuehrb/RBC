%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGCCUCACCCGGAAUGAAAACAAACGGCGGCCGCUGCCGCAUCCGGGCACUCUGCUGGUCGCGGCGGGAGUGGCGUGGCGCAGGGAUGGCACAAAAGAAAUAUCUUCAAGCAA\
) } def
/len { sequence length } bind def

/coor [
[123.88153076 234.74929810]
[123.07638550 219.77093506]
[122.27123260 204.79255676]
[110.08265686 177.11911011]
[122.63494110 155.80795288]
[115.31002045 142.71806335]
[107.98509216 129.62815857]
[95.40502930 130.33934021]
[83.59973907 125.93493652]
[74.55973053 117.15757751]
[69.80927277 105.48723602]
[54.84305954 104.48107147]
[39.87684250 103.47490692]
[24.91062546 102.46874237]
[9.94440937 101.46257782]
[-5.02180719 100.45641327]
[-13.92661667 103.02714539]
[-20.37461662 99.21700287]
[-35.30842590 97.80938721]
[-25.80648232 109.41598511]
[-24.73536873 124.37769318]
[-32.48704529 137.21948242]
[-46.22488785 143.24208069]
[-60.92172623 140.24159241]
[-71.19945526 129.31599426]
[-73.29707336 114.46339417]
[-66.44699097 101.11886597]
[-53.15624619 94.16573334]
[-67.44678497 89.60715485]
[-81.73731232 85.04857635]
[-96.02784729 80.48999786]
[-110.31838226 75.93141937]
[-124.60891724 71.37284851]
[-141.53640747 72.31961060]
[-147.13217163 56.31574631]
[-133.30281067 46.50835419]
[-120.05033875 57.08230972]
[-105.75980377 61.64088821]
[-91.46927643 66.19946289]
[-77.17874146 70.75804138]
[-62.88820267 75.31661987]
[-48.59767151 79.87519836]
[-33.90081024 82.87557983]
[-18.96700287 84.28319550]
[-4.01564217 85.49019623]
[10.95057392 86.49636078]
[25.91679001 87.50252533]
[40.88300705 88.50868988]
[55.84922409 89.51485443]
[70.81543732 90.52101898]
[80.10716248 76.63625336]
[95.29586792 69.67739105]
[111.87905884 71.70729065]
[120.89019012 59.71564484]
[129.90132141 47.72400284]
[138.91246033 35.73236465]
[147.92359924 23.74072075]
[156.93472290 11.74908066]
[158.14636230 5.03334093]
[162.04608154 0.67435896]
[166.76554871 -0.62698793]
[176.40734863 -12.11765480]
[186.04916382 -23.60832214]
[195.69097900 -35.09898758]
[205.33279419 -46.58965302]
[214.97460938 -58.08032227]
[217.91807556 -73.62530518]
[232.02612305 -78.40151978]
[241.66793823 -89.89218903]
[243.98120117 -106.12736511]
[259.29672241 -111.98970032]
[271.85919189 -101.44853210]
[268.74542236 -85.34770966]
[253.15859985 -80.25037384]
[243.51678467 -68.75970459]
[241.26296997 -54.03660965]
[226.46528625 -48.43850708]
[216.82347107 -36.94784164]
[207.18165588 -25.45717430]
[197.53984070 -13.96650696]
[187.89802551 -2.47584033]
[178.25621033 9.01482582]
[168.92637634 20.76021385]
[159.91523743 32.75185394]
[150.90409851 44.74349594]
[141.89297485 56.73513794]
[132.88183594 68.72678375]
[123.87070465 80.71842194]
[130.18002319 94.45417023]
[129.16610718 109.53561401]
[121.07498932 122.30323792]
[128.39991760 135.39312744]
[135.72483826 148.48303223]
[146.16171265 146.04179382]
[157.66711426 148.38624573]
[167.99707031 155.89302063]
[174.82566833 167.88571167]
[176.23204041 182.65315247]
[186.17887878 193.88081360]
[196.12571716 205.10847473]
[206.07255554 216.33613586]
[221.79061890 221.01315308]
[225.33554077 237.02458191]
[213.06059265 247.89921570]
[197.59320068 242.45019531]
[194.84489441 226.28297424]
[184.89805603 215.05531311]
[174.95121765 203.82765198]
[165.00437927 192.59999084]
[158.06568909 195.44683838]
[144.18830872 201.14054871]
[137.24960327 203.98741150]
[138.05476379 218.96577454]
[138.85990906 233.94415283]
[145.74772644 249.43591309]
[132.76812744 260.34307861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[5 93]
[6 92]
[7 91]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[18 44]
[19 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
