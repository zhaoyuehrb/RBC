%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACGCCGACAACUUUGCGAUGGAGUUUGUGCGGGCGCUGUGGCUGGGCCUGGCGCUGGCGCUGGGGCCGGGGUCCGCGGGGGGCCACCCUCAGCCGUGCGGCGUCCUGGCGCGCCUCG\
) } def
/len { sequence length } bind def

/coor [
[104.09797668 205.05645752]
[102.14008331 190.18478394]
[98.09767914 183.88642883]
[100.33087158 174.89878845]
[98.76293945 159.98095703]
[97.19501495 145.06314087]
[95.62709045 130.14530945]
[94.05915833 115.22747803]
[80.60607147 108.59314728]
[67.81646729 116.43062592]
[55.02686310 124.26810455]
[42.23726273 132.10559082]
[29.55134392 140.10980225]
[16.97128677 148.27938843]
[4.39122725 156.44897461]
[-8.18883133 164.61856079]
[-12.91739559 179.94892883]
[-27.90341377 185.67594910]
[-41.65089417 177.40635681]
[-43.61394882 161.48385620]
[-32.28668594 150.12283325]
[-16.35841751 152.03849792]
[-3.77835798 143.86891174]
[8.80170059 135.69932556]
[21.38175964 127.52973938]
[25.32626724 121.16961670]
[34.39978409 119.31597900]
[47.18938446 111.47850037]
[59.97898865 103.64102173]
[72.76859283 95.80354309]
[82.37337494 88.18200684]
[92.31297302 87.24691010]
[99.10528564 91.48733521]
[106.60528564 78.49695587]
[114.10528564 65.50657654]
[121.60528564 52.51619339]
[129.10528564 39.52581406]
[136.60528564 26.53543282]
[144.10528564 13.54505062]
[151.60528564 0.55466992]
[159.10528564 -12.43571091]
[166.26266479 -25.61796761]
[173.07252502 -38.98306656]
[179.88238525 -52.34816360]
[186.69223022 -65.71326447]
[193.50209045 -79.07836151]
[196.23562622 -93.82718658]
[194.66769409 -108.74501038]
[193.09977722 -123.66284180]
[191.53184509 -138.58067322]
[189.96391296 -153.49848938]
[178.79048157 -168.06311035]
[186.39949036 -183.81806946]
[184.44160461 -198.68974304]
[182.48370361 -213.56141663]
[172.07670593 -226.23526001]
[178.10154724 -241.48757935]
[194.36039734 -243.62809753]
[204.12754822 -230.45483398]
[197.35537720 -215.51930237]
[199.31327820 -200.64762878]
[201.27116394 -185.77595520]
[210.72013855 -178.10026550]
[212.41061401 -165.63819885]
[204.88174438 -155.06642151]
[206.44967651 -140.14859009]
[208.01760864 -125.23076630]
[209.58552551 -110.31293488]
[211.15345764 -95.39511108]
[224.60655212 -88.76078033]
[237.39614868 -96.59825897]
[250.08206177 -104.60247803]
[262.66213989 -112.77206421]
[275.24218750 -120.94165039]
[287.82223511 -129.11123657]
[300.40231323 -137.28082275]
[305.13085938 -152.61119080]
[320.11688232 -158.33821106]
[333.86434937 -150.06860352]
[335.82742310 -134.14611816]
[324.50015259 -122.78509521]
[308.57189941 -124.70075989]
[295.99182129 -116.53117371]
[283.41177368 -108.36158752]
[270.83169556 -100.19200134]
[258.25164795 -92.02241516]
[254.30714417 -85.66229248]
[245.23362732 -83.80865479]
[232.44403076 -75.97117615]
[223.48284912 -70.78963470]
[214.40763855 -69.78318024]
[206.86718750 -72.26850128]
[200.05732727 -58.90340424]
[193.24748230 -45.53830719]
[186.43762207 -32.17320633]
[179.62776184 -18.80811119]
[180.27111816 -13.96180534]
[177.78900146 -8.67617512]
[172.09565735 -4.93571138]
[164.59565735 8.05467033]
[157.09565735 21.04505157]
[149.59565735 34.03543091]
[142.09565735 47.02581406]
[134.59565735 60.01619339]
[127.09566498 73.00657654]
[119.59566498 85.99695587]
[112.09566498 98.98733521]
[108.97698975 113.65955353]
[110.54491425 128.57737732]
[112.11284637 143.49520874]
[113.68077087 158.41304016]
[115.24869537 173.33087158]
[117.01175690 188.22689819]
[118.96965027 203.09857178]
[131.65902710 212.51956177]
[133.88745117 228.16595459]
[124.33283234 240.75502014]
[108.66374969 242.81790161]
[96.17639923 233.13070679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[4 112]
[5 111]
[6 110]
[7 109]
[8 108]
[9 30]
[10 29]
[11 28]
[12 27]
[13 25]
[14 24]
[15 23]
[16 22]
[33 107]
[34 106]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[40 100]
[41 99]
[42 96]
[43 95]
[44 94]
[45 93]
[46 92]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[53 62]
[54 61]
[55 60]
[70 89]
[71 88]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
