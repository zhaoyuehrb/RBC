%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:39:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAUUAUCAACACAUCAUAUGUUGAAAUCACCACCUUCUUCUUGGUUGGGAUGCCAGGGCUAGAAUAUGCACACAUCUGGAUCUCUAUCCCCAUCU\
) } def
/len { sequence length } bind def

/coor [
[149.89140320 129.23107910]
[153.59913635 143.76562500]
[151.40370178 158.60408020]
[143.64602661 171.44224548]
[131.53077698 180.28649902]
[116.93930054 183.76342773]
[102.13748932 181.33311462]
[89.42388153 173.37297058]
[80.77272797 161.11907959]
[77.52746582 146.47434998]
[80.19225311 131.71235657]
[65.98518372 136.52473450]
[51.77811050 141.33712769]
[37.57103348 146.14950562]
[23.36396217 150.96189880]
[9.15688801 155.77427673]
[3.64875698 170.40966797]
[-10.00344467 178.03536987]
[-25.35356522 175.05078125]
[-35.15374756 162.86511230]
[-34.77664185 147.23207092]
[-24.40031052 135.53311157]
[-8.92413712 133.29211426]
[4.34450197 141.56721497]
[18.55157471 136.75482178]
[32.75864792 131.94242859]
[46.96572113 127.13005066]
[61.17279434 122.31766510]
[75.37986755 117.50527954]
[78.43750000 110.65685272]
[63.52132034 109.07327271]
[60.41822815 94.39775848]
[73.41665649 86.91171265]
[84.55274963 96.96000671]
[87.61037445 90.11157990]
[81.70886993 76.32128143]
[75.80737305 62.53098679]
[69.69211578 48.83414078]
[63.36458969 35.23405075]
[48.10993576 32.39237213]
[37.46342087 21.10382271]
[35.51885223 5.70907354]
[43.02395630 -7.87227678]
[57.09286118 -14.41792297]
[72.31579590 -11.41092968]
[82.83921814 -0.00754818]
[84.61666870 15.40738964]
[76.96467590 28.90652466]
[83.29220581 42.50661469]
[89.06954956 47.32820892]
[89.59766388 56.62948227]
[95.49916840 70.41977692]
[101.40067291 84.21007538]
[113.72500610 92.76055908]
[128.70867920 93.46016693]
[143.69236755 94.15976715]
[158.67604065 94.85937500]
[163.62402344 92.27777100]
[168.55488586 92.00936127]
[172.54702759 93.62722015]
[175.00390625 96.38744354]
[189.85719299 98.48017120]
[204.71049500 100.57290649]
[219.45516968 94.83660889]
[230.97850037 104.27388763]
[245.83180237 106.36661530]
[260.68508911 108.45935059]
[275.53839111 110.55207825]
[286.40225220 103.38733673]
[298.82574463 105.55104828]
[306.14346313 115.32186127]
[320.92449951 117.87551880]
[335.84042358 112.60055542]
[347.06469727 122.39163971]
[361.84570312 124.94529724]
[374.61434937 115.63197327]
[390.21548462 118.15775299]
[399.39328003 131.02412415]
[396.70272827 146.59770203]
[383.74002075 155.63896179]
[368.19577026 152.78387451]
[359.29205322 139.72633362]
[344.51104736 137.17266846]
[330.65234375 142.63029480]
[318.37084961 132.65653992]
[303.58981323 130.10289001]
[287.57336426 137.08679199]
[273.44567871 125.40538025]
[258.59237671 123.31264496]
[243.73907471 121.21991730]
[228.88577271 119.12718964]
[215.20350647 125.01316833]
[202.61776733 115.42620087]
[187.76446533 113.33347321]
[172.91116333 111.24073792]
[157.97642517 109.84305573]
[142.99275208 109.14344788]
[128.00907898 108.44384003]
[113.02539825 107.74423218]
[127.89679718 109.70425415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[35 53]
[36 52]
[37 51]
[38 49]
[39 48]
[54 99]
[55 98]
[56 97]
[57 96]
[61 95]
[62 94]
[63 93]
[65 91]
[66 90]
[67 89]
[68 88]
[71 86]
[72 85]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
