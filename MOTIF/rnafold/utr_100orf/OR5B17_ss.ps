%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAAUAAUACAGAGGUGAGUGAAUUCAUCCUGCUUGGUCUAACCAAUGCCCCAGAACUACAGGUUCCCCUCUUUAUCAUGUUUACCCUCAUCUACC\
) } def
/len { sequence length } bind def

/coor [
[136.77415466 362.71432495]
[143.89480591 349.25265503]
[155.87919617 339.85614014]
[152.18501282 325.31817627]
[141.55155945 314.88842773]
[145.65185547 299.60778809]
[141.95767212 285.06979370]
[138.26348877 270.53182983]
[134.56930542 255.99383545]
[130.87512207 241.45585632]
[126.73059845 227.03977966]
[122.13973999 212.75958252]
[117.54887390 198.47938538]
[106.28759003 188.73092651]
[109.42996216 173.22491455]
[104.83910370 158.94471741]
[100.24824524 144.66452026]
[95.65738678 130.38432312]
[91.06652832 116.10413361]
[79.01406860 107.17449951]
[64.01588440 106.94122314]
[49.01770020 106.70794678]
[34.01951218 106.47467041]
[19.96265793 114.92078400]
[5.75281334 106.73467255]
[6.00784969 90.33750916]
[20.46540833 82.59728241]
[34.25279236 91.47647858]
[49.25097656 91.70975494]
[64.24916077 91.94303894]
[79.24734497 92.17631531]
[83.52259064 86.01414490]
[71.19839478 77.46345520]
[79.74929047 65.13940430]
[92.07307434 73.68981171]
[96.34831238 67.52764130]
[90.87854004 53.56048203]
[85.19221497 39.68007660]
[79.29071045 25.88978004]
[73.38920593 12.09948444]
[67.48770905 -1.69081151]
[61.58620071 -15.48110676]
[49.79583359 -27.66402817]
[58.23874283 -42.36619186]
[74.70356750 -38.32320023]
[75.37649536 -21.38261032]
[81.27799988 -7.59231520]
[87.17950439 6.19798040]
[93.08100891 19.98827553]
[98.98251343 33.77857208]
[104.60710907 38.77750778]
[104.84570312 48.09070969]
[110.31547546 62.05786896]
[117.61231232 63.79169083]
[121.08020020 49.19807053]
[135.67376709 52.66620255]
[132.20599365 67.25933838]
[139.50283813 68.99315643]
[150.67079163 58.97933960]
[161.83876038 48.96551514]
[173.00671387 38.95169449]
[184.17468262 28.93787193]
[191.93093872 13.86216831]
[208.56462097 17.14193726]
[210.01768494 34.03350067]
[194.18850708 40.10583496]
[183.02053833 50.11965561]
[171.85258484 60.13347626]
[160.68461609 70.14730072]
[149.51666260 80.16112518]
[130.69393921 112.17009735]
[105.34672546 111.51327515]
[109.93758392 125.79347229]
[114.52844238 140.07366943]
[119.11930084 154.35386658]
[123.71015930 168.63406372]
[135.29980469 179.40394592]
[131.82907104 193.88853455]
[136.41993713 208.16873169]
[141.01078796 222.44892883]
[145.84930420 227.36907959]
[147.14018250 233.13479614]
[145.41310120 237.76167297]
[149.10728455 252.29965210]
[152.80146790 266.83764648]
[156.49565125 281.37561035]
[160.18983459 295.91360474]
[171.08750916 307.38317871]
[166.72299194 321.62399292]
[170.41717529 336.16195679]
[185.43354797 338.69741821]
[198.11682129 347.12680054]
[206.26954651 359.98965454]
[208.47923279 375.05740356]
[204.36300659 389.71948242]
[194.63404846 401.43560791]
[180.97796631 408.17587280]
[165.76074219 408.77246094]
[151.61885071 403.12207031]
[141.00247192 392.20361328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 90]
[4 89]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 80]
[12 79]
[13 78]
[15 76]
[16 75]
[17 74]
[18 73]
[19 72]
[20 31]
[21 30]
[22 29]
[23 28]
[36 53]
[37 52]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
