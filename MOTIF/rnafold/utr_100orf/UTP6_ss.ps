%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCUCCGAACCUGAAACCGGGAGCUUCCUGCUCGUGUUCGCUGUUGAGAAGCUACCCGCGGGGUUGUAGACCUCGGACCUCAUGGCAGAGAUAAUUCAGGAACGCAUAGAAGAUCGGCUCCCGGAAUUGGAACAGCUGGAGCGCAUUGGACUGUUCAGUCAUGCGGAGAUUAAGGCUAUCA\
) } def
/len { sequence length } bind def

/coor [
[109.32761383 317.88104248]
[121.93266296 309.27432251]
[119.63674927 294.45108032]
[117.34083557 279.62780762]
[115.04492188 264.80456543]
[112.74901581 249.98130798]
[110.45310211 235.15806580]
[108.15718842 220.33480835]
[105.86127472 205.51156616]
[95.38870239 200.91511536]
[88.37149811 191.73248291]
[86.65161133 180.18292236]
[90.77264404 169.12919617]
[99.81576538 161.36802673]
[98.02727509 146.47503662]
[96.23878479 131.58203125]
[76.63949585 121.58375549]
[68.21960449 101.25635529]
[75.00854492 80.32771301]
[65.74226379 68.53211975]
[56.47597885 56.73652649]
[47.20969772 44.94093323]
[37.94341278 33.14533997]
[28.67712975 21.34974861]
[19.41084671 9.55415726]
[10.14456367 -2.24143553]
[0.87828094 -14.03702736]
[-16.51494217 -15.79659271]
[-27.05620956 -29.31755447]
[-24.61759949 -45.94675446]
[-34.08391953 -57.58242416]
[-48.79495239 -63.40445709]
[-50.82506943 -78.16006470]
[-60.29138947 -89.79573059]
[-77.63809204 -95.94123077]
[-79.77038574 -113.34996033]
[-89.43398285 -124.82231903]
[-99.09757996 -136.29467773]
[-108.76117706 -147.76702881]
[-118.42476654 -159.23937988]
[-128.08836365 -170.71173096]
[-136.03038025 -175.27343750]
[-137.81698608 -182.46343994]
[-147.28330994 -194.09912109]
[-156.74961853 -205.73478699]
[-170.86450195 -200.32850647]
[-185.93888855 -199.55073547]
[-200.49589539 -203.46507263]
[-213.11315918 -211.67604065]
[-222.56187439 -223.36895752]
[-227.92652893 -237.39077759]
[-228.69345093 -252.36381531]
[-224.80014038 -266.82107544]
[-216.64001465 -279.34997559]
[-226.10633850 -290.98562622]
[-238.84844971 -293.08428955]
[-246.49243164 -302.99060059]
[-245.36471558 -315.04949951]
[-254.63099670 -326.84509277]
[-263.89727783 -338.64068604]
[-278.50677490 -344.71304321]
[-280.28466797 -359.50115967]
[-289.55096436 -371.29675293]
[-298.81723022 -383.09234619]
[-308.08352661 -394.88793945]
[-317.34979248 -406.68353271]
[-326.61608887 -418.47912598]
[-341.80819702 -416.22177124]
[-356.08770752 -421.87783813]
[-365.61349487 -433.92587280]
[-367.82321167 -449.12496948]
[-362.12240601 -463.38668823]
[-350.04458618 -472.87466431]
[-334.83862305 -475.03671265]
[-320.59484863 -469.29122925]
[-311.14477539 -457.18374634]
[-309.03039551 -441.97109985]
[-314.82049561 -427.74539185]
[-305.55419922 -415.94979858]
[-296.28793335 -404.15420532]
[-287.02163696 -392.35861206]
[-277.75537109 -380.56301880]
[-268.48907471 -368.76742554]
[-254.54237366 -363.53878784]
[-252.10168457 -347.90698242]
[-242.83540344 -336.11138916]
[-233.56912231 -324.31579590]
[-216.95834351 -318.68618774]
[-214.47067261 -300.45196533]
[-205.00434875 -288.81628418]
[-191.07727051 -294.25665283]
[-176.13029480 -295.12713623]
[-161.62646484 -291.32986450]
[-148.98937988 -283.22460938]
[-139.46343994 -271.59451294]
[-133.99127197 -257.57058716]
[-133.12051392 -242.52166748]
[-136.94898987 -227.92080688]
[-145.11395264 -215.20111084]
[-135.64762878 -203.56542969]
[-126.18131256 -191.92976379]
[-116.61601257 -180.37533569]
[-106.95241547 -168.90298462]
[-97.28881836 -157.43061829]
[-87.62522125 -145.95826721]
[-77.96162415 -134.48591614]
[-68.29803467 -123.01355743]
[-56.26192474 -121.66423035]
[-48.11801147 -112.16462708]
[-48.65571976 -99.26204681]
[-39.18939972 -87.62638092]
[-25.15546036 -82.63661194]
[-22.44824982 -67.04874420]
[-12.98192978 -55.41307449]
[-0.09198844 -55.89893341]
[10.88399315 -48.75916672]
[15.80919933 -36.41702271]
[12.67387295 -23.30331039]
[21.94015694 -11.50771904]
[31.20643997 0.28787369]
[40.47272110 12.08346558]
[49.73900604 23.87905884]
[59.00528717 35.67465210]
[68.27156830 47.47024155]
[77.53785706 59.26583481]
[86.80413818 71.06142426]
[96.99694824 68.33687592]
[107.52023315 69.09663391]
[117.21595764 73.25710297]
[125.01718903 80.36044312]
[130.06544495 89.62498474]
[131.80520630 100.03122711]
[146.37870789 103.58269501]
[160.95220947 107.13416290]
[175.52572632 110.68562317]
[190.09922791 114.23709106]
[204.67272949 117.78855896]
[219.27603149 121.21548462]
[233.90803528 124.51761627]
[248.54005432 127.81975555]
[260.11129761 117.48118591]
[275.55285645 115.95201111]
[288.92709351 123.82023621]
[295.09140015 138.06036377]
[291.67541504 153.19676208]
[279.99270630 163.40919495]
[264.53549194 164.77076721]
[251.24737549 156.75791931]
[245.23793030 142.45176697]
[230.60591125 139.14964294]
[215.97389221 135.84750366]
[208.73970032 137.44580078]
[201.12126160 132.36206055]
[186.54776001 128.81059265]
[171.97425842 125.25913239]
[157.40074158 121.70766449]
[142.82723999 118.15620422]
[128.25373840 114.60473633]
[123.85954285 121.03079224]
[118.03592682 126.19689178]
[111.13177490 129.79354858]
[112.92027283 144.68653870]
[114.70876312 159.57952881]
[130.03643799 170.68235779]
[132.36621094 189.14360046]
[120.68452454 203.21565247]
[122.98043823 218.03889465]
[125.27635193 232.86215210]
[127.57226562 247.68539429]
[129.86817932 262.50866699]
[132.16409302 277.33190918]
[134.46000671 292.15515137]
[136.75592041 306.97839355]
[151.37400818 311.36865234]
[162.63380432 321.67300415]
[168.29966736 335.84555054]
[167.24662781 351.07229614]
[159.68377686 364.32995605]
[147.11273193 372.98626709]
[132.02944946 375.32244873]
[117.42876434 370.87466431]
[106.20963287 360.52606201]
[100.59963226 346.33132935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 173]
[3 172]
[4 171]
[5 170]
[6 169]
[7 168]
[8 167]
[9 166]
[14 163]
[15 162]
[16 161]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[30 114]
[31 113]
[33 111]
[34 110]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[43 101]
[44 100]
[45 99]
[54 90]
[55 89]
[58 87]
[59 86]
[60 85]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
[132 158]
[133 157]
[134 156]
[135 155]
[136 154]
[137 153]
[138 151]
[139 150]
[140 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
