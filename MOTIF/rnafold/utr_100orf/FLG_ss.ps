%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUGGUGAACAAGGUUCACAUUUAUUGCCAAAAGAUGUCUACUCUCCUGGAAAACAUCUUUGCCAUAAUUAAUCUUUUCAAGCAAUAUUCAAAAAAAGAUAAAAACACUGACACAUUGAGUAAAAAAGAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[107.63114166 209.79620361]
[105.57382202 194.93795776]
[103.51651001 180.07971191]
[101.45919800 165.22146606]
[99.40187836 150.36322021]
[87.42955017 148.77288818]
[76.18002319 144.37814331]
[67.19711304 156.39094543]
[58.21421051 168.40374756]
[49.23130417 180.41654968]
[40.24839783 192.42935181]
[31.26549339 204.44215393]
[26.62229538 220.74789429]
[9.66842842 220.80003357]
[4.92503023 204.52316284]
[19.25269127 195.45924377]
[28.23559570 183.44644165]
[37.21850204 171.43363953]
[46.20140839 159.42083740]
[55.18431473 147.40803528]
[64.16722107 135.39523315]
[53.12243652 118.42023468]
[49.65656281 98.46714783]
[54.32994843 78.76188660]
[41.82218933 70.48203278]
[29.31442833 62.20218277]
[16.80666733 53.92232895]
[1.02847159 52.75652313]
[-5.31325960 39.27944183]
[-17.82102013 30.99959183]
[-24.52743530 30.19869614]
[-29.08618546 26.62236786]
[-30.70037079 22.04236794]
[-42.81537628 13.19778442]
[-54.93038177 4.35320091]
[-67.04538727 -4.49138260]
[-79.16039276 -13.33596611]
[-91.27539825 -22.18054962]
[-103.39040375 -31.02513313]
[-115.80240631 -39.44784546]
[-128.49673462 -47.43872833]
[-141.19105530 -55.42960739]
[-153.88537598 -63.42048645]
[-169.23878479 -59.67236710]
[-182.70204163 -67.94983673]
[-186.28761292 -83.34201050]
[-177.86827087 -96.71699524]
[-162.43904114 -100.13964081]
[-149.15382385 -91.57936096]
[-145.89450073 -76.11480713]
[-133.20018005 -68.12393188]
[-120.50585175 -60.13304901]
[-107.81152344 -52.14216995]
[-104.23292542 -52.61169052]
[-100.24900055 -51.31454086]
[-96.71926880 -48.08006287]
[-94.54581451 -43.14013672]
[-82.43080902 -34.29555511]
[-70.31581116 -25.45097160]
[-58.20080185 -16.60638809]
[-46.08579636 -7.76180410]
[-33.97079468 1.08277905]
[-21.85578728 9.92736244]
[-9.54116821 18.49183083]
[2.96659207 26.77168274]
[17.85014915 27.34525871]
[25.08651924 41.41456985]
[37.59428024 49.69441986]
[50.10203934 57.97427368]
[62.60979843 66.25412750]
[78.49108124 54.45685959]
[97.69085693 49.68619537]
[117.24689484 52.67816544]
[134.14201355 62.97116470]
[145.83877563 53.58044815]
[157.53555298 44.18973541]
[169.23231506 34.79901886]
[180.92909241 25.40830421]
[192.62586975 16.01758957]
[204.32263184 6.62687540]
[199.70976257 -7.83292532]
[200.63577271 -22.98241234]
[206.97543335 -36.77273941]
[217.87135315 -47.33888245]
[231.84994507 -53.25185394]
[247.02073669 -53.71197510]
[261.33197021 -48.65701675]
[272.84820557 -38.77062225]
[280.01196289 -25.38984299]
[281.85437012 -10.32432079]
[278.12628174 4.38845587]
[269.33187866 16.75870514]
[256.66055298 25.11345291]
[241.82598877 28.32278633]
[226.83442688 25.95267296]
[213.71334839 18.32364655]
[202.01658630 27.71436119]
[190.31980896 37.10507584]
[178.62303162 46.49579239]
[166.92626953 55.88650513]
[155.22949219 65.27722168]
[143.53271484 74.66793823]
[146.65589905 81.02531433]
[148.85635376 87.75794983]
[150.09059143 94.73270416]
[150.33418274 101.81162262]
[149.58230591 108.85471344]
[147.84985352 115.72268677]
[145.17106628 122.27971649]
[157.48568726 130.84417725]
[169.80030823 139.40866089]
[184.01835632 133.42109680]
[199.21250916 136.09341431]
[210.53436279 146.57286072]
[214.37118530 161.51550293]
[209.49862671 176.15318298]
[197.47151184 185.81507874]
[182.12765503 187.41810608]
[168.36323547 180.45075989]
[160.57040405 167.13627625]
[161.23583984 151.72326660]
[148.92121887 143.15879822]
[136.60659790 134.59432983]
[130.00274658 140.45549011]
[122.47682953 145.07331848]
[114.26012421 148.30590820]
[116.31743622 163.16415405]
[118.37475586 178.02238464]
[120.43206787 192.88063049]
[122.48937988 207.73887634]
[135.82919312 215.89875793]
[140.75398254 230.74060059]
[134.93840027 245.25656128]
[121.12841034 252.59265137]
[105.84465027 249.28497314]
[96.30364990 236.89532471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[5 126]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[24 70]
[25 69]
[26 68]
[27 67]
[29 65]
[30 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 53]
[41 52]
[42 51]
[43 50]
[74 102]
[75 101]
[76 100]
[77 99]
[78 98]
[79 97]
[80 96]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
