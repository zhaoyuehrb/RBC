%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUCUUAAAAAUGGAUCUCUAGUGACCGAGUUUAUUUUACUAGGAUUUUUUGGACGAUGGGAACUUCAAAUUUUCUUCUUUGUGACAUUUUCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[79.11690521 122.83600616]
[72.59484863 114.37165070]
[69.34057617 104.19361115]
[54.42937851 102.56383514]
[39.51818085 100.93405151]
[24.60698318 99.30426788]
[9.69578552 97.67448425]
[-5.21541214 96.04470062]
[-20.12660980 94.41492462]
[-35.03780746 92.78514099]
[-49.99247742 91.61988068]
[-64.97615051 90.92027283]
[-79.95983124 90.22067261]
[-94.94350433 89.52106476]
[-109.92718506 88.82145691]
[-124.91085815 88.12184906]
[-139.89453125 87.42224884]
[-154.87820435 86.72264099]
[-163.77565002 89.48457336]
[-170.31484985 85.76109314]
[-185.26951599 84.59583282]
[-200.22418213 83.43057251]
[-210.18969727 95.32461548]
[-225.25123596 99.05685425]
[-239.61734009 93.19216156]
[-247.76394653 79.98562622]
[-246.55853271 64.51544952]
[-236.46456909 52.73020935]
[-221.36343384 49.16158295]
[-207.06179810 55.18177795]
[-199.05892944 68.47590637]
[-184.10426331 69.64115906]
[-169.14958191 70.80641937]
[-154.17860413 71.73896027]
[-139.19493103 72.43856812]
[-124.21125031 73.13817596]
[-109.22757721 73.83778381]
[-94.24390411 74.53738403]
[-79.26022339 75.23699188]
[-64.27655029 75.93659973]
[-49.29287338 76.63620758]
[-45.10705185 74.01520538]
[-39.19957352 74.12199402]
[-33.40802383 77.87393951]
[-18.49682808 79.50372314]
[-3.58562994 81.13350677]
[11.32556725 82.76329041]
[26.23676491 84.39307404]
[41.14796066 86.02285004]
[56.05915833 87.65263367]
[70.97035980 89.28241730]
[82.90621185 74.20486450]
[101.44328308 69.08877563]
[119.42298889 75.90987396]
[129.90200806 92.03400421]
[144.90019226 91.80072784]
[159.89837646 91.56745148]
[173.57655334 83.61647034]
[186.42260742 91.15489960]
[201.42079163 90.92162323]
[216.41897583 90.68834686]
[231.41716003 90.45507050]
[239.69715881 79.69789886]
[252.49157715 75.78591156]
[265.00018311 79.94977570]
[272.66622925 90.43374634]
[287.66439819 90.66702271]
[292.78317261 76.41651154]
[302.25366211 64.60176086]
[315.04861450 56.50433350]
[329.78009033 53.00258255]
[344.85015869 54.47635651]
[358.62411499 60.76578140]
[369.60784912 71.18863678]
[376.60998535 84.61432648]
[378.87091064 99.58652496]
[376.14544678 114.48117065]
[368.72915649 127.68260193]
[357.42657471 137.75881958]
[343.46368408 143.61683655]
[328.35507202 144.62121582]
[313.73962402 140.66300964]
[301.20272827 132.17158508]
[292.10424805 120.06801605]
[287.43112183 105.66520691]
[272.43295288 105.43193054]
[260.96215820 117.62047577]
[243.89073181 117.83140564]
[231.65045166 105.45325470]
[216.65225220 105.68653107]
[201.65406799 105.91980743]
[186.65588379 106.15309143]
[174.05047607 114.08738708]
[160.13165283 106.56563568]
[145.13346863 106.79891205]
[130.13528442 107.03219604]
[125.94678497 116.86271667]
[118.66439819 124.68252563]
[109.15646362 129.55918884]
[98.55671692 130.91122437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[20 33]
[21 32]
[22 31]
[55 96]
[56 95]
[57 94]
[59 92]
[60 91]
[61 90]
[62 89]
[66 86]
[67 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
