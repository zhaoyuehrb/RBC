%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUUGCUCCGCUUUAGCAGCGGCGAAGGGAGGACCCCCGGGAGCCGGUCCCCGGCGUCCGGUCGCCCAGCCCUUUUCAGGCUUGGGCCCGCAUGGAGGGGACCGUGGAGUCCCAGACGCCUGACCUGCGGGAUGUGGAGGGUAAGGUGGGCAGGAAGACCCCUGAAGGGCUGCUCCGCGGGCUGCGAGGCG\
) } def
/len { sequence length } bind def

/coor [
[106.54962158 297.30633545]
[105.96118927 312.60052490]
[98.32254028 325.86361694]
[85.38897705 334.04785156]
[70.13254547 335.27255249]
[56.05905533 329.25625610]
[46.40249634 317.38153076]
[43.38187408 302.37704468]
[47.69130325 287.69073486]
[58.34050751 276.69741821]
[72.88237762 271.92327881]
[75.30084229 257.11953735]
[77.71930695 242.31578064]
[80.13777161 227.51203918]
[82.55623627 212.70828247]
[84.97470093 197.90452576]
[82.94751740 190.78616333]
[87.55405426 182.88143921]
[90.21191406 168.11880493]
[92.86978149 153.35615540]
[95.52764893 138.59350586]
[98.18550873 123.83085632]
[86.29754639 114.68338776]
[72.70863342 121.03488922]
[59.11972809 127.38639069]
[56.13755798 144.02888489]
[43.94793701 155.50451660]
[27.48586845 157.43911743]
[13.25601196 149.26754761]
[-0.22826383 155.83825684]
[-13.71253967 162.40898132]
[-18.62569427 177.43017578]
[-32.75899887 184.50303650]
[-47.72741318 179.43133545]
[-54.65044785 165.22404480]
[-49.42078400 150.31008911]
[-35.14109039 143.53765869]
[-20.28325462 148.92469788]
[-6.79897881 142.35398865]
[6.68529701 135.78327942]
[7.78067875 122.46965027]
[15.37548065 111.34865570]
[27.57228851 105.38847351]
[41.22902679 106.24366760]
[52.76822662 113.79747772]
[66.35713196 107.44597626]
[79.94604492 101.09447479]
[83.43591309 86.50609589]
[74.19248199 74.69258881]
[64.94905853 62.87907410]
[55.70563126 51.06556320]
[46.46220398 39.25205231]
[37.21877670 27.43853951]
[27.97534943 15.62502766]
[12.53460598 13.57047462]
[3.32874465 1.45821822]
[5.38260269 -13.24950981]
[-3.86082411 -25.06302071]
[-13.10425091 -36.87653351]
[-27.70195580 -42.97715378]
[-29.45121765 -57.76868439]
[-38.69464493 -69.58219910]
[-47.93807220 -81.39570618]
[-53.93774414 -84.22774506]
[-57.11884308 -88.95868683]
[-57.28211212 -93.74474335]
[-66.13814545 -105.85137939]
[-74.99418640 -117.95801544]
[-83.85021973 -130.06465149]
[-92.70625305 -142.17127991]
[-101.66002655 -154.20582581]
[-110.71094513 -166.16746521]
[-119.76186371 -178.12910461]
[-135.38766479 -178.73583984]
[-146.93292236 -189.28294373]
[-148.94630432 -204.79037476]
[-140.47715759 -217.93598938]
[-125.52435303 -222.51286316]
[-111.14814758 -216.35990906]
[-104.13655090 -202.38237000]
[-107.80021667 -187.18002319]
[-98.74930573 -175.21838379]
[-89.69838715 -163.25672913]
[-83.14596558 -159.81484985]
[-80.59961700 -151.02731323]
[-71.74358368 -138.92068481]
[-62.88755035 -126.81404877]
[-54.03151321 -114.70741272]
[-45.17547607 -102.60077667]
[-36.12456131 -90.63913727]
[-26.88113213 -78.82562256]
[-17.63770485 -67.01210785]
[-3.70115256 -61.75646973]
[-1.29073942 -46.11996078]
[7.95268774 -34.30644989]
[17.19611359 -22.49293709]
[31.96607018 -20.94892311]
[41.50850677 -9.10001945]
[39.78886032 6.38160086]
[49.03228760 18.19511223]
[58.27571487 30.00862503]
[67.51914215 41.82213593]
[76.76256561 53.63564682]
[86.00599670 65.44915771]
[95.24942017 77.26267242]
[108.98858643 83.28224945]
[123.93944550 82.06903839]
[138.89030457 80.85583496]
[153.84115601 79.64263153]
[168.79202271 78.42942047]
[183.74287415 77.21621704]
[198.69372559 76.00300598]
[213.62298584 74.54785919]
[228.52671814 72.85115051]
[243.43045044 71.15444183]
[247.64538574 55.54920197]
[260.72790527 43.60854340]
[279.69744873 40.25367737]
[298.96954346 48.12619400]
[313.02764893 42.89457703]
[327.08575439 37.66296387]
[341.14382935 32.43134689]
[355.20193481 27.19972992]
[362.18176270 11.16654396]
[378.27844238 5.25169086]
[393.37252808 12.65379333]
[407.34408569 7.19521952]
[421.31561279 1.73664546]
[431.35394287 -10.49210644]
[446.02423096 -7.91682243]
[459.99575806 -13.37539673]
[467.72503662 -27.43377876]
[483.55923462 -30.01395035]
[495.35174561 -19.13662529]
[494.05636597 -3.14595628]
[480.66677856 5.69138432]
[465.45434570 0.59614491]
[451.48281860 6.05471897]
[442.44381714 17.89303589]
[426.77420044 15.70818710]
[412.80264282 21.16676140]
[398.83111572 26.62533569]
[395.35821533 39.04233170]
[385.21347046 47.31185532]
[371.96289062 48.23772049]
[360.43356323 41.25783157]
[346.37545776 46.48944473]
[332.31735229 51.72106171]
[318.25924683 56.95267868]
[304.20114136 62.18429565]
[303.83694458 69.67544556]
[303.10848999 84.65774536]
[302.74429321 92.14890289]
[316.22857666 98.71961212]
[329.71282959 105.29032898]
[343.19711304 111.86104584]
[358.05496216 106.47399139]
[372.33465576 113.24642944]
[377.56430054 128.16038513]
[370.64126587 142.36767578]
[355.67285156 147.43937683]
[341.53955078 140.36651611]
[336.62640381 125.34532166]
[323.14212036 118.77460480]
[309.65783691 112.20388794]
[296.17358398 105.63317871]
[273.40765381 110.94591522]
[254.16699219 102.43642426]
[245.12715149 86.05817413]
[230.22341919 87.75488281]
[215.31968689 89.45159149]
[211.69055176 92.57606506]
[206.05612183 93.44464111]
[199.90693665 90.95386505]
[184.95608521 92.16706848]
[170.00521851 93.38027954]
[155.05436707 94.59348297]
[140.10351562 95.80669403]
[125.15265656 97.01989746]
[110.20179749 98.23310852]
[116.17792511 104.26413727]
[117.86650848 114.65374756]
[112.94815826 126.48872375]
[110.29029083 141.25137329]
[107.63243103 156.01402283]
[104.97456360 170.77665710]
[102.31669617 185.53930664]
[99.77845001 200.32299805]
[97.35998535 215.12673950]
[94.94152069 229.93049622]
[92.52305603 244.73425293]
[90.10459900 259.53799438]
[87.68613434 274.34173584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 193]
[12 192]
[13 191]
[14 190]
[15 189]
[16 188]
[18 187]
[19 186]
[20 185]
[21 184]
[22 183]
[23 47]
[24 46]
[25 45]
[29 40]
[30 39]
[31 38]
[48 105]
[49 104]
[50 103]
[51 102]
[52 101]
[53 100]
[54 99]
[57 96]
[58 95]
[59 94]
[61 92]
[62 91]
[63 90]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[71 83]
[72 82]
[73 81]
[106 180]
[107 179]
[108 178]
[109 177]
[110 176]
[111 175]
[112 174]
[113 171]
[114 170]
[115 169]
[119 150]
[120 149]
[121 148]
[122 147]
[123 146]
[126 142]
[127 141]
[128 140]
[130 138]
[131 137]
[153 166]
[154 165]
[155 164]
[156 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
