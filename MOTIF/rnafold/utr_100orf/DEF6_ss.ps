%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUCAGAGCCGCCCCCAGCCGGGCGGGCGCCUCAGCCAUGGCCCUGCGCAAGGAACUGCUCAAGUCCAUCUGGUACGCCUUUACCGCGCUGGACGUGGAGAAGAGUGGCAAAGUCUCCAAGUCCCAGCUCAAGGUGC\
) } def
/len { sequence length } bind def

/coor [
[229.83467102 152.65640259]
[223.27012634 135.82847595]
[208.64620972 132.49066162]
[194.02229309 129.15284729]
[179.39837646 125.81504059]
[164.77445984 122.47722626]
[150.15054321 119.13941193]
[135.52662659 115.80159760]
[120.90270233 112.46378326]
[105.72387695 127.63460541]
[81.22434998 126.04332733]
[69.70967865 135.65646362]
[58.19500732 145.26959229]
[46.68033600 154.88273621]
[35.16566467 164.49586487]
[23.65099335 174.10899353]
[22.48410988 189.87014771]
[10.45979500 200.12643433]
[-5.28813982 198.79298401]
[-15.41672325 186.66090393]
[-13.91684628 170.92794800]
[-1.67835975 160.92819214]
[14.03785992 162.59432983]
[25.55253029 152.98120117]
[37.06720352 143.36805725]
[48.58187485 133.75492859]
[60.09654236 124.14179230]
[71.61121368 114.52865601]
[68.10953522 99.94310760]
[53.48561478 96.60529327]
[38.86169815 93.26747894]
[24.23777962 89.92966461]
[14.52258205 99.77307892]
[1.31110919 103.48048401]
[-11.89634895 100.18130493]
[-21.65563583 90.84668732]
[-25.47682762 78.00698090]
[-40.02217102 74.34187317]
[-55.64083099 79.34082794]
[-67.59579468 68.11537170]
[-63.58881760 52.21329117]
[-47.74193954 47.99328613]
[-36.35706329 59.79653549]
[-21.81172180 63.46163940]
[-9.59374428 52.55489731]
[6.87986469 51.03492355]
[21.17065811 59.69357681]
[27.57559204 75.30574799]
[42.19951248 78.64356232]
[56.82342911 81.98137665]
[71.44734955 85.31919098]
[75.78400421 83.12452698]
[80.15816498 81.79759979]
[84.41976166 81.30441284]
[78.83535767 67.38268280]
[73.25095367 53.46096039]
[67.10167694 46.59250641]
[67.70130157 39.16367340]
[62.43067932 25.12015152]
[48.47726822 17.20296288]
[46.10978317 1.33555758]
[57.14435196 -10.30994892]
[73.11620331 -8.80012131]
[81.77309418 4.70683098]
[76.47420502 19.84952927]
[81.74482727 33.89305115]
[87.17268372 47.87655640]
[92.75708771 61.79828262]
[98.34149170 75.72000885]
[115.80533600 81.49432373]
[124.24051666 97.83986664]
[138.86444092 101.17767334]
[153.48835754 104.51548767]
[168.11227417 107.85330200]
[182.73619080 111.19111633]
[197.36010742 114.52893066]
[211.98402405 117.86674500]
[226.60794067 121.20455933]
[234.92506409 111.74655914]
[246.42103577 106.78167725]
[258.86355591 107.20646667]
[269.86526489 112.87741852]
[277.34173584 122.65035248]
[279.90640259 134.61077881]
[294.36584473 138.60133362]
[308.82528687 142.59187317]
[323.28472900 146.58242798]
[339.30981445 136.59930420]
[357.25872803 141.33506775]
[365.96969604 157.36743164]
[380.59362793 160.70524597]
[395.21752930 164.04306030]
[409.84146118 167.38087463]
[424.46536255 170.71868896]
[439.12582397 173.89222717]
[453.82095337 176.90106201]
[468.89266968 172.08918762]
[479.80923462 182.22218323]
[494.50436401 185.23103333]
[509.19949341 188.23986816]
[523.89465332 191.24870300]
[538.58978271 194.25755310]
[553.28491211 197.26638794]
[562.49011230 185.09153748]
[576.07006836 178.12400818]
[591.32855225 177.74719238]
[605.23590088 184.03591919]
[615.03082275 195.74156189]
[618.76855469 210.53994751]
[615.70697021 225.49284363]
[606.45385742 237.63134766]
[592.84655762 244.54536438]
[577.58673096 244.86207581]
[563.70422363 238.51863098]
[553.95544434 226.77450562]
[550.27606201 211.96151733]
[535.58093262 208.95268250]
[520.88580322 205.94384766]
[506.19064331 202.93499756]
[491.49551392 199.92616272]
[476.80038452 196.91731262]
[462.77978516 201.94439697]
[450.81210327 191.59619141]
[436.11697388 188.58735657]
[428.87341309 190.34172058]
[421.12756348 185.34260559]
[406.50363159 182.00479126]
[391.87973022 178.66697693]
[377.25579834 175.32917786]
[362.63189697 171.99136353]
[354.43920898 180.06900024]
[343.23892212 183.18450928]
[331.81777954 180.44136047]
[323.07678223 172.41613770]
[319.29418945 161.04187012]
[304.83474731 157.05133057]
[290.37530518 153.06077576]
[275.91586304 149.07022095]
[262.71127319 160.69798279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[29 51]
[30 50]
[31 49]
[32 48]
[37 44]
[38 43]
[54 69]
[55 68]
[56 67]
[58 66]
[59 65]
[84 138]
[85 137]
[86 136]
[87 135]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[95 124]
[96 123]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
