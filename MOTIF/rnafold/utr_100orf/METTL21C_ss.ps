%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUCUUUGGGACAGCCGGCUAUGGACGUGUGUCUGAGCUCCGCGCAGCAGCCUGGGCGCCGGGGGGAAGGACUCAGCUCCCCGGGUGGCUGGUUAGAGGCUGAGAAGAAGGGGGCUCCGC\
) } def
/len { sequence length } bind def

/coor [
[117.56277466 131.31336975]
[110.42738342 140.38037109]
[103.14785767 153.49555969]
[95.86832428 166.61076355]
[88.58879852 179.72596741]
[81.30926514 192.84115601]
[74.02973938 205.95635986]
[66.75020599 219.07156372]
[64.35004425 235.85475159]
[47.55831146 238.19444275]
[40.66164780 222.70661926]
[53.63500595 211.79203796]
[60.91453552 198.67683411]
[68.19406891 185.56163025]
[75.47359467 172.44642639]
[82.75312805 159.33123779]
[90.03265381 146.21603394]
[97.31218719 133.10083008]
[93.58964539 126.58986664]
[80.91349792 134.60954285]
[70.40613556 145.31446838]
[56.80958939 138.97932434]
[58.24695206 124.04835510]
[72.80287170 120.42353821]
[86.14456177 113.56793213]
[82.42201996 107.05696869]
[67.42683411 106.67697906]
[52.43165207 106.29698181]
[37.43646622 105.91699219]
[23.29765511 114.22518921]
[9.16857433 105.90045929]
[9.58400917 89.50657654]
[24.11659622 81.90815735]
[37.81645584 90.92180634]
[52.81164169 91.30179596]
[67.80683136 91.68179321]
[82.80201721 92.06178284]
[96.93315887 87.03079987]
[108.31452942 77.26021576]
[119.69589996 67.48963165]
[131.07727051 57.71903992]
[142.45864868 47.94845200]
[153.84001160 38.17786789]
[165.22138977 28.40727997]
[159.72819519 12.56104279]
[160.69183350 -4.14609337]
[167.93885803 -19.18999481]
[180.34861755 -30.30843735]
[196.02651978 -35.84127426]
[212.59315491 -34.97829056]
[227.54547119 -27.87771416]
[238.41735840 -38.21221924]
[249.28924561 -48.54672241]
[260.16113281 -58.88122559]
[271.03302002 -69.21572876]
[281.90493774 -79.55023193]
[291.96069336 -90.68043518]
[301.14230347 -102.54207611]
[303.47097778 -118.19096375]
[317.37988281 -123.51933289]
[326.56149292 -135.38096619]
[335.74307251 -147.24259949]
[344.92465210 -159.10424805]
[353.95526123 -171.08123779]
[362.83340454 -183.17166138]
[371.71157837 -195.26208496]
[380.58972168 -207.35250854]
[389.46789551 -219.44293213]
[398.34603882 -231.53335571]
[392.09680176 -245.56341553]
[393.71582031 -260.83673096]
[402.76754761 -273.24487305]
[416.81713867 -279.45010376]
[432.08529663 -277.78323364]
[444.46499634 -268.69265747]
[450.62615967 -254.62368774]
[448.91143799 -239.36080933]
[439.78210449 -227.00967407]
[425.69387817 -220.89263916]
[410.43646240 -222.65519714]
[401.55831909 -210.56477356]
[392.68014526 -198.47434998]
[383.80200195 -186.38392639]
[374.92382812 -174.29350281]
[366.04568481 -162.20307922]
[364.60635376 -154.86592102]
[356.78631592 -149.92265320]
[347.60470581 -138.06101990]
[338.42312622 -126.19937897]
[329.24154663 -114.33774567]
[327.56954956 -99.53727722]
[313.00393677 -93.36048126]
[303.82232666 -81.49884796]
[318.82223511 -81.55747223]
[329.63357544 -71.15965271]
[330.15972900 -56.16888046]
[320.10394287 -45.03867722]
[305.13687134 -44.04552841]
[293.69860840 -53.74948502]
[292.23944092 -68.67834473]
[281.36755371 -58.34383774]
[270.49563599 -48.00933456]
[259.62374878 -37.67483139]
[248.75186157 -27.34032631]
[237.87997437 -17.00582314]
[243.46084595 -4.84840441]
[244.99507141 8.46357632]
[242.31697083 21.61671829]
[235.67713928 33.30884933]
[225.71913147 42.37792587]
[213.41706848 47.91754150]
[199.98037720 49.36749268]
[186.73487854 46.57040024]
[174.99197388 39.78865051]
[163.61061096 49.55923843]
[152.22923279 59.32982635]
[140.84785461 69.10041046]
[129.46649170 78.87100220]
[118.08512115 88.64158630]
[106.70374298 98.41217804]
[112.68759918 100.32833099]
[117.75199127 105.18771362]
[120.80529022 112.54945374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[26 37]
[27 36]
[28 35]
[29 34]
[38 120]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[51 105]
[52 104]
[53 103]
[54 102]
[55 101]
[56 100]
[57 93]
[58 92]
[60 90]
[61 89]
[62 88]
[63 87]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
