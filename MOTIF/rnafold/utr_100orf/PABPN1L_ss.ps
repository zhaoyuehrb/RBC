%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGAGUGGAGGGGAGGCCUCGCCUGGCCCACCUUCCUCCUGCCCCUCUACCAUGUGGCCCUUCCCGAGCCGCUCUCUCUUCCCACCCCCGACUCAGGCCUGGCUCCAGACGGUCUCCUCAGACCCUGAGGCCCAGGGCUGGGGGGCCUGGA\
) } def
/len { sequence length } bind def

/coor [
[71.06270599 125.96157837]
[58.17484665 133.63641357]
[45.28699112 141.31124878]
[32.39913177 148.98609924]
[19.51127625 156.66093445]
[6.62341976 164.33576965]
[-6.18599844 172.14082336]
[-18.91566277 180.07528687]
[-27.16476631 196.50794983]
[-44.68867493 196.48268127]
[-57.25491714 204.67350769]
[-69.82115936 212.86433411]
[-82.38739777 221.05516052]
[-94.95364380 229.24597168]
[-107.51988220 237.43679810]
[-110.89762878 252.64300537]
[-123.75827026 260.77066040]
[-138.23423767 257.45678711]
[-150.80047607 265.64758301]
[-163.36672974 273.83840942]
[-175.93296814 282.02923584]
[-178.94709778 297.54345703]
[-192.09515381 306.31295776]
[-207.57661438 303.13497925]
[-216.20661926 289.89492798]
[-212.86514282 274.44793701]
[-199.53460693 265.95837402]
[-184.12379456 269.46298218]
[-171.55754089 261.27218628]
[-158.99130249 253.08135986]
[-146.42506409 244.89053345]
[-143.61376953 230.30860901]
[-130.98649597 221.82295227]
[-115.71070862 224.87055969]
[-103.14446259 216.67973328]
[-90.57822418 208.48890686]
[-78.01197815 200.29809570]
[-65.44573975 192.10726929]
[-52.87949371 183.91644287]
[-50.05989456 172.11524963]
[-39.60701370 165.19700623]
[-26.85012245 167.34562683]
[-14.12045860 159.41116333]
[-10.08385086 153.16732788]
[-1.05141926 151.44792175]
[11.83643723 143.77307129]
[24.72429466 136.09823608]
[37.61215210 128.42340088]
[50.50000763 120.74855804]
[63.38786316 113.07372284]
[61.64470673 106.34366608]
[61.12811279 99.41075134]
[61.85461044 92.49667358]
[63.80096054 85.82254791]
[66.90492249 79.60180664]
[71.06723022 74.03337097]
[76.15478516 69.29533386]
[69.41273499 55.89590073]
[62.67068863 42.49647141]
[55.92864227 29.09703827]
[49.18659210 15.69760513]
[33.83379745 14.18259239]
[21.75148010 4.58982897]
[16.79505920 -10.01966953]
[20.54611397 -24.98406410]
[31.80769539 -35.52827454]
[46.98627472 -38.28767776]
[61.23841858 -32.38175583]
[70.01632690 -19.69507408]
[70.51899719 -4.27590275]
[62.58602524 8.95555687]
[69.32807159 22.35499001]
[76.07012177 35.75442123]
[82.81217194 49.15385437]
[89.55421448 62.55328751]
[96.27289581 61.30271912]
[103.10675049 61.24798203]
[109.84459686 62.39076233]
[116.27822876 64.69574738]
[122.20882416 68.09171295]
[127.45312500 72.47370911]
[131.84906006 77.70632172]
[135.26080322 83.62786102]
[137.58290100 90.05532837]
[138.74360657 96.79011536]
[153.65051270 98.45879364]
[168.55740356 100.12746429]
[183.49505615 101.49368286]
[198.45732117 102.55687714]
[213.41960144 103.62007904]
[228.38186646 104.68327332]
[243.34414673 105.74646759]
[247.29240417 103.63677216]
[251.30073547 102.99588013]
[254.88911438 103.65622711]
[257.68466187 105.30851746]
[259.45925903 107.55039215]
[274.28628540 109.82180786]
[289.11331177 112.09322357]
[303.92599487 106.53488159]
[315.33483887 116.11021423]
[330.16186523 118.38163757]
[344.98889160 120.65305328]
[359.81591797 122.92446899]
[374.64294434 125.19588470]
[389.49221802 127.31692505]
[404.36224365 129.28738403]
[419.05923462 123.42996216]
[430.65982056 132.77210999]
[445.52981567 134.74256897]
[460.39984131 136.71301270]
[466.73562622 134.51365662]
[472.36773682 135.70735168]
[475.82785034 139.07650757]
[490.60580444 141.64794922]
[505.38375854 144.21940613]
[520.16168213 146.79084778]
[534.93963623 149.36230469]
[550.14251709 143.21380615]
[562.90045166 153.51756287]
[560.08917236 169.67393494]
[544.60064697 175.06265259]
[532.36816406 164.14024353]
[517.59027100 161.56880188]
[502.81228638 158.99734497]
[488.03436279 156.42590332]
[473.25640869 153.85444641]
[458.42938232 151.58303833]
[443.55938721 149.61257935]
[428.68936157 147.64213562]
[415.05596924 153.64048767]
[402.39178467 144.15739441]
[387.52178955 142.18693542]
[380.43609619 144.43922424]
[372.37152100 140.02290344]
[357.54449463 137.75149536]
[342.71746826 135.48007202]
[327.89047241 133.20866394]
[313.06344604 130.93724060]
[299.31127930 136.65805054]
[286.84188843 126.92024994]
[272.01486206 124.64883423]
[257.18783569 122.37741852]
[242.28094482 120.70874023]
[227.31867981 119.64554596]
[212.35639954 118.58235168]
[197.39413452 117.51914978]
[182.43185425 116.45595551]
[178.26219177 118.89264679]
[172.50836182 118.69483948]
[166.88871765 115.03436279]
[151.98182678 113.36568451]
[137.07493591 111.69700623]
[120.76923370 132.86349487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 43]
[8 42]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[18 31]
[19 30]
[20 29]
[21 28]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[85 153]
[86 152]
[87 151]
[88 148]
[89 147]
[90 146]
[91 145]
[92 144]
[97 143]
[98 142]
[99 141]
[101 139]
[102 138]
[103 137]
[104 136]
[105 135]
[106 133]
[107 132]
[109 130]
[110 129]
[111 128]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
