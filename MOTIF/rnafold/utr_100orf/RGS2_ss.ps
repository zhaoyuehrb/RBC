%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAACAGCCGGGGCUCCAGCGGGAGAACGAUAAUGCAAAGUGCUAUGUUCUUGGCUGUUCAACACGACUGCAGACCCAUGGACAAGAGCGCAGGCAGUGGCCACAAGAGCGAGGAGAAGCGAGAAAAGAUGA\
) } def
/len { sequence length } bind def

/coor [
[103.88476562 154.99458313]
[92.22019958 164.42527771]
[80.55563354 173.85597229]
[83.78375244 186.46664429]
[81.97639465 199.31044006]
[75.44093323 210.45950317]
[65.19169617 218.25410461]
[52.79270172 221.54969788]
[40.11904144 219.88485718]
[29.07329559 213.54554749]
[16.97951508 222.41912842]
[16.46807098 235.93435669]
[8.36003971 246.51461792]
[-4.18455315 250.40696716]
[-16.48646736 246.39555359]
[-28.78494453 254.98320007]
[-41.08341980 263.57083130]
[-53.38189697 272.15847778]
[-59.83795166 287.23333740]
[-76.15108490 288.91070557]
[-85.53974915 275.46508789]
[-78.34568024 260.72814941]
[-61.96953201 259.85998535]
[-49.67105484 251.27235413]
[-37.37257767 242.68472290]
[-25.07410240 234.09707642]
[-22.87552834 217.46623230]
[-9.08458233 207.33546448]
[8.10593319 210.32534790]
[20.19971275 201.45176697]
[17.67628479 184.49851990]
[24.06742668 168.49942017]
[37.71630859 157.84204102]
[54.96283722 155.49722290]
[71.12494659 162.19140625]
[82.78950500 152.76071167]
[94.45407104 143.33001709]
[71.03944397 127.59576416]
[63.79092026 102.86819458]
[73.11808777 81.48342896]
[91.84629059 72.20996857]
[91.49465179 57.21408844]
[91.14301300 42.21821213]
[90.79137421 27.22233391]
[90.43973541 12.22645664]
[80.48876190 -3.21583819]
[89.38742065 -18.29497337]
[88.68433380 -33.27848816]
[87.98125458 -48.26200104]
[87.27816772 -63.24551392]
[86.57508850 -78.22902679]
[78.19944763 -91.65136719]
[85.33168793 -104.72731781]
[84.62860107 -119.71083069]
[83.92551422 -134.69433594]
[82.87137604 -149.65725708]
[81.46675110 -164.59133911]
[80.06212616 -179.52543640]
[78.65750885 -194.45951843]
[76.90317535 -209.35658264]
[74.80010223 -224.20841980]
[62.89323807 -234.96044922]
[64.01947784 -250.96391296]
[77.31487274 -259.94235229]
[92.58032990 -255.00823975]
[98.10549927 -239.94662476]
[89.65193939 -226.31149292]
[91.75501251 -211.45965576]
[95.04117584 -207.87730408]
[96.05062103 -202.16450500]
[93.59159851 -195.86415100]
[94.99621582 -180.93005371]
[96.40084076 -165.99597168]
[97.80546570 -151.06187439]
[100.92009735 -147.32943726]
[101.66066742 -141.57559204]
[98.90902710 -135.39743042]
[99.61211395 -120.41390991]
[100.31520081 -105.43039703]
[108.64054871 -93.07978058]
[101.55860138 -78.93211365]
[102.26168060 -63.94859695]
[102.96476746 -48.96508408]
[103.66785431 -33.98157120]
[104.37093353 -18.99805832]
[113.13271332 -10.57330227]
[113.78845978 1.96668518]
[105.43561554 11.87481785]
[105.78725433 26.87069511]
[106.13889313 41.86657333]
[106.49053192 56.86244965]
[106.84217072 71.85832977]
[128.62544250 77.64138031]
[143.68267822 100.26658630]
[158.61677551 98.86196136]
[173.55085754 97.45733643]
[186.60220337 87.52786255]
[201.62042236 94.11460114]
[203.15606689 110.44168854]
[189.62939453 119.71321869]
[174.95549011 112.39142609]
[160.02139282 113.79605103]
[145.08731079 115.20067596]
[142.83666992 122.35501862]
[157.14535522 126.85628510]
[171.45397949 131.35777283]
[166.95227051 145.66632080]
[152.64408875 141.16497803]
[138.33540344 136.66371155]
[136.08476257 143.81805420]
[147.52503967 153.51959229]
[162.56808472 149.71347046]
[176.96279907 155.50758362]
[185.17414856 168.67396545]
[184.04466248 184.14987183]
[174.00869751 195.98451233]
[158.92524719 199.62722778]
[144.59422302 193.67730713]
[136.52619934 180.42262268]
[137.82350159 164.95988464]
[126.38321686 155.25833130]
[131.77183533 169.25700378]
[142.84559631 179.37489319]
[148.57263184 193.23855591]
[147.86817932 208.22200012]
[140.86564636 221.48716736]
[128.89143372 230.52143860]
[114.21361542 233.61361694]
[99.61236572 230.17796326]
[87.85337830 220.86528015]
[81.16396332 207.43949890]
[80.81119537 192.44363403]
[86.86188507 178.71815491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[10 30]
[11 29]
[15 26]
[16 25]
[17 24]
[18 23]
[41 92]
[42 91]
[43 90]
[44 89]
[45 88]
[47 85]
[48 84]
[49 83]
[50 82]
[51 81]
[53 79]
[54 78]
[55 77]
[56 74]
[57 73]
[58 72]
[59 71]
[60 68]
[61 67]
[94 103]
[95 102]
[96 101]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
