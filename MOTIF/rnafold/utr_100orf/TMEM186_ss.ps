%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:32:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGAUUUACUUCCGGCAGCAGGUGGUGGGGCCAUGGCUGCCCUUCUCCGAGCUGUGCGUAGGUUUCGGGGAAAAGCUGUGUGGGAAAGGCCUCUCCAUGGGCUGUGGUGCUGCAGUGGGCAGGAGGAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[71.47341156 321.08764648]
[74.11176300 301.88638306]
[74.46080017 286.89044189]
[74.80983734 271.89450073]
[75.15886688 256.89855957]
[75.50790405 241.90263367]
[75.85693359 226.90669250]
[73.61494446 224.07368469]
[72.68445587 219.98356628]
[73.65481567 215.28903198]
[76.78998566 210.88685608]
[78.18423462 195.95179749]
[79.57848358 181.01672363]
[80.97273254 166.08166504]
[82.36698151 151.14660645]
[71.21980286 141.10964966]
[56.51229858 144.05738831]
[41.80479050 147.00514221]
[27.09728432 149.95289612]
[12.38977623 152.90063477]
[-2.31773138 155.84838867]
[-10.15037632 166.17111206]
[-22.52722359 168.28405762]
[-32.66936111 161.58679199]
[-47.44147873 164.19151306]
[-62.21359634 166.79623413]
[-76.98571014 169.40095520]
[-91.75782776 172.00567627]
[-106.30638885 180.71060181]
[-118.69856262 169.14035034]
[-111.01098633 154.02951050]
[-94.36254883 157.23356628]
[-79.59043121 154.62884521]
[-64.81832123 152.02410889]
[-50.04620361 149.41938782]
[-35.27408600 146.81466675]
[-22.51618767 134.82171631]
[-5.26548052 141.14088440]
[9.44202709 138.19313049]
[24.14953423 135.24539185]
[38.85704041 132.29763794]
[53.56454849 129.34988403]
[68.27205658 126.40213776]
[63.95923233 95.22364807]
[81.90814972 74.29256439]
[76.45125580 60.32036972]
[70.99435425 46.34817505]
[65.53746033 32.37597656]
[60.08055878 18.40378189]
[54.62366104 4.43158579]
[49.16676331 -9.54061031]
[43.70986557 -23.51280594]
[38.25296783 -37.48500443]
[32.63386917 -51.39276123]
[26.85332870 -65.23419952]
[11.87298012 -69.72007751]
[3.32407665 -82.81398010]
[5.24314976 -98.33335876]
[16.72407150 -108.95044708]
[32.34590149 -109.65216827]
[44.73249054 -100.10720062]
[48.03527069 -84.82238007]
[40.69476700 -71.01473236]
[46.47530365 -57.17329788]
[52.00636673 -52.16759109]
[52.22516251 -42.94190216]
[57.68206024 -28.96970367]
[63.13895798 -14.99750805]
[68.59585571 -1.02531242]
[74.05275726 12.94688416]
[79.50965118 26.91908073]
[84.96655273 40.89127731]
[90.42344666 54.86347198]
[95.88034821 68.83567047]
[110.75155640 70.46034241]
[123.18788147 78.77479553]
[136.34925842 71.57910156]
[149.51065063 64.38340759]
[162.67202759 57.18770599]
[167.07351685 45.00017548]
[178.25878906 39.29574966]
[189.93566895 42.66723633]
[203.26092529 35.77973938]
[216.58618164 28.89224243]
[229.91143799 22.00474548]
[243.15565491 14.96267223]
[256.31704712 7.76697540]
[260.52050781 -7.46805859]
[274.30667114 -15.19577026]
[289.49639893 -10.83144569]
[297.07794189 3.03563833]
[292.55325317 18.17838860]
[278.60678101 25.61287689]
[263.51272583 20.92835617]
[250.35134888 28.12405396]
[245.95121765 34.14805222]
[236.79893494 35.32999802]
[223.47367859 42.21749496]
[210.14842224 49.10499191]
[196.82316589 55.99248886]
[188.21771240 71.24178314]
[169.86772156 70.34909058]
[156.70634460 77.54478455]
[143.54496765 84.74047852]
[130.38357544 91.93618011]
[133.40362549 99.99864197]
[134.18894958 109.07080078]
[132.42810059 118.51194000]
[127.99723816 127.59140015]
[120.98465729 135.54405212]
[132.36236572 145.31890869]
[143.74006653 155.09376526]
[155.11776733 164.86862183]
[170.85595703 163.42469788]
[182.95195007 173.59635925]
[184.22938538 189.34893799]
[173.93040466 201.33671570]
[158.16520691 202.44754028]
[146.28700256 192.02239990]
[145.34291077 176.24632263]
[133.96520996 166.47146606]
[122.58750153 156.69660950]
[111.20980072 146.92175293]
[97.30204010 152.54084778]
[95.90779114 167.47592163]
[94.51354218 182.41098022]
[93.11929321 197.34603882]
[91.72505188 212.28109741]
[90.85287476 227.25572205]
[90.50384521 242.25166321]
[90.15480804 257.24758911]
[89.80577087 272.24353027]
[89.45674133 287.23947144]
[89.10770416 302.23541260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[5 131]
[6 130]
[7 129]
[11 128]
[12 127]
[13 126]
[14 125]
[15 124]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 64]
[55 63]
[76 105]
[77 104]
[78 103]
[79 102]
[82 100]
[83 99]
[84 98]
[85 97]
[86 95]
[87 94]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
