%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCGCCUGCGCCUGCGCAGGCCCGCUCCCCGAGCCCUGCCAACCAUGGUGAACUUGGGUCUGUCCCGGGUGGACGACGCCGUGGCUGCCAAGCACCCGGGACUCGGGGAGUAUGCCGCAUGCCAGUCACACGCCUUCAUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[90.32250214 189.96958923]
[90.00196075 174.97300720]
[89.68141174 159.97644043]
[89.36086273 144.97985840]
[86.96631622 139.10470581]
[85.52380371 133.19938660]
[76.81108856 145.40956116]
[68.09836578 157.61975098]
[59.38565063 169.82992554]
[50.67293167 182.04011536]
[41.96021271 194.25028992]
[33.24749374 206.46047974]
[32.21223831 222.82691956]
[17.40263557 229.87017822]
[4.05353069 220.34477234]
[5.89734077 204.04960632]
[21.03731155 197.74775696]
[29.75003052 185.53758240]
[38.46274948 173.32739258]
[47.17546844 161.11721802]
[55.88818741 148.90702820]
[64.60090637 136.69685364]
[73.31362915 124.48667145]
[63.95513535 103.53938293]
[69.06037903 81.17184448]
[86.58077240 66.35948944]
[84.02868652 51.57818985]
[81.47659302 36.79689026]
[78.92450714 22.01558876]
[76.37241364 7.23428917]
[73.82032776 -7.54701138]
[71.26824188 -22.32831192]
[68.71614838 -37.10961151]
[66.16406250 -51.89091110]
[63.61196899 -66.67221069]
[60.90208054 -81.42539978]
[58.03470230 -96.14878845]
[55.16732025 -110.87217712]
[51.82950592 -125.49609375]
[48.02468872 -140.00550842]
[44.21987152 -154.51493835]
[39.79854202 -168.84852600]
[34.76878357 -182.98010254]
[22.85199356 -193.38687134]
[25.87367058 -207.97175598]
[20.84391022 -222.10333252]
[15.81414986 -236.23490906]
[10.78438950 -250.36648560]
[5.75462914 -264.49807739]
[0.72486919 -278.62963867]
[-4.30489111 -292.76123047]
[-9.33465099 -306.89279175]
[-28.30570602 -320.20822144]
[-24.00323868 -342.23937988]
[-30.51149559 -355.75390625]
[-37.01975250 -369.26843262]
[-43.52800751 -382.78298950]
[-50.03626251 -396.29751587]
[-56.54451752 -409.81204224]
[-63.05277634 -423.32656860]
[-77.65970612 -429.96112061]
[-81.44000244 -445.55242920]
[-71.49375153 -458.14019775]
[-55.45086288 -458.06814575]
[-45.61806488 -445.39157104]
[-49.53824234 -429.83483887]
[-43.02998734 -416.32031250]
[-36.52172852 -402.80575562]
[-30.01347351 -389.29122925]
[-23.50521851 -375.77670288]
[-16.99696159 -362.26217651]
[-10.48870564 -348.74765015]
[-3.22829962 -348.13806152]
[3.41511607 -344.98321533]
[8.57104588 -339.64306641]
[11.54529285 -332.76730347]
[11.91318226 -325.21624756]
[9.57952213 -317.95343018]
[4.79692745 -311.92257690]
[9.82668781 -297.79098511]
[14.85644817 -283.65939331]
[19.88620758 -269.52783203]
[24.91596794 -255.39625549]
[29.94572830 -241.26466370]
[34.97548676 -227.13308716]
[40.00524902 -213.00151062]
[51.56227493 -203.60552979]
[48.90036011 -188.00987244]
[53.93012238 -173.87829590]
[56.48024750 -172.55987549]
[58.64193344 -170.11595154]
[59.97008896 -166.69670105]
[60.08512497 -162.61538696]
[58.72929382 -158.31976318]
[62.53411102 -143.81033325]
[66.33892822 -129.30090332]
[69.25447083 -127.20104980]
[71.26677704 -123.55149841]
[71.64356232 -118.80723572]
[69.89070892 -113.73955536]
[72.75808716 -99.01616669]
[75.62546539 -84.29277802]
[80.02249908 -78.28599548]
[78.39327240 -69.22430420]
[80.94535828 -54.44300079]
[83.49745178 -39.66170120]
[86.04953766 -24.88040161]
[88.60163116 -10.09910107]
[91.15371704 4.68219948]
[93.70581055 19.46349907]
[96.25789642 34.24480057]
[98.80998230 49.02610016]
[101.36207581 63.80739975]
[113.70690155 64.68115997]
[125.56436920 69.81951904]
[135.45075989 78.96908569]
[142.00735474 91.35975647]
[144.17948914 105.76360321]
[141.36897278 120.61522675]
[152.68611145 130.46014404]
[168.17620850 133.67997742]
[172.70042419 147.87084961]
[184.01756287 157.71575928]
[199.43421936 155.09645081]
[212.90151978 163.04414368]
[218.06060791 177.80618286]
[212.47554016 192.41238403]
[198.78340149 199.96614075]
[183.44918823 196.90080261]
[173.71327209 184.66372681]
[174.17263794 169.03289795]
[162.85549927 159.18797302]
[148.17488098 156.67231750]
[142.84118652 141.77728271]
[131.52404785 131.93235779]
[124.73239899 135.11410522]
[131.09587097 148.69740295]
[137.45912170 162.28082275]
[123.87560272 168.64384460]
[117.51256561 155.06088257]
[111.14909363 141.47756958]
[104.35743713 144.65931702]
[104.67798615 159.65588379]
[104.99853516 174.65246582]
[105.31907654 189.64903259]
[107.92095184 208.85528564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[34 105]
[35 104]
[36 102]
[37 101]
[38 100]
[39 96]
[40 95]
[41 94]
[42 89]
[43 88]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[119 135]
[120 134]
[122 132]
[123 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
