%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCUUCUUACCCUGCACCCAGAGCCUCGCCAGAGAAGACAAGGGCAGAAAGCACCAUGAGUGGGGGCCCAAUGGGAGGAAGGCCCGGGGGCCGAGGAGCACCAGCGGUUCAGCAGAACAUACCCUCCACCCUCCUCCAGGACCACGAGAACCAGC\
) } def
/len { sequence length } bind def

/coor [
[86.15966034 310.94537354]
[85.29209900 295.61102295]
[92.22228241 281.90451050]
[105.08602142 273.51284790]
[104.19179535 258.53955078]
[103.29756165 243.56622314]
[102.40333557 228.59289551]
[88.56405640 223.03053284]
[78.47073364 211.96554565]
[74.16488647 197.55648804]
[76.55187988 182.64601135]
[85.21115875 170.19996643]
[98.46917725 162.71755981]
[97.57495117 147.74423218]
[96.68071747 132.77091980]
[95.78649139 117.79759979]
[89.12502289 115.37840271]
[83.70684052 110.49479675]
[80.42938995 103.74724579]
[65.53601074 101.96197510]
[50.64262772 100.17669678]
[35.74924850 98.39142609]
[31.02288246 109.56713867]
[21.54215431 118.50139618]
[8.42835712 123.17581940]
[-6.35421371 122.14579773]
[-20.29123116 114.88253784]
[-34.53853226 119.57448578]
[-48.78583527 124.26643372]
[-59.30096817 136.85070801]
[-75.40820312 133.77029419]
[-80.53780365 118.19405365]
[-69.41287231 106.14549255]
[-53.47778320 110.01913452]
[-39.23048401 105.32717896]
[-24.98318100 100.63523102]
[-24.53606606 93.14857483]
[-39.50937271 92.25409698]
[-38.61465073 77.28080750]
[-23.64183998 78.17524719]
[-23.19472694 70.68859100]
[-36.78233337 64.33430481]
[-52.56075287 65.49704742]
[-60.81196213 53.09677124]
[-74.39956665 46.74248123]
[-88.04967499 40.52359009]
[-101.76093292 34.44071198]
[-117.18759918 38.84497452]
[-130.16517639 29.41299820]
[-130.73837280 13.38018799]
[-118.46747589 3.04554391]
[-102.76568604 6.33691978]
[-95.67805481 20.72945404]
[-81.96679688 26.81233406]
[-74.53673553 26.64926720]
[-68.04528046 33.15487671]
[-54.45767593 39.50916290]
[-39.65113068 37.89192200]
[-30.42804527 50.74669647]
[-16.84043884 57.10098267]
[9.32133389 51.35050583]
[30.44627953 63.11534119]
[37.53451920 83.49804688]
[52.42790222 85.28331757]
[67.32128143 87.06858826]
[82.21466064 88.85386658]
[93.72660065 79.23745728]
[94.62083435 64.26413727]
[95.51506042 49.29081726]
[96.40928650 34.31749344]
[97.30351257 19.34417343]
[89.32630157 9.16341496]
[90.41209412 -3.32172227]
[99.43068695 -11.43463612]
[100.62243652 -26.38721848]
[101.81419373 -41.33980179]
[103.00594330 -56.29238510]
[91.73712921 -67.13433838]
[90.12520599 -82.68862152]
[98.93126678 -95.61097717]
[113.99736786 -99.79986572]
[128.20974731 -93.27742004]
[134.85775757 -79.12333679]
[130.80241394 -64.02075195]
[117.95852661 -55.10063171]
[116.76676941 -40.14804840]
[115.57501984 -25.19546700]
[114.38327026 -10.24288368]
[122.77696228 5.14207172]
[112.27683258 20.23839951]
[111.38260651 35.21172333]
[110.48838043 50.18504333]
[109.59415436 65.15836334]
[108.69992828 80.13168335]
[119.41144562 90.63231659]
[134.36402893 89.44056702]
[149.31661987 88.24880981]
[164.26919556 87.05706024]
[179.22178650 85.86531067]
[194.17436218 84.67355347]
[201.10475159 69.69001770]
[214.55946350 60.28669357]
[230.82537842 58.94352341]
[245.47114563 65.93176270]
[254.55439758 79.26578522]
[269.48031616 77.77697754]
[277.76184082 73.79219055]
[284.71737671 76.40998077]
[299.66995239 75.21822357]
[314.62252808 74.02647400]
[320.08337402 59.77368546]
[331.19335938 49.30798340]
[345.74661255 44.70734406]
[360.85354614 46.88522339]
[373.51467896 55.40920639]
[381.21615601 68.58684540]
[382.42880249 83.80171204]
[376.91189575 98.03289032]
[365.76077271 108.45475769]
[351.18951416 112.99804688]
[336.09127808 110.76069641]
[323.46380615 102.18692017]
[315.81430054 88.97905731]
[300.86172485 90.17080688]
[285.90911865 91.36256409]
[270.96914673 92.70290375]
[256.04321289 94.19171143]
[251.23979187 107.00732422]
[241.32760620 116.54041290]
[228.20869446 120.88233948]
[214.43489075 119.12826538]
[202.71154785 111.56504059]
[195.36611938 99.62613678]
[180.41352844 100.81788635]
[165.46095276 102.00964355]
[150.50836182 103.20139313]
[135.55578613 104.39315033]
[120.60320282 105.58489990]
[110.75981903 116.90336609]
[111.65404510 131.87669373]
[112.54827118 146.85000610]
[113.44249725 161.82333374]
[127.49681854 167.67462158]
[137.57585144 179.00157166]
[141.72048950 193.52197266]
[139.16020203 208.34107971]
[130.45555115 220.52871704]
[117.37666321 227.69866943]
[118.27088928 242.67199707]
[119.16511536 257.64532471]
[120.05934143 272.61862183]
[133.83039856 279.41961670]
[142.34265137 292.20388794]
[143.30632019 307.53250122]
[136.46220398 321.28219604]
[123.65132904 329.75430298]
[108.31974792 330.66995239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 151]
[5 150]
[6 149]
[7 148]
[13 142]
[14 141]
[15 140]
[16 139]
[19 66]
[20 65]
[21 64]
[22 63]
[27 36]
[28 35]
[29 34]
[41 60]
[42 59]
[44 57]
[45 56]
[46 54]
[47 53]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[74 88]
[75 87]
[76 86]
[77 85]
[95 138]
[96 137]
[97 136]
[98 135]
[99 134]
[100 133]
[105 127]
[106 126]
[108 125]
[109 124]
[110 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
