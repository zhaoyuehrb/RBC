%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGAGAAGAUUCAAAACCUACAAAAGCCUGCCACUGACAUUGAAGAACCAAUAUAUACAAUGGACAAACAAUCCAGUGCCGGCGGGGUGAAGAGGAGCGUCCCCUGUGAUUCCAACGAGGCCAACGAGAUGAUGCCGGAGACCCCAACUGGGGACUCAG\
) } def
/len { sequence length } bind def

/coor [
[54.84852219 207.07809448]
[57.41469955 187.86703491]
[57.70737457 172.86990356]
[58.00004959 157.87275696]
[58.29272842 142.87561035]
[58.58540344 127.87846375]
[56.54645920 142.73924255]
[48.06246948 155.10945129]
[34.93360901 162.36430359]
[19.94561768 162.96444702]
[6.27872658 156.78253174]
[-3.16715860 145.13026428]
[-6.38776398 130.48008728]
[-2.69972539 115.94054413]
[7.11441088 104.59670258]
[20.97223473 98.85555267]
[35.93332291 99.93528748]
[48.82302094 107.60666656]
[36.91529846 98.48492432]
[25.00757790 89.36317444]
[12.86863708 96.86248016]
[-1.07346284 99.75360107]
[-15.13425350 97.70812988]
[-27.62206078 90.99282074]
[-37.04152679 80.43503571]
[-42.27267075 67.32080841]
[-42.70402908 53.23826981]
[-38.30405426 39.88528442]
[-50.03152466 30.53293800]
[-61.75899887 21.18058968]
[-73.48647308 11.82824326]
[-85.21394348 2.47589660]
[-96.94141388 -6.87645054]
[-108.93756104 -15.88158321]
[-121.19210815 -24.53178787]
[-133.44665527 -33.18199158]
[-145.70120239 -41.83219910]
[-158.55470276 -40.41690445]
[-168.59286499 -47.91544342]
[-170.73890686 -59.85225296]
[-182.82234192 -68.73992157]
[-194.90577698 -77.62758636]
[-206.98921204 -86.51525116]
[-220.47518921 -79.45197296]
[-235.62878418 -78.94651794]
[-249.44259644 -85.04560852]
[-259.19836426 -96.49051666]
[-263.00186157 -110.97647858]
[-260.15045166 -125.61666107]
[-272.23388672 -134.50433350]
[-284.31732178 -143.39199829]
[-298.35229492 -137.15380859]
[-313.62435913 -138.78482056]
[-326.02536011 -147.84631348]
[-332.21951294 -161.90077209]
[-330.54064941 -177.16763306]
[-321.44033813 -189.54017639]
[-307.36651611 -195.69024658]
[-292.10501099 -193.96353149]
[-279.76104736 -184.82447815]
[-273.65509033 -170.73146057]
[-275.42965698 -155.47543335]
[-263.34622192 -146.58776855]
[-251.26278687 -137.70008850]
[-238.13645935 -144.78280640]
[-223.17510986 -145.46676636]
[-209.34382629 -139.56282043]
[-199.40698242 -128.19271851]
[-195.37583923 -113.57640076]
[-198.10154724 -98.59868622]
[-186.01811218 -89.71102142]
[-173.93467712 -80.82335663]
[-161.85124207 -71.93569183]
[-144.35058594 -70.96682739]
[-137.05101013 -54.08674622]
[-124.79645538 -45.43654251]
[-112.54190826 -36.78633499]
[-100.28736115 -28.13613129]
[-96.72316742 -28.39680672]
[-92.85730743 -26.91194344]
[-89.52646637 -23.55987358]
[-87.58906555 -18.60392189]
[-75.86159515 -9.25157547]
[-64.13412476 0.10077135]
[-52.40665054 9.45311832]
[-40.67918015 18.80546570]
[-28.95170593 28.15781212]
[-15.22459888 20.28652573]
[0.50897533 18.27052879]
[15.85142231 22.44675064]
[28.45335770 32.20624161]
[36.37335587 46.08276367]
[38.37702942 61.97302246]
[34.12932205 77.45545959]
[46.03704071 86.57720184]
[57.94476318 95.69894409]
[86.40213776 61.83897400]
[127.36820984 72.57028961]
[142.20787048 70.38291168]
[157.04751587 68.19552612]
[171.88717651 66.00814056]
[186.72683716 63.82075500]
[196.15223694 51.41916656]
[211.23292542 49.41224289]
[222.99784851 58.47435760]
[237.83750916 56.28697205]
[252.65512085 53.95491028]
[267.44927979 51.47839737]
[272.67944336 38.69465256]
[283.46594238 30.24199104]
[296.91491699 28.25178528]
[309.48510742 33.13962555]
[317.92007446 43.52416992]
[332.75973511 41.33678436]
[343.44396973 29.36905098]
[359.45358276 30.40438843]
[368.50735474 43.64857864]
[363.66003418 58.94181061]
[348.63003540 64.55242157]
[334.94711304 56.17644119]
[320.10745239 58.36382675]
[312.98797607 73.12969208]
[298.33190918 80.83573914]
[281.80386353 78.28051758]
[269.92578125 66.27254486]
[255.13163757 68.74906158]
[249.02290344 72.97637939]
[240.02490234 71.12662506]
[225.18524170 73.31401062]
[216.53540039 85.38529205]
[201.51704407 87.81501007]
[188.91421509 78.66040802]
[174.07455444 80.84779358]
[159.23490906 83.03517914]
[144.39524841 85.22256470]
[129.55560303 87.40995026]
[126.17024231 94.10243225]
[141.14732361 93.27365875]
[149.35351562 105.82987213]
[142.58251953 119.21469879]
[127.60541534 120.04314423]
[119.39953613 107.48740387]
[116.01418304 114.17989349]
[123.04476166 127.43020630]
[130.07534790 140.68052673]
[137.10592651 153.93084717]
[151.28521729 162.16976929]
[150.96917725 178.56587219]
[136.48291016 186.25224304]
[122.72866058 177.32180786]
[123.85562134 160.96142578]
[116.82503510 147.71110535]
[109.79444885 134.46080017]
[102.76386261 121.21047974]
[95.46853638 122.95064545]
[73.58255005 128.17114258]
[73.28987122 143.16828918]
[72.99719238 158.16543579]
[72.70452118 173.16256714]
[72.41184235 188.15971375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 160]
[3 159]
[4 158]
[5 157]
[6 156]
[18 96]
[19 95]
[20 94]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[34 78]
[35 77]
[36 76]
[37 75]
[40 73]
[41 72]
[42 71]
[43 70]
[49 64]
[50 63]
[51 62]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[105 129]
[106 128]
[107 126]
[108 125]
[113 121]
[114 120]
[143 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
