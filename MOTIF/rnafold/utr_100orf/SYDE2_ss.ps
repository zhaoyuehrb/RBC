%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCUGCGGACCCAGUUGCGAGAGGCCUAUUAUCUGCUGAUCCAGGCCAUGCACGACCUGCCCCCUGACUCGGGCGCGCGGCGGGGCGGCAGGGGCUUGGCGGAUCACAGCUUCCCCGCGGGAGCCCGGGCUCCGGGCCAGCCGCCUU\
) } def
/len { sequence length } bind def

/coor [
[73.58109283 299.71923828]
[79.62742615 283.88009644]
[79.62742615 268.88009644]
[79.62742615 253.88011169]
[79.62742615 238.88011169]
[71.89012909 226.15283203]
[79.62742615 212.35266113]
[79.62742615 197.35266113]
[79.47035217 182.35348511]
[79.15621948 167.35678101]
[75.84980011 160.69116211]
[78.99584961 152.04345703]
[78.99584961 137.04345703]
[78.99584961 122.04346466]
[77.30700684 110.09030151]
[80.78491211 100.52364349]
[87.28192139 95.15615082]
[94.17676544 94.51993561]
[90.75150299 79.91625214]
[87.32624054 65.31256866]
[83.90097046 50.70888901]
[70.98882294 37.62338638]
[76.63247681 21.03645134]
[72.90213013 6.50770330]
[69.17177582 -8.02104378]
[65.44142914 -22.54979134]
[61.71108246 -37.07853699]
[54.46896362 -23.94264412]
[40.95833969 -17.42628288]
[26.16987419 -19.93652534]
[15.56626129 -30.54611588]
[13.06435490 -45.33599091]
[19.58832932 -58.84294510]
[32.72830200 -66.07765961]
[47.63051987 -64.36771393]
[58.79090500 -54.34365845]
[57.53573990 -69.29105377]
[53.67710114 -77.64517212]
[56.41415787 -84.56407928]
[55.47230148 -99.53447723]
[54.53044128 -114.50488281]
[53.58858490 -129.47528076]
[52.64672470 -144.44567871]
[51.70486832 -159.41609192]
[48.31587982 -165.21740723]
[48.40312576 -170.98333740]
[51.05042267 -175.03065491]
[50.73628998 -190.02735901]
[50.42215347 -205.02406311]
[50.10801697 -220.02078247]
[42.08340454 -233.65588379]
[49.55246735 -246.54240417]
[49.23833084 -261.53912354]
[41.53077316 -267.17248535]
[37.37715912 -275.61456299]
[37.61050034 -284.88192749]
[42.04941940 -292.86257935]
[49.56868744 -297.79711914]
[50.19682312 -312.78396606]
[50.82495880 -327.77081299]
[51.45309448 -342.75765991]
[52.08123016 -357.74447632]
[52.70936203 -372.73132324]
[53.18052292 -387.72393799]
[53.49465942 -402.72064209]
[53.80879593 -417.71734619]
[54.12293243 -432.71405029]
[54.43706894 -447.71078491]
[51.47281265 -456.42245483]
[54.91809845 -463.01736450]
[55.54623413 -478.00421143]
[56.01739502 -492.99679565]
[56.33153152 -507.99353027]
[47.96132660 -522.09570312]
[56.22392654 -536.26123047]
[72.61947632 -535.91778564]
[80.28163910 -521.41870117]
[71.32823944 -507.67938232]
[71.01410675 -492.68267822]
[74.03849792 -485.88446045]
[70.53307343 -477.37606812]
[69.90493774 -462.38922119]
[69.43377686 -447.39663696]
[69.11964417 -432.39993286]
[68.80550385 -417.40319824]
[68.49137115 -402.40649414]
[68.17723846 -387.40979004]
[71.20162201 -380.61157227]
[67.69620514 -372.10321045]
[67.06806946 -357.11636353]
[66.43993378 -342.12951660]
[65.81179810 -327.14266968]
[65.18367004 -312.15582275]
[64.55553436 -297.16897583]
[75.75154114 -279.87338257]
[64.23503876 -261.85324097]
[64.54917908 -246.85653687]
[72.55132294 -234.29409790]
[65.10472870 -220.33491516]
[65.41886139 -205.33821106]
[65.73300171 -190.34149170]
[66.04713440 -175.34478760]
[66.67527008 -160.35794067]
[67.61712646 -145.38754272]
[68.55898285 -130.41714478]
[69.50083923 -115.44673920]
[70.44270325 -100.47634125]
[71.38455963 -85.50593567]
[72.48313141 -70.54621887]
[73.73829651 -55.59882736]
[76.23983002 -40.80888748]
[79.97017670 -26.28013992]
[83.70052338 -11.75139236]
[87.43087769 2.77735519]
[91.16122437 17.30610275]
[101.43901062 23.76345253]
[104.63832855 35.88812256]
[98.50465393 47.28362274]
[101.92992401 61.88730621]
[105.35518646 76.49098969]
[108.78044891 91.09467316]
[116.81784821 103.75959778]
[128.57325745 113.07681274]
[140.32865906 122.39402771]
[152.08406067 131.71124268]
[163.83946228 141.02845764]
[180.13288879 142.88751221]
[186.42057800 158.03337097]
[176.23428345 170.88528442]
[160.05279541 168.22229004]
[154.52223206 152.78385925]
[142.76683044 143.46664429]
[131.01142883 134.14942932]
[119.25603485 124.83221436]
[107.50063324 115.51499939]
[93.99584961 122.04346466]
[93.99584961 137.04345703]
[93.99584961 152.04345703]
[94.15292358 167.04263306]
[94.46706390 182.03935242]
[97.79352570 190.61927795]
[94.62742615 197.35266113]
[94.62742615 212.35266113]
[102.36473083 226.15283203]
[94.62742615 238.88011169]
[94.62742615 253.88011169]
[94.62742615 268.88009644]
[94.62742615 283.88009644]
[100.67376709 299.71923828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 148]
[3 147]
[4 146]
[5 145]
[7 143]
[8 142]
[9 140]
[10 139]
[12 138]
[13 137]
[14 136]
[18 121]
[19 120]
[20 119]
[21 118]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[36 110]
[37 109]
[39 108]
[40 107]
[41 106]
[42 105]
[43 104]
[44 103]
[47 102]
[48 101]
[49 100]
[50 99]
[52 97]
[53 96]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[70 82]
[71 81]
[72 79]
[73 78]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
