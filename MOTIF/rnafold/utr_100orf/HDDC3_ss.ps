%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCAGUCGUCGGCCCCAUCCGCGCGAUGGGCUCUGAGGCGGCGCAGCUGCUGGAGGCUGCCGACUUCGCGGCUCGCAAGCACCGGCAGCAGCGGCGGAAGGACCCCGAGGGGACCCCCUACAUCA\
) } def
/len { sequence length } bind def

/coor [
[117.33306885 171.36099243]
[131.58866882 166.69433594]
[146.29791260 169.62365723]
[136.90513611 157.92854309]
[127.51236725 146.23342896]
[118.11958313 134.53829956]
[108.72680664 122.84319305]
[92.16303253 123.16355896]
[79.19634247 112.85209656]
[64.63221741 116.44183350]
[50.06808853 120.03157043]
[35.50396347 123.62130737]
[20.93983459 127.21103668]
[6.37570715 130.80078125]
[-7.99798012 135.08996582]
[-22.14765739 140.06857300]
[-36.29733658 145.04719543]
[-50.44701004 150.02581787]
[-64.59668732 155.00442505]
[-71.74026489 160.86241150]
[-79.14884949 159.92788696]
[-93.41469574 164.56314087]
[-107.68054962 169.19839478]
[-116.21578217 182.78256226]
[-132.17343140 184.43577576]
[-143.31214905 172.88983154]
[-141.08726501 157.00181580]
[-127.20552063 148.95962524]
[-112.31580353 154.93255615]
[-98.04995728 150.29730225]
[-83.78410339 145.66204834]
[-69.57530975 140.85475159]
[-55.42562866 135.87612915]
[-41.27595139 130.89752197]
[-27.12627602 125.91889954]
[-12.97659779 120.94028473]
[-11.65182304 118.36037445]
[-9.17316341 116.17859650]
[-5.69791794 114.85736084]
[-1.55503142 114.78918457]
[2.78597212 116.23664856]
[17.35009956 112.64691162]
[31.91422653 109.05717468]
[46.47835541 105.46744537]
[61.04248047 101.87770844]
[75.60660553 98.28797150]
[77.93714905 89.45490265]
[83.34684753 82.09354401]
[91.08071899 77.23126984]
[100.05940247 75.54667664]
[104.69465637 61.28082657]
[109.32991028 47.01498032]
[113.96516418 32.74913406]
[118.60041809 18.48328400]
[123.23567200 4.21743727]
[127.87092590 -10.04841042]
[132.50617981 -24.31425858]
[127.34280396 -36.20601273]
[131.57122803 -48.03513718]
[142.38795471 -53.59062195]
[147.36656189 -67.74030304]
[152.34518433 -81.88997650]
[156.46038818 -96.31443787]
[159.69714355 -110.96105957]
[162.93391418 -125.60767365]
[166.17066956 -140.25428772]
[157.45986938 -153.44129944]
[160.70683289 -168.90846252]
[173.98521423 -177.47935486]
[189.41717529 -174.06903076]
[197.84719849 -160.70079041]
[194.27392578 -145.30575562]
[180.81729126 -137.01753235]
[177.58052063 -122.37091064]
[174.34376526 -107.72429657]
[171.10699463 -93.07767487]
[185.17674255 -98.27791595]
[198.14099121 -90.73284149]
[200.56954956 -75.93074799]
[190.69587708 -64.63868713]
[175.70208740 -65.07051849]
[166.49485779 -76.91136169]
[161.51625061 -62.76168060]
[156.53762817 -48.61200333]
[160.73118591 -31.61606598]
[146.77203369 -19.67900276]
[142.13677979 -5.41315556]
[137.50152588 8.85269165]
[132.86627197 23.11853981]
[128.23101807 37.38438797]
[123.59575653 51.65023422]
[118.96050262 65.91608429]
[114.32524872 80.18193054]
[124.05284882 95.59215546]
[120.42192078 113.45041656]
[129.81469727 125.14553070]
[139.20747375 136.84063721]
[148.60025024 148.53576660]
[157.99304199 160.23088074]
[168.72702026 170.70854187]
[180.64569092 179.81597900]
[193.57708740 178.89227295]
[203.33218384 186.80715942]
[204.98258972 198.85462952]
[216.67770386 208.24740601]
[232.28233337 210.85629272]
[237.36047363 224.85848999]
[249.05558777 234.25126648]
[260.75070190 243.64405823]
[277.03182983 245.60806274]
[283.22177124 260.79412842]
[272.95285034 273.58010864]
[256.78887939 270.81292725]
[251.35792542 255.33917236]
[239.66281128 245.94639587]
[227.96769714 236.55360413]
[213.19958496 234.61656189]
[207.28492737 219.94252014]
[195.58981323 210.54974365]
[178.16546631 208.86448669]
[171.53825378 191.73464966]
[159.61958313 182.62721252]
[162.90341187 197.26335144]
[158.58163452 211.62727356]
[147.76675415 222.02142334]
[133.24273682 225.77015686]
[118.74834442 221.90847778]
[108.01470947 211.43045044]
[103.80487823 197.03332520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[21 31]
[22 30]
[23 29]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[60 84]
[61 83]
[62 82]
[63 76]
[64 75]
[65 74]
[66 73]
[100 122]
[101 121]
[104 119]
[105 118]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
