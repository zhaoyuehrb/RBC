%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUCUAAAUUACAUCAAAAACUUCUAUGAAGGAUGUGUUAAACCUCCAACUGUGAUUGGUCAAUUCCACACCCUUUUCUUUGGAUCGAUCCGAAUAU\
) } def
/len { sequence length } bind def

/coor [
[53.29536819 257.87200928]
[41.94436646 267.67785645]
[29.08152008 275.39453125]
[15.08701706 280.79397583]
[0.37448964 283.71655273]
[-14.62120533 284.07592773]
[-29.45684052 281.86145020]
[-43.69392014 277.13858032]
[-56.91164398 270.04690552]
[-68.71932983 260.79602051]
[-78.76799011 249.65940857]
[-86.76060486 236.96617126]
[-92.46094513 223.09152222]
[-95.70052338 208.44552612]
[-96.38359070 193.46109009]
[-94.48995972 178.58110046]
[-90.07559204 164.24536133]
[-83.27097321 150.87759399]
[-74.27721405 138.87290955]
[-63.36014938 128.58613586]
[-50.84245682 120.32131195]
[-37.09411621 114.32272339]
[-22.52148438 110.76766205]
[-7.55528688 109.76120758]
[7.36212254 111.33311462]
[21.78983307 115.43692017]
[35.30140305 121.95131683]
[47.49747849 130.68377686]
[58.01757431 141.37619019]
[66.55075073 153.71250916]
[72.84201813 167.32041931]
[76.98654175 152.90435791]
[81.13106537 138.48829651]
[85.27559662 124.07222748]
[89.42012024 109.65616608]
[86.23367310 96.04226685]
[96.16381836 86.19931030]
[100.30834198 71.78324127]
[104.45286560 57.36717987]
[108.59739685 42.95111465]
[96.75299835 34.73030472]
[88.06041718 23.25471497]
[83.36862946 9.66733551]
[83.12899017 -4.68372107]
[87.35179901 -18.37896156]
[95.60663605 -30.06791878]
[107.06619263 -38.60232544]
[120.58914948 -43.14889526]
[134.83386230 -43.27068329]
[139.42472839 -57.55088043]
[144.01557922 -71.83107758]
[148.60644531 -86.11127472]
[141.16563416 -100.05436707]
[145.84330750 -115.15055847]
[159.86428833 -122.44354248]
[174.91017151 -117.60652161]
[182.05451965 -103.50921631]
[177.05868530 -88.51531219]
[162.88664246 -81.52041626]
[158.29577637 -67.24021912]
[153.70492554 -52.96002197]
[149.11405945 -38.67982483]
[161.61706543 -29.24586105]
[170.17471313 -16.09568024]
[173.74887085 -0.79130781]
[171.89456177 14.84195709]
[164.81544495 28.93322754]
[153.34149170 39.78992462]
[138.83175659 46.10108948]
[123.01345825 47.09564209]
[118.86893463 61.51170731]
[114.72440338 75.92777252]
[110.57987976 90.34383392]
[113.76632690 103.95773315]
[103.83618164 113.80068970]
[99.69165802 128.21675110]
[95.54713440 142.63281250]
[91.40260315 157.04888916]
[87.25807953 171.46495056]
[88.45874023 174.07266235]
[89.04310608 176.78056335]
[89.02475739 179.45025635]
[98.86369324 190.77259827]
[108.70262146 202.09494019]
[118.54154968 213.41728210]
[128.38047791 224.73962402]
[138.21940613 236.06198120]
[153.89198303 240.88920593]
[157.28350830 256.93383789]
[144.90504456 267.69049072]
[129.49052429 262.09368896]
[126.89706421 245.90090942]
[117.05813599 234.57856750]
[107.21920776 223.25621033]
[97.38027191 211.93386841]
[87.54134369 200.61152649]
[77.70241547 189.28918457]
[77.73791504 204.28913879]
[75.20362091 219.07350159]
[70.17443848 233.20529175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[37 73]
[38 72]
[39 71]
[40 70]
[49 62]
[50 61]
[51 60]
[52 59]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
