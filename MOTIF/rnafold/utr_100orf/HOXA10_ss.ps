%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCGUAUUCAGCAUGUUUUGCACAAGAAAUGUCAGCCAGAAAGGGCUAUCUGCUCCCUUCGCCAAAUUAUCCCACAACAAUGUCAUGCUCGGAGAGCCCCGCCGCGAACUCUUUUUUGGUCGACUCGC\
) } def
/len { sequence length } bind def

/coor [
[-6.60821867 330.62393188]
[-10.51451397 341.78958130]
[-16.28247070 352.11279297]
[-23.73872757 361.28604126]
[-32.65966797 369.03640747]
[-42.77811432 375.13354492]
[-53.79132843 379.39660645]
[-65.37007904 381.69964600]
[-77.16848755 381.97521973]
[-88.83433533 380.21646118]
[-100.01961517 376.47723389]
[-110.39086151 370.87045288]
[-119.63916016 363.56460571]
[-131.03939819 373.31317139]
[-142.43965149 383.06173706]
[-145.11726379 398.87976074]
[-159.22297668 406.52230835]
[-173.93608093 400.12667847]
[-177.96994019 384.59906006]
[-168.23014832 371.85089111]
[-152.18820190 371.66149902]
[-140.78796387 361.91293335]
[-129.38771057 352.16436768]
[-137.68031311 335.55081177]
[-141.18847656 317.30566406]
[-139.64640808 298.77917480]
[-133.16233826 281.34411621]
[-122.21086121 266.29397583]
[-107.59828949 254.74708557]
[-90.40322876 247.56344604]
[-71.89698029 245.28073120]
[-53.44956970 248.07397461]
[-36.42828751 255.74227905]
[-27.09604263 243.99880981]
[-17.76379967 232.25534058]
[-15.90305138 217.47741699]
[-1.25975907 211.48704529]
[8.07248497 199.74356079]
[17.40472984 188.00009155]
[26.73697472 176.25662231]
[36.06921768 164.51313782]
[45.40146255 152.76966858]
[54.73370743 141.02618408]
[64.06594849 129.28271484]
[73.39819336 117.53923798]
[82.73043823 105.79576874]
[82.55058289 90.79684448]
[72.93942261 79.28052521]
[57.15464020 76.41343689]
[49.68176651 62.21710968]
[56.25335312 47.58174896]
[71.82823944 43.73435211]
[84.45870209 53.62631226]
[84.45574188 69.66936493]
[94.06690216 81.18568420]
[90.85932159 66.53264618]
[100.94702148 55.43136978]
[115.83932495 57.22565079]
[123.00157166 70.40525818]
[116.40534210 83.87715149]
[128.47685242 74.97329712]
[140.54835510 66.06944275]
[152.61987305 57.16558456]
[164.69137573 48.26172638]
[159.86476135 36.52592468]
[157.74032593 24.02467346]
[158.41825867 11.37142944]
[161.86132812 -0.81377399]
[167.89689636 -11.93472385]
[176.22563171 -21.44819641]
[186.43623352 -28.89048767]
[198.02584839 -33.90002060]
[210.42477417 -36.23490906]
[223.02449036 -35.78462601]
[235.20753479 -32.57524490]
[246.37771606 -26.76795197]
[256.26226807 -38.05048752]
[266.14682007 -49.33302689]
[268.80563354 -65.51520538]
[284.24261475 -71.04975128]
[296.57754517 -60.24320221]
[293.12130737 -44.21240997]
[277.42935181 -39.44847488]
[267.54479980 -28.16593742]
[257.66024780 -16.88339996]
[261.04241943 -12.62454605]
[264.00210571 -8.06196404]
[266.51223755 -3.23742008]
[268.54980469 1.80492342]
[283.23922729 -1.23160195]
[297.92864990 -4.26812744]
[312.61810303 -7.30465317]
[326.90530396 -16.43220329]
[339.63122559 -5.23010588]
[332.38980103 10.09954166]
[315.65463257 7.38478231]
[300.96517944 10.42130756]
[286.27575684 13.45783329]
[271.58630371 16.49435806]
[269.61730957 36.17339325]
[261.01821899 54.01058960]
[246.81362915 67.84204102]
[228.70925903 75.98344421]
[208.88716125 77.43515015]
[189.74273682 72.00494385]
[173.59523010 60.33323669]
[161.52372742 69.23709106]
[149.45222473 78.14095306]
[137.38070679 87.04480743]
[125.30919647 95.94866180]
[119.32379150 111.43988037]
[106.48484802 118.15769196]
[94.47391510 115.12800598]
[85.14167023 126.87148285]
[75.80942535 138.61495972]
[66.47718048 150.35842896]
[57.14493942 162.10191345]
[47.81269455 173.84538269]
[38.48044968 185.58886719]
[29.14820480 197.33233643]
[19.81595993 209.07580566]
[10.48371601 220.81929016]
[7.95546389 236.43717957]
[-6.02032328 241.58758545]
[-15.35256767 253.33105469]
[-24.68481255 265.07452393]
[-17.03647804 274.12963867]
[-11.06288815 284.36264038]
[-6.94118071 295.46743774]
[-4.79311275 307.11203003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 23]
[14 22]
[15 21]
[33 126]
[34 125]
[35 124]
[37 122]
[38 121]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[44 115]
[45 114]
[46 113]
[47 55]
[48 54]
[60 110]
[61 109]
[62 108]
[63 107]
[64 106]
[76 85]
[77 84]
[78 83]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
