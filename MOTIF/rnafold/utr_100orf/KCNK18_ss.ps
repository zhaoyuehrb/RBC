%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGUCUCGGGGCACCCCCAGGCCAGGAGAUGCUGCCCAGAGGCCCUGGGAAAGCUCUUCCCUGGCCUCUGCUUCCUCUGCUUUCUGGUGACCUACG\
) } def
/len { sequence length } bind def

/coor [
[88.46978760 221.09700012]
[76.22658539 211.56370544]
[71.95751953 196.64544678]
[77.30413055 182.07858276]
[90.21053314 173.46438599]
[90.67703247 158.47163391]
[91.14353180 143.47889709]
[91.61002350 128.48614502]
[92.07652283 113.49340820]
[85.66048431 109.60953522]
[72.82841492 101.84178925]
[66.41237640 97.95791626]
[53.34492874 105.32283020]
[40.27748871 112.68774414]
[27.21004295 120.05265045]
[16.38029480 133.09692383]
[0.84783113 126.30141449]
[3.07795048 109.49478149]
[19.84513283 106.98520660]
[32.91257477 99.62030029]
[45.98001862 92.25538635]
[59.04746246 84.89047241]
[75.03651428 80.36089325]
[88.92478943 83.49747467]
[97.80869293 92.32033539]
[104.96949768 79.13993073]
[112.13029480 65.95953369]
[119.29109192 52.77912903]
[126.45188904 39.59872818]
[133.61268616 26.41832733]
[140.77348328 13.23792553]
[147.93428040 0.05752493]
[148.15296936 -6.83967161]
[151.43267822 -11.75426292]
[155.97221375 -13.69936943]
[163.93856812 -26.40909004]
[154.20585632 -42.70975494]
[153.87599182 -61.61284637]
[162.95764160 -78.10437012]
[178.97351074 -87.84921265]
[197.63562012 -88.33061981]
[203.96315002 -101.93070984]
[210.29066467 -115.53079987]
[216.61819458 -129.13088989]
[222.94572449 -142.73097229]
[229.27323914 -156.33106995]
[235.60076904 -169.93115234]
[241.92829895 -183.53125000]
[238.23780823 -196.01071167]
[243.92562866 -207.26562500]
[255.40399170 -211.42077637]
[262.15142822 -224.81750488]
[268.89883423 -238.21423340]
[275.64627075 -251.61096191]
[282.39370728 -265.00769043]
[278.75064087 -280.63162231]
[288.80718994 -293.13143921]
[304.84881592 -292.91833496]
[314.56976318 -280.15579224]
[310.51296997 -264.63415527]
[295.79040527 -258.26025391]
[289.04299927 -244.86354065]
[282.29556274 -231.46681213]
[275.54815674 -218.07008362]
[268.80072021 -204.67335510]
[270.81768799 -187.31729126]
[255.52838135 -177.20372009]
[249.20085144 -163.60363770]
[242.87333679 -150.00354004]
[236.54580688 -136.40345764]
[230.21827698 -122.80336761]
[223.89076233 -109.20327759]
[217.56323242 -95.60318756]
[211.23570251 -82.00309753]
[219.23872375 -73.83831787]
[224.30992126 -63.56152344]
[225.92889404 -52.18929291]
[223.91767883 -40.85244370]
[218.46009827 -30.68356514]
[210.08517456 -22.70388603]
[199.61581421 -17.72071075]
[188.08801270 -16.24577332]
[176.64830017 -18.44272232]
[168.68193054 -5.73300266]
[161.11468506 7.21832323]
[153.95388794 20.39872360]
[146.79309082 33.57912445]
[139.63229370 46.75952530]
[132.47149658 59.93992615]
[125.31069183 73.12033081]
[118.14989471 86.30072784]
[110.98909760 99.48113251]
[107.06926727 113.95990753]
[106.60276794 128.95265198]
[106.13627625 143.94538879]
[105.66977692 158.93814087]
[105.20327759 173.93087769]
[117.54917145 183.33081055]
[121.97982025 198.20187378]
[116.79154968 212.82588196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[12 22]
[13 21]
[14 20]
[15 19]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[30 87]
[31 86]
[32 85]
[35 84]
[36 83]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
