%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUCUGUCGCCACCUCACUUGGUGUCUGCUGUCCCCGCCAGGCAAGCCUGGGGUGAGAGCACAGAGGAGUGGGCCGGGACCAUGCGGGGGACGCGGCUGGCGCUCCUGGCGCUGGUGCUGGCUGCCUGCGGAGAGCUGGCGCCGGCCCUGCGCUGCUACGUCUGUCCGGAGCCCACAGGAG\
) } def
/len { sequence length } bind def

/coor [
[-138.77644348 223.60018921]
[-152.73062134 229.10301208]
[-157.16204834 234.06140137]
[-162.61567688 235.76356506]
[-167.25633240 234.54650879]
[-181.39024353 239.56970215]
[-195.52415466 244.59289551]
[-209.65806580 249.61610413]
[-223.79199219 254.63929749]
[-217.72268677 261.26919556]
[-214.25202942 270.77346802]
[-214.35675049 282.19787598]
[-218.68617249 294.30157471]
[-227.95245361 306.09716797]
[-237.21873474 317.89276123]
[-246.48501587 329.68835449]
[-244.35202026 345.34805298]
[-253.98321533 357.87863159]
[-269.66458130 359.84594727]
[-282.09265137 350.08282471]
[-283.89404297 334.38153076]
[-274.00006104 322.05737305]
[-258.28060913 320.42205811]
[-249.01432800 308.62646484]
[-239.74804688 296.83090210]
[-230.48175049 285.03530884]
[-233.76058960 278.28997803]
[-248.72264099 277.22378540]
[-240.31823730 264.79934692]
[-243.59707642 258.05404663]
[-258.59707642 258.05404663]
[-273.59707642 258.05404663]
[-287.39724731 265.79132080]
[-300.12451172 258.05404663]
[-315.12451172 258.05404663]
[-328.92468262 265.79132080]
[-341.65194702 258.05404663]
[-356.65194702 258.05404663]
[-365.25741577 261.18945312]
[-371.90750122 257.92379761]
[-386.90533447 257.66769409]
[-401.90313721 257.41159058]
[-416.90093994 257.15551758]
[-431.89877319 256.89941406]
[-445.96844482 265.32412720]
[-460.16583252 257.11642456]
[-459.88583374 240.71965027]
[-445.41653442 233.00143433]
[-431.64266968 241.90159607]
[-416.64486694 242.15769958]
[-401.64703369 242.41378784]
[-386.64923096 242.66989136]
[-371.65142822 242.92597961]
[-356.65194702 243.05403137]
[-341.65194702 243.05403137]
[-328.92468262 235.31672668]
[-315.12451172 243.05403137]
[-300.12451172 243.05403137]
[-287.39724731 235.31672668]
[-273.59707642 243.05403137]
[-258.59707642 243.05403137]
[-243.59707642 243.05403137]
[-228.81518555 240.50537109]
[-214.68127441 235.48217773]
[-200.54734802 230.45898438]
[-186.41343689 225.43579102]
[-172.27952576 220.41259766]
[-158.23342896 215.14883423]
[-144.27925110 209.64601135]
[-132.34967041 190.62724304]
[-109.41826630 194.08106995]
[-95.98411560 187.40847778]
[-82.54995728 180.73588562]
[-69.11579895 174.06330872]
[-55.68164062 167.39071655]
[-42.24748230 160.71813965]
[-37.58275604 144.57138062]
[-22.38958359 136.62770081]
[-5.82849121 142.22685242]
[7.48978710 135.32586670]
[20.80806541 128.42489624]
[34.12634277 121.52391815]
[42.75835800 106.25634003]
[61.13640594 107.21693420]
[74.33492279 100.08958435]
[87.53343964 92.96222687]
[96.59698486 81.01015472]
[99.89911652 66.37813568]
[103.20125580 51.74612045]
[106.50338745 37.11410522]
[109.80552673 22.48208809]
[113.10765839 7.85007048]
[111.94358826 -1.23451841]
[116.59309387 -7.00255489]
[120.14456177 -21.57606125]
[123.69602966 -36.14956665]
[116.62240601 -50.54899216]
[123.60002136 -64.99517822]
[139.27626038 -68.40625763]
[151.62562561 -58.16552734]
[151.17477417 -42.12881088]
[138.26953125 -32.59810257]
[134.71806335 -18.02459526]
[131.16659546 -3.45108843]
[127.73967743 11.15220547]
[124.43753815 25.78422165]
[121.13540649 40.41623688]
[117.83326721 55.04825592]
[114.53113556 69.68027496]
[111.22900391 84.31228638]
[121.56050873 95.18702698]
[136.34240723 92.63836670]
[151.12429810 90.08971405]
[165.90618896 87.54106140]
[178.19105530 77.57147217]
[192.04791260 83.03376770]
[206.82980347 80.48511505]
[214.77740479 75.93312836]
[221.88566589 78.02138519]
[236.70890808 75.72547150]
[251.53216553 73.42955780]
[266.35540771 71.13364410]
[281.17868042 68.83773041]
[296.00192261 66.54182434]
[304.02606201 62.12619019]
[311.09765625 64.33549500]
[325.95791626 62.29299927]
[340.81820679 60.25049973]
[353.43627930 50.70614243]
[367.09857178 56.63834381]
[381.95886230 54.59584427]
[392.75936890 42.73291779]
[408.75811768 43.92440414]
[417.68225098 57.25629425]
[412.68594360 72.50150299]
[397.60192871 77.96521759]
[384.00137329 69.45613098]
[369.14108276 71.49863434]
[357.58590698 80.89689636]
[342.86071777 75.11078644]
[328.00042725 77.15328979]
[313.14013672 79.19578552]
[298.29782104 81.36507416]
[283.47457886 83.66098785]
[268.65133667 85.95689392]
[253.82807922 88.25280762]
[239.00482178 90.54872131]
[224.18156433 92.84463501]
[209.37846375 95.26700592]
[194.59657288 97.81565857]
[183.36900330 107.60295105]
[168.45484924 102.32295227]
[153.67295837 104.87160492]
[138.89105225 107.42026520]
[124.10916901 109.96891785]
[117.55464935 115.01403046]
[110.47324371 117.16760254]
[103.94173431 116.66072845]
[98.82635498 114.08242798]
[95.67538452 110.26831055]
[94.66078949 106.16074371]
[81.46227264 113.28810120]
[68.26376343 120.41545105]
[63.82293701 132.54165649]
[52.66359711 138.20159912]
[41.02732086 134.84219360]
[27.70904160 141.74317932]
[14.39076233 148.64414978]
[1.07248449 155.54512024]
[-1.50261545 168.78025818]
[-11.09558964 177.97595215]
[-24.04264069 179.93103027]
[-35.57489395 174.15229797]
[-49.00905228 180.82487488]
[-62.44321060 187.49746704]
[-75.87736511 194.17004395]
[-89.31152344 200.84263611]
[-102.74568176 207.51522827]
[-103.48822784 215.05276489]
[-106.78023529 221.79812622]
[-112.16654968 226.92698669]
[-118.93953705 229.83114624]
[-126.23183441 230.19036865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[13 26]
[14 25]
[15 24]
[16 23]
[30 62]
[31 61]
[32 60]
[34 58]
[35 57]
[37 55]
[38 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[71 178]
[72 177]
[73 176]
[74 175]
[75 174]
[76 173]
[79 169]
[80 168]
[81 167]
[82 166]
[84 163]
[85 162]
[86 161]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[94 104]
[95 103]
[96 102]
[111 155]
[112 154]
[113 153]
[114 152]
[116 150]
[117 149]
[119 148]
[120 147]
[121 146]
[122 145]
[123 144]
[124 143]
[126 142]
[127 141]
[128 140]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
