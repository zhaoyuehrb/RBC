%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACACCCGCGCCACCCGCCGGCUCCCGGCGCCGCCGCUUCCUCAGGGCCGGUUCCGGGUCCGAGCGCGCCCCCGGGCUCGGGUCGUCAUGAGCCUGGACUGCACCAGCCAUAUCGCGCUGGGUGCCGCUUCGCCAGCGCCCGAGGAAACUUACGAUCAUCUUUCGGAAGUCCCGGUCACGCGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[72.35499573 327.32034302]
[57.01499176 326.55877686]
[44.11964798 318.21578979]
[37.13774109 304.53555298]
[37.94737244 289.19802856]
[46.33075333 276.32888794]
[60.03279877 269.38989258]
[60.77655411 254.40835571]
[61.52030945 239.42680359]
[62.26406860 224.44525146]
[63.00782394 209.46369934]
[63.75157928 194.48214722]
[53.59543610 183.64756775]
[54.13629150 168.44354248]
[65.56946564 157.86430359]
[66.31322479 142.88275146]
[67.05697632 127.90120697]
[53.47402954 121.53697205]
[42.43817139 131.69619751]
[31.40231323 141.85542297]
[20.36645508 152.01463318]
[9.33059597 162.17385864]
[-1.70526230 172.33308411]
[-9.26341629 187.50907898]
[-25.93862724 184.44743347]
[-27.61278915 167.57633972]
[-11.86448574 161.29722595]
[-0.82862717 151.13800049]
[10.20723152 140.97877502]
[21.24308968 130.81956482]
[32.27894974 120.66033173]
[43.31480789 110.50111389]
[35.67835999 97.59046936]
[35.09886551 82.60166931]
[41.71570587 69.13996887]
[53.93733978 60.44331741]
[68.82408142 58.60352325]
[82.79522705 64.06311798]
[92.49028778 75.50889587]
[95.57733154 90.18702698]
[95.32932281 75.18907928]
[95.08131409 60.19112778]
[94.83330536 45.19318008]
[94.58529663 30.19522858]
[94.33728790 15.19727993]
[91.06159973 6.65068913]
[94.21122742 -0.05021705]
[94.21122742 -15.05021667]
[94.21122742 -30.05021667]
[94.21122742 -45.05021667]
[83.34545898 -62.01559448]
[93.68846130 -78.34064484]
[93.19250488 -93.33244324]
[92.69655609 -108.32424164]
[78.38379669 -120.71492767]
[77.66638184 -139.31320190]
[90.53360748 -152.31608582]
[89.54225159 -167.28327942]
[88.55089569 -182.25048828]
[76.94436646 -192.63925171]
[76.15219879 -207.83224487]
[86.12781525 -218.83326721]
[85.13645935 -233.80047607]
[76.50401306 -247.05911255]
[83.38324738 -260.26992798]
[82.39188385 -275.23712158]
[81.40052795 -290.20431519]
[80.40917206 -305.17153931]
[79.41780853 -320.13873291]
[78.42645264 -335.10592651]
[59.49534607 -341.45117188]
[46.31579208 -358.32980347]
[44.49830246 -381.12200928]
[56.21818161 -402.42663574]
[52.05714035 -416.83795166]
[47.89609528 -431.24926758]
[43.73505020 -445.66055298]
[39.57400894 -460.07186890]
[35.41296387 -474.48318481]
[31.25192070 -488.89447021]
[27.09087753 -503.30578613]
[22.92983246 -517.71710205]
[8.29355049 -522.87060547]
[-0.49055180 -535.66198730]
[-0.04480636 -551.17266846]
[9.45938873 -563.43847656]
[24.36747551 -567.74291992]
[38.94699097 -562.43096924]
[47.59181595 -549.54504395]
[46.97783279 -534.04010010]
[37.34113693 -521.87811279]
[41.50218201 -507.46682739]
[45.66322708 -493.05551147]
[49.82426834 -478.64422607]
[53.98531342 -464.23291016]
[58.14635468 -449.82159424]
[62.30739975 -435.41030884]
[66.46844482 -420.99899292]
[70.62948608 -406.58767700]
[78.12026215 -406.21582031]
[86.25489044 -418.81851196]
[93.10181427 -405.47204590]
[100.59258270 -405.10018921]
[106.16054535 -419.02850342]
[103.28430939 -435.17343140]
[116.00070190 -445.52841187]
[131.22819519 -439.44107056]
[133.30204773 -423.17358398]
[120.08885956 -413.46054077]
[114.52089691 -399.53222656]
[121.74383545 -386.52365112]
[123.97535706 -372.40408325]
[121.33537292 -358.95004272]
[114.53334045 -347.72305298]
[104.73746490 -339.88854980]
[93.39365387 -336.09729004]
[94.38501740 -321.13009644]
[95.37637329 -306.16290283]
[96.36772919 -291.19567871]
[97.35909271 -276.22848511]
[98.35044861 -261.26129150]
[106.91198730 -249.07319641]
[100.10366058 -234.79183960]
[101.09502411 -219.82463074]
[112.43444061 -210.23541260]
[113.65303802 -195.07066345]
[103.51809692 -183.24185181]
[104.50945282 -168.27464294]
[105.50081635 -153.30743408]
[115.52593231 -147.81726074]
[121.71296692 -138.06416321]
[122.42266846 -126.41578674]
[117.36251068 -115.76694489]
[107.68835449 -108.82019806]
[108.18430328 -93.82839203]
[108.68025970 -78.83659363]
[116.75387573 -72.53748322]
[120.08833313 -62.62318420]
[117.34976196 -52.30045700]
[109.21122742 -45.05021667]
[109.21122742 -30.05021667]
[109.21122742 -15.05021667]
[109.21122742 -0.05021705]
[109.33523560 14.94927025]
[109.58324432 29.94721985]
[109.83125305 44.94517136]
[110.07926178 59.94311905]
[110.32727051 74.94107056]
[110.57527924 89.93901825]
[117.60518646 103.18969727]
[129.88455200 111.80462646]
[142.16392517 120.41955566]
[157.53483582 117.89507294]
[169.86514282 126.80676270]
[172.17712402 141.47613525]
[184.45649719 150.09106445]
[196.73587036 158.70599365]
[211.79664612 154.49803162]
[226.01727295 161.00245667]
[232.68321228 175.14811707]
[228.64700317 190.25582886]
[215.81442261 199.19219971]
[200.24461365 197.73776245]
[189.28918457 186.57925415]
[188.12094116 170.98536682]
[175.84156799 162.37043762]
[163.56219482 153.75550842]
[148.98155212 156.57339478]
[136.40580750 148.01155090]
[133.54899597 132.69892883]
[121.26963043 124.08399963]
[108.99025726 115.46907043]
[102.25232697 118.76303864]
[101.21975708 133.72746277]
[88.77645874 125.35099030]
[82.03852844 128.64495850]
[81.29476929 143.62651062]
[80.55101776 158.60806274]
[90.88014221 170.26768494]
[89.91245270 185.45051575]
[78.73313141 195.22590637]
[77.98937225 210.20745850]
[77.24561310 225.18901062]
[76.50186157 240.17056274]
[75.75810242 255.15209961]
[75.01435089 270.13366699]
[87.96173859 278.39566040]
[95.02926636 292.03182983]
[94.31580353 307.37414551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 186]
[8 185]
[9 184]
[10 183]
[11 182]
[12 181]
[15 178]
[16 177]
[17 176]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[40 149]
[41 148]
[42 147]
[43 146]
[44 145]
[45 144]
[47 143]
[48 142]
[49 141]
[50 140]
[52 136]
[53 135]
[54 134]
[57 129]
[58 128]
[59 127]
[62 124]
[63 123]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[70 116]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[103 110]
[104 109]
[150 172]
[151 171]
[152 170]
[155 167]
[156 166]
[157 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
