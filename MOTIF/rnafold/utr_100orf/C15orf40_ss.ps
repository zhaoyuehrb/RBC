%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGGGCUCUUCCGGCGCCUUCCCAGGCGGGGAUGCUGCGGCUCCGCAGCGGGCUGAGGCACCUUCGGGCAACACCCAAUACUCGGGGCUCCGCUCGGCUUCUUUGCGCCGAGAUGCCUAAGAAGGCUGGUG\
) } def
/len { sequence length } bind def

/coor [
[46.21469116 277.62515259]
[39.79643250 291.18267822]
[41.75457764 309.44970703]
[27.03144455 318.92727661]
[20.93039513 332.63046265]
[14.82934570 346.33364868]
[8.72829533 360.03683472]
[7.80954599 376.96585083]
[-8.71223068 380.76943970]
[-16.94084740 365.94625854]
[-4.97488642 353.93576050]
[1.12616336 340.23260498]
[7.22721291 326.52941895]
[13.32826233 312.82623291]
[9.28353119 301.36514282]
[14.32793999 289.86709595]
[26.23892784 284.76440430]
[32.65718460 271.20690918]
[38.11408234 257.23471069]
[42.58303833 242.91589355]
[47.05199051 228.59707642]
[51.52094650 214.27825928]
[55.98989868 199.95945740]
[60.45885468 185.64064026]
[53.33697510 172.60934448]
[57.66515350 158.02436829]
[71.38185120 150.64265442]
[75.85080719 136.32383728]
[80.31976318 122.00502014]
[84.78871918 107.68620300]
[80.65415192 93.26728058]
[69.27645111 83.49242401]
[57.89874649 73.71755981]
[46.52104568 63.94270325]
[37.88804245 60.68195724]
[34.99574280 53.80559540]
[23.84856987 43.76863480]
[12.70139790 33.73167419]
[1.55422592 23.69471741]
[-13.87856483 20.21053314]
[-18.15950775 5.94439220]
[-29.30667877 -4.09256697]
[-40.45385361 -14.12952614]
[-51.60102463 -24.16648483]
[-60.15581512 -27.62723160]
[-62.88732529 -34.56903458]
[-73.79792786 -44.86265945]
[-84.70853424 -55.15628052]
[-100.37875366 -61.62780762]
[-98.49808502 -78.47711945]
[-81.78662872 -81.33430481]
[-74.41490936 -66.06688690]
[-63.50430298 -55.77326202]
[-52.59370041 -45.47963715]
[-41.56406403 -35.31365585]
[-30.41689301 -25.27669907]
[-19.26972008 -15.23973942]
[-8.12254810 -5.20278025]
[6.51292276 -2.43650794]
[11.59118462 12.54754448]
[22.73835754 22.58450317]
[33.88552856 32.62146378]
[45.03270340 42.65842056]
[56.29590225 52.56500244]
[67.67360687 62.33985901]
[79.05130768 72.11471558]
[90.42901611 81.88957977]
[105.34683990 80.32164764]
[114.44361115 68.39483643]
[123.54037476 56.46802521]
[132.49775696 44.43617630]
[141.31452942 32.30092239]
[141.61134338 27.75761795]
[143.22537231 23.96259689]
[145.74203491 21.24769783]
[148.68026733 19.76871300]
[151.55841064 19.49921227]
[161.46499634 8.23601151]
[171.37156677 -3.02718925]
[168.83650208 -18.45792007]
[176.85763550 -31.88161278]
[191.64762878 -36.96001053]
[206.22309875 -31.29524612]
[213.70196533 -17.56205368]
[210.55293274 -2.24482226]
[198.26286316 7.42411852]
[182.63478088 6.87939024]
[172.72819519 18.14259148]
[162.82160950 29.40579033]
[153.44978333 41.11770248]
[144.63301086 53.25295639]
[143.23359680 60.58039856]
[135.46719360 65.56478882]
[126.37042236 77.49160004]
[117.27365112 89.41841888]
[122.56761169 103.45315552]
[137.27511597 106.40090942]
[151.98262024 109.34865570]
[166.69013977 112.29640961]
[181.39764404 115.24415588]
[196.10514832 118.19190216]
[207.42329407 107.57685852]
[222.82339478 105.67516327]
[236.38380432 113.21804047]
[242.89025879 127.30512238]
[239.84089661 142.51962280]
[228.40826416 153.01126099]
[212.98843384 154.74578857]
[199.51065063 147.05624390]
[193.15739441 132.89941406]
[178.44989014 129.95166016]
[163.74238586 127.00391388]
[149.03488159 124.05616760]
[134.32737732 121.10841370]
[119.61986542 118.16066742]
[110.96764374 118.93937683]
[103.81441498 116.60434723]
[99.10752869 112.15515900]
[94.63857269 126.47397614]
[90.16962433 140.79278564]
[85.70066833 155.11160278]
[92.78357697 168.98497009]
[88.04744720 183.44261169]
[74.77766418 190.10958862]
[70.30871582 204.42840576]
[65.83975983 218.74722290]
[61.37080383 233.06604004]
[56.90185165 247.38485718]
[52.43289566 261.70367432]
[66.41739655 256.27838135]
[80.22751617 262.13336182]
[86.05136871 275.95660400]
[80.59461212 289.92886353]
[66.94393158 296.14651489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[4 14]
[5 13]
[6 12]
[7 11]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[27 121]
[28 120]
[29 119]
[30 118]
[31 67]
[32 66]
[33 65]
[34 64]
[36 63]
[37 62]
[38 61]
[39 60]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
[68 95]
[69 94]
[70 93]
[71 91]
[72 90]
[77 89]
[78 88]
[79 87]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
